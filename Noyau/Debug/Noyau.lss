
Noyau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000070dc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000870dc  000870dc  000170dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000fd8  20070000  000870e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000006c0  20070fd8  000880bc  00020fd8  2**2
                  ALLOC
  4 .stack        00002000  20071698  0008877c  00020fd8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020fd8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00021001  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001e188  00000000  00000000  0002105a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004a45  00000000  00000000  0003f1e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000065a8  00000000  00000000  00043c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c80  00000000  00000000  0004a1cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b30  00000000  00000000  0004ae4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001cded  00000000  00000000  0004b97f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016721  00000000  00000000  0006876c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00066029  00000000  00000000  0007ee8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000028cc  00000000  00000000  000e4eb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	98 36 07 20 3d 1f 08 00 39 1f 08 00 39 1f 08 00     .6. =...9...9...
   80010:	39 1f 08 00 39 1f 08 00 39 1f 08 00 00 00 00 00     9...9...9.......
	...
   8002c:	39 1f 08 00 39 1f 08 00 00 00 00 00 39 1f 08 00     9...9.......9...
   8003c:	39 1f 08 00 39 1f 08 00 39 1f 08 00 f5 0b 08 00     9...9...9.......
   8004c:	39 1f 08 00 39 1f 08 00 39 1f 08 00 39 1f 08 00     9...9...9...9...
   8005c:	39 1f 08 00 39 1f 08 00 39 1f 08 00 00 00 00 00     9...9...9.......
   8006c:	ad 1d 08 00 c1 1d 08 00 d5 1d 08 00 e9 1d 08 00     ................
	...
   80084:	59 15 08 00 39 1f 08 00 39 1f 08 00 39 1f 08 00     Y...9...9...9...
   80094:	39 1f 08 00 39 1f 08 00 39 1f 08 00 39 1f 08 00     9...9...9...9...
   800a4:	00 00 00 00 39 1f 08 00 d5 17 08 00 39 1f 08 00     ....9.......9...
   800b4:	39 1f 08 00 39 1f 08 00 39 1f 08 00 39 1f 08 00     9...9...9...9...
   800c4:	39 1f 08 00 39 1f 08 00 39 1f 08 00 39 1f 08 00     9...9...9...9...
   800d4:	39 1f 08 00 39 1f 08 00 39 1f 08 00 39 1f 08 00     9...9...9...9...
   800e4:	39 1f 08 00 39 1f 08 00 39 1f 08 00 39 1f 08 00     9...9...9...9...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070fd8 	.word	0x20070fd8
   80110:	00000000 	.word	0x00000000
   80114:	000870e4 	.word	0x000870e4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000870e4 	.word	0x000870e4
   80154:	20070fdc 	.word	0x20070fdc
   80158:	000870e4 	.word	0x000870e4
   8015c:	00000000 	.word	0x00000000

00080160 <nvm_init>:
#include "flash_efc.h"
#include "string.h"

status_code_t nvm_init(mem_type_t mem)
{
	switch (mem) {
   80160:	2800      	cmp	r0, #0
	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
   80162:	bf0c      	ite	eq
   80164:	2000      	moveq	r0, #0
   80166:	f06f 0007 	mvnne.w	r0, #7
   8016a:	4770      	bx	lr

0008016c <nvm_read>:
}

status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
	switch (mem) {
   8016c:	b938      	cbnz	r0, 8017e <nvm_read+0x12>
{
   8016e:	b510      	push	{r4, lr}
   80170:	4614      	mov	r4, r2
   80172:	461a      	mov	r2, r3
   80174:	4620      	mov	r0, r4
	case INT_FLASH:
		memcpy(buffer, (const void *)address, len);
   80176:	4b03      	ldr	r3, [pc, #12]	; (80184 <nvm_read+0x18>)
   80178:	4798      	blx	r3

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
   8017a:	2000      	movs	r0, #0
   8017c:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
   8017e:	f06f 0007 	mvn.w	r0, #7
   80182:	4770      	bx	lr
   80184:	0008217d 	.word	0x0008217d

00080188 <nvm_write>:
}

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
	switch (mem) {
   80188:	b968      	cbnz	r0, 801a6 <nvm_write+0x1e>
{
   8018a:	b510      	push	{r4, lr}
   8018c:	460c      	mov	r4, r1
   8018e:	4611      	mov	r1, r2
   80190:	461a      	mov	r2, r3
   80192:	4620      	mov	r0, r4
		if (flash_write(address, (const void *)buffer, len, false)) {
			return ERR_INVALID_ARG;
		}

#else
		if (flash_write(address, (const void *)buffer, len, true)) {
   80194:	2301      	movs	r3, #1
   80196:	4c05      	ldr	r4, [pc, #20]	; (801ac <nvm_write+0x24>)
   80198:	47a0      	blx	r4
   8019a:	2800      	cmp	r0, #0

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
   8019c:	bf14      	ite	ne
   8019e:	f06f 0007 	mvnne.w	r0, #7
   801a2:	2000      	moveq	r0, #0
   801a4:	bd10      	pop	{r4, pc}
		return ERR_INVALID_ARG;
   801a6:	f06f 0007 	mvn.w	r0, #7
   801aa:	4770      	bx	lr
   801ac:	000804a1 	.word	0x000804a1

000801b0 <efc_get_wait_state>:
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   801b0:	6800      	ldr	r0, [r0, #0]
}
   801b2:	f3c0 2003 	ubfx	r0, r0, #8, #4
   801b6:	4770      	bx	lr

000801b8 <efc_set_wait_state>:
{
   801b8:	b508      	push	{r3, lr}
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   801ba:	6803      	ldr	r3, [r0, #0]
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   801bc:	0209      	lsls	r1, r1, #8
   801be:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   801c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   801c6:	4319      	orrs	r1, r3
   801c8:	4b01      	ldr	r3, [pc, #4]	; (801d0 <efc_set_wait_state+0x18>)
   801ca:	4798      	blx	r3
   801cc:	bd08      	pop	{r3, pc}
   801ce:	bf00      	nop
   801d0:	20070079 	.word	0x20070079

000801d4 <efc_perform_command>:
{
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   801d4:	f1a1 030e 	sub.w	r3, r1, #14
   801d8:	2b01      	cmp	r3, #1
   801da:	d802      	bhi.n	801e2 <efc_perform_command+0xe>
		return EFC_RC_NOT_SUPPORT;
   801dc:	f04f 30ff 	mov.w	r0, #4294967295
   801e0:	4770      	bx	lr
{
   801e2:	b510      	push	{r4, lr}
   801e4:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   801e6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   801ea:	fab3 f383 	clz	r3, r3
   801ee:	095b      	lsrs	r3, r3, #5
   801f0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   801f2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   801f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   801f8:	2400      	movs	r4, #0
   801fa:	4b0b      	ldr	r3, [pc, #44]	; (80228 <efc_perform_command+0x54>)
   801fc:	701c      	strb	r4, [r3, #0]
	return flags;
   801fe:	9c01      	ldr	r4, [sp, #4]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   80200:	0212      	lsls	r2, r2, #8
   80202:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   80206:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   8020a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   8020e:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   80210:	4311      	orrs	r1, r2
   80212:	4b06      	ldr	r3, [pc, #24]	; (8022c <efc_perform_command+0x58>)
   80214:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80216:	b12c      	cbz	r4, 80224 <efc_perform_command+0x50>
		cpu_irq_enable();
   80218:	2201      	movs	r2, #1
   8021a:	4b03      	ldr	r3, [pc, #12]	; (80228 <efc_perform_command+0x54>)
   8021c:	701a      	strb	r2, [r3, #0]
   8021e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80222:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   80224:	b002      	add	sp, #8
   80226:	bd10      	pop	{r4, pc}
   80228:	20070620 	.word	0x20070620
   8022c:	2007007d 	.word	0x2007007d

00080230 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
   80230:	b921      	cbnz	r1, 8023c <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
   80232:	6843      	ldr	r3, [r0, #4]
   80234:	f023 0301 	bic.w	r3, r3, #1
   80238:	6043      	str	r3, [r0, #4]
   8023a:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
   8023c:	6843      	ldr	r3, [r0, #4]
   8023e:	f043 0301 	orr.w	r3, r3, #1
   80242:	6043      	str	r3, [r0, #4]
   80244:	4770      	bx	lr

00080246 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
   80246:	6201      	str	r1, [r0, #32]
   80248:	4770      	bx	lr

0008024a <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
   8024a:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
   8024c:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   8024e:	6884      	ldr	r4, [r0, #8]
   80250:	42a5      	cmp	r5, r4
   80252:	d003      	beq.n	8025c <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
   80254:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   80256:	6884      	ldr	r4, [r0, #8]
   80258:	42ac      	cmp	r4, r5
   8025a:	d1fb      	bne.n	80254 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
   8025c:	b161      	cbz	r1, 80278 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8025e:	f3c4 5001 	ubfx	r0, r4, #20, #2
   80262:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   80266:	f3c4 4003 	ubfx	r0, r4, #16, #4
   8026a:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
   8026e:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
   80272:	bf18      	it	ne
   80274:	300c      	addne	r0, #12
   80276:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
   80278:	b142      	cbz	r2, 8028c <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
   8027a:	f3c4 3102 	ubfx	r1, r4, #12, #3
   8027e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80282:	f3c4 2003 	ubfx	r0, r4, #8, #4
   80286:	eb00 0141 	add.w	r1, r0, r1, lsl #1
   8028a:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
   8028c:	b143      	cbz	r3, 802a0 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8028e:	f3c4 1202 	ubfx	r2, r4, #4, #3
   80292:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80296:	f004 040f 	and.w	r4, r4, #15
   8029a:	eb04 0442 	add.w	r4, r4, r2, lsl #1
   8029e:	601c      	str	r4, [r3, #0]
	}
}
   802a0:	bc30      	pop	{r4, r5}
   802a2:	4770      	bx	lr

000802a4 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
   802a4:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
   802a6:	6844      	ldr	r4, [r0, #4]
   802a8:	f014 0f01 	tst.w	r4, #1
   802ac:	d005      	beq.n	802ba <rtc_set_time+0x16>
		if (ul_hour > 12) {
   802ae:	290c      	cmp	r1, #12
   802b0:	d93d      	bls.n	8032e <rtc_set_time+0x8a>
			ul_hour -= 12;
   802b2:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
   802b4:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   802b8:	e000      	b.n	802bc <rtc_set_time+0x18>
	uint32_t ul_time = 0;
   802ba:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   802bc:	4c1d      	ldr	r4, [pc, #116]	; (80334 <rtc_set_time+0x90>)
   802be:	fba4 5603 	umull	r5, r6, r4, r3
   802c2:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
   802c4:	eb06 0586 	add.w	r5, r6, r6, lsl #2
   802c8:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
   802cc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
   802d0:	fba4 6502 	umull	r6, r5, r4, r2
   802d4:	08ed      	lsrs	r5, r5, #3
   802d6:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
   802da:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   802de:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
   802e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   802e6:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
   802e8:	fba4 4201 	umull	r4, r2, r4, r1
   802ec:	08d2      	lsrs	r2, r2, #3
   802ee:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
   802f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   802f6:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   802fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   802fe:	6983      	ldr	r3, [r0, #24]
   80300:	f013 0f04 	tst.w	r3, #4
   80304:	d0fb      	beq.n	802fe <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
   80306:	6803      	ldr	r3, [r0, #0]
   80308:	f043 0301 	orr.w	r3, r3, #1
   8030c:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   8030e:	6983      	ldr	r3, [r0, #24]
   80310:	f013 0f01 	tst.w	r3, #1
   80314:	d0fb      	beq.n	8030e <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
   80316:	2301      	movs	r3, #1
   80318:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
   8031a:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
   8031c:	6803      	ldr	r3, [r0, #0]
   8031e:	f023 0301 	bic.w	r3, r3, #1
   80322:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
   80324:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   80326:	f000 0001 	and.w	r0, r0, #1
   8032a:	bcf0      	pop	{r4, r5, r6, r7}
   8032c:	4770      	bx	lr
	uint32_t ul_time = 0;
   8032e:	2700      	movs	r7, #0
   80330:	e7c4      	b.n	802bc <rtc_set_time+0x18>
   80332:	bf00      	nop
   80334:	cccccccd 	.word	0xcccccccd

00080338 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
   80338:	b4f0      	push	{r4, r5, r6, r7}
   8033a:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
   8033c:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   8033e:	68c4      	ldr	r4, [r0, #12]
   80340:	42a5      	cmp	r5, r4
   80342:	d003      	beq.n	8034c <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
   80344:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   80346:	68c4      	ldr	r4, [r0, #12]
   80348:	42ac      	cmp	r4, r5
   8034a:	d1fb      	bne.n	80344 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
   8034c:	b199      	cbz	r1, 80376 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8034e:	f3c4 3003 	ubfx	r0, r4, #12, #4
   80352:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80356:	f3c4 2703 	ubfx	r7, r4, #8, #4
   8035a:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8035e:	f3c4 1002 	ubfx	r0, r4, #4, #3
   80362:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   80366:	f004 000f 	and.w	r0, r4, #15
   8036a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8036e:	2564      	movs	r5, #100	; 0x64
   80370:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
   80374:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
   80376:	b142      	cbz	r2, 8038a <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   80378:	f3c4 5000 	ubfx	r0, r4, #20, #1
   8037c:	0081      	lsls	r1, r0, #2
   8037e:	4408      	add	r0, r1
   80380:	f3c4 4103 	ubfx	r1, r4, #16, #4
   80384:	eb01 0140 	add.w	r1, r1, r0, lsl #1
   80388:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
   8038a:	b143      	cbz	r3, 8039e <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8038c:	f3c4 7201 	ubfx	r2, r4, #28, #2
   80390:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80394:	f3c4 6103 	ubfx	r1, r4, #24, #4
   80398:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   8039c:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
   8039e:	b116      	cbz	r6, 803a6 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
   803a0:	f3c4 5442 	ubfx	r4, r4, #21, #3
   803a4:	6034      	str	r4, [r6, #0]
	}
}
   803a6:	bcf0      	pop	{r4, r5, r6, r7}
   803a8:	4770      	bx	lr
	...

000803ac <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
   803ac:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   803ae:	4d2a      	ldr	r5, [pc, #168]	; (80458 <rtc_set_date+0xac>)
   803b0:	fba5 4603 	umull	r4, r6, r5, r3
   803b4:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
   803b6:	9c03      	ldr	r4, [sp, #12]
   803b8:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   803ba:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
   803be:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   803c2:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   803c6:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
   803ca:	fba5 6402 	umull	r6, r4, r5, r2
   803ce:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   803d0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
   803d4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   803d8:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   803dc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
   803e0:	4b1e      	ldr	r3, [pc, #120]	; (8045c <rtc_set_date+0xb0>)
   803e2:	fba3 4301 	umull	r4, r3, r3, r1
   803e6:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   803e8:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
   803ec:	4b1c      	ldr	r3, [pc, #112]	; (80460 <rtc_set_date+0xb4>)
   803ee:	fba3 4301 	umull	r4, r3, r3, r1
   803f2:	095b      	lsrs	r3, r3, #5
   803f4:	fba5 6403 	umull	r6, r4, r5, r3
   803f8:	08e4      	lsrs	r4, r4, #3
   803fa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   803fe:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80402:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
   80404:	fba5 4301 	umull	r4, r3, r5, r1
   80408:	08db      	lsrs	r3, r3, #3
   8040a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   8040e:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80412:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
   80416:	fba5 1503 	umull	r1, r5, r5, r3
   8041a:	08ed      	lsrs	r5, r5, #3
   8041c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   80420:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80424:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   80428:	6983      	ldr	r3, [r0, #24]
   8042a:	f013 0f04 	tst.w	r3, #4
   8042e:	d0fb      	beq.n	80428 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
   80430:	6803      	ldr	r3, [r0, #0]
   80432:	f043 0302 	orr.w	r3, r3, #2
   80436:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   80438:	6983      	ldr	r3, [r0, #24]
   8043a:	f013 0f01 	tst.w	r3, #1
   8043e:	d0fb      	beq.n	80438 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
   80440:	2301      	movs	r3, #1
   80442:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
   80444:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
   80446:	6803      	ldr	r3, [r0, #0]
   80448:	f023 0302 	bic.w	r3, r3, #2
   8044c:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
   8044e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   80450:	f000 0002 	and.w	r0, r0, #2
   80454:	bc70      	pop	{r4, r5, r6}
   80456:	4770      	bx	lr
   80458:	cccccccd 	.word	0xcccccccd
   8045c:	10624dd3 	.word	0x10624dd3
   80460:	51eb851f 	.word	0x51eb851f

00080464 <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
   80464:	b430      	push	{r4, r5}
	Efc *p_efc;
	uint16_t us_page;
	uint16_t us_offset;

#if (SAM3XA || SAM3U4)
	if (ul_addr >= IFLASH1_ADDR) {
   80466:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
   8046a:	d30d      	bcc.n	80488 <translate_address+0x24>
		p_efc = EFC1;
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   8046c:	f5a1 2440 	sub.w	r4, r1, #786432	; 0xc0000
   80470:	f3c4 240f 	ubfx	r4, r4, #8, #16
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   80474:	b2c9      	uxtb	r1, r1
		p_efc = EFC1;
   80476:	4d08      	ldr	r5, [pc, #32]	; (80498 <translate_address+0x34>)
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
#endif

	/* Store values */
	if (pp_efc) {
   80478:	b100      	cbz	r0, 8047c <translate_address+0x18>
		*pp_efc = p_efc;
   8047a:	6005      	str	r5, [r0, #0]
	}

	if (pus_page) {
   8047c:	b102      	cbz	r2, 80480 <translate_address+0x1c>
		*pus_page = us_page;
   8047e:	8014      	strh	r4, [r2, #0]
	}

	if (pus_offset) {
   80480:	b103      	cbz	r3, 80484 <translate_address+0x20>
		*pus_offset = us_offset;
   80482:	8019      	strh	r1, [r3, #0]
	}
}
   80484:	bc30      	pop	{r4, r5}
   80486:	4770      	bx	lr
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   80488:	f5a1 2400 	sub.w	r4, r1, #524288	; 0x80000
   8048c:	f3c4 240f 	ubfx	r4, r4, #8, #16
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   80490:	b2c9      	uxtb	r1, r1
		p_efc = EFC0;
   80492:	4d02      	ldr	r5, [pc, #8]	; (8049c <translate_address+0x38>)
   80494:	e7f0      	b.n	80478 <translate_address+0x14>
   80496:	bf00      	nop
   80498:	400e0c00 	.word	0x400e0c00
   8049c:	400e0a00 	.word	0x400e0a00

000804a0 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   804a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   804a4:	b085      	sub	sp, #20
   804a6:	468b      	mov	fp, r1
   804a8:	4692      	mov	sl, r2
   804aa:	9300      	str	r3, [sp, #0]
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
   804ac:	ab02      	add	r3, sp, #8
   804ae:	f10d 020a 	add.w	r2, sp, #10
   804b2:	4601      	mov	r1, r0
   804b4:	a803      	add	r0, sp, #12
   804b6:	4c33      	ldr	r4, [pc, #204]	; (80584 <flash_write+0xe4>)
   804b8:	47a0      	blx	r4

#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   804ba:	9803      	ldr	r0, [sp, #12]
   804bc:	4b32      	ldr	r3, [pc, #200]	; (80588 <flash_write+0xe8>)
   804be:	4798      	blx	r3
   804c0:	9001      	str	r0, [sp, #4]
	efc_set_wait_state(p_efc, 6);
   804c2:	2106      	movs	r1, #6
   804c4:	9803      	ldr	r0, [sp, #12]
   804c6:	4b31      	ldr	r3, [pc, #196]	; (8058c <flash_write+0xec>)
   804c8:	4798      	blx	r3
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
   804ca:	f1ba 0f00 	cmp.w	sl, #0
   804ce:	d050      	beq.n	80572 <flash_write+0xd2>
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   804d0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80598 <flash_write+0xf8>
   804d4:	f108 05fc 	add.w	r5, r8, #252	; 0xfc
   804d8:	e013      	b.n	80502 <flash_write+0x62>

		if (ul_erase_flag) {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   804da:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   804de:	2101      	movs	r1, #1
   804e0:	9803      	ldr	r0, [sp, #12]
   804e2:	4b2b      	ldr	r3, [pc, #172]	; (80590 <flash_write+0xf0>)
   804e4:	4798      	blx	r3
					us_page);
		}

		if (ul_error) {
   804e6:	2800      	cmp	r0, #0
   804e8:	d148      	bne.n	8057c <flash_write+0xdc>
			return ul_error;
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   804ea:	44bb      	add	fp, r7
		ul_size -= writeSize;
		us_page++;
   804ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   804f0:	3301      	adds	r3, #1
   804f2:	f8ad 300a 	strh.w	r3, [sp, #10]
		us_offset = 0;
   804f6:	2300      	movs	r3, #0
   804f8:	f8ad 3008 	strh.w	r3, [sp, #8]
	while (ul_size > 0) {
   804fc:	ebba 0a07 	subs.w	sl, sl, r7
   80500:	d037      	beq.n	80572 <flash_write+0xd2>
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   80502:	f8bd 6008 	ldrh.w	r6, [sp, #8]
   80506:	f5c6 7780 	rsb	r7, r6, #256	; 0x100
   8050a:	4557      	cmp	r7, sl
   8050c:	bf28      	it	cs
   8050e:	4657      	movcs	r7, sl
		compute_address(p_efc, us_page, 0, &ul_page_addr);
   80510:	f8bd 300a 	ldrh.w	r3, [sp, #10]
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   80514:	9a03      	ldr	r2, [sp, #12]
   80516:	491f      	ldr	r1, [pc, #124]	; (80594 <flash_write+0xf4>)
   80518:	428a      	cmp	r2, r1
   8051a:	bf0c      	ite	eq
   8051c:	f503 6300 	addeq.w	r3, r3, #2048	; 0x800
			IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
   80520:	f503 6340 	addne.w	r3, r3, #3072	; 0xc00
   80524:	021c      	lsls	r4, r3, #8
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   80526:	4632      	mov	r2, r6
   80528:	4621      	mov	r1, r4
   8052a:	4640      	mov	r0, r8
   8052c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8059c <flash_write+0xfc>
   80530:	47c8      	blx	r9
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   80532:	463a      	mov	r2, r7
   80534:	4659      	mov	r1, fp
   80536:	eb08 0006 	add.w	r0, r8, r6
   8053a:	47c8      	blx	r9
		memcpy(puc_page_buffer + us_offset + writeSize,
   8053c:	19f0      	adds	r0, r6, r7
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   8053e:	f5c6 7280 	rsb	r2, r6, #256	; 0x100
   80542:	1bd2      	subs	r2, r2, r7
		memcpy(puc_page_buffer + us_offset + writeSize,
   80544:	b292      	uxth	r2, r2
   80546:	1901      	adds	r1, r0, r4
   80548:	4440      	add	r0, r8
   8054a:	47c8      	blx	r9
   8054c:	f1a8 0304 	sub.w	r3, r8, #4
   80550:	3c04      	subs	r4, #4
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   80552:	f853 2f04 	ldr.w	r2, [r3, #4]!
   80556:	f844 2f04 	str.w	r2, [r4, #4]!
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   8055a:	42ab      	cmp	r3, r5
   8055c:	d1f9      	bne.n	80552 <flash_write+0xb2>
		if (ul_erase_flag) {
   8055e:	9b00      	ldr	r3, [sp, #0]
   80560:	2b00      	cmp	r3, #0
   80562:	d0ba      	beq.n	804da <flash_write+0x3a>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   80564:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   80568:	2103      	movs	r1, #3
   8056a:	9803      	ldr	r0, [sp, #12]
   8056c:	4b08      	ldr	r3, [pc, #32]	; (80590 <flash_write+0xf0>)
   8056e:	4798      	blx	r3
   80570:	e7b9      	b.n	804e6 <flash_write+0x46>
	}

#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   80572:	9901      	ldr	r1, [sp, #4]
   80574:	9803      	ldr	r0, [sp, #12]
   80576:	4b05      	ldr	r3, [pc, #20]	; (8058c <flash_write+0xec>)
   80578:	4798      	blx	r3
#endif

	return FLASH_RC_OK;
   8057a:	2000      	movs	r0, #0
}
   8057c:	b005      	add	sp, #20
   8057e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80582:	bf00      	nop
   80584:	00080465 	.word	0x00080465
   80588:	000801b1 	.word	0x000801b1
   8058c:	000801b9 	.word	0x000801b9
   80590:	000801d5 	.word	0x000801d5
   80594:	400e0a00 	.word	0x400e0a00
   80598:	20070ff4 	.word	0x20070ff4
   8059c:	0008217d 	.word	0x0008217d

000805a0 <Lcd>:
/////////////////////////////////////////////////////////////////////////////////////

const char line2addr[]={ 0x00, 0x40, 0x14, 0x54 };

 uint32_t Lcd(uint32_t sc, ...)
 {
   805a0:	b40f      	push	{r0, r1, r2, r3}
   805a2:	b538      	push	{r3, r4, r5, lr}
	switch (sc)
   805a4:	9904      	ldr	r1, [sp, #16]
   805a6:	2907      	cmp	r1, #7
   805a8:	f000 80dc 	beq.w	80764 <Lcd+0x1c4>
   805ac:	d844      	bhi.n	80638 <Lcd+0x98>
   805ae:	2902      	cmp	r1, #2
   805b0:	f000 80cd 	beq.w	8074e <Lcd+0x1ae>
   805b4:	d91a      	bls.n	805ec <Lcd+0x4c>
   805b6:	2905      	cmp	r1, #5
   805b8:	f000 80e9 	beq.w	8078e <Lcd+0x1ee>
   805bc:	2906      	cmp	r1, #6
   805be:	f040 80f5 	bne.w	807ac <Lcd+0x20c>
		delay_ms(1);
		gpio_set_pin_low(LCD_E);
		break;
	case _LCD_COMMAND:
#define cmd		((char)pa1)
		gpio_set_pin_low(LCD_RS);	//RS=0 => COMMAND
   805c2:	2068      	movs	r0, #104	; 0x68
   805c4:	4b7c      	ldr	r3, [pc, #496]	; (807b8 <Lcd+0x218>)
   805c6:	4798      	blx	r3
		_LcdPutData(cmd);
   805c8:	9c05      	ldr	r4, [sp, #20]
   805ca:	b2e1      	uxtb	r1, r4
   805cc:	2001      	movs	r0, #1
   805ce:	f7ff ffe7 	bl	805a0 <Lcd>
		_LcdNybble();
   805d2:	2002      	movs	r0, #2
   805d4:	f7ff ffe4 	bl	805a0 <Lcd>
		_LcdPutData(cmd<<4);
   805d8:	0121      	lsls	r1, r4, #4
   805da:	f401 617f 	and.w	r1, r1, #4080	; 0xff0
   805de:	2001      	movs	r0, #1
   805e0:	f7ff ffde 	bl	805a0 <Lcd>
		_LcdNybble();
   805e4:	2002      	movs	r0, #2
   805e6:	f7ff ffdb 	bl	805a0 <Lcd>
#undef cmd
		break;
   805ea:	e046      	b.n	8067a <Lcd+0xda>
	switch (sc)
   805ec:	2901      	cmp	r1, #1
   805ee:	f040 80dd 	bne.w	807ac <Lcd+0x20c>
		if(mIsBitsSet(data,LCD_DATA7_MSK)) gpio_set_pin_high(LCD_DATA7); //P1
   805f2:	9c05      	ldr	r4, [sp, #20]
   805f4:	f014 0f80 	tst.w	r4, #128	; 0x80
   805f8:	f04f 0039 	mov.w	r0, #57	; 0x39
   805fc:	bf14      	ite	ne
   805fe:	4b6f      	ldrne	r3, [pc, #444]	; (807bc <Lcd+0x21c>)
		else gpio_set_pin_low(LCD_DATA7);
   80600:	4b6d      	ldreq	r3, [pc, #436]	; (807b8 <Lcd+0x218>)
   80602:	4798      	blx	r3
		if(mIsBitsSet(data,LCD_DATA6_MSK)) gpio_set_pin_high(LCD_DATA6); //P2
   80604:	b2e4      	uxtb	r4, r4
   80606:	f014 0f40 	tst.w	r4, #64	; 0x40
   8060a:	f04f 005c 	mov.w	r0, #92	; 0x5c
   8060e:	bf14      	ite	ne
   80610:	4b6a      	ldrne	r3, [pc, #424]	; (807bc <Lcd+0x21c>)
		else gpio_set_pin_low(LCD_DATA6);
   80612:	4b69      	ldreq	r3, [pc, #420]	; (807b8 <Lcd+0x218>)
   80614:	4798      	blx	r3
		if(mIsBitsSet(data,LCD_DATA5_MSK)) gpio_set_pin_high(LCD_DATA5); //P3
   80616:	f014 0f20 	tst.w	r4, #32
   8061a:	f04f 005a 	mov.w	r0, #90	; 0x5a
   8061e:	bf14      	ite	ne
   80620:	4b66      	ldrne	r3, [pc, #408]	; (807bc <Lcd+0x21c>)
		else gpio_set_pin_low(LCD_DATA5);
   80622:	4b65      	ldreq	r3, [pc, #404]	; (807b8 <Lcd+0x218>)
   80624:	4798      	blx	r3
		if(mIsBitsSet(data,LCD_DATA4_MSK)) gpio_set_pin_high(LCD_DATA4); //P4
   80626:	f014 0f10 	tst.w	r4, #16
   8062a:	f04f 0059 	mov.w	r0, #89	; 0x59
   8062e:	bf14      	ite	ne
   80630:	4b62      	ldrne	r3, [pc, #392]	; (807bc <Lcd+0x21c>)
		else gpio_set_pin_low(LCD_DATA4);
   80632:	4b61      	ldreq	r3, [pc, #388]	; (807b8 <Lcd+0x218>)
   80634:	4798      	blx	r3
   80636:	e020      	b.n	8067a <Lcd+0xda>
	switch (sc)
   80638:	2964      	cmp	r1, #100	; 0x64
   8063a:	d046      	beq.n	806ca <Lcd+0x12a>
   8063c:	d922      	bls.n	80684 <Lcd+0xe4>
   8063e:	2966      	cmp	r1, #102	; 0x66
   80640:	d030      	beq.n	806a4 <Lcd+0x104>
   80642:	2967      	cmp	r1, #103	; 0x67
   80644:	f040 80b2 	bne.w	807ac <Lcd+0x20c>
		LcdPutstr(" ",0,0);
   80648:	4c5d      	ldr	r4, [pc, #372]	; (807c0 <Lcd+0x220>)
   8064a:	2300      	movs	r3, #0
   8064c:	461a      	mov	r2, r3
   8064e:	4621      	mov	r1, r4
   80650:	2066      	movs	r0, #102	; 0x66
   80652:	f7ff ffa5 	bl	805a0 <Lcd>
		LcdPutstr(" ",1,0);
   80656:	2300      	movs	r3, #0
   80658:	2201      	movs	r2, #1
   8065a:	4621      	mov	r1, r4
   8065c:	2066      	movs	r0, #102	; 0x66
   8065e:	f7ff ff9f 	bl	805a0 <Lcd>
		LcdPutstr(" ",2,0);
   80662:	2300      	movs	r3, #0
   80664:	2202      	movs	r2, #2
   80666:	4621      	mov	r1, r4
   80668:	2066      	movs	r0, #102	; 0x66
   8066a:	f7ff ff99 	bl	805a0 <Lcd>
		LcdPutstr(" ",3,0);
   8066e:	2300      	movs	r3, #0
   80670:	2203      	movs	r2, #3
   80672:	4621      	mov	r1, r4
   80674:	2066      	movs	r0, #102	; 0x66
   80676:	f7ff ff93 	bl	805a0 <Lcd>

	default:
		Error(ERR_LCD_SWITCH_BAD_SC, sc);
	}
	return 0;
   8067a:	2000      	movs	r0, #0
   8067c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80680:	b004      	add	sp, #16
   80682:	4770      	bx	lr
	switch (sc)
   80684:	2908      	cmp	r1, #8
   80686:	f040 8091 	bne.w	807ac <Lcd+0x20c>
		_LcdCommand((line2addr[_nLine&0x03]+_nCol)|0x80);
   8068a:	9b05      	ldr	r3, [sp, #20]
   8068c:	f003 0303 	and.w	r3, r3, #3
   80690:	4a4c      	ldr	r2, [pc, #304]	; (807c4 <Lcd+0x224>)
   80692:	5cd1      	ldrb	r1, [r2, r3]
   80694:	9b06      	ldr	r3, [sp, #24]
   80696:	4419      	add	r1, r3
   80698:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   8069c:	2006      	movs	r0, #6
   8069e:	f7ff ff7f 	bl	805a0 <Lcd>
		break;
   806a2:	e7ea      	b.n	8067a <Lcd+0xda>
		_LcdSetCursor(_line,_col);
   806a4:	9a07      	ldr	r2, [sp, #28]
   806a6:	9906      	ldr	r1, [sp, #24]
   806a8:	2008      	movs	r0, #8
   806aa:	f7ff ff79 	bl	805a0 <Lcd>
		while(*(char*)_pStr)
   806ae:	9c05      	ldr	r4, [sp, #20]
   806b0:	7821      	ldrb	r1, [r4, #0]
   806b2:	2900      	cmp	r1, #0
   806b4:	d0e1      	beq.n	8067a <Lcd+0xda>
			_LcdWriteData(*(char*)_pStr);
   806b6:	2507      	movs	r5, #7
   806b8:	4628      	mov	r0, r5
   806ba:	f7ff ff71 	bl	805a0 <Lcd>
			_pStr++;
   806be:	3401      	adds	r4, #1
   806c0:	9405      	str	r4, [sp, #20]
		while(*(char*)_pStr)
   806c2:	7821      	ldrb	r1, [r4, #0]
   806c4:	2900      	cmp	r1, #0
   806c6:	d1f7      	bne.n	806b8 <Lcd+0x118>
   806c8:	e7d7      	b.n	8067a <Lcd+0xda>
		Putstr("lcd new \r\n");
   806ca:	493f      	ldr	r1, [pc, #252]	; (807c8 <Lcd+0x228>)
   806cc:	2067      	movs	r0, #103	; 0x67
   806ce:	4b3f      	ldr	r3, [pc, #252]	; (807cc <Lcd+0x22c>)
   806d0:	4798      	blx	r3
		gpio_configure_pin(LCD_DATA4, LCD_PIN_FLAGS);
   806d2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806d6:	2059      	movs	r0, #89	; 0x59
   806d8:	4c3d      	ldr	r4, [pc, #244]	; (807d0 <Lcd+0x230>)
   806da:	47a0      	blx	r4
		gpio_configure_pin(LCD_DATA5, LCD_PIN_FLAGS);
   806dc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806e0:	205a      	movs	r0, #90	; 0x5a
   806e2:	47a0      	blx	r4
		gpio_configure_pin(LCD_DATA6, LCD_PIN_FLAGS);
   806e4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806e8:	205c      	movs	r0, #92	; 0x5c
   806ea:	47a0      	blx	r4
		gpio_configure_pin(LCD_DATA7, LCD_PIN_FLAGS);
   806ec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806f0:	2039      	movs	r0, #57	; 0x39
   806f2:	47a0      	blx	r4
		gpio_configure_pin(LCD_E,	  LCD_PIN_FLAGS);
   806f4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806f8:	2067      	movs	r0, #103	; 0x67
   806fa:	47a0      	blx	r4
		gpio_configure_pin(LCD_RS,    LCD_PIN_FLAGS);
   806fc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80700:	2068      	movs	r0, #104	; 0x68
   80702:	47a0      	blx	r4
		gpio_set_pin_low(LCD_DATA4);
   80704:	2059      	movs	r0, #89	; 0x59
   80706:	4c2c      	ldr	r4, [pc, #176]	; (807b8 <Lcd+0x218>)
   80708:	47a0      	blx	r4
		gpio_set_pin_low(LCD_DATA5);
   8070a:	205a      	movs	r0, #90	; 0x5a
   8070c:	47a0      	blx	r4
		gpio_set_pin_low(LCD_DATA6);
   8070e:	205c      	movs	r0, #92	; 0x5c
   80710:	47a0      	blx	r4
		gpio_set_pin_low(LCD_DATA7);
   80712:	2039      	movs	r0, #57	; 0x39
   80714:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RS);
   80716:	2068      	movs	r0, #104	; 0x68
   80718:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   8071a:	2067      	movs	r0, #103	; 0x67
   8071c:	47a0      	blx	r4
		delay_ms(100);			// SEQUENCE DISPLAY HAVEN
   8071e:	482d      	ldr	r0, [pc, #180]	; (807d4 <Lcd+0x234>)
   80720:	4b2d      	ldr	r3, [pc, #180]	; (807d8 <Lcd+0x238>)
   80722:	4798      	blx	r3
		_LcdCommand(0x20);		 //Function Set
   80724:	2120      	movs	r1, #32
   80726:	2006      	movs	r0, #6
   80728:	f7ff ff3a 	bl	805a0 <Lcd>
		_LcdCommand(0x10);		 //Cursor or display shift
   8072c:	2110      	movs	r1, #16
   8072e:	2006      	movs	r0, #6
   80730:	f7ff ff36 	bl	805a0 <Lcd>
		_LcdCommand(0x0E);		 //Display On/Off
   80734:	210e      	movs	r1, #14
   80736:	2006      	movs	r0, #6
   80738:	f7ff ff32 	bl	805a0 <Lcd>
		_LcdCommand(0x06);		 //Entry Mode
   8073c:	2106      	movs	r1, #6
   8073e:	4608      	mov	r0, r1
   80740:	f7ff ff2e 	bl	805a0 <Lcd>
		_LcdCommand(0x01);		 //Clear Display
   80744:	2101      	movs	r1, #1
   80746:	2006      	movs	r0, #6
   80748:	f7ff ff2a 	bl	805a0 <Lcd>
		break;
   8074c:	e795      	b.n	8067a <Lcd+0xda>
		gpio_set_pin_high(LCD_E);
   8074e:	2067      	movs	r0, #103	; 0x67
   80750:	4b1a      	ldr	r3, [pc, #104]	; (807bc <Lcd+0x21c>)
   80752:	4798      	blx	r3
		delay_ms(1);
   80754:	f241 7070 	movw	r0, #6000	; 0x1770
   80758:	4b1f      	ldr	r3, [pc, #124]	; (807d8 <Lcd+0x238>)
   8075a:	4798      	blx	r3
		gpio_set_pin_low(LCD_E);
   8075c:	2067      	movs	r0, #103	; 0x67
   8075e:	4b16      	ldr	r3, [pc, #88]	; (807b8 <Lcd+0x218>)
   80760:	4798      	blx	r3
		break;
   80762:	e78a      	b.n	8067a <Lcd+0xda>
		gpio_set_pin_high(LCD_RS);	//RS=1 => DATA
   80764:	2068      	movs	r0, #104	; 0x68
   80766:	4b15      	ldr	r3, [pc, #84]	; (807bc <Lcd+0x21c>)
   80768:	4798      	blx	r3
		_LcdPutData(data);
   8076a:	9c05      	ldr	r4, [sp, #20]
   8076c:	b2e1      	uxtb	r1, r4
   8076e:	2001      	movs	r0, #1
   80770:	f7ff ff16 	bl	805a0 <Lcd>
		_LcdNybble();
   80774:	2002      	movs	r0, #2
   80776:	f7ff ff13 	bl	805a0 <Lcd>
		_LcdPutData(data<<4);
   8077a:	0121      	lsls	r1, r4, #4
   8077c:	f401 617f 	and.w	r1, r1, #4080	; 0xff0
   80780:	2001      	movs	r0, #1
   80782:	f7ff ff0d 	bl	805a0 <Lcd>
		_LcdNybble();
   80786:	2002      	movs	r0, #2
   80788:	f7ff ff0a 	bl	805a0 <Lcd>
		break;
   8078c:	e775      	b.n	8067a <Lcd+0xda>
		gpio_set_pin_high(LCD_DATA4);
   8078e:	2059      	movs	r0, #89	; 0x59
   80790:	4c0a      	ldr	r4, [pc, #40]	; (807bc <Lcd+0x21c>)
   80792:	47a0      	blx	r4
		gpio_set_pin_high(LCD_DATA5);
   80794:	205a      	movs	r0, #90	; 0x5a
   80796:	47a0      	blx	r4
		gpio_set_pin_high(LCD_DATA6);
   80798:	205c      	movs	r0, #92	; 0x5c
   8079a:	47a0      	blx	r4
		gpio_set_pin_high(LCD_DATA7);
   8079c:	2039      	movs	r0, #57	; 0x39
   8079e:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   807a0:	2067      	movs	r0, #103	; 0x67
   807a2:	4c05      	ldr	r4, [pc, #20]	; (807b8 <Lcd+0x218>)
   807a4:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RS);
   807a6:	2068      	movs	r0, #104	; 0x68
   807a8:	47a0      	blx	r4
		break;
   807aa:	e766      	b.n	8067a <Lcd+0xda>
		Error(ERR_LCD_SWITCH_BAD_SC, sc);
   807ac:	4b0b      	ldr	r3, [pc, #44]	; (807dc <Lcd+0x23c>)
   807ae:	681b      	ldr	r3, [r3, #0]
   807b0:	2014      	movs	r0, #20
   807b2:	4798      	blx	r3
   807b4:	e761      	b.n	8067a <Lcd+0xda>
   807b6:	bf00      	nop
   807b8:	00081b47 	.word	0x00081b47
   807bc:	00081b2d 	.word	0x00081b2d
   807c0:	00086b9c 	.word	0x00086b9c
   807c4:	00086bac 	.word	0x00086bac
   807c8:	00086ba0 	.word	0x00086ba0
   807cc:	000813c1 	.word	0x000813c1
   807d0:	00081b81 	.word	0x00081b81
   807d4:	000927c0 	.word	0x000927c0
   807d8:	20070099 	.word	0x20070099
   807dc:	200705d0 	.word	0x200705d0

000807e0 <Menu>:
	int IndexMenu;
}menuParam;
 

int Menu(int sc, ...)
{
   807e0:	b40f      	push	{r0, r1, r2, r3}
   807e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   807e6:	b082      	sub	sp, #8
   807e8:	9908      	ldr	r1, [sp, #32]

	switch(sc)
   807ea:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   807ee:	2b04      	cmp	r3, #4
   807f0:	f200 8093 	bhi.w	8091a <Menu+0x13a>
   807f4:	e8df f003 	tbb	[pc, r3]
   807f8:	917b6503 	.word	0x917b6503
   807fc:	80          	.byte	0x80
   807fd:	00          	.byte	0x00
	{
	case MENU_NEW:
		tabl[0][0] = "Bonjour,\r";
   807fe:	4b49      	ldr	r3, [pc, #292]	; (80924 <Menu+0x144>)
   80800:	4a49      	ldr	r2, [pc, #292]	; (80928 <Menu+0x148>)
   80802:	601a      	str	r2, [r3, #0]
		tabl[0][1] = "Comment\r";
   80804:	4a49      	ldr	r2, [pc, #292]	; (8092c <Menu+0x14c>)
   80806:	605a      	str	r2, [r3, #4]
		tabl[0][2] = "aller\r";
   80808:	4a49      	ldr	r2, [pc, #292]	; (80930 <Menu+0x150>)
   8080a:	609a      	str	r2, [r3, #8]
		tabl[0][3] = "vous?\r";
   8080c:	4a49      	ldr	r2, [pc, #292]	; (80934 <Menu+0x154>)
   8080e:	60da      	str	r2, [r3, #12]
		tabl[1][0] = "Bionjourno,\r";
   80810:	4a49      	ldr	r2, [pc, #292]	; (80938 <Menu+0x158>)
   80812:	611a      	str	r2, [r3, #16]
		tabl[1][1] = "Beve\r";
   80814:	4a49      	ldr	r2, [pc, #292]	; (8093c <Menu+0x15c>)
   80816:	615a      	str	r2, [r3, #20]
		tabl[1][2] = "la\r";
   80818:	4a49      	ldr	r2, [pc, #292]	; (80940 <Menu+0x160>)
   8081a:	619a      	str	r2, [r3, #24]
		tabl[1][3] = "aqua!!!!\r";
   8081c:	4a49      	ldr	r2, [pc, #292]	; (80944 <Menu+0x164>)
   8081e:	61da      	str	r2, [r3, #28]
		tabl[2][0] = "Hello,\r";
   80820:	4a49      	ldr	r2, [pc, #292]	; (80948 <Menu+0x168>)
   80822:	621a      	str	r2, [r3, #32]
		tabl[2][1] = "How\r";
   80824:	4a49      	ldr	r2, [pc, #292]	; (8094c <Menu+0x16c>)
   80826:	625a      	str	r2, [r3, #36]	; 0x24
		tabl[2][2] = "are\r";
   80828:	4a49      	ldr	r2, [pc, #292]	; (80950 <Menu+0x170>)
   8082a:	629a      	str	r2, [r3, #40]	; 0x28
		tabl[2][3] = "you??\r";
   8082c:	4a49      	ldr	r2, [pc, #292]	; (80954 <Menu+0x174>)
   8082e:	62da      	str	r2, [r3, #44]	; 0x2c
		tabl[3][0] = "Konichiwa,\r";
   80830:	4a49      	ldr	r2, [pc, #292]	; (80958 <Menu+0x178>)
   80832:	631a      	str	r2, [r3, #48]	; 0x30
		tabl[3][1] = "Mitsubishi\r";
   80834:	4a49      	ldr	r2, [pc, #292]	; (8095c <Menu+0x17c>)
   80836:	635a      	str	r2, [r3, #52]	; 0x34
		tabl[3][2] = "sushi\r";
   80838:	4a49      	ldr	r2, [pc, #292]	; (80960 <Menu+0x180>)
   8083a:	639a      	str	r2, [r3, #56]	; 0x38
		tabl[3][3] = "Nagasaki\r";
   8083c:	4a49      	ldr	r2, [pc, #292]	; (80964 <Menu+0x184>)
   8083e:	63da      	str	r2, [r3, #60]	; 0x3c


		menuParam.iIndexX = 0;
   80840:	4b49      	ldr	r3, [pc, #292]	; (80968 <Menu+0x188>)
   80842:	2500      	movs	r5, #0
   80844:	601d      	str	r5, [r3, #0]
		menuParam.iIndexY = 0;
   80846:	605d      	str	r5, [r3, #4]
		//////////////////////////////////////INTERRUPT PIN/////////////////////////////
		pmc_enable_periph_clk(ID_PIOA);
   80848:	200b      	movs	r0, #11
   8084a:	4b48      	ldr	r3, [pc, #288]	; (8096c <Menu+0x18c>)
   8084c:	4798      	blx	r3
		pio_set_output(PIOA, PIN_LED, LOW, DISABLE, ENABLE);
   8084e:	4c48      	ldr	r4, [pc, #288]	; (80970 <Menu+0x190>)
   80850:	2601      	movs	r6, #1
   80852:	9600      	str	r6, [sp, #0]
   80854:	462b      	mov	r3, r5
   80856:	462a      	mov	r2, r5
   80858:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   8085c:	4620      	mov	r0, r4
   8085e:	4d45      	ldr	r5, [pc, #276]	; (80974 <Menu+0x194>)
   80860:	47a8      	blx	r5
		
		
		pio_set_input(PIOA, PIN_BUTTON_SELECT, PIO_PULLUP);
   80862:	4632      	mov	r2, r6
   80864:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   80868:	4620      	mov	r0, r4
   8086a:	f8df 8134 	ldr.w	r8, [pc, #308]	; 809a0 <Menu+0x1c0>
   8086e:	47c0      	blx	r8
		pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_SELECT, PIO_IT_FALL_EDGE, ButtonSelect_ISR_Handler);
   80870:	4b41      	ldr	r3, [pc, #260]	; (80978 <Menu+0x198>)
   80872:	9300      	str	r3, [sp, #0]
   80874:	2350      	movs	r3, #80	; 0x50
   80876:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   8087a:	210b      	movs	r1, #11
   8087c:	4620      	mov	r0, r4
   8087e:	4f3f      	ldr	r7, [pc, #252]	; (8097c <Menu+0x19c>)
   80880:	47b8      	blx	r7
		pio_enable_interrupt(PIOA, PIN_BUTTON_SELECT);
   80882:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   80886:	4620      	mov	r0, r4
   80888:	4d3d      	ldr	r5, [pc, #244]	; (80980 <Menu+0x1a0>)
   8088a:	47a8      	blx	r5
		
		pio_set_input(PIOA, PIN_BUTTON_SWITCH, PIO_PULLUP);
   8088c:	4632      	mov	r2, r6
   8088e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   80892:	4620      	mov	r0, r4
   80894:	47c0      	blx	r8
		pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_SWITCH, PIO_IT_FALL_EDGE, ButtonSwitch_ISR_Handler);
   80896:	4b3b      	ldr	r3, [pc, #236]	; (80984 <Menu+0x1a4>)
   80898:	9300      	str	r3, [sp, #0]
   8089a:	2350      	movs	r3, #80	; 0x50
   8089c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   808a0:	210b      	movs	r1, #11
   808a2:	4620      	mov	r0, r4
   808a4:	47b8      	blx	r7
		pio_enable_interrupt(PIOA, PIN_BUTTON_SWITCH);
   808a6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   808aa:	4620      	mov	r0, r4
   808ac:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   808ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
   808b2:	4b35      	ldr	r3, [pc, #212]	; (80988 <Menu+0x1a8>)
   808b4:	601a      	str	r2, [r3, #0]
		break;
	default:
		Error(ERR_MENU_SWITCH_BAD_SC, sc);
	}
	return 0;
}
   808b6:	2000      	movs	r0, #0
   808b8:	b002      	add	sp, #8
   808ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   808be:	b004      	add	sp, #16
   808c0:	4770      	bx	lr
		pio_toggle_pin(PIN_LED_IDX);
   808c2:	2017      	movs	r0, #23
   808c4:	4b31      	ldr	r3, [pc, #196]	; (8098c <Menu+0x1ac>)
   808c6:	4798      	blx	r3
		menuParam.iIndexX++;
   808c8:	4b27      	ldr	r3, [pc, #156]	; (80968 <Menu+0x188>)
   808ca:	681b      	ldr	r3, [r3, #0]
   808cc:	3301      	adds	r3, #1
		if(menuParam.iIndexX >=INT_MENU_MAX) menuParam.iIndexX = 0;
   808ce:	2b03      	cmp	r3, #3
   808d0:	dc09      	bgt.n	808e6 <Menu+0x106>
		menuParam.iIndexX++;
   808d2:	4a25      	ldr	r2, [pc, #148]	; (80968 <Menu+0x188>)
   808d4:	6013      	str	r3, [r2, #0]
		if(menuParam.iIndexY >=INDEX_MENU) menuParam.iIndexY = 0;
   808d6:	4b24      	ldr	r3, [pc, #144]	; (80968 <Menu+0x188>)
   808d8:	685b      	ldr	r3, [r3, #4]
   808da:	2b01      	cmp	r3, #1
   808dc:	ddeb      	ble.n	808b6 <Menu+0xd6>
   808de:	2200      	movs	r2, #0
   808e0:	4b21      	ldr	r3, [pc, #132]	; (80968 <Menu+0x188>)
   808e2:	605a      	str	r2, [r3, #4]
   808e4:	e7e7      	b.n	808b6 <Menu+0xd6>
		if(menuParam.iIndexX >=INT_MENU_MAX) menuParam.iIndexX = 0;
   808e6:	2200      	movs	r2, #0
   808e8:	4b1f      	ldr	r3, [pc, #124]	; (80968 <Menu+0x188>)
   808ea:	601a      	str	r2, [r3, #0]
   808ec:	e7f3      	b.n	808d6 <Menu+0xf6>
		menuParam.iIndexY++;
   808ee:	4a1e      	ldr	r2, [pc, #120]	; (80968 <Menu+0x188>)
   808f0:	6853      	ldr	r3, [r2, #4]
   808f2:	3301      	adds	r3, #1
   808f4:	6053      	str	r3, [r2, #4]
		break;
   808f6:	e7de      	b.n	808b6 <Menu+0xd6>
		sprintf(buf, tabl[menuParam.iIndexX][menuParam.iIndexY]);
   808f8:	4a1b      	ldr	r2, [pc, #108]	; (80968 <Menu+0x188>)
   808fa:	6811      	ldr	r1, [r2, #0]
   808fc:	6853      	ldr	r3, [r2, #4]
   808fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   80902:	4c23      	ldr	r4, [pc, #140]	; (80990 <Menu+0x1b0>)
   80904:	4a07      	ldr	r2, [pc, #28]	; (80924 <Menu+0x144>)
   80906:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   8090a:	4620      	mov	r0, r4
   8090c:	4b21      	ldr	r3, [pc, #132]	; (80994 <Menu+0x1b4>)
   8090e:	4798      	blx	r3
		Putstr(buf);
   80910:	4621      	mov	r1, r4
   80912:	2067      	movs	r0, #103	; 0x67
   80914:	4b20      	ldr	r3, [pc, #128]	; (80998 <Menu+0x1b8>)
   80916:	4798      	blx	r3
		break;
   80918:	e7cd      	b.n	808b6 <Menu+0xd6>
		Error(ERR_MENU_SWITCH_BAD_SC, sc);
   8091a:	4b20      	ldr	r3, [pc, #128]	; (8099c <Menu+0x1bc>)
   8091c:	681b      	ldr	r3, [r3, #0]
   8091e:	2010      	movs	r0, #16
   80920:	4798      	blx	r3
   80922:	e7c8      	b.n	808b6 <Menu+0xd6>
   80924:	200711b8 	.word	0x200711b8
   80928:	00086bb0 	.word	0x00086bb0
   8092c:	00086bbc 	.word	0x00086bbc
   80930:	00086bc8 	.word	0x00086bc8
   80934:	00086bd0 	.word	0x00086bd0
   80938:	00086bd8 	.word	0x00086bd8
   8093c:	00086be8 	.word	0x00086be8
   80940:	00086bf0 	.word	0x00086bf0
   80944:	00086bf4 	.word	0x00086bf4
   80948:	00086c00 	.word	0x00086c00
   8094c:	00086c08 	.word	0x00086c08
   80950:	00086c10 	.word	0x00086c10
   80954:	00086c18 	.word	0x00086c18
   80958:	00086c20 	.word	0x00086c20
   8095c:	00086c2c 	.word	0x00086c2c
   80960:	00086c38 	.word	0x00086c38
   80964:	00086c40 	.word	0x00086c40
   80968:	200711ac 	.word	0x200711ac
   8096c:	00081ee5 	.word	0x00081ee5
   80970:	400e0e00 	.word	0x400e0e00
   80974:	00081acd 	.word	0x00081acd
   80978:	000809c5 	.word	0x000809c5
   8097c:	00081d3d 	.word	0x00081d3d
   80980:	00081b21 	.word	0x00081b21
   80984:	000809a5 	.word	0x000809a5
   80988:	e000e100 	.word	0xe000e100
   8098c:	00081b61 	.word	0x00081b61
   80990:	20071570 	.word	0x20071570
   80994:	00082305 	.word	0x00082305
   80998:	000813c1 	.word	0x000813c1
   8099c:	200705d0 	.word	0x200705d0
   809a0:	00081a9b 	.word	0x00081a9b

000809a4 <ButtonSwitch_ISR_Handler>:

void ButtonSwitch_ISR_Handler()
{
   809a4:	b510      	push	{r4, lr}
   809a6:	b082      	sub	sp, #8
	PushTask(Menu,MENU_SWITCH_BUTTON,0,0);
   809a8:	2300      	movs	r3, #0
   809aa:	9300      	str	r3, [sp, #0]
   809ac:	2265      	movs	r2, #101	; 0x65
   809ae:	4903      	ldr	r1, [pc, #12]	; (809bc <ButtonSwitch_ISR_Handler+0x18>)
   809b0:	2066      	movs	r0, #102	; 0x66
   809b2:	4c03      	ldr	r4, [pc, #12]	; (809c0 <ButtonSwitch_ISR_Handler+0x1c>)
   809b4:	47a0      	blx	r4
}
   809b6:	b002      	add	sp, #8
   809b8:	bd10      	pop	{r4, pc}
   809ba:	bf00      	nop
   809bc:	000807e1 	.word	0x000807e1
   809c0:	000815d9 	.word	0x000815d9

000809c4 <ButtonSelect_ISR_Handler>:

void ButtonSelect_ISR_Handler()
{
   809c4:	b510      	push	{r4, lr}
   809c6:	b082      	sub	sp, #8
	PushTask(Menu, MENU_SELECT_BUTTON,0,0);
   809c8:	2300      	movs	r3, #0
   809ca:	9300      	str	r3, [sp, #0]
   809cc:	2266      	movs	r2, #102	; 0x66
   809ce:	4903      	ldr	r1, [pc, #12]	; (809dc <ButtonSelect_ISR_Handler+0x18>)
   809d0:	4610      	mov	r0, r2
   809d2:	4c03      	ldr	r4, [pc, #12]	; (809e0 <ButtonSelect_ISR_Handler+0x1c>)
   809d4:	47a0      	blx	r4
   809d6:	b002      	add	sp, #8
   809d8:	bd10      	pop	{r4, pc}
   809da:	bf00      	nop
   809dc:	000807e1 	.word	0x000807e1
   809e0:	000815d9 	.word	0x000815d9

000809e4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   809e4:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   809e6:	0189      	lsls	r1, r1, #6
   809e8:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   809ea:	2402      	movs	r4, #2
   809ec:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   809ee:	f04f 31ff 	mov.w	r1, #4294967295
   809f2:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   809f4:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   809f6:	605a      	str	r2, [r3, #4]
}
   809f8:	bc10      	pop	{r4}
   809fa:	4770      	bx	lr

000809fc <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   809fc:	0189      	lsls	r1, r1, #6
   809fe:	2305      	movs	r3, #5
   80a00:	5043      	str	r3, [r0, r1]
   80a02:	4770      	bx	lr

00080a04 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
   80a04:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80a08:	614a      	str	r2, [r1, #20]
   80a0a:	4770      	bx	lr

00080a0c <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   80a0c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80a10:	61ca      	str	r2, [r1, #28]
   80a12:	4770      	bx	lr

00080a14 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80a14:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   80a18:	624a      	str	r2, [r1, #36]	; 0x24
   80a1a:	4770      	bx	lr

00080a1c <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80a1c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   80a20:	6a08      	ldr	r0, [r1, #32]
}
   80a22:	4770      	bx	lr

00080a24 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   80a24:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   80a26:	010b      	lsls	r3, r1, #4
   80a28:	4293      	cmp	r3, r2
   80a2a:	d914      	bls.n	80a56 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80a2c:	00c9      	lsls	r1, r1, #3
   80a2e:	084b      	lsrs	r3, r1, #1
   80a30:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   80a34:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   80a38:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   80a3a:	1e5c      	subs	r4, r3, #1
   80a3c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   80a40:	428c      	cmp	r4, r1
   80a42:	d901      	bls.n	80a48 <usart_set_async_baudrate+0x24>
		return 1;
   80a44:	2001      	movs	r0, #1
   80a46:	e017      	b.n	80a78 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   80a48:	6841      	ldr	r1, [r0, #4]
   80a4a:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   80a4e:	6041      	str	r1, [r0, #4]
   80a50:	e00c      	b.n	80a6c <usart_set_async_baudrate+0x48>
		return 1;
   80a52:	2001      	movs	r0, #1
   80a54:	e010      	b.n	80a78 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80a56:	0859      	lsrs	r1, r3, #1
   80a58:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   80a5c:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   80a60:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   80a62:	1e5c      	subs	r4, r3, #1
   80a64:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   80a68:	428c      	cmp	r4, r1
   80a6a:	d8f2      	bhi.n	80a52 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   80a6c:	0412      	lsls	r2, r2, #16
   80a6e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   80a72:	431a      	orrs	r2, r3
   80a74:	6202      	str	r2, [r0, #32]

	return 0;
   80a76:	2000      	movs	r0, #0
}
   80a78:	bc10      	pop	{r4}
   80a7a:	4770      	bx	lr

00080a7c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   80a7c:	4b08      	ldr	r3, [pc, #32]	; (80aa0 <usart_reset+0x24>)
   80a7e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   80a82:	2300      	movs	r3, #0
   80a84:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   80a86:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80a88:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   80a8a:	2388      	movs	r3, #136	; 0x88
   80a8c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   80a8e:	2324      	movs	r3, #36	; 0x24
   80a90:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   80a92:	f44f 7380 	mov.w	r3, #256	; 0x100
   80a96:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   80a98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   80a9c:	6003      	str	r3, [r0, #0]
   80a9e:	4770      	bx	lr
   80aa0:	55534100 	.word	0x55534100

00080aa4 <usart_init_rs232>:
{
   80aa4:	b570      	push	{r4, r5, r6, lr}
   80aa6:	4605      	mov	r5, r0
   80aa8:	460c      	mov	r4, r1
   80aaa:	4616      	mov	r6, r2
	usart_reset(p_usart);
   80aac:	4b0f      	ldr	r3, [pc, #60]	; (80aec <usart_init_rs232+0x48>)
   80aae:	4798      	blx	r3
	ul_reg_val = 0;
   80ab0:	2200      	movs	r2, #0
   80ab2:	4b0f      	ldr	r3, [pc, #60]	; (80af0 <usart_init_rs232+0x4c>)
   80ab4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   80ab6:	b1a4      	cbz	r4, 80ae2 <usart_init_rs232+0x3e>
   80ab8:	4632      	mov	r2, r6
   80aba:	6821      	ldr	r1, [r4, #0]
   80abc:	4628      	mov	r0, r5
   80abe:	4b0d      	ldr	r3, [pc, #52]	; (80af4 <usart_init_rs232+0x50>)
   80ac0:	4798      	blx	r3
   80ac2:	4602      	mov	r2, r0
   80ac4:	b978      	cbnz	r0, 80ae6 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   80ac6:	6863      	ldr	r3, [r4, #4]
   80ac8:	68a1      	ldr	r1, [r4, #8]
   80aca:	430b      	orrs	r3, r1
   80acc:	6921      	ldr	r1, [r4, #16]
   80ace:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   80ad0:	68e1      	ldr	r1, [r4, #12]
   80ad2:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   80ad4:	4906      	ldr	r1, [pc, #24]	; (80af0 <usart_init_rs232+0x4c>)
   80ad6:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   80ad8:	6869      	ldr	r1, [r5, #4]
   80ada:	430b      	orrs	r3, r1
   80adc:	606b      	str	r3, [r5, #4]
}
   80ade:	4610      	mov	r0, r2
   80ae0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   80ae2:	2201      	movs	r2, #1
   80ae4:	e7fb      	b.n	80ade <usart_init_rs232+0x3a>
   80ae6:	2201      	movs	r2, #1
   80ae8:	e7f9      	b.n	80ade <usart_init_rs232+0x3a>
   80aea:	bf00      	nop
   80aec:	00080a7d 	.word	0x00080a7d
   80af0:	200710f4 	.word	0x200710f4
   80af4:	00080a25 	.word	0x00080a25

00080af8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   80af8:	2340      	movs	r3, #64	; 0x40
   80afa:	6003      	str	r3, [r0, #0]
   80afc:	4770      	bx	lr

00080afe <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   80afe:	2310      	movs	r3, #16
   80b00:	6003      	str	r3, [r0, #0]
   80b02:	4770      	bx	lr

00080b04 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   80b04:	6081      	str	r1, [r0, #8]
   80b06:	4770      	bx	lr

00080b08 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   80b08:	60c1      	str	r1, [r0, #12]
   80b0a:	4770      	bx	lr

00080b0c <usart_get_status>:
	return p_usart->US_CSR;
   80b0c:	6940      	ldr	r0, [r0, #20]
}
   80b0e:	4770      	bx	lr

00080b10 <CRC16MODBUSFRAME>:
unsigned int CRC16MODBUSFRAME (unsigned char *nData, unsigned int wLength)
{
    unsigned char  nTemp;
    unsigned int  wCRCWord = 0xFFFF;

    while (wLength--)
   80b10:	b189      	cbz	r1, 80b36 <CRC16MODBUSFRAME+0x26>
{
   80b12:	b410      	push	{r4}
   80b14:	1841      	adds	r1, r0, r1
    while (wLength--)
   80b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
    {
        nTemp = *nData++ ^ wCRCWord;
        wCRCWord >>= 8;
        wCRCWord ^= wCRCTable[nTemp];
   80b1a:	4c09      	ldr	r4, [pc, #36]	; (80b40 <CRC16MODBUSFRAME+0x30>)
        nTemp = *nData++ ^ wCRCWord;
   80b1c:	f810 3b01 	ldrb.w	r3, [r0], #1
   80b20:	4053      	eors	r3, r2
        wCRCWord ^= wCRCTable[nTemp];
   80b22:	b2db      	uxtb	r3, r3
   80b24:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   80b28:	ea83 2212 	eor.w	r2, r3, r2, lsr #8
    while (wLength--)
   80b2c:	4281      	cmp	r1, r0
   80b2e:	d1f5      	bne.n	80b1c <CRC16MODBUSFRAME+0xc>
    }
    return wCRCWord;
}
   80b30:	4610      	mov	r0, r2
   80b32:	bc10      	pop	{r4}
   80b34:	4770      	bx	lr
    unsigned int  wCRCWord = 0xFFFF;
   80b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
   80b3a:	4610      	mov	r0, r2
   80b3c:	4770      	bx	lr
   80b3e:	bf00      	nop
   80b40:	200701d0 	.word	0x200701d0

00080b44 <ErrorLed>:
 #include "../Headers/appli.h"

 t_ptf32 pErrorFunc = ErrorLed;

 uint32_t ErrorLed(uint32_t err, ...)
 {
   80b44:	b40f      	push	{r0, r1, r2, r3}
   80b46:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		delay_ms(2000);
		gpio_set_pin_low(LED0_GPIO);
		delay_ms(500);

		//Display tens of error code
		for(i=0; i<err/10; i++)
   80b4c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80bec <ErrorLed+0xa8>
   80b50:	fba8 2803 	umull	r2, r8, r8, r3
   80b54:	ea4f 08d8 	mov.w	r8, r8, lsr #3
			delay_ms(200);
		}
		delay_ms(500);

		//Display units of error code
		for(i=0; i<err%10; i++)
   80b58:	eb08 0a88 	add.w	sl, r8, r8, lsl #2
   80b5c:	eba3 0a4a 	sub.w	sl, r3, sl, lsl #1
		gpio_set_pin_high(LED0_GPIO);
   80b60:	253b      	movs	r5, #59	; 0x3b
		delay_ms(2000);
   80b62:	4c1c      	ldr	r4, [pc, #112]	; (80bd4 <ErrorLed+0x90>)
		delay_ms(500);
   80b64:	f8df b088 	ldr.w	fp, [pc, #136]	; 80bf0 <ErrorLed+0xac>
   80b68:	e001      	b.n	80b6e <ErrorLed+0x2a>
			gpio_set_pin_high(LED0_GPIO);
			delay_ms(200);
			gpio_set_pin_low(LED0_GPIO);
			delay_ms(200);
		}
		delay_ms(1000);
   80b6a:	481b      	ldr	r0, [pc, #108]	; (80bd8 <ErrorLed+0x94>)
   80b6c:	47a0      	blx	r4
		gpio_set_pin_high(LED0_GPIO);
   80b6e:	4628      	mov	r0, r5
   80b70:	4b1a      	ldr	r3, [pc, #104]	; (80bdc <ErrorLed+0x98>)
   80b72:	4798      	blx	r3
		delay_ms(2000);
   80b74:	481a      	ldr	r0, [pc, #104]	; (80be0 <ErrorLed+0x9c>)
   80b76:	47a0      	blx	r4
		gpio_set_pin_low(LED0_GPIO);
   80b78:	4628      	mov	r0, r5
   80b7a:	4b1a      	ldr	r3, [pc, #104]	; (80be4 <ErrorLed+0xa0>)
   80b7c:	4798      	blx	r3
		delay_ms(500);
   80b7e:	4658      	mov	r0, fp
   80b80:	47a0      	blx	r4
		for(i=0; i<err/10; i++)
   80b82:	f1b8 0f00 	cmp.w	r8, #0
   80b86:	d00f      	beq.n	80ba8 <ErrorLed+0x64>
   80b88:	2600      	movs	r6, #0
			gpio_set_pin_high(LED0_GPIO);
   80b8a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80bdc <ErrorLed+0x98>
			delay_ms(200);
   80b8e:	4f16      	ldr	r7, [pc, #88]	; (80be8 <ErrorLed+0xa4>)
			gpio_set_pin_high(LED0_GPIO);
   80b90:	4628      	mov	r0, r5
   80b92:	47c8      	blx	r9
			delay_ms(200);
   80b94:	4638      	mov	r0, r7
   80b96:	47a0      	blx	r4
			gpio_set_pin_low(LED0_GPIO);
   80b98:	4628      	mov	r0, r5
   80b9a:	4b12      	ldr	r3, [pc, #72]	; (80be4 <ErrorLed+0xa0>)
   80b9c:	4798      	blx	r3
			delay_ms(200);
   80b9e:	4638      	mov	r0, r7
   80ba0:	47a0      	blx	r4
		for(i=0; i<err/10; i++)
   80ba2:	3601      	adds	r6, #1
   80ba4:	4546      	cmp	r6, r8
   80ba6:	d1f3      	bne.n	80b90 <ErrorLed+0x4c>
		delay_ms(500);
   80ba8:	4658      	mov	r0, fp
   80baa:	47a0      	blx	r4
		for(i=0; i<err%10; i++)
   80bac:	f1ba 0f00 	cmp.w	sl, #0
   80bb0:	d0db      	beq.n	80b6a <ErrorLed+0x26>
   80bb2:	2600      	movs	r6, #0
			gpio_set_pin_high(LED0_GPIO);
   80bb4:	f8df 9024 	ldr.w	r9, [pc, #36]	; 80bdc <ErrorLed+0x98>
			delay_ms(200);
   80bb8:	4f0b      	ldr	r7, [pc, #44]	; (80be8 <ErrorLed+0xa4>)
			gpio_set_pin_high(LED0_GPIO);
   80bba:	4628      	mov	r0, r5
   80bbc:	47c8      	blx	r9
			delay_ms(200);
   80bbe:	4638      	mov	r0, r7
   80bc0:	47a0      	blx	r4
			gpio_set_pin_low(LED0_GPIO);
   80bc2:	4628      	mov	r0, r5
   80bc4:	4b07      	ldr	r3, [pc, #28]	; (80be4 <ErrorLed+0xa0>)
   80bc6:	4798      	blx	r3
			delay_ms(200);
   80bc8:	4638      	mov	r0, r7
   80bca:	47a0      	blx	r4
		for(i=0; i<err%10; i++)
   80bcc:	3601      	adds	r6, #1
   80bce:	4556      	cmp	r6, sl
   80bd0:	d1f3      	bne.n	80bba <ErrorLed+0x76>
   80bd2:	e7ca      	b.n	80b6a <ErrorLed+0x26>
   80bd4:	20070099 	.word	0x20070099
   80bd8:	005b8d80 	.word	0x005b8d80
   80bdc:	00081b2d 	.word	0x00081b2d
   80be0:	00b71b00 	.word	0x00b71b00
   80be4:	00081b47 	.word	0x00081b47
   80be8:	00124f80 	.word	0x00124f80
   80bec:	cccccccd 	.word	0xcccccccd
   80bf0:	002dc6c0 	.word	0x002dc6c0

00080bf4 <RTC_Handler>:
 }
 


 void RTC_Handler(void )
 {
   80bf4:	b510      	push	{r4, lr}
   80bf6:	b082      	sub	sp, #8
	PushTask(Shell,_SHELL_PROMPT,0,0);
   80bf8:	2300      	movs	r3, #0
   80bfa:	9300      	str	r3, [sp, #0]
   80bfc:	2204      	movs	r2, #4
   80bfe:	4903      	ldr	r1, [pc, #12]	; (80c0c <RTC_Handler+0x18>)
   80c00:	2066      	movs	r0, #102	; 0x66
   80c02:	4c03      	ldr	r4, [pc, #12]	; (80c10 <RTC_Handler+0x1c>)
   80c04:	47a0      	blx	r4
 }
   80c06:	b002      	add	sp, #8
   80c08:	bd10      	pop	{r4, pc}
   80c0a:	bf00      	nop
   80c0c:	00080cb9 	.word	0x00080cb9
   80c10:	000815d9 	.word	0x000815d9

00080c14 <__RTCdayByDate>:
 uint8_t __RTCdayByDate(uint32_t date, uint32_t month, uint32_t centYear)
 {
	uint8_t  D; //Day of the week
#define y   centYear
	//Mike Keith algorithme ----------------------------------------------------------------//
	if(month>=3)
   80c14:	2902      	cmp	r1, #2
   80c16:	d824      	bhi.n	80c62 <__RTCdayByDate+0x4e>
	{
		D = ( ((uint16_t)month*23)/9 + date + 4 + y + y/4 - y/100 + y/400 - 2 ) % 7 + 1;
	}
	else
	{
		D = ( ((uint16_t)month*23)/9 + date + 4 + y + (y-1)/4 - (y-1)/100 + (y-1)/400 ) % 7 + 1;
   80c18:	1e53      	subs	r3, r2, #1
   80c1a:	3204      	adds	r2, #4
   80c1c:	4410      	add	r0, r2
   80c1e:	eb00 0093 	add.w	r0, r0, r3, lsr #2
   80c22:	4a22      	ldr	r2, [pc, #136]	; (80cac <__RTCdayByDate+0x98>)
   80c24:	fba2 2303 	umull	r2, r3, r2, r3
   80c28:	eb00 10d3 	add.w	r0, r0, r3, lsr #7
   80c2c:	eba0 1053 	sub.w	r0, r0, r3, lsr #5
   80c30:	b289      	uxth	r1, r1
   80c32:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   80c36:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
   80c3a:	4b1d      	ldr	r3, [pc, #116]	; (80cb0 <__RTCdayByDate+0x9c>)
   80c3c:	fb83 2301 	smull	r2, r3, r3, r1
   80c40:	17c9      	asrs	r1, r1, #31
   80c42:	ebc1 0163 	rsb	r1, r1, r3, asr #1
   80c46:	4408      	add	r0, r1
   80c48:	4b1a      	ldr	r3, [pc, #104]	; (80cb4 <__RTCdayByDate+0xa0>)
   80c4a:	fba3 2300 	umull	r2, r3, r3, r0
   80c4e:	1ac2      	subs	r2, r0, r3
   80c50:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   80c54:	089b      	lsrs	r3, r3, #2
   80c56:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   80c5a:	1ac0      	subs	r0, r0, r3
   80c5c:	3001      	adds	r0, #1
   80c5e:	b2c0      	uxtb	r0, r0
	}
#undef y
	return D; //Normaly 1 to 7 !!!!
 }
   80c60:	4770      	bx	lr
		D = ( ((uint16_t)month*23)/9 + date + 4 + y + y/4 - y/100 + y/400 - 2 ) % 7 + 1;
   80c62:	1c93      	adds	r3, r2, #2
   80c64:	4418      	add	r0, r3
   80c66:	eb00 0092 	add.w	r0, r0, r2, lsr #2
   80c6a:	4b10      	ldr	r3, [pc, #64]	; (80cac <__RTCdayByDate+0x98>)
   80c6c:	fba3 3202 	umull	r3, r2, r3, r2
   80c70:	eb00 10d2 	add.w	r0, r0, r2, lsr #7
   80c74:	eba0 1252 	sub.w	r2, r0, r2, lsr #5
   80c78:	b289      	uxth	r1, r1
   80c7a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   80c7e:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
   80c82:	480b      	ldr	r0, [pc, #44]	; (80cb0 <__RTCdayByDate+0x9c>)
   80c84:	fb80 3001 	smull	r3, r0, r0, r1
   80c88:	17c9      	asrs	r1, r1, #31
   80c8a:	ebc1 0160 	rsb	r1, r1, r0, asr #1
   80c8e:	440a      	add	r2, r1
   80c90:	4808      	ldr	r0, [pc, #32]	; (80cb4 <__RTCdayByDate+0xa0>)
   80c92:	fba0 3002 	umull	r3, r0, r0, r2
   80c96:	1a13      	subs	r3, r2, r0
   80c98:	eb00 0053 	add.w	r0, r0, r3, lsr #1
   80c9c:	0880      	lsrs	r0, r0, #2
   80c9e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   80ca2:	1a10      	subs	r0, r2, r0
   80ca4:	3001      	adds	r0, #1
   80ca6:	b2c0      	uxtb	r0, r0
   80ca8:	4770      	bx	lr
   80caa:	bf00      	nop
   80cac:	51eb851f 	.word	0x51eb851f
   80cb0:	38e38e39 	.word	0x38e38e39
   80cb4:	24924925 	.word	0x24924925

00080cb8 <Shell>:
 {
   80cb8:	b40f      	push	{r0, r1, r2, r3}
   80cba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80cbe:	b090      	sub	sp, #64	; 0x40
	switch(sc)
   80cc0:	9918      	ldr	r1, [sp, #96]	; 0x60
   80cc2:	2902      	cmp	r1, #2
   80cc4:	f000 81a9 	beq.w	8101a <Shell+0x362>
   80cc8:	d956      	bls.n	80d78 <Shell+0xc0>
   80cca:	2904      	cmp	r1, #4
   80ccc:	f000 81c2 	beq.w	81054 <Shell+0x39c>
   80cd0:	2964      	cmp	r1, #100	; 0x64
   80cd2:	f040 8235 	bne.w	81140 <Shell+0x488>
		gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80cd6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80cda:	203b      	movs	r0, #59	; 0x3b
   80cdc:	4bad      	ldr	r3, [pc, #692]	; (80f94 <Shell+0x2dc>)
   80cde:	4798      	blx	r3
		gpio_set_pin_low(LED0_GPIO);
   80ce0:	203b      	movs	r0, #59	; 0x3b
   80ce2:	4bad      	ldr	r3, [pc, #692]	; (80f98 <Shell+0x2e0>)
   80ce4:	4798      	blx	r3
		PushTask(Shellcom,SHELLCOM_NEW, 0, 0);
   80ce6:	2400      	movs	r4, #0
   80ce8:	9400      	str	r4, [sp, #0]
   80cea:	4623      	mov	r3, r4
   80cec:	2264      	movs	r2, #100	; 0x64
   80cee:	49ab      	ldr	r1, [pc, #684]	; (80f9c <Shell+0x2e4>)
   80cf0:	2066      	movs	r0, #102	; 0x66
   80cf2:	4dab      	ldr	r5, [pc, #684]	; (80fa0 <Shell+0x2e8>)
   80cf4:	47a8      	blx	r5
		state = IDLE;
   80cf6:	4bab      	ldr	r3, [pc, #684]	; (80fa4 <Shell+0x2ec>)
   80cf8:	701c      	strb	r4, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80cfa:	2002      	movs	r0, #2
   80cfc:	4baa      	ldr	r3, [pc, #680]	; (80fa8 <Shell+0x2f0>)
   80cfe:	4798      	blx	r3
		rtc_set_hour_mode(RTC, 0);
   80d00:	4621      	mov	r1, r4
   80d02:	48aa      	ldr	r0, [pc, #680]	; (80fac <Shell+0x2f4>)
   80d04:	4baa      	ldr	r3, [pc, #680]	; (80fb0 <Shell+0x2f8>)
   80d06:	4798      	blx	r3
		if(nvm_read(INT_FLASH, TEST_ADDRESS_INT, (void *)data_read, sizeof(data_read))
   80d08:	231c      	movs	r3, #28
   80d0a:	aa05      	add	r2, sp, #20
   80d0c:	49a9      	ldr	r1, [pc, #676]	; (80fb4 <Shell+0x2fc>)
   80d0e:	4620      	mov	r0, r4
   80d10:	4ca9      	ldr	r4, [pc, #676]	; (80fb8 <Shell+0x300>)
   80d12:	47a0      	blx	r4
   80d14:	2800      	cmp	r0, #0
   80d16:	d149      	bne.n	80dac <Shell+0xf4>
			rtc_set_date(RTC, data_read[0], data_read[1], data_read[2], data_read[3]);
   80d18:	4ca4      	ldr	r4, [pc, #656]	; (80fac <Shell+0x2f4>)
   80d1a:	9b08      	ldr	r3, [sp, #32]
   80d1c:	9300      	str	r3, [sp, #0]
   80d1e:	9b07      	ldr	r3, [sp, #28]
   80d20:	9a06      	ldr	r2, [sp, #24]
   80d22:	9905      	ldr	r1, [sp, #20]
   80d24:	4620      	mov	r0, r4
   80d26:	4da5      	ldr	r5, [pc, #660]	; (80fbc <Shell+0x304>)
   80d28:	47a8      	blx	r5
			rtc_set_time(RTC, data_read[4], data_read[5], data_read[6]);
   80d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80d2e:	9909      	ldr	r1, [sp, #36]	; 0x24
   80d30:	4620      	mov	r0, r4
   80d32:	4ca3      	ldr	r4, [pc, #652]	; (80fc0 <Shell+0x308>)
   80d34:	47a0      	blx	r4
		rtc_enable_interrupt(RTC, RTC_IER_SECEN);
   80d36:	2104      	movs	r1, #4
   80d38:	489c      	ldr	r0, [pc, #624]	; (80fac <Shell+0x2f4>)
   80d3a:	4ba2      	ldr	r3, [pc, #648]	; (80fc4 <Shell+0x30c>)
   80d3c:	4798      	blx	r3
		PushTask(Shell,_SHELL_HEARTBEAT,0,0);
   80d3e:	4fa2      	ldr	r7, [pc, #648]	; (80fc8 <Shell+0x310>)
   80d40:	2400      	movs	r4, #0
   80d42:	9400      	str	r4, [sp, #0]
   80d44:	4623      	mov	r3, r4
   80d46:	2202      	movs	r2, #2
   80d48:	4639      	mov	r1, r7
   80d4a:	2066      	movs	r0, #102	; 0x66
   80d4c:	4d94      	ldr	r5, [pc, #592]	; (80fa0 <Shell+0x2e8>)
   80d4e:	47a8      	blx	r5
		PushTask(Shell,_SHELL_PROMPT,0,500);
   80d50:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
   80d54:	9600      	str	r6, [sp, #0]
   80d56:	4623      	mov	r3, r4
   80d58:	2204      	movs	r2, #4
   80d5a:	4639      	mov	r1, r7
   80d5c:	2066      	movs	r0, #102	; 0x66
   80d5e:	47a8      	blx	r5
		PushTask(Appli, APPLI_NEW, 0, 500);
   80d60:	9600      	str	r6, [sp, #0]
   80d62:	4623      	mov	r3, r4
   80d64:	2264      	movs	r2, #100	; 0x64
   80d66:	4999      	ldr	r1, [pc, #612]	; (80fcc <Shell+0x314>)
   80d68:	2066      	movs	r0, #102	; 0x66
   80d6a:	47a8      	blx	r5
 }
   80d6c:	2000      	movs	r0, #0
   80d6e:	b010      	add	sp, #64	; 0x40
   80d70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80d74:	b004      	add	sp, #16
   80d76:	4770      	bx	lr
	switch(sc)
   80d78:	2901      	cmp	r1, #1
   80d7a:	f040 81e1 	bne.w	81140 <Shell+0x488>
		switch(state)
   80d7e:	4b89      	ldr	r3, [pc, #548]	; (80fa4 <Shell+0x2ec>)
   80d80:	781b      	ldrb	r3, [r3, #0]
   80d82:	2b06      	cmp	r3, #6
   80d84:	f200 8143 	bhi.w	8100e <Shell+0x356>
   80d88:	a201      	add	r2, pc, #4	; (adr r2, 80d90 <Shell+0xd8>)
   80d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80d8e:	bf00      	nop
   80d90:	00080dcd 	.word	0x00080dcd
   80d94:	00080e65 	.word	0x00080e65
   80d98:	00080f09 	.word	0x00080f09
   80d9c:	00080d6d 	.word	0x00080d6d
   80da0:	00080d6d 	.word	0x00080d6d
   80da4:	00080d6d 	.word	0x00080d6d
   80da8:	00080d6d 	.word	0x00080d6d
			rtc_set_date(RTC, 0000, 0, 0, 0);
   80dac:	4d7f      	ldr	r5, [pc, #508]	; (80fac <Shell+0x2f4>)
   80dae:	2400      	movs	r4, #0
   80db0:	9400      	str	r4, [sp, #0]
   80db2:	4623      	mov	r3, r4
   80db4:	4622      	mov	r2, r4
   80db6:	4621      	mov	r1, r4
   80db8:	4628      	mov	r0, r5
   80dba:	4e80      	ldr	r6, [pc, #512]	; (80fbc <Shell+0x304>)
   80dbc:	47b0      	blx	r6
			rtc_set_time(RTC, 0, 0, 0);
   80dbe:	4623      	mov	r3, r4
   80dc0:	4622      	mov	r2, r4
   80dc2:	4621      	mov	r1, r4
   80dc4:	4628      	mov	r0, r5
   80dc6:	4c7e      	ldr	r4, [pc, #504]	; (80fc0 <Shell+0x308>)
   80dc8:	47a0      	blx	r4
   80dca:	e7b4      	b.n	80d36 <Shell+0x7e>
			switch(_kbhitChar)
   80dcc:	9d19      	ldr	r5, [sp, #100]	; 0x64
   80dce:	b2ec      	uxtb	r4, r5
   80dd0:	f1a4 0308 	sub.w	r3, r4, #8
   80dd4:	2b18      	cmp	r3, #24
   80dd6:	d835      	bhi.n	80e44 <Shell+0x18c>
   80dd8:	a201      	add	r2, pc, #4	; (adr r2, 80de0 <Shell+0x128>)
   80dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80dde:	bf00      	nop
   80de0:	00080d6d 	.word	0x00080d6d
   80de4:	00080d6d 	.word	0x00080d6d
   80de8:	00080d6d 	.word	0x00080d6d
   80dec:	00080e45 	.word	0x00080e45
   80df0:	00080e45 	.word	0x00080e45
   80df4:	00080d6d 	.word	0x00080d6d
   80df8:	00080e45 	.word	0x00080e45
   80dfc:	00080e45 	.word	0x00080e45
   80e00:	00080e45 	.word	0x00080e45
   80e04:	00080e45 	.word	0x00080e45
   80e08:	00080e45 	.word	0x00080e45
   80e0c:	00080e45 	.word	0x00080e45
   80e10:	00080e45 	.word	0x00080e45
   80e14:	00080e45 	.word	0x00080e45
   80e18:	00080e45 	.word	0x00080e45
   80e1c:	00080e45 	.word	0x00080e45
   80e20:	00080e45 	.word	0x00080e45
   80e24:	00080e45 	.word	0x00080e45
   80e28:	00080e45 	.word	0x00080e45
   80e2c:	00080d6d 	.word	0x00080d6d
   80e30:	00080e45 	.word	0x00080e45
   80e34:	00080e45 	.word	0x00080e45
   80e38:	00080e45 	.word	0x00080e45
   80e3c:	00080e45 	.word	0x00080e45
   80e40:	00080d6d 	.word	0x00080d6d
				Putstr("\r\n>");
   80e44:	4962      	ldr	r1, [pc, #392]	; (80fd0 <Shell+0x318>)
   80e46:	2067      	movs	r0, #103	; 0x67
   80e48:	4f54      	ldr	r7, [pc, #336]	; (80f9c <Shell+0x2e4>)
   80e4a:	47b8      	blx	r7
				*pEdit++ = _kbhitChar;
   80e4c:	4e55      	ldr	r6, [pc, #340]	; (80fa4 <Shell+0x2ec>)
   80e4e:	4b61      	ldr	r3, [pc, #388]	; (80fd4 <Shell+0x31c>)
   80e50:	60b3      	str	r3, [r6, #8]
			switch(_kbhitChar)
   80e52:	f803 5c01 	strb.w	r5, [r3, #-1]
				nbChar = 1;
   80e56:	2501      	movs	r5, #1
   80e58:	60f5      	str	r5, [r6, #12]
				Putch(_kbhitChar);
   80e5a:	4621      	mov	r1, r4
   80e5c:	2066      	movs	r0, #102	; 0x66
   80e5e:	47b8      	blx	r7
				state = EDITION;
   80e60:	7035      	strb	r5, [r6, #0]
				break;
   80e62:	e783      	b.n	80d6c <Shell+0xb4>
			switch(_kbhitChar)
   80e64:	9a19      	ldr	r2, [sp, #100]	; 0x64
   80e66:	b2d1      	uxtb	r1, r2
   80e68:	f1a1 0308 	sub.w	r3, r1, #8
   80e6c:	2b13      	cmp	r3, #19
   80e6e:	d83a      	bhi.n	80ee6 <Shell+0x22e>
   80e70:	a001      	add	r0, pc, #4	; (adr r0, 80e78 <Shell+0x1c0>)
   80e72:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   80e76:	bf00      	nop
   80e78:	00080d6d 	.word	0x00080d6d
   80e7c:	00080d6d 	.word	0x00080d6d
   80e80:	00080d6d 	.word	0x00080d6d
   80e84:	00080ee7 	.word	0x00080ee7
   80e88:	00080ee7 	.word	0x00080ee7
   80e8c:	00080ec9 	.word	0x00080ec9
   80e90:	00080ee7 	.word	0x00080ee7
   80e94:	00080ee7 	.word	0x00080ee7
   80e98:	00080ee7 	.word	0x00080ee7
   80e9c:	00080ee7 	.word	0x00080ee7
   80ea0:	00080ee7 	.word	0x00080ee7
   80ea4:	00080ee7 	.word	0x00080ee7
   80ea8:	00080ee7 	.word	0x00080ee7
   80eac:	00080ee7 	.word	0x00080ee7
   80eb0:	00080ee7 	.word	0x00080ee7
   80eb4:	00080ee7 	.word	0x00080ee7
   80eb8:	00080ee7 	.word	0x00080ee7
   80ebc:	00080ee7 	.word	0x00080ee7
   80ec0:	00080ee7 	.word	0x00080ee7
   80ec4:	00080d6d 	.word	0x00080d6d
				*pEdit++ = '\0';
   80ec8:	4a36      	ldr	r2, [pc, #216]	; (80fa4 <Shell+0x2ec>)
   80eca:	6891      	ldr	r1, [r2, #8]
   80ecc:	1c4b      	adds	r3, r1, #1
   80ece:	6093      	str	r3, [r2, #8]
   80ed0:	2300      	movs	r3, #0
   80ed2:	700b      	strb	r3, [r1, #0]
				state = EXECUTION;
   80ed4:	2102      	movs	r1, #2
   80ed6:	7011      	strb	r1, [r2, #0]
				PushTask(Shell, _SHELL_KBHIT, 0, 0);
   80ed8:	9300      	str	r3, [sp, #0]
   80eda:	2201      	movs	r2, #1
   80edc:	493a      	ldr	r1, [pc, #232]	; (80fc8 <Shell+0x310>)
   80ede:	2066      	movs	r0, #102	; 0x66
   80ee0:	4c2f      	ldr	r4, [pc, #188]	; (80fa0 <Shell+0x2e8>)
   80ee2:	47a0      	blx	r4
				break;
   80ee4:	e742      	b.n	80d6c <Shell+0xb4>
				if(nbChar < SHELL_EDIT_BUFFER_LEN - 2)
   80ee6:	4b2f      	ldr	r3, [pc, #188]	; (80fa4 <Shell+0x2ec>)
   80ee8:	68db      	ldr	r3, [r3, #12]
   80eea:	2bfd      	cmp	r3, #253	; 0xfd
   80eec:	f63f af3e 	bhi.w	80d6c <Shell+0xb4>
					*pEdit++ = _kbhitChar;
   80ef0:	4b2c      	ldr	r3, [pc, #176]	; (80fa4 <Shell+0x2ec>)
   80ef2:	6898      	ldr	r0, [r3, #8]
   80ef4:	1c44      	adds	r4, r0, #1
   80ef6:	609c      	str	r4, [r3, #8]
			switch(_kbhitChar)
   80ef8:	7002      	strb	r2, [r0, #0]
					nbChar++;
   80efa:	68da      	ldr	r2, [r3, #12]
   80efc:	3201      	adds	r2, #1
   80efe:	60da      	str	r2, [r3, #12]
					Putch(_kbhitChar);
   80f00:	2066      	movs	r0, #102	; 0x66
   80f02:	4b26      	ldr	r3, [pc, #152]	; (80f9c <Shell+0x2e4>)
   80f04:	4798      	blx	r3
   80f06:	e731      	b.n	80d6c <Shell+0xb4>
			Putstr("\r\n>>>");
   80f08:	4933      	ldr	r1, [pc, #204]	; (80fd8 <Shell+0x320>)
   80f0a:	2067      	movs	r0, #103	; 0x67
   80f0c:	4c23      	ldr	r4, [pc, #140]	; (80f9c <Shell+0x2e4>)
   80f0e:	47a0      	blx	r4
			Putstr(shellBuf);
   80f10:	4d32      	ldr	r5, [pc, #200]	; (80fdc <Shell+0x324>)
   80f12:	4629      	mov	r1, r5
   80f14:	2067      	movs	r0, #103	; 0x67
   80f16:	47a0      	blx	r4
			Putstr("\r\n");
   80f18:	4931      	ldr	r1, [pc, #196]	; (80fe0 <Shell+0x328>)
   80f1a:	2067      	movs	r0, #103	; 0x67
   80f1c:	47a0      	blx	r4
			pToken = (uint32_t)strtok(shellBuf, " \r\n");
   80f1e:	4931      	ldr	r1, [pc, #196]	; (80fe4 <Shell+0x32c>)
   80f20:	4628      	mov	r0, r5
   80f22:	4b31      	ldr	r3, [pc, #196]	; (80fe8 <Shell+0x330>)
   80f24:	4798      	blx	r3
   80f26:	4605      	mov	r5, r0
   80f28:	9018      	str	r0, [sp, #96]	; 0x60
			if(pToken)
   80f2a:	b918      	cbnz	r0, 80f34 <Shell+0x27c>
			state = IDLE;
   80f2c:	2200      	movs	r2, #0
   80f2e:	4b1d      	ldr	r3, [pc, #116]	; (80fa4 <Shell+0x2ec>)
   80f30:	701a      	strb	r2, [r3, #0]
			break;
   80f32:	e71b      	b.n	80d6c <Shell+0xb4>
				crc = CRC16MODBUSFRAME(pToken, strlen(pToken));
   80f34:	4b2d      	ldr	r3, [pc, #180]	; (80fec <Shell+0x334>)
   80f36:	4798      	blx	r3
   80f38:	4601      	mov	r1, r0
   80f3a:	4628      	mov	r0, r5
   80f3c:	4b2c      	ldr	r3, [pc, #176]	; (80ff0 <Shell+0x338>)
   80f3e:	4798      	blx	r3
   80f40:	b286      	uxth	r6, r0
   80f42:	4b18      	ldr	r3, [pc, #96]	; (80fa4 <Shell+0x2ec>)
   80f44:	821e      	strh	r6, [r3, #16]
				k = 0;
   80f46:	2300      	movs	r3, #0
   80f48:	930f      	str	r3, [sp, #60]	; 0x3c
				while(_cmdEntries[k].cmdCode && (_cmdEntries[k].cmdCode != crc)) k++;
   80f4a:	4b2a      	ldr	r3, [pc, #168]	; (80ff4 <Shell+0x33c>)
   80f4c:	881b      	ldrh	r3, [r3, #0]
   80f4e:	b1e3      	cbz	r3, 80f8a <Shell+0x2d2>
   80f50:	429e      	cmp	r6, r3
   80f52:	d01c      	beq.n	80f8e <Shell+0x2d6>
   80f54:	2301      	movs	r3, #1
   80f56:	4f27      	ldr	r7, [pc, #156]	; (80ff4 <Shell+0x33c>)
   80f58:	e000      	b.n	80f5c <Shell+0x2a4>
   80f5a:	4623      	mov	r3, r4
   80f5c:	f837 1033 	ldrh.w	r1, [r7, r3, lsl #3]
   80f60:	b121      	cbz	r1, 80f6c <Shell+0x2b4>
   80f62:	1c5c      	adds	r4, r3, #1
   80f64:	428e      	cmp	r6, r1
   80f66:	d1f8      	bne.n	80f5a <Shell+0x2a2>
   80f68:	930f      	str	r3, [sp, #60]	; 0x3c
   80f6a:	e000      	b.n	80f6e <Shell+0x2b6>
   80f6c:	930f      	str	r3, [sp, #60]	; 0x3c
				if(_cmdEntries[k].pCmdFunc)
   80f6e:	4921      	ldr	r1, [pc, #132]	; (80ff4 <Shell+0x33c>)
   80f70:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   80f74:	685c      	ldr	r4, [r3, #4]
   80f76:	2c00      	cmp	r4, #0
   80f78:	d03e      	beq.n	80ff8 <Shell+0x340>
					_cmdEntries[k].pCmdFunc(0, shellBuf + strlen(pToken) + 1);
   80f7a:	4628      	mov	r0, r5
   80f7c:	4b1b      	ldr	r3, [pc, #108]	; (80fec <Shell+0x334>)
   80f7e:	4798      	blx	r3
   80f80:	4914      	ldr	r1, [pc, #80]	; (80fd4 <Shell+0x31c>)
   80f82:	4401      	add	r1, r0
   80f84:	2000      	movs	r0, #0
   80f86:	47a0      	blx	r4
   80f88:	e7d0      	b.n	80f2c <Shell+0x274>
				while(_cmdEntries[k].cmdCode && (_cmdEntries[k].cmdCode != crc)) k++;
   80f8a:	2300      	movs	r3, #0
   80f8c:	e7ef      	b.n	80f6e <Shell+0x2b6>
   80f8e:	2300      	movs	r3, #0
   80f90:	e7ed      	b.n	80f6e <Shell+0x2b6>
   80f92:	bf00      	nop
   80f94:	00081b81 	.word	0x00081b81
   80f98:	00081b47 	.word	0x00081b47
   80f9c:	000813c1 	.word	0x000813c1
   80fa0:	000815d9 	.word	0x000815d9
   80fa4:	200711f8 	.word	0x200711f8
   80fa8:	00081ee5 	.word	0x00081ee5
   80fac:	400e1a60 	.word	0x400e1a60
   80fb0:	00080231 	.word	0x00080231
   80fb4:	000ff800 	.word	0x000ff800
   80fb8:	0008016d 	.word	0x0008016d
   80fbc:	000803ad 	.word	0x000803ad
   80fc0:	000802a5 	.word	0x000802a5
   80fc4:	00080247 	.word	0x00080247
   80fc8:	00080cb9 	.word	0x00080cb9
   80fcc:	000817f5 	.word	0x000817f5
   80fd0:	00086c4c 	.word	0x00086c4c
   80fd4:	20071211 	.word	0x20071211
   80fd8:	00086c50 	.word	0x00086c50
   80fdc:	20071210 	.word	0x20071210
   80fe0:	00086ba8 	.word	0x00086ba8
   80fe4:	00086c58 	.word	0x00086c58
   80fe8:	000823ad 	.word	0x000823ad
   80fec:	00082351 	.word	0x00082351
   80ff0:	00080b11 	.word	0x00080b11
   80ff4:	00086d68 	.word	0x00086d68
					sprintf(buf,"\r\nunknown cmd: %04X\r\n",crc);
   80ff8:	4c54      	ldr	r4, [pc, #336]	; (8114c <Shell+0x494>)
   80ffa:	b282      	uxth	r2, r0
   80ffc:	4954      	ldr	r1, [pc, #336]	; (81150 <Shell+0x498>)
   80ffe:	4620      	mov	r0, r4
   81000:	4b54      	ldr	r3, [pc, #336]	; (81154 <Shell+0x49c>)
   81002:	4798      	blx	r3
					Putstr(buf);
   81004:	4621      	mov	r1, r4
   81006:	2067      	movs	r0, #103	; 0x67
   81008:	4b53      	ldr	r3, [pc, #332]	; (81158 <Shell+0x4a0>)
   8100a:	4798      	blx	r3
   8100c:	e78e      	b.n	80f2c <Shell+0x274>
			Putch(_kbhitChar);
   8100e:	f89d 1064 	ldrb.w	r1, [sp, #100]	; 0x64
   81012:	2066      	movs	r0, #102	; 0x66
   81014:	4b50      	ldr	r3, [pc, #320]	; (81158 <Shell+0x4a0>)
   81016:	4798      	blx	r3
			break;
   81018:	e6a8      	b.n	80d6c <Shell+0xb4>
		k++; if(flashSequ[k]==0) k=0;
   8101a:	9c19      	ldr	r4, [sp, #100]	; 0x64
   8101c:	3401      	adds	r4, #1
   8101e:	9419      	str	r4, [sp, #100]	; 0x64
   81020:	4b4e      	ldr	r3, [pc, #312]	; (8115c <Shell+0x4a4>)
   81022:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   81026:	b133      	cbz	r3, 81036 <Shell+0x37e>
		if(k%2==0) gpio_set_pin_high(LED0_GPIO);
   81028:	f014 0f01 	tst.w	r4, #1
   8102c:	d004      	beq.n	81038 <Shell+0x380>
		else gpio_set_pin_low(LED0_GPIO);
   8102e:	203b      	movs	r0, #59	; 0x3b
   81030:	4b4b      	ldr	r3, [pc, #300]	; (81160 <Shell+0x4a8>)
   81032:	4798      	blx	r3
   81034:	e003      	b.n	8103e <Shell+0x386>
		if(k%2==0) gpio_set_pin_high(LED0_GPIO);
   81036:	2400      	movs	r4, #0
   81038:	203b      	movs	r0, #59	; 0x3b
   8103a:	4b4a      	ldr	r3, [pc, #296]	; (81164 <Shell+0x4ac>)
   8103c:	4798      	blx	r3
		PushTask(Shell,_SHELL_HEARTBEAT,k,flashSequ[k]);
   8103e:	4b47      	ldr	r3, [pc, #284]	; (8115c <Shell+0x4a4>)
   81040:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   81044:	9300      	str	r3, [sp, #0]
   81046:	4623      	mov	r3, r4
   81048:	2202      	movs	r2, #2
   8104a:	4947      	ldr	r1, [pc, #284]	; (81168 <Shell+0x4b0>)
   8104c:	2066      	movs	r0, #102	; 0x66
   8104e:	4c47      	ldr	r4, [pc, #284]	; (8116c <Shell+0x4b4>)
   81050:	47a0      	blx	r4
		break;
   81052:	e68b      	b.n	80d6c <Shell+0xb4>
		if(state==IDLE)
   81054:	4b46      	ldr	r3, [pc, #280]	; (81170 <Shell+0x4b8>)
   81056:	781b      	ldrb	r3, [r3, #0]
   81058:	b14b      	cbz	r3, 8106e <Shell+0x3b6>
		PushTask(Shell,_SHELL_PROMPT,0,300);
   8105a:	f44f 7396 	mov.w	r3, #300	; 0x12c
   8105e:	9300      	str	r3, [sp, #0]
   81060:	2300      	movs	r3, #0
   81062:	2204      	movs	r2, #4
   81064:	4940      	ldr	r1, [pc, #256]	; (81168 <Shell+0x4b0>)
   81066:	2066      	movs	r0, #102	; 0x66
   81068:	4c40      	ldr	r4, [pc, #256]	; (8116c <Shell+0x4b4>)
   8106a:	47a0      	blx	r4
		break;
   8106c:	e67e      	b.n	80d6c <Shell+0xb4>
			rtc_get_date(RTC, &yr, &mm, &dd, &wk);
   8106e:	4e41      	ldr	r6, [pc, #260]	; (81174 <Shell+0x4bc>)
   81070:	af0c      	add	r7, sp, #48	; 0x30
   81072:	9700      	str	r7, [sp, #0]
   81074:	ab0d      	add	r3, sp, #52	; 0x34
   81076:	aa0e      	add	r2, sp, #56	; 0x38
   81078:	a90f      	add	r1, sp, #60	; 0x3c
   8107a:	4630      	mov	r0, r6
   8107c:	4c3e      	ldr	r4, [pc, #248]	; (81178 <Shell+0x4c0>)
   8107e:	47a0      	blx	r4
			day = __RTCdayByDate(dd, mm, yr/100);
   81080:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   81084:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   81086:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   8108a:	4a3c      	ldr	r2, [pc, #240]	; (8117c <Shell+0x4c4>)
   8108c:	fba2 3209 	umull	r3, r2, r2, r9
   81090:	0952      	lsrs	r2, r2, #5
   81092:	4629      	mov	r1, r5
   81094:	4640      	mov	r0, r8
   81096:	4b3a      	ldr	r3, [pc, #232]	; (81180 <Shell+0x4c8>)
   81098:	4798      	blx	r3
			sprintf(buf,"%.3s %02d %.3s %02d", daysOfWeek[day - 3], dd, months[mm-1], yr);
   8109a:	3803      	subs	r0, #3
   8109c:	4b39      	ldr	r3, [pc, #228]	; (81184 <Shell+0x4cc>)
   8109e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   810a2:	4c2a      	ldr	r4, [pc, #168]	; (8114c <Shell+0x494>)
   810a4:	f8cd 9004 	str.w	r9, [sp, #4]
   810a8:	3d01      	subs	r5, #1
   810aa:	4b37      	ldr	r3, [pc, #220]	; (81188 <Shell+0x4d0>)
   810ac:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   810b0:	9300      	str	r3, [sp, #0]
   810b2:	4643      	mov	r3, r8
   810b4:	4935      	ldr	r1, [pc, #212]	; (8118c <Shell+0x4d4>)
   810b6:	4620      	mov	r0, r4
   810b8:	f8df a098 	ldr.w	sl, [pc, #152]	; 81154 <Shell+0x49c>
   810bc:	47d0      	blx	sl
			Putstr(buf);
   810be:	4621      	mov	r1, r4
   810c0:	2067      	movs	r0, #103	; 0x67
   810c2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 81158 <Shell+0x4a0>
   810c6:	47c8      	blx	r9
			LcdPutstr(buf, 0, 2);
   810c8:	2302      	movs	r3, #2
   810ca:	2200      	movs	r2, #0
   810cc:	4621      	mov	r1, r4
   810ce:	2066      	movs	r0, #102	; 0x66
   810d0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 811ac <Shell+0x4f4>
   810d4:	47c0      	blx	r8
			uint32_t bufferDate[] = {yr, mm, dd, wk};
   810d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   810d8:	9305      	str	r3, [sp, #20]
   810da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   810dc:	9306      	str	r3, [sp, #24]
   810de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   810e0:	9307      	str	r3, [sp, #28]
   810e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   810e4:	9308      	str	r3, [sp, #32]
			if(nvm_write(INT_FLASH, TEST_ADDRESS_INT, (void *)bufferDate, sizeof(bufferDate)) ==
   810e6:	2310      	movs	r3, #16
   810e8:	aa05      	add	r2, sp, #20
   810ea:	4929      	ldr	r1, [pc, #164]	; (81190 <Shell+0x4d8>)
   810ec:	2000      	movs	r0, #0
   810ee:	4d29      	ldr	r5, [pc, #164]	; (81194 <Shell+0x4dc>)
   810f0:	47a8      	blx	r5
			shell.iIndex = sizeof(bufferDate);
   810f2:	2210      	movs	r2, #16
   810f4:	4b1e      	ldr	r3, [pc, #120]	; (81170 <Shell+0x4b8>)
   810f6:	615a      	str	r2, [r3, #20]
			rtc_get_time(RTC, &hh, &mn, &sec);
   810f8:	463b      	mov	r3, r7
   810fa:	aa0d      	add	r2, sp, #52	; 0x34
   810fc:	a90e      	add	r1, sp, #56	; 0x38
   810fe:	4630      	mov	r0, r6
   81100:	4e25      	ldr	r6, [pc, #148]	; (81198 <Shell+0x4e0>)
   81102:	47b0      	blx	r6
			sprintf(buf, "%02d:%02d:%02d ", hh, mn, sec);
   81104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   81106:	9300      	str	r3, [sp, #0]
   81108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8110a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8110c:	4923      	ldr	r1, [pc, #140]	; (8119c <Shell+0x4e4>)
   8110e:	4620      	mov	r0, r4
   81110:	47d0      	blx	sl
			Putstr(buf);
   81112:	4621      	mov	r1, r4
   81114:	2067      	movs	r0, #103	; 0x67
   81116:	47c8      	blx	r9
			LcdPutstr(buf, 1, 5);
   81118:	2305      	movs	r3, #5
   8111a:	2201      	movs	r2, #1
   8111c:	4621      	mov	r1, r4
   8111e:	2066      	movs	r0, #102	; 0x66
   81120:	47c0      	blx	r8
			uint32_t bufferTime[] = {hh, mn, sec};
   81122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   81124:	9302      	str	r3, [sp, #8]
   81126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   81128:	9303      	str	r3, [sp, #12]
   8112a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8112c:	9304      	str	r3, [sp, #16]
			if(nvm_write(INT_FLASH, TEST_ADDRESS_INT + sizeof(bufferDate), (void *)bufferTime, sizeof(bufferTime)) ==
   8112e:	230c      	movs	r3, #12
   81130:	aa02      	add	r2, sp, #8
   81132:	491b      	ldr	r1, [pc, #108]	; (811a0 <Shell+0x4e8>)
   81134:	2000      	movs	r0, #0
   81136:	47a8      	blx	r5
			Menu(MENU_PROMPT);
   81138:	2068      	movs	r0, #104	; 0x68
   8113a:	4b1a      	ldr	r3, [pc, #104]	; (811a4 <Shell+0x4ec>)
   8113c:	4798      	blx	r3
   8113e:	e78c      	b.n	8105a <Shell+0x3a2>
		Error(ERR_SHELL_SWITCH_BAD_SC,sc);
   81140:	4b19      	ldr	r3, [pc, #100]	; (811a8 <Shell+0x4f0>)
   81142:	681b      	ldr	r3, [r3, #0]
   81144:	200e      	movs	r0, #14
   81146:	4798      	blx	r3
   81148:	e610      	b.n	80d6c <Shell+0xb4>
   8114a:	bf00      	nop
   8114c:	20071570 	.word	0x20071570
   81150:	00086c5c 	.word	0x00086c5c
   81154:	00082305 	.word	0x00082305
   81158:	000813c1 	.word	0x000813c1
   8115c:	00086c98 	.word	0x00086c98
   81160:	00081b47 	.word	0x00081b47
   81164:	00081b2d 	.word	0x00081b2d
   81168:	00080cb9 	.word	0x00080cb9
   8116c:	000815d9 	.word	0x000815d9
   81170:	200711f8 	.word	0x200711f8
   81174:	400e1a60 	.word	0x400e1a60
   81178:	00080339 	.word	0x00080339
   8117c:	51eb851f 	.word	0x51eb851f
   81180:	00080c15 	.word	0x00080c15
   81184:	200705d4 	.word	0x200705d4
   81188:	200705f0 	.word	0x200705f0
   8118c:	00086c74 	.word	0x00086c74
   81190:	000ff800 	.word	0x000ff800
   81194:	00080189 	.word	0x00080189
   81198:	0008024b 	.word	0x0008024b
   8119c:	00086c88 	.word	0x00086c88
   811a0:	000ff810 	.word	0x000ff810
   811a4:	000807e1 	.word	0x000807e1
   811a8:	200705d0 	.word	0x200705d0
   811ac:	000805a1 	.word	0x000805a1

000811b0 <_cmd_set>:
};



void _cmd_set(uint32_t sc, void* pParam)
{
   811b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   811b4:	b082      	sub	sp, #8
   811b6:	4608      	mov	r0, r1
	uint16_t crc;
	uint32_t u1, u2, u3, u4;

#define pToken sc
	pToken = (uint32_t)strtok(pParam, " \r\n");
   811b8:	4939      	ldr	r1, [pc, #228]	; (812a0 <_cmd_set+0xf0>)
   811ba:	4b3a      	ldr	r3, [pc, #232]	; (812a4 <_cmd_set+0xf4>)
   811bc:	4798      	blx	r3
	if(pToken)
   811be:	b910      	cbnz	r0, 811c6 <_cmd_set+0x16>
			Putstr(buf);
			break;
		}		
#undef pToken
	}
}
   811c0:	b002      	add	sp, #8
   811c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   811c6:	4604      	mov	r4, r0
		crc = CRC16MODBUSFRAME((unsigned char*)pToken, strlen((char*)pToken));
   811c8:	4b37      	ldr	r3, [pc, #220]	; (812a8 <_cmd_set+0xf8>)
   811ca:	4798      	blx	r3
   811cc:	4601      	mov	r1, r0
   811ce:	4620      	mov	r0, r4
   811d0:	4b36      	ldr	r3, [pc, #216]	; (812ac <_cmd_set+0xfc>)
   811d2:	4798      	blx	r3
   811d4:	b282      	uxth	r2, r0
		switch(crc)
   811d6:	f247 3327 	movw	r3, #29479	; 0x7327
   811da:	429a      	cmp	r2, r3
   811dc:	d00d      	beq.n	811fa <_cmd_set+0x4a>
   811de:	f24e 13a9 	movw	r3, #57769	; 0xe1a9
   811e2:	429a      	cmp	r2, r3
   811e4:	d02e      	beq.n	81244 <_cmd_set+0x94>
			sprintf(buf,"\r\nunknown cmd: %04X\r\n",crc);
   811e6:	4c32      	ldr	r4, [pc, #200]	; (812b0 <_cmd_set+0x100>)
   811e8:	4932      	ldr	r1, [pc, #200]	; (812b4 <_cmd_set+0x104>)
   811ea:	4620      	mov	r0, r4
   811ec:	4b32      	ldr	r3, [pc, #200]	; (812b8 <_cmd_set+0x108>)
   811ee:	4798      	blx	r3
			Putstr(buf);
   811f0:	4621      	mov	r1, r4
   811f2:	2067      	movs	r0, #103	; 0x67
   811f4:	4b31      	ldr	r3, [pc, #196]	; (812bc <_cmd_set+0x10c>)
   811f6:	4798      	blx	r3
}
   811f8:	e7e2      	b.n	811c0 <_cmd_set+0x10>
			pToken = strtok(NULL, " : \r\n");
   811fa:	4931      	ldr	r1, [pc, #196]	; (812c0 <_cmd_set+0x110>)
   811fc:	2000      	movs	r0, #0
   811fe:	4b29      	ldr	r3, [pc, #164]	; (812a4 <_cmd_set+0xf4>)
   81200:	4798      	blx	r3
			if(pToken) hh = atoi(pToken);
   81202:	b998      	cbnz	r0, 8122c <_cmd_set+0x7c>
			pToken = strtok(NULL, " : \r\n");
   81204:	492e      	ldr	r1, [pc, #184]	; (812c0 <_cmd_set+0x110>)
   81206:	2000      	movs	r0, #0
   81208:	4b26      	ldr	r3, [pc, #152]	; (812a4 <_cmd_set+0xf4>)
   8120a:	4798      	blx	r3
			if(pToken) mn = atoi(pToken);
   8120c:	b990      	cbnz	r0, 81234 <_cmd_set+0x84>
			pToken = strtok(NULL, " : \r\n");
   8120e:	492c      	ldr	r1, [pc, #176]	; (812c0 <_cmd_set+0x110>)
   81210:	2000      	movs	r0, #0
   81212:	4b24      	ldr	r3, [pc, #144]	; (812a4 <_cmd_set+0xf4>)
   81214:	4798      	blx	r3
			if(pToken) sec = atoi(pToken);
   81216:	b988      	cbnz	r0, 8123c <_cmd_set+0x8c>
			rtc_set_time(RTC, hh, mn, sec);
   81218:	462b      	mov	r3, r5
   8121a:	463a      	mov	r2, r7
   8121c:	4631      	mov	r1, r6
   8121e:	4829      	ldr	r0, [pc, #164]	; (812c4 <_cmd_set+0x114>)
   81220:	4c29      	ldr	r4, [pc, #164]	; (812c8 <_cmd_set+0x118>)
   81222:	47a0      	blx	r4
			gpio_set_pin_high(PIO_PA16_IDX);
   81224:	2010      	movs	r0, #16
   81226:	4b29      	ldr	r3, [pc, #164]	; (812cc <_cmd_set+0x11c>)
   81228:	4798      	blx	r3
			break;
   8122a:	e7c9      	b.n	811c0 <_cmd_set+0x10>
			if(pToken) hh = atoi(pToken);
   8122c:	4b28      	ldr	r3, [pc, #160]	; (812d0 <_cmd_set+0x120>)
   8122e:	4798      	blx	r3
   81230:	4606      	mov	r6, r0
   81232:	e7e7      	b.n	81204 <_cmd_set+0x54>
			if(pToken) mn = atoi(pToken);
   81234:	4b26      	ldr	r3, [pc, #152]	; (812d0 <_cmd_set+0x120>)
   81236:	4798      	blx	r3
   81238:	4607      	mov	r7, r0
   8123a:	e7e8      	b.n	8120e <_cmd_set+0x5e>
			if(pToken) sec = atoi(pToken);
   8123c:	4b24      	ldr	r3, [pc, #144]	; (812d0 <_cmd_set+0x120>)
   8123e:	4798      	blx	r3
   81240:	4605      	mov	r5, r0
   81242:	e7e9      	b.n	81218 <_cmd_set+0x68>
			pToken = strtok(NULL, " : \r\n");
   81244:	491e      	ldr	r1, [pc, #120]	; (812c0 <_cmd_set+0x110>)
   81246:	2000      	movs	r0, #0
   81248:	4b16      	ldr	r3, [pc, #88]	; (812a4 <_cmd_set+0xf4>)
   8124a:	4798      	blx	r3
			if(pToken) yr = atoi(pToken);
   8124c:	b9b8      	cbnz	r0, 8127e <_cmd_set+0xce>
			pToken = strtok(NULL, " : \r\n");
   8124e:	491c      	ldr	r1, [pc, #112]	; (812c0 <_cmd_set+0x110>)
   81250:	2000      	movs	r0, #0
   81252:	4b14      	ldr	r3, [pc, #80]	; (812a4 <_cmd_set+0xf4>)
   81254:	4798      	blx	r3
			if(pToken) mm = atoi(pToken);
   81256:	b9b0      	cbnz	r0, 81286 <_cmd_set+0xd6>
			pToken = strtok(NULL, " : \r\n");
   81258:	4919      	ldr	r1, [pc, #100]	; (812c0 <_cmd_set+0x110>)
   8125a:	2000      	movs	r0, #0
   8125c:	4b11      	ldr	r3, [pc, #68]	; (812a4 <_cmd_set+0xf4>)
   8125e:	4798      	blx	r3
			if(pToken) dd = atoi(pToken);
   81260:	b9a8      	cbnz	r0, 8128e <_cmd_set+0xde>
			pToken = strtok(NULL, " : \r\n");
   81262:	4917      	ldr	r1, [pc, #92]	; (812c0 <_cmd_set+0x110>)
   81264:	2000      	movs	r0, #0
   81266:	4b0f      	ldr	r3, [pc, #60]	; (812a4 <_cmd_set+0xf4>)
   81268:	4798      	blx	r3
			if(pToken) wk = atoi(pToken);
   8126a:	b9a0      	cbnz	r0, 81296 <_cmd_set+0xe6>
			rtc_set_date(RTC, yr, mm, dd, wk);
   8126c:	f8cd 8000 	str.w	r8, [sp]
   81270:	462b      	mov	r3, r5
   81272:	463a      	mov	r2, r7
   81274:	4631      	mov	r1, r6
   81276:	4813      	ldr	r0, [pc, #76]	; (812c4 <_cmd_set+0x114>)
   81278:	4c16      	ldr	r4, [pc, #88]	; (812d4 <_cmd_set+0x124>)
   8127a:	47a0      	blx	r4
			break;
   8127c:	e7a0      	b.n	811c0 <_cmd_set+0x10>
			if(pToken) yr = atoi(pToken);
   8127e:	4b14      	ldr	r3, [pc, #80]	; (812d0 <_cmd_set+0x120>)
   81280:	4798      	blx	r3
   81282:	4606      	mov	r6, r0
   81284:	e7e3      	b.n	8124e <_cmd_set+0x9e>
			if(pToken) mm = atoi(pToken);
   81286:	4b12      	ldr	r3, [pc, #72]	; (812d0 <_cmd_set+0x120>)
   81288:	4798      	blx	r3
   8128a:	4607      	mov	r7, r0
   8128c:	e7e4      	b.n	81258 <_cmd_set+0xa8>
			if(pToken) dd = atoi(pToken);
   8128e:	4b10      	ldr	r3, [pc, #64]	; (812d0 <_cmd_set+0x120>)
   81290:	4798      	blx	r3
   81292:	4605      	mov	r5, r0
   81294:	e7e5      	b.n	81262 <_cmd_set+0xb2>
			if(pToken) wk = atoi(pToken);
   81296:	4b0e      	ldr	r3, [pc, #56]	; (812d0 <_cmd_set+0x120>)
   81298:	4798      	blx	r3
   8129a:	4680      	mov	r8, r0
   8129c:	e7e6      	b.n	8126c <_cmd_set+0xbc>
   8129e:	bf00      	nop
   812a0:	00086c58 	.word	0x00086c58
   812a4:	000823ad 	.word	0x000823ad
   812a8:	00082351 	.word	0x00082351
   812ac:	00080b11 	.word	0x00080b11
   812b0:	20071570 	.word	0x20071570
   812b4:	00086c5c 	.word	0x00086c5c
   812b8:	00082305 	.word	0x00082305
   812bc:	000813c1 	.word	0x000813c1
   812c0:	00086d88 	.word	0x00086d88
   812c4:	400e1a60 	.word	0x400e1a60
   812c8:	000802a5 	.word	0x000802a5
   812cc:	00081b2d 	.word	0x00081b2d
   812d0:	00082125 	.word	0x00082125
   812d4:	000803ad 	.word	0x000803ad

000812d8 <_cmd_show>:

void _cmd_show(uint32_t sc, void* pParam)
 {
   812d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   812da:	4b1b      	ldr	r3, [pc, #108]	; (81348 <_cmd_show+0x70>)
   812dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(PIN_LED_IDX))
   812de:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   812e2:	d118      	bne.n	81316 <_cmd_show+0x3e>
		ioport_set_pin_level(PIN_LED_IDX,0);
		Putstr(buf);
	}
	else
	{
	sprintf(buf, "L'etat de la broche etait bas \r\n");
   812e4:	4e19      	ldr	r6, [pc, #100]	; (8134c <_cmd_show+0x74>)
   812e6:	4c1a      	ldr	r4, [pc, #104]	; (81350 <_cmd_show+0x78>)
   812e8:	f106 0720 	add.w	r7, r6, #32
   812ec:	4635      	mov	r5, r6
   812ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   812f0:	6020      	str	r0, [r4, #0]
   812f2:	6061      	str	r1, [r4, #4]
   812f4:	60a2      	str	r2, [r4, #8]
   812f6:	60e3      	str	r3, [r4, #12]
   812f8:	462e      	mov	r6, r5
   812fa:	3410      	adds	r4, #16
   812fc:	42bd      	cmp	r5, r7
   812fe:	d1f5      	bne.n	812ec <_cmd_show+0x14>
   81300:	782b      	ldrb	r3, [r5, #0]
   81302:	7023      	strb	r3, [r4, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81304:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   81308:	4b0f      	ldr	r3, [pc, #60]	; (81348 <_cmd_show+0x70>)
   8130a:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(PIN_LED_IDX,1);
	Putstr(buf);
   8130c:	4910      	ldr	r1, [pc, #64]	; (81350 <_cmd_show+0x78>)
   8130e:	2067      	movs	r0, #103	; 0x67
   81310:	4b10      	ldr	r3, [pc, #64]	; (81354 <_cmd_show+0x7c>)
   81312:	4798      	blx	r3
   81314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sprintf(buf, "L'etat de la broche etait haut \r\n");
   81316:	4e10      	ldr	r6, [pc, #64]	; (81358 <_cmd_show+0x80>)
   81318:	4c0d      	ldr	r4, [pc, #52]	; (81350 <_cmd_show+0x78>)
   8131a:	f106 0720 	add.w	r7, r6, #32
   8131e:	4635      	mov	r5, r6
   81320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81322:	6020      	str	r0, [r4, #0]
   81324:	6061      	str	r1, [r4, #4]
   81326:	60a2      	str	r2, [r4, #8]
   81328:	60e3      	str	r3, [r4, #12]
   8132a:	462e      	mov	r6, r5
   8132c:	3410      	adds	r4, #16
   8132e:	42bd      	cmp	r5, r7
   81330:	d1f5      	bne.n	8131e <_cmd_show+0x46>
   81332:	882b      	ldrh	r3, [r5, #0]
   81334:	8023      	strh	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81336:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8133a:	4b03      	ldr	r3, [pc, #12]	; (81348 <_cmd_show+0x70>)
   8133c:	635a      	str	r2, [r3, #52]	; 0x34
		Putstr(buf);
   8133e:	4904      	ldr	r1, [pc, #16]	; (81350 <_cmd_show+0x78>)
   81340:	2067      	movs	r0, #103	; 0x67
   81342:	4b04      	ldr	r3, [pc, #16]	; (81354 <_cmd_show+0x7c>)
   81344:	4798      	blx	r3
   81346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81348:	400e0e00 	.word	0x400e0e00
   8134c:	00086db4 	.word	0x00086db4
   81350:	20071570 	.word	0x20071570
   81354:	000813c1 	.word	0x000813c1
   81358:	00086d90 	.word	0x00086d90

0008135c <_cmd_menu>:

	}
 }

 void _cmd_menu(uint32_t sc, void* pParam)
 {
   8135c:	b510      	push	{r4, lr}
   8135e:	4608      	mov	r0, r1
	uint16_t crc;
#define pToken sc
	pToken = (uint32_t)strtok(pParam, " \r\n");
   81360:	4911      	ldr	r1, [pc, #68]	; (813a8 <_cmd_menu+0x4c>)
   81362:	4b12      	ldr	r3, [pc, #72]	; (813ac <_cmd_menu+0x50>)
   81364:	4798      	blx	r3
	if(pToken)
   81366:	b900      	cbnz	r0, 8136a <_cmd_menu+0xe>
   81368:	bd10      	pop	{r4, pc}
   8136a:	4604      	mov	r4, r0
	{
		crc = CRC16MODBUSFRAME((unsigned char*)pToken, strlen((char*)pToken));
   8136c:	4b10      	ldr	r3, [pc, #64]	; (813b0 <_cmd_menu+0x54>)
   8136e:	4798      	blx	r3
   81370:	4601      	mov	r1, r0
   81372:	4620      	mov	r0, r4
   81374:	4b0f      	ldr	r3, [pc, #60]	; (813b4 <_cmd_menu+0x58>)
   81376:	4798      	blx	r3
		switch(crc)
   81378:	b280      	uxth	r0, r0
   8137a:	f648 0362 	movw	r3, #34914	; 0x8862
   8137e:	4298      	cmp	r0, r3
   81380:	d007      	beq.n	81392 <_cmd_menu+0x36>
   81382:	f648 338b 	movw	r3, #35723	; 0x8b8b
   81386:	4298      	cmp	r0, r3
   81388:	d107      	bne.n	8139a <_cmd_menu+0x3e>
		{
		case 0x8B8B:			//switch
			Menu(MENU_SWITCH_BUTTON);
   8138a:	2065      	movs	r0, #101	; 0x65
   8138c:	4b0a      	ldr	r3, [pc, #40]	; (813b8 <_cmd_menu+0x5c>)
   8138e:	4798      	blx	r3
			break;
   81390:	bd10      	pop	{r4, pc}
		case 0x8862:			//select
			Menu(MENU_SELECT_BUTTON);
   81392:	2066      	movs	r0, #102	; 0x66
   81394:	4b08      	ldr	r3, [pc, #32]	; (813b8 <_cmd_menu+0x5c>)
   81396:	4798      	blx	r3
			break;	
   81398:	bd10      	pop	{r4, pc}
		default:
			Error(ERR_SHELL_CMD_MENU_SWITCH_BAD_SC, sc);
   8139a:	4b08      	ldr	r3, [pc, #32]	; (813bc <_cmd_menu+0x60>)
   8139c:	681b      	ldr	r3, [r3, #0]
   8139e:	4621      	mov	r1, r4
   813a0:	2013      	movs	r0, #19
   813a2:	4798      	blx	r3
		}
#undef pToken
	}
	

 }
   813a4:	e7e0      	b.n	81368 <_cmd_menu+0xc>
   813a6:	bf00      	nop
   813a8:	00086c58 	.word	0x00086c58
   813ac:	000823ad 	.word	0x000823ad
   813b0:	00082351 	.word	0x00082351
   813b4:	00080b11 	.word	0x00080b11
   813b8:	000807e1 	.word	0x000807e1
   813bc:	200705d0 	.word	0x200705d0

000813c0 <Shellcom>:




 uint32_t Shellcom(uint32_t sc , ...)
 {
   813c0:	b40f      	push	{r0, r1, r2, r3}
   813c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(sc)
   813c4:	9906      	ldr	r1, [sp, #24]
   813c6:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   813ca:	2b04      	cmp	r3, #4
   813cc:	f200 80a2 	bhi.w	81514 <Shellcom+0x154>
   813d0:	e8df f003 	tbb	[pc, r3]
   813d4:	2376a045 	.word	0x2376a045
   813d8:	03          	.byte	0x03
   813d9:	00          	.byte	0x00
#undef _pStr
		break;
	case SHELLCOM_PUTSTRLEN:
#define _pStr pa1
#define _len  pa2
	while(_len)
   813da:	9d08      	ldr	r5, [sp, #32]
   813dc:	2d00      	cmp	r5, #0
   813de:	d06a      	beq.n	814b6 <Shellcom+0xf6>
	{
		*pTxWrite++ = *(char*)_pStr++; _len--;
   813e0:	4c4f      	ldr	r4, [pc, #316]	; (81520 <Shellcom+0x160>)
		if(pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) pTxWrite=shellcomTxBuf;
   813e2:	4e50      	ldr	r6, [pc, #320]	; (81524 <Shellcom+0x164>)
   813e4:	f5a6 7780 	sub.w	r7, r6, #256	; 0x100
		*pTxWrite++ = *(char*)_pStr++; _len--;
   813e8:	6823      	ldr	r3, [r4, #0]
   813ea:	1c5a      	adds	r2, r3, #1
   813ec:	6022      	str	r2, [r4, #0]
   813ee:	9a07      	ldr	r2, [sp, #28]
   813f0:	1c51      	adds	r1, r2, #1
   813f2:	9107      	str	r1, [sp, #28]
   813f4:	7812      	ldrb	r2, [r2, #0]
   813f6:	701a      	strb	r2, [r3, #0]
   813f8:	3d01      	subs	r5, #1
   813fa:	9508      	str	r5, [sp, #32]
		if(pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) pTxWrite=shellcomTxBuf;
   813fc:	6823      	ldr	r3, [r4, #0]
   813fe:	42b3      	cmp	r3, r6
   81400:	bf28      	it	cs
   81402:	6027      	strcs	r7, [r4, #0]
		if(pTxWrite==pTxRead) Error(ERR_SHELCOM_TXBUF_FULL,SHELLCOM_PUTSTR);
   81404:	6822      	ldr	r2, [r4, #0]
   81406:	6863      	ldr	r3, [r4, #4]
   81408:	429a      	cmp	r2, r3
   8140a:	d07d      	beq.n	81508 <Shellcom+0x148>
		usart_enable_interrupt(USART_SERIAL, US_IER_TXRDY);
   8140c:	2102      	movs	r1, #2
   8140e:	4846      	ldr	r0, [pc, #280]	; (81528 <Shellcom+0x168>)
   81410:	4b46      	ldr	r3, [pc, #280]	; (8152c <Shellcom+0x16c>)
   81412:	4798      	blx	r3
	while(_len)
   81414:	2d00      	cmp	r5, #0
   81416:	d1e7      	bne.n	813e8 <Shellcom+0x28>
   81418:	e04d      	b.n	814b6 <Shellcom+0xf6>
		while(*(char*)_pStr)
   8141a:	9d07      	ldr	r5, [sp, #28]
   8141c:	462a      	mov	r2, r5
   8141e:	782b      	ldrb	r3, [r5, #0]
   81420:	2b00      	cmp	r3, #0
   81422:	d048      	beq.n	814b6 <Shellcom+0xf6>
   81424:	3501      	adds	r5, #1
			*pTxWrite++ = *(char*)_pStr++;
   81426:	4c3e      	ldr	r4, [pc, #248]	; (81520 <Shellcom+0x160>)
			if(pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) pTxWrite=shellcomTxBuf;
   81428:	4e3e      	ldr	r6, [pc, #248]	; (81524 <Shellcom+0x164>)
   8142a:	f5a6 7780 	sub.w	r7, r6, #256	; 0x100
			*pTxWrite++ = *(char*)_pStr++;
   8142e:	6823      	ldr	r3, [r4, #0]
   81430:	1c59      	adds	r1, r3, #1
   81432:	6021      	str	r1, [r4, #0]
   81434:	9507      	str	r5, [sp, #28]
   81436:	7812      	ldrb	r2, [r2, #0]
   81438:	701a      	strb	r2, [r3, #0]
			if(pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) pTxWrite=shellcomTxBuf;
   8143a:	6823      	ldr	r3, [r4, #0]
   8143c:	42b3      	cmp	r3, r6
   8143e:	bf28      	it	cs
   81440:	6027      	strcs	r7, [r4, #0]
			if(pTxWrite==pTxRead) Error(ERR_SHELCOM_TXBUF_FULL,SHELLCOM_PUTSTR);
   81442:	6822      	ldr	r2, [r4, #0]
   81444:	6863      	ldr	r3, [r4, #4]
   81446:	429a      	cmp	r2, r3
   81448:	d058      	beq.n	814fc <Shellcom+0x13c>
			usart_enable_interrupt(USART_SERIAL, US_IER_TXRDY);
   8144a:	2102      	movs	r1, #2
   8144c:	4836      	ldr	r0, [pc, #216]	; (81528 <Shellcom+0x168>)
   8144e:	4b37      	ldr	r3, [pc, #220]	; (8152c <Shellcom+0x16c>)
   81450:	4798      	blx	r3
		while(*(char*)_pStr)
   81452:	462a      	mov	r2, r5
   81454:	f815 3b01 	ldrb.w	r3, [r5], #1
   81458:	2b00      	cmp	r3, #0
   8145a:	d1e8      	bne.n	8142e <Shellcom+0x6e>
   8145c:	e02b      	b.n	814b6 <Shellcom+0xf6>
		pTxWrite = pTxRead = shellcomTxBuf;
   8145e:	4b30      	ldr	r3, [pc, #192]	; (81520 <Shellcom+0x160>)
   81460:	4a33      	ldr	r2, [pc, #204]	; (81530 <Shellcom+0x170>)
   81462:	605a      	str	r2, [r3, #4]
   81464:	601a      	str	r2, [r3, #0]
   81466:	2011      	movs	r0, #17
   81468:	4c32      	ldr	r4, [pc, #200]	; (81534 <Shellcom+0x174>)
   8146a:	47a0      	blx	r4
		usart_init_rs232(USART_SERIAL, &usart_console_settings,	sysclk_get_cpu_hz());
   8146c:	4d2e      	ldr	r5, [pc, #184]	; (81528 <Shellcom+0x168>)
   8146e:	4a32      	ldr	r2, [pc, #200]	; (81538 <Shellcom+0x178>)
   81470:	4932      	ldr	r1, [pc, #200]	; (8153c <Shellcom+0x17c>)
   81472:	4628      	mov	r0, r5
   81474:	4b32      	ldr	r3, [pc, #200]	; (81540 <Shellcom+0x180>)
   81476:	4798      	blx	r3
		gpio_configure_pin(USART_SERIAL_TXD_IDX,USART_SERIAL_TXD_FLAGS);
   81478:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8147c:	200b      	movs	r0, #11
   8147e:	4e31      	ldr	r6, [pc, #196]	; (81544 <Shellcom+0x184>)
   81480:	47b0      	blx	r6
		gpio_configure_pin(USART_SERIAL_RXD_IDX,USART_SERIAL_RXD_FLAGS);
   81482:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81486:	200a      	movs	r0, #10
   81488:	47b0      	blx	r6
		usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);
   8148a:	2101      	movs	r1, #1
   8148c:	4628      	mov	r0, r5
   8148e:	4b27      	ldr	r3, [pc, #156]	; (8152c <Shellcom+0x16c>)
   81490:	4798      	blx	r3
   81492:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   81496:	4b2c      	ldr	r3, [pc, #176]	; (81548 <Shellcom+0x188>)
   81498:	601a      	str	r2, [r3, #0]
		usart_enable_tx(USART_SERIAL);
   8149a:	4628      	mov	r0, r5
   8149c:	4b2b      	ldr	r3, [pc, #172]	; (8154c <Shellcom+0x18c>)
   8149e:	4798      	blx	r3
		usart_enable_rx(USART_SERIAL);
   814a0:	4628      	mov	r0, r5
   814a2:	4b2b      	ldr	r3, [pc, #172]	; (81550 <Shellcom+0x190>)
   814a4:	4798      	blx	r3
   814a6:	200b      	movs	r0, #11
   814a8:	47a0      	blx	r4
   814aa:	200c      	movs	r0, #12
   814ac:	47a0      	blx	r4
   814ae:	200d      	movs	r0, #13
   814b0:	47a0      	blx	r4
   814b2:	200e      	movs	r0, #14
   814b4:	47a0      	blx	r4
	default:
		Error(ERR_SHELLCOM_SWITCH_BAD_SC,sc);
	}

	return 0;
 }
   814b6:	2000      	movs	r0, #0
   814b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   814bc:	b004      	add	sp, #16
   814be:	4770      	bx	lr
		*pTxWrite++ = _ch;
   814c0:	4b17      	ldr	r3, [pc, #92]	; (81520 <Shellcom+0x160>)
   814c2:	681a      	ldr	r2, [r3, #0]
   814c4:	1c51      	adds	r1, r2, #1
   814c6:	6019      	str	r1, [r3, #0]
   814c8:	9907      	ldr	r1, [sp, #28]
   814ca:	7011      	strb	r1, [r2, #0]
		if(pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) pTxWrite=shellcomTxBuf;
   814cc:	681a      	ldr	r2, [r3, #0]
   814ce:	4b15      	ldr	r3, [pc, #84]	; (81524 <Shellcom+0x164>)
   814d0:	429a      	cmp	r2, r3
   814d2:	d303      	bcc.n	814dc <Shellcom+0x11c>
   814d4:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
   814d8:	4b11      	ldr	r3, [pc, #68]	; (81520 <Shellcom+0x160>)
   814da:	601a      	str	r2, [r3, #0]
		if(pTxWrite==pTxRead) Error(ERR_SHELCOM_TXBUF_FULL,SHELLCOM_PUTC);
   814dc:	4b10      	ldr	r3, [pc, #64]	; (81520 <Shellcom+0x160>)
   814de:	681a      	ldr	r2, [r3, #0]
   814e0:	685b      	ldr	r3, [r3, #4]
   814e2:	429a      	cmp	r2, r3
   814e4:	d004      	beq.n	814f0 <Shellcom+0x130>
		usart_enable_interrupt(USART_SERIAL, US_IER_TXRDY);
   814e6:	2102      	movs	r1, #2
   814e8:	480f      	ldr	r0, [pc, #60]	; (81528 <Shellcom+0x168>)
   814ea:	4b10      	ldr	r3, [pc, #64]	; (8152c <Shellcom+0x16c>)
   814ec:	4798      	blx	r3
		break;
   814ee:	e7e2      	b.n	814b6 <Shellcom+0xf6>
		if(pTxWrite==pTxRead) Error(ERR_SHELCOM_TXBUF_FULL,SHELLCOM_PUTC);
   814f0:	4b18      	ldr	r3, [pc, #96]	; (81554 <Shellcom+0x194>)
   814f2:	681b      	ldr	r3, [r3, #0]
   814f4:	2166      	movs	r1, #102	; 0x66
   814f6:	2017      	movs	r0, #23
   814f8:	4798      	blx	r3
   814fa:	e7f4      	b.n	814e6 <Shellcom+0x126>
			if(pTxWrite==pTxRead) Error(ERR_SHELCOM_TXBUF_FULL,SHELLCOM_PUTSTR);
   814fc:	4b15      	ldr	r3, [pc, #84]	; (81554 <Shellcom+0x194>)
   814fe:	681b      	ldr	r3, [r3, #0]
   81500:	2167      	movs	r1, #103	; 0x67
   81502:	2017      	movs	r0, #23
   81504:	4798      	blx	r3
   81506:	e7a0      	b.n	8144a <Shellcom+0x8a>
		if(pTxWrite==pTxRead) Error(ERR_SHELCOM_TXBUF_FULL,SHELLCOM_PUTSTR);
   81508:	4b12      	ldr	r3, [pc, #72]	; (81554 <Shellcom+0x194>)
   8150a:	681b      	ldr	r3, [r3, #0]
   8150c:	2167      	movs	r1, #103	; 0x67
   8150e:	2017      	movs	r0, #23
   81510:	4798      	blx	r3
   81512:	e77b      	b.n	8140c <Shellcom+0x4c>
		Error(ERR_SHELLCOM_SWITCH_BAD_SC,sc);
   81514:	4b0f      	ldr	r3, [pc, #60]	; (81554 <Shellcom+0x194>)
   81516:	681b      	ldr	r3, [r3, #0]
   81518:	200d      	movs	r0, #13
   8151a:	4798      	blx	r3
   8151c:	e7cb      	b.n	814b6 <Shellcom+0xf6>
   8151e:	bf00      	nop
   81520:	20071320 	.word	0x20071320
   81524:	20071428 	.word	0x20071428
   81528:	40098000 	.word	0x40098000
   8152c:	00080b05 	.word	0x00080b05
   81530:	20071328 	.word	0x20071328
   81534:	00081ee5 	.word	0x00081ee5
   81538:	0501bd00 	.word	0x0501bd00
   8153c:	00086dd8 	.word	0x00086dd8
   81540:	00080aa5 	.word	0x00080aa5
   81544:	00081b81 	.word	0x00081b81
   81548:	e000e100 	.word	0xe000e100
   8154c:	00080af9 	.word	0x00080af9
   81550:	00080aff 	.word	0x00080aff
   81554:	200705d0 	.word	0x200705d0

00081558 <USART0_Handler>:
	 _SHELL_KBHIT = 1,
 };

 
 void USART0_Handler()
 {
   81558:	b530      	push	{r4, r5, lr}
   8155a:	b083      	sub	sp, #12
	uint32_t dw_status = usart_get_status(USART_SERIAL);
   8155c:	4817      	ldr	r0, [pc, #92]	; (815bc <USART0_Handler+0x64>)
   8155e:	4b18      	ldr	r3, [pc, #96]	; (815c0 <USART0_Handler+0x68>)
   81560:	4798      	blx	r3
   81562:	4604      	mov	r4, r0

	if(dw_status & US_CSR_RXRDY)
   81564:	f010 0f01 	tst.w	r0, #1
   81568:	d116      	bne.n	81598 <USART0_Handler+0x40>
	{
		PushTask(Shell, _SHELL_KBHIT, USART_SERIAL->US_RHR & US_RHR_RXCHR_Msk, 0);
	}

	if(dw_status & US_CSR_TXRDY)
   8156a:	f014 0f02 	tst.w	r4, #2
   8156e:	d011      	beq.n	81594 <USART0_Handler+0x3c>
	{
				
		if(pTxRead!=pTxWrite)
   81570:	4a14      	ldr	r2, [pc, #80]	; (815c4 <USART0_Handler+0x6c>)
   81572:	6853      	ldr	r3, [r2, #4]
   81574:	6812      	ldr	r2, [r2, #0]
   81576:	4293      	cmp	r3, r2
   81578:	d01a      	beq.n	815b0 <USART0_Handler+0x58>
		{
			USART_SERIAL->US_THR = US_THR_TXCHR(*pTxRead++);
   8157a:	1c5a      	adds	r2, r3, #1
   8157c:	4911      	ldr	r1, [pc, #68]	; (815c4 <USART0_Handler+0x6c>)
   8157e:	604a      	str	r2, [r1, #4]
   81580:	7819      	ldrb	r1, [r3, #0]
   81582:	4b0e      	ldr	r3, [pc, #56]	; (815bc <USART0_Handler+0x64>)
   81584:	61d9      	str	r1, [r3, #28]
			if(pTxRead>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) pTxRead = shellcomTxBuf;
   81586:	4b10      	ldr	r3, [pc, #64]	; (815c8 <USART0_Handler+0x70>)
   81588:	429a      	cmp	r2, r3
   8158a:	d303      	bcc.n	81594 <USART0_Handler+0x3c>
   8158c:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
   81590:	4b0c      	ldr	r3, [pc, #48]	; (815c4 <USART0_Handler+0x6c>)
   81592:	605a      	str	r2, [r3, #4]
		else
		{
			usart_disable_interrupt(USART_SERIAL, US_IER_TXRDY);
		}
	}
 }
   81594:	b003      	add	sp, #12
   81596:	bd30      	pop	{r4, r5, pc}
		PushTask(Shell, _SHELL_KBHIT, USART_SERIAL->US_RHR & US_RHR_RXCHR_Msk, 0);
   81598:	4b08      	ldr	r3, [pc, #32]	; (815bc <USART0_Handler+0x64>)
   8159a:	699b      	ldr	r3, [r3, #24]
   8159c:	2200      	movs	r2, #0
   8159e:	9200      	str	r2, [sp, #0]
   815a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   815a4:	2201      	movs	r2, #1
   815a6:	4909      	ldr	r1, [pc, #36]	; (815cc <USART0_Handler+0x74>)
   815a8:	2066      	movs	r0, #102	; 0x66
   815aa:	4d09      	ldr	r5, [pc, #36]	; (815d0 <USART0_Handler+0x78>)
   815ac:	47a8      	blx	r5
   815ae:	e7dc      	b.n	8156a <USART0_Handler+0x12>
			usart_disable_interrupt(USART_SERIAL, US_IER_TXRDY);
   815b0:	2102      	movs	r1, #2
   815b2:	4802      	ldr	r0, [pc, #8]	; (815bc <USART0_Handler+0x64>)
   815b4:	4b07      	ldr	r3, [pc, #28]	; (815d4 <USART0_Handler+0x7c>)
   815b6:	4798      	blx	r3
 }
   815b8:	e7ec      	b.n	81594 <USART0_Handler+0x3c>
   815ba:	bf00      	nop
   815bc:	40098000 	.word	0x40098000
   815c0:	00080b0d 	.word	0x00080b0d
   815c4:	20071320 	.word	0x20071320
   815c8:	20071428 	.word	0x20071428
   815cc:	00080cb9 	.word	0x00080cb9
   815d0:	000815d9 	.word	0x000815d9
   815d4:	00080b09 	.word	0x00080b09

000815d8 <Taskman>:
 };


 /////////////////////////////////////////////////////////////////////////////
 uint32_t Taskman(uint32_t sc, ...)
 {
   815d8:	b40f      	push	{r0, r1, r2, r3}
   815da:	b5f0      	push	{r4, r5, r6, r7, lr}
   815dc:	b083      	sub	sp, #12
//	uint8_t criticalStatus;
	
	switch(sc)
   815de:	9908      	ldr	r1, [sp, #32]
   815e0:	2964      	cmp	r1, #100	; 0x64
   815e2:	d024      	beq.n	8162e <Taskman+0x56>
   815e4:	d917      	bls.n	81616 <Taskman+0x3e>
   815e6:	2966      	cmp	r1, #102	; 0x66
   815e8:	d067      	beq.n	816ba <Taskman+0xe2>
   815ea:	2967      	cmp	r1, #103	; 0x67
   815ec:	f040 80c8 	bne.w	81780 <Taskman+0x1a8>
#undef _delay
#undef k
		break;

	case TASKMAN_POP_TASK:
		if(taskman.pPop!=taskman.pPush)
   815f0:	4a66      	ldr	r2, [pc, #408]	; (8178c <Taskman+0x1b4>)
   815f2:	6853      	ldr	r3, [r2, #4]
   815f4:	6812      	ldr	r2, [r2, #0]
   815f6:	4293      	cmp	r3, r2
   815f8:	d059      	beq.n	816ae <Taskman+0xd6>
		{
			t_ptf	 func;
			void*	 pa;
			func = taskman.pPop->pFunc;
   815fa:	681a      	ldr	r2, [r3, #0]
			sc = taskman.pPop->sc;
   815fc:	6858      	ldr	r0, [r3, #4]
   815fe:	9008      	str	r0, [sp, #32]
			pa = taskman.pPop->pParam;
   81600:	6899      	ldr	r1, [r3, #8]
			taskman.pPop++;
   81602:	3310      	adds	r3, #16
			if(taskman.pPop>=tasks+TASKMAN_TASKS_LIST_LEN) taskman.pPop=tasks;
   81604:	4c62      	ldr	r4, [pc, #392]	; (81790 <Taskman+0x1b8>)
   81606:	42a3      	cmp	r3, r4
   81608:	f0c0 80a3 	bcc.w	81752 <Taskman+0x17a>
   8160c:	4c61      	ldr	r4, [pc, #388]	; (81794 <Taskman+0x1bc>)
   8160e:	4b5f      	ldr	r3, [pc, #380]	; (8178c <Taskman+0x1b4>)
   81610:	605c      	str	r4, [r3, #4]
			//Function call
			func(sc,pa);
   81612:	4790      	blx	r2
   81614:	e04b      	b.n	816ae <Taskman+0xd6>
	switch(sc)
   81616:	2901      	cmp	r1, #1
   81618:	f040 80b2 	bne.w	81780 <Taskman+0x1a8>
		}
		break;

	//Private services implementation section /////////////////////////////////
	case _TASKMAN_DELAYED_TASK_PROC:
		gpio_toggle_pin(PIO_PA2_IDX);
   8161c:	2002      	movs	r0, #2
   8161e:	4b5e      	ldr	r3, [pc, #376]	; (81798 <Taskman+0x1c0>)
   81620:	4798      	blx	r3
#define k sc
		for(k=0;k<TASKMAN_DELAYED_TASKS_LIST_LEN;k++)
   81622:	2500      	movs	r5, #0
   81624:	9508      	str	r5, [sp, #32]
   81626:	4c5d      	ldr	r4, [pc, #372]	; (8179c <Taskman+0x1c4>)
		{
			if(dTasks[k].delay)
			{
				if(--dTasks[k].delay==0)
				{
					PushTask(
   81628:	462f      	mov	r7, r5
   8162a:	2666      	movs	r6, #102	; 0x66
   8162c:	e099      	b.n	81762 <Taskman+0x18a>
		taskman.pPop=taskman.pPush=tasks;
   8162e:	4b57      	ldr	r3, [pc, #348]	; (8178c <Taskman+0x1b4>)
   81630:	4a58      	ldr	r2, [pc, #352]	; (81794 <Taskman+0x1bc>)
   81632:	601a      	str	r2, [r3, #0]
   81634:	605a      	str	r2, [r3, #4]
   81636:	4b59      	ldr	r3, [pc, #356]	; (8179c <Taskman+0x1c4>)
   81638:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
			dTasks[k].delay=0;
   8163c:	2200      	movs	r2, #0
   8163e:	60da      	str	r2, [r3, #12]
   81640:	3310      	adds	r3, #16
		for(k=0;k<TASKMAN_DELAYED_TASKS_LIST_LEN;k++)
   81642:	428b      	cmp	r3, r1
   81644:	d1fb      	bne.n	8163e <Taskman+0x66>
		base->PIO_PUDR = mask;
   81646:	4b56      	ldr	r3, [pc, #344]	; (817a0 <Taskman+0x1c8>)
   81648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8164c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_MDDR = mask;
   8164e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
   81650:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_SCIFSR = mask;
   81652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
   81656:	6f19      	ldr	r1, [r3, #112]	; 0x70
   81658:	4311      	orrs	r1, r2
   8165a:	6719      	str	r1, [r3, #112]	; 0x70
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   8165c:	605a      	str	r2, [r3, #4]
   8165e:	201b      	movs	r0, #27
   81660:	4b50      	ldr	r3, [pc, #320]	; (817a4 <Taskman+0x1cc>)
   81662:	4798      	blx	r3

	 //Configure the PMC to enable the TC module.
	 sysclk_enable_peripheral_clock(ID_TC_WAVEFORM);

	 //Init TC to waveform mode.
	 tc_init(
   81664:	4c50      	ldr	r4, [pc, #320]	; (817a8 <Taskman+0x1d0>)
   81666:	4a51      	ldr	r2, [pc, #324]	; (817ac <Taskman+0x1d4>)
   81668:	2100      	movs	r1, #0
   8166a:	4620      	mov	r0, r4
   8166c:	4b50      	ldr	r3, [pc, #320]	; (817b0 <Taskman+0x1d8>)
   8166e:	4798      	blx	r3

	 //Configure waveform frequency and duty cycle.
	 rc =	(sysclk_get_peripheral_bus_hz(TC) /
	 TC_WAVEFORM_DIVISOR) /
	 TC_WAVEFORM_FREQUENCY;
	 tc_write_rc(TC, TC_CHANNEL_WAVEFORM, rc);
   81670:	f44f 7224 	mov.w	r2, #656	; 0x290
   81674:	2100      	movs	r1, #0
   81676:	4620      	mov	r0, r4
   81678:	4b4e      	ldr	r3, [pc, #312]	; (817b4 <Taskman+0x1dc>)
   8167a:	4798      	blx	r3

	 ra = (100 - TC_WAVEFORM_DUTY_CYCLE) * rc / 100;
	 tc_write_ra(TC, TC_CHANNEL_WAVEFORM, ra);
   8167c:	f240 12cb 	movw	r2, #459	; 0x1cb
   81680:	2100      	movs	r1, #0
   81682:	4620      	mov	r0, r4
   81684:	4b4c      	ldr	r3, [pc, #304]	; (817b8 <Taskman+0x1e0>)
   81686:	4798      	blx	r3

	 //Enable TC TC_CHANNEL_WAVEFORM
	 tc_start(TC, TC_CHANNEL_WAVEFORM);
   81688:	2100      	movs	r1, #0
   8168a:	4620      	mov	r0, r4
   8168c:	4b4b      	ldr	r3, [pc, #300]	; (817bc <Taskman+0x1e4>)
   8168e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   81690:	4b4b      	ldr	r3, [pc, #300]	; (817c0 <Taskman+0x1e8>)
   81692:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8169a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8169e:	2100      	movs	r1, #0
   816a0:	f883 131b 	strb.w	r1, [r3, #795]	; 0x31b
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   816a4:	601a      	str	r2, [r3, #0]
		tc_enable_interrupt(TC, TC_CHANNEL_WAVEFORM, TC_IER_CPAS);
   816a6:	2204      	movs	r2, #4
   816a8:	4620      	mov	r0, r4
   816aa:	4b46      	ldr	r3, [pc, #280]	; (817c4 <Taskman+0x1ec>)
   816ac:	4798      	blx	r3
 }
   816ae:	2000      	movs	r0, #0
   816b0:	b003      	add	sp, #12
   816b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   816b6:	b004      	add	sp, #16
   816b8:	4770      	bx	lr
		cpu_irq_enter_critical();
   816ba:	4b43      	ldr	r3, [pc, #268]	; (817c8 <Taskman+0x1f0>)
   816bc:	4798      	blx	r3
		if(_delay)
   816be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   816c0:	b34d      	cbz	r5, 81716 <Taskman+0x13e>
			for(k=0;(k<TASKMAN_DELAYED_TASKS_LIST_LEN)&&(dTasks[k].delay);k++);
   816c2:	2300      	movs	r3, #0
   816c4:	9308      	str	r3, [sp, #32]
   816c6:	4b35      	ldr	r3, [pc, #212]	; (8179c <Taskman+0x1c4>)
   816c8:	68db      	ldr	r3, [r3, #12]
   816ca:	b1ab      	cbz	r3, 816f8 <Taskman+0x120>
   816cc:	2301      	movs	r3, #1
   816ce:	9308      	str	r3, [sp, #32]
   816d0:	4a32      	ldr	r2, [pc, #200]	; (8179c <Taskman+0x1c4>)
   816d2:	2000      	movs	r0, #0
   816d4:	461c      	mov	r4, r3
   816d6:	69d1      	ldr	r1, [r2, #28]
   816d8:	b159      	cbz	r1, 816f2 <Taskman+0x11a>
   816da:	3301      	adds	r3, #1
   816dc:	3210      	adds	r2, #16
   816de:	4620      	mov	r0, r4
   816e0:	2b0a      	cmp	r3, #10
   816e2:	d1f8      	bne.n	816d6 <Taskman+0xfe>
			if(k==TASKMAN_DELAYED_TASKS_LIST_LEN) Error(ERR_TASKMAN_DELAYED_TASKLIST_FULL, (uint32_t)0);
   816e4:	4b39      	ldr	r3, [pc, #228]	; (817cc <Taskman+0x1f4>)
   816e6:	681b      	ldr	r3, [r3, #0]
   816e8:	2100      	movs	r1, #0
   816ea:	2016      	movs	r0, #22
   816ec:	4798      	blx	r3
   816ee:	230a      	movs	r3, #10
   816f0:	e002      	b.n	816f8 <Taskman+0x120>
   816f2:	b970      	cbnz	r0, 81712 <Taskman+0x13a>
   816f4:	2b0a      	cmp	r3, #10
   816f6:	d0f5      	beq.n	816e4 <Taskman+0x10c>
			dTasks[k].pFunc=_func;
   816f8:	4928      	ldr	r1, [pc, #160]	; (8179c <Taskman+0x1c4>)
   816fa:	011b      	lsls	r3, r3, #4
   816fc:	18ca      	adds	r2, r1, r3
   816fe:	9809      	ldr	r0, [sp, #36]	; 0x24
   81700:	50c8      	str	r0, [r1, r3]
			dTasks[k].sc=_sc;
   81702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81704:	6053      	str	r3, [r2, #4]
			dTasks[k].pParam=_pParam;
   81706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   81708:	6093      	str	r3, [r2, #8]
			dTasks[k].delay=_delay;
   8170a:	60d5      	str	r5, [r2, #12]
		cpu_irq_leave_critical();
   8170c:	4b30      	ldr	r3, [pc, #192]	; (817d0 <Taskman+0x1f8>)
   8170e:	4798      	blx	r3
		break;
   81710:	e7cd      	b.n	816ae <Taskman+0xd6>
   81712:	9308      	str	r3, [sp, #32]
   81714:	e7ee      	b.n	816f4 <Taskman+0x11c>
			taskman.pPush->pFunc=_func;
   81716:	4b1d      	ldr	r3, [pc, #116]	; (8178c <Taskman+0x1b4>)
   81718:	681a      	ldr	r2, [r3, #0]
   8171a:	9909      	ldr	r1, [sp, #36]	; 0x24
   8171c:	6011      	str	r1, [r2, #0]
			taskman.pPush->sc=_sc;
   8171e:	681b      	ldr	r3, [r3, #0]
   81720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   81722:	605a      	str	r2, [r3, #4]
			taskman.pPush->pParam=_pParam;
   81724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   81726:	609a      	str	r2, [r3, #8]
			taskman.pPush++;
   81728:	3310      	adds	r3, #16
			if(taskman.pPush>=tasks+TASKMAN_TASKS_LIST_LEN) taskman.pPush=tasks;
   8172a:	4a19      	ldr	r2, [pc, #100]	; (81790 <Taskman+0x1b8>)
   8172c:	4293      	cmp	r3, r2
   8172e:	d20c      	bcs.n	8174a <Taskman+0x172>
			taskman.pPush++;
   81730:	4a16      	ldr	r2, [pc, #88]	; (8178c <Taskman+0x1b4>)
   81732:	6013      	str	r3, [r2, #0]
			if(taskman.pPush==taskman.pPop) Error(ERR_TASKMAN_TASKLIST_FULL, (uint32_t)0);
   81734:	4b15      	ldr	r3, [pc, #84]	; (8178c <Taskman+0x1b4>)
   81736:	681a      	ldr	r2, [r3, #0]
   81738:	685b      	ldr	r3, [r3, #4]
   8173a:	429a      	cmp	r2, r3
   8173c:	d1e6      	bne.n	8170c <Taskman+0x134>
   8173e:	4b23      	ldr	r3, [pc, #140]	; (817cc <Taskman+0x1f4>)
   81740:	681b      	ldr	r3, [r3, #0]
   81742:	2100      	movs	r1, #0
   81744:	2015      	movs	r0, #21
   81746:	4798      	blx	r3
   81748:	e7e0      	b.n	8170c <Taskman+0x134>
			if(taskman.pPush>=tasks+TASKMAN_TASKS_LIST_LEN) taskman.pPush=tasks;
   8174a:	4a12      	ldr	r2, [pc, #72]	; (81794 <Taskman+0x1bc>)
   8174c:	4b0f      	ldr	r3, [pc, #60]	; (8178c <Taskman+0x1b4>)
   8174e:	601a      	str	r2, [r3, #0]
   81750:	e7f0      	b.n	81734 <Taskman+0x15c>
			taskman.pPop++;
   81752:	4c0e      	ldr	r4, [pc, #56]	; (8178c <Taskman+0x1b4>)
   81754:	6063      	str	r3, [r4, #4]
   81756:	e75c      	b.n	81612 <Taskman+0x3a>
		for(k=0;k<TASKMAN_DELAYED_TASKS_LIST_LEN;k++)
   81758:	3501      	adds	r5, #1
   8175a:	9508      	str	r5, [sp, #32]
   8175c:	3410      	adds	r4, #16
   8175e:	2d0a      	cmp	r5, #10
   81760:	d0a5      	beq.n	816ae <Taskman+0xd6>
			if(dTasks[k].delay)
   81762:	68e3      	ldr	r3, [r4, #12]
   81764:	2b00      	cmp	r3, #0
   81766:	d0f7      	beq.n	81758 <Taskman+0x180>
				if(--dTasks[k].delay==0)
   81768:	3b01      	subs	r3, #1
   8176a:	60e3      	str	r3, [r4, #12]
   8176c:	2b00      	cmp	r3, #0
   8176e:	d1f3      	bne.n	81758 <Taskman+0x180>
					PushTask(
   81770:	68a3      	ldr	r3, [r4, #8]
   81772:	6862      	ldr	r2, [r4, #4]
   81774:	6821      	ldr	r1, [r4, #0]
   81776:	9700      	str	r7, [sp, #0]
   81778:	4630      	mov	r0, r6
   8177a:	f7ff ff2d 	bl	815d8 <Taskman>
   8177e:	e7eb      	b.n	81758 <Taskman+0x180>
		Error(ERR_TASKMAN_SWITCH_BAD_SC, sc);
   81780:	4b12      	ldr	r3, [pc, #72]	; (817cc <Taskman+0x1f4>)
   81782:	681b      	ldr	r3, [r3, #0]
   81784:	200b      	movs	r0, #11
   81786:	4798      	blx	r3
	return 0;
   81788:	e791      	b.n	816ae <Taskman+0xd6>
   8178a:	bf00      	nop
   8178c:	200714c8 	.word	0x200714c8
   81790:	200714c8 	.word	0x200714c8
   81794:	20071428 	.word	0x20071428
   81798:	00081b61 	.word	0x00081b61
   8179c:	200714d0 	.word	0x200714d0
   817a0:	400e1000 	.word	0x400e1000
   817a4:	00081ee5 	.word	0x00081ee5
   817a8:	40080000 	.word	0x40080000
   817ac:	0009c003 	.word	0x0009c003
   817b0:	000809e5 	.word	0x000809e5
   817b4:	00080a0d 	.word	0x00080a0d
   817b8:	00080a05 	.word	0x00080a05
   817bc:	000809fd 	.word	0x000809fd
   817c0:	e000e100 	.word	0xe000e100
   817c4:	00080a15 	.word	0x00080a15
   817c8:	00081975 	.word	0x00081975
   817cc:	200705d0 	.word	0x200705d0
   817d0:	000819b1 	.word	0x000819b1

000817d4 <TC0_Handler>:
 {
   817d4:	b508      	push	{r3, lr}
	 tc_get_status(TC, TC_CHANNEL_WAVEFORM);
   817d6:	2100      	movs	r1, #0
   817d8:	4803      	ldr	r0, [pc, #12]	; (817e8 <TC0_Handler+0x14>)
   817da:	4b04      	ldr	r3, [pc, #16]	; (817ec <TC0_Handler+0x18>)
   817dc:	4798      	blx	r3
	 Taskman(_TASKMAN_DELAYED_TASK_PROC);
   817de:	2001      	movs	r0, #1
   817e0:	4b03      	ldr	r3, [pc, #12]	; (817f0 <TC0_Handler+0x1c>)
   817e2:	4798      	blx	r3
   817e4:	bd08      	pop	{r3, pc}
   817e6:	bf00      	nop
   817e8:	40080000 	.word	0x40080000
   817ec:	00080a1d 	.word	0x00080a1d
   817f0:	000815d9 	.word	0x000815d9

000817f4 <Appli>:
	 100,500,100,500,100,2200,0
 };


uint32_t Appli(uint32_t sc,...)
{
   817f4:	b40f      	push	{r0, r1, r2, r3}
   817f6:	b510      	push	{r4, lr}
   817f8:	b082      	sub	sp, #8
	switch(sc)
   817fa:	9904      	ldr	r1, [sp, #16]
   817fc:	2964      	cmp	r1, #100	; 0x64
   817fe:	d006      	beq.n	8180e <Appli+0x1a>
   81800:	2966      	cmp	r1, #102	; 0x66
   81802:	d01a      	beq.n	8183a <Appli+0x46>

#undef k
		break;

	default:
		Error(ERR_APPLI_SWITHC_BAD_SC, sc);
   81804:	4b1b      	ldr	r3, [pc, #108]	; (81874 <Appli+0x80>)
   81806:	681b      	ldr	r3, [r3, #0]
   81808:	200f      	movs	r0, #15
   8180a:	4798      	blx	r3
		break;
   8180c:	e010      	b.n	81830 <Appli+0x3c>
		gpio_configure_pin(PIO_PC1_IDX, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   8180e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81812:	2041      	movs	r0, #65	; 0x41
   81814:	4b18      	ldr	r3, [pc, #96]	; (81878 <Appli+0x84>)
   81816:	4798      	blx	r3
		Lcd(LCD_NEW);
   81818:	2064      	movs	r0, #100	; 0x64
   8181a:	4b18      	ldr	r3, [pc, #96]	; (8187c <Appli+0x88>)
   8181c:	4798      	blx	r3
		PushTask(Appli, APPLI_RUN, 0, 800);
   8181e:	f44f 7348 	mov.w	r3, #800	; 0x320
   81822:	9300      	str	r3, [sp, #0]
   81824:	2300      	movs	r3, #0
   81826:	2266      	movs	r2, #102	; 0x66
   81828:	4915      	ldr	r1, [pc, #84]	; (81880 <Appli+0x8c>)
   8182a:	4610      	mov	r0, r2
   8182c:	4c15      	ldr	r4, [pc, #84]	; (81884 <Appli+0x90>)
   8182e:	47a0      	blx	r4
	}
   81830:	b002      	add	sp, #8
   81832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81836:	b004      	add	sp, #16
   81838:	4770      	bx	lr
		k++; if(flashSequApp[k]==0) k=0;
   8183a:	9c05      	ldr	r4, [sp, #20]
   8183c:	3401      	adds	r4, #1
   8183e:	9405      	str	r4, [sp, #20]
   81840:	4b11      	ldr	r3, [pc, #68]	; (81888 <Appli+0x94>)
   81842:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   81846:	b133      	cbz	r3, 81856 <Appli+0x62>
		if(k%2==0) gpio_set_pin_high(PIO_PC1_IDX);
   81848:	f014 0f01 	tst.w	r4, #1
   8184c:	d004      	beq.n	81858 <Appli+0x64>
		else gpio_set_pin_low(PIO_PC1_IDX);
   8184e:	2041      	movs	r0, #65	; 0x41
   81850:	4b0e      	ldr	r3, [pc, #56]	; (8188c <Appli+0x98>)
   81852:	4798      	blx	r3
   81854:	e003      	b.n	8185e <Appli+0x6a>
		if(k%2==0) gpio_set_pin_high(PIO_PC1_IDX);
   81856:	2400      	movs	r4, #0
   81858:	2041      	movs	r0, #65	; 0x41
   8185a:	4b0d      	ldr	r3, [pc, #52]	; (81890 <Appli+0x9c>)
   8185c:	4798      	blx	r3
		PushTask(Appli,APPLI_RUN,k,flashSequApp[k]);
   8185e:	4b0a      	ldr	r3, [pc, #40]	; (81888 <Appli+0x94>)
   81860:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   81864:	9300      	str	r3, [sp, #0]
   81866:	4623      	mov	r3, r4
   81868:	2266      	movs	r2, #102	; 0x66
   8186a:	4905      	ldr	r1, [pc, #20]	; (81880 <Appli+0x8c>)
   8186c:	4610      	mov	r0, r2
   8186e:	4c05      	ldr	r4, [pc, #20]	; (81884 <Appli+0x90>)
   81870:	47a0      	blx	r4
		break;
   81872:	e7dd      	b.n	81830 <Appli+0x3c>
   81874:	200705d0 	.word	0x200705d0
   81878:	00081b81 	.word	0x00081b81
   8187c:	000805a1 	.word	0x000805a1
   81880:	000817f5 	.word	0x000817f5
   81884:	000815d9 	.word	0x000815d9
   81888:	00086df0 	.word	0x00086df0
   8188c:	00081b47 	.word	0x00081b47
   81890:	00081b2d 	.word	0x00081b2d

00081894 <main>:
void Prompt(uint32_t sc, uint32_t i);

char buf[256];

int main (void)
{
   81894:	b500      	push	{lr}
   81896:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
   81898:	b672      	cpsid	i
   8189a:	f3bf 8f5f 	dmb	sy
	/* Insert system clock initialization code here (sysclk_init()). */
	cpu_irq_disable();
   8189e:	4e13      	ldr	r6, [pc, #76]	; (818ec <main+0x58>)
   818a0:	2400      	movs	r4, #0
   818a2:	7034      	strb	r4, [r6, #0]
	sysclk_init();
   818a4:	4b12      	ldr	r3, [pc, #72]	; (818f0 <main+0x5c>)
   818a6:	4798      	blx	r3
	board_init();
   818a8:	4b12      	ldr	r3, [pc, #72]	; (818f4 <main+0x60>)
   818aa:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());
	if(nvm_init(INT_FLASH) == STATUS_OK);
   818ac:	4620      	mov	r0, r4
   818ae:	4b12      	ldr	r3, [pc, #72]	; (818f8 <main+0x64>)
   818b0:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////
	Taskman(TASKMAN_NEW);	
   818b2:	2064      	movs	r0, #100	; 0x64
   818b4:	4d11      	ldr	r5, [pc, #68]	; (818fc <main+0x68>)
   818b6:	47a8      	blx	r5
	PushTask(Shell,SHELL_NEW, 0, 0);
   818b8:	9400      	str	r4, [sp, #0]
   818ba:	4623      	mov	r3, r4
   818bc:	2264      	movs	r2, #100	; 0x64
   818be:	4910      	ldr	r1, [pc, #64]	; (81900 <main+0x6c>)
   818c0:	2066      	movs	r0, #102	; 0x66
   818c2:	47a8      	blx	r5
	PushTask(Menu, MENU_NEW,0 , 0);
   818c4:	9400      	str	r4, [sp, #0]
   818c6:	4623      	mov	r3, r4
   818c8:	2264      	movs	r2, #100	; 0x64
   818ca:	490e      	ldr	r1, [pc, #56]	; (81904 <main+0x70>)
   818cc:	2066      	movs	r0, #102	; 0x66
   818ce:	47a8      	blx	r5
	Putstr("\r\n\n\tATMEL ATSAM3U STARTED\r\n\n");
   818d0:	490d      	ldr	r1, [pc, #52]	; (81908 <main+0x74>)
   818d2:	2067      	movs	r0, #103	; 0x67
   818d4:	4b0d      	ldr	r3, [pc, #52]	; (8190c <main+0x78>)
   818d6:	4798      	blx	r3
	cpu_irq_enable();
   818d8:	2301      	movs	r3, #1
   818da:	7033      	strb	r3, [r6, #0]
   818dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   818e0:	b662      	cpsie	i
	
	for(;;)
	{
		PopTask();
   818e2:	2567      	movs	r5, #103	; 0x67
   818e4:	4c05      	ldr	r4, [pc, #20]	; (818fc <main+0x68>)
   818e6:	4628      	mov	r0, r5
   818e8:	47a0      	blx	r4
   818ea:	e7fc      	b.n	818e6 <main+0x52>
   818ec:	20070620 	.word	0x20070620
   818f0:	00081911 	.word	0x00081911
   818f4:	000819dd 	.word	0x000819dd
   818f8:	00080161 	.word	0x00080161
   818fc:	000815d9 	.word	0x000815d9
   81900:	00080cb9 	.word	0x00080cb9
   81904:	000807e1 	.word	0x000807e1
   81908:	00086e0c 	.word	0x00086e0c
   8190c:	000813c1 	.word	0x000813c1

00081910 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81910:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81912:	480e      	ldr	r0, [pc, #56]	; (8194c <sysclk_init+0x3c>)
   81914:	4b0e      	ldr	r3, [pc, #56]	; (81950 <sysclk_init+0x40>)
   81916:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81918:	213e      	movs	r1, #62	; 0x3e
   8191a:	2000      	movs	r0, #0
   8191c:	4b0d      	ldr	r3, [pc, #52]	; (81954 <sysclk_init+0x44>)
   8191e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81920:	4c0d      	ldr	r4, [pc, #52]	; (81958 <sysclk_init+0x48>)
   81922:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81924:	2800      	cmp	r0, #0
   81926:	d0fc      	beq.n	81922 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81928:	4b0c      	ldr	r3, [pc, #48]	; (8195c <sysclk_init+0x4c>)
   8192a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8192c:	4a0c      	ldr	r2, [pc, #48]	; (81960 <sysclk_init+0x50>)
   8192e:	4b0d      	ldr	r3, [pc, #52]	; (81964 <sysclk_init+0x54>)
   81930:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81932:	4c0d      	ldr	r4, [pc, #52]	; (81968 <sysclk_init+0x58>)
   81934:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81936:	2800      	cmp	r0, #0
   81938:	d0fc      	beq.n	81934 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8193a:	2010      	movs	r0, #16
   8193c:	4b0b      	ldr	r3, [pc, #44]	; (8196c <sysclk_init+0x5c>)
   8193e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81940:	4b0b      	ldr	r3, [pc, #44]	; (81970 <sysclk_init+0x60>)
   81942:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81944:	4801      	ldr	r0, [pc, #4]	; (8194c <sysclk_init+0x3c>)
   81946:	4b02      	ldr	r3, [pc, #8]	; (81950 <sysclk_init+0x40>)
   81948:	4798      	blx	r3
   8194a:	bd10      	pop	{r4, pc}
   8194c:	0501bd00 	.word	0x0501bd00
   81950:	20070149 	.word	0x20070149
   81954:	00081e61 	.word	0x00081e61
   81958:	00081eb5 	.word	0x00081eb5
   8195c:	00081ec5 	.word	0x00081ec5
   81960:	200d3f01 	.word	0x200d3f01
   81964:	400e0600 	.word	0x400e0600
   81968:	00081ed5 	.word	0x00081ed5
   8196c:	00081dfd 	.word	0x00081dfd
   81970:	00081fd5 	.word	0x00081fd5

00081974 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   81974:	4b0b      	ldr	r3, [pc, #44]	; (819a4 <cpu_irq_enter_critical+0x30>)
   81976:	681b      	ldr	r3, [r3, #0]
   81978:	b92b      	cbnz	r3, 81986 <cpu_irq_enter_critical+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8197a:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   8197e:	b13b      	cbz	r3, 81990 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   81980:	2200      	movs	r2, #0
   81982:	4b09      	ldr	r3, [pc, #36]	; (819a8 <cpu_irq_enter_critical+0x34>)
   81984:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   81986:	4a07      	ldr	r2, [pc, #28]	; (819a4 <cpu_irq_enter_critical+0x30>)
   81988:	6813      	ldr	r3, [r2, #0]
   8198a:	3301      	adds	r3, #1
   8198c:	6013      	str	r3, [r2, #0]
   8198e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
   81990:	b672      	cpsid	i
   81992:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   81996:	2200      	movs	r2, #0
   81998:	4b04      	ldr	r3, [pc, #16]	; (819ac <cpu_irq_enter_critical+0x38>)
   8199a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   8199c:	2201      	movs	r2, #1
   8199e:	4b02      	ldr	r3, [pc, #8]	; (819a8 <cpu_irq_enter_critical+0x34>)
   819a0:	701a      	strb	r2, [r3, #0]
   819a2:	e7f0      	b.n	81986 <cpu_irq_enter_critical+0x12>
   819a4:	200710f8 	.word	0x200710f8
   819a8:	200710fc 	.word	0x200710fc
   819ac:	20070620 	.word	0x20070620

000819b0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   819b0:	4b07      	ldr	r3, [pc, #28]	; (819d0 <cpu_irq_leave_critical+0x20>)
   819b2:	681a      	ldr	r2, [r3, #0]
   819b4:	3a01      	subs	r2, #1
   819b6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   819b8:	681b      	ldr	r3, [r3, #0]
   819ba:	b943      	cbnz	r3, 819ce <cpu_irq_leave_critical+0x1e>
   819bc:	4b05      	ldr	r3, [pc, #20]	; (819d4 <cpu_irq_leave_critical+0x24>)
   819be:	781b      	ldrb	r3, [r3, #0]
   819c0:	b12b      	cbz	r3, 819ce <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   819c2:	2201      	movs	r2, #1
   819c4:	4b04      	ldr	r3, [pc, #16]	; (819d8 <cpu_irq_leave_critical+0x28>)
   819c6:	701a      	strb	r2, [r3, #0]
   819c8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   819cc:	b662      	cpsie	i
   819ce:	4770      	bx	lr
   819d0:	200710f8 	.word	0x200710f8
   819d4:	200710fc 	.word	0x200710fc
   819d8:	20070620 	.word	0x20070620

000819dc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   819dc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   819de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   819e2:	4b16      	ldr	r3, [pc, #88]	; (81a3c <board_init+0x60>)
   819e4:	605a      	str	r2, [r3, #4]
   819e6:	200b      	movs	r0, #11
   819e8:	4c15      	ldr	r4, [pc, #84]	; (81a40 <board_init+0x64>)
   819ea:	47a0      	blx	r4
   819ec:	200c      	movs	r0, #12
   819ee:	47a0      	blx	r4
   819f0:	200d      	movs	r0, #13
   819f2:	47a0      	blx	r4
   819f4:	200e      	movs	r0, #14
   819f6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   819f8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   819fc:	203b      	movs	r0, #59	; 0x3b
   819fe:	4c11      	ldr	r4, [pc, #68]	; (81a44 <board_init+0x68>)
   81a00:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81a02:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81a06:	2055      	movs	r0, #85	; 0x55
   81a08:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81a0a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81a0e:	2056      	movs	r0, #86	; 0x56
   81a10:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81a12:	490d      	ldr	r1, [pc, #52]	; (81a48 <board_init+0x6c>)
   81a14:	2068      	movs	r0, #104	; 0x68
   81a16:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81a18:	490c      	ldr	r1, [pc, #48]	; (81a4c <board_init+0x70>)
   81a1a:	205c      	movs	r0, #92	; 0x5c
   81a1c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81a1e:	4a0c      	ldr	r2, [pc, #48]	; (81a50 <board_init+0x74>)
   81a20:	f44f 7140 	mov.w	r1, #768	; 0x300
   81a24:	480b      	ldr	r0, [pc, #44]	; (81a54 <board_init+0x78>)
   81a26:	4b0c      	ldr	r3, [pc, #48]	; (81a58 <board_init+0x7c>)
   81a28:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81a2a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a2e:	202b      	movs	r0, #43	; 0x2b
   81a30:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81a32:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a36:	202a      	movs	r0, #42	; 0x2a
   81a38:	47a0      	blx	r4
   81a3a:	bd10      	pop	{r4, pc}
   81a3c:	400e1a50 	.word	0x400e1a50
   81a40:	00081ee5 	.word	0x00081ee5
   81a44:	00081b81 	.word	0x00081b81
   81a48:	28000079 	.word	0x28000079
   81a4c:	28000001 	.word	0x28000001
   81a50:	08000001 	.word	0x08000001
   81a54:	400e0e00 	.word	0x400e0e00
   81a58:	00081c51 	.word	0x00081c51

00081a5c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81a5c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81a5e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81a62:	d016      	beq.n	81a92 <pio_set_peripheral+0x36>
   81a64:	d80b      	bhi.n	81a7e <pio_set_peripheral+0x22>
   81a66:	b149      	cbz	r1, 81a7c <pio_set_peripheral+0x20>
   81a68:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81a6c:	d105      	bne.n	81a7a <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81a6e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81a70:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81a72:	400b      	ands	r3, r1
   81a74:	ea23 0302 	bic.w	r3, r3, r2
   81a78:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81a7a:	6042      	str	r2, [r0, #4]
   81a7c:	4770      	bx	lr
	switch (ul_type) {
   81a7e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81a82:	d0fb      	beq.n	81a7c <pio_set_peripheral+0x20>
   81a84:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81a88:	d0f8      	beq.n	81a7c <pio_set_peripheral+0x20>
   81a8a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81a8e:	d1f4      	bne.n	81a7a <pio_set_peripheral+0x1e>
   81a90:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81a92:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81a94:	4313      	orrs	r3, r2
   81a96:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81a98:	e7ef      	b.n	81a7a <pio_set_peripheral+0x1e>

00081a9a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81a9a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81a9c:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81aa0:	bf14      	ite	ne
   81aa2:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81aa4:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81aa6:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81aaa:	bf14      	ite	ne
   81aac:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   81aae:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81ab0:	f012 0f02 	tst.w	r2, #2
   81ab4:	d107      	bne.n	81ac6 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   81ab6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81aba:	bf18      	it	ne
   81abc:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81ac0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81ac2:	6001      	str	r1, [r0, #0]
   81ac4:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   81ac6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81aca:	e7f9      	b.n	81ac0 <pio_set_input+0x26>

00081acc <pio_set_output>:
{
   81acc:	b410      	push	{r4}
   81ace:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81ad0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81ad2:	b944      	cbnz	r4, 81ae6 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   81ad4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   81ad6:	b143      	cbz	r3, 81aea <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   81ad8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   81ada:	b942      	cbnz	r2, 81aee <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   81adc:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   81ade:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81ae0:	6001      	str	r1, [r0, #0]
}
   81ae2:	bc10      	pop	{r4}
   81ae4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   81ae6:	6641      	str	r1, [r0, #100]	; 0x64
   81ae8:	e7f5      	b.n	81ad6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   81aea:	6541      	str	r1, [r0, #84]	; 0x54
   81aec:	e7f5      	b.n	81ada <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   81aee:	6301      	str	r1, [r0, #48]	; 0x30
   81af0:	e7f5      	b.n	81ade <pio_set_output+0x12>

00081af2 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   81af2:	f012 0f10 	tst.w	r2, #16
   81af6:	d010      	beq.n	81b1a <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   81af8:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   81afc:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   81b00:	bf14      	ite	ne
   81b02:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   81b06:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   81b0a:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   81b0e:	bf14      	ite	ne
   81b10:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   81b14:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   81b18:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   81b1a:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   81b1e:	4770      	bx	lr

00081b20 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   81b20:	6401      	str	r1, [r0, #64]	; 0x40
   81b22:	4770      	bx	lr

00081b24 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81b24:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81b26:	4770      	bx	lr

00081b28 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81b28:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81b2a:	4770      	bx	lr

00081b2c <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81b2c:	0943      	lsrs	r3, r0, #5
   81b2e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81b32:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81b36:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81b38:	f000 001f 	and.w	r0, r0, #31
   81b3c:	2201      	movs	r2, #1
   81b3e:	fa02 f000 	lsl.w	r0, r2, r0
   81b42:	6318      	str	r0, [r3, #48]	; 0x30
   81b44:	4770      	bx	lr

00081b46 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81b46:	0943      	lsrs	r3, r0, #5
   81b48:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81b4c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81b50:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81b52:	f000 001f 	and.w	r0, r0, #31
   81b56:	2201      	movs	r2, #1
   81b58:	fa02 f000 	lsl.w	r0, r2, r0
   81b5c:	6358      	str	r0, [r3, #52]	; 0x34
   81b5e:	4770      	bx	lr

00081b60 <pio_toggle_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81b60:	0943      	lsrs	r3, r0, #5
   81b62:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81b66:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81b6a:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   81b6c:	6b99      	ldr	r1, [r3, #56]	; 0x38
   81b6e:	f000 021f 	and.w	r2, r0, #31
   81b72:	2001      	movs	r0, #1
   81b74:	4090      	lsls	r0, r2
   81b76:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81b78:	bf14      	ite	ne
   81b7a:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81b7c:	6318      	streq	r0, [r3, #48]	; 0x30
   81b7e:	4770      	bx	lr

00081b80 <pio_configure_pin>:
{
   81b80:	b570      	push	{r4, r5, r6, lr}
   81b82:	b082      	sub	sp, #8
   81b84:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81b86:	0943      	lsrs	r3, r0, #5
   81b88:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81b8c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81b90:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81b92:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81b96:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81b9a:	d031      	beq.n	81c00 <pio_configure_pin+0x80>
   81b9c:	d816      	bhi.n	81bcc <pio_configure_pin+0x4c>
   81b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81ba2:	d01b      	beq.n	81bdc <pio_configure_pin+0x5c>
   81ba4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81ba8:	d116      	bne.n	81bd8 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81baa:	f000 001f 	and.w	r0, r0, #31
   81bae:	2601      	movs	r6, #1
   81bb0:	4086      	lsls	r6, r0
   81bb2:	4632      	mov	r2, r6
   81bb4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81bb8:	4620      	mov	r0, r4
   81bba:	4b22      	ldr	r3, [pc, #136]	; (81c44 <pio_configure_pin+0xc4>)
   81bbc:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81bbe:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81bc2:	bf14      	ite	ne
   81bc4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81bc6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81bc8:	2001      	movs	r0, #1
   81bca:	e017      	b.n	81bfc <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   81bcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81bd0:	d021      	beq.n	81c16 <pio_configure_pin+0x96>
   81bd2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81bd6:	d01e      	beq.n	81c16 <pio_configure_pin+0x96>
		return 0;
   81bd8:	2000      	movs	r0, #0
   81bda:	e00f      	b.n	81bfc <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81bdc:	f000 001f 	and.w	r0, r0, #31
   81be0:	2601      	movs	r6, #1
   81be2:	4086      	lsls	r6, r0
   81be4:	4632      	mov	r2, r6
   81be6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bea:	4620      	mov	r0, r4
   81bec:	4b15      	ldr	r3, [pc, #84]	; (81c44 <pio_configure_pin+0xc4>)
   81bee:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81bf0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81bf4:	bf14      	ite	ne
   81bf6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81bf8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81bfa:	2001      	movs	r0, #1
}
   81bfc:	b002      	add	sp, #8
   81bfe:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81c00:	f000 011f 	and.w	r1, r0, #31
   81c04:	2601      	movs	r6, #1
   81c06:	462a      	mov	r2, r5
   81c08:	fa06 f101 	lsl.w	r1, r6, r1
   81c0c:	4620      	mov	r0, r4
   81c0e:	4b0e      	ldr	r3, [pc, #56]	; (81c48 <pio_configure_pin+0xc8>)
   81c10:	4798      	blx	r3
	return 1;
   81c12:	4630      	mov	r0, r6
		break;
   81c14:	e7f2      	b.n	81bfc <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81c16:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81c1a:	f000 011f 	and.w	r1, r0, #31
   81c1e:	2601      	movs	r6, #1
   81c20:	ea05 0306 	and.w	r3, r5, r6
   81c24:	9300      	str	r3, [sp, #0]
   81c26:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81c2a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81c2e:	bf14      	ite	ne
   81c30:	2200      	movne	r2, #0
   81c32:	2201      	moveq	r2, #1
   81c34:	fa06 f101 	lsl.w	r1, r6, r1
   81c38:	4620      	mov	r0, r4
   81c3a:	4c04      	ldr	r4, [pc, #16]	; (81c4c <pio_configure_pin+0xcc>)
   81c3c:	47a0      	blx	r4
	return 1;
   81c3e:	4630      	mov	r0, r6
		break;
   81c40:	e7dc      	b.n	81bfc <pio_configure_pin+0x7c>
   81c42:	bf00      	nop
   81c44:	00081a5d 	.word	0x00081a5d
   81c48:	00081a9b 	.word	0x00081a9b
   81c4c:	00081acd 	.word	0x00081acd

00081c50 <pio_configure_pin_group>:
{
   81c50:	b570      	push	{r4, r5, r6, lr}
   81c52:	b082      	sub	sp, #8
   81c54:	4605      	mov	r5, r0
   81c56:	460e      	mov	r6, r1
   81c58:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   81c5a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81c5e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81c62:	d027      	beq.n	81cb4 <pio_configure_pin_group+0x64>
   81c64:	d811      	bhi.n	81c8a <pio_configure_pin_group+0x3a>
   81c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81c6a:	d016      	beq.n	81c9a <pio_configure_pin_group+0x4a>
   81c6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81c70:	d111      	bne.n	81c96 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81c72:	460a      	mov	r2, r1
   81c74:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81c78:	4b19      	ldr	r3, [pc, #100]	; (81ce0 <pio_configure_pin_group+0x90>)
   81c7a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81c7c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81c80:	bf14      	ite	ne
   81c82:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81c84:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81c86:	2001      	movs	r0, #1
   81c88:	e012      	b.n	81cb0 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   81c8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81c8e:	d015      	beq.n	81cbc <pio_configure_pin_group+0x6c>
   81c90:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81c94:	d012      	beq.n	81cbc <pio_configure_pin_group+0x6c>
		return 0;
   81c96:	2000      	movs	r0, #0
   81c98:	e00a      	b.n	81cb0 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81c9a:	460a      	mov	r2, r1
   81c9c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81ca0:	4b0f      	ldr	r3, [pc, #60]	; (81ce0 <pio_configure_pin_group+0x90>)
   81ca2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81ca4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81ca8:	bf14      	ite	ne
   81caa:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81cac:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81cae:	2001      	movs	r0, #1
}
   81cb0:	b002      	add	sp, #8
   81cb2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   81cb4:	4b0b      	ldr	r3, [pc, #44]	; (81ce4 <pio_configure_pin_group+0x94>)
   81cb6:	4798      	blx	r3
	return 1;
   81cb8:	2001      	movs	r0, #1
		break;
   81cba:	e7f9      	b.n	81cb0 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81cbc:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   81cc0:	f004 0301 	and.w	r3, r4, #1
   81cc4:	9300      	str	r3, [sp, #0]
   81cc6:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81cca:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81cce:	bf14      	ite	ne
   81cd0:	2200      	movne	r2, #0
   81cd2:	2201      	moveq	r2, #1
   81cd4:	4631      	mov	r1, r6
   81cd6:	4628      	mov	r0, r5
   81cd8:	4c03      	ldr	r4, [pc, #12]	; (81ce8 <pio_configure_pin_group+0x98>)
   81cda:	47a0      	blx	r4
	return 1;
   81cdc:	2001      	movs	r0, #1
		break;
   81cde:	e7e7      	b.n	81cb0 <pio_configure_pin_group+0x60>
   81ce0:	00081a5d 	.word	0x00081a5d
   81ce4:	00081a9b 	.word	0x00081a9b
   81ce8:	00081acd 	.word	0x00081acd

00081cec <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81cf0:	4604      	mov	r4, r0
   81cf2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81cf4:	4b0e      	ldr	r3, [pc, #56]	; (81d30 <pio_handler_process+0x44>)
   81cf6:	4798      	blx	r3
   81cf8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81cfa:	4620      	mov	r0, r4
   81cfc:	4b0d      	ldr	r3, [pc, #52]	; (81d34 <pio_handler_process+0x48>)
   81cfe:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81d00:	4005      	ands	r5, r0
   81d02:	d013      	beq.n	81d2c <pio_handler_process+0x40>
   81d04:	4c0c      	ldr	r4, [pc, #48]	; (81d38 <pio_handler_process+0x4c>)
   81d06:	f104 0660 	add.w	r6, r4, #96	; 0x60
   81d0a:	e003      	b.n	81d14 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81d0c:	42b4      	cmp	r4, r6
   81d0e:	d00d      	beq.n	81d2c <pio_handler_process+0x40>
   81d10:	3410      	adds	r4, #16
		while (status != 0) {
   81d12:	b15d      	cbz	r5, 81d2c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   81d14:	6820      	ldr	r0, [r4, #0]
   81d16:	4540      	cmp	r0, r8
   81d18:	d1f8      	bne.n	81d0c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81d1a:	6861      	ldr	r1, [r4, #4]
   81d1c:	4229      	tst	r1, r5
   81d1e:	d0f5      	beq.n	81d0c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81d20:	68e3      	ldr	r3, [r4, #12]
   81d22:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81d24:	6863      	ldr	r3, [r4, #4]
   81d26:	ea25 0503 	bic.w	r5, r5, r3
   81d2a:	e7ef      	b.n	81d0c <pio_handler_process+0x20>
   81d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d30:	00081b25 	.word	0x00081b25
   81d34:	00081b29 	.word	0x00081b29
   81d38:	20071100 	.word	0x20071100

00081d3c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   81d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   81d3e:	4c18      	ldr	r4, [pc, #96]	; (81da0 <pio_handler_set+0x64>)
   81d40:	6826      	ldr	r6, [r4, #0]
   81d42:	2e06      	cmp	r6, #6
   81d44:	d829      	bhi.n	81d9a <pio_handler_set+0x5e>
   81d46:	f04f 0c00 	mov.w	ip, #0
   81d4a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   81d4c:	4f15      	ldr	r7, [pc, #84]	; (81da4 <pio_handler_set+0x68>)
   81d4e:	e004      	b.n	81d5a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   81d50:	3401      	adds	r4, #1
   81d52:	b2e4      	uxtb	r4, r4
   81d54:	46a4      	mov	ip, r4
   81d56:	42a6      	cmp	r6, r4
   81d58:	d309      	bcc.n	81d6e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   81d5a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   81d5c:	0125      	lsls	r5, r4, #4
   81d5e:	597d      	ldr	r5, [r7, r5]
   81d60:	428d      	cmp	r5, r1
   81d62:	d1f5      	bne.n	81d50 <pio_handler_set+0x14>
   81d64:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   81d68:	686d      	ldr	r5, [r5, #4]
   81d6a:	4295      	cmp	r5, r2
   81d6c:	d1f0      	bne.n	81d50 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   81d6e:	4d0d      	ldr	r5, [pc, #52]	; (81da4 <pio_handler_set+0x68>)
   81d70:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   81d74:	eb05 040e 	add.w	r4, r5, lr
   81d78:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   81d7c:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   81d7e:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   81d80:	9906      	ldr	r1, [sp, #24]
   81d82:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   81d84:	3601      	adds	r6, #1
   81d86:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   81d88:	bf04      	itt	eq
   81d8a:	4905      	ldreq	r1, [pc, #20]	; (81da0 <pio_handler_set+0x64>)
   81d8c:	600e      	streq	r6, [r1, #0]
   81d8e:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   81d90:	461a      	mov	r2, r3
   81d92:	4b05      	ldr	r3, [pc, #20]	; (81da8 <pio_handler_set+0x6c>)
   81d94:	4798      	blx	r3

	return 0;
   81d96:	2000      	movs	r0, #0
   81d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   81d9a:	2001      	movs	r0, #1
}
   81d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81d9e:	bf00      	nop
   81da0:	20071170 	.word	0x20071170
   81da4:	20071100 	.word	0x20071100
   81da8:	00081af3 	.word	0x00081af3

00081dac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81dac:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81dae:	210b      	movs	r1, #11
   81db0:	4801      	ldr	r0, [pc, #4]	; (81db8 <PIOA_Handler+0xc>)
   81db2:	4b02      	ldr	r3, [pc, #8]	; (81dbc <PIOA_Handler+0x10>)
   81db4:	4798      	blx	r3
   81db6:	bd08      	pop	{r3, pc}
   81db8:	400e0e00 	.word	0x400e0e00
   81dbc:	00081ced 	.word	0x00081ced

00081dc0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81dc0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81dc2:	210c      	movs	r1, #12
   81dc4:	4801      	ldr	r0, [pc, #4]	; (81dcc <PIOB_Handler+0xc>)
   81dc6:	4b02      	ldr	r3, [pc, #8]	; (81dd0 <PIOB_Handler+0x10>)
   81dc8:	4798      	blx	r3
   81dca:	bd08      	pop	{r3, pc}
   81dcc:	400e1000 	.word	0x400e1000
   81dd0:	00081ced 	.word	0x00081ced

00081dd4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81dd4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81dd6:	210d      	movs	r1, #13
   81dd8:	4801      	ldr	r0, [pc, #4]	; (81de0 <PIOC_Handler+0xc>)
   81dda:	4b02      	ldr	r3, [pc, #8]	; (81de4 <PIOC_Handler+0x10>)
   81ddc:	4798      	blx	r3
   81dde:	bd08      	pop	{r3, pc}
   81de0:	400e1200 	.word	0x400e1200
   81de4:	00081ced 	.word	0x00081ced

00081de8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81de8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81dea:	210e      	movs	r1, #14
   81dec:	4801      	ldr	r0, [pc, #4]	; (81df4 <PIOD_Handler+0xc>)
   81dee:	4b02      	ldr	r3, [pc, #8]	; (81df8 <PIOD_Handler+0x10>)
   81df0:	4798      	blx	r3
   81df2:	bd08      	pop	{r3, pc}
   81df4:	400e1400 	.word	0x400e1400
   81df8:	00081ced 	.word	0x00081ced

00081dfc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81dfc:	4a17      	ldr	r2, [pc, #92]	; (81e5c <pmc_switch_mck_to_pllack+0x60>)
   81dfe:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81e04:	4318      	orrs	r0, r3
   81e06:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81e08:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81e0a:	f013 0f08 	tst.w	r3, #8
   81e0e:	d10a      	bne.n	81e26 <pmc_switch_mck_to_pllack+0x2a>
   81e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81e14:	4911      	ldr	r1, [pc, #68]	; (81e5c <pmc_switch_mck_to_pllack+0x60>)
   81e16:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81e18:	f012 0f08 	tst.w	r2, #8
   81e1c:	d103      	bne.n	81e26 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81e1e:	3b01      	subs	r3, #1
   81e20:	d1f9      	bne.n	81e16 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   81e22:	2001      	movs	r0, #1
   81e24:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81e26:	4a0d      	ldr	r2, [pc, #52]	; (81e5c <pmc_switch_mck_to_pllack+0x60>)
   81e28:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81e2a:	f023 0303 	bic.w	r3, r3, #3
   81e2e:	f043 0302 	orr.w	r3, r3, #2
   81e32:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81e34:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81e36:	f013 0f08 	tst.w	r3, #8
   81e3a:	d10a      	bne.n	81e52 <pmc_switch_mck_to_pllack+0x56>
   81e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81e40:	4906      	ldr	r1, [pc, #24]	; (81e5c <pmc_switch_mck_to_pllack+0x60>)
   81e42:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81e44:	f012 0f08 	tst.w	r2, #8
   81e48:	d105      	bne.n	81e56 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81e4a:	3b01      	subs	r3, #1
   81e4c:	d1f9      	bne.n	81e42 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   81e4e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81e50:	4770      	bx	lr
	return 0;
   81e52:	2000      	movs	r0, #0
   81e54:	4770      	bx	lr
   81e56:	2000      	movs	r0, #0
   81e58:	4770      	bx	lr
   81e5a:	bf00      	nop
   81e5c:	400e0600 	.word	0x400e0600

00081e60 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81e60:	b9c8      	cbnz	r0, 81e96 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81e62:	4a11      	ldr	r2, [pc, #68]	; (81ea8 <pmc_switch_mainck_to_xtal+0x48>)
   81e64:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81e66:	0209      	lsls	r1, r1, #8
   81e68:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81e6a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81e6e:	f023 0303 	bic.w	r3, r3, #3
   81e72:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81e76:	f043 0301 	orr.w	r3, r3, #1
   81e7a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81e7c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81e7e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81e80:	f013 0f01 	tst.w	r3, #1
   81e84:	d0fb      	beq.n	81e7e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81e86:	4a08      	ldr	r2, [pc, #32]	; (81ea8 <pmc_switch_mainck_to_xtal+0x48>)
   81e88:	6a13      	ldr	r3, [r2, #32]
   81e8a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81e92:	6213      	str	r3, [r2, #32]
   81e94:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81e96:	4904      	ldr	r1, [pc, #16]	; (81ea8 <pmc_switch_mainck_to_xtal+0x48>)
   81e98:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81e9a:	4a04      	ldr	r2, [pc, #16]	; (81eac <pmc_switch_mainck_to_xtal+0x4c>)
   81e9c:	401a      	ands	r2, r3
   81e9e:	4b04      	ldr	r3, [pc, #16]	; (81eb0 <pmc_switch_mainck_to_xtal+0x50>)
   81ea0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81ea2:	620b      	str	r3, [r1, #32]
   81ea4:	4770      	bx	lr
   81ea6:	bf00      	nop
   81ea8:	400e0600 	.word	0x400e0600
   81eac:	fec8fffc 	.word	0xfec8fffc
   81eb0:	01370002 	.word	0x01370002

00081eb4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81eb4:	4b02      	ldr	r3, [pc, #8]	; (81ec0 <pmc_osc_is_ready_mainck+0xc>)
   81eb6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81eb8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81ebc:	4770      	bx	lr
   81ebe:	bf00      	nop
   81ec0:	400e0600 	.word	0x400e0600

00081ec4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81ec4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81ec8:	4b01      	ldr	r3, [pc, #4]	; (81ed0 <pmc_disable_pllack+0xc>)
   81eca:	629a      	str	r2, [r3, #40]	; 0x28
   81ecc:	4770      	bx	lr
   81ece:	bf00      	nop
   81ed0:	400e0600 	.word	0x400e0600

00081ed4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81ed4:	4b02      	ldr	r3, [pc, #8]	; (81ee0 <pmc_is_locked_pllack+0xc>)
   81ed6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81ed8:	f000 0002 	and.w	r0, r0, #2
   81edc:	4770      	bx	lr
   81ede:	bf00      	nop
   81ee0:	400e0600 	.word	0x400e0600

00081ee4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81ee4:	282c      	cmp	r0, #44	; 0x2c
   81ee6:	d81e      	bhi.n	81f26 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   81ee8:	281f      	cmp	r0, #31
   81eea:	d80c      	bhi.n	81f06 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81eec:	4b11      	ldr	r3, [pc, #68]	; (81f34 <pmc_enable_periph_clk+0x50>)
   81eee:	699a      	ldr	r2, [r3, #24]
   81ef0:	2301      	movs	r3, #1
   81ef2:	4083      	lsls	r3, r0
   81ef4:	4393      	bics	r3, r2
   81ef6:	d018      	beq.n	81f2a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   81ef8:	2301      	movs	r3, #1
   81efa:	fa03 f000 	lsl.w	r0, r3, r0
   81efe:	4b0d      	ldr	r3, [pc, #52]	; (81f34 <pmc_enable_periph_clk+0x50>)
   81f00:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81f02:	2000      	movs	r0, #0
   81f04:	4770      	bx	lr
		ul_id -= 32;
   81f06:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81f08:	4b0a      	ldr	r3, [pc, #40]	; (81f34 <pmc_enable_periph_clk+0x50>)
   81f0a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81f0e:	2301      	movs	r3, #1
   81f10:	4083      	lsls	r3, r0
   81f12:	4393      	bics	r3, r2
   81f14:	d00b      	beq.n	81f2e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   81f16:	2301      	movs	r3, #1
   81f18:	fa03 f000 	lsl.w	r0, r3, r0
   81f1c:	4b05      	ldr	r3, [pc, #20]	; (81f34 <pmc_enable_periph_clk+0x50>)
   81f1e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   81f22:	2000      	movs	r0, #0
   81f24:	4770      	bx	lr
		return 1;
   81f26:	2001      	movs	r0, #1
   81f28:	4770      	bx	lr
	return 0;
   81f2a:	2000      	movs	r0, #0
   81f2c:	4770      	bx	lr
   81f2e:	2000      	movs	r0, #0
}
   81f30:	4770      	bx	lr
   81f32:	bf00      	nop
   81f34:	400e0600 	.word	0x400e0600

00081f38 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81f38:	e7fe      	b.n	81f38 <Dummy_Handler>
	...

00081f3c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81f3c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81f3e:	4b1c      	ldr	r3, [pc, #112]	; (81fb0 <Reset_Handler+0x74>)
   81f40:	4a1c      	ldr	r2, [pc, #112]	; (81fb4 <Reset_Handler+0x78>)
   81f42:	429a      	cmp	r2, r3
   81f44:	d010      	beq.n	81f68 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   81f46:	4b1c      	ldr	r3, [pc, #112]	; (81fb8 <Reset_Handler+0x7c>)
   81f48:	4a19      	ldr	r2, [pc, #100]	; (81fb0 <Reset_Handler+0x74>)
   81f4a:	429a      	cmp	r2, r3
   81f4c:	d20c      	bcs.n	81f68 <Reset_Handler+0x2c>
   81f4e:	3b01      	subs	r3, #1
   81f50:	1a9b      	subs	r3, r3, r2
   81f52:	f023 0303 	bic.w	r3, r3, #3
   81f56:	3304      	adds	r3, #4
   81f58:	4413      	add	r3, r2
   81f5a:	4916      	ldr	r1, [pc, #88]	; (81fb4 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   81f5c:	f851 0b04 	ldr.w	r0, [r1], #4
   81f60:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   81f64:	429a      	cmp	r2, r3
   81f66:	d1f9      	bne.n	81f5c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81f68:	4b14      	ldr	r3, [pc, #80]	; (81fbc <Reset_Handler+0x80>)
   81f6a:	4a15      	ldr	r2, [pc, #84]	; (81fc0 <Reset_Handler+0x84>)
   81f6c:	429a      	cmp	r2, r3
   81f6e:	d20a      	bcs.n	81f86 <Reset_Handler+0x4a>
   81f70:	3b01      	subs	r3, #1
   81f72:	1a9b      	subs	r3, r3, r2
   81f74:	f023 0303 	bic.w	r3, r3, #3
   81f78:	3304      	adds	r3, #4
   81f7a:	4413      	add	r3, r2
		*pDest++ = 0;
   81f7c:	2100      	movs	r1, #0
   81f7e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   81f82:	4293      	cmp	r3, r2
   81f84:	d1fb      	bne.n	81f7e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81f86:	4b0f      	ldr	r3, [pc, #60]	; (81fc4 <Reset_Handler+0x88>)
   81f88:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81f8c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81f90:	490d      	ldr	r1, [pc, #52]	; (81fc8 <Reset_Handler+0x8c>)
   81f92:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81f94:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81f9c:	d203      	bcs.n	81fa6 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81f9e:	688b      	ldr	r3, [r1, #8]
   81fa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81fa4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81fa6:	4b09      	ldr	r3, [pc, #36]	; (81fcc <Reset_Handler+0x90>)
   81fa8:	4798      	blx	r3

	/* Branch to main function */
	main();
   81faa:	4b09      	ldr	r3, [pc, #36]	; (81fd0 <Reset_Handler+0x94>)
   81fac:	4798      	blx	r3
   81fae:	e7fe      	b.n	81fae <Reset_Handler+0x72>
   81fb0:	20070000 	.word	0x20070000
   81fb4:	000870e4 	.word	0x000870e4
   81fb8:	20070fd8 	.word	0x20070fd8
   81fbc:	20071698 	.word	0x20071698
   81fc0:	20070fd8 	.word	0x20070fd8
   81fc4:	00080000 	.word	0x00080000
   81fc8:	e000ed00 	.word	0xe000ed00
   81fcc:	0008212d 	.word	0x0008212d
   81fd0:	00081895 	.word	0x00081895

00081fd4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81fd4:	4b3d      	ldr	r3, [pc, #244]	; (820cc <SystemCoreClockUpdate+0xf8>)
   81fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81fd8:	f003 0303 	and.w	r3, r3, #3
   81fdc:	2b03      	cmp	r3, #3
   81fde:	d80e      	bhi.n	81ffe <SystemCoreClockUpdate+0x2a>
   81fe0:	e8df f003 	tbb	[pc, r3]
   81fe4:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81fe8:	4b39      	ldr	r3, [pc, #228]	; (820d0 <SystemCoreClockUpdate+0xfc>)
   81fea:	695b      	ldr	r3, [r3, #20]
   81fec:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81ff0:	bf14      	ite	ne
   81ff2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81ff6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81ffa:	4b36      	ldr	r3, [pc, #216]	; (820d4 <SystemCoreClockUpdate+0x100>)
   81ffc:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81ffe:	4b33      	ldr	r3, [pc, #204]	; (820cc <SystemCoreClockUpdate+0xf8>)
   82000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82002:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82006:	2b70      	cmp	r3, #112	; 0x70
   82008:	d057      	beq.n	820ba <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8200a:	4b30      	ldr	r3, [pc, #192]	; (820cc <SystemCoreClockUpdate+0xf8>)
   8200c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8200e:	4931      	ldr	r1, [pc, #196]	; (820d4 <SystemCoreClockUpdate+0x100>)
   82010:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82014:	680b      	ldr	r3, [r1, #0]
   82016:	40d3      	lsrs	r3, r2
   82018:	600b      	str	r3, [r1, #0]
   8201a:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8201c:	4b2b      	ldr	r3, [pc, #172]	; (820cc <SystemCoreClockUpdate+0xf8>)
   8201e:	6a1b      	ldr	r3, [r3, #32]
   82020:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82024:	d003      	beq.n	8202e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82026:	4a2c      	ldr	r2, [pc, #176]	; (820d8 <SystemCoreClockUpdate+0x104>)
   82028:	4b2a      	ldr	r3, [pc, #168]	; (820d4 <SystemCoreClockUpdate+0x100>)
   8202a:	601a      	str	r2, [r3, #0]
   8202c:	e7e7      	b.n	81ffe <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8202e:	4a2b      	ldr	r2, [pc, #172]	; (820dc <SystemCoreClockUpdate+0x108>)
   82030:	4b28      	ldr	r3, [pc, #160]	; (820d4 <SystemCoreClockUpdate+0x100>)
   82032:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82034:	4b25      	ldr	r3, [pc, #148]	; (820cc <SystemCoreClockUpdate+0xf8>)
   82036:	6a1b      	ldr	r3, [r3, #32]
   82038:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8203c:	2b10      	cmp	r3, #16
   8203e:	d005      	beq.n	8204c <SystemCoreClockUpdate+0x78>
   82040:	2b20      	cmp	r3, #32
   82042:	d1dc      	bne.n	81ffe <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   82044:	4a24      	ldr	r2, [pc, #144]	; (820d8 <SystemCoreClockUpdate+0x104>)
   82046:	4b23      	ldr	r3, [pc, #140]	; (820d4 <SystemCoreClockUpdate+0x100>)
   82048:	601a      	str	r2, [r3, #0]
				break;
   8204a:	e7d8      	b.n	81ffe <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   8204c:	4a24      	ldr	r2, [pc, #144]	; (820e0 <SystemCoreClockUpdate+0x10c>)
   8204e:	4b21      	ldr	r3, [pc, #132]	; (820d4 <SystemCoreClockUpdate+0x100>)
   82050:	601a      	str	r2, [r3, #0]
				break;
   82052:	e7d4      	b.n	81ffe <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82054:	4b1d      	ldr	r3, [pc, #116]	; (820cc <SystemCoreClockUpdate+0xf8>)
   82056:	6a1b      	ldr	r3, [r3, #32]
   82058:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8205c:	d00c      	beq.n	82078 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8205e:	4a1e      	ldr	r2, [pc, #120]	; (820d8 <SystemCoreClockUpdate+0x104>)
   82060:	4b1c      	ldr	r3, [pc, #112]	; (820d4 <SystemCoreClockUpdate+0x100>)
   82062:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82064:	4b19      	ldr	r3, [pc, #100]	; (820cc <SystemCoreClockUpdate+0xf8>)
   82066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82068:	f003 0303 	and.w	r3, r3, #3
   8206c:	2b02      	cmp	r3, #2
   8206e:	d016      	beq.n	8209e <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82070:	4a1c      	ldr	r2, [pc, #112]	; (820e4 <SystemCoreClockUpdate+0x110>)
   82072:	4b18      	ldr	r3, [pc, #96]	; (820d4 <SystemCoreClockUpdate+0x100>)
   82074:	601a      	str	r2, [r3, #0]
   82076:	e7c2      	b.n	81ffe <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82078:	4a18      	ldr	r2, [pc, #96]	; (820dc <SystemCoreClockUpdate+0x108>)
   8207a:	4b16      	ldr	r3, [pc, #88]	; (820d4 <SystemCoreClockUpdate+0x100>)
   8207c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8207e:	4b13      	ldr	r3, [pc, #76]	; (820cc <SystemCoreClockUpdate+0xf8>)
   82080:	6a1b      	ldr	r3, [r3, #32]
   82082:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82086:	2b10      	cmp	r3, #16
   82088:	d005      	beq.n	82096 <SystemCoreClockUpdate+0xc2>
   8208a:	2b20      	cmp	r3, #32
   8208c:	d1ea      	bne.n	82064 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   8208e:	4a12      	ldr	r2, [pc, #72]	; (820d8 <SystemCoreClockUpdate+0x104>)
   82090:	4b10      	ldr	r3, [pc, #64]	; (820d4 <SystemCoreClockUpdate+0x100>)
   82092:	601a      	str	r2, [r3, #0]
				break;
   82094:	e7e6      	b.n	82064 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   82096:	4a12      	ldr	r2, [pc, #72]	; (820e0 <SystemCoreClockUpdate+0x10c>)
   82098:	4b0e      	ldr	r3, [pc, #56]	; (820d4 <SystemCoreClockUpdate+0x100>)
   8209a:	601a      	str	r2, [r3, #0]
				break;
   8209c:	e7e2      	b.n	82064 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8209e:	4a0b      	ldr	r2, [pc, #44]	; (820cc <SystemCoreClockUpdate+0xf8>)
   820a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   820a2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   820a4:	480b      	ldr	r0, [pc, #44]	; (820d4 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   820a6:	f3c1 410a 	ubfx	r1, r1, #16, #11
   820aa:	6803      	ldr	r3, [r0, #0]
   820ac:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   820b0:	b2d2      	uxtb	r2, r2
   820b2:	fbb3 f3f2 	udiv	r3, r3, r2
   820b6:	6003      	str	r3, [r0, #0]
   820b8:	e7a1      	b.n	81ffe <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   820ba:	4a06      	ldr	r2, [pc, #24]	; (820d4 <SystemCoreClockUpdate+0x100>)
   820bc:	6813      	ldr	r3, [r2, #0]
   820be:	490a      	ldr	r1, [pc, #40]	; (820e8 <SystemCoreClockUpdate+0x114>)
   820c0:	fba1 1303 	umull	r1, r3, r1, r3
   820c4:	085b      	lsrs	r3, r3, #1
   820c6:	6013      	str	r3, [r2, #0]
   820c8:	4770      	bx	lr
   820ca:	bf00      	nop
   820cc:	400e0600 	.word	0x400e0600
   820d0:	400e1a10 	.word	0x400e1a10
   820d4:	20070624 	.word	0x20070624
   820d8:	00b71b00 	.word	0x00b71b00
   820dc:	003d0900 	.word	0x003d0900
   820e0:	007a1200 	.word	0x007a1200
   820e4:	0e4e1c00 	.word	0x0e4e1c00
   820e8:	aaaaaaab 	.word	0xaaaaaaab

000820ec <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   820ec:	4b0a      	ldr	r3, [pc, #40]	; (82118 <_sbrk+0x2c>)
   820ee:	681b      	ldr	r3, [r3, #0]
   820f0:	b153      	cbz	r3, 82108 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   820f2:	4b09      	ldr	r3, [pc, #36]	; (82118 <_sbrk+0x2c>)
   820f4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   820f6:	181a      	adds	r2, r3, r0
   820f8:	4908      	ldr	r1, [pc, #32]	; (8211c <_sbrk+0x30>)
   820fa:	4291      	cmp	r1, r2
   820fc:	db08      	blt.n	82110 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   820fe:	4610      	mov	r0, r2
   82100:	4a05      	ldr	r2, [pc, #20]	; (82118 <_sbrk+0x2c>)
   82102:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82104:	4618      	mov	r0, r3
   82106:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   82108:	4a05      	ldr	r2, [pc, #20]	; (82120 <_sbrk+0x34>)
   8210a:	4b03      	ldr	r3, [pc, #12]	; (82118 <_sbrk+0x2c>)
   8210c:	601a      	str	r2, [r3, #0]
   8210e:	e7f0      	b.n	820f2 <_sbrk+0x6>
		return (caddr_t) -1;	
   82110:	f04f 30ff 	mov.w	r0, #4294967295
}
   82114:	4770      	bx	lr
   82116:	bf00      	nop
   82118:	20071174 	.word	0x20071174
   8211c:	20087ffc 	.word	0x20087ffc
   82120:	20073698 	.word	0x20073698

00082124 <atoi>:
   82124:	220a      	movs	r2, #10
   82126:	2100      	movs	r1, #0
   82128:	f000 ba0e 	b.w	82548 <strtol>

0008212c <__libc_init_array>:
   8212c:	b570      	push	{r4, r5, r6, lr}
   8212e:	4e0f      	ldr	r6, [pc, #60]	; (8216c <__libc_init_array+0x40>)
   82130:	4d0f      	ldr	r5, [pc, #60]	; (82170 <__libc_init_array+0x44>)
   82132:	1b76      	subs	r6, r6, r5
   82134:	10b6      	asrs	r6, r6, #2
   82136:	bf18      	it	ne
   82138:	2400      	movne	r4, #0
   8213a:	d005      	beq.n	82148 <__libc_init_array+0x1c>
   8213c:	3401      	adds	r4, #1
   8213e:	f855 3b04 	ldr.w	r3, [r5], #4
   82142:	4798      	blx	r3
   82144:	42a6      	cmp	r6, r4
   82146:	d1f9      	bne.n	8213c <__libc_init_array+0x10>
   82148:	4e0a      	ldr	r6, [pc, #40]	; (82174 <__libc_init_array+0x48>)
   8214a:	4d0b      	ldr	r5, [pc, #44]	; (82178 <__libc_init_array+0x4c>)
   8214c:	f004 ffb4 	bl	870b8 <_init>
   82150:	1b76      	subs	r6, r6, r5
   82152:	10b6      	asrs	r6, r6, #2
   82154:	bf18      	it	ne
   82156:	2400      	movne	r4, #0
   82158:	d006      	beq.n	82168 <__libc_init_array+0x3c>
   8215a:	3401      	adds	r4, #1
   8215c:	f855 3b04 	ldr.w	r3, [r5], #4
   82160:	4798      	blx	r3
   82162:	42a6      	cmp	r6, r4
   82164:	d1f9      	bne.n	8215a <__libc_init_array+0x2e>
   82166:	bd70      	pop	{r4, r5, r6, pc}
   82168:	bd70      	pop	{r4, r5, r6, pc}
   8216a:	bf00      	nop
   8216c:	000870c4 	.word	0x000870c4
   82170:	000870c4 	.word	0x000870c4
   82174:	000870cc 	.word	0x000870cc
   82178:	000870c4 	.word	0x000870c4

0008217c <memcpy>:
   8217c:	4684      	mov	ip, r0
   8217e:	ea41 0300 	orr.w	r3, r1, r0
   82182:	f013 0303 	ands.w	r3, r3, #3
   82186:	d149      	bne.n	8221c <memcpy+0xa0>
   82188:	3a40      	subs	r2, #64	; 0x40
   8218a:	d323      	bcc.n	821d4 <memcpy+0x58>
   8218c:	680b      	ldr	r3, [r1, #0]
   8218e:	6003      	str	r3, [r0, #0]
   82190:	684b      	ldr	r3, [r1, #4]
   82192:	6043      	str	r3, [r0, #4]
   82194:	688b      	ldr	r3, [r1, #8]
   82196:	6083      	str	r3, [r0, #8]
   82198:	68cb      	ldr	r3, [r1, #12]
   8219a:	60c3      	str	r3, [r0, #12]
   8219c:	690b      	ldr	r3, [r1, #16]
   8219e:	6103      	str	r3, [r0, #16]
   821a0:	694b      	ldr	r3, [r1, #20]
   821a2:	6143      	str	r3, [r0, #20]
   821a4:	698b      	ldr	r3, [r1, #24]
   821a6:	6183      	str	r3, [r0, #24]
   821a8:	69cb      	ldr	r3, [r1, #28]
   821aa:	61c3      	str	r3, [r0, #28]
   821ac:	6a0b      	ldr	r3, [r1, #32]
   821ae:	6203      	str	r3, [r0, #32]
   821b0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   821b2:	6243      	str	r3, [r0, #36]	; 0x24
   821b4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   821b6:	6283      	str	r3, [r0, #40]	; 0x28
   821b8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   821ba:	62c3      	str	r3, [r0, #44]	; 0x2c
   821bc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   821be:	6303      	str	r3, [r0, #48]	; 0x30
   821c0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   821c2:	6343      	str	r3, [r0, #52]	; 0x34
   821c4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   821c6:	6383      	str	r3, [r0, #56]	; 0x38
   821c8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   821ca:	63c3      	str	r3, [r0, #60]	; 0x3c
   821cc:	3040      	adds	r0, #64	; 0x40
   821ce:	3140      	adds	r1, #64	; 0x40
   821d0:	3a40      	subs	r2, #64	; 0x40
   821d2:	d2db      	bcs.n	8218c <memcpy+0x10>
   821d4:	3230      	adds	r2, #48	; 0x30
   821d6:	d30b      	bcc.n	821f0 <memcpy+0x74>
   821d8:	680b      	ldr	r3, [r1, #0]
   821da:	6003      	str	r3, [r0, #0]
   821dc:	684b      	ldr	r3, [r1, #4]
   821de:	6043      	str	r3, [r0, #4]
   821e0:	688b      	ldr	r3, [r1, #8]
   821e2:	6083      	str	r3, [r0, #8]
   821e4:	68cb      	ldr	r3, [r1, #12]
   821e6:	60c3      	str	r3, [r0, #12]
   821e8:	3010      	adds	r0, #16
   821ea:	3110      	adds	r1, #16
   821ec:	3a10      	subs	r2, #16
   821ee:	d2f3      	bcs.n	821d8 <memcpy+0x5c>
   821f0:	320c      	adds	r2, #12
   821f2:	d305      	bcc.n	82200 <memcpy+0x84>
   821f4:	f851 3b04 	ldr.w	r3, [r1], #4
   821f8:	f840 3b04 	str.w	r3, [r0], #4
   821fc:	3a04      	subs	r2, #4
   821fe:	d2f9      	bcs.n	821f4 <memcpy+0x78>
   82200:	3204      	adds	r2, #4
   82202:	d008      	beq.n	82216 <memcpy+0x9a>
   82204:	07d2      	lsls	r2, r2, #31
   82206:	bf1c      	itt	ne
   82208:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8220c:	f800 3b01 	strbne.w	r3, [r0], #1
   82210:	d301      	bcc.n	82216 <memcpy+0x9a>
   82212:	880b      	ldrh	r3, [r1, #0]
   82214:	8003      	strh	r3, [r0, #0]
   82216:	4660      	mov	r0, ip
   82218:	4770      	bx	lr
   8221a:	bf00      	nop
   8221c:	2a08      	cmp	r2, #8
   8221e:	d313      	bcc.n	82248 <memcpy+0xcc>
   82220:	078b      	lsls	r3, r1, #30
   82222:	d0b1      	beq.n	82188 <memcpy+0xc>
   82224:	f010 0303 	ands.w	r3, r0, #3
   82228:	d0ae      	beq.n	82188 <memcpy+0xc>
   8222a:	f1c3 0304 	rsb	r3, r3, #4
   8222e:	1ad2      	subs	r2, r2, r3
   82230:	07db      	lsls	r3, r3, #31
   82232:	bf1c      	itt	ne
   82234:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82238:	f800 3b01 	strbne.w	r3, [r0], #1
   8223c:	d3a4      	bcc.n	82188 <memcpy+0xc>
   8223e:	f831 3b02 	ldrh.w	r3, [r1], #2
   82242:	f820 3b02 	strh.w	r3, [r0], #2
   82246:	e79f      	b.n	82188 <memcpy+0xc>
   82248:	3a04      	subs	r2, #4
   8224a:	d3d9      	bcc.n	82200 <memcpy+0x84>
   8224c:	3a01      	subs	r2, #1
   8224e:	f811 3b01 	ldrb.w	r3, [r1], #1
   82252:	f800 3b01 	strb.w	r3, [r0], #1
   82256:	d2f9      	bcs.n	8224c <memcpy+0xd0>
   82258:	780b      	ldrb	r3, [r1, #0]
   8225a:	7003      	strb	r3, [r0, #0]
   8225c:	784b      	ldrb	r3, [r1, #1]
   8225e:	7043      	strb	r3, [r0, #1]
   82260:	788b      	ldrb	r3, [r1, #2]
   82262:	7083      	strb	r3, [r0, #2]
   82264:	4660      	mov	r0, ip
   82266:	4770      	bx	lr

00082268 <memset>:
   82268:	b470      	push	{r4, r5, r6}
   8226a:	0786      	lsls	r6, r0, #30
   8226c:	d046      	beq.n	822fc <memset+0x94>
   8226e:	1e54      	subs	r4, r2, #1
   82270:	2a00      	cmp	r2, #0
   82272:	d041      	beq.n	822f8 <memset+0x90>
   82274:	b2ca      	uxtb	r2, r1
   82276:	4603      	mov	r3, r0
   82278:	e002      	b.n	82280 <memset+0x18>
   8227a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8227e:	d33b      	bcc.n	822f8 <memset+0x90>
   82280:	f803 2b01 	strb.w	r2, [r3], #1
   82284:	079d      	lsls	r5, r3, #30
   82286:	d1f8      	bne.n	8227a <memset+0x12>
   82288:	2c03      	cmp	r4, #3
   8228a:	d92e      	bls.n	822ea <memset+0x82>
   8228c:	b2cd      	uxtb	r5, r1
   8228e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82292:	2c0f      	cmp	r4, #15
   82294:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82298:	d919      	bls.n	822ce <memset+0x66>
   8229a:	4626      	mov	r6, r4
   8229c:	f103 0210 	add.w	r2, r3, #16
   822a0:	3e10      	subs	r6, #16
   822a2:	2e0f      	cmp	r6, #15
   822a4:	f842 5c10 	str.w	r5, [r2, #-16]
   822a8:	f842 5c0c 	str.w	r5, [r2, #-12]
   822ac:	f842 5c08 	str.w	r5, [r2, #-8]
   822b0:	f842 5c04 	str.w	r5, [r2, #-4]
   822b4:	f102 0210 	add.w	r2, r2, #16
   822b8:	d8f2      	bhi.n	822a0 <memset+0x38>
   822ba:	f1a4 0210 	sub.w	r2, r4, #16
   822be:	f022 020f 	bic.w	r2, r2, #15
   822c2:	f004 040f 	and.w	r4, r4, #15
   822c6:	3210      	adds	r2, #16
   822c8:	2c03      	cmp	r4, #3
   822ca:	4413      	add	r3, r2
   822cc:	d90d      	bls.n	822ea <memset+0x82>
   822ce:	461e      	mov	r6, r3
   822d0:	4622      	mov	r2, r4
   822d2:	3a04      	subs	r2, #4
   822d4:	2a03      	cmp	r2, #3
   822d6:	f846 5b04 	str.w	r5, [r6], #4
   822da:	d8fa      	bhi.n	822d2 <memset+0x6a>
   822dc:	1f22      	subs	r2, r4, #4
   822de:	f022 0203 	bic.w	r2, r2, #3
   822e2:	3204      	adds	r2, #4
   822e4:	4413      	add	r3, r2
   822e6:	f004 0403 	and.w	r4, r4, #3
   822ea:	b12c      	cbz	r4, 822f8 <memset+0x90>
   822ec:	b2c9      	uxtb	r1, r1
   822ee:	441c      	add	r4, r3
   822f0:	f803 1b01 	strb.w	r1, [r3], #1
   822f4:	429c      	cmp	r4, r3
   822f6:	d1fb      	bne.n	822f0 <memset+0x88>
   822f8:	bc70      	pop	{r4, r5, r6}
   822fa:	4770      	bx	lr
   822fc:	4614      	mov	r4, r2
   822fe:	4603      	mov	r3, r0
   82300:	e7c2      	b.n	82288 <memset+0x20>
   82302:	bf00      	nop

00082304 <sprintf>:
   82304:	b40e      	push	{r1, r2, r3}
   82306:	4601      	mov	r1, r0
   82308:	b5f0      	push	{r4, r5, r6, r7, lr}
   8230a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   8230e:	f44f 7702 	mov.w	r7, #520	; 0x208
   82312:	f64f 76ff 	movw	r6, #65535	; 0xffff
   82316:	b09c      	sub	sp, #112	; 0x70
   82318:	ac21      	add	r4, sp, #132	; 0x84
   8231a:	f854 2b04 	ldr.w	r2, [r4], #4
   8231e:	4b0b      	ldr	r3, [pc, #44]	; (8234c <sprintf+0x48>)
   82320:	9102      	str	r1, [sp, #8]
   82322:	9106      	str	r1, [sp, #24]
   82324:	6818      	ldr	r0, [r3, #0]
   82326:	a902      	add	r1, sp, #8
   82328:	4623      	mov	r3, r4
   8232a:	9401      	str	r4, [sp, #4]
   8232c:	f8ad 7014 	strh.w	r7, [sp, #20]
   82330:	9504      	str	r5, [sp, #16]
   82332:	9507      	str	r5, [sp, #28]
   82334:	f8ad 6016 	strh.w	r6, [sp, #22]
   82338:	f000 f91c 	bl	82574 <_svfprintf_r>
   8233c:	2200      	movs	r2, #0
   8233e:	9b02      	ldr	r3, [sp, #8]
   82340:	701a      	strb	r2, [r3, #0]
   82342:	b01c      	add	sp, #112	; 0x70
   82344:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   82348:	b003      	add	sp, #12
   8234a:	4770      	bx	lr
   8234c:	20070628 	.word	0x20070628

00082350 <strlen>:
   82350:	f020 0103 	bic.w	r1, r0, #3
   82354:	f010 0003 	ands.w	r0, r0, #3
   82358:	f1c0 0000 	rsb	r0, r0, #0
   8235c:	f851 3b04 	ldr.w	r3, [r1], #4
   82360:	f100 0c04 	add.w	ip, r0, #4
   82364:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82368:	f06f 0200 	mvn.w	r2, #0
   8236c:	bf1c      	itt	ne
   8236e:	fa22 f20c 	lsrne.w	r2, r2, ip
   82372:	4313      	orrne	r3, r2
   82374:	f04f 0c01 	mov.w	ip, #1
   82378:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8237c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82380:	eba3 020c 	sub.w	r2, r3, ip
   82384:	ea22 0203 	bic.w	r2, r2, r3
   82388:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8238c:	bf04      	itt	eq
   8238e:	f851 3b04 	ldreq.w	r3, [r1], #4
   82392:	3004      	addeq	r0, #4
   82394:	d0f4      	beq.n	82380 <strlen+0x30>
   82396:	f1c2 0100 	rsb	r1, r2, #0
   8239a:	ea02 0201 	and.w	r2, r2, r1
   8239e:	fab2 f282 	clz	r2, r2
   823a2:	f1c2 021f 	rsb	r2, r2, #31
   823a6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   823aa:	4770      	bx	lr

000823ac <strtok>:
   823ac:	4a02      	ldr	r2, [pc, #8]	; (823b8 <strtok+0xc>)
   823ae:	2301      	movs	r3, #1
   823b0:	6812      	ldr	r2, [r2, #0]
   823b2:	325c      	adds	r2, #92	; 0x5c
   823b4:	f000 b802 	b.w	823bc <__strtok_r>
   823b8:	20070628 	.word	0x20070628

000823bc <__strtok_r>:
   823bc:	b4f0      	push	{r4, r5, r6, r7}
   823be:	b318      	cbz	r0, 82408 <__strtok_r+0x4c>
   823c0:	4607      	mov	r7, r0
   823c2:	460d      	mov	r5, r1
   823c4:	f817 6b01 	ldrb.w	r6, [r7], #1
   823c8:	e001      	b.n	823ce <__strtok_r+0x12>
   823ca:	42a6      	cmp	r6, r4
   823cc:	d017      	beq.n	823fe <__strtok_r+0x42>
   823ce:	f815 4b01 	ldrb.w	r4, [r5], #1
   823d2:	2c00      	cmp	r4, #0
   823d4:	d1f9      	bne.n	823ca <__strtok_r+0xe>
   823d6:	b1e6      	cbz	r6, 82412 <__strtok_r+0x56>
   823d8:	460c      	mov	r4, r1
   823da:	f817 5b01 	ldrb.w	r5, [r7], #1
   823de:	e001      	b.n	823e4 <__strtok_r+0x28>
   823e0:	2b00      	cmp	r3, #0
   823e2:	d0f9      	beq.n	823d8 <__strtok_r+0x1c>
   823e4:	f814 3b01 	ldrb.w	r3, [r4], #1
   823e8:	429d      	cmp	r5, r3
   823ea:	d1f9      	bne.n	823e0 <__strtok_r+0x24>
   823ec:	b155      	cbz	r5, 82404 <__strtok_r+0x48>
   823ee:	2300      	movs	r3, #0
   823f0:	f807 3c01 	strb.w	r3, [r7, #-1]
   823f4:	4606      	mov	r6, r0
   823f6:	6017      	str	r7, [r2, #0]
   823f8:	4630      	mov	r0, r6
   823fa:	bcf0      	pop	{r4, r5, r6, r7}
   823fc:	4770      	bx	lr
   823fe:	b153      	cbz	r3, 82416 <__strtok_r+0x5a>
   82400:	4638      	mov	r0, r7
   82402:	e7dd      	b.n	823c0 <__strtok_r+0x4>
   82404:	462f      	mov	r7, r5
   82406:	e7f5      	b.n	823f4 <__strtok_r+0x38>
   82408:	6810      	ldr	r0, [r2, #0]
   8240a:	2800      	cmp	r0, #0
   8240c:	d1d8      	bne.n	823c0 <__strtok_r+0x4>
   8240e:	4606      	mov	r6, r0
   82410:	e7f2      	b.n	823f8 <__strtok_r+0x3c>
   82412:	6016      	str	r6, [r2, #0]
   82414:	e7f0      	b.n	823f8 <__strtok_r+0x3c>
   82416:	6017      	str	r7, [r2, #0]
   82418:	4606      	mov	r6, r0
   8241a:	7003      	strb	r3, [r0, #0]
   8241c:	e7ec      	b.n	823f8 <__strtok_r+0x3c>
   8241e:	bf00      	nop

00082420 <_strtol_l.isra.0>:
   82420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82424:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   82428:	460f      	mov	r7, r1
   8242a:	4680      	mov	r8, r0
   8242c:	4616      	mov	r6, r2
   8242e:	461d      	mov	r5, r3
   82430:	468a      	mov	sl, r1
   82432:	e000      	b.n	82436 <_strtol_l.isra.0+0x16>
   82434:	46a2      	mov	sl, r4
   82436:	4654      	mov	r4, sl
   82438:	4648      	mov	r0, r9
   8243a:	f814 bb01 	ldrb.w	fp, [r4], #1
   8243e:	f002 fafb 	bl	84a38 <__locale_ctype_ptr_l>
   82442:	4458      	add	r0, fp
   82444:	7842      	ldrb	r2, [r0, #1]
   82446:	f012 0208 	ands.w	r2, r2, #8
   8244a:	d1f3      	bne.n	82434 <_strtol_l.isra.0+0x14>
   8244c:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   82450:	d04f      	beq.n	824f2 <_strtol_l.isra.0+0xd2>
   82452:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   82456:	bf04      	itt	eq
   82458:	f894 b000 	ldrbeq.w	fp, [r4]
   8245c:	f10a 0402 	addeq.w	r4, sl, #2
   82460:	b11d      	cbz	r5, 8246a <_strtol_l.isra.0+0x4a>
   82462:	2d10      	cmp	r5, #16
   82464:	d056      	beq.n	82514 <_strtol_l.isra.0+0xf4>
   82466:	46ac      	mov	ip, r5
   82468:	e004      	b.n	82474 <_strtol_l.isra.0+0x54>
   8246a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   8246e:	d060      	beq.n	82532 <_strtol_l.isra.0+0x112>
   82470:	250a      	movs	r5, #10
   82472:	46ac      	mov	ip, r5
   82474:	2a00      	cmp	r2, #0
   82476:	bf0c      	ite	eq
   82478:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   8247c:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   82480:	2100      	movs	r1, #0
   82482:	fbb9 fefc 	udiv	lr, r9, ip
   82486:	4608      	mov	r0, r1
   82488:	fb0c 9a1e 	mls	sl, ip, lr, r9
   8248c:	e005      	b.n	8249a <_strtol_l.isra.0+0x7a>
   8248e:	d029      	beq.n	824e4 <_strtol_l.isra.0+0xc4>
   82490:	2101      	movs	r1, #1
   82492:	fb0c 3000 	mla	r0, ip, r0, r3
   82496:	f814 bb01 	ldrb.w	fp, [r4], #1
   8249a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   8249e:	2b09      	cmp	r3, #9
   824a0:	d905      	bls.n	824ae <_strtol_l.isra.0+0x8e>
   824a2:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   824a6:	2b19      	cmp	r3, #25
   824a8:	d80b      	bhi.n	824c2 <_strtol_l.isra.0+0xa2>
   824aa:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   824ae:	429d      	cmp	r5, r3
   824b0:	dd0f      	ble.n	824d2 <_strtol_l.isra.0+0xb2>
   824b2:	f1b1 3fff 	cmp.w	r1, #4294967295
   824b6:	d0ee      	beq.n	82496 <_strtol_l.isra.0+0x76>
   824b8:	4586      	cmp	lr, r0
   824ba:	d2e8      	bcs.n	8248e <_strtol_l.isra.0+0x6e>
   824bc:	f04f 31ff 	mov.w	r1, #4294967295
   824c0:	e7e9      	b.n	82496 <_strtol_l.isra.0+0x76>
   824c2:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   824c6:	2b19      	cmp	r3, #25
   824c8:	d803      	bhi.n	824d2 <_strtol_l.isra.0+0xb2>
   824ca:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   824ce:	429d      	cmp	r5, r3
   824d0:	dcef      	bgt.n	824b2 <_strtol_l.isra.0+0x92>
   824d2:	1c4b      	adds	r3, r1, #1
   824d4:	d013      	beq.n	824fe <_strtol_l.isra.0+0xde>
   824d6:	b102      	cbz	r2, 824da <_strtol_l.isra.0+0xba>
   824d8:	4240      	negs	r0, r0
   824da:	b146      	cbz	r6, 824ee <_strtol_l.isra.0+0xce>
   824dc:	b9c1      	cbnz	r1, 82510 <_strtol_l.isra.0+0xf0>
   824de:	6037      	str	r7, [r6, #0]
   824e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824e4:	459a      	cmp	sl, r3
   824e6:	dad3      	bge.n	82490 <_strtol_l.isra.0+0x70>
   824e8:	f04f 31ff 	mov.w	r1, #4294967295
   824ec:	e7d3      	b.n	82496 <_strtol_l.isra.0+0x76>
   824ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824f2:	f894 b000 	ldrb.w	fp, [r4]
   824f6:	2201      	movs	r2, #1
   824f8:	f10a 0402 	add.w	r4, sl, #2
   824fc:	e7b0      	b.n	82460 <_strtol_l.isra.0+0x40>
   824fe:	2322      	movs	r3, #34	; 0x22
   82500:	f8c8 3000 	str.w	r3, [r8]
   82504:	b1ee      	cbz	r6, 82542 <_strtol_l.isra.0+0x122>
   82506:	1e67      	subs	r7, r4, #1
   82508:	4648      	mov	r0, r9
   8250a:	6037      	str	r7, [r6, #0]
   8250c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82510:	4681      	mov	r9, r0
   82512:	e7f8      	b.n	82506 <_strtol_l.isra.0+0xe6>
   82514:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   82518:	d1a5      	bne.n	82466 <_strtol_l.isra.0+0x46>
   8251a:	7823      	ldrb	r3, [r4, #0]
   8251c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   82520:	2b58      	cmp	r3, #88	; 0x58
   82522:	d1a0      	bne.n	82466 <_strtol_l.isra.0+0x46>
   82524:	f04f 0c10 	mov.w	ip, #16
   82528:	f894 b001 	ldrb.w	fp, [r4, #1]
   8252c:	4665      	mov	r5, ip
   8252e:	3402      	adds	r4, #2
   82530:	e7a0      	b.n	82474 <_strtol_l.isra.0+0x54>
   82532:	7823      	ldrb	r3, [r4, #0]
   82534:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   82538:	2b58      	cmp	r3, #88	; 0x58
   8253a:	d0f3      	beq.n	82524 <_strtol_l.isra.0+0x104>
   8253c:	2508      	movs	r5, #8
   8253e:	46ac      	mov	ip, r5
   82540:	e798      	b.n	82474 <_strtol_l.isra.0+0x54>
   82542:	4648      	mov	r0, r9
   82544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00082548 <strtol>:
   82548:	4b08      	ldr	r3, [pc, #32]	; (8256c <strtol+0x24>)
   8254a:	b570      	push	{r4, r5, r6, lr}
   8254c:	681d      	ldr	r5, [r3, #0]
   8254e:	4e08      	ldr	r6, [pc, #32]	; (82570 <strtol+0x28>)
   82550:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   82552:	b082      	sub	sp, #8
   82554:	2c00      	cmp	r4, #0
   82556:	bf08      	it	eq
   82558:	4634      	moveq	r4, r6
   8255a:	4613      	mov	r3, r2
   8255c:	9400      	str	r4, [sp, #0]
   8255e:	460a      	mov	r2, r1
   82560:	4601      	mov	r1, r0
   82562:	4628      	mov	r0, r5
   82564:	f7ff ff5c 	bl	82420 <_strtol_l.isra.0>
   82568:	b002      	add	sp, #8
   8256a:	bd70      	pop	{r4, r5, r6, pc}
   8256c:	20070628 	.word	0x20070628
   82570:	20070a5c 	.word	0x20070a5c

00082574 <_svfprintf_r>:
   82574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82578:	b0c3      	sub	sp, #268	; 0x10c
   8257a:	460c      	mov	r4, r1
   8257c:	910b      	str	r1, [sp, #44]	; 0x2c
   8257e:	4692      	mov	sl, r2
   82580:	930f      	str	r3, [sp, #60]	; 0x3c
   82582:	900c      	str	r0, [sp, #48]	; 0x30
   82584:	f002 fa5c 	bl	84a40 <_localeconv_r>
   82588:	6803      	ldr	r3, [r0, #0]
   8258a:	4618      	mov	r0, r3
   8258c:	931a      	str	r3, [sp, #104]	; 0x68
   8258e:	f7ff fedf 	bl	82350 <strlen>
   82592:	89a3      	ldrh	r3, [r4, #12]
   82594:	9019      	str	r0, [sp, #100]	; 0x64
   82596:	0619      	lsls	r1, r3, #24
   82598:	d503      	bpl.n	825a2 <_svfprintf_r+0x2e>
   8259a:	6923      	ldr	r3, [r4, #16]
   8259c:	2b00      	cmp	r3, #0
   8259e:	f001 8035 	beq.w	8360c <_svfprintf_r+0x1098>
   825a2:	2300      	movs	r3, #0
   825a4:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   825a8:	46c8      	mov	r8, r9
   825aa:	9315      	str	r3, [sp, #84]	; 0x54
   825ac:	9313      	str	r3, [sp, #76]	; 0x4c
   825ae:	9314      	str	r3, [sp, #80]	; 0x50
   825b0:	9318      	str	r3, [sp, #96]	; 0x60
   825b2:	931b      	str	r3, [sp, #108]	; 0x6c
   825b4:	9309      	str	r3, [sp, #36]	; 0x24
   825b6:	9316      	str	r3, [sp, #88]	; 0x58
   825b8:	9317      	str	r3, [sp, #92]	; 0x5c
   825ba:	9327      	str	r3, [sp, #156]	; 0x9c
   825bc:	9326      	str	r3, [sp, #152]	; 0x98
   825be:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   825c2:	f89a 3000 	ldrb.w	r3, [sl]
   825c6:	4654      	mov	r4, sl
   825c8:	b1eb      	cbz	r3, 82606 <_svfprintf_r+0x92>
   825ca:	2b25      	cmp	r3, #37	; 0x25
   825cc:	d102      	bne.n	825d4 <_svfprintf_r+0x60>
   825ce:	e01a      	b.n	82606 <_svfprintf_r+0x92>
   825d0:	2b25      	cmp	r3, #37	; 0x25
   825d2:	d003      	beq.n	825dc <_svfprintf_r+0x68>
   825d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   825d8:	2b00      	cmp	r3, #0
   825da:	d1f9      	bne.n	825d0 <_svfprintf_r+0x5c>
   825dc:	eba4 050a 	sub.w	r5, r4, sl
   825e0:	b18d      	cbz	r5, 82606 <_svfprintf_r+0x92>
   825e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   825e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   825e6:	3301      	adds	r3, #1
   825e8:	442a      	add	r2, r5
   825ea:	2b07      	cmp	r3, #7
   825ec:	f8c8 a000 	str.w	sl, [r8]
   825f0:	f8c8 5004 	str.w	r5, [r8, #4]
   825f4:	9227      	str	r2, [sp, #156]	; 0x9c
   825f6:	9326      	str	r3, [sp, #152]	; 0x98
   825f8:	f300 808a 	bgt.w	82710 <_svfprintf_r+0x19c>
   825fc:	f108 0808 	add.w	r8, r8, #8
   82600:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82602:	442b      	add	r3, r5
   82604:	9309      	str	r3, [sp, #36]	; 0x24
   82606:	7823      	ldrb	r3, [r4, #0]
   82608:	2b00      	cmp	r3, #0
   8260a:	f000 8089 	beq.w	82720 <_svfprintf_r+0x1ac>
   8260e:	2300      	movs	r3, #0
   82610:	f04f 30ff 	mov.w	r0, #4294967295
   82614:	461a      	mov	r2, r3
   82616:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8261a:	4619      	mov	r1, r3
   8261c:	930d      	str	r3, [sp, #52]	; 0x34
   8261e:	469b      	mov	fp, r3
   82620:	7863      	ldrb	r3, [r4, #1]
   82622:	f104 0a01 	add.w	sl, r4, #1
   82626:	900a      	str	r0, [sp, #40]	; 0x28
   82628:	f10a 0a01 	add.w	sl, sl, #1
   8262c:	f1a3 0020 	sub.w	r0, r3, #32
   82630:	2858      	cmp	r0, #88	; 0x58
   82632:	f200 83b7 	bhi.w	82da4 <_svfprintf_r+0x830>
   82636:	e8df f010 	tbh	[pc, r0, lsl #1]
   8263a:	034c      	.short	0x034c
   8263c:	03b503b5 	.word	0x03b503b5
   82640:	03b50354 	.word	0x03b50354
   82644:	03b503b5 	.word	0x03b503b5
   82648:	03b503b5 	.word	0x03b503b5
   8264c:	005903b5 	.word	0x005903b5
   82650:	03b50359 	.word	0x03b50359
   82654:	02140066 	.word	0x02140066
   82658:	022f03b5 	.word	0x022f03b5
   8265c:	03a503a5 	.word	0x03a503a5
   82660:	03a503a5 	.word	0x03a503a5
   82664:	03a503a5 	.word	0x03a503a5
   82668:	03a503a5 	.word	0x03a503a5
   8266c:	03b503a5 	.word	0x03b503a5
   82670:	03b503b5 	.word	0x03b503b5
   82674:	03b503b5 	.word	0x03b503b5
   82678:	03b503b5 	.word	0x03b503b5
   8267c:	03b503b5 	.word	0x03b503b5
   82680:	028b03b5 	.word	0x028b03b5
   82684:	03b502d3 	.word	0x03b502d3
   82688:	03b502d3 	.word	0x03b502d3
   8268c:	03b503b5 	.word	0x03b503b5
   82690:	031b03b5 	.word	0x031b03b5
   82694:	03b503b5 	.word	0x03b503b5
   82698:	03b50320 	.word	0x03b50320
   8269c:	03b503b5 	.word	0x03b503b5
   826a0:	03b503b5 	.word	0x03b503b5
   826a4:	03b50234 	.word	0x03b50234
   826a8:	024b03b5 	.word	0x024b03b5
   826ac:	03b503b5 	.word	0x03b503b5
   826b0:	03b503b5 	.word	0x03b503b5
   826b4:	03b503b5 	.word	0x03b503b5
   826b8:	03b503b5 	.word	0x03b503b5
   826bc:	03b503b5 	.word	0x03b503b5
   826c0:	039e0276 	.word	0x039e0276
   826c4:	02d302d3 	.word	0x02d302d3
   826c8:	036302d3 	.word	0x036302d3
   826cc:	03b5039e 	.word	0x03b5039e
   826d0:	036803b5 	.word	0x036803b5
   826d4:	037503b5 	.word	0x037503b5
   826d8:	038c01dd 	.word	0x038c01dd
   826dc:	03b5035e 	.word	0x03b5035e
   826e0:	03b501f2 	.word	0x03b501f2
   826e4:	03b50087 	.word	0x03b50087
   826e8:	033203b5 	.word	0x033203b5
   826ec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   826ee:	6823      	ldr	r3, [r4, #0]
   826f0:	4618      	mov	r0, r3
   826f2:	930d      	str	r3, [sp, #52]	; 0x34
   826f4:	4623      	mov	r3, r4
   826f6:	2800      	cmp	r0, #0
   826f8:	f103 0304 	add.w	r3, r3, #4
   826fc:	930f      	str	r3, [sp, #60]	; 0x3c
   826fe:	da04      	bge.n	8270a <_svfprintf_r+0x196>
   82700:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82702:	425b      	negs	r3, r3
   82704:	930d      	str	r3, [sp, #52]	; 0x34
   82706:	f04b 0b04 	orr.w	fp, fp, #4
   8270a:	f89a 3000 	ldrb.w	r3, [sl]
   8270e:	e78b      	b.n	82628 <_svfprintf_r+0xb4>
   82710:	aa25      	add	r2, sp, #148	; 0x94
   82712:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82714:	980c      	ldr	r0, [sp, #48]	; 0x30
   82716:	f002 ffbd 	bl	85694 <__ssprint_r>
   8271a:	b940      	cbnz	r0, 8272e <_svfprintf_r+0x1ba>
   8271c:	46c8      	mov	r8, r9
   8271e:	e76f      	b.n	82600 <_svfprintf_r+0x8c>
   82720:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   82722:	b123      	cbz	r3, 8272e <_svfprintf_r+0x1ba>
   82724:	980c      	ldr	r0, [sp, #48]	; 0x30
   82726:	aa25      	add	r2, sp, #148	; 0x94
   82728:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8272a:	f002 ffb3 	bl	85694 <__ssprint_r>
   8272e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   82730:	899b      	ldrh	r3, [r3, #12]
   82732:	f013 0f40 	tst.w	r3, #64	; 0x40
   82736:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82738:	bf18      	it	ne
   8273a:	f04f 33ff 	movne.w	r3, #4294967295
   8273e:	9309      	str	r3, [sp, #36]	; 0x24
   82740:	9809      	ldr	r0, [sp, #36]	; 0x24
   82742:	b043      	add	sp, #268	; 0x10c
   82744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82748:	f01b 0f20 	tst.w	fp, #32
   8274c:	9311      	str	r3, [sp, #68]	; 0x44
   8274e:	f040 81af 	bne.w	82ab0 <_svfprintf_r+0x53c>
   82752:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82754:	f01b 0f10 	tst.w	fp, #16
   82758:	4613      	mov	r3, r2
   8275a:	f040 859a 	bne.w	83292 <_svfprintf_r+0xd1e>
   8275e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82762:	f000 8596 	beq.w	83292 <_svfprintf_r+0xd1e>
   82766:	2500      	movs	r5, #0
   82768:	2301      	movs	r3, #1
   8276a:	8814      	ldrh	r4, [r2, #0]
   8276c:	3204      	adds	r2, #4
   8276e:	920f      	str	r2, [sp, #60]	; 0x3c
   82770:	2200      	movs	r2, #0
   82772:	4617      	mov	r7, r2
   82774:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   82778:	990a      	ldr	r1, [sp, #40]	; 0x28
   8277a:	1c4a      	adds	r2, r1, #1
   8277c:	f000 8210 	beq.w	82ba0 <_svfprintf_r+0x62c>
   82780:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   82784:	9207      	str	r2, [sp, #28]
   82786:	ea54 0205 	orrs.w	r2, r4, r5
   8278a:	f040 820f 	bne.w	82bac <_svfprintf_r+0x638>
   8278e:	2900      	cmp	r1, #0
   82790:	f040 8431 	bne.w	82ff6 <_svfprintf_r+0xa82>
   82794:	2b00      	cmp	r3, #0
   82796:	f040 8539 	bne.w	8320c <_svfprintf_r+0xc98>
   8279a:	f01b 0301 	ands.w	r3, fp, #1
   8279e:	930e      	str	r3, [sp, #56]	; 0x38
   827a0:	f000 8662 	beq.w	83468 <_svfprintf_r+0xef4>
   827a4:	2330      	movs	r3, #48	; 0x30
   827a6:	ae42      	add	r6, sp, #264	; 0x108
   827a8:	f806 3d41 	strb.w	r3, [r6, #-65]!
   827ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   827ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   827b0:	4293      	cmp	r3, r2
   827b2:	bfb8      	it	lt
   827b4:	4613      	movlt	r3, r2
   827b6:	9308      	str	r3, [sp, #32]
   827b8:	2300      	movs	r3, #0
   827ba:	9312      	str	r3, [sp, #72]	; 0x48
   827bc:	b117      	cbz	r7, 827c4 <_svfprintf_r+0x250>
   827be:	9b08      	ldr	r3, [sp, #32]
   827c0:	3301      	adds	r3, #1
   827c2:	9308      	str	r3, [sp, #32]
   827c4:	9b07      	ldr	r3, [sp, #28]
   827c6:	f013 0302 	ands.w	r3, r3, #2
   827ca:	9310      	str	r3, [sp, #64]	; 0x40
   827cc:	d002      	beq.n	827d4 <_svfprintf_r+0x260>
   827ce:	9b08      	ldr	r3, [sp, #32]
   827d0:	3302      	adds	r3, #2
   827d2:	9308      	str	r3, [sp, #32]
   827d4:	9b07      	ldr	r3, [sp, #28]
   827d6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   827da:	f040 8310 	bne.w	82dfe <_svfprintf_r+0x88a>
   827de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   827e0:	9a08      	ldr	r2, [sp, #32]
   827e2:	eba3 0b02 	sub.w	fp, r3, r2
   827e6:	f1bb 0f00 	cmp.w	fp, #0
   827ea:	f340 8308 	ble.w	82dfe <_svfprintf_r+0x88a>
   827ee:	f1bb 0f10 	cmp.w	fp, #16
   827f2:	f340 87b2 	ble.w	8375a <_svfprintf_r+0x11e6>
   827f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   827f8:	4643      	mov	r3, r8
   827fa:	4621      	mov	r1, r4
   827fc:	46a8      	mov	r8, r5
   827fe:	2710      	movs	r7, #16
   82800:	9a26      	ldr	r2, [sp, #152]	; 0x98
   82802:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82804:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82806:	e006      	b.n	82816 <_svfprintf_r+0x2a2>
   82808:	f1ab 0b10 	sub.w	fp, fp, #16
   8280c:	f1bb 0f10 	cmp.w	fp, #16
   82810:	f103 0308 	add.w	r3, r3, #8
   82814:	dd18      	ble.n	82848 <_svfprintf_r+0x2d4>
   82816:	3201      	adds	r2, #1
   82818:	48ab      	ldr	r0, [pc, #684]	; (82ac8 <_svfprintf_r+0x554>)
   8281a:	3110      	adds	r1, #16
   8281c:	2a07      	cmp	r2, #7
   8281e:	9127      	str	r1, [sp, #156]	; 0x9c
   82820:	9226      	str	r2, [sp, #152]	; 0x98
   82822:	e883 0081 	stmia.w	r3, {r0, r7}
   82826:	ddef      	ble.n	82808 <_svfprintf_r+0x294>
   82828:	aa25      	add	r2, sp, #148	; 0x94
   8282a:	4629      	mov	r1, r5
   8282c:	4620      	mov	r0, r4
   8282e:	f002 ff31 	bl	85694 <__ssprint_r>
   82832:	2800      	cmp	r0, #0
   82834:	f47f af7b 	bne.w	8272e <_svfprintf_r+0x1ba>
   82838:	f1ab 0b10 	sub.w	fp, fp, #16
   8283c:	f1bb 0f10 	cmp.w	fp, #16
   82840:	464b      	mov	r3, r9
   82842:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82844:	9a26      	ldr	r2, [sp, #152]	; 0x98
   82846:	dce6      	bgt.n	82816 <_svfprintf_r+0x2a2>
   82848:	4645      	mov	r5, r8
   8284a:	460c      	mov	r4, r1
   8284c:	4698      	mov	r8, r3
   8284e:	3201      	adds	r2, #1
   82850:	4b9d      	ldr	r3, [pc, #628]	; (82ac8 <_svfprintf_r+0x554>)
   82852:	445c      	add	r4, fp
   82854:	2a07      	cmp	r2, #7
   82856:	9427      	str	r4, [sp, #156]	; 0x9c
   82858:	9226      	str	r2, [sp, #152]	; 0x98
   8285a:	e888 0808 	stmia.w	r8, {r3, fp}
   8285e:	f300 82c3 	bgt.w	82de8 <_svfprintf_r+0x874>
   82862:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82866:	f108 0808 	add.w	r8, r8, #8
   8286a:	b187      	cbz	r7, 8288e <_svfprintf_r+0x31a>
   8286c:	2101      	movs	r1, #1
   8286e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82870:	440c      	add	r4, r1
   82872:	440b      	add	r3, r1
   82874:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   82878:	2b07      	cmp	r3, #7
   8287a:	9427      	str	r4, [sp, #156]	; 0x9c
   8287c:	9326      	str	r3, [sp, #152]	; 0x98
   8287e:	f8c8 1004 	str.w	r1, [r8, #4]
   82882:	f8c8 2000 	str.w	r2, [r8]
   82886:	f300 83cd 	bgt.w	83024 <_svfprintf_r+0xab0>
   8288a:	f108 0808 	add.w	r8, r8, #8
   8288e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82890:	b17b      	cbz	r3, 828b2 <_svfprintf_r+0x33e>
   82892:	2102      	movs	r1, #2
   82894:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82896:	440c      	add	r4, r1
   82898:	3301      	adds	r3, #1
   8289a:	aa1e      	add	r2, sp, #120	; 0x78
   8289c:	2b07      	cmp	r3, #7
   8289e:	9427      	str	r4, [sp, #156]	; 0x9c
   828a0:	9326      	str	r3, [sp, #152]	; 0x98
   828a2:	f8c8 1004 	str.w	r1, [r8, #4]
   828a6:	f8c8 2000 	str.w	r2, [r8]
   828aa:	f300 8411 	bgt.w	830d0 <_svfprintf_r+0xb5c>
   828ae:	f108 0808 	add.w	r8, r8, #8
   828b2:	2d80      	cmp	r5, #128	; 0x80
   828b4:	f000 8304 	beq.w	82ec0 <_svfprintf_r+0x94c>
   828b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   828ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   828bc:	1a9f      	subs	r7, r3, r2
   828be:	2f00      	cmp	r7, #0
   828c0:	dd37      	ble.n	82932 <_svfprintf_r+0x3be>
   828c2:	2f10      	cmp	r7, #16
   828c4:	f340 8679 	ble.w	835ba <_svfprintf_r+0x1046>
   828c8:	4d80      	ldr	r5, [pc, #512]	; (82acc <_svfprintf_r+0x558>)
   828ca:	4642      	mov	r2, r8
   828cc:	4621      	mov	r1, r4
   828ce:	46b0      	mov	r8, r6
   828d0:	f04f 0b10 	mov.w	fp, #16
   828d4:	462e      	mov	r6, r5
   828d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   828d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   828da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   828dc:	e004      	b.n	828e8 <_svfprintf_r+0x374>
   828de:	3f10      	subs	r7, #16
   828e0:	2f10      	cmp	r7, #16
   828e2:	f102 0208 	add.w	r2, r2, #8
   828e6:	dd15      	ble.n	82914 <_svfprintf_r+0x3a0>
   828e8:	3301      	adds	r3, #1
   828ea:	3110      	adds	r1, #16
   828ec:	2b07      	cmp	r3, #7
   828ee:	9127      	str	r1, [sp, #156]	; 0x9c
   828f0:	9326      	str	r3, [sp, #152]	; 0x98
   828f2:	e882 0840 	stmia.w	r2, {r6, fp}
   828f6:	ddf2      	ble.n	828de <_svfprintf_r+0x36a>
   828f8:	aa25      	add	r2, sp, #148	; 0x94
   828fa:	4629      	mov	r1, r5
   828fc:	4620      	mov	r0, r4
   828fe:	f002 fec9 	bl	85694 <__ssprint_r>
   82902:	2800      	cmp	r0, #0
   82904:	f47f af13 	bne.w	8272e <_svfprintf_r+0x1ba>
   82908:	3f10      	subs	r7, #16
   8290a:	2f10      	cmp	r7, #16
   8290c:	464a      	mov	r2, r9
   8290e:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82910:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82912:	dce9      	bgt.n	828e8 <_svfprintf_r+0x374>
   82914:	4635      	mov	r5, r6
   82916:	460c      	mov	r4, r1
   82918:	4646      	mov	r6, r8
   8291a:	4690      	mov	r8, r2
   8291c:	3301      	adds	r3, #1
   8291e:	443c      	add	r4, r7
   82920:	2b07      	cmp	r3, #7
   82922:	9427      	str	r4, [sp, #156]	; 0x9c
   82924:	9326      	str	r3, [sp, #152]	; 0x98
   82926:	e888 00a0 	stmia.w	r8, {r5, r7}
   8292a:	f300 8370 	bgt.w	8300e <_svfprintf_r+0xa9a>
   8292e:	f108 0808 	add.w	r8, r8, #8
   82932:	9b07      	ldr	r3, [sp, #28]
   82934:	05df      	lsls	r7, r3, #23
   82936:	f100 8264 	bmi.w	82e02 <_svfprintf_r+0x88e>
   8293a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8293c:	990e      	ldr	r1, [sp, #56]	; 0x38
   8293e:	3301      	adds	r3, #1
   82940:	440c      	add	r4, r1
   82942:	2b07      	cmp	r3, #7
   82944:	9427      	str	r4, [sp, #156]	; 0x9c
   82946:	f8c8 6000 	str.w	r6, [r8]
   8294a:	f8c8 1004 	str.w	r1, [r8, #4]
   8294e:	9326      	str	r3, [sp, #152]	; 0x98
   82950:	f300 83b3 	bgt.w	830ba <_svfprintf_r+0xb46>
   82954:	f108 0808 	add.w	r8, r8, #8
   82958:	9b07      	ldr	r3, [sp, #28]
   8295a:	075b      	lsls	r3, r3, #29
   8295c:	d53b      	bpl.n	829d6 <_svfprintf_r+0x462>
   8295e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82960:	9a08      	ldr	r2, [sp, #32]
   82962:	1a9d      	subs	r5, r3, r2
   82964:	2d00      	cmp	r5, #0
   82966:	dd36      	ble.n	829d6 <_svfprintf_r+0x462>
   82968:	2d10      	cmp	r5, #16
   8296a:	f340 8721 	ble.w	837b0 <_svfprintf_r+0x123c>
   8296e:	2610      	movs	r6, #16
   82970:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82972:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   82974:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   82978:	e004      	b.n	82984 <_svfprintf_r+0x410>
   8297a:	3d10      	subs	r5, #16
   8297c:	2d10      	cmp	r5, #16
   8297e:	f108 0808 	add.w	r8, r8, #8
   82982:	dd16      	ble.n	829b2 <_svfprintf_r+0x43e>
   82984:	3301      	adds	r3, #1
   82986:	4a50      	ldr	r2, [pc, #320]	; (82ac8 <_svfprintf_r+0x554>)
   82988:	3410      	adds	r4, #16
   8298a:	2b07      	cmp	r3, #7
   8298c:	9427      	str	r4, [sp, #156]	; 0x9c
   8298e:	9326      	str	r3, [sp, #152]	; 0x98
   82990:	e888 0044 	stmia.w	r8, {r2, r6}
   82994:	ddf1      	ble.n	8297a <_svfprintf_r+0x406>
   82996:	aa25      	add	r2, sp, #148	; 0x94
   82998:	4659      	mov	r1, fp
   8299a:	4638      	mov	r0, r7
   8299c:	f002 fe7a 	bl	85694 <__ssprint_r>
   829a0:	2800      	cmp	r0, #0
   829a2:	f47f aec4 	bne.w	8272e <_svfprintf_r+0x1ba>
   829a6:	3d10      	subs	r5, #16
   829a8:	2d10      	cmp	r5, #16
   829aa:	46c8      	mov	r8, r9
   829ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   829ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   829b0:	dce8      	bgt.n	82984 <_svfprintf_r+0x410>
   829b2:	3301      	adds	r3, #1
   829b4:	4a44      	ldr	r2, [pc, #272]	; (82ac8 <_svfprintf_r+0x554>)
   829b6:	442c      	add	r4, r5
   829b8:	2b07      	cmp	r3, #7
   829ba:	9427      	str	r4, [sp, #156]	; 0x9c
   829bc:	9326      	str	r3, [sp, #152]	; 0x98
   829be:	e888 0024 	stmia.w	r8, {r2, r5}
   829c2:	dd08      	ble.n	829d6 <_svfprintf_r+0x462>
   829c4:	aa25      	add	r2, sp, #148	; 0x94
   829c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   829c8:	980c      	ldr	r0, [sp, #48]	; 0x30
   829ca:	f002 fe63 	bl	85694 <__ssprint_r>
   829ce:	2800      	cmp	r0, #0
   829d0:	f47f aead 	bne.w	8272e <_svfprintf_r+0x1ba>
   829d4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   829d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   829d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   829da:	9908      	ldr	r1, [sp, #32]
   829dc:	428a      	cmp	r2, r1
   829de:	bfac      	ite	ge
   829e0:	189b      	addge	r3, r3, r2
   829e2:	185b      	addlt	r3, r3, r1
   829e4:	9309      	str	r3, [sp, #36]	; 0x24
   829e6:	2c00      	cmp	r4, #0
   829e8:	f040 82fb 	bne.w	82fe2 <_svfprintf_r+0xa6e>
   829ec:	2300      	movs	r3, #0
   829ee:	46c8      	mov	r8, r9
   829f0:	9326      	str	r3, [sp, #152]	; 0x98
   829f2:	e5e6      	b.n	825c2 <_svfprintf_r+0x4e>
   829f4:	9311      	str	r3, [sp, #68]	; 0x44
   829f6:	f01b 0320 	ands.w	r3, fp, #32
   829fa:	f040 8145 	bne.w	82c88 <_svfprintf_r+0x714>
   829fe:	f01b 0210 	ands.w	r2, fp, #16
   82a02:	f040 8466 	bne.w	832d2 <_svfprintf_r+0xd5e>
   82a06:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   82a0a:	f000 8462 	beq.w	832d2 <_svfprintf_r+0xd5e>
   82a0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   82a10:	4613      	mov	r3, r2
   82a12:	460a      	mov	r2, r1
   82a14:	3204      	adds	r2, #4
   82a16:	880c      	ldrh	r4, [r1, #0]
   82a18:	2500      	movs	r5, #0
   82a1a:	920f      	str	r2, [sp, #60]	; 0x3c
   82a1c:	e6a8      	b.n	82770 <_svfprintf_r+0x1fc>
   82a1e:	2500      	movs	r5, #0
   82a20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82a22:	9311      	str	r3, [sp, #68]	; 0x44
   82a24:	6816      	ldr	r6, [r2, #0]
   82a26:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   82a2a:	1d14      	adds	r4, r2, #4
   82a2c:	2e00      	cmp	r6, #0
   82a2e:	f000 86cd 	beq.w	837cc <_svfprintf_r+0x1258>
   82a32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   82a34:	1c53      	adds	r3, r2, #1
   82a36:	f000 861b 	beq.w	83670 <_svfprintf_r+0x10fc>
   82a3a:	4629      	mov	r1, r5
   82a3c:	4630      	mov	r0, r6
   82a3e:	f002 fac9 	bl	84fd4 <memchr>
   82a42:	2800      	cmp	r0, #0
   82a44:	f000 870d 	beq.w	83862 <_svfprintf_r+0x12ee>
   82a48:	1b83      	subs	r3, r0, r6
   82a4a:	950a      	str	r5, [sp, #40]	; 0x28
   82a4c:	930e      	str	r3, [sp, #56]	; 0x38
   82a4e:	940f      	str	r4, [sp, #60]	; 0x3c
   82a50:	f8cd b01c 	str.w	fp, [sp, #28]
   82a54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   82a58:	9308      	str	r3, [sp, #32]
   82a5a:	9512      	str	r5, [sp, #72]	; 0x48
   82a5c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82a60:	e6ac      	b.n	827bc <_svfprintf_r+0x248>
   82a62:	f89a 3000 	ldrb.w	r3, [sl]
   82a66:	f10a 0401 	add.w	r4, sl, #1
   82a6a:	2b2a      	cmp	r3, #42	; 0x2a
   82a6c:	f000 87c2 	beq.w	839f4 <_svfprintf_r+0x1480>
   82a70:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82a74:	2809      	cmp	r0, #9
   82a76:	46a2      	mov	sl, r4
   82a78:	f200 8718 	bhi.w	838ac <_svfprintf_r+0x1338>
   82a7c:	2300      	movs	r3, #0
   82a7e:	461c      	mov	r4, r3
   82a80:	f81a 3b01 	ldrb.w	r3, [sl], #1
   82a84:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82a88:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   82a8c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82a90:	2809      	cmp	r0, #9
   82a92:	d9f5      	bls.n	82a80 <_svfprintf_r+0x50c>
   82a94:	940a      	str	r4, [sp, #40]	; 0x28
   82a96:	e5c9      	b.n	8262c <_svfprintf_r+0xb8>
   82a98:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   82a9c:	f89a 3000 	ldrb.w	r3, [sl]
   82aa0:	e5c2      	b.n	82628 <_svfprintf_r+0xb4>
   82aa2:	f04b 0b10 	orr.w	fp, fp, #16
   82aa6:	f01b 0f20 	tst.w	fp, #32
   82aaa:	9311      	str	r3, [sp, #68]	; 0x44
   82aac:	f43f ae51 	beq.w	82752 <_svfprintf_r+0x1de>
   82ab0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82ab2:	3407      	adds	r4, #7
   82ab4:	f024 0307 	bic.w	r3, r4, #7
   82ab8:	f103 0208 	add.w	r2, r3, #8
   82abc:	e9d3 4500 	ldrd	r4, r5, [r3]
   82ac0:	920f      	str	r2, [sp, #60]	; 0x3c
   82ac2:	2301      	movs	r3, #1
   82ac4:	e654      	b.n	82770 <_svfprintf_r+0x1fc>
   82ac6:	bf00      	nop
   82ac8:	00086e74 	.word	0x00086e74
   82acc:	00086e84 	.word	0x00086e84
   82ad0:	9311      	str	r3, [sp, #68]	; 0x44
   82ad2:	2a00      	cmp	r2, #0
   82ad4:	f040 87ad 	bne.w	83a32 <_svfprintf_r+0x14be>
   82ad8:	4bbe      	ldr	r3, [pc, #760]	; (82dd4 <_svfprintf_r+0x860>)
   82ada:	f01b 0f20 	tst.w	fp, #32
   82ade:	9318      	str	r3, [sp, #96]	; 0x60
   82ae0:	f040 80e7 	bne.w	82cb2 <_svfprintf_r+0x73e>
   82ae4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82ae6:	f01b 0f10 	tst.w	fp, #16
   82aea:	4613      	mov	r3, r2
   82aec:	f040 83d8 	bne.w	832a0 <_svfprintf_r+0xd2c>
   82af0:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82af4:	f000 83d4 	beq.w	832a0 <_svfprintf_r+0xd2c>
   82af8:	2500      	movs	r5, #0
   82afa:	3304      	adds	r3, #4
   82afc:	8814      	ldrh	r4, [r2, #0]
   82afe:	930f      	str	r3, [sp, #60]	; 0x3c
   82b00:	f01b 0f01 	tst.w	fp, #1
   82b04:	f000 80e3 	beq.w	82cce <_svfprintf_r+0x75a>
   82b08:	ea54 0305 	orrs.w	r3, r4, r5
   82b0c:	f000 80df 	beq.w	82cce <_svfprintf_r+0x75a>
   82b10:	2330      	movs	r3, #48	; 0x30
   82b12:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   82b16:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   82b1a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   82b1e:	f04b 0b02 	orr.w	fp, fp, #2
   82b22:	2302      	movs	r3, #2
   82b24:	e624      	b.n	82770 <_svfprintf_r+0x1fc>
   82b26:	2201      	movs	r2, #1
   82b28:	9311      	str	r3, [sp, #68]	; 0x44
   82b2a:	2300      	movs	r3, #0
   82b2c:	4611      	mov	r1, r2
   82b2e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   82b30:	9208      	str	r2, [sp, #32]
   82b32:	6802      	ldr	r2, [r0, #0]
   82b34:	461f      	mov	r7, r3
   82b36:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   82b3a:	930a      	str	r3, [sp, #40]	; 0x28
   82b3c:	9312      	str	r3, [sp, #72]	; 0x48
   82b3e:	1d03      	adds	r3, r0, #4
   82b40:	f8cd b01c 	str.w	fp, [sp, #28]
   82b44:	910e      	str	r1, [sp, #56]	; 0x38
   82b46:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   82b4a:	930f      	str	r3, [sp, #60]	; 0x3c
   82b4c:	ae28      	add	r6, sp, #160	; 0xa0
   82b4e:	e639      	b.n	827c4 <_svfprintf_r+0x250>
   82b50:	9311      	str	r3, [sp, #68]	; 0x44
   82b52:	2a00      	cmp	r2, #0
   82b54:	f040 8784 	bne.w	83a60 <_svfprintf_r+0x14ec>
   82b58:	f04b 0b10 	orr.w	fp, fp, #16
   82b5c:	f01b 0f20 	tst.w	fp, #32
   82b60:	f040 8475 	bne.w	8344e <_svfprintf_r+0xeda>
   82b64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82b66:	f01b 0f10 	tst.w	fp, #16
   82b6a:	4613      	mov	r3, r2
   82b6c:	f040 839d 	bne.w	832aa <_svfprintf_r+0xd36>
   82b70:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82b74:	f000 8399 	beq.w	832aa <_svfprintf_r+0xd36>
   82b78:	f9b2 4000 	ldrsh.w	r4, [r2]
   82b7c:	3304      	adds	r3, #4
   82b7e:	17e5      	asrs	r5, r4, #31
   82b80:	930f      	str	r3, [sp, #60]	; 0x3c
   82b82:	4622      	mov	r2, r4
   82b84:	462b      	mov	r3, r5
   82b86:	2a00      	cmp	r2, #0
   82b88:	f173 0300 	sbcs.w	r3, r3, #0
   82b8c:	f2c0 8398 	blt.w	832c0 <_svfprintf_r+0xd4c>
   82b90:	990a      	ldr	r1, [sp, #40]	; 0x28
   82b92:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82b96:	1c4a      	adds	r2, r1, #1
   82b98:	f04f 0301 	mov.w	r3, #1
   82b9c:	f47f adf0 	bne.w	82780 <_svfprintf_r+0x20c>
   82ba0:	ea54 0205 	orrs.w	r2, r4, r5
   82ba4:	f000 8229 	beq.w	82ffa <_svfprintf_r+0xa86>
   82ba8:	f8cd b01c 	str.w	fp, [sp, #28]
   82bac:	2b01      	cmp	r3, #1
   82bae:	f000 830e 	beq.w	831ce <_svfprintf_r+0xc5a>
   82bb2:	2b02      	cmp	r3, #2
   82bb4:	f040 829c 	bne.w	830f0 <_svfprintf_r+0xb7c>
   82bb8:	464e      	mov	r6, r9
   82bba:	9818      	ldr	r0, [sp, #96]	; 0x60
   82bbc:	0923      	lsrs	r3, r4, #4
   82bbe:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   82bc2:	0929      	lsrs	r1, r5, #4
   82bc4:	f004 020f 	and.w	r2, r4, #15
   82bc8:	460d      	mov	r5, r1
   82bca:	461c      	mov	r4, r3
   82bcc:	5c83      	ldrb	r3, [r0, r2]
   82bce:	f806 3d01 	strb.w	r3, [r6, #-1]!
   82bd2:	ea54 0305 	orrs.w	r3, r4, r5
   82bd6:	d1f1      	bne.n	82bbc <_svfprintf_r+0x648>
   82bd8:	eba9 0306 	sub.w	r3, r9, r6
   82bdc:	930e      	str	r3, [sp, #56]	; 0x38
   82bde:	e5e5      	b.n	827ac <_svfprintf_r+0x238>
   82be0:	9311      	str	r3, [sp, #68]	; 0x44
   82be2:	2a00      	cmp	r2, #0
   82be4:	f040 8738 	bne.w	83a58 <_svfprintf_r+0x14e4>
   82be8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82bea:	f01b 0f08 	tst.w	fp, #8
   82bee:	f104 0407 	add.w	r4, r4, #7
   82bf2:	f000 84cf 	beq.w	83594 <_svfprintf_r+0x1020>
   82bf6:	f024 0307 	bic.w	r3, r4, #7
   82bfa:	f103 0208 	add.w	r2, r3, #8
   82bfe:	920f      	str	r2, [sp, #60]	; 0x3c
   82c00:	681a      	ldr	r2, [r3, #0]
   82c02:	685b      	ldr	r3, [r3, #4]
   82c04:	9215      	str	r2, [sp, #84]	; 0x54
   82c06:	9314      	str	r3, [sp, #80]	; 0x50
   82c08:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82c0a:	9d15      	ldr	r5, [sp, #84]	; 0x54
   82c0c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   82c10:	4628      	mov	r0, r5
   82c12:	4621      	mov	r1, r4
   82c14:	f04f 32ff 	mov.w	r2, #4294967295
   82c18:	4b6f      	ldr	r3, [pc, #444]	; (82dd8 <_svfprintf_r+0x864>)
   82c1a:	f003 fdf9 	bl	86810 <__aeabi_dcmpun>
   82c1e:	2800      	cmp	r0, #0
   82c20:	f040 8434 	bne.w	8348c <_svfprintf_r+0xf18>
   82c24:	4628      	mov	r0, r5
   82c26:	4621      	mov	r1, r4
   82c28:	f04f 32ff 	mov.w	r2, #4294967295
   82c2c:	4b6a      	ldr	r3, [pc, #424]	; (82dd8 <_svfprintf_r+0x864>)
   82c2e:	f003 fdd1 	bl	867d4 <__aeabi_dcmple>
   82c32:	2800      	cmp	r0, #0
   82c34:	f040 842a 	bne.w	8348c <_svfprintf_r+0xf18>
   82c38:	a815      	add	r0, sp, #84	; 0x54
   82c3a:	c80d      	ldmia	r0, {r0, r2, r3}
   82c3c:	9914      	ldr	r1, [sp, #80]	; 0x50
   82c3e:	f003 fdbf 	bl	867c0 <__aeabi_dcmplt>
   82c42:	2800      	cmp	r0, #0
   82c44:	f040 85d4 	bne.w	837f0 <_svfprintf_r+0x127c>
   82c48:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82c4c:	2303      	movs	r3, #3
   82c4e:	461a      	mov	r2, r3
   82c50:	9308      	str	r3, [sp, #32]
   82c52:	2300      	movs	r3, #0
   82c54:	4e61      	ldr	r6, [pc, #388]	; (82ddc <_svfprintf_r+0x868>)
   82c56:	4619      	mov	r1, r3
   82c58:	930a      	str	r3, [sp, #40]	; 0x28
   82c5a:	4b61      	ldr	r3, [pc, #388]	; (82de0 <_svfprintf_r+0x86c>)
   82c5c:	920e      	str	r2, [sp, #56]	; 0x38
   82c5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82c60:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   82c64:	9007      	str	r0, [sp, #28]
   82c66:	9112      	str	r1, [sp, #72]	; 0x48
   82c68:	2a47      	cmp	r2, #71	; 0x47
   82c6a:	bfd8      	it	le
   82c6c:	461e      	movle	r6, r3
   82c6e:	e5a5      	b.n	827bc <_svfprintf_r+0x248>
   82c70:	f04b 0b08 	orr.w	fp, fp, #8
   82c74:	f89a 3000 	ldrb.w	r3, [sl]
   82c78:	e4d6      	b.n	82628 <_svfprintf_r+0xb4>
   82c7a:	f04b 0b10 	orr.w	fp, fp, #16
   82c7e:	9311      	str	r3, [sp, #68]	; 0x44
   82c80:	f01b 0320 	ands.w	r3, fp, #32
   82c84:	f43f aebb 	beq.w	829fe <_svfprintf_r+0x48a>
   82c88:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82c8a:	3407      	adds	r4, #7
   82c8c:	f024 0307 	bic.w	r3, r4, #7
   82c90:	f103 0208 	add.w	r2, r3, #8
   82c94:	e9d3 4500 	ldrd	r4, r5, [r3]
   82c98:	920f      	str	r2, [sp, #60]	; 0x3c
   82c9a:	2300      	movs	r3, #0
   82c9c:	e568      	b.n	82770 <_svfprintf_r+0x1fc>
   82c9e:	9311      	str	r3, [sp, #68]	; 0x44
   82ca0:	2a00      	cmp	r2, #0
   82ca2:	f040 86c2 	bne.w	83a2a <_svfprintf_r+0x14b6>
   82ca6:	4b4f      	ldr	r3, [pc, #316]	; (82de4 <_svfprintf_r+0x870>)
   82ca8:	f01b 0f20 	tst.w	fp, #32
   82cac:	9318      	str	r3, [sp, #96]	; 0x60
   82cae:	f43f af19 	beq.w	82ae4 <_svfprintf_r+0x570>
   82cb2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82cb4:	f01b 0f01 	tst.w	fp, #1
   82cb8:	f104 0407 	add.w	r4, r4, #7
   82cbc:	f024 0307 	bic.w	r3, r4, #7
   82cc0:	f103 0208 	add.w	r2, r3, #8
   82cc4:	920f      	str	r2, [sp, #60]	; 0x3c
   82cc6:	e9d3 4500 	ldrd	r4, r5, [r3]
   82cca:	f47f af1d 	bne.w	82b08 <_svfprintf_r+0x594>
   82cce:	2302      	movs	r3, #2
   82cd0:	e54e      	b.n	82770 <_svfprintf_r+0x1fc>
   82cd2:	f89a 3000 	ldrb.w	r3, [sl]
   82cd6:	2900      	cmp	r1, #0
   82cd8:	f47f aca6 	bne.w	82628 <_svfprintf_r+0xb4>
   82cdc:	2201      	movs	r2, #1
   82cde:	2120      	movs	r1, #32
   82ce0:	e4a2      	b.n	82628 <_svfprintf_r+0xb4>
   82ce2:	f04b 0b01 	orr.w	fp, fp, #1
   82ce6:	f89a 3000 	ldrb.w	r3, [sl]
   82cea:	e49d      	b.n	82628 <_svfprintf_r+0xb4>
   82cec:	f89a 3000 	ldrb.w	r3, [sl]
   82cf0:	2201      	movs	r2, #1
   82cf2:	212b      	movs	r1, #43	; 0x2b
   82cf4:	e498      	b.n	82628 <_svfprintf_r+0xb4>
   82cf6:	f04b 0b20 	orr.w	fp, fp, #32
   82cfa:	f89a 3000 	ldrb.w	r3, [sl]
   82cfe:	e493      	b.n	82628 <_svfprintf_r+0xb4>
   82d00:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   82d04:	f89a 3000 	ldrb.w	r3, [sl]
   82d08:	e48e      	b.n	82628 <_svfprintf_r+0xb4>
   82d0a:	f89a 3000 	ldrb.w	r3, [sl]
   82d0e:	2b6c      	cmp	r3, #108	; 0x6c
   82d10:	bf03      	ittte	eq
   82d12:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   82d16:	f04b 0b20 	orreq.w	fp, fp, #32
   82d1a:	f10a 0a01 	addeq.w	sl, sl, #1
   82d1e:	f04b 0b10 	orrne.w	fp, fp, #16
   82d22:	e481      	b.n	82628 <_svfprintf_r+0xb4>
   82d24:	2a00      	cmp	r2, #0
   82d26:	f040 867c 	bne.w	83a22 <_svfprintf_r+0x14ae>
   82d2a:	f01b 0f20 	tst.w	fp, #32
   82d2e:	f040 8452 	bne.w	835d6 <_svfprintf_r+0x1062>
   82d32:	f01b 0f10 	tst.w	fp, #16
   82d36:	f040 8438 	bne.w	835aa <_svfprintf_r+0x1036>
   82d3a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82d3e:	f000 8434 	beq.w	835aa <_svfprintf_r+0x1036>
   82d42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82d44:	6813      	ldr	r3, [r2, #0]
   82d46:	3204      	adds	r2, #4
   82d48:	920f      	str	r2, [sp, #60]	; 0x3c
   82d4a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   82d4e:	801a      	strh	r2, [r3, #0]
   82d50:	e437      	b.n	825c2 <_svfprintf_r+0x4e>
   82d52:	2378      	movs	r3, #120	; 0x78
   82d54:	2230      	movs	r2, #48	; 0x30
   82d56:	980f      	ldr	r0, [sp, #60]	; 0x3c
   82d58:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   82d5c:	9311      	str	r3, [sp, #68]	; 0x44
   82d5e:	1d03      	adds	r3, r0, #4
   82d60:	930f      	str	r3, [sp, #60]	; 0x3c
   82d62:	4b20      	ldr	r3, [pc, #128]	; (82de4 <_svfprintf_r+0x870>)
   82d64:	6804      	ldr	r4, [r0, #0]
   82d66:	9318      	str	r3, [sp, #96]	; 0x60
   82d68:	f04b 0b02 	orr.w	fp, fp, #2
   82d6c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   82d70:	2500      	movs	r5, #0
   82d72:	2302      	movs	r3, #2
   82d74:	e4fc      	b.n	82770 <_svfprintf_r+0x1fc>
   82d76:	9311      	str	r3, [sp, #68]	; 0x44
   82d78:	2a00      	cmp	r2, #0
   82d7a:	f43f aeef 	beq.w	82b5c <_svfprintf_r+0x5e8>
   82d7e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   82d82:	e6eb      	b.n	82b5c <_svfprintf_r+0x5e8>
   82d84:	2000      	movs	r0, #0
   82d86:	4604      	mov	r4, r0
   82d88:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82d8c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   82d90:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82d94:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   82d98:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82d9c:	2809      	cmp	r0, #9
   82d9e:	d9f5      	bls.n	82d8c <_svfprintf_r+0x818>
   82da0:	940d      	str	r4, [sp, #52]	; 0x34
   82da2:	e443      	b.n	8262c <_svfprintf_r+0xb8>
   82da4:	9311      	str	r3, [sp, #68]	; 0x44
   82da6:	2a00      	cmp	r2, #0
   82da8:	f040 864a 	bne.w	83a40 <_svfprintf_r+0x14cc>
   82dac:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82dae:	2a00      	cmp	r2, #0
   82db0:	f43f acb6 	beq.w	82720 <_svfprintf_r+0x1ac>
   82db4:	2300      	movs	r3, #0
   82db6:	2101      	movs	r1, #1
   82db8:	461f      	mov	r7, r3
   82dba:	9108      	str	r1, [sp, #32]
   82dbc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   82dc0:	f8cd b01c 	str.w	fp, [sp, #28]
   82dc4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   82dc8:	930a      	str	r3, [sp, #40]	; 0x28
   82dca:	9312      	str	r3, [sp, #72]	; 0x48
   82dcc:	910e      	str	r1, [sp, #56]	; 0x38
   82dce:	ae28      	add	r6, sp, #160	; 0xa0
   82dd0:	e4f8      	b.n	827c4 <_svfprintf_r+0x250>
   82dd2:	bf00      	nop
   82dd4:	00086e40 	.word	0x00086e40
   82dd8:	7fefffff 	.word	0x7fefffff
   82ddc:	00086e34 	.word	0x00086e34
   82de0:	00086e30 	.word	0x00086e30
   82de4:	00086e54 	.word	0x00086e54
   82de8:	aa25      	add	r2, sp, #148	; 0x94
   82dea:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82dec:	980c      	ldr	r0, [sp, #48]	; 0x30
   82dee:	f002 fc51 	bl	85694 <__ssprint_r>
   82df2:	2800      	cmp	r0, #0
   82df4:	f47f ac9b 	bne.w	8272e <_svfprintf_r+0x1ba>
   82df8:	46c8      	mov	r8, r9
   82dfa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82dfe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82e00:	e533      	b.n	8286a <_svfprintf_r+0x2f6>
   82e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82e04:	2b65      	cmp	r3, #101	; 0x65
   82e06:	f340 809a 	ble.w	82f3e <_svfprintf_r+0x9ca>
   82e0a:	a815      	add	r0, sp, #84	; 0x54
   82e0c:	c80d      	ldmia	r0, {r0, r2, r3}
   82e0e:	9914      	ldr	r1, [sp, #80]	; 0x50
   82e10:	f003 fccc 	bl	867ac <__aeabi_dcmpeq>
   82e14:	2800      	cmp	r0, #0
   82e16:	f000 8193 	beq.w	83140 <_svfprintf_r+0xbcc>
   82e1a:	2101      	movs	r1, #1
   82e1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82e1e:	4ab5      	ldr	r2, [pc, #724]	; (830f4 <_svfprintf_r+0xb80>)
   82e20:	440b      	add	r3, r1
   82e22:	440c      	add	r4, r1
   82e24:	2b07      	cmp	r3, #7
   82e26:	9427      	str	r4, [sp, #156]	; 0x9c
   82e28:	9326      	str	r3, [sp, #152]	; 0x98
   82e2a:	f8c8 1004 	str.w	r1, [r8, #4]
   82e2e:	f8c8 2000 	str.w	r2, [r8]
   82e32:	f300 83c6 	bgt.w	835c2 <_svfprintf_r+0x104e>
   82e36:	f108 0808 	add.w	r8, r8, #8
   82e3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   82e3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   82e3e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82e40:	4293      	cmp	r3, r2
   82e42:	db03      	blt.n	82e4c <_svfprintf_r+0x8d8>
   82e44:	9b07      	ldr	r3, [sp, #28]
   82e46:	07dd      	lsls	r5, r3, #31
   82e48:	f57f ad86 	bpl.w	82958 <_svfprintf_r+0x3e4>
   82e4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82e4e:	9919      	ldr	r1, [sp, #100]	; 0x64
   82e50:	3301      	adds	r3, #1
   82e52:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   82e54:	440c      	add	r4, r1
   82e56:	2b07      	cmp	r3, #7
   82e58:	f8c8 2000 	str.w	r2, [r8]
   82e5c:	f8c8 1004 	str.w	r1, [r8, #4]
   82e60:	9427      	str	r4, [sp, #156]	; 0x9c
   82e62:	9326      	str	r3, [sp, #152]	; 0x98
   82e64:	f300 83c4 	bgt.w	835f0 <_svfprintf_r+0x107c>
   82e68:	f108 0808 	add.w	r8, r8, #8
   82e6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82e6e:	1e5e      	subs	r6, r3, #1
   82e70:	2e00      	cmp	r6, #0
   82e72:	f77f ad71 	ble.w	82958 <_svfprintf_r+0x3e4>
   82e76:	2e10      	cmp	r6, #16
   82e78:	f340 8575 	ble.w	83966 <_svfprintf_r+0x13f2>
   82e7c:	4622      	mov	r2, r4
   82e7e:	2710      	movs	r7, #16
   82e80:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82e82:	4d9d      	ldr	r5, [pc, #628]	; (830f8 <_svfprintf_r+0xb84>)
   82e84:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   82e88:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   82e8a:	e005      	b.n	82e98 <_svfprintf_r+0x924>
   82e8c:	f108 0808 	add.w	r8, r8, #8
   82e90:	3e10      	subs	r6, #16
   82e92:	2e10      	cmp	r6, #16
   82e94:	f340 8225 	ble.w	832e2 <_svfprintf_r+0xd6e>
   82e98:	3301      	adds	r3, #1
   82e9a:	3210      	adds	r2, #16
   82e9c:	2b07      	cmp	r3, #7
   82e9e:	9227      	str	r2, [sp, #156]	; 0x9c
   82ea0:	9326      	str	r3, [sp, #152]	; 0x98
   82ea2:	e888 00a0 	stmia.w	r8, {r5, r7}
   82ea6:	ddf1      	ble.n	82e8c <_svfprintf_r+0x918>
   82ea8:	aa25      	add	r2, sp, #148	; 0x94
   82eaa:	4621      	mov	r1, r4
   82eac:	4658      	mov	r0, fp
   82eae:	f002 fbf1 	bl	85694 <__ssprint_r>
   82eb2:	2800      	cmp	r0, #0
   82eb4:	f47f ac3b 	bne.w	8272e <_svfprintf_r+0x1ba>
   82eb8:	46c8      	mov	r8, r9
   82eba:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   82ebc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82ebe:	e7e7      	b.n	82e90 <_svfprintf_r+0x91c>
   82ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82ec2:	9a08      	ldr	r2, [sp, #32]
   82ec4:	1a9f      	subs	r7, r3, r2
   82ec6:	2f00      	cmp	r7, #0
   82ec8:	f77f acf6 	ble.w	828b8 <_svfprintf_r+0x344>
   82ecc:	2f10      	cmp	r7, #16
   82ece:	f340 84a8 	ble.w	83822 <_svfprintf_r+0x12ae>
   82ed2:	4d89      	ldr	r5, [pc, #548]	; (830f8 <_svfprintf_r+0xb84>)
   82ed4:	4642      	mov	r2, r8
   82ed6:	4621      	mov	r1, r4
   82ed8:	46b0      	mov	r8, r6
   82eda:	f04f 0b10 	mov.w	fp, #16
   82ede:	462e      	mov	r6, r5
   82ee0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82ee2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82ee4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82ee6:	e004      	b.n	82ef2 <_svfprintf_r+0x97e>
   82ee8:	3f10      	subs	r7, #16
   82eea:	2f10      	cmp	r7, #16
   82eec:	f102 0208 	add.w	r2, r2, #8
   82ef0:	dd15      	ble.n	82f1e <_svfprintf_r+0x9aa>
   82ef2:	3301      	adds	r3, #1
   82ef4:	3110      	adds	r1, #16
   82ef6:	2b07      	cmp	r3, #7
   82ef8:	9127      	str	r1, [sp, #156]	; 0x9c
   82efa:	9326      	str	r3, [sp, #152]	; 0x98
   82efc:	e882 0840 	stmia.w	r2, {r6, fp}
   82f00:	ddf2      	ble.n	82ee8 <_svfprintf_r+0x974>
   82f02:	aa25      	add	r2, sp, #148	; 0x94
   82f04:	4629      	mov	r1, r5
   82f06:	4620      	mov	r0, r4
   82f08:	f002 fbc4 	bl	85694 <__ssprint_r>
   82f0c:	2800      	cmp	r0, #0
   82f0e:	f47f ac0e 	bne.w	8272e <_svfprintf_r+0x1ba>
   82f12:	3f10      	subs	r7, #16
   82f14:	2f10      	cmp	r7, #16
   82f16:	464a      	mov	r2, r9
   82f18:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82f1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82f1c:	dce9      	bgt.n	82ef2 <_svfprintf_r+0x97e>
   82f1e:	4635      	mov	r5, r6
   82f20:	460c      	mov	r4, r1
   82f22:	4646      	mov	r6, r8
   82f24:	4690      	mov	r8, r2
   82f26:	3301      	adds	r3, #1
   82f28:	443c      	add	r4, r7
   82f2a:	2b07      	cmp	r3, #7
   82f2c:	9427      	str	r4, [sp, #156]	; 0x9c
   82f2e:	9326      	str	r3, [sp, #152]	; 0x98
   82f30:	e888 00a0 	stmia.w	r8, {r5, r7}
   82f34:	f300 829e 	bgt.w	83474 <_svfprintf_r+0xf00>
   82f38:	f108 0808 	add.w	r8, r8, #8
   82f3c:	e4bc      	b.n	828b8 <_svfprintf_r+0x344>
   82f3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82f40:	2b01      	cmp	r3, #1
   82f42:	f340 824f 	ble.w	833e4 <_svfprintf_r+0xe70>
   82f46:	2301      	movs	r3, #1
   82f48:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82f4a:	441c      	add	r4, r3
   82f4c:	441f      	add	r7, r3
   82f4e:	2f07      	cmp	r7, #7
   82f50:	9427      	str	r4, [sp, #156]	; 0x9c
   82f52:	f8c8 6000 	str.w	r6, [r8]
   82f56:	9726      	str	r7, [sp, #152]	; 0x98
   82f58:	f8c8 3004 	str.w	r3, [r8, #4]
   82f5c:	f300 825f 	bgt.w	8341e <_svfprintf_r+0xeaa>
   82f60:	f108 0808 	add.w	r8, r8, #8
   82f64:	9a19      	ldr	r2, [sp, #100]	; 0x64
   82f66:	3701      	adds	r7, #1
   82f68:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   82f6a:	4414      	add	r4, r2
   82f6c:	2f07      	cmp	r7, #7
   82f6e:	9427      	str	r4, [sp, #156]	; 0x9c
   82f70:	9726      	str	r7, [sp, #152]	; 0x98
   82f72:	f8c8 3000 	str.w	r3, [r8]
   82f76:	f8c8 2004 	str.w	r2, [r8, #4]
   82f7a:	f300 825c 	bgt.w	83436 <_svfprintf_r+0xec2>
   82f7e:	f108 0808 	add.w	r8, r8, #8
   82f82:	a815      	add	r0, sp, #84	; 0x54
   82f84:	c80d      	ldmia	r0, {r0, r2, r3}
   82f86:	9914      	ldr	r1, [sp, #80]	; 0x50
   82f88:	f003 fc10 	bl	867ac <__aeabi_dcmpeq>
   82f8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82f8e:	2800      	cmp	r0, #0
   82f90:	f040 8141 	bne.w	83216 <_svfprintf_r+0xca2>
   82f94:	3b01      	subs	r3, #1
   82f96:	3701      	adds	r7, #1
   82f98:	3601      	adds	r6, #1
   82f9a:	441c      	add	r4, r3
   82f9c:	2f07      	cmp	r7, #7
   82f9e:	f8c8 6000 	str.w	r6, [r8]
   82fa2:	9726      	str	r7, [sp, #152]	; 0x98
   82fa4:	9427      	str	r4, [sp, #156]	; 0x9c
   82fa6:	f8c8 3004 	str.w	r3, [r8, #4]
   82faa:	f300 8166 	bgt.w	8327a <_svfprintf_r+0xd06>
   82fae:	f108 0808 	add.w	r8, r8, #8
   82fb2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   82fb4:	3701      	adds	r7, #1
   82fb6:	4414      	add	r4, r2
   82fb8:	ab21      	add	r3, sp, #132	; 0x84
   82fba:	2f07      	cmp	r7, #7
   82fbc:	9427      	str	r4, [sp, #156]	; 0x9c
   82fbe:	9726      	str	r7, [sp, #152]	; 0x98
   82fc0:	f8c8 2004 	str.w	r2, [r8, #4]
   82fc4:	f8c8 3000 	str.w	r3, [r8]
   82fc8:	f77f acc4 	ble.w	82954 <_svfprintf_r+0x3e0>
   82fcc:	aa25      	add	r2, sp, #148	; 0x94
   82fce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82fd0:	980c      	ldr	r0, [sp, #48]	; 0x30
   82fd2:	f002 fb5f 	bl	85694 <__ssprint_r>
   82fd6:	2800      	cmp	r0, #0
   82fd8:	f47f aba9 	bne.w	8272e <_svfprintf_r+0x1ba>
   82fdc:	46c8      	mov	r8, r9
   82fde:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82fe0:	e4ba      	b.n	82958 <_svfprintf_r+0x3e4>
   82fe2:	aa25      	add	r2, sp, #148	; 0x94
   82fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82fe6:	980c      	ldr	r0, [sp, #48]	; 0x30
   82fe8:	f002 fb54 	bl	85694 <__ssprint_r>
   82fec:	2800      	cmp	r0, #0
   82fee:	f43f acfd 	beq.w	829ec <_svfprintf_r+0x478>
   82ff2:	f7ff bb9c 	b.w	8272e <_svfprintf_r+0x1ba>
   82ff6:	f8dd b01c 	ldr.w	fp, [sp, #28]
   82ffa:	2b01      	cmp	r3, #1
   82ffc:	f000 817e 	beq.w	832fc <_svfprintf_r+0xd88>
   83000:	2b02      	cmp	r3, #2
   83002:	d171      	bne.n	830e8 <_svfprintf_r+0xb74>
   83004:	f8cd b01c 	str.w	fp, [sp, #28]
   83008:	2400      	movs	r4, #0
   8300a:	2500      	movs	r5, #0
   8300c:	e5d4      	b.n	82bb8 <_svfprintf_r+0x644>
   8300e:	aa25      	add	r2, sp, #148	; 0x94
   83010:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83012:	980c      	ldr	r0, [sp, #48]	; 0x30
   83014:	f002 fb3e 	bl	85694 <__ssprint_r>
   83018:	2800      	cmp	r0, #0
   8301a:	f47f ab88 	bne.w	8272e <_svfprintf_r+0x1ba>
   8301e:	46c8      	mov	r8, r9
   83020:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83022:	e486      	b.n	82932 <_svfprintf_r+0x3be>
   83024:	aa25      	add	r2, sp, #148	; 0x94
   83026:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83028:	980c      	ldr	r0, [sp, #48]	; 0x30
   8302a:	f002 fb33 	bl	85694 <__ssprint_r>
   8302e:	2800      	cmp	r0, #0
   83030:	f47f ab7d 	bne.w	8272e <_svfprintf_r+0x1ba>
   83034:	46c8      	mov	r8, r9
   83036:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83038:	e429      	b.n	8288e <_svfprintf_r+0x31a>
   8303a:	2001      	movs	r0, #1
   8303c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8303e:	4a2d      	ldr	r2, [pc, #180]	; (830f4 <_svfprintf_r+0xb80>)
   83040:	4403      	add	r3, r0
   83042:	4404      	add	r4, r0
   83044:	2b07      	cmp	r3, #7
   83046:	9427      	str	r4, [sp, #156]	; 0x9c
   83048:	9326      	str	r3, [sp, #152]	; 0x98
   8304a:	f8c8 0004 	str.w	r0, [r8, #4]
   8304e:	f8c8 2000 	str.w	r2, [r8]
   83052:	f340 82d8 	ble.w	83606 <_svfprintf_r+0x1092>
   83056:	aa25      	add	r2, sp, #148	; 0x94
   83058:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8305a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8305c:	f002 fb1a 	bl	85694 <__ssprint_r>
   83060:	2800      	cmp	r0, #0
   83062:	f47f ab64 	bne.w	8272e <_svfprintf_r+0x1ba>
   83066:	46c8      	mov	r8, r9
   83068:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8306a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8306c:	b929      	cbnz	r1, 8307a <_svfprintf_r+0xb06>
   8306e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   83070:	b91b      	cbnz	r3, 8307a <_svfprintf_r+0xb06>
   83072:	9b07      	ldr	r3, [sp, #28]
   83074:	07d8      	lsls	r0, r3, #31
   83076:	f57f ac6f 	bpl.w	82958 <_svfprintf_r+0x3e4>
   8307a:	9819      	ldr	r0, [sp, #100]	; 0x64
   8307c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8307e:	4602      	mov	r2, r0
   83080:	3301      	adds	r3, #1
   83082:	4422      	add	r2, r4
   83084:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   83086:	2b07      	cmp	r3, #7
   83088:	9227      	str	r2, [sp, #156]	; 0x9c
   8308a:	f8c8 4000 	str.w	r4, [r8]
   8308e:	f8c8 0004 	str.w	r0, [r8, #4]
   83092:	9326      	str	r3, [sp, #152]	; 0x98
   83094:	f300 8431 	bgt.w	838fa <_svfprintf_r+0x1386>
   83098:	f108 0808 	add.w	r8, r8, #8
   8309c:	2900      	cmp	r1, #0
   8309e:	f2c0 8409 	blt.w	838b4 <_svfprintf_r+0x1340>
   830a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   830a4:	3301      	adds	r3, #1
   830a6:	188c      	adds	r4, r1, r2
   830a8:	2b07      	cmp	r3, #7
   830aa:	9427      	str	r4, [sp, #156]	; 0x9c
   830ac:	9326      	str	r3, [sp, #152]	; 0x98
   830ae:	f8c8 6000 	str.w	r6, [r8]
   830b2:	f8c8 1004 	str.w	r1, [r8, #4]
   830b6:	f77f ac4d 	ble.w	82954 <_svfprintf_r+0x3e0>
   830ba:	aa25      	add	r2, sp, #148	; 0x94
   830bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   830be:	980c      	ldr	r0, [sp, #48]	; 0x30
   830c0:	f002 fae8 	bl	85694 <__ssprint_r>
   830c4:	2800      	cmp	r0, #0
   830c6:	f47f ab32 	bne.w	8272e <_svfprintf_r+0x1ba>
   830ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   830cc:	46c8      	mov	r8, r9
   830ce:	e443      	b.n	82958 <_svfprintf_r+0x3e4>
   830d0:	aa25      	add	r2, sp, #148	; 0x94
   830d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   830d4:	980c      	ldr	r0, [sp, #48]	; 0x30
   830d6:	f002 fadd 	bl	85694 <__ssprint_r>
   830da:	2800      	cmp	r0, #0
   830dc:	f47f ab27 	bne.w	8272e <_svfprintf_r+0x1ba>
   830e0:	46c8      	mov	r8, r9
   830e2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   830e4:	f7ff bbe5 	b.w	828b2 <_svfprintf_r+0x33e>
   830e8:	2400      	movs	r4, #0
   830ea:	2500      	movs	r5, #0
   830ec:	f8cd b01c 	str.w	fp, [sp, #28]
   830f0:	4649      	mov	r1, r9
   830f2:	e004      	b.n	830fe <_svfprintf_r+0xb8a>
   830f4:	00086e70 	.word	0x00086e70
   830f8:	00086e84 	.word	0x00086e84
   830fc:	4631      	mov	r1, r6
   830fe:	08e2      	lsrs	r2, r4, #3
   83100:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   83104:	08e8      	lsrs	r0, r5, #3
   83106:	f004 0307 	and.w	r3, r4, #7
   8310a:	4605      	mov	r5, r0
   8310c:	4614      	mov	r4, r2
   8310e:	3330      	adds	r3, #48	; 0x30
   83110:	ea54 0205 	orrs.w	r2, r4, r5
   83114:	f801 3c01 	strb.w	r3, [r1, #-1]
   83118:	f101 36ff 	add.w	r6, r1, #4294967295
   8311c:	d1ee      	bne.n	830fc <_svfprintf_r+0xb88>
   8311e:	9a07      	ldr	r2, [sp, #28]
   83120:	07d2      	lsls	r2, r2, #31
   83122:	f57f ad59 	bpl.w	82bd8 <_svfprintf_r+0x664>
   83126:	2b30      	cmp	r3, #48	; 0x30
   83128:	f43f ad56 	beq.w	82bd8 <_svfprintf_r+0x664>
   8312c:	2330      	movs	r3, #48	; 0x30
   8312e:	3902      	subs	r1, #2
   83130:	f806 3c01 	strb.w	r3, [r6, #-1]
   83134:	eba9 0301 	sub.w	r3, r9, r1
   83138:	930e      	str	r3, [sp, #56]	; 0x38
   8313a:	460e      	mov	r6, r1
   8313c:	f7ff bb36 	b.w	827ac <_svfprintf_r+0x238>
   83140:	991f      	ldr	r1, [sp, #124]	; 0x7c
   83142:	2900      	cmp	r1, #0
   83144:	f77f af79 	ble.w	8303a <_svfprintf_r+0xac6>
   83148:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8314a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8314c:	4293      	cmp	r3, r2
   8314e:	bfa8      	it	ge
   83150:	4613      	movge	r3, r2
   83152:	2b00      	cmp	r3, #0
   83154:	461f      	mov	r7, r3
   83156:	dd0b      	ble.n	83170 <_svfprintf_r+0xbfc>
   83158:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8315a:	443c      	add	r4, r7
   8315c:	3301      	adds	r3, #1
   8315e:	2b07      	cmp	r3, #7
   83160:	9427      	str	r4, [sp, #156]	; 0x9c
   83162:	e888 00c0 	stmia.w	r8, {r6, r7}
   83166:	9326      	str	r3, [sp, #152]	; 0x98
   83168:	f300 82fb 	bgt.w	83762 <_svfprintf_r+0x11ee>
   8316c:	f108 0808 	add.w	r8, r8, #8
   83170:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83172:	2f00      	cmp	r7, #0
   83174:	bfa8      	it	ge
   83176:	1bdb      	subge	r3, r3, r7
   83178:	2b00      	cmp	r3, #0
   8317a:	461f      	mov	r7, r3
   8317c:	f340 80d7 	ble.w	8332e <_svfprintf_r+0xdba>
   83180:	2b10      	cmp	r3, #16
   83182:	f340 8434 	ble.w	839ee <_svfprintf_r+0x147a>
   83186:	4dba      	ldr	r5, [pc, #744]	; (83470 <_svfprintf_r+0xefc>)
   83188:	4642      	mov	r2, r8
   8318a:	4621      	mov	r1, r4
   8318c:	46b0      	mov	r8, r6
   8318e:	f04f 0b10 	mov.w	fp, #16
   83192:	462e      	mov	r6, r5
   83194:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83196:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   83198:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8319a:	e004      	b.n	831a6 <_svfprintf_r+0xc32>
   8319c:	3208      	adds	r2, #8
   8319e:	3f10      	subs	r7, #16
   831a0:	2f10      	cmp	r7, #16
   831a2:	f340 80b5 	ble.w	83310 <_svfprintf_r+0xd9c>
   831a6:	3301      	adds	r3, #1
   831a8:	3110      	adds	r1, #16
   831aa:	2b07      	cmp	r3, #7
   831ac:	9127      	str	r1, [sp, #156]	; 0x9c
   831ae:	9326      	str	r3, [sp, #152]	; 0x98
   831b0:	e882 0840 	stmia.w	r2, {r6, fp}
   831b4:	ddf2      	ble.n	8319c <_svfprintf_r+0xc28>
   831b6:	aa25      	add	r2, sp, #148	; 0x94
   831b8:	4629      	mov	r1, r5
   831ba:	4620      	mov	r0, r4
   831bc:	f002 fa6a 	bl	85694 <__ssprint_r>
   831c0:	2800      	cmp	r0, #0
   831c2:	f47f aab4 	bne.w	8272e <_svfprintf_r+0x1ba>
   831c6:	464a      	mov	r2, r9
   831c8:	9927      	ldr	r1, [sp, #156]	; 0x9c
   831ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   831cc:	e7e7      	b.n	8319e <_svfprintf_r+0xc2a>
   831ce:	2d00      	cmp	r5, #0
   831d0:	bf08      	it	eq
   831d2:	2c0a      	cmpeq	r4, #10
   831d4:	f0c0 8090 	bcc.w	832f8 <_svfprintf_r+0xd84>
   831d8:	464e      	mov	r6, r9
   831da:	4620      	mov	r0, r4
   831dc:	4629      	mov	r1, r5
   831de:	220a      	movs	r2, #10
   831e0:	2300      	movs	r3, #0
   831e2:	f003 fb53 	bl	8688c <__aeabi_uldivmod>
   831e6:	3230      	adds	r2, #48	; 0x30
   831e8:	f806 2d01 	strb.w	r2, [r6, #-1]!
   831ec:	4620      	mov	r0, r4
   831ee:	4629      	mov	r1, r5
   831f0:	2300      	movs	r3, #0
   831f2:	220a      	movs	r2, #10
   831f4:	f003 fb4a 	bl	8688c <__aeabi_uldivmod>
   831f8:	4604      	mov	r4, r0
   831fa:	460d      	mov	r5, r1
   831fc:	ea54 0305 	orrs.w	r3, r4, r5
   83200:	d1eb      	bne.n	831da <_svfprintf_r+0xc66>
   83202:	eba9 0306 	sub.w	r3, r9, r6
   83206:	930e      	str	r3, [sp, #56]	; 0x38
   83208:	f7ff bad0 	b.w	827ac <_svfprintf_r+0x238>
   8320c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8320e:	464e      	mov	r6, r9
   83210:	930e      	str	r3, [sp, #56]	; 0x38
   83212:	f7ff bacb 	b.w	827ac <_svfprintf_r+0x238>
   83216:	1e5e      	subs	r6, r3, #1
   83218:	2e00      	cmp	r6, #0
   8321a:	f77f aeca 	ble.w	82fb2 <_svfprintf_r+0xa3e>
   8321e:	2e10      	cmp	r6, #16
   83220:	f340 83e3 	ble.w	839ea <_svfprintf_r+0x1476>
   83224:	4622      	mov	r2, r4
   83226:	f04f 0b10 	mov.w	fp, #16
   8322a:	4d91      	ldr	r5, [pc, #580]	; (83470 <_svfprintf_r+0xefc>)
   8322c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8322e:	e004      	b.n	8323a <_svfprintf_r+0xcc6>
   83230:	3e10      	subs	r6, #16
   83232:	2e10      	cmp	r6, #16
   83234:	f108 0808 	add.w	r8, r8, #8
   83238:	dd15      	ble.n	83266 <_svfprintf_r+0xcf2>
   8323a:	3701      	adds	r7, #1
   8323c:	3210      	adds	r2, #16
   8323e:	2f07      	cmp	r7, #7
   83240:	9227      	str	r2, [sp, #156]	; 0x9c
   83242:	9726      	str	r7, [sp, #152]	; 0x98
   83244:	e888 0820 	stmia.w	r8, {r5, fp}
   83248:	ddf2      	ble.n	83230 <_svfprintf_r+0xcbc>
   8324a:	aa25      	add	r2, sp, #148	; 0x94
   8324c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8324e:	4620      	mov	r0, r4
   83250:	f002 fa20 	bl	85694 <__ssprint_r>
   83254:	2800      	cmp	r0, #0
   83256:	f47f aa6a 	bne.w	8272e <_svfprintf_r+0x1ba>
   8325a:	3e10      	subs	r6, #16
   8325c:	2e10      	cmp	r6, #16
   8325e:	46c8      	mov	r8, r9
   83260:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83262:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83264:	dce9      	bgt.n	8323a <_svfprintf_r+0xcc6>
   83266:	4614      	mov	r4, r2
   83268:	3701      	adds	r7, #1
   8326a:	4434      	add	r4, r6
   8326c:	2f07      	cmp	r7, #7
   8326e:	9427      	str	r4, [sp, #156]	; 0x9c
   83270:	9726      	str	r7, [sp, #152]	; 0x98
   83272:	e888 0060 	stmia.w	r8, {r5, r6}
   83276:	f77f ae9a 	ble.w	82fae <_svfprintf_r+0xa3a>
   8327a:	aa25      	add	r2, sp, #148	; 0x94
   8327c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8327e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83280:	f002 fa08 	bl	85694 <__ssprint_r>
   83284:	2800      	cmp	r0, #0
   83286:	f47f aa52 	bne.w	8272e <_svfprintf_r+0x1ba>
   8328a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8328c:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8328e:	46c8      	mov	r8, r9
   83290:	e68f      	b.n	82fb2 <_svfprintf_r+0xa3e>
   83292:	3204      	adds	r2, #4
   83294:	681c      	ldr	r4, [r3, #0]
   83296:	2500      	movs	r5, #0
   83298:	2301      	movs	r3, #1
   8329a:	920f      	str	r2, [sp, #60]	; 0x3c
   8329c:	f7ff ba68 	b.w	82770 <_svfprintf_r+0x1fc>
   832a0:	681c      	ldr	r4, [r3, #0]
   832a2:	3304      	adds	r3, #4
   832a4:	930f      	str	r3, [sp, #60]	; 0x3c
   832a6:	2500      	movs	r5, #0
   832a8:	e42a      	b.n	82b00 <_svfprintf_r+0x58c>
   832aa:	681c      	ldr	r4, [r3, #0]
   832ac:	3304      	adds	r3, #4
   832ae:	17e5      	asrs	r5, r4, #31
   832b0:	4622      	mov	r2, r4
   832b2:	930f      	str	r3, [sp, #60]	; 0x3c
   832b4:	462b      	mov	r3, r5
   832b6:	2a00      	cmp	r2, #0
   832b8:	f173 0300 	sbcs.w	r3, r3, #0
   832bc:	f6bf ac68 	bge.w	82b90 <_svfprintf_r+0x61c>
   832c0:	272d      	movs	r7, #45	; 0x2d
   832c2:	4264      	negs	r4, r4
   832c4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   832c8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   832cc:	2301      	movs	r3, #1
   832ce:	f7ff ba53 	b.w	82778 <_svfprintf_r+0x204>
   832d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   832d4:	2500      	movs	r5, #0
   832d6:	460a      	mov	r2, r1
   832d8:	3204      	adds	r2, #4
   832da:	680c      	ldr	r4, [r1, #0]
   832dc:	920f      	str	r2, [sp, #60]	; 0x3c
   832de:	f7ff ba47 	b.w	82770 <_svfprintf_r+0x1fc>
   832e2:	4614      	mov	r4, r2
   832e4:	3301      	adds	r3, #1
   832e6:	4434      	add	r4, r6
   832e8:	2b07      	cmp	r3, #7
   832ea:	9427      	str	r4, [sp, #156]	; 0x9c
   832ec:	9326      	str	r3, [sp, #152]	; 0x98
   832ee:	e888 0060 	stmia.w	r8, {r5, r6}
   832f2:	f77f ab2f 	ble.w	82954 <_svfprintf_r+0x3e0>
   832f6:	e6e0      	b.n	830ba <_svfprintf_r+0xb46>
   832f8:	f8dd b01c 	ldr.w	fp, [sp, #28]
   832fc:	2301      	movs	r3, #1
   832fe:	ae42      	add	r6, sp, #264	; 0x108
   83300:	3430      	adds	r4, #48	; 0x30
   83302:	f8cd b01c 	str.w	fp, [sp, #28]
   83306:	f806 4d41 	strb.w	r4, [r6, #-65]!
   8330a:	930e      	str	r3, [sp, #56]	; 0x38
   8330c:	f7ff ba4e 	b.w	827ac <_svfprintf_r+0x238>
   83310:	4635      	mov	r5, r6
   83312:	460c      	mov	r4, r1
   83314:	4646      	mov	r6, r8
   83316:	4690      	mov	r8, r2
   83318:	3301      	adds	r3, #1
   8331a:	443c      	add	r4, r7
   8331c:	2b07      	cmp	r3, #7
   8331e:	9427      	str	r4, [sp, #156]	; 0x9c
   83320:	9326      	str	r3, [sp, #152]	; 0x98
   83322:	e888 00a0 	stmia.w	r8, {r5, r7}
   83326:	f300 8246 	bgt.w	837b6 <_svfprintf_r+0x1242>
   8332a:	f108 0808 	add.w	r8, r8, #8
   8332e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   83330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   83332:	429a      	cmp	r2, r3
   83334:	db45      	blt.n	833c2 <_svfprintf_r+0xe4e>
   83336:	9b07      	ldr	r3, [sp, #28]
   83338:	07d9      	lsls	r1, r3, #31
   8333a:	d442      	bmi.n	833c2 <_svfprintf_r+0xe4e>
   8333c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8333e:	9812      	ldr	r0, [sp, #72]	; 0x48
   83340:	1a9a      	subs	r2, r3, r2
   83342:	1a1d      	subs	r5, r3, r0
   83344:	4295      	cmp	r5, r2
   83346:	bfa8      	it	ge
   83348:	4615      	movge	r5, r2
   8334a:	2d00      	cmp	r5, #0
   8334c:	dd0e      	ble.n	8336c <_svfprintf_r+0xdf8>
   8334e:	9926      	ldr	r1, [sp, #152]	; 0x98
   83350:	4406      	add	r6, r0
   83352:	3101      	adds	r1, #1
   83354:	442c      	add	r4, r5
   83356:	2907      	cmp	r1, #7
   83358:	f8c8 6000 	str.w	r6, [r8]
   8335c:	9427      	str	r4, [sp, #156]	; 0x9c
   8335e:	f8c8 5004 	str.w	r5, [r8, #4]
   83362:	9126      	str	r1, [sp, #152]	; 0x98
   83364:	f300 8216 	bgt.w	83794 <_svfprintf_r+0x1220>
   83368:	f108 0808 	add.w	r8, r8, #8
   8336c:	2d00      	cmp	r5, #0
   8336e:	bfb4      	ite	lt
   83370:	4616      	movlt	r6, r2
   83372:	1b56      	subge	r6, r2, r5
   83374:	2e00      	cmp	r6, #0
   83376:	f77f aaef 	ble.w	82958 <_svfprintf_r+0x3e4>
   8337a:	2e10      	cmp	r6, #16
   8337c:	f340 82f3 	ble.w	83966 <_svfprintf_r+0x13f2>
   83380:	4622      	mov	r2, r4
   83382:	2710      	movs	r7, #16
   83384:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83386:	4d3a      	ldr	r5, [pc, #232]	; (83470 <_svfprintf_r+0xefc>)
   83388:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8338c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8338e:	e004      	b.n	8339a <_svfprintf_r+0xe26>
   83390:	f108 0808 	add.w	r8, r8, #8
   83394:	3e10      	subs	r6, #16
   83396:	2e10      	cmp	r6, #16
   83398:	dda3      	ble.n	832e2 <_svfprintf_r+0xd6e>
   8339a:	3301      	adds	r3, #1
   8339c:	3210      	adds	r2, #16
   8339e:	2b07      	cmp	r3, #7
   833a0:	9227      	str	r2, [sp, #156]	; 0x9c
   833a2:	9326      	str	r3, [sp, #152]	; 0x98
   833a4:	e888 00a0 	stmia.w	r8, {r5, r7}
   833a8:	ddf2      	ble.n	83390 <_svfprintf_r+0xe1c>
   833aa:	aa25      	add	r2, sp, #148	; 0x94
   833ac:	4621      	mov	r1, r4
   833ae:	4658      	mov	r0, fp
   833b0:	f002 f970 	bl	85694 <__ssprint_r>
   833b4:	2800      	cmp	r0, #0
   833b6:	f47f a9ba 	bne.w	8272e <_svfprintf_r+0x1ba>
   833ba:	46c8      	mov	r8, r9
   833bc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   833be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   833c0:	e7e8      	b.n	83394 <_svfprintf_r+0xe20>
   833c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   833c4:	9819      	ldr	r0, [sp, #100]	; 0x64
   833c6:	3301      	adds	r3, #1
   833c8:	991a      	ldr	r1, [sp, #104]	; 0x68
   833ca:	4404      	add	r4, r0
   833cc:	2b07      	cmp	r3, #7
   833ce:	9427      	str	r4, [sp, #156]	; 0x9c
   833d0:	f8c8 1000 	str.w	r1, [r8]
   833d4:	f8c8 0004 	str.w	r0, [r8, #4]
   833d8:	9326      	str	r3, [sp, #152]	; 0x98
   833da:	f300 81cf 	bgt.w	8377c <_svfprintf_r+0x1208>
   833de:	f108 0808 	add.w	r8, r8, #8
   833e2:	e7ab      	b.n	8333c <_svfprintf_r+0xdc8>
   833e4:	9b07      	ldr	r3, [sp, #28]
   833e6:	07da      	lsls	r2, r3, #31
   833e8:	f53f adad 	bmi.w	82f46 <_svfprintf_r+0x9d2>
   833ec:	2301      	movs	r3, #1
   833ee:	9f26      	ldr	r7, [sp, #152]	; 0x98
   833f0:	441c      	add	r4, r3
   833f2:	441f      	add	r7, r3
   833f4:	2f07      	cmp	r7, #7
   833f6:	9427      	str	r4, [sp, #156]	; 0x9c
   833f8:	f8c8 6000 	str.w	r6, [r8]
   833fc:	9726      	str	r7, [sp, #152]	; 0x98
   833fe:	f8c8 3004 	str.w	r3, [r8, #4]
   83402:	f77f add4 	ble.w	82fae <_svfprintf_r+0xa3a>
   83406:	aa25      	add	r2, sp, #148	; 0x94
   83408:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8340a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8340c:	f002 f942 	bl	85694 <__ssprint_r>
   83410:	2800      	cmp	r0, #0
   83412:	f47f a98c 	bne.w	8272e <_svfprintf_r+0x1ba>
   83416:	46c8      	mov	r8, r9
   83418:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8341a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8341c:	e5c9      	b.n	82fb2 <_svfprintf_r+0xa3e>
   8341e:	aa25      	add	r2, sp, #148	; 0x94
   83420:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83422:	980c      	ldr	r0, [sp, #48]	; 0x30
   83424:	f002 f936 	bl	85694 <__ssprint_r>
   83428:	2800      	cmp	r0, #0
   8342a:	f47f a980 	bne.w	8272e <_svfprintf_r+0x1ba>
   8342e:	46c8      	mov	r8, r9
   83430:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83432:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83434:	e596      	b.n	82f64 <_svfprintf_r+0x9f0>
   83436:	aa25      	add	r2, sp, #148	; 0x94
   83438:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8343a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8343c:	f002 f92a 	bl	85694 <__ssprint_r>
   83440:	2800      	cmp	r0, #0
   83442:	f47f a974 	bne.w	8272e <_svfprintf_r+0x1ba>
   83446:	46c8      	mov	r8, r9
   83448:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8344a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8344c:	e599      	b.n	82f82 <_svfprintf_r+0xa0e>
   8344e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83450:	3407      	adds	r4, #7
   83452:	f024 0407 	bic.w	r4, r4, #7
   83456:	f104 0108 	add.w	r1, r4, #8
   8345a:	e9d4 2300 	ldrd	r2, r3, [r4]
   8345e:	910f      	str	r1, [sp, #60]	; 0x3c
   83460:	4614      	mov	r4, r2
   83462:	461d      	mov	r5, r3
   83464:	f7ff bb8f 	b.w	82b86 <_svfprintf_r+0x612>
   83468:	464e      	mov	r6, r9
   8346a:	f7ff b99f 	b.w	827ac <_svfprintf_r+0x238>
   8346e:	bf00      	nop
   83470:	00086e84 	.word	0x00086e84
   83474:	aa25      	add	r2, sp, #148	; 0x94
   83476:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83478:	980c      	ldr	r0, [sp, #48]	; 0x30
   8347a:	f002 f90b 	bl	85694 <__ssprint_r>
   8347e:	2800      	cmp	r0, #0
   83480:	f47f a955 	bne.w	8272e <_svfprintf_r+0x1ba>
   83484:	46c8      	mov	r8, r9
   83486:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83488:	f7ff ba16 	b.w	828b8 <_svfprintf_r+0x344>
   8348c:	9c15      	ldr	r4, [sp, #84]	; 0x54
   8348e:	4622      	mov	r2, r4
   83490:	4620      	mov	r0, r4
   83492:	9c14      	ldr	r4, [sp, #80]	; 0x50
   83494:	4623      	mov	r3, r4
   83496:	4621      	mov	r1, r4
   83498:	f003 f9ba 	bl	86810 <__aeabi_dcmpun>
   8349c:	2800      	cmp	r0, #0
   8349e:	f040 8273 	bne.w	83988 <_svfprintf_r+0x1414>
   834a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   834a4:	3301      	adds	r3, #1
   834a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   834a8:	f023 0320 	bic.w	r3, r3, #32
   834ac:	930e      	str	r3, [sp, #56]	; 0x38
   834ae:	f000 819c 	beq.w	837ea <_svfprintf_r+0x1276>
   834b2:	2b47      	cmp	r3, #71	; 0x47
   834b4:	f000 80d6 	beq.w	83664 <_svfprintf_r+0x10f0>
   834b8:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   834bc:	9307      	str	r3, [sp, #28]
   834be:	9b14      	ldr	r3, [sp, #80]	; 0x50
   834c0:	1e1f      	subs	r7, r3, #0
   834c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   834c4:	9308      	str	r3, [sp, #32]
   834c6:	bfb7      	itett	lt
   834c8:	463b      	movlt	r3, r7
   834ca:	2300      	movge	r3, #0
   834cc:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   834d0:	232d      	movlt	r3, #45	; 0x2d
   834d2:	9310      	str	r3, [sp, #64]	; 0x40
   834d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   834d6:	2b66      	cmp	r3, #102	; 0x66
   834d8:	f000 8190 	beq.w	837fc <_svfprintf_r+0x1288>
   834dc:	2b46      	cmp	r3, #70	; 0x46
   834de:	f000 80a4 	beq.w	8362a <_svfprintf_r+0x10b6>
   834e2:	2002      	movs	r0, #2
   834e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   834e6:	a923      	add	r1, sp, #140	; 0x8c
   834e8:	2b45      	cmp	r3, #69	; 0x45
   834ea:	bf0a      	itet	eq
   834ec:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   834ee:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   834f0:	1c5d      	addeq	r5, r3, #1
   834f2:	e88d 0021 	stmia.w	sp, {r0, r5}
   834f6:	9104      	str	r1, [sp, #16]
   834f8:	a820      	add	r0, sp, #128	; 0x80
   834fa:	a91f      	add	r1, sp, #124	; 0x7c
   834fc:	463b      	mov	r3, r7
   834fe:	9003      	str	r0, [sp, #12]
   83500:	9a08      	ldr	r2, [sp, #32]
   83502:	9102      	str	r1, [sp, #8]
   83504:	980c      	ldr	r0, [sp, #48]	; 0x30
   83506:	f000 fb5b 	bl	83bc0 <_dtoa_r>
   8350a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8350c:	4606      	mov	r6, r0
   8350e:	2b67      	cmp	r3, #103	; 0x67
   83510:	f040 81ba 	bne.w	83888 <_svfprintf_r+0x1314>
   83514:	f01b 0f01 	tst.w	fp, #1
   83518:	f000 8223 	beq.w	83962 <_svfprintf_r+0x13ee>
   8351c:	1974      	adds	r4, r6, r5
   8351e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   83520:	9808      	ldr	r0, [sp, #32]
   83522:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   83524:	4639      	mov	r1, r7
   83526:	f003 f941 	bl	867ac <__aeabi_dcmpeq>
   8352a:	2800      	cmp	r0, #0
   8352c:	f040 8124 	bne.w	83778 <_svfprintf_r+0x1204>
   83530:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   83532:	42a3      	cmp	r3, r4
   83534:	d206      	bcs.n	83544 <_svfprintf_r+0xfd0>
   83536:	2130      	movs	r1, #48	; 0x30
   83538:	1c5a      	adds	r2, r3, #1
   8353a:	9223      	str	r2, [sp, #140]	; 0x8c
   8353c:	7019      	strb	r1, [r3, #0]
   8353e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   83540:	429c      	cmp	r4, r3
   83542:	d8f9      	bhi.n	83538 <_svfprintf_r+0xfc4>
   83544:	1b9b      	subs	r3, r3, r6
   83546:	9313      	str	r3, [sp, #76]	; 0x4c
   83548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8354a:	2b47      	cmp	r3, #71	; 0x47
   8354c:	f000 80a2 	beq.w	83694 <_svfprintf_r+0x1120>
   83550:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83552:	2b65      	cmp	r3, #101	; 0x65
   83554:	f340 81a7 	ble.w	838a6 <_svfprintf_r+0x1332>
   83558:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8355a:	2b66      	cmp	r3, #102	; 0x66
   8355c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8355e:	9312      	str	r3, [sp, #72]	; 0x48
   83560:	f000 8171 	beq.w	83846 <_svfprintf_r+0x12d2>
   83564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   83566:	9a12      	ldr	r2, [sp, #72]	; 0x48
   83568:	4619      	mov	r1, r3
   8356a:	4291      	cmp	r1, r2
   8356c:	f300 815d 	bgt.w	8382a <_svfprintf_r+0x12b6>
   83570:	f01b 0f01 	tst.w	fp, #1
   83574:	f040 81f0 	bne.w	83958 <_svfprintf_r+0x13e4>
   83578:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8357c:	9308      	str	r3, [sp, #32]
   8357e:	2367      	movs	r3, #103	; 0x67
   83580:	920e      	str	r2, [sp, #56]	; 0x38
   83582:	9311      	str	r3, [sp, #68]	; 0x44
   83584:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83586:	2b00      	cmp	r3, #0
   83588:	d17d      	bne.n	83686 <_svfprintf_r+0x1112>
   8358a:	930a      	str	r3, [sp, #40]	; 0x28
   8358c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83590:	f7ff b914 	b.w	827bc <_svfprintf_r+0x248>
   83594:	f024 0407 	bic.w	r4, r4, #7
   83598:	6823      	ldr	r3, [r4, #0]
   8359a:	9315      	str	r3, [sp, #84]	; 0x54
   8359c:	6863      	ldr	r3, [r4, #4]
   8359e:	9314      	str	r3, [sp, #80]	; 0x50
   835a0:	f104 0308 	add.w	r3, r4, #8
   835a4:	930f      	str	r3, [sp, #60]	; 0x3c
   835a6:	f7ff bb2f 	b.w	82c08 <_svfprintf_r+0x694>
   835aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   835ac:	6813      	ldr	r3, [r2, #0]
   835ae:	3204      	adds	r2, #4
   835b0:	920f      	str	r2, [sp, #60]	; 0x3c
   835b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   835b4:	601a      	str	r2, [r3, #0]
   835b6:	f7ff b804 	b.w	825c2 <_svfprintf_r+0x4e>
   835ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
   835bc:	4daf      	ldr	r5, [pc, #700]	; (8387c <_svfprintf_r+0x1308>)
   835be:	f7ff b9ad 	b.w	8291c <_svfprintf_r+0x3a8>
   835c2:	aa25      	add	r2, sp, #148	; 0x94
   835c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   835c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   835c8:	f002 f864 	bl	85694 <__ssprint_r>
   835cc:	2800      	cmp	r0, #0
   835ce:	f47f a8ae 	bne.w	8272e <_svfprintf_r+0x1ba>
   835d2:	46c8      	mov	r8, r9
   835d4:	e431      	b.n	82e3a <_svfprintf_r+0x8c6>
   835d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   835d8:	4613      	mov	r3, r2
   835da:	3304      	adds	r3, #4
   835dc:	930f      	str	r3, [sp, #60]	; 0x3c
   835de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   835e0:	6811      	ldr	r1, [r2, #0]
   835e2:	17dd      	asrs	r5, r3, #31
   835e4:	461a      	mov	r2, r3
   835e6:	462b      	mov	r3, r5
   835e8:	e9c1 2300 	strd	r2, r3, [r1]
   835ec:	f7fe bfe9 	b.w	825c2 <_svfprintf_r+0x4e>
   835f0:	aa25      	add	r2, sp, #148	; 0x94
   835f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   835f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   835f6:	f002 f84d 	bl	85694 <__ssprint_r>
   835fa:	2800      	cmp	r0, #0
   835fc:	f47f a897 	bne.w	8272e <_svfprintf_r+0x1ba>
   83600:	46c8      	mov	r8, r9
   83602:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83604:	e432      	b.n	82e6c <_svfprintf_r+0x8f8>
   83606:	f108 0808 	add.w	r8, r8, #8
   8360a:	e52f      	b.n	8306c <_svfprintf_r+0xaf8>
   8360c:	2140      	movs	r1, #64	; 0x40
   8360e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83610:	f001 fa28 	bl	84a64 <_malloc_r>
   83614:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83616:	6010      	str	r0, [r2, #0]
   83618:	6110      	str	r0, [r2, #16]
   8361a:	2800      	cmp	r0, #0
   8361c:	f000 8214 	beq.w	83a48 <_svfprintf_r+0x14d4>
   83620:	2340      	movs	r3, #64	; 0x40
   83622:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83624:	6153      	str	r3, [r2, #20]
   83626:	f7fe bfbc 	b.w	825a2 <_svfprintf_r+0x2e>
   8362a:	2003      	movs	r0, #3
   8362c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8362e:	a923      	add	r1, sp, #140	; 0x8c
   83630:	e88d 0011 	stmia.w	sp, {r0, r4}
   83634:	9104      	str	r1, [sp, #16]
   83636:	a820      	add	r0, sp, #128	; 0x80
   83638:	a91f      	add	r1, sp, #124	; 0x7c
   8363a:	9003      	str	r0, [sp, #12]
   8363c:	9a08      	ldr	r2, [sp, #32]
   8363e:	463b      	mov	r3, r7
   83640:	9102      	str	r1, [sp, #8]
   83642:	980c      	ldr	r0, [sp, #48]	; 0x30
   83644:	f000 fabc 	bl	83bc0 <_dtoa_r>
   83648:	4625      	mov	r5, r4
   8364a:	4606      	mov	r6, r0
   8364c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8364e:	1974      	adds	r4, r6, r5
   83650:	2b46      	cmp	r3, #70	; 0x46
   83652:	f47f af64 	bne.w	8351e <_svfprintf_r+0xfaa>
   83656:	7833      	ldrb	r3, [r6, #0]
   83658:	2b30      	cmp	r3, #48	; 0x30
   8365a:	f000 8187 	beq.w	8396c <_svfprintf_r+0x13f8>
   8365e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   83660:	442c      	add	r4, r5
   83662:	e75c      	b.n	8351e <_svfprintf_r+0xfaa>
   83664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83666:	2b00      	cmp	r3, #0
   83668:	bf08      	it	eq
   8366a:	2301      	moveq	r3, #1
   8366c:	930a      	str	r3, [sp, #40]	; 0x28
   8366e:	e723      	b.n	834b8 <_svfprintf_r+0xf44>
   83670:	4630      	mov	r0, r6
   83672:	950a      	str	r5, [sp, #40]	; 0x28
   83674:	f7fe fe6c 	bl	82350 <strlen>
   83678:	940f      	str	r4, [sp, #60]	; 0x3c
   8367a:	900e      	str	r0, [sp, #56]	; 0x38
   8367c:	f8cd b01c 	str.w	fp, [sp, #28]
   83680:	4603      	mov	r3, r0
   83682:	f7ff b9e7 	b.w	82a54 <_svfprintf_r+0x4e0>
   83686:	272d      	movs	r7, #45	; 0x2d
   83688:	2300      	movs	r3, #0
   8368a:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   8368e:	930a      	str	r3, [sp, #40]	; 0x28
   83690:	f7ff b895 	b.w	827be <_svfprintf_r+0x24a>
   83694:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   83696:	461a      	mov	r2, r3
   83698:	9312      	str	r3, [sp, #72]	; 0x48
   8369a:	3303      	adds	r3, #3
   8369c:	db04      	blt.n	836a8 <_svfprintf_r+0x1134>
   8369e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   836a0:	4619      	mov	r1, r3
   836a2:	4291      	cmp	r1, r2
   836a4:	f6bf af5e 	bge.w	83564 <_svfprintf_r+0xff0>
   836a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   836aa:	3b02      	subs	r3, #2
   836ac:	9311      	str	r3, [sp, #68]	; 0x44
   836ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   836b0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   836b4:	3b01      	subs	r3, #1
   836b6:	2b00      	cmp	r3, #0
   836b8:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   836bc:	bfb4      	ite	lt
   836be:	222d      	movlt	r2, #45	; 0x2d
   836c0:	222b      	movge	r2, #43	; 0x2b
   836c2:	931f      	str	r3, [sp, #124]	; 0x7c
   836c4:	bfb8      	it	lt
   836c6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   836c8:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   836cc:	bfb8      	it	lt
   836ce:	f1c3 0301 	rsblt	r3, r3, #1
   836d2:	2b09      	cmp	r3, #9
   836d4:	f340 811f 	ble.w	83916 <_svfprintf_r+0x13a2>
   836d8:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   836dc:	4601      	mov	r1, r0
   836de:	4c68      	ldr	r4, [pc, #416]	; (83880 <_svfprintf_r+0x130c>)
   836e0:	e000      	b.n	836e4 <_svfprintf_r+0x1170>
   836e2:	4611      	mov	r1, r2
   836e4:	fb84 5203 	smull	r5, r2, r4, r3
   836e8:	17dd      	asrs	r5, r3, #31
   836ea:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   836ee:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   836f2:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   836f6:	3230      	adds	r2, #48	; 0x30
   836f8:	2d09      	cmp	r5, #9
   836fa:	f801 2c01 	strb.w	r2, [r1, #-1]
   836fe:	462b      	mov	r3, r5
   83700:	f101 32ff 	add.w	r2, r1, #4294967295
   83704:	dced      	bgt.n	836e2 <_svfprintf_r+0x116e>
   83706:	3330      	adds	r3, #48	; 0x30
   83708:	3902      	subs	r1, #2
   8370a:	b2dc      	uxtb	r4, r3
   8370c:	4288      	cmp	r0, r1
   8370e:	f802 4c01 	strb.w	r4, [r2, #-1]
   83712:	f240 8192 	bls.w	83a3a <_svfprintf_r+0x14c6>
   83716:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   8371a:	4613      	mov	r3, r2
   8371c:	e001      	b.n	83722 <_svfprintf_r+0x11ae>
   8371e:	f813 4b01 	ldrb.w	r4, [r3], #1
   83722:	4283      	cmp	r3, r0
   83724:	f801 4b01 	strb.w	r4, [r1], #1
   83728:	d1f9      	bne.n	8371e <_svfprintf_r+0x11aa>
   8372a:	3301      	adds	r3, #1
   8372c:	1a9b      	subs	r3, r3, r2
   8372e:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   83732:	4413      	add	r3, r2
   83734:	aa21      	add	r2, sp, #132	; 0x84
   83736:	1a9b      	subs	r3, r3, r2
   83738:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8373a:	931b      	str	r3, [sp, #108]	; 0x6c
   8373c:	2a01      	cmp	r2, #1
   8373e:	4413      	add	r3, r2
   83740:	930e      	str	r3, [sp, #56]	; 0x38
   83742:	f340 8148 	ble.w	839d6 <_svfprintf_r+0x1462>
   83746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83748:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8374a:	4413      	add	r3, r2
   8374c:	930e      	str	r3, [sp, #56]	; 0x38
   8374e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   83752:	9308      	str	r3, [sp, #32]
   83754:	2300      	movs	r3, #0
   83756:	9312      	str	r3, [sp, #72]	; 0x48
   83758:	e714      	b.n	83584 <_svfprintf_r+0x1010>
   8375a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8375c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8375e:	f7ff b876 	b.w	8284e <_svfprintf_r+0x2da>
   83762:	aa25      	add	r2, sp, #148	; 0x94
   83764:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83766:	980c      	ldr	r0, [sp, #48]	; 0x30
   83768:	f001 ff94 	bl	85694 <__ssprint_r>
   8376c:	2800      	cmp	r0, #0
   8376e:	f47e afde 	bne.w	8272e <_svfprintf_r+0x1ba>
   83772:	46c8      	mov	r8, r9
   83774:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83776:	e4fb      	b.n	83170 <_svfprintf_r+0xbfc>
   83778:	4623      	mov	r3, r4
   8377a:	e6e3      	b.n	83544 <_svfprintf_r+0xfd0>
   8377c:	aa25      	add	r2, sp, #148	; 0x94
   8377e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83780:	980c      	ldr	r0, [sp, #48]	; 0x30
   83782:	f001 ff87 	bl	85694 <__ssprint_r>
   83786:	2800      	cmp	r0, #0
   83788:	f47e afd1 	bne.w	8272e <_svfprintf_r+0x1ba>
   8378c:	46c8      	mov	r8, r9
   8378e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   83790:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83792:	e5d3      	b.n	8333c <_svfprintf_r+0xdc8>
   83794:	aa25      	add	r2, sp, #148	; 0x94
   83796:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83798:	980c      	ldr	r0, [sp, #48]	; 0x30
   8379a:	f001 ff7b 	bl	85694 <__ssprint_r>
   8379e:	2800      	cmp	r0, #0
   837a0:	f47e afc5 	bne.w	8272e <_svfprintf_r+0x1ba>
   837a4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   837a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   837a8:	46c8      	mov	r8, r9
   837aa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   837ac:	1a9a      	subs	r2, r3, r2
   837ae:	e5dd      	b.n	8336c <_svfprintf_r+0xdf8>
   837b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   837b2:	f7ff b8fe 	b.w	829b2 <_svfprintf_r+0x43e>
   837b6:	aa25      	add	r2, sp, #148	; 0x94
   837b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   837ba:	980c      	ldr	r0, [sp, #48]	; 0x30
   837bc:	f001 ff6a 	bl	85694 <__ssprint_r>
   837c0:	2800      	cmp	r0, #0
   837c2:	f47e afb4 	bne.w	8272e <_svfprintf_r+0x1ba>
   837c6:	46c8      	mov	r8, r9
   837c8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   837ca:	e5b0      	b.n	8332e <_svfprintf_r+0xdba>
   837cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   837ce:	4637      	mov	r7, r6
   837d0:	2b06      	cmp	r3, #6
   837d2:	bf28      	it	cs
   837d4:	2306      	movcs	r3, #6
   837d6:	960a      	str	r6, [sp, #40]	; 0x28
   837d8:	9612      	str	r6, [sp, #72]	; 0x48
   837da:	9308      	str	r3, [sp, #32]
   837dc:	940f      	str	r4, [sp, #60]	; 0x3c
   837de:	f8cd b01c 	str.w	fp, [sp, #28]
   837e2:	930e      	str	r3, [sp, #56]	; 0x38
   837e4:	4e27      	ldr	r6, [pc, #156]	; (83884 <_svfprintf_r+0x1310>)
   837e6:	f7fe bfe9 	b.w	827bc <_svfprintf_r+0x248>
   837ea:	2306      	movs	r3, #6
   837ec:	930a      	str	r3, [sp, #40]	; 0x28
   837ee:	e663      	b.n	834b8 <_svfprintf_r+0xf44>
   837f0:	232d      	movs	r3, #45	; 0x2d
   837f2:	461f      	mov	r7, r3
   837f4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   837f8:	f7ff ba28 	b.w	82c4c <_svfprintf_r+0x6d8>
   837fc:	2003      	movs	r0, #3
   837fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   83800:	a923      	add	r1, sp, #140	; 0x8c
   83802:	e88d 0011 	stmia.w	sp, {r0, r4}
   83806:	9104      	str	r1, [sp, #16]
   83808:	a820      	add	r0, sp, #128	; 0x80
   8380a:	a91f      	add	r1, sp, #124	; 0x7c
   8380c:	9003      	str	r0, [sp, #12]
   8380e:	9a08      	ldr	r2, [sp, #32]
   83810:	463b      	mov	r3, r7
   83812:	9102      	str	r1, [sp, #8]
   83814:	980c      	ldr	r0, [sp, #48]	; 0x30
   83816:	f000 f9d3 	bl	83bc0 <_dtoa_r>
   8381a:	4625      	mov	r5, r4
   8381c:	4606      	mov	r6, r0
   8381e:	1904      	adds	r4, r0, r4
   83820:	e719      	b.n	83656 <_svfprintf_r+0x10e2>
   83822:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83824:	4d15      	ldr	r5, [pc, #84]	; (8387c <_svfprintf_r+0x1308>)
   83826:	f7ff bb7e 	b.w	82f26 <_svfprintf_r+0x9b2>
   8382a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8382c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8382e:	4413      	add	r3, r2
   83830:	9a12      	ldr	r2, [sp, #72]	; 0x48
   83832:	930e      	str	r3, [sp, #56]	; 0x38
   83834:	2a00      	cmp	r2, #0
   83836:	f340 80c7 	ble.w	839c8 <_svfprintf_r+0x1454>
   8383a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8383e:	9308      	str	r3, [sp, #32]
   83840:	2367      	movs	r3, #103	; 0x67
   83842:	9311      	str	r3, [sp, #68]	; 0x44
   83844:	e69e      	b.n	83584 <_svfprintf_r+0x1010>
   83846:	2b00      	cmp	r3, #0
   83848:	f340 80e1 	ble.w	83a0e <_svfprintf_r+0x149a>
   8384c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8384e:	2a00      	cmp	r2, #0
   83850:	f040 80b0 	bne.w	839b4 <_svfprintf_r+0x1440>
   83854:	f01b 0f01 	tst.w	fp, #1
   83858:	f040 80ac 	bne.w	839b4 <_svfprintf_r+0x1440>
   8385c:	9308      	str	r3, [sp, #32]
   8385e:	930e      	str	r3, [sp, #56]	; 0x38
   83860:	e690      	b.n	83584 <_svfprintf_r+0x1010>
   83862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83864:	940f      	str	r4, [sp, #60]	; 0x3c
   83866:	9308      	str	r3, [sp, #32]
   83868:	930e      	str	r3, [sp, #56]	; 0x38
   8386a:	900a      	str	r0, [sp, #40]	; 0x28
   8386c:	f8cd b01c 	str.w	fp, [sp, #28]
   83870:	9012      	str	r0, [sp, #72]	; 0x48
   83872:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83876:	f7fe bfa1 	b.w	827bc <_svfprintf_r+0x248>
   8387a:	bf00      	nop
   8387c:	00086e84 	.word	0x00086e84
   83880:	66666667 	.word	0x66666667
   83884:	00086e68 	.word	0x00086e68
   83888:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8388a:	2b47      	cmp	r3, #71	; 0x47
   8388c:	f47f ae46 	bne.w	8351c <_svfprintf_r+0xfa8>
   83890:	f01b 0f01 	tst.w	fp, #1
   83894:	f47f aeda 	bne.w	8364c <_svfprintf_r+0x10d8>
   83898:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8389a:	1b9b      	subs	r3, r3, r6
   8389c:	9313      	str	r3, [sp, #76]	; 0x4c
   8389e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   838a0:	2b47      	cmp	r3, #71	; 0x47
   838a2:	f43f aef7 	beq.w	83694 <_svfprintf_r+0x1120>
   838a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   838a8:	9312      	str	r3, [sp, #72]	; 0x48
   838aa:	e700      	b.n	836ae <_svfprintf_r+0x113a>
   838ac:	2000      	movs	r0, #0
   838ae:	900a      	str	r0, [sp, #40]	; 0x28
   838b0:	f7fe bebc 	b.w	8262c <_svfprintf_r+0xb8>
   838b4:	424f      	negs	r7, r1
   838b6:	3110      	adds	r1, #16
   838b8:	da35      	bge.n	83926 <_svfprintf_r+0x13b2>
   838ba:	2410      	movs	r4, #16
   838bc:	4d6a      	ldr	r5, [pc, #424]	; (83a68 <_svfprintf_r+0x14f4>)
   838be:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   838c2:	e004      	b.n	838ce <_svfprintf_r+0x135a>
   838c4:	f108 0808 	add.w	r8, r8, #8
   838c8:	3f10      	subs	r7, #16
   838ca:	2f10      	cmp	r7, #16
   838cc:	dd2c      	ble.n	83928 <_svfprintf_r+0x13b4>
   838ce:	3301      	adds	r3, #1
   838d0:	3210      	adds	r2, #16
   838d2:	2b07      	cmp	r3, #7
   838d4:	9227      	str	r2, [sp, #156]	; 0x9c
   838d6:	9326      	str	r3, [sp, #152]	; 0x98
   838d8:	f8c8 5000 	str.w	r5, [r8]
   838dc:	f8c8 4004 	str.w	r4, [r8, #4]
   838e0:	ddf0      	ble.n	838c4 <_svfprintf_r+0x1350>
   838e2:	aa25      	add	r2, sp, #148	; 0x94
   838e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   838e6:	4658      	mov	r0, fp
   838e8:	f001 fed4 	bl	85694 <__ssprint_r>
   838ec:	2800      	cmp	r0, #0
   838ee:	f47e af1e 	bne.w	8272e <_svfprintf_r+0x1ba>
   838f2:	46c8      	mov	r8, r9
   838f4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   838f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   838f8:	e7e6      	b.n	838c8 <_svfprintf_r+0x1354>
   838fa:	aa25      	add	r2, sp, #148	; 0x94
   838fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   838fe:	980c      	ldr	r0, [sp, #48]	; 0x30
   83900:	f001 fec8 	bl	85694 <__ssprint_r>
   83904:	2800      	cmp	r0, #0
   83906:	f47e af12 	bne.w	8272e <_svfprintf_r+0x1ba>
   8390a:	46c8      	mov	r8, r9
   8390c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8390e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83910:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83912:	f7ff bbc3 	b.w	8309c <_svfprintf_r+0xb28>
   83916:	2230      	movs	r2, #48	; 0x30
   83918:	4413      	add	r3, r2
   8391a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   8391e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   83922:	ab22      	add	r3, sp, #136	; 0x88
   83924:	e706      	b.n	83734 <_svfprintf_r+0x11c0>
   83926:	4d50      	ldr	r5, [pc, #320]	; (83a68 <_svfprintf_r+0x14f4>)
   83928:	3301      	adds	r3, #1
   8392a:	443a      	add	r2, r7
   8392c:	2b07      	cmp	r3, #7
   8392e:	e888 00a0 	stmia.w	r8, {r5, r7}
   83932:	9227      	str	r2, [sp, #156]	; 0x9c
   83934:	9326      	str	r3, [sp, #152]	; 0x98
   83936:	f108 0808 	add.w	r8, r8, #8
   8393a:	f77f abb2 	ble.w	830a2 <_svfprintf_r+0xb2e>
   8393e:	aa25      	add	r2, sp, #148	; 0x94
   83940:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83942:	980c      	ldr	r0, [sp, #48]	; 0x30
   83944:	f001 fea6 	bl	85694 <__ssprint_r>
   83948:	2800      	cmp	r0, #0
   8394a:	f47e aef0 	bne.w	8272e <_svfprintf_r+0x1ba>
   8394e:	46c8      	mov	r8, r9
   83950:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83952:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83954:	f7ff bba5 	b.w	830a2 <_svfprintf_r+0xb2e>
   83958:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8395a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8395c:	4413      	add	r3, r2
   8395e:	930e      	str	r3, [sp, #56]	; 0x38
   83960:	e76b      	b.n	8383a <_svfprintf_r+0x12c6>
   83962:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   83964:	e5ee      	b.n	83544 <_svfprintf_r+0xfd0>
   83966:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83968:	4d3f      	ldr	r5, [pc, #252]	; (83a68 <_svfprintf_r+0x14f4>)
   8396a:	e4bb      	b.n	832e4 <_svfprintf_r+0xd70>
   8396c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8396e:	9808      	ldr	r0, [sp, #32]
   83970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   83972:	4639      	mov	r1, r7
   83974:	f002 ff1a 	bl	867ac <__aeabi_dcmpeq>
   83978:	2800      	cmp	r0, #0
   8397a:	f47f ae70 	bne.w	8365e <_svfprintf_r+0x10ea>
   8397e:	f1c5 0501 	rsb	r5, r5, #1
   83982:	951f      	str	r5, [sp, #124]	; 0x7c
   83984:	442c      	add	r4, r5
   83986:	e5ca      	b.n	8351e <_svfprintf_r+0xfaa>
   83988:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8398a:	4e38      	ldr	r6, [pc, #224]	; (83a6c <_svfprintf_r+0x14f8>)
   8398c:	2b00      	cmp	r3, #0
   8398e:	bfbe      	ittt	lt
   83990:	232d      	movlt	r3, #45	; 0x2d
   83992:	461f      	movlt	r7, r3
   83994:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   83998:	f04f 0303 	mov.w	r3, #3
   8399c:	461a      	mov	r2, r3
   8399e:	9308      	str	r3, [sp, #32]
   839a0:	f04f 0300 	mov.w	r3, #0
   839a4:	bfa8      	it	ge
   839a6:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   839aa:	4619      	mov	r1, r3
   839ac:	930a      	str	r3, [sp, #40]	; 0x28
   839ae:	4b30      	ldr	r3, [pc, #192]	; (83a70 <_svfprintf_r+0x14fc>)
   839b0:	f7ff b954 	b.w	82c5c <_svfprintf_r+0x6e8>
   839b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   839b6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   839b8:	4413      	add	r3, r2
   839ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   839bc:	441a      	add	r2, r3
   839be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   839c2:	920e      	str	r2, [sp, #56]	; 0x38
   839c4:	9308      	str	r3, [sp, #32]
   839c6:	e5dd      	b.n	83584 <_svfprintf_r+0x1010>
   839c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   839ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   839cc:	f1c3 0301 	rsb	r3, r3, #1
   839d0:	441a      	add	r2, r3
   839d2:	4613      	mov	r3, r2
   839d4:	e7c3      	b.n	8395e <_svfprintf_r+0x13ea>
   839d6:	f01b 0301 	ands.w	r3, fp, #1
   839da:	9312      	str	r3, [sp, #72]	; 0x48
   839dc:	f47f aeb3 	bne.w	83746 <_svfprintf_r+0x11d2>
   839e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   839e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   839e6:	9308      	str	r3, [sp, #32]
   839e8:	e5cc      	b.n	83584 <_svfprintf_r+0x1010>
   839ea:	4d1f      	ldr	r5, [pc, #124]	; (83a68 <_svfprintf_r+0x14f4>)
   839ec:	e43c      	b.n	83268 <_svfprintf_r+0xcf4>
   839ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
   839f0:	4d1d      	ldr	r5, [pc, #116]	; (83a68 <_svfprintf_r+0x14f4>)
   839f2:	e491      	b.n	83318 <_svfprintf_r+0xda4>
   839f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   839f6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   839fa:	6828      	ldr	r0, [r5, #0]
   839fc:	46a2      	mov	sl, r4
   839fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   83a02:	900a      	str	r0, [sp, #40]	; 0x28
   83a04:	4628      	mov	r0, r5
   83a06:	3004      	adds	r0, #4
   83a08:	900f      	str	r0, [sp, #60]	; 0x3c
   83a0a:	f7fe be0d 	b.w	82628 <_svfprintf_r+0xb4>
   83a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83a10:	b913      	cbnz	r3, 83a18 <_svfprintf_r+0x14a4>
   83a12:	f01b 0f01 	tst.w	fp, #1
   83a16:	d002      	beq.n	83a1e <_svfprintf_r+0x14aa>
   83a18:	9b19      	ldr	r3, [sp, #100]	; 0x64
   83a1a:	3301      	adds	r3, #1
   83a1c:	e7cd      	b.n	839ba <_svfprintf_r+0x1446>
   83a1e:	2301      	movs	r3, #1
   83a20:	e71c      	b.n	8385c <_svfprintf_r+0x12e8>
   83a22:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83a26:	f7ff b980 	b.w	82d2a <_svfprintf_r+0x7b6>
   83a2a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83a2e:	f7ff b93a 	b.w	82ca6 <_svfprintf_r+0x732>
   83a32:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83a36:	f7ff b84f 	b.w	82ad8 <_svfprintf_r+0x564>
   83a3a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   83a3e:	e679      	b.n	83734 <_svfprintf_r+0x11c0>
   83a40:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83a44:	f7ff b9b2 	b.w	82dac <_svfprintf_r+0x838>
   83a48:	f04f 32ff 	mov.w	r2, #4294967295
   83a4c:	230c      	movs	r3, #12
   83a4e:	9209      	str	r2, [sp, #36]	; 0x24
   83a50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83a52:	6013      	str	r3, [r2, #0]
   83a54:	f7fe be74 	b.w	82740 <_svfprintf_r+0x1cc>
   83a58:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83a5c:	f7ff b8c4 	b.w	82be8 <_svfprintf_r+0x674>
   83a60:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83a64:	f7ff b878 	b.w	82b58 <_svfprintf_r+0x5e4>
   83a68:	00086e84 	.word	0x00086e84
   83a6c:	00086e3c 	.word	0x00086e3c
   83a70:	00086e38 	.word	0x00086e38

00083a74 <register_fini>:
   83a74:	4b02      	ldr	r3, [pc, #8]	; (83a80 <register_fini+0xc>)
   83a76:	b113      	cbz	r3, 83a7e <register_fini+0xa>
   83a78:	4802      	ldr	r0, [pc, #8]	; (83a84 <register_fini+0x10>)
   83a7a:	f000 b805 	b.w	83a88 <atexit>
   83a7e:	4770      	bx	lr
   83a80:	00000000 	.word	0x00000000
   83a84:	00084a05 	.word	0x00084a05

00083a88 <atexit>:
   83a88:	2300      	movs	r3, #0
   83a8a:	4601      	mov	r1, r0
   83a8c:	461a      	mov	r2, r3
   83a8e:	4618      	mov	r0, r3
   83a90:	f001 be8a 	b.w	857a8 <__register_exitproc>

00083a94 <quorem>:
   83a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83a98:	6903      	ldr	r3, [r0, #16]
   83a9a:	690f      	ldr	r7, [r1, #16]
   83a9c:	b083      	sub	sp, #12
   83a9e:	429f      	cmp	r7, r3
   83aa0:	f300 8088 	bgt.w	83bb4 <quorem+0x120>
   83aa4:	3f01      	subs	r7, #1
   83aa6:	f101 0614 	add.w	r6, r1, #20
   83aaa:	f100 0a14 	add.w	sl, r0, #20
   83aae:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   83ab2:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   83ab6:	3301      	adds	r3, #1
   83ab8:	fbb2 f8f3 	udiv	r8, r2, r3
   83abc:	00bb      	lsls	r3, r7, #2
   83abe:	9300      	str	r3, [sp, #0]
   83ac0:	eb06 0903 	add.w	r9, r6, r3
   83ac4:	4453      	add	r3, sl
   83ac6:	9301      	str	r3, [sp, #4]
   83ac8:	f1b8 0f00 	cmp.w	r8, #0
   83acc:	d03b      	beq.n	83b46 <quorem+0xb2>
   83ace:	2300      	movs	r3, #0
   83ad0:	46b4      	mov	ip, r6
   83ad2:	461c      	mov	r4, r3
   83ad4:	46d6      	mov	lr, sl
   83ad6:	f85c 2b04 	ldr.w	r2, [ip], #4
   83ada:	f8de 5000 	ldr.w	r5, [lr]
   83ade:	fa1f fb82 	uxth.w	fp, r2
   83ae2:	fb08 330b 	mla	r3, r8, fp, r3
   83ae6:	0c12      	lsrs	r2, r2, #16
   83ae8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   83aec:	fb08 bb02 	mla	fp, r8, r2, fp
   83af0:	b29a      	uxth	r2, r3
   83af2:	1aa2      	subs	r2, r4, r2
   83af4:	b2ab      	uxth	r3, r5
   83af6:	fa1f f48b 	uxth.w	r4, fp
   83afa:	441a      	add	r2, r3
   83afc:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   83b00:	eb04 4422 	add.w	r4, r4, r2, asr #16
   83b04:	b292      	uxth	r2, r2
   83b06:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   83b0a:	45e1      	cmp	r9, ip
   83b0c:	f84e 2b04 	str.w	r2, [lr], #4
   83b10:	ea4f 4424 	mov.w	r4, r4, asr #16
   83b14:	ea4f 431b 	mov.w	r3, fp, lsr #16
   83b18:	d2dd      	bcs.n	83ad6 <quorem+0x42>
   83b1a:	9b00      	ldr	r3, [sp, #0]
   83b1c:	f85a 3003 	ldr.w	r3, [sl, r3]
   83b20:	b98b      	cbnz	r3, 83b46 <quorem+0xb2>
   83b22:	9c01      	ldr	r4, [sp, #4]
   83b24:	1f23      	subs	r3, r4, #4
   83b26:	459a      	cmp	sl, r3
   83b28:	d20c      	bcs.n	83b44 <quorem+0xb0>
   83b2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83b2e:	b94b      	cbnz	r3, 83b44 <quorem+0xb0>
   83b30:	f1a4 0308 	sub.w	r3, r4, #8
   83b34:	e002      	b.n	83b3c <quorem+0xa8>
   83b36:	681a      	ldr	r2, [r3, #0]
   83b38:	3b04      	subs	r3, #4
   83b3a:	b91a      	cbnz	r2, 83b44 <quorem+0xb0>
   83b3c:	459a      	cmp	sl, r3
   83b3e:	f107 37ff 	add.w	r7, r7, #4294967295
   83b42:	d3f8      	bcc.n	83b36 <quorem+0xa2>
   83b44:	6107      	str	r7, [r0, #16]
   83b46:	4604      	mov	r4, r0
   83b48:	f001 fc94 	bl	85474 <__mcmp>
   83b4c:	2800      	cmp	r0, #0
   83b4e:	db2d      	blt.n	83bac <quorem+0x118>
   83b50:	4655      	mov	r5, sl
   83b52:	2300      	movs	r3, #0
   83b54:	f108 0801 	add.w	r8, r8, #1
   83b58:	f856 1b04 	ldr.w	r1, [r6], #4
   83b5c:	6828      	ldr	r0, [r5, #0]
   83b5e:	b28a      	uxth	r2, r1
   83b60:	1a9a      	subs	r2, r3, r2
   83b62:	0c0b      	lsrs	r3, r1, #16
   83b64:	b281      	uxth	r1, r0
   83b66:	440a      	add	r2, r1
   83b68:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   83b6c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   83b70:	b292      	uxth	r2, r2
   83b72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   83b76:	45b1      	cmp	r9, r6
   83b78:	f845 2b04 	str.w	r2, [r5], #4
   83b7c:	ea4f 4323 	mov.w	r3, r3, asr #16
   83b80:	d2ea      	bcs.n	83b58 <quorem+0xc4>
   83b82:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   83b86:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   83b8a:	b97a      	cbnz	r2, 83bac <quorem+0x118>
   83b8c:	1f1a      	subs	r2, r3, #4
   83b8e:	4592      	cmp	sl, r2
   83b90:	d20b      	bcs.n	83baa <quorem+0x116>
   83b92:	f853 2c04 	ldr.w	r2, [r3, #-4]
   83b96:	b942      	cbnz	r2, 83baa <quorem+0x116>
   83b98:	3b08      	subs	r3, #8
   83b9a:	e002      	b.n	83ba2 <quorem+0x10e>
   83b9c:	681a      	ldr	r2, [r3, #0]
   83b9e:	3b04      	subs	r3, #4
   83ba0:	b91a      	cbnz	r2, 83baa <quorem+0x116>
   83ba2:	459a      	cmp	sl, r3
   83ba4:	f107 37ff 	add.w	r7, r7, #4294967295
   83ba8:	d3f8      	bcc.n	83b9c <quorem+0x108>
   83baa:	6127      	str	r7, [r4, #16]
   83bac:	4640      	mov	r0, r8
   83bae:	b003      	add	sp, #12
   83bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83bb4:	2000      	movs	r0, #0
   83bb6:	b003      	add	sp, #12
   83bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83bbc:	0000      	movs	r0, r0
	...

00083bc0 <_dtoa_r>:
   83bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83bc4:	6c05      	ldr	r5, [r0, #64]	; 0x40
   83bc6:	b09b      	sub	sp, #108	; 0x6c
   83bc8:	4604      	mov	r4, r0
   83bca:	4692      	mov	sl, r2
   83bcc:	469b      	mov	fp, r3
   83bce:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   83bd0:	b14d      	cbz	r5, 83be6 <_dtoa_r+0x26>
   83bd2:	2301      	movs	r3, #1
   83bd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   83bd6:	4629      	mov	r1, r5
   83bd8:	4093      	lsls	r3, r2
   83bda:	60ab      	str	r3, [r5, #8]
   83bdc:	606a      	str	r2, [r5, #4]
   83bde:	f001 fa71 	bl	850c4 <_Bfree>
   83be2:	2300      	movs	r3, #0
   83be4:	6423      	str	r3, [r4, #64]	; 0x40
   83be6:	f1bb 0f00 	cmp.w	fp, #0
   83bea:	465d      	mov	r5, fp
   83bec:	db35      	blt.n	83c5a <_dtoa_r+0x9a>
   83bee:	2300      	movs	r3, #0
   83bf0:	6033      	str	r3, [r6, #0]
   83bf2:	4b9d      	ldr	r3, [pc, #628]	; (83e68 <_dtoa_r+0x2a8>)
   83bf4:	43ab      	bics	r3, r5
   83bf6:	d015      	beq.n	83c24 <_dtoa_r+0x64>
   83bf8:	2200      	movs	r2, #0
   83bfa:	2300      	movs	r3, #0
   83bfc:	4650      	mov	r0, sl
   83bfe:	4659      	mov	r1, fp
   83c00:	f002 fdd4 	bl	867ac <__aeabi_dcmpeq>
   83c04:	4680      	mov	r8, r0
   83c06:	2800      	cmp	r0, #0
   83c08:	d02d      	beq.n	83c66 <_dtoa_r+0xa6>
   83c0a:	2301      	movs	r3, #1
   83c0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83c0e:	6013      	str	r3, [r2, #0]
   83c10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83c12:	2b00      	cmp	r3, #0
   83c14:	f000 80bd 	beq.w	83d92 <_dtoa_r+0x1d2>
   83c18:	4894      	ldr	r0, [pc, #592]	; (83e6c <_dtoa_r+0x2ac>)
   83c1a:	6018      	str	r0, [r3, #0]
   83c1c:	3801      	subs	r0, #1
   83c1e:	b01b      	add	sp, #108	; 0x6c
   83c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83c24:	f242 730f 	movw	r3, #9999	; 0x270f
   83c28:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83c2a:	6013      	str	r3, [r2, #0]
   83c2c:	f1ba 0f00 	cmp.w	sl, #0
   83c30:	d10d      	bne.n	83c4e <_dtoa_r+0x8e>
   83c32:	f3c5 0513 	ubfx	r5, r5, #0, #20
   83c36:	b955      	cbnz	r5, 83c4e <_dtoa_r+0x8e>
   83c38:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83c3a:	488d      	ldr	r0, [pc, #564]	; (83e70 <_dtoa_r+0x2b0>)
   83c3c:	2b00      	cmp	r3, #0
   83c3e:	d0ee      	beq.n	83c1e <_dtoa_r+0x5e>
   83c40:	f100 0308 	add.w	r3, r0, #8
   83c44:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   83c46:	6013      	str	r3, [r2, #0]
   83c48:	b01b      	add	sp, #108	; 0x6c
   83c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83c4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83c50:	4888      	ldr	r0, [pc, #544]	; (83e74 <_dtoa_r+0x2b4>)
   83c52:	2b00      	cmp	r3, #0
   83c54:	d0e3      	beq.n	83c1e <_dtoa_r+0x5e>
   83c56:	1cc3      	adds	r3, r0, #3
   83c58:	e7f4      	b.n	83c44 <_dtoa_r+0x84>
   83c5a:	2301      	movs	r3, #1
   83c5c:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   83c60:	6033      	str	r3, [r6, #0]
   83c62:	46ab      	mov	fp, r5
   83c64:	e7c5      	b.n	83bf2 <_dtoa_r+0x32>
   83c66:	aa18      	add	r2, sp, #96	; 0x60
   83c68:	ab19      	add	r3, sp, #100	; 0x64
   83c6a:	9201      	str	r2, [sp, #4]
   83c6c:	9300      	str	r3, [sp, #0]
   83c6e:	4652      	mov	r2, sl
   83c70:	465b      	mov	r3, fp
   83c72:	4620      	mov	r0, r4
   83c74:	f001 fca8 	bl	855c8 <__d2b>
   83c78:	0d2b      	lsrs	r3, r5, #20
   83c7a:	4681      	mov	r9, r0
   83c7c:	d071      	beq.n	83d62 <_dtoa_r+0x1a2>
   83c7e:	4650      	mov	r0, sl
   83c80:	f3cb 0213 	ubfx	r2, fp, #0, #20
   83c84:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   83c88:	9f18      	ldr	r7, [sp, #96]	; 0x60
   83c8a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   83c8e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   83c92:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   83c96:	2200      	movs	r2, #0
   83c98:	4b77      	ldr	r3, [pc, #476]	; (83e78 <_dtoa_r+0x2b8>)
   83c9a:	f002 f96b 	bl	85f74 <__aeabi_dsub>
   83c9e:	a36c      	add	r3, pc, #432	; (adr r3, 83e50 <_dtoa_r+0x290>)
   83ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
   83ca4:	f002 fb1a 	bl	862dc <__aeabi_dmul>
   83ca8:	a36b      	add	r3, pc, #428	; (adr r3, 83e58 <_dtoa_r+0x298>)
   83caa:	e9d3 2300 	ldrd	r2, r3, [r3]
   83cae:	f002 f963 	bl	85f78 <__adddf3>
   83cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   83cb6:	4630      	mov	r0, r6
   83cb8:	f002 faaa 	bl	86210 <__aeabi_i2d>
   83cbc:	a368      	add	r3, pc, #416	; (adr r3, 83e60 <_dtoa_r+0x2a0>)
   83cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   83cc2:	f002 fb0b 	bl	862dc <__aeabi_dmul>
   83cc6:	4602      	mov	r2, r0
   83cc8:	460b      	mov	r3, r1
   83cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   83cce:	f002 f953 	bl	85f78 <__adddf3>
   83cd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   83cd6:	f002 fdb1 	bl	8683c <__aeabi_d2iz>
   83cda:	2200      	movs	r2, #0
   83cdc:	9002      	str	r0, [sp, #8]
   83cde:	2300      	movs	r3, #0
   83ce0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83ce4:	f002 fd6c 	bl	867c0 <__aeabi_dcmplt>
   83ce8:	2800      	cmp	r0, #0
   83cea:	f040 816d 	bne.w	83fc8 <_dtoa_r+0x408>
   83cee:	9d02      	ldr	r5, [sp, #8]
   83cf0:	2d16      	cmp	r5, #22
   83cf2:	f200 8157 	bhi.w	83fa4 <_dtoa_r+0x3e4>
   83cf6:	4961      	ldr	r1, [pc, #388]	; (83e7c <_dtoa_r+0x2bc>)
   83cf8:	4652      	mov	r2, sl
   83cfa:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   83cfe:	465b      	mov	r3, fp
   83d00:	e9d1 0100 	ldrd	r0, r1, [r1]
   83d04:	f002 fd7a 	bl	867fc <__aeabi_dcmpgt>
   83d08:	2800      	cmp	r0, #0
   83d0a:	f000 81be 	beq.w	8408a <_dtoa_r+0x4ca>
   83d0e:	1e6b      	subs	r3, r5, #1
   83d10:	9302      	str	r3, [sp, #8]
   83d12:	2300      	movs	r3, #0
   83d14:	930e      	str	r3, [sp, #56]	; 0x38
   83d16:	1bbf      	subs	r7, r7, r6
   83d18:	1e7b      	subs	r3, r7, #1
   83d1a:	9308      	str	r3, [sp, #32]
   83d1c:	f100 814e 	bmi.w	83fbc <_dtoa_r+0x3fc>
   83d20:	2300      	movs	r3, #0
   83d22:	930a      	str	r3, [sp, #40]	; 0x28
   83d24:	9b02      	ldr	r3, [sp, #8]
   83d26:	2b00      	cmp	r3, #0
   83d28:	f2c0 813f 	blt.w	83faa <_dtoa_r+0x3ea>
   83d2c:	9a08      	ldr	r2, [sp, #32]
   83d2e:	930d      	str	r3, [sp, #52]	; 0x34
   83d30:	4611      	mov	r1, r2
   83d32:	4419      	add	r1, r3
   83d34:	2300      	movs	r3, #0
   83d36:	9108      	str	r1, [sp, #32]
   83d38:	930c      	str	r3, [sp, #48]	; 0x30
   83d3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83d3c:	2b09      	cmp	r3, #9
   83d3e:	d82a      	bhi.n	83d96 <_dtoa_r+0x1d6>
   83d40:	2b05      	cmp	r3, #5
   83d42:	f340 8658 	ble.w	849f6 <_dtoa_r+0xe36>
   83d46:	2500      	movs	r5, #0
   83d48:	3b04      	subs	r3, #4
   83d4a:	9324      	str	r3, [sp, #144]	; 0x90
   83d4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83d4e:	3b02      	subs	r3, #2
   83d50:	2b03      	cmp	r3, #3
   83d52:	f200 863f 	bhi.w	849d4 <_dtoa_r+0xe14>
   83d56:	e8df f013 	tbh	[pc, r3, lsl #1]
   83d5a:	03ce      	.short	0x03ce
   83d5c:	03d902c3 	.word	0x03d902c3
   83d60:	045b      	.short	0x045b
   83d62:	9f18      	ldr	r7, [sp, #96]	; 0x60
   83d64:	9e19      	ldr	r6, [sp, #100]	; 0x64
   83d66:	443e      	add	r6, r7
   83d68:	f206 4332 	addw	r3, r6, #1074	; 0x432
   83d6c:	2b20      	cmp	r3, #32
   83d6e:	f340 8187 	ble.w	84080 <_dtoa_r+0x4c0>
   83d72:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   83d76:	f206 4012 	addw	r0, r6, #1042	; 0x412
   83d7a:	409d      	lsls	r5, r3
   83d7c:	fa2a f000 	lsr.w	r0, sl, r0
   83d80:	4328      	orrs	r0, r5
   83d82:	f002 fa35 	bl	861f0 <__aeabi_ui2d>
   83d86:	2301      	movs	r3, #1
   83d88:	3e01      	subs	r6, #1
   83d8a:	9314      	str	r3, [sp, #80]	; 0x50
   83d8c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   83d90:	e781      	b.n	83c96 <_dtoa_r+0xd6>
   83d92:	483b      	ldr	r0, [pc, #236]	; (83e80 <_dtoa_r+0x2c0>)
   83d94:	e743      	b.n	83c1e <_dtoa_r+0x5e>
   83d96:	2100      	movs	r1, #0
   83d98:	4620      	mov	r0, r4
   83d9a:	6461      	str	r1, [r4, #68]	; 0x44
   83d9c:	9125      	str	r1, [sp, #148]	; 0x94
   83d9e:	f001 f96b 	bl	85078 <_Balloc>
   83da2:	f04f 33ff 	mov.w	r3, #4294967295
   83da6:	9307      	str	r3, [sp, #28]
   83da8:	930f      	str	r3, [sp, #60]	; 0x3c
   83daa:	2301      	movs	r3, #1
   83dac:	9a25      	ldr	r2, [sp, #148]	; 0x94
   83dae:	9004      	str	r0, [sp, #16]
   83db0:	6420      	str	r0, [r4, #64]	; 0x40
   83db2:	9224      	str	r2, [sp, #144]	; 0x90
   83db4:	930b      	str	r3, [sp, #44]	; 0x2c
   83db6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   83db8:	2b00      	cmp	r3, #0
   83dba:	f2c0 80d3 	blt.w	83f64 <_dtoa_r+0x3a4>
   83dbe:	9a02      	ldr	r2, [sp, #8]
   83dc0:	2a0e      	cmp	r2, #14
   83dc2:	f300 80cf 	bgt.w	83f64 <_dtoa_r+0x3a4>
   83dc6:	4b2d      	ldr	r3, [pc, #180]	; (83e7c <_dtoa_r+0x2bc>)
   83dc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   83dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   83dd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   83dd4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   83dd6:	2b00      	cmp	r3, #0
   83dd8:	f2c0 83b4 	blt.w	84544 <_dtoa_r+0x984>
   83ddc:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   83de0:	4650      	mov	r0, sl
   83de2:	462a      	mov	r2, r5
   83de4:	4633      	mov	r3, r6
   83de6:	4659      	mov	r1, fp
   83de8:	f002 fba2 	bl	86530 <__aeabi_ddiv>
   83dec:	f002 fd26 	bl	8683c <__aeabi_d2iz>
   83df0:	4680      	mov	r8, r0
   83df2:	f002 fa0d 	bl	86210 <__aeabi_i2d>
   83df6:	462a      	mov	r2, r5
   83df8:	4633      	mov	r3, r6
   83dfa:	f002 fa6f 	bl	862dc <__aeabi_dmul>
   83dfe:	4602      	mov	r2, r0
   83e00:	460b      	mov	r3, r1
   83e02:	4650      	mov	r0, sl
   83e04:	4659      	mov	r1, fp
   83e06:	f002 f8b5 	bl	85f74 <__aeabi_dsub>
   83e0a:	9e07      	ldr	r6, [sp, #28]
   83e0c:	9f04      	ldr	r7, [sp, #16]
   83e0e:	f108 0530 	add.w	r5, r8, #48	; 0x30
   83e12:	2e01      	cmp	r6, #1
   83e14:	703d      	strb	r5, [r7, #0]
   83e16:	4602      	mov	r2, r0
   83e18:	460b      	mov	r3, r1
   83e1a:	f107 0501 	add.w	r5, r7, #1
   83e1e:	d064      	beq.n	83eea <_dtoa_r+0x32a>
   83e20:	2200      	movs	r2, #0
   83e22:	4b18      	ldr	r3, [pc, #96]	; (83e84 <_dtoa_r+0x2c4>)
   83e24:	f002 fa5a 	bl	862dc <__aeabi_dmul>
   83e28:	2200      	movs	r2, #0
   83e2a:	2300      	movs	r3, #0
   83e2c:	4606      	mov	r6, r0
   83e2e:	460f      	mov	r7, r1
   83e30:	f002 fcbc 	bl	867ac <__aeabi_dcmpeq>
   83e34:	2800      	cmp	r0, #0
   83e36:	f040 8082 	bne.w	83f3e <_dtoa_r+0x37e>
   83e3a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   83e3e:	f04f 0a00 	mov.w	sl, #0
   83e42:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   83e46:	f04f 0b00 	mov.w	fp, #0
   83e4a:	940b      	str	r4, [sp, #44]	; 0x2c
   83e4c:	e029      	b.n	83ea2 <_dtoa_r+0x2e2>
   83e4e:	bf00      	nop
   83e50:	636f4361 	.word	0x636f4361
   83e54:	3fd287a7 	.word	0x3fd287a7
   83e58:	8b60c8b3 	.word	0x8b60c8b3
   83e5c:	3fc68a28 	.word	0x3fc68a28
   83e60:	509f79fb 	.word	0x509f79fb
   83e64:	3fd34413 	.word	0x3fd34413
   83e68:	7ff00000 	.word	0x7ff00000
   83e6c:	00086e71 	.word	0x00086e71
   83e70:	00086e94 	.word	0x00086e94
   83e74:	00086ea0 	.word	0x00086ea0
   83e78:	3ff80000 	.word	0x3ff80000
   83e7c:	00086ee0 	.word	0x00086ee0
   83e80:	00086e70 	.word	0x00086e70
   83e84:	40240000 	.word	0x40240000
   83e88:	2200      	movs	r2, #0
   83e8a:	4b81      	ldr	r3, [pc, #516]	; (84090 <_dtoa_r+0x4d0>)
   83e8c:	f002 fa26 	bl	862dc <__aeabi_dmul>
   83e90:	4652      	mov	r2, sl
   83e92:	465b      	mov	r3, fp
   83e94:	4606      	mov	r6, r0
   83e96:	460f      	mov	r7, r1
   83e98:	f002 fc88 	bl	867ac <__aeabi_dcmpeq>
   83e9c:	2800      	cmp	r0, #0
   83e9e:	f040 83ba 	bne.w	84616 <_dtoa_r+0xa56>
   83ea2:	4642      	mov	r2, r8
   83ea4:	464b      	mov	r3, r9
   83ea6:	4630      	mov	r0, r6
   83ea8:	4639      	mov	r1, r7
   83eaa:	f002 fb41 	bl	86530 <__aeabi_ddiv>
   83eae:	f002 fcc5 	bl	8683c <__aeabi_d2iz>
   83eb2:	4604      	mov	r4, r0
   83eb4:	f002 f9ac 	bl	86210 <__aeabi_i2d>
   83eb8:	4642      	mov	r2, r8
   83eba:	464b      	mov	r3, r9
   83ebc:	f002 fa0e 	bl	862dc <__aeabi_dmul>
   83ec0:	4602      	mov	r2, r0
   83ec2:	460b      	mov	r3, r1
   83ec4:	4630      	mov	r0, r6
   83ec6:	4639      	mov	r1, r7
   83ec8:	f002 f854 	bl	85f74 <__aeabi_dsub>
   83ecc:	f104 0630 	add.w	r6, r4, #48	; 0x30
   83ed0:	f805 6b01 	strb.w	r6, [r5], #1
   83ed4:	9e04      	ldr	r6, [sp, #16]
   83ed6:	9f07      	ldr	r7, [sp, #28]
   83ed8:	1bae      	subs	r6, r5, r6
   83eda:	42be      	cmp	r6, r7
   83edc:	4602      	mov	r2, r0
   83ede:	460b      	mov	r3, r1
   83ee0:	d1d2      	bne.n	83e88 <_dtoa_r+0x2c8>
   83ee2:	46a0      	mov	r8, r4
   83ee4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   83ee8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   83eea:	4610      	mov	r0, r2
   83eec:	4619      	mov	r1, r3
   83eee:	f002 f843 	bl	85f78 <__adddf3>
   83ef2:	4606      	mov	r6, r0
   83ef4:	460f      	mov	r7, r1
   83ef6:	4602      	mov	r2, r0
   83ef8:	460b      	mov	r3, r1
   83efa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   83efe:	f002 fc5f 	bl	867c0 <__aeabi_dcmplt>
   83f02:	b948      	cbnz	r0, 83f18 <_dtoa_r+0x358>
   83f04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   83f08:	4632      	mov	r2, r6
   83f0a:	463b      	mov	r3, r7
   83f0c:	f002 fc4e 	bl	867ac <__aeabi_dcmpeq>
   83f10:	b1a8      	cbz	r0, 83f3e <_dtoa_r+0x37e>
   83f12:	f018 0f01 	tst.w	r8, #1
   83f16:	d012      	beq.n	83f3e <_dtoa_r+0x37e>
   83f18:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   83f1c:	1e6b      	subs	r3, r5, #1
   83f1e:	9a04      	ldr	r2, [sp, #16]
   83f20:	e004      	b.n	83f2c <_dtoa_r+0x36c>
   83f22:	429a      	cmp	r2, r3
   83f24:	f000 8402 	beq.w	8472c <_dtoa_r+0xb6c>
   83f28:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   83f2c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   83f30:	f103 0501 	add.w	r5, r3, #1
   83f34:	d0f5      	beq.n	83f22 <_dtoa_r+0x362>
   83f36:	f108 0801 	add.w	r8, r8, #1
   83f3a:	f883 8000 	strb.w	r8, [r3]
   83f3e:	4649      	mov	r1, r9
   83f40:	4620      	mov	r0, r4
   83f42:	f001 f8bf 	bl	850c4 <_Bfree>
   83f46:	2200      	movs	r2, #0
   83f48:	9b02      	ldr	r3, [sp, #8]
   83f4a:	702a      	strb	r2, [r5, #0]
   83f4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83f4e:	3301      	adds	r3, #1
   83f50:	6013      	str	r3, [r2, #0]
   83f52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83f54:	2b00      	cmp	r3, #0
   83f56:	f000 839f 	beq.w	84698 <_dtoa_r+0xad8>
   83f5a:	9804      	ldr	r0, [sp, #16]
   83f5c:	601d      	str	r5, [r3, #0]
   83f5e:	b01b      	add	sp, #108	; 0x6c
   83f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83f64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83f66:	2a00      	cmp	r2, #0
   83f68:	d03e      	beq.n	83fe8 <_dtoa_r+0x428>
   83f6a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   83f6c:	2a01      	cmp	r2, #1
   83f6e:	f340 8311 	ble.w	84594 <_dtoa_r+0x9d4>
   83f72:	9b07      	ldr	r3, [sp, #28]
   83f74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83f76:	1e5f      	subs	r7, r3, #1
   83f78:	42ba      	cmp	r2, r7
   83f7a:	f2c0 8390 	blt.w	8469e <_dtoa_r+0xade>
   83f7e:	1bd7      	subs	r7, r2, r7
   83f80:	9b07      	ldr	r3, [sp, #28]
   83f82:	2b00      	cmp	r3, #0
   83f84:	f2c0 848c 	blt.w	848a0 <_dtoa_r+0xce0>
   83f88:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83f8a:	9b07      	ldr	r3, [sp, #28]
   83f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83f8e:	2101      	movs	r1, #1
   83f90:	441a      	add	r2, r3
   83f92:	920a      	str	r2, [sp, #40]	; 0x28
   83f94:	9a08      	ldr	r2, [sp, #32]
   83f96:	4620      	mov	r0, r4
   83f98:	441a      	add	r2, r3
   83f9a:	9208      	str	r2, [sp, #32]
   83f9c:	f001 f92e 	bl	851fc <__i2b>
   83fa0:	4606      	mov	r6, r0
   83fa2:	e023      	b.n	83fec <_dtoa_r+0x42c>
   83fa4:	2301      	movs	r3, #1
   83fa6:	930e      	str	r3, [sp, #56]	; 0x38
   83fa8:	e6b5      	b.n	83d16 <_dtoa_r+0x156>
   83faa:	2300      	movs	r3, #0
   83fac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83fae:	930d      	str	r3, [sp, #52]	; 0x34
   83fb0:	9b02      	ldr	r3, [sp, #8]
   83fb2:	1ad2      	subs	r2, r2, r3
   83fb4:	425b      	negs	r3, r3
   83fb6:	920a      	str	r2, [sp, #40]	; 0x28
   83fb8:	930c      	str	r3, [sp, #48]	; 0x30
   83fba:	e6be      	b.n	83d3a <_dtoa_r+0x17a>
   83fbc:	f1c7 0301 	rsb	r3, r7, #1
   83fc0:	930a      	str	r3, [sp, #40]	; 0x28
   83fc2:	2300      	movs	r3, #0
   83fc4:	9308      	str	r3, [sp, #32]
   83fc6:	e6ad      	b.n	83d24 <_dtoa_r+0x164>
   83fc8:	9d02      	ldr	r5, [sp, #8]
   83fca:	4628      	mov	r0, r5
   83fcc:	f002 f920 	bl	86210 <__aeabi_i2d>
   83fd0:	4602      	mov	r2, r0
   83fd2:	460b      	mov	r3, r1
   83fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83fd8:	f002 fbe8 	bl	867ac <__aeabi_dcmpeq>
   83fdc:	2800      	cmp	r0, #0
   83fde:	f47f ae86 	bne.w	83cee <_dtoa_r+0x12e>
   83fe2:	1e6b      	subs	r3, r5, #1
   83fe4:	9302      	str	r3, [sp, #8]
   83fe6:	e682      	b.n	83cee <_dtoa_r+0x12e>
   83fe8:	ad0a      	add	r5, sp, #40	; 0x28
   83fea:	cde0      	ldmia	r5, {r5, r6, r7}
   83fec:	2d00      	cmp	r5, #0
   83fee:	dd0c      	ble.n	8400a <_dtoa_r+0x44a>
   83ff0:	9908      	ldr	r1, [sp, #32]
   83ff2:	2900      	cmp	r1, #0
   83ff4:	460b      	mov	r3, r1
   83ff6:	dd08      	ble.n	8400a <_dtoa_r+0x44a>
   83ff8:	42a9      	cmp	r1, r5
   83ffa:	bfa8      	it	ge
   83ffc:	462b      	movge	r3, r5
   83ffe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84000:	1aed      	subs	r5, r5, r3
   84002:	1ad2      	subs	r2, r2, r3
   84004:	1acb      	subs	r3, r1, r3
   84006:	920a      	str	r2, [sp, #40]	; 0x28
   84008:	9308      	str	r3, [sp, #32]
   8400a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8400c:	b1d3      	cbz	r3, 84044 <_dtoa_r+0x484>
   8400e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84010:	2b00      	cmp	r3, #0
   84012:	f000 82b8 	beq.w	84586 <_dtoa_r+0x9c6>
   84016:	2f00      	cmp	r7, #0
   84018:	dd10      	ble.n	8403c <_dtoa_r+0x47c>
   8401a:	4631      	mov	r1, r6
   8401c:	463a      	mov	r2, r7
   8401e:	4620      	mov	r0, r4
   84020:	f001 f988 	bl	85334 <__pow5mult>
   84024:	464a      	mov	r2, r9
   84026:	4601      	mov	r1, r0
   84028:	4606      	mov	r6, r0
   8402a:	4620      	mov	r0, r4
   8402c:	f001 f8f0 	bl	85210 <__multiply>
   84030:	4603      	mov	r3, r0
   84032:	4649      	mov	r1, r9
   84034:	4620      	mov	r0, r4
   84036:	4699      	mov	r9, r3
   84038:	f001 f844 	bl	850c4 <_Bfree>
   8403c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8403e:	1bda      	subs	r2, r3, r7
   84040:	f040 82a2 	bne.w	84588 <_dtoa_r+0x9c8>
   84044:	2101      	movs	r1, #1
   84046:	4620      	mov	r0, r4
   84048:	f001 f8d8 	bl	851fc <__i2b>
   8404c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8404e:	4680      	mov	r8, r0
   84050:	2b00      	cmp	r3, #0
   84052:	dd1f      	ble.n	84094 <_dtoa_r+0x4d4>
   84054:	4601      	mov	r1, r0
   84056:	461a      	mov	r2, r3
   84058:	4620      	mov	r0, r4
   8405a:	f001 f96b 	bl	85334 <__pow5mult>
   8405e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84060:	4680      	mov	r8, r0
   84062:	2b01      	cmp	r3, #1
   84064:	f340 8255 	ble.w	84512 <_dtoa_r+0x952>
   84068:	2300      	movs	r3, #0
   8406a:	930c      	str	r3, [sp, #48]	; 0x30
   8406c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   84070:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   84074:	6918      	ldr	r0, [r3, #16]
   84076:	f001 f871 	bl	8515c <__hi0bits>
   8407a:	f1c0 0020 	rsb	r0, r0, #32
   8407e:	e013      	b.n	840a8 <_dtoa_r+0x4e8>
   84080:	f1c3 0520 	rsb	r5, r3, #32
   84084:	fa0a f005 	lsl.w	r0, sl, r5
   84088:	e67b      	b.n	83d82 <_dtoa_r+0x1c2>
   8408a:	900e      	str	r0, [sp, #56]	; 0x38
   8408c:	e643      	b.n	83d16 <_dtoa_r+0x156>
   8408e:	bf00      	nop
   84090:	40240000 	.word	0x40240000
   84094:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84096:	2b01      	cmp	r3, #1
   84098:	f340 8285 	ble.w	845a6 <_dtoa_r+0x9e6>
   8409c:	2300      	movs	r3, #0
   8409e:	930c      	str	r3, [sp, #48]	; 0x30
   840a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   840a2:	2001      	movs	r0, #1
   840a4:	2b00      	cmp	r3, #0
   840a6:	d1e1      	bne.n	8406c <_dtoa_r+0x4ac>
   840a8:	9a08      	ldr	r2, [sp, #32]
   840aa:	4410      	add	r0, r2
   840ac:	f010 001f 	ands.w	r0, r0, #31
   840b0:	f000 80a1 	beq.w	841f6 <_dtoa_r+0x636>
   840b4:	f1c0 0320 	rsb	r3, r0, #32
   840b8:	2b04      	cmp	r3, #4
   840ba:	f340 8486 	ble.w	849ca <_dtoa_r+0xe0a>
   840be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   840c0:	f1c0 001c 	rsb	r0, r0, #28
   840c4:	4403      	add	r3, r0
   840c6:	930a      	str	r3, [sp, #40]	; 0x28
   840c8:	4613      	mov	r3, r2
   840ca:	4403      	add	r3, r0
   840cc:	4405      	add	r5, r0
   840ce:	9308      	str	r3, [sp, #32]
   840d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   840d2:	2b00      	cmp	r3, #0
   840d4:	dd05      	ble.n	840e2 <_dtoa_r+0x522>
   840d6:	4649      	mov	r1, r9
   840d8:	461a      	mov	r2, r3
   840da:	4620      	mov	r0, r4
   840dc:	f001 f97a 	bl	853d4 <__lshift>
   840e0:	4681      	mov	r9, r0
   840e2:	9b08      	ldr	r3, [sp, #32]
   840e4:	2b00      	cmp	r3, #0
   840e6:	dd05      	ble.n	840f4 <_dtoa_r+0x534>
   840e8:	4641      	mov	r1, r8
   840ea:	461a      	mov	r2, r3
   840ec:	4620      	mov	r0, r4
   840ee:	f001 f971 	bl	853d4 <__lshift>
   840f2:	4680      	mov	r8, r0
   840f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   840f6:	2b00      	cmp	r3, #0
   840f8:	f040 8086 	bne.w	84208 <_dtoa_r+0x648>
   840fc:	9b07      	ldr	r3, [sp, #28]
   840fe:	2b00      	cmp	r3, #0
   84100:	f340 8264 	ble.w	845cc <_dtoa_r+0xa0c>
   84104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84106:	2b00      	cmp	r3, #0
   84108:	f000 8098 	beq.w	8423c <_dtoa_r+0x67c>
   8410c:	2d00      	cmp	r5, #0
   8410e:	dd05      	ble.n	8411c <_dtoa_r+0x55c>
   84110:	4631      	mov	r1, r6
   84112:	462a      	mov	r2, r5
   84114:	4620      	mov	r0, r4
   84116:	f001 f95d 	bl	853d4 <__lshift>
   8411a:	4606      	mov	r6, r0
   8411c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8411e:	2b00      	cmp	r3, #0
   84120:	f040 8336 	bne.w	84790 <_dtoa_r+0xbd0>
   84124:	9608      	str	r6, [sp, #32]
   84126:	9b07      	ldr	r3, [sp, #28]
   84128:	9a04      	ldr	r2, [sp, #16]
   8412a:	3b01      	subs	r3, #1
   8412c:	18d3      	adds	r3, r2, r3
   8412e:	930b      	str	r3, [sp, #44]	; 0x2c
   84130:	4617      	mov	r7, r2
   84132:	f00a 0301 	and.w	r3, sl, #1
   84136:	46c2      	mov	sl, r8
   84138:	f8dd b020 	ldr.w	fp, [sp, #32]
   8413c:	930c      	str	r3, [sp, #48]	; 0x30
   8413e:	4651      	mov	r1, sl
   84140:	4648      	mov	r0, r9
   84142:	f7ff fca7 	bl	83a94 <quorem>
   84146:	4631      	mov	r1, r6
   84148:	4605      	mov	r5, r0
   8414a:	4648      	mov	r0, r9
   8414c:	f001 f992 	bl	85474 <__mcmp>
   84150:	465a      	mov	r2, fp
   84152:	9007      	str	r0, [sp, #28]
   84154:	4651      	mov	r1, sl
   84156:	4620      	mov	r0, r4
   84158:	f001 f9a8 	bl	854ac <__mdiff>
   8415c:	68c2      	ldr	r2, [r0, #12]
   8415e:	4680      	mov	r8, r0
   84160:	f105 0330 	add.w	r3, r5, #48	; 0x30
   84164:	2a00      	cmp	r2, #0
   84166:	f040 8229 	bne.w	845bc <_dtoa_r+0x9fc>
   8416a:	4601      	mov	r1, r0
   8416c:	4648      	mov	r0, r9
   8416e:	930a      	str	r3, [sp, #40]	; 0x28
   84170:	f001 f980 	bl	85474 <__mcmp>
   84174:	4641      	mov	r1, r8
   84176:	9008      	str	r0, [sp, #32]
   84178:	4620      	mov	r0, r4
   8417a:	f000 ffa3 	bl	850c4 <_Bfree>
   8417e:	9a08      	ldr	r2, [sp, #32]
   84180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84182:	b932      	cbnz	r2, 84192 <_dtoa_r+0x5d2>
   84184:	9924      	ldr	r1, [sp, #144]	; 0x90
   84186:	b921      	cbnz	r1, 84192 <_dtoa_r+0x5d2>
   84188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8418a:	2a00      	cmp	r2, #0
   8418c:	f000 83ee 	beq.w	8496c <_dtoa_r+0xdac>
   84190:	9a24      	ldr	r2, [sp, #144]	; 0x90
   84192:	9907      	ldr	r1, [sp, #28]
   84194:	2900      	cmp	r1, #0
   84196:	f2c0 829f 	blt.w	846d8 <_dtoa_r+0xb18>
   8419a:	d105      	bne.n	841a8 <_dtoa_r+0x5e8>
   8419c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8419e:	b919      	cbnz	r1, 841a8 <_dtoa_r+0x5e8>
   841a0:	990c      	ldr	r1, [sp, #48]	; 0x30
   841a2:	2900      	cmp	r1, #0
   841a4:	f000 8298 	beq.w	846d8 <_dtoa_r+0xb18>
   841a8:	2a00      	cmp	r2, #0
   841aa:	f300 8305 	bgt.w	847b8 <_dtoa_r+0xbf8>
   841ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   841b0:	f107 0801 	add.w	r8, r7, #1
   841b4:	4297      	cmp	r7, r2
   841b6:	703b      	strb	r3, [r7, #0]
   841b8:	4645      	mov	r5, r8
   841ba:	f000 830b 	beq.w	847d4 <_dtoa_r+0xc14>
   841be:	4649      	mov	r1, r9
   841c0:	2300      	movs	r3, #0
   841c2:	220a      	movs	r2, #10
   841c4:	4620      	mov	r0, r4
   841c6:	f000 ff87 	bl	850d8 <__multadd>
   841ca:	455e      	cmp	r6, fp
   841cc:	4681      	mov	r9, r0
   841ce:	4631      	mov	r1, r6
   841d0:	f04f 0300 	mov.w	r3, #0
   841d4:	f04f 020a 	mov.w	r2, #10
   841d8:	4620      	mov	r0, r4
   841da:	f000 81e9 	beq.w	845b0 <_dtoa_r+0x9f0>
   841de:	f000 ff7b 	bl	850d8 <__multadd>
   841e2:	4659      	mov	r1, fp
   841e4:	4606      	mov	r6, r0
   841e6:	2300      	movs	r3, #0
   841e8:	220a      	movs	r2, #10
   841ea:	4620      	mov	r0, r4
   841ec:	f000 ff74 	bl	850d8 <__multadd>
   841f0:	4647      	mov	r7, r8
   841f2:	4683      	mov	fp, r0
   841f4:	e7a3      	b.n	8413e <_dtoa_r+0x57e>
   841f6:	201c      	movs	r0, #28
   841f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   841fa:	4405      	add	r5, r0
   841fc:	4403      	add	r3, r0
   841fe:	930a      	str	r3, [sp, #40]	; 0x28
   84200:	9b08      	ldr	r3, [sp, #32]
   84202:	4403      	add	r3, r0
   84204:	9308      	str	r3, [sp, #32]
   84206:	e763      	b.n	840d0 <_dtoa_r+0x510>
   84208:	4641      	mov	r1, r8
   8420a:	4648      	mov	r0, r9
   8420c:	f001 f932 	bl	85474 <__mcmp>
   84210:	2800      	cmp	r0, #0
   84212:	f6bf af73 	bge.w	840fc <_dtoa_r+0x53c>
   84216:	9f02      	ldr	r7, [sp, #8]
   84218:	4649      	mov	r1, r9
   8421a:	2300      	movs	r3, #0
   8421c:	220a      	movs	r2, #10
   8421e:	4620      	mov	r0, r4
   84220:	3f01      	subs	r7, #1
   84222:	9702      	str	r7, [sp, #8]
   84224:	f000 ff58 	bl	850d8 <__multadd>
   84228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8422a:	4681      	mov	r9, r0
   8422c:	2b00      	cmp	r3, #0
   8422e:	f040 83b5 	bne.w	8499c <_dtoa_r+0xddc>
   84232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84234:	2b00      	cmp	r3, #0
   84236:	f340 83be 	ble.w	849b6 <_dtoa_r+0xdf6>
   8423a:	9307      	str	r3, [sp, #28]
   8423c:	f8dd a010 	ldr.w	sl, [sp, #16]
   84240:	9f07      	ldr	r7, [sp, #28]
   84242:	4655      	mov	r5, sl
   84244:	e006      	b.n	84254 <_dtoa_r+0x694>
   84246:	4649      	mov	r1, r9
   84248:	2300      	movs	r3, #0
   8424a:	220a      	movs	r2, #10
   8424c:	4620      	mov	r0, r4
   8424e:	f000 ff43 	bl	850d8 <__multadd>
   84252:	4681      	mov	r9, r0
   84254:	4641      	mov	r1, r8
   84256:	4648      	mov	r0, r9
   84258:	f7ff fc1c 	bl	83a94 <quorem>
   8425c:	3030      	adds	r0, #48	; 0x30
   8425e:	f805 0b01 	strb.w	r0, [r5], #1
   84262:	eba5 030a 	sub.w	r3, r5, sl
   84266:	42bb      	cmp	r3, r7
   84268:	dbed      	blt.n	84246 <_dtoa_r+0x686>
   8426a:	9b04      	ldr	r3, [sp, #16]
   8426c:	9a07      	ldr	r2, [sp, #28]
   8426e:	4682      	mov	sl, r0
   84270:	2a01      	cmp	r2, #1
   84272:	bfac      	ite	ge
   84274:	189b      	addge	r3, r3, r2
   84276:	3301      	addlt	r3, #1
   84278:	f04f 0b00 	mov.w	fp, #0
   8427c:	461d      	mov	r5, r3
   8427e:	4649      	mov	r1, r9
   84280:	2201      	movs	r2, #1
   84282:	4620      	mov	r0, r4
   84284:	f001 f8a6 	bl	853d4 <__lshift>
   84288:	4641      	mov	r1, r8
   8428a:	4681      	mov	r9, r0
   8428c:	f001 f8f2 	bl	85474 <__mcmp>
   84290:	2800      	cmp	r0, #0
   84292:	f340 823f 	ble.w	84714 <_dtoa_r+0xb54>
   84296:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   8429a:	1e6b      	subs	r3, r5, #1
   8429c:	9904      	ldr	r1, [sp, #16]
   8429e:	e004      	b.n	842aa <_dtoa_r+0x6ea>
   842a0:	428b      	cmp	r3, r1
   842a2:	f000 81ae 	beq.w	84602 <_dtoa_r+0xa42>
   842a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   842aa:	2a39      	cmp	r2, #57	; 0x39
   842ac:	f103 0501 	add.w	r5, r3, #1
   842b0:	d0f6      	beq.n	842a0 <_dtoa_r+0x6e0>
   842b2:	3201      	adds	r2, #1
   842b4:	701a      	strb	r2, [r3, #0]
   842b6:	4641      	mov	r1, r8
   842b8:	4620      	mov	r0, r4
   842ba:	f000 ff03 	bl	850c4 <_Bfree>
   842be:	2e00      	cmp	r6, #0
   842c0:	f43f ae3d 	beq.w	83f3e <_dtoa_r+0x37e>
   842c4:	f1bb 0f00 	cmp.w	fp, #0
   842c8:	d005      	beq.n	842d6 <_dtoa_r+0x716>
   842ca:	45b3      	cmp	fp, r6
   842cc:	d003      	beq.n	842d6 <_dtoa_r+0x716>
   842ce:	4659      	mov	r1, fp
   842d0:	4620      	mov	r0, r4
   842d2:	f000 fef7 	bl	850c4 <_Bfree>
   842d6:	4631      	mov	r1, r6
   842d8:	4620      	mov	r0, r4
   842da:	f000 fef3 	bl	850c4 <_Bfree>
   842de:	e62e      	b.n	83f3e <_dtoa_r+0x37e>
   842e0:	2300      	movs	r3, #0
   842e2:	930b      	str	r3, [sp, #44]	; 0x2c
   842e4:	9b02      	ldr	r3, [sp, #8]
   842e6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   842e8:	4413      	add	r3, r2
   842ea:	930f      	str	r3, [sp, #60]	; 0x3c
   842ec:	3301      	adds	r3, #1
   842ee:	2b01      	cmp	r3, #1
   842f0:	461f      	mov	r7, r3
   842f2:	461e      	mov	r6, r3
   842f4:	bfb8      	it	lt
   842f6:	2701      	movlt	r7, #1
   842f8:	9307      	str	r3, [sp, #28]
   842fa:	2100      	movs	r1, #0
   842fc:	2f17      	cmp	r7, #23
   842fe:	6461      	str	r1, [r4, #68]	; 0x44
   84300:	d90a      	bls.n	84318 <_dtoa_r+0x758>
   84302:	2201      	movs	r2, #1
   84304:	2304      	movs	r3, #4
   84306:	005b      	lsls	r3, r3, #1
   84308:	f103 0014 	add.w	r0, r3, #20
   8430c:	4287      	cmp	r7, r0
   8430e:	4611      	mov	r1, r2
   84310:	f102 0201 	add.w	r2, r2, #1
   84314:	d2f7      	bcs.n	84306 <_dtoa_r+0x746>
   84316:	6461      	str	r1, [r4, #68]	; 0x44
   84318:	4620      	mov	r0, r4
   8431a:	f000 fead 	bl	85078 <_Balloc>
   8431e:	2e0e      	cmp	r6, #14
   84320:	9004      	str	r0, [sp, #16]
   84322:	6420      	str	r0, [r4, #64]	; 0x40
   84324:	f63f ad47 	bhi.w	83db6 <_dtoa_r+0x1f6>
   84328:	2d00      	cmp	r5, #0
   8432a:	f43f ad44 	beq.w	83db6 <_dtoa_r+0x1f6>
   8432e:	9902      	ldr	r1, [sp, #8]
   84330:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   84334:	2900      	cmp	r1, #0
   84336:	f340 8203 	ble.w	84740 <_dtoa_r+0xb80>
   8433a:	4bb9      	ldr	r3, [pc, #740]	; (84620 <_dtoa_r+0xa60>)
   8433c:	f001 020f 	and.w	r2, r1, #15
   84340:	110d      	asrs	r5, r1, #4
   84342:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   84346:	06e9      	lsls	r1, r5, #27
   84348:	e9d3 6700 	ldrd	r6, r7, [r3]
   8434c:	f140 81af 	bpl.w	846ae <_dtoa_r+0xaee>
   84350:	4bb4      	ldr	r3, [pc, #720]	; (84624 <_dtoa_r+0xa64>)
   84352:	4650      	mov	r0, sl
   84354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   84358:	4659      	mov	r1, fp
   8435a:	f002 f8e9 	bl	86530 <__aeabi_ddiv>
   8435e:	f04f 0a03 	mov.w	sl, #3
   84362:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   84366:	f005 050f 	and.w	r5, r5, #15
   8436a:	b18d      	cbz	r5, 84390 <_dtoa_r+0x7d0>
   8436c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 84624 <_dtoa_r+0xa64>
   84370:	07ea      	lsls	r2, r5, #31
   84372:	d509      	bpl.n	84388 <_dtoa_r+0x7c8>
   84374:	e9d8 2300 	ldrd	r2, r3, [r8]
   84378:	4630      	mov	r0, r6
   8437a:	4639      	mov	r1, r7
   8437c:	f001 ffae 	bl	862dc <__aeabi_dmul>
   84380:	4606      	mov	r6, r0
   84382:	460f      	mov	r7, r1
   84384:	f10a 0a01 	add.w	sl, sl, #1
   84388:	106d      	asrs	r5, r5, #1
   8438a:	f108 0808 	add.w	r8, r8, #8
   8438e:	d1ef      	bne.n	84370 <_dtoa_r+0x7b0>
   84390:	463b      	mov	r3, r7
   84392:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   84396:	4632      	mov	r2, r6
   84398:	f002 f8ca 	bl	86530 <__aeabi_ddiv>
   8439c:	4607      	mov	r7, r0
   8439e:	4688      	mov	r8, r1
   843a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   843a2:	b143      	cbz	r3, 843b6 <_dtoa_r+0x7f6>
   843a4:	2200      	movs	r2, #0
   843a6:	4ba0      	ldr	r3, [pc, #640]	; (84628 <_dtoa_r+0xa68>)
   843a8:	4638      	mov	r0, r7
   843aa:	4641      	mov	r1, r8
   843ac:	f002 fa08 	bl	867c0 <__aeabi_dcmplt>
   843b0:	2800      	cmp	r0, #0
   843b2:	f040 8287 	bne.w	848c4 <_dtoa_r+0xd04>
   843b6:	4650      	mov	r0, sl
   843b8:	f001 ff2a 	bl	86210 <__aeabi_i2d>
   843bc:	463a      	mov	r2, r7
   843be:	4643      	mov	r3, r8
   843c0:	f001 ff8c 	bl	862dc <__aeabi_dmul>
   843c4:	4b99      	ldr	r3, [pc, #612]	; (8462c <_dtoa_r+0xa6c>)
   843c6:	2200      	movs	r2, #0
   843c8:	f001 fdd6 	bl	85f78 <__adddf3>
   843cc:	9b07      	ldr	r3, [sp, #28]
   843ce:	4605      	mov	r5, r0
   843d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   843d4:	2b00      	cmp	r3, #0
   843d6:	f000 813f 	beq.w	84658 <_dtoa_r+0xa98>
   843da:	9b02      	ldr	r3, [sp, #8]
   843dc:	9315      	str	r3, [sp, #84]	; 0x54
   843de:	9b07      	ldr	r3, [sp, #28]
   843e0:	9312      	str	r3, [sp, #72]	; 0x48
   843e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   843e4:	2b00      	cmp	r3, #0
   843e6:	f000 81fb 	beq.w	847e0 <_dtoa_r+0xc20>
   843ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   843ec:	4b8c      	ldr	r3, [pc, #560]	; (84620 <_dtoa_r+0xa60>)
   843ee:	2000      	movs	r0, #0
   843f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   843f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   843f8:	498d      	ldr	r1, [pc, #564]	; (84630 <_dtoa_r+0xa70>)
   843fa:	f002 f899 	bl	86530 <__aeabi_ddiv>
   843fe:	462a      	mov	r2, r5
   84400:	4633      	mov	r3, r6
   84402:	f001 fdb7 	bl	85f74 <__aeabi_dsub>
   84406:	4682      	mov	sl, r0
   84408:	468b      	mov	fp, r1
   8440a:	4638      	mov	r0, r7
   8440c:	4641      	mov	r1, r8
   8440e:	f002 fa15 	bl	8683c <__aeabi_d2iz>
   84412:	4605      	mov	r5, r0
   84414:	f001 fefc 	bl	86210 <__aeabi_i2d>
   84418:	4602      	mov	r2, r0
   8441a:	460b      	mov	r3, r1
   8441c:	4638      	mov	r0, r7
   8441e:	4641      	mov	r1, r8
   84420:	f001 fda8 	bl	85f74 <__aeabi_dsub>
   84424:	3530      	adds	r5, #48	; 0x30
   84426:	fa5f f885 	uxtb.w	r8, r5
   8442a:	9d04      	ldr	r5, [sp, #16]
   8442c:	4606      	mov	r6, r0
   8442e:	460f      	mov	r7, r1
   84430:	f885 8000 	strb.w	r8, [r5]
   84434:	4602      	mov	r2, r0
   84436:	460b      	mov	r3, r1
   84438:	4650      	mov	r0, sl
   8443a:	4659      	mov	r1, fp
   8443c:	3501      	adds	r5, #1
   8443e:	f002 f9dd 	bl	867fc <__aeabi_dcmpgt>
   84442:	2800      	cmp	r0, #0
   84444:	d154      	bne.n	844f0 <_dtoa_r+0x930>
   84446:	4632      	mov	r2, r6
   84448:	463b      	mov	r3, r7
   8444a:	2000      	movs	r0, #0
   8444c:	4976      	ldr	r1, [pc, #472]	; (84628 <_dtoa_r+0xa68>)
   8444e:	f001 fd91 	bl	85f74 <__aeabi_dsub>
   84452:	4602      	mov	r2, r0
   84454:	460b      	mov	r3, r1
   84456:	4650      	mov	r0, sl
   84458:	4659      	mov	r1, fp
   8445a:	f002 f9cf 	bl	867fc <__aeabi_dcmpgt>
   8445e:	2800      	cmp	r0, #0
   84460:	f040 8270 	bne.w	84944 <_dtoa_r+0xd84>
   84464:	9a12      	ldr	r2, [sp, #72]	; 0x48
   84466:	2a01      	cmp	r2, #1
   84468:	f000 8112 	beq.w	84690 <_dtoa_r+0xad0>
   8446c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8446e:	9a04      	ldr	r2, [sp, #16]
   84470:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   84474:	4413      	add	r3, r2
   84476:	4699      	mov	r9, r3
   84478:	e00f      	b.n	8449a <_dtoa_r+0x8da>
   8447a:	4632      	mov	r2, r6
   8447c:	463b      	mov	r3, r7
   8447e:	2000      	movs	r0, #0
   84480:	4969      	ldr	r1, [pc, #420]	; (84628 <_dtoa_r+0xa68>)
   84482:	f001 fd77 	bl	85f74 <__aeabi_dsub>
   84486:	4652      	mov	r2, sl
   84488:	465b      	mov	r3, fp
   8448a:	f002 f999 	bl	867c0 <__aeabi_dcmplt>
   8448e:	2800      	cmp	r0, #0
   84490:	f040 8256 	bne.w	84940 <_dtoa_r+0xd80>
   84494:	454d      	cmp	r5, r9
   84496:	f000 80f9 	beq.w	8468c <_dtoa_r+0xacc>
   8449a:	4650      	mov	r0, sl
   8449c:	4659      	mov	r1, fp
   8449e:	2200      	movs	r2, #0
   844a0:	4b64      	ldr	r3, [pc, #400]	; (84634 <_dtoa_r+0xa74>)
   844a2:	f001 ff1b 	bl	862dc <__aeabi_dmul>
   844a6:	2200      	movs	r2, #0
   844a8:	4b62      	ldr	r3, [pc, #392]	; (84634 <_dtoa_r+0xa74>)
   844aa:	4682      	mov	sl, r0
   844ac:	468b      	mov	fp, r1
   844ae:	4630      	mov	r0, r6
   844b0:	4639      	mov	r1, r7
   844b2:	f001 ff13 	bl	862dc <__aeabi_dmul>
   844b6:	460f      	mov	r7, r1
   844b8:	4606      	mov	r6, r0
   844ba:	f002 f9bf 	bl	8683c <__aeabi_d2iz>
   844be:	4680      	mov	r8, r0
   844c0:	f001 fea6 	bl	86210 <__aeabi_i2d>
   844c4:	4602      	mov	r2, r0
   844c6:	460b      	mov	r3, r1
   844c8:	4630      	mov	r0, r6
   844ca:	4639      	mov	r1, r7
   844cc:	f001 fd52 	bl	85f74 <__aeabi_dsub>
   844d0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   844d4:	fa5f f888 	uxtb.w	r8, r8
   844d8:	f805 8b01 	strb.w	r8, [r5], #1
   844dc:	4652      	mov	r2, sl
   844de:	465b      	mov	r3, fp
   844e0:	4606      	mov	r6, r0
   844e2:	460f      	mov	r7, r1
   844e4:	f002 f96c 	bl	867c0 <__aeabi_dcmplt>
   844e8:	2800      	cmp	r0, #0
   844ea:	d0c6      	beq.n	8447a <_dtoa_r+0x8ba>
   844ec:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   844f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   844f2:	9302      	str	r3, [sp, #8]
   844f4:	e523      	b.n	83f3e <_dtoa_r+0x37e>
   844f6:	2300      	movs	r3, #0
   844f8:	930b      	str	r3, [sp, #44]	; 0x2c
   844fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   844fc:	2b00      	cmp	r3, #0
   844fe:	f340 80dd 	ble.w	846bc <_dtoa_r+0xafc>
   84502:	461f      	mov	r7, r3
   84504:	461e      	mov	r6, r3
   84506:	930f      	str	r3, [sp, #60]	; 0x3c
   84508:	9307      	str	r3, [sp, #28]
   8450a:	e6f6      	b.n	842fa <_dtoa_r+0x73a>
   8450c:	2301      	movs	r3, #1
   8450e:	930b      	str	r3, [sp, #44]	; 0x2c
   84510:	e7f3      	b.n	844fa <_dtoa_r+0x93a>
   84512:	f1ba 0f00 	cmp.w	sl, #0
   84516:	f47f ada7 	bne.w	84068 <_dtoa_r+0x4a8>
   8451a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8451e:	2b00      	cmp	r3, #0
   84520:	f47f adbc 	bne.w	8409c <_dtoa_r+0x4dc>
   84524:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   84528:	0d3f      	lsrs	r7, r7, #20
   8452a:	053f      	lsls	r7, r7, #20
   8452c:	2f00      	cmp	r7, #0
   8452e:	f000 820d 	beq.w	8494c <_dtoa_r+0xd8c>
   84532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84534:	3301      	adds	r3, #1
   84536:	930a      	str	r3, [sp, #40]	; 0x28
   84538:	9b08      	ldr	r3, [sp, #32]
   8453a:	3301      	adds	r3, #1
   8453c:	9308      	str	r3, [sp, #32]
   8453e:	2301      	movs	r3, #1
   84540:	930c      	str	r3, [sp, #48]	; 0x30
   84542:	e5ad      	b.n	840a0 <_dtoa_r+0x4e0>
   84544:	9b07      	ldr	r3, [sp, #28]
   84546:	2b00      	cmp	r3, #0
   84548:	f73f ac48 	bgt.w	83ddc <_dtoa_r+0x21c>
   8454c:	f040 8222 	bne.w	84994 <_dtoa_r+0xdd4>
   84550:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84554:	2200      	movs	r2, #0
   84556:	4b38      	ldr	r3, [pc, #224]	; (84638 <_dtoa_r+0xa78>)
   84558:	f001 fec0 	bl	862dc <__aeabi_dmul>
   8455c:	4652      	mov	r2, sl
   8455e:	465b      	mov	r3, fp
   84560:	f002 f942 	bl	867e8 <__aeabi_dcmpge>
   84564:	f8dd 801c 	ldr.w	r8, [sp, #28]
   84568:	4646      	mov	r6, r8
   8456a:	2800      	cmp	r0, #0
   8456c:	d041      	beq.n	845f2 <_dtoa_r+0xa32>
   8456e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84570:	9d04      	ldr	r5, [sp, #16]
   84572:	43db      	mvns	r3, r3
   84574:	9302      	str	r3, [sp, #8]
   84576:	4641      	mov	r1, r8
   84578:	4620      	mov	r0, r4
   8457a:	f000 fda3 	bl	850c4 <_Bfree>
   8457e:	2e00      	cmp	r6, #0
   84580:	f43f acdd 	beq.w	83f3e <_dtoa_r+0x37e>
   84584:	e6a7      	b.n	842d6 <_dtoa_r+0x716>
   84586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84588:	4649      	mov	r1, r9
   8458a:	4620      	mov	r0, r4
   8458c:	f000 fed2 	bl	85334 <__pow5mult>
   84590:	4681      	mov	r9, r0
   84592:	e557      	b.n	84044 <_dtoa_r+0x484>
   84594:	9a14      	ldr	r2, [sp, #80]	; 0x50
   84596:	2a00      	cmp	r2, #0
   84598:	f000 8188 	beq.w	848ac <_dtoa_r+0xcec>
   8459c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   845a0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   845a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   845a4:	e4f2      	b.n	83f8c <_dtoa_r+0x3cc>
   845a6:	f1ba 0f00 	cmp.w	sl, #0
   845aa:	f47f ad77 	bne.w	8409c <_dtoa_r+0x4dc>
   845ae:	e7b4      	b.n	8451a <_dtoa_r+0x95a>
   845b0:	f000 fd92 	bl	850d8 <__multadd>
   845b4:	4647      	mov	r7, r8
   845b6:	4606      	mov	r6, r0
   845b8:	4683      	mov	fp, r0
   845ba:	e5c0      	b.n	8413e <_dtoa_r+0x57e>
   845bc:	4601      	mov	r1, r0
   845be:	4620      	mov	r0, r4
   845c0:	9308      	str	r3, [sp, #32]
   845c2:	f000 fd7f 	bl	850c4 <_Bfree>
   845c6:	2201      	movs	r2, #1
   845c8:	9b08      	ldr	r3, [sp, #32]
   845ca:	e5e2      	b.n	84192 <_dtoa_r+0x5d2>
   845cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   845ce:	2b02      	cmp	r3, #2
   845d0:	f77f ad98 	ble.w	84104 <_dtoa_r+0x544>
   845d4:	9b07      	ldr	r3, [sp, #28]
   845d6:	2b00      	cmp	r3, #0
   845d8:	d1c9      	bne.n	8456e <_dtoa_r+0x9ae>
   845da:	4641      	mov	r1, r8
   845dc:	2205      	movs	r2, #5
   845de:	4620      	mov	r0, r4
   845e0:	f000 fd7a 	bl	850d8 <__multadd>
   845e4:	4601      	mov	r1, r0
   845e6:	4680      	mov	r8, r0
   845e8:	4648      	mov	r0, r9
   845ea:	f000 ff43 	bl	85474 <__mcmp>
   845ee:	2800      	cmp	r0, #0
   845f0:	ddbd      	ble.n	8456e <_dtoa_r+0x9ae>
   845f2:	2331      	movs	r3, #49	; 0x31
   845f4:	9a02      	ldr	r2, [sp, #8]
   845f6:	9904      	ldr	r1, [sp, #16]
   845f8:	3201      	adds	r2, #1
   845fa:	9202      	str	r2, [sp, #8]
   845fc:	700b      	strb	r3, [r1, #0]
   845fe:	1c4d      	adds	r5, r1, #1
   84600:	e7b9      	b.n	84576 <_dtoa_r+0x9b6>
   84602:	2331      	movs	r3, #49	; 0x31
   84604:	9a02      	ldr	r2, [sp, #8]
   84606:	3201      	adds	r2, #1
   84608:	9202      	str	r2, [sp, #8]
   8460a:	9a04      	ldr	r2, [sp, #16]
   8460c:	7013      	strb	r3, [r2, #0]
   8460e:	e652      	b.n	842b6 <_dtoa_r+0x6f6>
   84610:	2301      	movs	r3, #1
   84612:	930b      	str	r3, [sp, #44]	; 0x2c
   84614:	e666      	b.n	842e4 <_dtoa_r+0x724>
   84616:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8461a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8461c:	e48f      	b.n	83f3e <_dtoa_r+0x37e>
   8461e:	bf00      	nop
   84620:	00086ee0 	.word	0x00086ee0
   84624:	00086eb8 	.word	0x00086eb8
   84628:	3ff00000 	.word	0x3ff00000
   8462c:	401c0000 	.word	0x401c0000
   84630:	3fe00000 	.word	0x3fe00000
   84634:	40240000 	.word	0x40240000
   84638:	40140000 	.word	0x40140000
   8463c:	4650      	mov	r0, sl
   8463e:	f001 fde7 	bl	86210 <__aeabi_i2d>
   84642:	463a      	mov	r2, r7
   84644:	4643      	mov	r3, r8
   84646:	f001 fe49 	bl	862dc <__aeabi_dmul>
   8464a:	2200      	movs	r2, #0
   8464c:	4bc1      	ldr	r3, [pc, #772]	; (84954 <_dtoa_r+0xd94>)
   8464e:	f001 fc93 	bl	85f78 <__adddf3>
   84652:	4605      	mov	r5, r0
   84654:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   84658:	4641      	mov	r1, r8
   8465a:	2200      	movs	r2, #0
   8465c:	4bbe      	ldr	r3, [pc, #760]	; (84958 <_dtoa_r+0xd98>)
   8465e:	4638      	mov	r0, r7
   84660:	f001 fc88 	bl	85f74 <__aeabi_dsub>
   84664:	462a      	mov	r2, r5
   84666:	4633      	mov	r3, r6
   84668:	4682      	mov	sl, r0
   8466a:	468b      	mov	fp, r1
   8466c:	f002 f8c6 	bl	867fc <__aeabi_dcmpgt>
   84670:	4680      	mov	r8, r0
   84672:	2800      	cmp	r0, #0
   84674:	f040 8110 	bne.w	84898 <_dtoa_r+0xcd8>
   84678:	462a      	mov	r2, r5
   8467a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   8467e:	4650      	mov	r0, sl
   84680:	4659      	mov	r1, fp
   84682:	f002 f89d 	bl	867c0 <__aeabi_dcmplt>
   84686:	b118      	cbz	r0, 84690 <_dtoa_r+0xad0>
   84688:	4646      	mov	r6, r8
   8468a:	e770      	b.n	8456e <_dtoa_r+0x9ae>
   8468c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   84690:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   84694:	f7ff bb8f 	b.w	83db6 <_dtoa_r+0x1f6>
   84698:	9804      	ldr	r0, [sp, #16]
   8469a:	f7ff bac0 	b.w	83c1e <_dtoa_r+0x5e>
   8469e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   846a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   846a2:	1afb      	subs	r3, r7, r3
   846a4:	441a      	add	r2, r3
   846a6:	970c      	str	r7, [sp, #48]	; 0x30
   846a8:	920d      	str	r2, [sp, #52]	; 0x34
   846aa:	2700      	movs	r7, #0
   846ac:	e468      	b.n	83f80 <_dtoa_r+0x3c0>
   846ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   846b2:	f04f 0a02 	mov.w	sl, #2
   846b6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   846ba:	e656      	b.n	8436a <_dtoa_r+0x7aa>
   846bc:	2100      	movs	r1, #0
   846be:	2301      	movs	r3, #1
   846c0:	4620      	mov	r0, r4
   846c2:	6461      	str	r1, [r4, #68]	; 0x44
   846c4:	9325      	str	r3, [sp, #148]	; 0x94
   846c6:	f000 fcd7 	bl	85078 <_Balloc>
   846ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
   846cc:	9004      	str	r0, [sp, #16]
   846ce:	9307      	str	r3, [sp, #28]
   846d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   846d2:	6420      	str	r0, [r4, #64]	; 0x40
   846d4:	930f      	str	r3, [sp, #60]	; 0x3c
   846d6:	e627      	b.n	84328 <_dtoa_r+0x768>
   846d8:	2a00      	cmp	r2, #0
   846da:	46d0      	mov	r8, sl
   846dc:	f8cd b020 	str.w	fp, [sp, #32]
   846e0:	469a      	mov	sl, r3
   846e2:	dd11      	ble.n	84708 <_dtoa_r+0xb48>
   846e4:	4649      	mov	r1, r9
   846e6:	2201      	movs	r2, #1
   846e8:	4620      	mov	r0, r4
   846ea:	f000 fe73 	bl	853d4 <__lshift>
   846ee:	4641      	mov	r1, r8
   846f0:	4681      	mov	r9, r0
   846f2:	f000 febf 	bl	85474 <__mcmp>
   846f6:	2800      	cmp	r0, #0
   846f8:	f340 8145 	ble.w	84986 <_dtoa_r+0xdc6>
   846fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   84700:	f000 8105 	beq.w	8490e <_dtoa_r+0xd4e>
   84704:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   84708:	46b3      	mov	fp, r6
   8470a:	f887 a000 	strb.w	sl, [r7]
   8470e:	1c7d      	adds	r5, r7, #1
   84710:	9e08      	ldr	r6, [sp, #32]
   84712:	e5d0      	b.n	842b6 <_dtoa_r+0x6f6>
   84714:	d104      	bne.n	84720 <_dtoa_r+0xb60>
   84716:	f01a 0f01 	tst.w	sl, #1
   8471a:	d001      	beq.n	84720 <_dtoa_r+0xb60>
   8471c:	e5bb      	b.n	84296 <_dtoa_r+0x6d6>
   8471e:	4615      	mov	r5, r2
   84720:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   84724:	1e6a      	subs	r2, r5, #1
   84726:	2b30      	cmp	r3, #48	; 0x30
   84728:	d0f9      	beq.n	8471e <_dtoa_r+0xb5e>
   8472a:	e5c4      	b.n	842b6 <_dtoa_r+0x6f6>
   8472c:	2230      	movs	r2, #48	; 0x30
   8472e:	9904      	ldr	r1, [sp, #16]
   84730:	700a      	strb	r2, [r1, #0]
   84732:	9a02      	ldr	r2, [sp, #8]
   84734:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   84738:	3201      	adds	r2, #1
   8473a:	9202      	str	r2, [sp, #8]
   8473c:	f7ff bbfb 	b.w	83f36 <_dtoa_r+0x376>
   84740:	f000 80bb 	beq.w	848ba <_dtoa_r+0xcfa>
   84744:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   84748:	9b02      	ldr	r3, [sp, #8]
   8474a:	f04f 0a02 	mov.w	sl, #2
   8474e:	425d      	negs	r5, r3
   84750:	4b82      	ldr	r3, [pc, #520]	; (8495c <_dtoa_r+0xd9c>)
   84752:	f005 020f 	and.w	r2, r5, #15
   84756:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8475a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8475e:	f001 fdbd 	bl	862dc <__aeabi_dmul>
   84762:	112d      	asrs	r5, r5, #4
   84764:	4607      	mov	r7, r0
   84766:	4688      	mov	r8, r1
   84768:	f43f ae1a 	beq.w	843a0 <_dtoa_r+0x7e0>
   8476c:	4e7c      	ldr	r6, [pc, #496]	; (84960 <_dtoa_r+0xda0>)
   8476e:	07eb      	lsls	r3, r5, #31
   84770:	d509      	bpl.n	84786 <_dtoa_r+0xbc6>
   84772:	e9d6 2300 	ldrd	r2, r3, [r6]
   84776:	4638      	mov	r0, r7
   84778:	4641      	mov	r1, r8
   8477a:	f001 fdaf 	bl	862dc <__aeabi_dmul>
   8477e:	4607      	mov	r7, r0
   84780:	4688      	mov	r8, r1
   84782:	f10a 0a01 	add.w	sl, sl, #1
   84786:	106d      	asrs	r5, r5, #1
   84788:	f106 0608 	add.w	r6, r6, #8
   8478c:	d1ef      	bne.n	8476e <_dtoa_r+0xbae>
   8478e:	e607      	b.n	843a0 <_dtoa_r+0x7e0>
   84790:	6871      	ldr	r1, [r6, #4]
   84792:	4620      	mov	r0, r4
   84794:	f000 fc70 	bl	85078 <_Balloc>
   84798:	4605      	mov	r5, r0
   8479a:	6933      	ldr	r3, [r6, #16]
   8479c:	f106 010c 	add.w	r1, r6, #12
   847a0:	3302      	adds	r3, #2
   847a2:	009a      	lsls	r2, r3, #2
   847a4:	300c      	adds	r0, #12
   847a6:	f7fd fce9 	bl	8217c <memcpy>
   847aa:	4629      	mov	r1, r5
   847ac:	2201      	movs	r2, #1
   847ae:	4620      	mov	r0, r4
   847b0:	f000 fe10 	bl	853d4 <__lshift>
   847b4:	9008      	str	r0, [sp, #32]
   847b6:	e4b6      	b.n	84126 <_dtoa_r+0x566>
   847b8:	2b39      	cmp	r3, #57	; 0x39
   847ba:	f8cd b020 	str.w	fp, [sp, #32]
   847be:	46d0      	mov	r8, sl
   847c0:	f000 80a5 	beq.w	8490e <_dtoa_r+0xd4e>
   847c4:	f103 0a01 	add.w	sl, r3, #1
   847c8:	46b3      	mov	fp, r6
   847ca:	f887 a000 	strb.w	sl, [r7]
   847ce:	1c7d      	adds	r5, r7, #1
   847d0:	9e08      	ldr	r6, [sp, #32]
   847d2:	e570      	b.n	842b6 <_dtoa_r+0x6f6>
   847d4:	465a      	mov	r2, fp
   847d6:	46d0      	mov	r8, sl
   847d8:	46b3      	mov	fp, r6
   847da:	469a      	mov	sl, r3
   847dc:	4616      	mov	r6, r2
   847de:	e54e      	b.n	8427e <_dtoa_r+0x6be>
   847e0:	9812      	ldr	r0, [sp, #72]	; 0x48
   847e2:	495e      	ldr	r1, [pc, #376]	; (8495c <_dtoa_r+0xd9c>)
   847e4:	462a      	mov	r2, r5
   847e6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   847ea:	4633      	mov	r3, r6
   847ec:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   847f0:	f001 fd74 	bl	862dc <__aeabi_dmul>
   847f4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   847f8:	4638      	mov	r0, r7
   847fa:	4641      	mov	r1, r8
   847fc:	f002 f81e 	bl	8683c <__aeabi_d2iz>
   84800:	4605      	mov	r5, r0
   84802:	f001 fd05 	bl	86210 <__aeabi_i2d>
   84806:	4602      	mov	r2, r0
   84808:	460b      	mov	r3, r1
   8480a:	4638      	mov	r0, r7
   8480c:	4641      	mov	r1, r8
   8480e:	f001 fbb1 	bl	85f74 <__aeabi_dsub>
   84812:	4606      	mov	r6, r0
   84814:	9812      	ldr	r0, [sp, #72]	; 0x48
   84816:	9a04      	ldr	r2, [sp, #16]
   84818:	3530      	adds	r5, #48	; 0x30
   8481a:	2801      	cmp	r0, #1
   8481c:	7015      	strb	r5, [r2, #0]
   8481e:	460f      	mov	r7, r1
   84820:	f102 0501 	add.w	r5, r2, #1
   84824:	d026      	beq.n	84874 <_dtoa_r+0xcb4>
   84826:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84828:	9a04      	ldr	r2, [sp, #16]
   8482a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8482e:	4413      	add	r3, r2
   84830:	f04f 0a00 	mov.w	sl, #0
   84834:	4699      	mov	r9, r3
   84836:	f8df b130 	ldr.w	fp, [pc, #304]	; 84968 <_dtoa_r+0xda8>
   8483a:	4652      	mov	r2, sl
   8483c:	465b      	mov	r3, fp
   8483e:	4630      	mov	r0, r6
   84840:	4639      	mov	r1, r7
   84842:	f001 fd4b 	bl	862dc <__aeabi_dmul>
   84846:	460f      	mov	r7, r1
   84848:	4606      	mov	r6, r0
   8484a:	f001 fff7 	bl	8683c <__aeabi_d2iz>
   8484e:	4680      	mov	r8, r0
   84850:	f001 fcde 	bl	86210 <__aeabi_i2d>
   84854:	4602      	mov	r2, r0
   84856:	460b      	mov	r3, r1
   84858:	4630      	mov	r0, r6
   8485a:	4639      	mov	r1, r7
   8485c:	f001 fb8a 	bl	85f74 <__aeabi_dsub>
   84860:	f108 0830 	add.w	r8, r8, #48	; 0x30
   84864:	f805 8b01 	strb.w	r8, [r5], #1
   84868:	454d      	cmp	r5, r9
   8486a:	4606      	mov	r6, r0
   8486c:	460f      	mov	r7, r1
   8486e:	d1e4      	bne.n	8483a <_dtoa_r+0xc7a>
   84870:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   84874:	2200      	movs	r2, #0
   84876:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   8487a:	4b3a      	ldr	r3, [pc, #232]	; (84964 <_dtoa_r+0xda4>)
   8487c:	f001 fb7c 	bl	85f78 <__adddf3>
   84880:	4632      	mov	r2, r6
   84882:	463b      	mov	r3, r7
   84884:	f001 ff9c 	bl	867c0 <__aeabi_dcmplt>
   84888:	2800      	cmp	r0, #0
   8488a:	d046      	beq.n	8491a <_dtoa_r+0xd5a>
   8488c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8488e:	9302      	str	r3, [sp, #8]
   84890:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   84894:	f7ff bb42 	b.w	83f1c <_dtoa_r+0x35c>
   84898:	f04f 0800 	mov.w	r8, #0
   8489c:	4646      	mov	r6, r8
   8489e:	e6a8      	b.n	845f2 <_dtoa_r+0xa32>
   848a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   848a2:	9a07      	ldr	r2, [sp, #28]
   848a4:	1a9d      	subs	r5, r3, r2
   848a6:	2300      	movs	r3, #0
   848a8:	f7ff bb70 	b.w	83f8c <_dtoa_r+0x3cc>
   848ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
   848ae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   848b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   848b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   848b6:	f7ff bb69 	b.w	83f8c <_dtoa_r+0x3cc>
   848ba:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   848be:	f04f 0a02 	mov.w	sl, #2
   848c2:	e56d      	b.n	843a0 <_dtoa_r+0x7e0>
   848c4:	9b07      	ldr	r3, [sp, #28]
   848c6:	2b00      	cmp	r3, #0
   848c8:	f43f aeb8 	beq.w	8463c <_dtoa_r+0xa7c>
   848cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   848ce:	2b00      	cmp	r3, #0
   848d0:	f77f aede 	ble.w	84690 <_dtoa_r+0xad0>
   848d4:	2200      	movs	r2, #0
   848d6:	4b24      	ldr	r3, [pc, #144]	; (84968 <_dtoa_r+0xda8>)
   848d8:	4638      	mov	r0, r7
   848da:	4641      	mov	r1, r8
   848dc:	f001 fcfe 	bl	862dc <__aeabi_dmul>
   848e0:	4607      	mov	r7, r0
   848e2:	4688      	mov	r8, r1
   848e4:	f10a 0001 	add.w	r0, sl, #1
   848e8:	f001 fc92 	bl	86210 <__aeabi_i2d>
   848ec:	463a      	mov	r2, r7
   848ee:	4643      	mov	r3, r8
   848f0:	f001 fcf4 	bl	862dc <__aeabi_dmul>
   848f4:	2200      	movs	r2, #0
   848f6:	4b17      	ldr	r3, [pc, #92]	; (84954 <_dtoa_r+0xd94>)
   848f8:	f001 fb3e 	bl	85f78 <__adddf3>
   848fc:	9a02      	ldr	r2, [sp, #8]
   848fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84900:	3a01      	subs	r2, #1
   84902:	4605      	mov	r5, r0
   84904:	9215      	str	r2, [sp, #84]	; 0x54
   84906:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8490a:	9312      	str	r3, [sp, #72]	; 0x48
   8490c:	e569      	b.n	843e2 <_dtoa_r+0x822>
   8490e:	2239      	movs	r2, #57	; 0x39
   84910:	46b3      	mov	fp, r6
   84912:	703a      	strb	r2, [r7, #0]
   84914:	9e08      	ldr	r6, [sp, #32]
   84916:	1c7d      	adds	r5, r7, #1
   84918:	e4bf      	b.n	8429a <_dtoa_r+0x6da>
   8491a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   8491e:	2000      	movs	r0, #0
   84920:	4910      	ldr	r1, [pc, #64]	; (84964 <_dtoa_r+0xda4>)
   84922:	f001 fb27 	bl	85f74 <__aeabi_dsub>
   84926:	4632      	mov	r2, r6
   84928:	463b      	mov	r3, r7
   8492a:	f001 ff67 	bl	867fc <__aeabi_dcmpgt>
   8492e:	b908      	cbnz	r0, 84934 <_dtoa_r+0xd74>
   84930:	e6ae      	b.n	84690 <_dtoa_r+0xad0>
   84932:	4615      	mov	r5, r2
   84934:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   84938:	1e6a      	subs	r2, r5, #1
   8493a:	2b30      	cmp	r3, #48	; 0x30
   8493c:	d0f9      	beq.n	84932 <_dtoa_r+0xd72>
   8493e:	e5d7      	b.n	844f0 <_dtoa_r+0x930>
   84940:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   84944:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84946:	9302      	str	r3, [sp, #8]
   84948:	f7ff bae8 	b.w	83f1c <_dtoa_r+0x35c>
   8494c:	970c      	str	r7, [sp, #48]	; 0x30
   8494e:	f7ff bba7 	b.w	840a0 <_dtoa_r+0x4e0>
   84952:	bf00      	nop
   84954:	401c0000 	.word	0x401c0000
   84958:	40140000 	.word	0x40140000
   8495c:	00086ee0 	.word	0x00086ee0
   84960:	00086eb8 	.word	0x00086eb8
   84964:	3fe00000 	.word	0x3fe00000
   84968:	40240000 	.word	0x40240000
   8496c:	2b39      	cmp	r3, #57	; 0x39
   8496e:	f8cd b020 	str.w	fp, [sp, #32]
   84972:	46d0      	mov	r8, sl
   84974:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84978:	469a      	mov	sl, r3
   8497a:	d0c8      	beq.n	8490e <_dtoa_r+0xd4e>
   8497c:	f1bb 0f00 	cmp.w	fp, #0
   84980:	f73f aec0 	bgt.w	84704 <_dtoa_r+0xb44>
   84984:	e6c0      	b.n	84708 <_dtoa_r+0xb48>
   84986:	f47f aebf 	bne.w	84708 <_dtoa_r+0xb48>
   8498a:	f01a 0f01 	tst.w	sl, #1
   8498e:	f43f aebb 	beq.w	84708 <_dtoa_r+0xb48>
   84992:	e6b3      	b.n	846fc <_dtoa_r+0xb3c>
   84994:	f04f 0800 	mov.w	r8, #0
   84998:	4646      	mov	r6, r8
   8499a:	e5e8      	b.n	8456e <_dtoa_r+0x9ae>
   8499c:	4631      	mov	r1, r6
   8499e:	2300      	movs	r3, #0
   849a0:	220a      	movs	r2, #10
   849a2:	4620      	mov	r0, r4
   849a4:	f000 fb98 	bl	850d8 <__multadd>
   849a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   849aa:	4606      	mov	r6, r0
   849ac:	2b00      	cmp	r3, #0
   849ae:	dd07      	ble.n	849c0 <_dtoa_r+0xe00>
   849b0:	9307      	str	r3, [sp, #28]
   849b2:	f7ff bbab 	b.w	8410c <_dtoa_r+0x54c>
   849b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   849b8:	2b02      	cmp	r3, #2
   849ba:	dc1f      	bgt.n	849fc <_dtoa_r+0xe3c>
   849bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   849be:	e43c      	b.n	8423a <_dtoa_r+0x67a>
   849c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   849c2:	2b02      	cmp	r3, #2
   849c4:	dc1a      	bgt.n	849fc <_dtoa_r+0xe3c>
   849c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   849c8:	e7f2      	b.n	849b0 <_dtoa_r+0xdf0>
   849ca:	f43f ab81 	beq.w	840d0 <_dtoa_r+0x510>
   849ce:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   849d2:	e411      	b.n	841f8 <_dtoa_r+0x638>
   849d4:	2500      	movs	r5, #0
   849d6:	4620      	mov	r0, r4
   849d8:	6465      	str	r5, [r4, #68]	; 0x44
   849da:	4629      	mov	r1, r5
   849dc:	f000 fb4c 	bl	85078 <_Balloc>
   849e0:	f04f 33ff 	mov.w	r3, #4294967295
   849e4:	9307      	str	r3, [sp, #28]
   849e6:	930f      	str	r3, [sp, #60]	; 0x3c
   849e8:	2301      	movs	r3, #1
   849ea:	9004      	str	r0, [sp, #16]
   849ec:	9525      	str	r5, [sp, #148]	; 0x94
   849ee:	6420      	str	r0, [r4, #64]	; 0x40
   849f0:	930b      	str	r3, [sp, #44]	; 0x2c
   849f2:	f7ff b9e0 	b.w	83db6 <_dtoa_r+0x1f6>
   849f6:	2501      	movs	r5, #1
   849f8:	f7ff b9a8 	b.w	83d4c <_dtoa_r+0x18c>
   849fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   849fe:	9307      	str	r3, [sp, #28]
   84a00:	e5e8      	b.n	845d4 <_dtoa_r+0xa14>
   84a02:	bf00      	nop

00084a04 <__libc_fini_array>:
   84a04:	b538      	push	{r3, r4, r5, lr}
   84a06:	4c0a      	ldr	r4, [pc, #40]	; (84a30 <__libc_fini_array+0x2c>)
   84a08:	4d0a      	ldr	r5, [pc, #40]	; (84a34 <__libc_fini_array+0x30>)
   84a0a:	1b64      	subs	r4, r4, r5
   84a0c:	10a4      	asrs	r4, r4, #2
   84a0e:	d00a      	beq.n	84a26 <__libc_fini_array+0x22>
   84a10:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   84a14:	3b01      	subs	r3, #1
   84a16:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   84a1a:	3c01      	subs	r4, #1
   84a1c:	f855 3904 	ldr.w	r3, [r5], #-4
   84a20:	4798      	blx	r3
   84a22:	2c00      	cmp	r4, #0
   84a24:	d1f9      	bne.n	84a1a <__libc_fini_array+0x16>
   84a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84a2a:	f002 bb4f 	b.w	870cc <_fini>
   84a2e:	bf00      	nop
   84a30:	000870dc 	.word	0x000870dc
   84a34:	000870d8 	.word	0x000870d8

00084a38 <__locale_ctype_ptr_l>:
   84a38:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   84a3c:	4770      	bx	lr
   84a3e:	bf00      	nop

00084a40 <_localeconv_r>:
   84a40:	4a04      	ldr	r2, [pc, #16]	; (84a54 <_localeconv_r+0x14>)
   84a42:	4b05      	ldr	r3, [pc, #20]	; (84a58 <_localeconv_r+0x18>)
   84a44:	6812      	ldr	r2, [r2, #0]
   84a46:	6b50      	ldr	r0, [r2, #52]	; 0x34
   84a48:	2800      	cmp	r0, #0
   84a4a:	bf08      	it	eq
   84a4c:	4618      	moveq	r0, r3
   84a4e:	30f0      	adds	r0, #240	; 0xf0
   84a50:	4770      	bx	lr
   84a52:	bf00      	nop
   84a54:	20070628 	.word	0x20070628
   84a58:	20070a5c 	.word	0x20070a5c

00084a5c <__retarget_lock_acquire_recursive>:
   84a5c:	4770      	bx	lr
   84a5e:	bf00      	nop

00084a60 <__retarget_lock_release_recursive>:
   84a60:	4770      	bx	lr
   84a62:	bf00      	nop

00084a64 <_malloc_r>:
   84a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84a68:	f101 060b 	add.w	r6, r1, #11
   84a6c:	2e16      	cmp	r6, #22
   84a6e:	b083      	sub	sp, #12
   84a70:	4605      	mov	r5, r0
   84a72:	f240 809e 	bls.w	84bb2 <_malloc_r+0x14e>
   84a76:	f036 0607 	bics.w	r6, r6, #7
   84a7a:	f100 80bd 	bmi.w	84bf8 <_malloc_r+0x194>
   84a7e:	42b1      	cmp	r1, r6
   84a80:	f200 80ba 	bhi.w	84bf8 <_malloc_r+0x194>
   84a84:	f000 faec 	bl	85060 <__malloc_lock>
   84a88:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   84a8c:	f0c0 8285 	bcc.w	84f9a <_malloc_r+0x536>
   84a90:	0a73      	lsrs	r3, r6, #9
   84a92:	f000 80b8 	beq.w	84c06 <_malloc_r+0x1a2>
   84a96:	2b04      	cmp	r3, #4
   84a98:	f200 816c 	bhi.w	84d74 <_malloc_r+0x310>
   84a9c:	09b3      	lsrs	r3, r6, #6
   84a9e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   84aa2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   84aa6:	00c1      	lsls	r1, r0, #3
   84aa8:	4fb8      	ldr	r7, [pc, #736]	; (84d8c <_malloc_r+0x328>)
   84aaa:	4439      	add	r1, r7
   84aac:	684c      	ldr	r4, [r1, #4]
   84aae:	3908      	subs	r1, #8
   84ab0:	42a1      	cmp	r1, r4
   84ab2:	d106      	bne.n	84ac2 <_malloc_r+0x5e>
   84ab4:	e00c      	b.n	84ad0 <_malloc_r+0x6c>
   84ab6:	2a00      	cmp	r2, #0
   84ab8:	f280 80ab 	bge.w	84c12 <_malloc_r+0x1ae>
   84abc:	68e4      	ldr	r4, [r4, #12]
   84abe:	42a1      	cmp	r1, r4
   84ac0:	d006      	beq.n	84ad0 <_malloc_r+0x6c>
   84ac2:	6863      	ldr	r3, [r4, #4]
   84ac4:	f023 0303 	bic.w	r3, r3, #3
   84ac8:	1b9a      	subs	r2, r3, r6
   84aca:	2a0f      	cmp	r2, #15
   84acc:	ddf3      	ble.n	84ab6 <_malloc_r+0x52>
   84ace:	4670      	mov	r0, lr
   84ad0:	693c      	ldr	r4, [r7, #16]
   84ad2:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 84da0 <_malloc_r+0x33c>
   84ad6:	4574      	cmp	r4, lr
   84ad8:	f000 819e 	beq.w	84e18 <_malloc_r+0x3b4>
   84adc:	6863      	ldr	r3, [r4, #4]
   84ade:	f023 0303 	bic.w	r3, r3, #3
   84ae2:	1b9a      	subs	r2, r3, r6
   84ae4:	2a0f      	cmp	r2, #15
   84ae6:	f300 8183 	bgt.w	84df0 <_malloc_r+0x38c>
   84aea:	2a00      	cmp	r2, #0
   84aec:	f8c7 e014 	str.w	lr, [r7, #20]
   84af0:	f8c7 e010 	str.w	lr, [r7, #16]
   84af4:	f280 8091 	bge.w	84c1a <_malloc_r+0x1b6>
   84af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84afc:	f080 8154 	bcs.w	84da8 <_malloc_r+0x344>
   84b00:	2201      	movs	r2, #1
   84b02:	08db      	lsrs	r3, r3, #3
   84b04:	6879      	ldr	r1, [r7, #4]
   84b06:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   84b0a:	4413      	add	r3, r2
   84b0c:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   84b10:	fa02 f20c 	lsl.w	r2, r2, ip
   84b14:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   84b18:	430a      	orrs	r2, r1
   84b1a:	f1ac 0108 	sub.w	r1, ip, #8
   84b1e:	60e1      	str	r1, [r4, #12]
   84b20:	f8c4 8008 	str.w	r8, [r4, #8]
   84b24:	607a      	str	r2, [r7, #4]
   84b26:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   84b2a:	f8c8 400c 	str.w	r4, [r8, #12]
   84b2e:	2401      	movs	r4, #1
   84b30:	1083      	asrs	r3, r0, #2
   84b32:	409c      	lsls	r4, r3
   84b34:	4294      	cmp	r4, r2
   84b36:	d87d      	bhi.n	84c34 <_malloc_r+0x1d0>
   84b38:	4214      	tst	r4, r2
   84b3a:	d106      	bne.n	84b4a <_malloc_r+0xe6>
   84b3c:	f020 0003 	bic.w	r0, r0, #3
   84b40:	0064      	lsls	r4, r4, #1
   84b42:	4214      	tst	r4, r2
   84b44:	f100 0004 	add.w	r0, r0, #4
   84b48:	d0fa      	beq.n	84b40 <_malloc_r+0xdc>
   84b4a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   84b4e:	46cc      	mov	ip, r9
   84b50:	4680      	mov	r8, r0
   84b52:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84b56:	459c      	cmp	ip, r3
   84b58:	d107      	bne.n	84b6a <_malloc_r+0x106>
   84b5a:	e15f      	b.n	84e1c <_malloc_r+0x3b8>
   84b5c:	2a00      	cmp	r2, #0
   84b5e:	f280 816d 	bge.w	84e3c <_malloc_r+0x3d8>
   84b62:	68db      	ldr	r3, [r3, #12]
   84b64:	459c      	cmp	ip, r3
   84b66:	f000 8159 	beq.w	84e1c <_malloc_r+0x3b8>
   84b6a:	6859      	ldr	r1, [r3, #4]
   84b6c:	f021 0103 	bic.w	r1, r1, #3
   84b70:	1b8a      	subs	r2, r1, r6
   84b72:	2a0f      	cmp	r2, #15
   84b74:	ddf2      	ble.n	84b5c <_malloc_r+0xf8>
   84b76:	68dc      	ldr	r4, [r3, #12]
   84b78:	f8d3 c008 	ldr.w	ip, [r3, #8]
   84b7c:	f046 0801 	orr.w	r8, r6, #1
   84b80:	4628      	mov	r0, r5
   84b82:	441e      	add	r6, r3
   84b84:	f042 0501 	orr.w	r5, r2, #1
   84b88:	f8c3 8004 	str.w	r8, [r3, #4]
   84b8c:	f8cc 400c 	str.w	r4, [ip, #12]
   84b90:	f8c4 c008 	str.w	ip, [r4, #8]
   84b94:	617e      	str	r6, [r7, #20]
   84b96:	613e      	str	r6, [r7, #16]
   84b98:	f8c6 e00c 	str.w	lr, [r6, #12]
   84b9c:	f8c6 e008 	str.w	lr, [r6, #8]
   84ba0:	6075      	str	r5, [r6, #4]
   84ba2:	505a      	str	r2, [r3, r1]
   84ba4:	9300      	str	r3, [sp, #0]
   84ba6:	f000 fa61 	bl	8506c <__malloc_unlock>
   84baa:	9b00      	ldr	r3, [sp, #0]
   84bac:	f103 0408 	add.w	r4, r3, #8
   84bb0:	e01e      	b.n	84bf0 <_malloc_r+0x18c>
   84bb2:	2910      	cmp	r1, #16
   84bb4:	d820      	bhi.n	84bf8 <_malloc_r+0x194>
   84bb6:	f000 fa53 	bl	85060 <__malloc_lock>
   84bba:	2610      	movs	r6, #16
   84bbc:	2318      	movs	r3, #24
   84bbe:	2002      	movs	r0, #2
   84bc0:	4f72      	ldr	r7, [pc, #456]	; (84d8c <_malloc_r+0x328>)
   84bc2:	443b      	add	r3, r7
   84bc4:	685c      	ldr	r4, [r3, #4]
   84bc6:	f1a3 0208 	sub.w	r2, r3, #8
   84bca:	4294      	cmp	r4, r2
   84bcc:	f000 812f 	beq.w	84e2e <_malloc_r+0x3ca>
   84bd0:	6863      	ldr	r3, [r4, #4]
   84bd2:	68e1      	ldr	r1, [r4, #12]
   84bd4:	f023 0303 	bic.w	r3, r3, #3
   84bd8:	4423      	add	r3, r4
   84bda:	685a      	ldr	r2, [r3, #4]
   84bdc:	68a6      	ldr	r6, [r4, #8]
   84bde:	f042 0201 	orr.w	r2, r2, #1
   84be2:	60f1      	str	r1, [r6, #12]
   84be4:	4628      	mov	r0, r5
   84be6:	608e      	str	r6, [r1, #8]
   84be8:	605a      	str	r2, [r3, #4]
   84bea:	f000 fa3f 	bl	8506c <__malloc_unlock>
   84bee:	3408      	adds	r4, #8
   84bf0:	4620      	mov	r0, r4
   84bf2:	b003      	add	sp, #12
   84bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84bf8:	2400      	movs	r4, #0
   84bfa:	230c      	movs	r3, #12
   84bfc:	4620      	mov	r0, r4
   84bfe:	602b      	str	r3, [r5, #0]
   84c00:	b003      	add	sp, #12
   84c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84c06:	2040      	movs	r0, #64	; 0x40
   84c08:	f44f 7100 	mov.w	r1, #512	; 0x200
   84c0c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   84c10:	e74a      	b.n	84aa8 <_malloc_r+0x44>
   84c12:	4423      	add	r3, r4
   84c14:	685a      	ldr	r2, [r3, #4]
   84c16:	68e1      	ldr	r1, [r4, #12]
   84c18:	e7e0      	b.n	84bdc <_malloc_r+0x178>
   84c1a:	4423      	add	r3, r4
   84c1c:	685a      	ldr	r2, [r3, #4]
   84c1e:	4628      	mov	r0, r5
   84c20:	f042 0201 	orr.w	r2, r2, #1
   84c24:	605a      	str	r2, [r3, #4]
   84c26:	3408      	adds	r4, #8
   84c28:	f000 fa20 	bl	8506c <__malloc_unlock>
   84c2c:	4620      	mov	r0, r4
   84c2e:	b003      	add	sp, #12
   84c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84c34:	68bc      	ldr	r4, [r7, #8]
   84c36:	6863      	ldr	r3, [r4, #4]
   84c38:	f023 0803 	bic.w	r8, r3, #3
   84c3c:	45b0      	cmp	r8, r6
   84c3e:	d304      	bcc.n	84c4a <_malloc_r+0x1e6>
   84c40:	eba8 0306 	sub.w	r3, r8, r6
   84c44:	2b0f      	cmp	r3, #15
   84c46:	f300 8085 	bgt.w	84d54 <_malloc_r+0x2f0>
   84c4a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 84da4 <_malloc_r+0x340>
   84c4e:	4b50      	ldr	r3, [pc, #320]	; (84d90 <_malloc_r+0x32c>)
   84c50:	f8d9 2000 	ldr.w	r2, [r9]
   84c54:	681b      	ldr	r3, [r3, #0]
   84c56:	3201      	adds	r2, #1
   84c58:	4433      	add	r3, r6
   84c5a:	eb04 0a08 	add.w	sl, r4, r8
   84c5e:	f000 8154 	beq.w	84f0a <_malloc_r+0x4a6>
   84c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   84c66:	330f      	adds	r3, #15
   84c68:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   84c6c:	f02b 0b0f 	bic.w	fp, fp, #15
   84c70:	4659      	mov	r1, fp
   84c72:	4628      	mov	r0, r5
   84c74:	f000 fcfc 	bl	85670 <_sbrk_r>
   84c78:	1c41      	adds	r1, r0, #1
   84c7a:	4602      	mov	r2, r0
   84c7c:	f000 80fb 	beq.w	84e76 <_malloc_r+0x412>
   84c80:	4582      	cmp	sl, r0
   84c82:	f200 80f6 	bhi.w	84e72 <_malloc_r+0x40e>
   84c86:	4b43      	ldr	r3, [pc, #268]	; (84d94 <_malloc_r+0x330>)
   84c88:	6819      	ldr	r1, [r3, #0]
   84c8a:	4459      	add	r1, fp
   84c8c:	6019      	str	r1, [r3, #0]
   84c8e:	f000 814c 	beq.w	84f2a <_malloc_r+0x4c6>
   84c92:	f8d9 0000 	ldr.w	r0, [r9]
   84c96:	3001      	adds	r0, #1
   84c98:	bf1b      	ittet	ne
   84c9a:	eba2 0a0a 	subne.w	sl, r2, sl
   84c9e:	4451      	addne	r1, sl
   84ca0:	f8c9 2000 	streq.w	r2, [r9]
   84ca4:	6019      	strne	r1, [r3, #0]
   84ca6:	f012 0107 	ands.w	r1, r2, #7
   84caa:	f000 8114 	beq.w	84ed6 <_malloc_r+0x472>
   84cae:	f1c1 0008 	rsb	r0, r1, #8
   84cb2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   84cb6:	4402      	add	r2, r0
   84cb8:	3108      	adds	r1, #8
   84cba:	eb02 090b 	add.w	r9, r2, fp
   84cbe:	f3c9 090b 	ubfx	r9, r9, #0, #12
   84cc2:	eba1 0909 	sub.w	r9, r1, r9
   84cc6:	4649      	mov	r1, r9
   84cc8:	4628      	mov	r0, r5
   84cca:	9301      	str	r3, [sp, #4]
   84ccc:	9200      	str	r2, [sp, #0]
   84cce:	f000 fccf 	bl	85670 <_sbrk_r>
   84cd2:	1c43      	adds	r3, r0, #1
   84cd4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   84cd8:	f000 8142 	beq.w	84f60 <_malloc_r+0x4fc>
   84cdc:	1a80      	subs	r0, r0, r2
   84cde:	4448      	add	r0, r9
   84ce0:	f040 0001 	orr.w	r0, r0, #1
   84ce4:	6819      	ldr	r1, [r3, #0]
   84ce6:	42bc      	cmp	r4, r7
   84ce8:	4449      	add	r1, r9
   84cea:	60ba      	str	r2, [r7, #8]
   84cec:	6019      	str	r1, [r3, #0]
   84cee:	6050      	str	r0, [r2, #4]
   84cf0:	d017      	beq.n	84d22 <_malloc_r+0x2be>
   84cf2:	f1b8 0f0f 	cmp.w	r8, #15
   84cf6:	f240 80fa 	bls.w	84eee <_malloc_r+0x48a>
   84cfa:	f04f 0c05 	mov.w	ip, #5
   84cfe:	6862      	ldr	r2, [r4, #4]
   84d00:	f1a8 000c 	sub.w	r0, r8, #12
   84d04:	f020 0007 	bic.w	r0, r0, #7
   84d08:	f002 0201 	and.w	r2, r2, #1
   84d0c:	eb04 0e00 	add.w	lr, r4, r0
   84d10:	4302      	orrs	r2, r0
   84d12:	280f      	cmp	r0, #15
   84d14:	6062      	str	r2, [r4, #4]
   84d16:	f8ce c004 	str.w	ip, [lr, #4]
   84d1a:	f8ce c008 	str.w	ip, [lr, #8]
   84d1e:	f200 8116 	bhi.w	84f4e <_malloc_r+0x4ea>
   84d22:	4b1d      	ldr	r3, [pc, #116]	; (84d98 <_malloc_r+0x334>)
   84d24:	68bc      	ldr	r4, [r7, #8]
   84d26:	681a      	ldr	r2, [r3, #0]
   84d28:	4291      	cmp	r1, r2
   84d2a:	bf88      	it	hi
   84d2c:	6019      	strhi	r1, [r3, #0]
   84d2e:	4b1b      	ldr	r3, [pc, #108]	; (84d9c <_malloc_r+0x338>)
   84d30:	681a      	ldr	r2, [r3, #0]
   84d32:	4291      	cmp	r1, r2
   84d34:	6862      	ldr	r2, [r4, #4]
   84d36:	bf88      	it	hi
   84d38:	6019      	strhi	r1, [r3, #0]
   84d3a:	f022 0203 	bic.w	r2, r2, #3
   84d3e:	4296      	cmp	r6, r2
   84d40:	eba2 0306 	sub.w	r3, r2, r6
   84d44:	d801      	bhi.n	84d4a <_malloc_r+0x2e6>
   84d46:	2b0f      	cmp	r3, #15
   84d48:	dc04      	bgt.n	84d54 <_malloc_r+0x2f0>
   84d4a:	4628      	mov	r0, r5
   84d4c:	f000 f98e 	bl	8506c <__malloc_unlock>
   84d50:	2400      	movs	r4, #0
   84d52:	e74d      	b.n	84bf0 <_malloc_r+0x18c>
   84d54:	f046 0201 	orr.w	r2, r6, #1
   84d58:	f043 0301 	orr.w	r3, r3, #1
   84d5c:	4426      	add	r6, r4
   84d5e:	6062      	str	r2, [r4, #4]
   84d60:	4628      	mov	r0, r5
   84d62:	60be      	str	r6, [r7, #8]
   84d64:	3408      	adds	r4, #8
   84d66:	6073      	str	r3, [r6, #4]
   84d68:	f000 f980 	bl	8506c <__malloc_unlock>
   84d6c:	4620      	mov	r0, r4
   84d6e:	b003      	add	sp, #12
   84d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d74:	2b14      	cmp	r3, #20
   84d76:	d970      	bls.n	84e5a <_malloc_r+0x3f6>
   84d78:	2b54      	cmp	r3, #84	; 0x54
   84d7a:	f200 80a2 	bhi.w	84ec2 <_malloc_r+0x45e>
   84d7e:	0b33      	lsrs	r3, r6, #12
   84d80:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   84d84:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   84d88:	00c1      	lsls	r1, r0, #3
   84d8a:	e68d      	b.n	84aa8 <_malloc_r+0x44>
   84d8c:	20070bc8 	.word	0x20070bc8
   84d90:	200711a8 	.word	0x200711a8
   84d94:	20071178 	.word	0x20071178
   84d98:	200711a0 	.word	0x200711a0
   84d9c:	200711a4 	.word	0x200711a4
   84da0:	20070bd0 	.word	0x20070bd0
   84da4:	20070fd0 	.word	0x20070fd0
   84da8:	0a5a      	lsrs	r2, r3, #9
   84daa:	2a04      	cmp	r2, #4
   84dac:	d95b      	bls.n	84e66 <_malloc_r+0x402>
   84dae:	2a14      	cmp	r2, #20
   84db0:	f200 80ae 	bhi.w	84f10 <_malloc_r+0x4ac>
   84db4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   84db8:	00c9      	lsls	r1, r1, #3
   84dba:	325b      	adds	r2, #91	; 0x5b
   84dbc:	eb07 0c01 	add.w	ip, r7, r1
   84dc0:	5879      	ldr	r1, [r7, r1]
   84dc2:	f1ac 0c08 	sub.w	ip, ip, #8
   84dc6:	458c      	cmp	ip, r1
   84dc8:	f000 8088 	beq.w	84edc <_malloc_r+0x478>
   84dcc:	684a      	ldr	r2, [r1, #4]
   84dce:	f022 0203 	bic.w	r2, r2, #3
   84dd2:	4293      	cmp	r3, r2
   84dd4:	d273      	bcs.n	84ebe <_malloc_r+0x45a>
   84dd6:	6889      	ldr	r1, [r1, #8]
   84dd8:	458c      	cmp	ip, r1
   84dda:	d1f7      	bne.n	84dcc <_malloc_r+0x368>
   84ddc:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84de0:	687a      	ldr	r2, [r7, #4]
   84de2:	60e3      	str	r3, [r4, #12]
   84de4:	f8c4 c008 	str.w	ip, [r4, #8]
   84de8:	609c      	str	r4, [r3, #8]
   84dea:	f8cc 400c 	str.w	r4, [ip, #12]
   84dee:	e69e      	b.n	84b2e <_malloc_r+0xca>
   84df0:	f046 0c01 	orr.w	ip, r6, #1
   84df4:	f042 0101 	orr.w	r1, r2, #1
   84df8:	4426      	add	r6, r4
   84dfa:	f8c4 c004 	str.w	ip, [r4, #4]
   84dfe:	4628      	mov	r0, r5
   84e00:	617e      	str	r6, [r7, #20]
   84e02:	613e      	str	r6, [r7, #16]
   84e04:	f8c6 e00c 	str.w	lr, [r6, #12]
   84e08:	f8c6 e008 	str.w	lr, [r6, #8]
   84e0c:	6071      	str	r1, [r6, #4]
   84e0e:	50e2      	str	r2, [r4, r3]
   84e10:	f000 f92c 	bl	8506c <__malloc_unlock>
   84e14:	3408      	adds	r4, #8
   84e16:	e6eb      	b.n	84bf0 <_malloc_r+0x18c>
   84e18:	687a      	ldr	r2, [r7, #4]
   84e1a:	e688      	b.n	84b2e <_malloc_r+0xca>
   84e1c:	f108 0801 	add.w	r8, r8, #1
   84e20:	f018 0f03 	tst.w	r8, #3
   84e24:	f10c 0c08 	add.w	ip, ip, #8
   84e28:	f47f ae93 	bne.w	84b52 <_malloc_r+0xee>
   84e2c:	e02d      	b.n	84e8a <_malloc_r+0x426>
   84e2e:	68dc      	ldr	r4, [r3, #12]
   84e30:	42a3      	cmp	r3, r4
   84e32:	bf08      	it	eq
   84e34:	3002      	addeq	r0, #2
   84e36:	f43f ae4b 	beq.w	84ad0 <_malloc_r+0x6c>
   84e3a:	e6c9      	b.n	84bd0 <_malloc_r+0x16c>
   84e3c:	461c      	mov	r4, r3
   84e3e:	4419      	add	r1, r3
   84e40:	684a      	ldr	r2, [r1, #4]
   84e42:	68db      	ldr	r3, [r3, #12]
   84e44:	f854 6f08 	ldr.w	r6, [r4, #8]!
   84e48:	f042 0201 	orr.w	r2, r2, #1
   84e4c:	604a      	str	r2, [r1, #4]
   84e4e:	4628      	mov	r0, r5
   84e50:	60f3      	str	r3, [r6, #12]
   84e52:	609e      	str	r6, [r3, #8]
   84e54:	f000 f90a 	bl	8506c <__malloc_unlock>
   84e58:	e6ca      	b.n	84bf0 <_malloc_r+0x18c>
   84e5a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   84e5e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   84e62:	00c1      	lsls	r1, r0, #3
   84e64:	e620      	b.n	84aa8 <_malloc_r+0x44>
   84e66:	099a      	lsrs	r2, r3, #6
   84e68:	f102 0139 	add.w	r1, r2, #57	; 0x39
   84e6c:	00c9      	lsls	r1, r1, #3
   84e6e:	3238      	adds	r2, #56	; 0x38
   84e70:	e7a4      	b.n	84dbc <_malloc_r+0x358>
   84e72:	42bc      	cmp	r4, r7
   84e74:	d054      	beq.n	84f20 <_malloc_r+0x4bc>
   84e76:	68bc      	ldr	r4, [r7, #8]
   84e78:	6862      	ldr	r2, [r4, #4]
   84e7a:	f022 0203 	bic.w	r2, r2, #3
   84e7e:	e75e      	b.n	84d3e <_malloc_r+0x2da>
   84e80:	f859 3908 	ldr.w	r3, [r9], #-8
   84e84:	4599      	cmp	r9, r3
   84e86:	f040 8086 	bne.w	84f96 <_malloc_r+0x532>
   84e8a:	f010 0f03 	tst.w	r0, #3
   84e8e:	f100 30ff 	add.w	r0, r0, #4294967295
   84e92:	d1f5      	bne.n	84e80 <_malloc_r+0x41c>
   84e94:	687b      	ldr	r3, [r7, #4]
   84e96:	ea23 0304 	bic.w	r3, r3, r4
   84e9a:	607b      	str	r3, [r7, #4]
   84e9c:	0064      	lsls	r4, r4, #1
   84e9e:	429c      	cmp	r4, r3
   84ea0:	f63f aec8 	bhi.w	84c34 <_malloc_r+0x1d0>
   84ea4:	2c00      	cmp	r4, #0
   84ea6:	f43f aec5 	beq.w	84c34 <_malloc_r+0x1d0>
   84eaa:	421c      	tst	r4, r3
   84eac:	4640      	mov	r0, r8
   84eae:	f47f ae4c 	bne.w	84b4a <_malloc_r+0xe6>
   84eb2:	0064      	lsls	r4, r4, #1
   84eb4:	421c      	tst	r4, r3
   84eb6:	f100 0004 	add.w	r0, r0, #4
   84eba:	d0fa      	beq.n	84eb2 <_malloc_r+0x44e>
   84ebc:	e645      	b.n	84b4a <_malloc_r+0xe6>
   84ebe:	468c      	mov	ip, r1
   84ec0:	e78c      	b.n	84ddc <_malloc_r+0x378>
   84ec2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   84ec6:	d815      	bhi.n	84ef4 <_malloc_r+0x490>
   84ec8:	0bf3      	lsrs	r3, r6, #15
   84eca:	f103 0078 	add.w	r0, r3, #120	; 0x78
   84ece:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   84ed2:	00c1      	lsls	r1, r0, #3
   84ed4:	e5e8      	b.n	84aa8 <_malloc_r+0x44>
   84ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   84eda:	e6ee      	b.n	84cba <_malloc_r+0x256>
   84edc:	2101      	movs	r1, #1
   84ede:	687b      	ldr	r3, [r7, #4]
   84ee0:	1092      	asrs	r2, r2, #2
   84ee2:	fa01 f202 	lsl.w	r2, r1, r2
   84ee6:	431a      	orrs	r2, r3
   84ee8:	607a      	str	r2, [r7, #4]
   84eea:	4663      	mov	r3, ip
   84eec:	e779      	b.n	84de2 <_malloc_r+0x37e>
   84eee:	2301      	movs	r3, #1
   84ef0:	6053      	str	r3, [r2, #4]
   84ef2:	e72a      	b.n	84d4a <_malloc_r+0x2e6>
   84ef4:	f240 5254 	movw	r2, #1364	; 0x554
   84ef8:	4293      	cmp	r3, r2
   84efa:	d822      	bhi.n	84f42 <_malloc_r+0x4de>
   84efc:	0cb3      	lsrs	r3, r6, #18
   84efe:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   84f02:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   84f06:	00c1      	lsls	r1, r0, #3
   84f08:	e5ce      	b.n	84aa8 <_malloc_r+0x44>
   84f0a:	f103 0b10 	add.w	fp, r3, #16
   84f0e:	e6af      	b.n	84c70 <_malloc_r+0x20c>
   84f10:	2a54      	cmp	r2, #84	; 0x54
   84f12:	d829      	bhi.n	84f68 <_malloc_r+0x504>
   84f14:	0b1a      	lsrs	r2, r3, #12
   84f16:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   84f1a:	00c9      	lsls	r1, r1, #3
   84f1c:	326e      	adds	r2, #110	; 0x6e
   84f1e:	e74d      	b.n	84dbc <_malloc_r+0x358>
   84f20:	4b20      	ldr	r3, [pc, #128]	; (84fa4 <_malloc_r+0x540>)
   84f22:	6819      	ldr	r1, [r3, #0]
   84f24:	4459      	add	r1, fp
   84f26:	6019      	str	r1, [r3, #0]
   84f28:	e6b3      	b.n	84c92 <_malloc_r+0x22e>
   84f2a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   84f2e:	2800      	cmp	r0, #0
   84f30:	f47f aeaf 	bne.w	84c92 <_malloc_r+0x22e>
   84f34:	eb08 030b 	add.w	r3, r8, fp
   84f38:	68ba      	ldr	r2, [r7, #8]
   84f3a:	f043 0301 	orr.w	r3, r3, #1
   84f3e:	6053      	str	r3, [r2, #4]
   84f40:	e6ef      	b.n	84d22 <_malloc_r+0x2be>
   84f42:	207f      	movs	r0, #127	; 0x7f
   84f44:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84f48:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   84f4c:	e5ac      	b.n	84aa8 <_malloc_r+0x44>
   84f4e:	f104 0108 	add.w	r1, r4, #8
   84f52:	4628      	mov	r0, r5
   84f54:	9300      	str	r3, [sp, #0]
   84f56:	f000 fd09 	bl	8596c <_free_r>
   84f5a:	9b00      	ldr	r3, [sp, #0]
   84f5c:	6819      	ldr	r1, [r3, #0]
   84f5e:	e6e0      	b.n	84d22 <_malloc_r+0x2be>
   84f60:	2001      	movs	r0, #1
   84f62:	f04f 0900 	mov.w	r9, #0
   84f66:	e6bd      	b.n	84ce4 <_malloc_r+0x280>
   84f68:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84f6c:	d805      	bhi.n	84f7a <_malloc_r+0x516>
   84f6e:	0bda      	lsrs	r2, r3, #15
   84f70:	f102 0178 	add.w	r1, r2, #120	; 0x78
   84f74:	00c9      	lsls	r1, r1, #3
   84f76:	3277      	adds	r2, #119	; 0x77
   84f78:	e720      	b.n	84dbc <_malloc_r+0x358>
   84f7a:	f240 5154 	movw	r1, #1364	; 0x554
   84f7e:	428a      	cmp	r2, r1
   84f80:	d805      	bhi.n	84f8e <_malloc_r+0x52a>
   84f82:	0c9a      	lsrs	r2, r3, #18
   84f84:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   84f88:	00c9      	lsls	r1, r1, #3
   84f8a:	327c      	adds	r2, #124	; 0x7c
   84f8c:	e716      	b.n	84dbc <_malloc_r+0x358>
   84f8e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84f92:	227e      	movs	r2, #126	; 0x7e
   84f94:	e712      	b.n	84dbc <_malloc_r+0x358>
   84f96:	687b      	ldr	r3, [r7, #4]
   84f98:	e780      	b.n	84e9c <_malloc_r+0x438>
   84f9a:	08f0      	lsrs	r0, r6, #3
   84f9c:	f106 0308 	add.w	r3, r6, #8
   84fa0:	e60e      	b.n	84bc0 <_malloc_r+0x15c>
   84fa2:	bf00      	nop
   84fa4:	20071178 	.word	0x20071178

00084fa8 <__ascii_mbtowc>:
   84fa8:	b082      	sub	sp, #8
   84faa:	b149      	cbz	r1, 84fc0 <__ascii_mbtowc+0x18>
   84fac:	b15a      	cbz	r2, 84fc6 <__ascii_mbtowc+0x1e>
   84fae:	b16b      	cbz	r3, 84fcc <__ascii_mbtowc+0x24>
   84fb0:	7813      	ldrb	r3, [r2, #0]
   84fb2:	600b      	str	r3, [r1, #0]
   84fb4:	7812      	ldrb	r2, [r2, #0]
   84fb6:	1c10      	adds	r0, r2, #0
   84fb8:	bf18      	it	ne
   84fba:	2001      	movne	r0, #1
   84fbc:	b002      	add	sp, #8
   84fbe:	4770      	bx	lr
   84fc0:	a901      	add	r1, sp, #4
   84fc2:	2a00      	cmp	r2, #0
   84fc4:	d1f3      	bne.n	84fae <__ascii_mbtowc+0x6>
   84fc6:	4610      	mov	r0, r2
   84fc8:	b002      	add	sp, #8
   84fca:	4770      	bx	lr
   84fcc:	f06f 0001 	mvn.w	r0, #1
   84fd0:	e7f4      	b.n	84fbc <__ascii_mbtowc+0x14>
   84fd2:	bf00      	nop

00084fd4 <memchr>:
   84fd4:	0783      	lsls	r3, r0, #30
   84fd6:	b470      	push	{r4, r5, r6}
   84fd8:	b2cd      	uxtb	r5, r1
   84fda:	d03d      	beq.n	85058 <memchr+0x84>
   84fdc:	1e54      	subs	r4, r2, #1
   84fde:	b30a      	cbz	r2, 85024 <memchr+0x50>
   84fe0:	7803      	ldrb	r3, [r0, #0]
   84fe2:	42ab      	cmp	r3, r5
   84fe4:	d01f      	beq.n	85026 <memchr+0x52>
   84fe6:	1c43      	adds	r3, r0, #1
   84fe8:	e005      	b.n	84ff6 <memchr+0x22>
   84fea:	f114 34ff 	adds.w	r4, r4, #4294967295
   84fee:	d319      	bcc.n	85024 <memchr+0x50>
   84ff0:	7802      	ldrb	r2, [r0, #0]
   84ff2:	42aa      	cmp	r2, r5
   84ff4:	d017      	beq.n	85026 <memchr+0x52>
   84ff6:	f013 0f03 	tst.w	r3, #3
   84ffa:	4618      	mov	r0, r3
   84ffc:	f103 0301 	add.w	r3, r3, #1
   85000:	d1f3      	bne.n	84fea <memchr+0x16>
   85002:	2c03      	cmp	r4, #3
   85004:	d811      	bhi.n	8502a <memchr+0x56>
   85006:	b34c      	cbz	r4, 8505c <memchr+0x88>
   85008:	7803      	ldrb	r3, [r0, #0]
   8500a:	42ab      	cmp	r3, r5
   8500c:	d00b      	beq.n	85026 <memchr+0x52>
   8500e:	4404      	add	r4, r0
   85010:	1c43      	adds	r3, r0, #1
   85012:	e002      	b.n	8501a <memchr+0x46>
   85014:	7802      	ldrb	r2, [r0, #0]
   85016:	42aa      	cmp	r2, r5
   85018:	d005      	beq.n	85026 <memchr+0x52>
   8501a:	429c      	cmp	r4, r3
   8501c:	4618      	mov	r0, r3
   8501e:	f103 0301 	add.w	r3, r3, #1
   85022:	d1f7      	bne.n	85014 <memchr+0x40>
   85024:	2000      	movs	r0, #0
   85026:	bc70      	pop	{r4, r5, r6}
   85028:	4770      	bx	lr
   8502a:	0209      	lsls	r1, r1, #8
   8502c:	b289      	uxth	r1, r1
   8502e:	4329      	orrs	r1, r5
   85030:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   85034:	6803      	ldr	r3, [r0, #0]
   85036:	4606      	mov	r6, r0
   85038:	404b      	eors	r3, r1
   8503a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8503e:	ea22 0303 	bic.w	r3, r2, r3
   85042:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   85046:	f100 0004 	add.w	r0, r0, #4
   8504a:	d103      	bne.n	85054 <memchr+0x80>
   8504c:	3c04      	subs	r4, #4
   8504e:	2c03      	cmp	r4, #3
   85050:	d8f0      	bhi.n	85034 <memchr+0x60>
   85052:	e7d8      	b.n	85006 <memchr+0x32>
   85054:	4630      	mov	r0, r6
   85056:	e7d7      	b.n	85008 <memchr+0x34>
   85058:	4614      	mov	r4, r2
   8505a:	e7d2      	b.n	85002 <memchr+0x2e>
   8505c:	4620      	mov	r0, r4
   8505e:	e7e2      	b.n	85026 <memchr+0x52>

00085060 <__malloc_lock>:
   85060:	4801      	ldr	r0, [pc, #4]	; (85068 <__malloc_lock+0x8>)
   85062:	f7ff bcfb 	b.w	84a5c <__retarget_lock_acquire_recursive>
   85066:	bf00      	nop
   85068:	20071680 	.word	0x20071680

0008506c <__malloc_unlock>:
   8506c:	4801      	ldr	r0, [pc, #4]	; (85074 <__malloc_unlock+0x8>)
   8506e:	f7ff bcf7 	b.w	84a60 <__retarget_lock_release_recursive>
   85072:	bf00      	nop
   85074:	20071680 	.word	0x20071680

00085078 <_Balloc>:
   85078:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8507a:	b570      	push	{r4, r5, r6, lr}
   8507c:	4605      	mov	r5, r0
   8507e:	460c      	mov	r4, r1
   85080:	b14b      	cbz	r3, 85096 <_Balloc+0x1e>
   85082:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   85086:	b180      	cbz	r0, 850aa <_Balloc+0x32>
   85088:	6802      	ldr	r2, [r0, #0]
   8508a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8508e:	2300      	movs	r3, #0
   85090:	6103      	str	r3, [r0, #16]
   85092:	60c3      	str	r3, [r0, #12]
   85094:	bd70      	pop	{r4, r5, r6, pc}
   85096:	2221      	movs	r2, #33	; 0x21
   85098:	2104      	movs	r1, #4
   8509a:	f000 fbe7 	bl	8586c <_calloc_r>
   8509e:	64e8      	str	r0, [r5, #76]	; 0x4c
   850a0:	4603      	mov	r3, r0
   850a2:	2800      	cmp	r0, #0
   850a4:	d1ed      	bne.n	85082 <_Balloc+0xa>
   850a6:	2000      	movs	r0, #0
   850a8:	bd70      	pop	{r4, r5, r6, pc}
   850aa:	2101      	movs	r1, #1
   850ac:	fa01 f604 	lsl.w	r6, r1, r4
   850b0:	1d72      	adds	r2, r6, #5
   850b2:	4628      	mov	r0, r5
   850b4:	0092      	lsls	r2, r2, #2
   850b6:	f000 fbd9 	bl	8586c <_calloc_r>
   850ba:	2800      	cmp	r0, #0
   850bc:	d0f3      	beq.n	850a6 <_Balloc+0x2e>
   850be:	6044      	str	r4, [r0, #4]
   850c0:	6086      	str	r6, [r0, #8]
   850c2:	e7e4      	b.n	8508e <_Balloc+0x16>

000850c4 <_Bfree>:
   850c4:	b131      	cbz	r1, 850d4 <_Bfree+0x10>
   850c6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   850c8:	684a      	ldr	r2, [r1, #4]
   850ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   850ce:	6008      	str	r0, [r1, #0]
   850d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   850d4:	4770      	bx	lr
   850d6:	bf00      	nop

000850d8 <__multadd>:
   850d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   850da:	460c      	mov	r4, r1
   850dc:	4605      	mov	r5, r0
   850de:	f04f 0e00 	mov.w	lr, #0
   850e2:	690e      	ldr	r6, [r1, #16]
   850e4:	b083      	sub	sp, #12
   850e6:	f101 0714 	add.w	r7, r1, #20
   850ea:	6838      	ldr	r0, [r7, #0]
   850ec:	f10e 0e01 	add.w	lr, lr, #1
   850f0:	b281      	uxth	r1, r0
   850f2:	fb02 3301 	mla	r3, r2, r1, r3
   850f6:	0c01      	lsrs	r1, r0, #16
   850f8:	0c18      	lsrs	r0, r3, #16
   850fa:	fb02 0101 	mla	r1, r2, r1, r0
   850fe:	b29b      	uxth	r3, r3
   85100:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   85104:	4576      	cmp	r6, lr
   85106:	f847 3b04 	str.w	r3, [r7], #4
   8510a:	ea4f 4311 	mov.w	r3, r1, lsr #16
   8510e:	dcec      	bgt.n	850ea <__multadd+0x12>
   85110:	b13b      	cbz	r3, 85122 <__multadd+0x4a>
   85112:	68a2      	ldr	r2, [r4, #8]
   85114:	4296      	cmp	r6, r2
   85116:	da07      	bge.n	85128 <__multadd+0x50>
   85118:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   8511c:	3601      	adds	r6, #1
   8511e:	6153      	str	r3, [r2, #20]
   85120:	6126      	str	r6, [r4, #16]
   85122:	4620      	mov	r0, r4
   85124:	b003      	add	sp, #12
   85126:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85128:	6861      	ldr	r1, [r4, #4]
   8512a:	4628      	mov	r0, r5
   8512c:	3101      	adds	r1, #1
   8512e:	9301      	str	r3, [sp, #4]
   85130:	f7ff ffa2 	bl	85078 <_Balloc>
   85134:	4607      	mov	r7, r0
   85136:	6922      	ldr	r2, [r4, #16]
   85138:	f104 010c 	add.w	r1, r4, #12
   8513c:	3202      	adds	r2, #2
   8513e:	0092      	lsls	r2, r2, #2
   85140:	300c      	adds	r0, #12
   85142:	f7fd f81b 	bl	8217c <memcpy>
   85146:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   85148:	6861      	ldr	r1, [r4, #4]
   8514a:	9b01      	ldr	r3, [sp, #4]
   8514c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   85150:	6020      	str	r0, [r4, #0]
   85152:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   85156:	463c      	mov	r4, r7
   85158:	e7de      	b.n	85118 <__multadd+0x40>
   8515a:	bf00      	nop

0008515c <__hi0bits>:
   8515c:	0c02      	lsrs	r2, r0, #16
   8515e:	0412      	lsls	r2, r2, #16
   85160:	4603      	mov	r3, r0
   85162:	b9b2      	cbnz	r2, 85192 <__hi0bits+0x36>
   85164:	0403      	lsls	r3, r0, #16
   85166:	2010      	movs	r0, #16
   85168:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8516c:	bf04      	itt	eq
   8516e:	021b      	lsleq	r3, r3, #8
   85170:	3008      	addeq	r0, #8
   85172:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   85176:	bf04      	itt	eq
   85178:	011b      	lsleq	r3, r3, #4
   8517a:	3004      	addeq	r0, #4
   8517c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   85180:	bf04      	itt	eq
   85182:	009b      	lsleq	r3, r3, #2
   85184:	3002      	addeq	r0, #2
   85186:	2b00      	cmp	r3, #0
   85188:	db02      	blt.n	85190 <__hi0bits+0x34>
   8518a:	005b      	lsls	r3, r3, #1
   8518c:	d403      	bmi.n	85196 <__hi0bits+0x3a>
   8518e:	2020      	movs	r0, #32
   85190:	4770      	bx	lr
   85192:	2000      	movs	r0, #0
   85194:	e7e8      	b.n	85168 <__hi0bits+0xc>
   85196:	3001      	adds	r0, #1
   85198:	4770      	bx	lr
   8519a:	bf00      	nop

0008519c <__lo0bits>:
   8519c:	6803      	ldr	r3, [r0, #0]
   8519e:	4601      	mov	r1, r0
   851a0:	f013 0207 	ands.w	r2, r3, #7
   851a4:	d007      	beq.n	851b6 <__lo0bits+0x1a>
   851a6:	07da      	lsls	r2, r3, #31
   851a8:	d421      	bmi.n	851ee <__lo0bits+0x52>
   851aa:	0798      	lsls	r0, r3, #30
   851ac:	d421      	bmi.n	851f2 <__lo0bits+0x56>
   851ae:	089b      	lsrs	r3, r3, #2
   851b0:	600b      	str	r3, [r1, #0]
   851b2:	2002      	movs	r0, #2
   851b4:	4770      	bx	lr
   851b6:	b298      	uxth	r0, r3
   851b8:	b198      	cbz	r0, 851e2 <__lo0bits+0x46>
   851ba:	4610      	mov	r0, r2
   851bc:	f013 0fff 	tst.w	r3, #255	; 0xff
   851c0:	bf04      	itt	eq
   851c2:	0a1b      	lsreq	r3, r3, #8
   851c4:	3008      	addeq	r0, #8
   851c6:	071a      	lsls	r2, r3, #28
   851c8:	bf04      	itt	eq
   851ca:	091b      	lsreq	r3, r3, #4
   851cc:	3004      	addeq	r0, #4
   851ce:	079a      	lsls	r2, r3, #30
   851d0:	bf04      	itt	eq
   851d2:	089b      	lsreq	r3, r3, #2
   851d4:	3002      	addeq	r0, #2
   851d6:	07da      	lsls	r2, r3, #31
   851d8:	d407      	bmi.n	851ea <__lo0bits+0x4e>
   851da:	085b      	lsrs	r3, r3, #1
   851dc:	d104      	bne.n	851e8 <__lo0bits+0x4c>
   851de:	2020      	movs	r0, #32
   851e0:	4770      	bx	lr
   851e2:	0c1b      	lsrs	r3, r3, #16
   851e4:	2010      	movs	r0, #16
   851e6:	e7e9      	b.n	851bc <__lo0bits+0x20>
   851e8:	3001      	adds	r0, #1
   851ea:	600b      	str	r3, [r1, #0]
   851ec:	4770      	bx	lr
   851ee:	2000      	movs	r0, #0
   851f0:	4770      	bx	lr
   851f2:	085b      	lsrs	r3, r3, #1
   851f4:	600b      	str	r3, [r1, #0]
   851f6:	2001      	movs	r0, #1
   851f8:	4770      	bx	lr
   851fa:	bf00      	nop

000851fc <__i2b>:
   851fc:	b510      	push	{r4, lr}
   851fe:	460c      	mov	r4, r1
   85200:	2101      	movs	r1, #1
   85202:	f7ff ff39 	bl	85078 <_Balloc>
   85206:	2201      	movs	r2, #1
   85208:	6144      	str	r4, [r0, #20]
   8520a:	6102      	str	r2, [r0, #16]
   8520c:	bd10      	pop	{r4, pc}
   8520e:	bf00      	nop

00085210 <__multiply>:
   85210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85214:	690c      	ldr	r4, [r1, #16]
   85216:	6915      	ldr	r5, [r2, #16]
   85218:	b083      	sub	sp, #12
   8521a:	42ac      	cmp	r4, r5
   8521c:	468b      	mov	fp, r1
   8521e:	4616      	mov	r6, r2
   85220:	da04      	bge.n	8522c <__multiply+0x1c>
   85222:	4622      	mov	r2, r4
   85224:	46b3      	mov	fp, r6
   85226:	462c      	mov	r4, r5
   85228:	460e      	mov	r6, r1
   8522a:	4615      	mov	r5, r2
   8522c:	f8db 3008 	ldr.w	r3, [fp, #8]
   85230:	eb04 0805 	add.w	r8, r4, r5
   85234:	f8db 1004 	ldr.w	r1, [fp, #4]
   85238:	4598      	cmp	r8, r3
   8523a:	bfc8      	it	gt
   8523c:	3101      	addgt	r1, #1
   8523e:	f7ff ff1b 	bl	85078 <_Balloc>
   85242:	f100 0914 	add.w	r9, r0, #20
   85246:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8524a:	45d1      	cmp	r9, sl
   8524c:	9000      	str	r0, [sp, #0]
   8524e:	d205      	bcs.n	8525c <__multiply+0x4c>
   85250:	464b      	mov	r3, r9
   85252:	2100      	movs	r1, #0
   85254:	f843 1b04 	str.w	r1, [r3], #4
   85258:	459a      	cmp	sl, r3
   8525a:	d8fb      	bhi.n	85254 <__multiply+0x44>
   8525c:	f106 0c14 	add.w	ip, r6, #20
   85260:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   85264:	f10b 0b14 	add.w	fp, fp, #20
   85268:	459c      	cmp	ip, r3
   8526a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   8526e:	d24b      	bcs.n	85308 <__multiply+0xf8>
   85270:	f8cd a004 	str.w	sl, [sp, #4]
   85274:	469a      	mov	sl, r3
   85276:	f8dc 5000 	ldr.w	r5, [ip]
   8527a:	b2af      	uxth	r7, r5
   8527c:	b1e7      	cbz	r7, 852b8 <__multiply+0xa8>
   8527e:	464d      	mov	r5, r9
   85280:	465e      	mov	r6, fp
   85282:	2100      	movs	r1, #0
   85284:	f856 2b04 	ldr.w	r2, [r6], #4
   85288:	6828      	ldr	r0, [r5, #0]
   8528a:	b293      	uxth	r3, r2
   8528c:	b284      	uxth	r4, r0
   8528e:	0c12      	lsrs	r2, r2, #16
   85290:	fb07 4303 	mla	r3, r7, r3, r4
   85294:	0c00      	lsrs	r0, r0, #16
   85296:	fb07 0202 	mla	r2, r7, r2, r0
   8529a:	440b      	add	r3, r1
   8529c:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   852a0:	b29b      	uxth	r3, r3
   852a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   852a6:	45b6      	cmp	lr, r6
   852a8:	f845 3b04 	str.w	r3, [r5], #4
   852ac:	ea4f 4111 	mov.w	r1, r1, lsr #16
   852b0:	d8e8      	bhi.n	85284 <__multiply+0x74>
   852b2:	6029      	str	r1, [r5, #0]
   852b4:	f8dc 5000 	ldr.w	r5, [ip]
   852b8:	0c2d      	lsrs	r5, r5, #16
   852ba:	d01d      	beq.n	852f8 <__multiply+0xe8>
   852bc:	f8d9 3000 	ldr.w	r3, [r9]
   852c0:	4648      	mov	r0, r9
   852c2:	461c      	mov	r4, r3
   852c4:	4659      	mov	r1, fp
   852c6:	2200      	movs	r2, #0
   852c8:	880e      	ldrh	r6, [r1, #0]
   852ca:	0c24      	lsrs	r4, r4, #16
   852cc:	fb05 4406 	mla	r4, r5, r6, r4
   852d0:	b29b      	uxth	r3, r3
   852d2:	4422      	add	r2, r4
   852d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   852d8:	f840 3b04 	str.w	r3, [r0], #4
   852dc:	f851 3b04 	ldr.w	r3, [r1], #4
   852e0:	6804      	ldr	r4, [r0, #0]
   852e2:	0c1b      	lsrs	r3, r3, #16
   852e4:	b2a6      	uxth	r6, r4
   852e6:	fb05 6303 	mla	r3, r5, r3, r6
   852ea:	458e      	cmp	lr, r1
   852ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   852f0:	ea4f 4213 	mov.w	r2, r3, lsr #16
   852f4:	d8e8      	bhi.n	852c8 <__multiply+0xb8>
   852f6:	6003      	str	r3, [r0, #0]
   852f8:	f10c 0c04 	add.w	ip, ip, #4
   852fc:	45e2      	cmp	sl, ip
   852fe:	f109 0904 	add.w	r9, r9, #4
   85302:	d8b8      	bhi.n	85276 <__multiply+0x66>
   85304:	f8dd a004 	ldr.w	sl, [sp, #4]
   85308:	f1b8 0f00 	cmp.w	r8, #0
   8530c:	dd0b      	ble.n	85326 <__multiply+0x116>
   8530e:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   85312:	f1aa 0a04 	sub.w	sl, sl, #4
   85316:	b11b      	cbz	r3, 85320 <__multiply+0x110>
   85318:	e005      	b.n	85326 <__multiply+0x116>
   8531a:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8531e:	b913      	cbnz	r3, 85326 <__multiply+0x116>
   85320:	f1b8 0801 	subs.w	r8, r8, #1
   85324:	d1f9      	bne.n	8531a <__multiply+0x10a>
   85326:	9800      	ldr	r0, [sp, #0]
   85328:	f8c0 8010 	str.w	r8, [r0, #16]
   8532c:	b003      	add	sp, #12
   8532e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85332:	bf00      	nop

00085334 <__pow5mult>:
   85334:	f012 0303 	ands.w	r3, r2, #3
   85338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8533c:	4614      	mov	r4, r2
   8533e:	4607      	mov	r7, r0
   85340:	d12e      	bne.n	853a0 <__pow5mult+0x6c>
   85342:	460d      	mov	r5, r1
   85344:	10a4      	asrs	r4, r4, #2
   85346:	d01c      	beq.n	85382 <__pow5mult+0x4e>
   85348:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   8534a:	b396      	cbz	r6, 853b2 <__pow5mult+0x7e>
   8534c:	07e3      	lsls	r3, r4, #31
   8534e:	f04f 0800 	mov.w	r8, #0
   85352:	d406      	bmi.n	85362 <__pow5mult+0x2e>
   85354:	1064      	asrs	r4, r4, #1
   85356:	d014      	beq.n	85382 <__pow5mult+0x4e>
   85358:	6830      	ldr	r0, [r6, #0]
   8535a:	b1a8      	cbz	r0, 85388 <__pow5mult+0x54>
   8535c:	4606      	mov	r6, r0
   8535e:	07e3      	lsls	r3, r4, #31
   85360:	d5f8      	bpl.n	85354 <__pow5mult+0x20>
   85362:	4632      	mov	r2, r6
   85364:	4629      	mov	r1, r5
   85366:	4638      	mov	r0, r7
   85368:	f7ff ff52 	bl	85210 <__multiply>
   8536c:	b1b5      	cbz	r5, 8539c <__pow5mult+0x68>
   8536e:	686a      	ldr	r2, [r5, #4]
   85370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   85372:	1064      	asrs	r4, r4, #1
   85374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   85378:	6029      	str	r1, [r5, #0]
   8537a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8537e:	4605      	mov	r5, r0
   85380:	d1ea      	bne.n	85358 <__pow5mult+0x24>
   85382:	4628      	mov	r0, r5
   85384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85388:	4632      	mov	r2, r6
   8538a:	4631      	mov	r1, r6
   8538c:	4638      	mov	r0, r7
   8538e:	f7ff ff3f 	bl	85210 <__multiply>
   85392:	6030      	str	r0, [r6, #0]
   85394:	f8c0 8000 	str.w	r8, [r0]
   85398:	4606      	mov	r6, r0
   8539a:	e7e0      	b.n	8535e <__pow5mult+0x2a>
   8539c:	4605      	mov	r5, r0
   8539e:	e7d9      	b.n	85354 <__pow5mult+0x20>
   853a0:	4a0b      	ldr	r2, [pc, #44]	; (853d0 <__pow5mult+0x9c>)
   853a2:	3b01      	subs	r3, #1
   853a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   853a8:	2300      	movs	r3, #0
   853aa:	f7ff fe95 	bl	850d8 <__multadd>
   853ae:	4605      	mov	r5, r0
   853b0:	e7c8      	b.n	85344 <__pow5mult+0x10>
   853b2:	2101      	movs	r1, #1
   853b4:	4638      	mov	r0, r7
   853b6:	f7ff fe5f 	bl	85078 <_Balloc>
   853ba:	f240 2171 	movw	r1, #625	; 0x271
   853be:	2201      	movs	r2, #1
   853c0:	2300      	movs	r3, #0
   853c2:	6141      	str	r1, [r0, #20]
   853c4:	6102      	str	r2, [r0, #16]
   853c6:	4606      	mov	r6, r0
   853c8:	64b8      	str	r0, [r7, #72]	; 0x48
   853ca:	6003      	str	r3, [r0, #0]
   853cc:	e7be      	b.n	8534c <__pow5mult+0x18>
   853ce:	bf00      	nop
   853d0:	00086fa8 	.word	0x00086fa8

000853d4 <__lshift>:
   853d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   853d8:	690b      	ldr	r3, [r1, #16]
   853da:	1154      	asrs	r4, r2, #5
   853dc:	eb04 0803 	add.w	r8, r4, r3
   853e0:	688b      	ldr	r3, [r1, #8]
   853e2:	f108 0501 	add.w	r5, r8, #1
   853e6:	429d      	cmp	r5, r3
   853e8:	460e      	mov	r6, r1
   853ea:	4691      	mov	r9, r2
   853ec:	4607      	mov	r7, r0
   853ee:	6849      	ldr	r1, [r1, #4]
   853f0:	dd04      	ble.n	853fc <__lshift+0x28>
   853f2:	005b      	lsls	r3, r3, #1
   853f4:	429d      	cmp	r5, r3
   853f6:	f101 0101 	add.w	r1, r1, #1
   853fa:	dcfa      	bgt.n	853f2 <__lshift+0x1e>
   853fc:	4638      	mov	r0, r7
   853fe:	f7ff fe3b 	bl	85078 <_Balloc>
   85402:	2c00      	cmp	r4, #0
   85404:	f100 0314 	add.w	r3, r0, #20
   85408:	dd06      	ble.n	85418 <__lshift+0x44>
   8540a:	2100      	movs	r1, #0
   8540c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   85410:	f843 1b04 	str.w	r1, [r3], #4
   85414:	429a      	cmp	r2, r3
   85416:	d1fb      	bne.n	85410 <__lshift+0x3c>
   85418:	6934      	ldr	r4, [r6, #16]
   8541a:	f106 0114 	add.w	r1, r6, #20
   8541e:	f019 091f 	ands.w	r9, r9, #31
   85422:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   85426:	d01d      	beq.n	85464 <__lshift+0x90>
   85428:	2200      	movs	r2, #0
   8542a:	f1c9 0c20 	rsb	ip, r9, #32
   8542e:	680c      	ldr	r4, [r1, #0]
   85430:	fa04 f409 	lsl.w	r4, r4, r9
   85434:	4314      	orrs	r4, r2
   85436:	f843 4b04 	str.w	r4, [r3], #4
   8543a:	f851 2b04 	ldr.w	r2, [r1], #4
   8543e:	458e      	cmp	lr, r1
   85440:	fa22 f20c 	lsr.w	r2, r2, ip
   85444:	d8f3      	bhi.n	8542e <__lshift+0x5a>
   85446:	601a      	str	r2, [r3, #0]
   85448:	b10a      	cbz	r2, 8544e <__lshift+0x7a>
   8544a:	f108 0502 	add.w	r5, r8, #2
   8544e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   85450:	6872      	ldr	r2, [r6, #4]
   85452:	3d01      	subs	r5, #1
   85454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   85458:	6105      	str	r5, [r0, #16]
   8545a:	6031      	str	r1, [r6, #0]
   8545c:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   85460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85464:	3b04      	subs	r3, #4
   85466:	f851 2b04 	ldr.w	r2, [r1], #4
   8546a:	458e      	cmp	lr, r1
   8546c:	f843 2f04 	str.w	r2, [r3, #4]!
   85470:	d8f9      	bhi.n	85466 <__lshift+0x92>
   85472:	e7ec      	b.n	8544e <__lshift+0x7a>

00085474 <__mcmp>:
   85474:	b430      	push	{r4, r5}
   85476:	690b      	ldr	r3, [r1, #16]
   85478:	4605      	mov	r5, r0
   8547a:	6900      	ldr	r0, [r0, #16]
   8547c:	1ac0      	subs	r0, r0, r3
   8547e:	d10f      	bne.n	854a0 <__mcmp+0x2c>
   85480:	009b      	lsls	r3, r3, #2
   85482:	3514      	adds	r5, #20
   85484:	3114      	adds	r1, #20
   85486:	4419      	add	r1, r3
   85488:	442b      	add	r3, r5
   8548a:	e001      	b.n	85490 <__mcmp+0x1c>
   8548c:	429d      	cmp	r5, r3
   8548e:	d207      	bcs.n	854a0 <__mcmp+0x2c>
   85490:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   85494:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   85498:	4294      	cmp	r4, r2
   8549a:	d0f7      	beq.n	8548c <__mcmp+0x18>
   8549c:	d302      	bcc.n	854a4 <__mcmp+0x30>
   8549e:	2001      	movs	r0, #1
   854a0:	bc30      	pop	{r4, r5}
   854a2:	4770      	bx	lr
   854a4:	f04f 30ff 	mov.w	r0, #4294967295
   854a8:	e7fa      	b.n	854a0 <__mcmp+0x2c>
   854aa:	bf00      	nop

000854ac <__mdiff>:
   854ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   854b0:	690c      	ldr	r4, [r1, #16]
   854b2:	4689      	mov	r9, r1
   854b4:	6911      	ldr	r1, [r2, #16]
   854b6:	4692      	mov	sl, r2
   854b8:	1a64      	subs	r4, r4, r1
   854ba:	2c00      	cmp	r4, #0
   854bc:	d117      	bne.n	854ee <__mdiff+0x42>
   854be:	0089      	lsls	r1, r1, #2
   854c0:	f109 0714 	add.w	r7, r9, #20
   854c4:	f102 0614 	add.w	r6, r2, #20
   854c8:	187b      	adds	r3, r7, r1
   854ca:	4431      	add	r1, r6
   854cc:	e001      	b.n	854d2 <__mdiff+0x26>
   854ce:	429f      	cmp	r7, r3
   854d0:	d265      	bcs.n	8559e <__mdiff+0xf2>
   854d2:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   854d6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   854da:	4295      	cmp	r5, r2
   854dc:	d0f7      	beq.n	854ce <__mdiff+0x22>
   854de:	d267      	bcs.n	855b0 <__mdiff+0x104>
   854e0:	464b      	mov	r3, r9
   854e2:	46bb      	mov	fp, r7
   854e4:	46d1      	mov	r9, sl
   854e6:	4637      	mov	r7, r6
   854e8:	469a      	mov	sl, r3
   854ea:	2401      	movs	r4, #1
   854ec:	e005      	b.n	854fa <__mdiff+0x4e>
   854ee:	db61      	blt.n	855b4 <__mdiff+0x108>
   854f0:	2400      	movs	r4, #0
   854f2:	f109 0714 	add.w	r7, r9, #20
   854f6:	f10a 0b14 	add.w	fp, sl, #20
   854fa:	f8d9 1004 	ldr.w	r1, [r9, #4]
   854fe:	f7ff fdbb 	bl	85078 <_Balloc>
   85502:	465d      	mov	r5, fp
   85504:	f04f 0800 	mov.w	r8, #0
   85508:	f8d9 e010 	ldr.w	lr, [r9, #16]
   8550c:	f8da 3010 	ldr.w	r3, [sl, #16]
   85510:	463e      	mov	r6, r7
   85512:	60c4      	str	r4, [r0, #12]
   85514:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   85518:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   8551c:	f100 0414 	add.w	r4, r0, #20
   85520:	f856 9b04 	ldr.w	r9, [r6], #4
   85524:	f855 2b04 	ldr.w	r2, [r5], #4
   85528:	fa1f f389 	uxth.w	r3, r9
   8552c:	4443      	add	r3, r8
   8552e:	fa1f f882 	uxth.w	r8, r2
   85532:	0c12      	lsrs	r2, r2, #16
   85534:	eba3 0308 	sub.w	r3, r3, r8
   85538:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   8553c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   85540:	b29b      	uxth	r3, r3
   85542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   85546:	45ac      	cmp	ip, r5
   85548:	f844 3b04 	str.w	r3, [r4], #4
   8554c:	ea4f 4822 	mov.w	r8, r2, asr #16
   85550:	d8e6      	bhi.n	85520 <__mdiff+0x74>
   85552:	42b7      	cmp	r7, r6
   85554:	d917      	bls.n	85586 <__mdiff+0xda>
   85556:	46a4      	mov	ip, r4
   85558:	4635      	mov	r5, r6
   8555a:	f855 3b04 	ldr.w	r3, [r5], #4
   8555e:	b299      	uxth	r1, r3
   85560:	4441      	add	r1, r8
   85562:	140a      	asrs	r2, r1, #16
   85564:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   85568:	b289      	uxth	r1, r1
   8556a:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   8556e:	42af      	cmp	r7, r5
   85570:	f84c 3b04 	str.w	r3, [ip], #4
   85574:	ea4f 4822 	mov.w	r8, r2, asr #16
   85578:	d8ef      	bhi.n	8555a <__mdiff+0xae>
   8557a:	43f6      	mvns	r6, r6
   8557c:	4437      	add	r7, r6
   8557e:	f027 0703 	bic.w	r7, r7, #3
   85582:	3704      	adds	r7, #4
   85584:	443c      	add	r4, r7
   85586:	3c04      	subs	r4, #4
   85588:	b92b      	cbnz	r3, 85596 <__mdiff+0xea>
   8558a:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8558e:	f10e 3eff 	add.w	lr, lr, #4294967295
   85592:	2b00      	cmp	r3, #0
   85594:	d0f9      	beq.n	8558a <__mdiff+0xde>
   85596:	f8c0 e010 	str.w	lr, [r0, #16]
   8559a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8559e:	2100      	movs	r1, #0
   855a0:	f7ff fd6a 	bl	85078 <_Balloc>
   855a4:	2201      	movs	r2, #1
   855a6:	2300      	movs	r3, #0
   855a8:	6102      	str	r2, [r0, #16]
   855aa:	6143      	str	r3, [r0, #20]
   855ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   855b0:	46b3      	mov	fp, r6
   855b2:	e7a2      	b.n	854fa <__mdiff+0x4e>
   855b4:	464b      	mov	r3, r9
   855b6:	f109 0b14 	add.w	fp, r9, #20
   855ba:	f102 0714 	add.w	r7, r2, #20
   855be:	4691      	mov	r9, r2
   855c0:	2401      	movs	r4, #1
   855c2:	469a      	mov	sl, r3
   855c4:	e799      	b.n	854fa <__mdiff+0x4e>
   855c6:	bf00      	nop

000855c8 <__d2b>:
   855c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   855ca:	2101      	movs	r1, #1
   855cc:	b083      	sub	sp, #12
   855ce:	461c      	mov	r4, r3
   855d0:	f3c3 550a 	ubfx	r5, r3, #20, #11
   855d4:	4616      	mov	r6, r2
   855d6:	f7ff fd4f 	bl	85078 <_Balloc>
   855da:	f3c4 0413 	ubfx	r4, r4, #0, #20
   855de:	4607      	mov	r7, r0
   855e0:	b10d      	cbz	r5, 855e6 <__d2b+0x1e>
   855e2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   855e6:	9401      	str	r4, [sp, #4]
   855e8:	b306      	cbz	r6, 8562c <__d2b+0x64>
   855ea:	a802      	add	r0, sp, #8
   855ec:	f840 6d08 	str.w	r6, [r0, #-8]!
   855f0:	f7ff fdd4 	bl	8519c <__lo0bits>
   855f4:	2800      	cmp	r0, #0
   855f6:	d130      	bne.n	8565a <__d2b+0x92>
   855f8:	e89d 000c 	ldmia.w	sp, {r2, r3}
   855fc:	617a      	str	r2, [r7, #20]
   855fe:	2b00      	cmp	r3, #0
   85600:	bf0c      	ite	eq
   85602:	2101      	moveq	r1, #1
   85604:	2102      	movne	r1, #2
   85606:	61bb      	str	r3, [r7, #24]
   85608:	6139      	str	r1, [r7, #16]
   8560a:	b9d5      	cbnz	r5, 85642 <__d2b+0x7a>
   8560c:	9a08      	ldr	r2, [sp, #32]
   8560e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   85612:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   85616:	6010      	str	r0, [r2, #0]
   85618:	6918      	ldr	r0, [r3, #16]
   8561a:	f7ff fd9f 	bl	8515c <__hi0bits>
   8561e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85620:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   85624:	6018      	str	r0, [r3, #0]
   85626:	4638      	mov	r0, r7
   85628:	b003      	add	sp, #12
   8562a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8562c:	a801      	add	r0, sp, #4
   8562e:	f7ff fdb5 	bl	8519c <__lo0bits>
   85632:	2201      	movs	r2, #1
   85634:	9b01      	ldr	r3, [sp, #4]
   85636:	4611      	mov	r1, r2
   85638:	3020      	adds	r0, #32
   8563a:	613a      	str	r2, [r7, #16]
   8563c:	617b      	str	r3, [r7, #20]
   8563e:	2d00      	cmp	r5, #0
   85640:	d0e4      	beq.n	8560c <__d2b+0x44>
   85642:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   85646:	9a08      	ldr	r2, [sp, #32]
   85648:	4403      	add	r3, r0
   8564a:	6013      	str	r3, [r2, #0]
   8564c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8564e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   85652:	6018      	str	r0, [r3, #0]
   85654:	4638      	mov	r0, r7
   85656:	b003      	add	sp, #12
   85658:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8565a:	9b01      	ldr	r3, [sp, #4]
   8565c:	f1c0 0220 	rsb	r2, r0, #32
   85660:	9900      	ldr	r1, [sp, #0]
   85662:	fa03 f202 	lsl.w	r2, r3, r2
   85666:	430a      	orrs	r2, r1
   85668:	40c3      	lsrs	r3, r0
   8566a:	9301      	str	r3, [sp, #4]
   8566c:	617a      	str	r2, [r7, #20]
   8566e:	e7c6      	b.n	855fe <__d2b+0x36>

00085670 <_sbrk_r>:
   85670:	b538      	push	{r3, r4, r5, lr}
   85672:	2300      	movs	r3, #0
   85674:	4c06      	ldr	r4, [pc, #24]	; (85690 <_sbrk_r+0x20>)
   85676:	4605      	mov	r5, r0
   85678:	4608      	mov	r0, r1
   8567a:	6023      	str	r3, [r4, #0]
   8567c:	f7fc fd36 	bl	820ec <_sbrk>
   85680:	1c43      	adds	r3, r0, #1
   85682:	d000      	beq.n	85686 <_sbrk_r+0x16>
   85684:	bd38      	pop	{r3, r4, r5, pc}
   85686:	6823      	ldr	r3, [r4, #0]
   85688:	2b00      	cmp	r3, #0
   8568a:	d0fb      	beq.n	85684 <_sbrk_r+0x14>
   8568c:	602b      	str	r3, [r5, #0]
   8568e:	bd38      	pop	{r3, r4, r5, pc}
   85690:	20071694 	.word	0x20071694

00085694 <__ssprint_r>:
   85694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85698:	6893      	ldr	r3, [r2, #8]
   8569a:	b083      	sub	sp, #12
   8569c:	4690      	mov	r8, r2
   8569e:	2b00      	cmp	r3, #0
   856a0:	d070      	beq.n	85784 <__ssprint_r+0xf0>
   856a2:	4682      	mov	sl, r0
   856a4:	460c      	mov	r4, r1
   856a6:	6817      	ldr	r7, [r2, #0]
   856a8:	688d      	ldr	r5, [r1, #8]
   856aa:	6808      	ldr	r0, [r1, #0]
   856ac:	e042      	b.n	85734 <__ssprint_r+0xa0>
   856ae:	89a3      	ldrh	r3, [r4, #12]
   856b0:	f413 6f90 	tst.w	r3, #1152	; 0x480
   856b4:	d02e      	beq.n	85714 <__ssprint_r+0x80>
   856b6:	6965      	ldr	r5, [r4, #20]
   856b8:	6921      	ldr	r1, [r4, #16]
   856ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   856be:	eba0 0b01 	sub.w	fp, r0, r1
   856c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   856c6:	f10b 0001 	add.w	r0, fp, #1
   856ca:	106d      	asrs	r5, r5, #1
   856cc:	4430      	add	r0, r6
   856ce:	42a8      	cmp	r0, r5
   856d0:	462a      	mov	r2, r5
   856d2:	bf84      	itt	hi
   856d4:	4605      	movhi	r5, r0
   856d6:	462a      	movhi	r2, r5
   856d8:	055b      	lsls	r3, r3, #21
   856da:	d538      	bpl.n	8574e <__ssprint_r+0xba>
   856dc:	4611      	mov	r1, r2
   856de:	4650      	mov	r0, sl
   856e0:	f7ff f9c0 	bl	84a64 <_malloc_r>
   856e4:	2800      	cmp	r0, #0
   856e6:	d03c      	beq.n	85762 <__ssprint_r+0xce>
   856e8:	465a      	mov	r2, fp
   856ea:	6921      	ldr	r1, [r4, #16]
   856ec:	9001      	str	r0, [sp, #4]
   856ee:	f7fc fd45 	bl	8217c <memcpy>
   856f2:	89a2      	ldrh	r2, [r4, #12]
   856f4:	9b01      	ldr	r3, [sp, #4]
   856f6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   856fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   856fe:	81a2      	strh	r2, [r4, #12]
   85700:	eba5 020b 	sub.w	r2, r5, fp
   85704:	eb03 000b 	add.w	r0, r3, fp
   85708:	6165      	str	r5, [r4, #20]
   8570a:	46b3      	mov	fp, r6
   8570c:	4635      	mov	r5, r6
   8570e:	6123      	str	r3, [r4, #16]
   85710:	6020      	str	r0, [r4, #0]
   85712:	60a2      	str	r2, [r4, #8]
   85714:	465a      	mov	r2, fp
   85716:	4649      	mov	r1, r9
   85718:	f000 fa0e 	bl	85b38 <memmove>
   8571c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   85720:	68a2      	ldr	r2, [r4, #8]
   85722:	6820      	ldr	r0, [r4, #0]
   85724:	1b55      	subs	r5, r2, r5
   85726:	4458      	add	r0, fp
   85728:	1b9e      	subs	r6, r3, r6
   8572a:	60a5      	str	r5, [r4, #8]
   8572c:	6020      	str	r0, [r4, #0]
   8572e:	f8c8 6008 	str.w	r6, [r8, #8]
   85732:	b33e      	cbz	r6, 85784 <__ssprint_r+0xf0>
   85734:	687e      	ldr	r6, [r7, #4]
   85736:	463b      	mov	r3, r7
   85738:	3708      	adds	r7, #8
   8573a:	2e00      	cmp	r6, #0
   8573c:	d0fa      	beq.n	85734 <__ssprint_r+0xa0>
   8573e:	42ae      	cmp	r6, r5
   85740:	f8d3 9000 	ldr.w	r9, [r3]
   85744:	46ab      	mov	fp, r5
   85746:	d2b2      	bcs.n	856ae <__ssprint_r+0x1a>
   85748:	4635      	mov	r5, r6
   8574a:	46b3      	mov	fp, r6
   8574c:	e7e2      	b.n	85714 <__ssprint_r+0x80>
   8574e:	4650      	mov	r0, sl
   85750:	f000 fa56 	bl	85c00 <_realloc_r>
   85754:	4603      	mov	r3, r0
   85756:	2800      	cmp	r0, #0
   85758:	d1d2      	bne.n	85700 <__ssprint_r+0x6c>
   8575a:	6921      	ldr	r1, [r4, #16]
   8575c:	4650      	mov	r0, sl
   8575e:	f000 f905 	bl	8596c <_free_r>
   85762:	230c      	movs	r3, #12
   85764:	2200      	movs	r2, #0
   85766:	f04f 30ff 	mov.w	r0, #4294967295
   8576a:	f8ca 3000 	str.w	r3, [sl]
   8576e:	89a3      	ldrh	r3, [r4, #12]
   85770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85774:	81a3      	strh	r3, [r4, #12]
   85776:	f8c8 2008 	str.w	r2, [r8, #8]
   8577a:	f8c8 2004 	str.w	r2, [r8, #4]
   8577e:	b003      	add	sp, #12
   85780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85784:	2000      	movs	r0, #0
   85786:	f8c8 0004 	str.w	r0, [r8, #4]
   8578a:	b003      	add	sp, #12
   8578c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085790 <__ascii_wctomb>:
   85790:	b119      	cbz	r1, 8579a <__ascii_wctomb+0xa>
   85792:	2aff      	cmp	r2, #255	; 0xff
   85794:	d803      	bhi.n	8579e <__ascii_wctomb+0xe>
   85796:	700a      	strb	r2, [r1, #0]
   85798:	2101      	movs	r1, #1
   8579a:	4608      	mov	r0, r1
   8579c:	4770      	bx	lr
   8579e:	238a      	movs	r3, #138	; 0x8a
   857a0:	f04f 31ff 	mov.w	r1, #4294967295
   857a4:	6003      	str	r3, [r0, #0]
   857a6:	e7f8      	b.n	8579a <__ascii_wctomb+0xa>

000857a8 <__register_exitproc>:
   857a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   857ac:	4d2c      	ldr	r5, [pc, #176]	; (85860 <__register_exitproc+0xb8>)
   857ae:	4606      	mov	r6, r0
   857b0:	6828      	ldr	r0, [r5, #0]
   857b2:	4698      	mov	r8, r3
   857b4:	460f      	mov	r7, r1
   857b6:	4691      	mov	r9, r2
   857b8:	f7ff f950 	bl	84a5c <__retarget_lock_acquire_recursive>
   857bc:	4b29      	ldr	r3, [pc, #164]	; (85864 <__register_exitproc+0xbc>)
   857be:	681c      	ldr	r4, [r3, #0]
   857c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   857c4:	2b00      	cmp	r3, #0
   857c6:	d03e      	beq.n	85846 <__register_exitproc+0x9e>
   857c8:	685a      	ldr	r2, [r3, #4]
   857ca:	2a1f      	cmp	r2, #31
   857cc:	dc1c      	bgt.n	85808 <__register_exitproc+0x60>
   857ce:	f102 0e01 	add.w	lr, r2, #1
   857d2:	b176      	cbz	r6, 857f2 <__register_exitproc+0x4a>
   857d4:	2101      	movs	r1, #1
   857d6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   857da:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   857de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   857e2:	4091      	lsls	r1, r2
   857e4:	4308      	orrs	r0, r1
   857e6:	2e02      	cmp	r6, #2
   857e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   857ec:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   857f0:	d023      	beq.n	8583a <__register_exitproc+0x92>
   857f2:	3202      	adds	r2, #2
   857f4:	f8c3 e004 	str.w	lr, [r3, #4]
   857f8:	6828      	ldr	r0, [r5, #0]
   857fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   857fe:	f7ff f92f 	bl	84a60 <__retarget_lock_release_recursive>
   85802:	2000      	movs	r0, #0
   85804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85808:	4b17      	ldr	r3, [pc, #92]	; (85868 <__register_exitproc+0xc0>)
   8580a:	b30b      	cbz	r3, 85850 <__register_exitproc+0xa8>
   8580c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85810:	f3af 8000 	nop.w
   85814:	4603      	mov	r3, r0
   85816:	b1d8      	cbz	r0, 85850 <__register_exitproc+0xa8>
   85818:	2000      	movs	r0, #0
   8581a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8581e:	f04f 0e01 	mov.w	lr, #1
   85822:	6058      	str	r0, [r3, #4]
   85824:	6019      	str	r1, [r3, #0]
   85826:	4602      	mov	r2, r0
   85828:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8582c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85830:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   85834:	2e00      	cmp	r6, #0
   85836:	d0dc      	beq.n	857f2 <__register_exitproc+0x4a>
   85838:	e7cc      	b.n	857d4 <__register_exitproc+0x2c>
   8583a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8583e:	4301      	orrs	r1, r0
   85840:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   85844:	e7d5      	b.n	857f2 <__register_exitproc+0x4a>
   85846:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8584a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8584e:	e7bb      	b.n	857c8 <__register_exitproc+0x20>
   85850:	6828      	ldr	r0, [r5, #0]
   85852:	f7ff f905 	bl	84a60 <__retarget_lock_release_recursive>
   85856:	f04f 30ff 	mov.w	r0, #4294967295
   8585a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8585e:	bf00      	nop
   85860:	20070a58 	.word	0x20070a58
   85864:	00086e2c 	.word	0x00086e2c
   85868:	00000000 	.word	0x00000000

0008586c <_calloc_r>:
   8586c:	b510      	push	{r4, lr}
   8586e:	fb02 f101 	mul.w	r1, r2, r1
   85872:	f7ff f8f7 	bl	84a64 <_malloc_r>
   85876:	4604      	mov	r4, r0
   85878:	b1d8      	cbz	r0, 858b2 <_calloc_r+0x46>
   8587a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8587e:	f022 0203 	bic.w	r2, r2, #3
   85882:	3a04      	subs	r2, #4
   85884:	2a24      	cmp	r2, #36	; 0x24
   85886:	d818      	bhi.n	858ba <_calloc_r+0x4e>
   85888:	2a13      	cmp	r2, #19
   8588a:	d914      	bls.n	858b6 <_calloc_r+0x4a>
   8588c:	2300      	movs	r3, #0
   8588e:	2a1b      	cmp	r2, #27
   85890:	6003      	str	r3, [r0, #0]
   85892:	6043      	str	r3, [r0, #4]
   85894:	d916      	bls.n	858c4 <_calloc_r+0x58>
   85896:	2a24      	cmp	r2, #36	; 0x24
   85898:	6083      	str	r3, [r0, #8]
   8589a:	60c3      	str	r3, [r0, #12]
   8589c:	bf11      	iteee	ne
   8589e:	f100 0210 	addne.w	r2, r0, #16
   858a2:	6103      	streq	r3, [r0, #16]
   858a4:	6143      	streq	r3, [r0, #20]
   858a6:	f100 0218 	addeq.w	r2, r0, #24
   858aa:	2300      	movs	r3, #0
   858ac:	6013      	str	r3, [r2, #0]
   858ae:	6053      	str	r3, [r2, #4]
   858b0:	6093      	str	r3, [r2, #8]
   858b2:	4620      	mov	r0, r4
   858b4:	bd10      	pop	{r4, pc}
   858b6:	4602      	mov	r2, r0
   858b8:	e7f7      	b.n	858aa <_calloc_r+0x3e>
   858ba:	2100      	movs	r1, #0
   858bc:	f7fc fcd4 	bl	82268 <memset>
   858c0:	4620      	mov	r0, r4
   858c2:	bd10      	pop	{r4, pc}
   858c4:	f100 0208 	add.w	r2, r0, #8
   858c8:	e7ef      	b.n	858aa <_calloc_r+0x3e>
   858ca:	bf00      	nop

000858cc <_malloc_trim_r>:
   858cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   858ce:	460c      	mov	r4, r1
   858d0:	4f23      	ldr	r7, [pc, #140]	; (85960 <_malloc_trim_r+0x94>)
   858d2:	4606      	mov	r6, r0
   858d4:	f7ff fbc4 	bl	85060 <__malloc_lock>
   858d8:	68bb      	ldr	r3, [r7, #8]
   858da:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   858de:	685d      	ldr	r5, [r3, #4]
   858e0:	310f      	adds	r1, #15
   858e2:	f025 0503 	bic.w	r5, r5, #3
   858e6:	4429      	add	r1, r5
   858e8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   858ec:	f021 010f 	bic.w	r1, r1, #15
   858f0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   858f4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   858f8:	db07      	blt.n	8590a <_malloc_trim_r+0x3e>
   858fa:	2100      	movs	r1, #0
   858fc:	4630      	mov	r0, r6
   858fe:	f7ff feb7 	bl	85670 <_sbrk_r>
   85902:	68bb      	ldr	r3, [r7, #8]
   85904:	442b      	add	r3, r5
   85906:	4298      	cmp	r0, r3
   85908:	d004      	beq.n	85914 <_malloc_trim_r+0x48>
   8590a:	4630      	mov	r0, r6
   8590c:	f7ff fbae 	bl	8506c <__malloc_unlock>
   85910:	2000      	movs	r0, #0
   85912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85914:	4261      	negs	r1, r4
   85916:	4630      	mov	r0, r6
   85918:	f7ff feaa 	bl	85670 <_sbrk_r>
   8591c:	3001      	adds	r0, #1
   8591e:	d00d      	beq.n	8593c <_malloc_trim_r+0x70>
   85920:	4b10      	ldr	r3, [pc, #64]	; (85964 <_malloc_trim_r+0x98>)
   85922:	68ba      	ldr	r2, [r7, #8]
   85924:	6819      	ldr	r1, [r3, #0]
   85926:	1b2d      	subs	r5, r5, r4
   85928:	f045 0501 	orr.w	r5, r5, #1
   8592c:	4630      	mov	r0, r6
   8592e:	1b09      	subs	r1, r1, r4
   85930:	6055      	str	r5, [r2, #4]
   85932:	6019      	str	r1, [r3, #0]
   85934:	f7ff fb9a 	bl	8506c <__malloc_unlock>
   85938:	2001      	movs	r0, #1
   8593a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8593c:	2100      	movs	r1, #0
   8593e:	4630      	mov	r0, r6
   85940:	f7ff fe96 	bl	85670 <_sbrk_r>
   85944:	68ba      	ldr	r2, [r7, #8]
   85946:	1a83      	subs	r3, r0, r2
   85948:	2b0f      	cmp	r3, #15
   8594a:	ddde      	ble.n	8590a <_malloc_trim_r+0x3e>
   8594c:	4c06      	ldr	r4, [pc, #24]	; (85968 <_malloc_trim_r+0x9c>)
   8594e:	4905      	ldr	r1, [pc, #20]	; (85964 <_malloc_trim_r+0x98>)
   85950:	6824      	ldr	r4, [r4, #0]
   85952:	f043 0301 	orr.w	r3, r3, #1
   85956:	1b00      	subs	r0, r0, r4
   85958:	6053      	str	r3, [r2, #4]
   8595a:	6008      	str	r0, [r1, #0]
   8595c:	e7d5      	b.n	8590a <_malloc_trim_r+0x3e>
   8595e:	bf00      	nop
   85960:	20070bc8 	.word	0x20070bc8
   85964:	20071178 	.word	0x20071178
   85968:	20070fd0 	.word	0x20070fd0

0008596c <_free_r>:
   8596c:	2900      	cmp	r1, #0
   8596e:	d044      	beq.n	859fa <_free_r+0x8e>
   85970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85974:	460d      	mov	r5, r1
   85976:	4680      	mov	r8, r0
   85978:	f7ff fb72 	bl	85060 <__malloc_lock>
   8597c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   85980:	4969      	ldr	r1, [pc, #420]	; (85b28 <_free_r+0x1bc>)
   85982:	f1a5 0408 	sub.w	r4, r5, #8
   85986:	f027 0301 	bic.w	r3, r7, #1
   8598a:	18e2      	adds	r2, r4, r3
   8598c:	688e      	ldr	r6, [r1, #8]
   8598e:	6850      	ldr	r0, [r2, #4]
   85990:	42b2      	cmp	r2, r6
   85992:	f020 0003 	bic.w	r0, r0, #3
   85996:	d05e      	beq.n	85a56 <_free_r+0xea>
   85998:	07fe      	lsls	r6, r7, #31
   8599a:	6050      	str	r0, [r2, #4]
   8599c:	d40b      	bmi.n	859b6 <_free_r+0x4a>
   8599e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   859a2:	f101 0e08 	add.w	lr, r1, #8
   859a6:	1be4      	subs	r4, r4, r7
   859a8:	68a5      	ldr	r5, [r4, #8]
   859aa:	443b      	add	r3, r7
   859ac:	4575      	cmp	r5, lr
   859ae:	d06d      	beq.n	85a8c <_free_r+0x120>
   859b0:	68e7      	ldr	r7, [r4, #12]
   859b2:	60ef      	str	r7, [r5, #12]
   859b4:	60bd      	str	r5, [r7, #8]
   859b6:	1815      	adds	r5, r2, r0
   859b8:	686d      	ldr	r5, [r5, #4]
   859ba:	07ed      	lsls	r5, r5, #31
   859bc:	d53e      	bpl.n	85a3c <_free_r+0xd0>
   859be:	f043 0201 	orr.w	r2, r3, #1
   859c2:	6062      	str	r2, [r4, #4]
   859c4:	50e3      	str	r3, [r4, r3]
   859c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   859ca:	d217      	bcs.n	859fc <_free_r+0x90>
   859cc:	2201      	movs	r2, #1
   859ce:	08db      	lsrs	r3, r3, #3
   859d0:	1098      	asrs	r0, r3, #2
   859d2:	684d      	ldr	r5, [r1, #4]
   859d4:	4413      	add	r3, r2
   859d6:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   859da:	4082      	lsls	r2, r0
   859dc:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   859e0:	432a      	orrs	r2, r5
   859e2:	3808      	subs	r0, #8
   859e4:	60e0      	str	r0, [r4, #12]
   859e6:	60a7      	str	r7, [r4, #8]
   859e8:	604a      	str	r2, [r1, #4]
   859ea:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   859ee:	60fc      	str	r4, [r7, #12]
   859f0:	4640      	mov	r0, r8
   859f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   859f6:	f7ff bb39 	b.w	8506c <__malloc_unlock>
   859fa:	4770      	bx	lr
   859fc:	0a5a      	lsrs	r2, r3, #9
   859fe:	2a04      	cmp	r2, #4
   85a00:	d852      	bhi.n	85aa8 <_free_r+0x13c>
   85a02:	099a      	lsrs	r2, r3, #6
   85a04:	f102 0739 	add.w	r7, r2, #57	; 0x39
   85a08:	00ff      	lsls	r7, r7, #3
   85a0a:	f102 0538 	add.w	r5, r2, #56	; 0x38
   85a0e:	19c8      	adds	r0, r1, r7
   85a10:	59ca      	ldr	r2, [r1, r7]
   85a12:	3808      	subs	r0, #8
   85a14:	4290      	cmp	r0, r2
   85a16:	d04f      	beq.n	85ab8 <_free_r+0x14c>
   85a18:	6851      	ldr	r1, [r2, #4]
   85a1a:	f021 0103 	bic.w	r1, r1, #3
   85a1e:	428b      	cmp	r3, r1
   85a20:	d232      	bcs.n	85a88 <_free_r+0x11c>
   85a22:	6892      	ldr	r2, [r2, #8]
   85a24:	4290      	cmp	r0, r2
   85a26:	d1f7      	bne.n	85a18 <_free_r+0xac>
   85a28:	68c3      	ldr	r3, [r0, #12]
   85a2a:	60a0      	str	r0, [r4, #8]
   85a2c:	60e3      	str	r3, [r4, #12]
   85a2e:	609c      	str	r4, [r3, #8]
   85a30:	60c4      	str	r4, [r0, #12]
   85a32:	4640      	mov	r0, r8
   85a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85a38:	f7ff bb18 	b.w	8506c <__malloc_unlock>
   85a3c:	6895      	ldr	r5, [r2, #8]
   85a3e:	4f3b      	ldr	r7, [pc, #236]	; (85b2c <_free_r+0x1c0>)
   85a40:	4403      	add	r3, r0
   85a42:	42bd      	cmp	r5, r7
   85a44:	d040      	beq.n	85ac8 <_free_r+0x15c>
   85a46:	68d0      	ldr	r0, [r2, #12]
   85a48:	f043 0201 	orr.w	r2, r3, #1
   85a4c:	60e8      	str	r0, [r5, #12]
   85a4e:	6085      	str	r5, [r0, #8]
   85a50:	6062      	str	r2, [r4, #4]
   85a52:	50e3      	str	r3, [r4, r3]
   85a54:	e7b7      	b.n	859c6 <_free_r+0x5a>
   85a56:	07ff      	lsls	r7, r7, #31
   85a58:	4403      	add	r3, r0
   85a5a:	d407      	bmi.n	85a6c <_free_r+0x100>
   85a5c:	f855 5c08 	ldr.w	r5, [r5, #-8]
   85a60:	1b64      	subs	r4, r4, r5
   85a62:	68e2      	ldr	r2, [r4, #12]
   85a64:	68a0      	ldr	r0, [r4, #8]
   85a66:	442b      	add	r3, r5
   85a68:	60c2      	str	r2, [r0, #12]
   85a6a:	6090      	str	r0, [r2, #8]
   85a6c:	4a30      	ldr	r2, [pc, #192]	; (85b30 <_free_r+0x1c4>)
   85a6e:	f043 0001 	orr.w	r0, r3, #1
   85a72:	6812      	ldr	r2, [r2, #0]
   85a74:	6060      	str	r0, [r4, #4]
   85a76:	4293      	cmp	r3, r2
   85a78:	608c      	str	r4, [r1, #8]
   85a7a:	d3b9      	bcc.n	859f0 <_free_r+0x84>
   85a7c:	4b2d      	ldr	r3, [pc, #180]	; (85b34 <_free_r+0x1c8>)
   85a7e:	4640      	mov	r0, r8
   85a80:	6819      	ldr	r1, [r3, #0]
   85a82:	f7ff ff23 	bl	858cc <_malloc_trim_r>
   85a86:	e7b3      	b.n	859f0 <_free_r+0x84>
   85a88:	4610      	mov	r0, r2
   85a8a:	e7cd      	b.n	85a28 <_free_r+0xbc>
   85a8c:	1811      	adds	r1, r2, r0
   85a8e:	6849      	ldr	r1, [r1, #4]
   85a90:	07c9      	lsls	r1, r1, #31
   85a92:	d444      	bmi.n	85b1e <_free_r+0x1b2>
   85a94:	6891      	ldr	r1, [r2, #8]
   85a96:	4403      	add	r3, r0
   85a98:	68d2      	ldr	r2, [r2, #12]
   85a9a:	f043 0001 	orr.w	r0, r3, #1
   85a9e:	60ca      	str	r2, [r1, #12]
   85aa0:	6091      	str	r1, [r2, #8]
   85aa2:	6060      	str	r0, [r4, #4]
   85aa4:	50e3      	str	r3, [r4, r3]
   85aa6:	e7a3      	b.n	859f0 <_free_r+0x84>
   85aa8:	2a14      	cmp	r2, #20
   85aaa:	d816      	bhi.n	85ada <_free_r+0x16e>
   85aac:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   85ab0:	00ff      	lsls	r7, r7, #3
   85ab2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   85ab6:	e7aa      	b.n	85a0e <_free_r+0xa2>
   85ab8:	2301      	movs	r3, #1
   85aba:	10aa      	asrs	r2, r5, #2
   85abc:	684d      	ldr	r5, [r1, #4]
   85abe:	4093      	lsls	r3, r2
   85ac0:	432b      	orrs	r3, r5
   85ac2:	604b      	str	r3, [r1, #4]
   85ac4:	4603      	mov	r3, r0
   85ac6:	e7b0      	b.n	85a2a <_free_r+0xbe>
   85ac8:	f043 0201 	orr.w	r2, r3, #1
   85acc:	614c      	str	r4, [r1, #20]
   85ace:	610c      	str	r4, [r1, #16]
   85ad0:	60e5      	str	r5, [r4, #12]
   85ad2:	60a5      	str	r5, [r4, #8]
   85ad4:	6062      	str	r2, [r4, #4]
   85ad6:	50e3      	str	r3, [r4, r3]
   85ad8:	e78a      	b.n	859f0 <_free_r+0x84>
   85ada:	2a54      	cmp	r2, #84	; 0x54
   85adc:	d806      	bhi.n	85aec <_free_r+0x180>
   85ade:	0b1a      	lsrs	r2, r3, #12
   85ae0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   85ae4:	00ff      	lsls	r7, r7, #3
   85ae6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   85aea:	e790      	b.n	85a0e <_free_r+0xa2>
   85aec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85af0:	d806      	bhi.n	85b00 <_free_r+0x194>
   85af2:	0bda      	lsrs	r2, r3, #15
   85af4:	f102 0778 	add.w	r7, r2, #120	; 0x78
   85af8:	00ff      	lsls	r7, r7, #3
   85afa:	f102 0577 	add.w	r5, r2, #119	; 0x77
   85afe:	e786      	b.n	85a0e <_free_r+0xa2>
   85b00:	f240 5054 	movw	r0, #1364	; 0x554
   85b04:	4282      	cmp	r2, r0
   85b06:	d806      	bhi.n	85b16 <_free_r+0x1aa>
   85b08:	0c9a      	lsrs	r2, r3, #18
   85b0a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   85b0e:	00ff      	lsls	r7, r7, #3
   85b10:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   85b14:	e77b      	b.n	85a0e <_free_r+0xa2>
   85b16:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   85b1a:	257e      	movs	r5, #126	; 0x7e
   85b1c:	e777      	b.n	85a0e <_free_r+0xa2>
   85b1e:	f043 0101 	orr.w	r1, r3, #1
   85b22:	6061      	str	r1, [r4, #4]
   85b24:	6013      	str	r3, [r2, #0]
   85b26:	e763      	b.n	859f0 <_free_r+0x84>
   85b28:	20070bc8 	.word	0x20070bc8
   85b2c:	20070bd0 	.word	0x20070bd0
   85b30:	20070fd4 	.word	0x20070fd4
   85b34:	200711a8 	.word	0x200711a8

00085b38 <memmove>:
   85b38:	4288      	cmp	r0, r1
   85b3a:	b5f0      	push	{r4, r5, r6, r7, lr}
   85b3c:	d90d      	bls.n	85b5a <memmove+0x22>
   85b3e:	188b      	adds	r3, r1, r2
   85b40:	4298      	cmp	r0, r3
   85b42:	d20a      	bcs.n	85b5a <memmove+0x22>
   85b44:	1884      	adds	r4, r0, r2
   85b46:	2a00      	cmp	r2, #0
   85b48:	d051      	beq.n	85bee <memmove+0xb6>
   85b4a:	4622      	mov	r2, r4
   85b4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85b50:	4299      	cmp	r1, r3
   85b52:	f802 4d01 	strb.w	r4, [r2, #-1]!
   85b56:	d1f9      	bne.n	85b4c <memmove+0x14>
   85b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85b5a:	2a0f      	cmp	r2, #15
   85b5c:	d948      	bls.n	85bf0 <memmove+0xb8>
   85b5e:	ea41 0300 	orr.w	r3, r1, r0
   85b62:	079b      	lsls	r3, r3, #30
   85b64:	d146      	bne.n	85bf4 <memmove+0xbc>
   85b66:	4615      	mov	r5, r2
   85b68:	f100 0410 	add.w	r4, r0, #16
   85b6c:	f101 0310 	add.w	r3, r1, #16
   85b70:	f853 6c10 	ldr.w	r6, [r3, #-16]
   85b74:	3d10      	subs	r5, #16
   85b76:	f844 6c10 	str.w	r6, [r4, #-16]
   85b7a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   85b7e:	2d0f      	cmp	r5, #15
   85b80:	f844 6c0c 	str.w	r6, [r4, #-12]
   85b84:	f853 6c08 	ldr.w	r6, [r3, #-8]
   85b88:	f104 0410 	add.w	r4, r4, #16
   85b8c:	f844 6c18 	str.w	r6, [r4, #-24]
   85b90:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85b94:	f103 0310 	add.w	r3, r3, #16
   85b98:	f844 6c14 	str.w	r6, [r4, #-20]
   85b9c:	d8e8      	bhi.n	85b70 <memmove+0x38>
   85b9e:	f1a2 0310 	sub.w	r3, r2, #16
   85ba2:	f023 030f 	bic.w	r3, r3, #15
   85ba6:	f002 0e0f 	and.w	lr, r2, #15
   85baa:	3310      	adds	r3, #16
   85bac:	f1be 0f03 	cmp.w	lr, #3
   85bb0:	4419      	add	r1, r3
   85bb2:	4403      	add	r3, r0
   85bb4:	d921      	bls.n	85bfa <memmove+0xc2>
   85bb6:	460e      	mov	r6, r1
   85bb8:	4674      	mov	r4, lr
   85bba:	1f1d      	subs	r5, r3, #4
   85bbc:	f856 7b04 	ldr.w	r7, [r6], #4
   85bc0:	3c04      	subs	r4, #4
   85bc2:	2c03      	cmp	r4, #3
   85bc4:	f845 7f04 	str.w	r7, [r5, #4]!
   85bc8:	d8f8      	bhi.n	85bbc <memmove+0x84>
   85bca:	f1ae 0404 	sub.w	r4, lr, #4
   85bce:	f024 0403 	bic.w	r4, r4, #3
   85bd2:	3404      	adds	r4, #4
   85bd4:	4421      	add	r1, r4
   85bd6:	4423      	add	r3, r4
   85bd8:	f002 0203 	and.w	r2, r2, #3
   85bdc:	b162      	cbz	r2, 85bf8 <memmove+0xc0>
   85bde:	3b01      	subs	r3, #1
   85be0:	440a      	add	r2, r1
   85be2:	f811 4b01 	ldrb.w	r4, [r1], #1
   85be6:	428a      	cmp	r2, r1
   85be8:	f803 4f01 	strb.w	r4, [r3, #1]!
   85bec:	d1f9      	bne.n	85be2 <memmove+0xaa>
   85bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85bf0:	4603      	mov	r3, r0
   85bf2:	e7f3      	b.n	85bdc <memmove+0xa4>
   85bf4:	4603      	mov	r3, r0
   85bf6:	e7f2      	b.n	85bde <memmove+0xa6>
   85bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85bfa:	4672      	mov	r2, lr
   85bfc:	e7ee      	b.n	85bdc <memmove+0xa4>
   85bfe:	bf00      	nop

00085c00 <_realloc_r>:
   85c00:	2900      	cmp	r1, #0
   85c02:	f000 8094 	beq.w	85d2e <_realloc_r+0x12e>
   85c06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85c0a:	460c      	mov	r4, r1
   85c0c:	4615      	mov	r5, r2
   85c0e:	b083      	sub	sp, #12
   85c10:	4680      	mov	r8, r0
   85c12:	f105 060b 	add.w	r6, r5, #11
   85c16:	f7ff fa23 	bl	85060 <__malloc_lock>
   85c1a:	f854 ec04 	ldr.w	lr, [r4, #-4]
   85c1e:	2e16      	cmp	r6, #22
   85c20:	f02e 0703 	bic.w	r7, lr, #3
   85c24:	f1a4 0908 	sub.w	r9, r4, #8
   85c28:	d83c      	bhi.n	85ca4 <_realloc_r+0xa4>
   85c2a:	2210      	movs	r2, #16
   85c2c:	4616      	mov	r6, r2
   85c2e:	42b5      	cmp	r5, r6
   85c30:	d83d      	bhi.n	85cae <_realloc_r+0xae>
   85c32:	4297      	cmp	r7, r2
   85c34:	da43      	bge.n	85cbe <_realloc_r+0xbe>
   85c36:	4bc6      	ldr	r3, [pc, #792]	; (85f50 <_realloc_r+0x350>)
   85c38:	eb09 0007 	add.w	r0, r9, r7
   85c3c:	6899      	ldr	r1, [r3, #8]
   85c3e:	4288      	cmp	r0, r1
   85c40:	f000 80c3 	beq.w	85dca <_realloc_r+0x1ca>
   85c44:	6843      	ldr	r3, [r0, #4]
   85c46:	f023 0101 	bic.w	r1, r3, #1
   85c4a:	4401      	add	r1, r0
   85c4c:	6849      	ldr	r1, [r1, #4]
   85c4e:	07c9      	lsls	r1, r1, #31
   85c50:	d54d      	bpl.n	85cee <_realloc_r+0xee>
   85c52:	f01e 0f01 	tst.w	lr, #1
   85c56:	f000 809b 	beq.w	85d90 <_realloc_r+0x190>
   85c5a:	4629      	mov	r1, r5
   85c5c:	4640      	mov	r0, r8
   85c5e:	f7fe ff01 	bl	84a64 <_malloc_r>
   85c62:	4605      	mov	r5, r0
   85c64:	2800      	cmp	r0, #0
   85c66:	d03b      	beq.n	85ce0 <_realloc_r+0xe0>
   85c68:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85c6c:	f1a0 0208 	sub.w	r2, r0, #8
   85c70:	f023 0301 	bic.w	r3, r3, #1
   85c74:	444b      	add	r3, r9
   85c76:	429a      	cmp	r2, r3
   85c78:	f000 812b 	beq.w	85ed2 <_realloc_r+0x2d2>
   85c7c:	1f3a      	subs	r2, r7, #4
   85c7e:	2a24      	cmp	r2, #36	; 0x24
   85c80:	f200 8118 	bhi.w	85eb4 <_realloc_r+0x2b4>
   85c84:	2a13      	cmp	r2, #19
   85c86:	f200 80eb 	bhi.w	85e60 <_realloc_r+0x260>
   85c8a:	4603      	mov	r3, r0
   85c8c:	4622      	mov	r2, r4
   85c8e:	6811      	ldr	r1, [r2, #0]
   85c90:	6019      	str	r1, [r3, #0]
   85c92:	6851      	ldr	r1, [r2, #4]
   85c94:	6059      	str	r1, [r3, #4]
   85c96:	6892      	ldr	r2, [r2, #8]
   85c98:	609a      	str	r2, [r3, #8]
   85c9a:	4621      	mov	r1, r4
   85c9c:	4640      	mov	r0, r8
   85c9e:	f7ff fe65 	bl	8596c <_free_r>
   85ca2:	e01d      	b.n	85ce0 <_realloc_r+0xe0>
   85ca4:	f026 0607 	bic.w	r6, r6, #7
   85ca8:	2e00      	cmp	r6, #0
   85caa:	4632      	mov	r2, r6
   85cac:	dabf      	bge.n	85c2e <_realloc_r+0x2e>
   85cae:	2500      	movs	r5, #0
   85cb0:	230c      	movs	r3, #12
   85cb2:	4628      	mov	r0, r5
   85cb4:	f8c8 3000 	str.w	r3, [r8]
   85cb8:	b003      	add	sp, #12
   85cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85cbe:	4625      	mov	r5, r4
   85cc0:	1bbb      	subs	r3, r7, r6
   85cc2:	2b0f      	cmp	r3, #15
   85cc4:	f8d9 2004 	ldr.w	r2, [r9, #4]
   85cc8:	d81d      	bhi.n	85d06 <_realloc_r+0x106>
   85cca:	f002 0201 	and.w	r2, r2, #1
   85cce:	433a      	orrs	r2, r7
   85cd0:	eb09 0107 	add.w	r1, r9, r7
   85cd4:	f8c9 2004 	str.w	r2, [r9, #4]
   85cd8:	684b      	ldr	r3, [r1, #4]
   85cda:	f043 0301 	orr.w	r3, r3, #1
   85cde:	604b      	str	r3, [r1, #4]
   85ce0:	4640      	mov	r0, r8
   85ce2:	f7ff f9c3 	bl	8506c <__malloc_unlock>
   85ce6:	4628      	mov	r0, r5
   85ce8:	b003      	add	sp, #12
   85cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85cee:	f023 0303 	bic.w	r3, r3, #3
   85cf2:	18f9      	adds	r1, r7, r3
   85cf4:	4291      	cmp	r1, r2
   85cf6:	db1d      	blt.n	85d34 <_realloc_r+0x134>
   85cf8:	68c3      	ldr	r3, [r0, #12]
   85cfa:	6882      	ldr	r2, [r0, #8]
   85cfc:	4625      	mov	r5, r4
   85cfe:	60d3      	str	r3, [r2, #12]
   85d00:	460f      	mov	r7, r1
   85d02:	609a      	str	r2, [r3, #8]
   85d04:	e7dc      	b.n	85cc0 <_realloc_r+0xc0>
   85d06:	f002 0201 	and.w	r2, r2, #1
   85d0a:	eb09 0106 	add.w	r1, r9, r6
   85d0e:	f043 0301 	orr.w	r3, r3, #1
   85d12:	4332      	orrs	r2, r6
   85d14:	f8c9 2004 	str.w	r2, [r9, #4]
   85d18:	444f      	add	r7, r9
   85d1a:	604b      	str	r3, [r1, #4]
   85d1c:	687b      	ldr	r3, [r7, #4]
   85d1e:	3108      	adds	r1, #8
   85d20:	f043 0301 	orr.w	r3, r3, #1
   85d24:	607b      	str	r3, [r7, #4]
   85d26:	4640      	mov	r0, r8
   85d28:	f7ff fe20 	bl	8596c <_free_r>
   85d2c:	e7d8      	b.n	85ce0 <_realloc_r+0xe0>
   85d2e:	4611      	mov	r1, r2
   85d30:	f7fe be98 	b.w	84a64 <_malloc_r>
   85d34:	f01e 0f01 	tst.w	lr, #1
   85d38:	d18f      	bne.n	85c5a <_realloc_r+0x5a>
   85d3a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   85d3e:	eba9 0a01 	sub.w	sl, r9, r1
   85d42:	f8da 1004 	ldr.w	r1, [sl, #4]
   85d46:	f021 0103 	bic.w	r1, r1, #3
   85d4a:	440b      	add	r3, r1
   85d4c:	443b      	add	r3, r7
   85d4e:	4293      	cmp	r3, r2
   85d50:	db26      	blt.n	85da0 <_realloc_r+0x1a0>
   85d52:	4655      	mov	r5, sl
   85d54:	68c1      	ldr	r1, [r0, #12]
   85d56:	6880      	ldr	r0, [r0, #8]
   85d58:	1f3a      	subs	r2, r7, #4
   85d5a:	60c1      	str	r1, [r0, #12]
   85d5c:	6088      	str	r0, [r1, #8]
   85d5e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85d62:	f8da 100c 	ldr.w	r1, [sl, #12]
   85d66:	2a24      	cmp	r2, #36	; 0x24
   85d68:	60c1      	str	r1, [r0, #12]
   85d6a:	6088      	str	r0, [r1, #8]
   85d6c:	d826      	bhi.n	85dbc <_realloc_r+0x1bc>
   85d6e:	2a13      	cmp	r2, #19
   85d70:	f240 8081 	bls.w	85e76 <_realloc_r+0x276>
   85d74:	6821      	ldr	r1, [r4, #0]
   85d76:	2a1b      	cmp	r2, #27
   85d78:	f8ca 1008 	str.w	r1, [sl, #8]
   85d7c:	6861      	ldr	r1, [r4, #4]
   85d7e:	f8ca 100c 	str.w	r1, [sl, #12]
   85d82:	f200 80ad 	bhi.w	85ee0 <_realloc_r+0x2e0>
   85d86:	f104 0008 	add.w	r0, r4, #8
   85d8a:	f10a 0210 	add.w	r2, sl, #16
   85d8e:	e074      	b.n	85e7a <_realloc_r+0x27a>
   85d90:	f854 3c08 	ldr.w	r3, [r4, #-8]
   85d94:	eba9 0a03 	sub.w	sl, r9, r3
   85d98:	f8da 1004 	ldr.w	r1, [sl, #4]
   85d9c:	f021 0103 	bic.w	r1, r1, #3
   85da0:	187b      	adds	r3, r7, r1
   85da2:	4293      	cmp	r3, r2
   85da4:	f6ff af59 	blt.w	85c5a <_realloc_r+0x5a>
   85da8:	4655      	mov	r5, sl
   85daa:	f8da 100c 	ldr.w	r1, [sl, #12]
   85dae:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85db2:	1f3a      	subs	r2, r7, #4
   85db4:	2a24      	cmp	r2, #36	; 0x24
   85db6:	60c1      	str	r1, [r0, #12]
   85db8:	6088      	str	r0, [r1, #8]
   85dba:	d9d8      	bls.n	85d6e <_realloc_r+0x16e>
   85dbc:	4621      	mov	r1, r4
   85dbe:	4628      	mov	r0, r5
   85dc0:	461f      	mov	r7, r3
   85dc2:	46d1      	mov	r9, sl
   85dc4:	f7ff feb8 	bl	85b38 <memmove>
   85dc8:	e77a      	b.n	85cc0 <_realloc_r+0xc0>
   85dca:	6841      	ldr	r1, [r0, #4]
   85dcc:	f106 0010 	add.w	r0, r6, #16
   85dd0:	f021 0b03 	bic.w	fp, r1, #3
   85dd4:	44bb      	add	fp, r7
   85dd6:	4583      	cmp	fp, r0
   85dd8:	da58      	bge.n	85e8c <_realloc_r+0x28c>
   85dda:	f01e 0f01 	tst.w	lr, #1
   85dde:	f47f af3c 	bne.w	85c5a <_realloc_r+0x5a>
   85de2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   85de6:	eba9 0a01 	sub.w	sl, r9, r1
   85dea:	f8da 1004 	ldr.w	r1, [sl, #4]
   85dee:	f021 0103 	bic.w	r1, r1, #3
   85df2:	448b      	add	fp, r1
   85df4:	4558      	cmp	r0, fp
   85df6:	dcd3      	bgt.n	85da0 <_realloc_r+0x1a0>
   85df8:	4655      	mov	r5, sl
   85dfa:	f8da 100c 	ldr.w	r1, [sl, #12]
   85dfe:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85e02:	1f3a      	subs	r2, r7, #4
   85e04:	2a24      	cmp	r2, #36	; 0x24
   85e06:	60c1      	str	r1, [r0, #12]
   85e08:	6088      	str	r0, [r1, #8]
   85e0a:	f200 808d 	bhi.w	85f28 <_realloc_r+0x328>
   85e0e:	2a13      	cmp	r2, #19
   85e10:	f240 8087 	bls.w	85f22 <_realloc_r+0x322>
   85e14:	6821      	ldr	r1, [r4, #0]
   85e16:	2a1b      	cmp	r2, #27
   85e18:	f8ca 1008 	str.w	r1, [sl, #8]
   85e1c:	6861      	ldr	r1, [r4, #4]
   85e1e:	f8ca 100c 	str.w	r1, [sl, #12]
   85e22:	f200 8088 	bhi.w	85f36 <_realloc_r+0x336>
   85e26:	f104 0108 	add.w	r1, r4, #8
   85e2a:	f10a 0210 	add.w	r2, sl, #16
   85e2e:	6808      	ldr	r0, [r1, #0]
   85e30:	6010      	str	r0, [r2, #0]
   85e32:	6848      	ldr	r0, [r1, #4]
   85e34:	6050      	str	r0, [r2, #4]
   85e36:	6889      	ldr	r1, [r1, #8]
   85e38:	6091      	str	r1, [r2, #8]
   85e3a:	ebab 0206 	sub.w	r2, fp, r6
   85e3e:	eb0a 0106 	add.w	r1, sl, r6
   85e42:	f042 0201 	orr.w	r2, r2, #1
   85e46:	6099      	str	r1, [r3, #8]
   85e48:	604a      	str	r2, [r1, #4]
   85e4a:	f8da 3004 	ldr.w	r3, [sl, #4]
   85e4e:	4640      	mov	r0, r8
   85e50:	f003 0301 	and.w	r3, r3, #1
   85e54:	431e      	orrs	r6, r3
   85e56:	f8ca 6004 	str.w	r6, [sl, #4]
   85e5a:	f7ff f907 	bl	8506c <__malloc_unlock>
   85e5e:	e742      	b.n	85ce6 <_realloc_r+0xe6>
   85e60:	6823      	ldr	r3, [r4, #0]
   85e62:	2a1b      	cmp	r2, #27
   85e64:	6003      	str	r3, [r0, #0]
   85e66:	6863      	ldr	r3, [r4, #4]
   85e68:	6043      	str	r3, [r0, #4]
   85e6a:	d827      	bhi.n	85ebc <_realloc_r+0x2bc>
   85e6c:	f100 0308 	add.w	r3, r0, #8
   85e70:	f104 0208 	add.w	r2, r4, #8
   85e74:	e70b      	b.n	85c8e <_realloc_r+0x8e>
   85e76:	4620      	mov	r0, r4
   85e78:	462a      	mov	r2, r5
   85e7a:	6801      	ldr	r1, [r0, #0]
   85e7c:	461f      	mov	r7, r3
   85e7e:	6011      	str	r1, [r2, #0]
   85e80:	6841      	ldr	r1, [r0, #4]
   85e82:	46d1      	mov	r9, sl
   85e84:	6051      	str	r1, [r2, #4]
   85e86:	6883      	ldr	r3, [r0, #8]
   85e88:	6093      	str	r3, [r2, #8]
   85e8a:	e719      	b.n	85cc0 <_realloc_r+0xc0>
   85e8c:	ebab 0b06 	sub.w	fp, fp, r6
   85e90:	eb09 0106 	add.w	r1, r9, r6
   85e94:	f04b 0201 	orr.w	r2, fp, #1
   85e98:	6099      	str	r1, [r3, #8]
   85e9a:	604a      	str	r2, [r1, #4]
   85e9c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85ea0:	4640      	mov	r0, r8
   85ea2:	f003 0301 	and.w	r3, r3, #1
   85ea6:	431e      	orrs	r6, r3
   85ea8:	f844 6c04 	str.w	r6, [r4, #-4]
   85eac:	f7ff f8de 	bl	8506c <__malloc_unlock>
   85eb0:	4625      	mov	r5, r4
   85eb2:	e718      	b.n	85ce6 <_realloc_r+0xe6>
   85eb4:	4621      	mov	r1, r4
   85eb6:	f7ff fe3f 	bl	85b38 <memmove>
   85eba:	e6ee      	b.n	85c9a <_realloc_r+0x9a>
   85ebc:	68a3      	ldr	r3, [r4, #8]
   85ebe:	2a24      	cmp	r2, #36	; 0x24
   85ec0:	6083      	str	r3, [r0, #8]
   85ec2:	68e3      	ldr	r3, [r4, #12]
   85ec4:	60c3      	str	r3, [r0, #12]
   85ec6:	d018      	beq.n	85efa <_realloc_r+0x2fa>
   85ec8:	f100 0310 	add.w	r3, r0, #16
   85ecc:	f104 0210 	add.w	r2, r4, #16
   85ed0:	e6dd      	b.n	85c8e <_realloc_r+0x8e>
   85ed2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   85ed6:	4625      	mov	r5, r4
   85ed8:	f023 0303 	bic.w	r3, r3, #3
   85edc:	441f      	add	r7, r3
   85ede:	e6ef      	b.n	85cc0 <_realloc_r+0xc0>
   85ee0:	68a1      	ldr	r1, [r4, #8]
   85ee2:	2a24      	cmp	r2, #36	; 0x24
   85ee4:	f8ca 1010 	str.w	r1, [sl, #16]
   85ee8:	68e1      	ldr	r1, [r4, #12]
   85eea:	f8ca 1014 	str.w	r1, [sl, #20]
   85eee:	d00d      	beq.n	85f0c <_realloc_r+0x30c>
   85ef0:	f104 0010 	add.w	r0, r4, #16
   85ef4:	f10a 0218 	add.w	r2, sl, #24
   85ef8:	e7bf      	b.n	85e7a <_realloc_r+0x27a>
   85efa:	6922      	ldr	r2, [r4, #16]
   85efc:	f100 0318 	add.w	r3, r0, #24
   85f00:	6102      	str	r2, [r0, #16]
   85f02:	6961      	ldr	r1, [r4, #20]
   85f04:	f104 0218 	add.w	r2, r4, #24
   85f08:	6141      	str	r1, [r0, #20]
   85f0a:	e6c0      	b.n	85c8e <_realloc_r+0x8e>
   85f0c:	6922      	ldr	r2, [r4, #16]
   85f0e:	f104 0018 	add.w	r0, r4, #24
   85f12:	f8ca 2018 	str.w	r2, [sl, #24]
   85f16:	6961      	ldr	r1, [r4, #20]
   85f18:	f10a 0220 	add.w	r2, sl, #32
   85f1c:	f8ca 101c 	str.w	r1, [sl, #28]
   85f20:	e7ab      	b.n	85e7a <_realloc_r+0x27a>
   85f22:	4621      	mov	r1, r4
   85f24:	462a      	mov	r2, r5
   85f26:	e782      	b.n	85e2e <_realloc_r+0x22e>
   85f28:	4621      	mov	r1, r4
   85f2a:	4628      	mov	r0, r5
   85f2c:	9301      	str	r3, [sp, #4]
   85f2e:	f7ff fe03 	bl	85b38 <memmove>
   85f32:	9b01      	ldr	r3, [sp, #4]
   85f34:	e781      	b.n	85e3a <_realloc_r+0x23a>
   85f36:	68a1      	ldr	r1, [r4, #8]
   85f38:	2a24      	cmp	r2, #36	; 0x24
   85f3a:	f8ca 1010 	str.w	r1, [sl, #16]
   85f3e:	68e1      	ldr	r1, [r4, #12]
   85f40:	f8ca 1014 	str.w	r1, [sl, #20]
   85f44:	d006      	beq.n	85f54 <_realloc_r+0x354>
   85f46:	f104 0110 	add.w	r1, r4, #16
   85f4a:	f10a 0218 	add.w	r2, sl, #24
   85f4e:	e76e      	b.n	85e2e <_realloc_r+0x22e>
   85f50:	20070bc8 	.word	0x20070bc8
   85f54:	6922      	ldr	r2, [r4, #16]
   85f56:	f104 0118 	add.w	r1, r4, #24
   85f5a:	f8ca 2018 	str.w	r2, [sl, #24]
   85f5e:	6960      	ldr	r0, [r4, #20]
   85f60:	f10a 0220 	add.w	r2, sl, #32
   85f64:	f8ca 001c 	str.w	r0, [sl, #28]
   85f68:	e761      	b.n	85e2e <_realloc_r+0x22e>
   85f6a:	bf00      	nop

00085f6c <__aeabi_drsub>:
   85f6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   85f70:	e002      	b.n	85f78 <__adddf3>
   85f72:	bf00      	nop

00085f74 <__aeabi_dsub>:
   85f74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00085f78 <__adddf3>:
   85f78:	b530      	push	{r4, r5, lr}
   85f7a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   85f7e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   85f82:	ea94 0f05 	teq	r4, r5
   85f86:	bf08      	it	eq
   85f88:	ea90 0f02 	teqeq	r0, r2
   85f8c:	bf1f      	itttt	ne
   85f8e:	ea54 0c00 	orrsne.w	ip, r4, r0
   85f92:	ea55 0c02 	orrsne.w	ip, r5, r2
   85f96:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   85f9a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   85f9e:	f000 80e2 	beq.w	86166 <__adddf3+0x1ee>
   85fa2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   85fa6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   85faa:	bfb8      	it	lt
   85fac:	426d      	neglt	r5, r5
   85fae:	dd0c      	ble.n	85fca <__adddf3+0x52>
   85fb0:	442c      	add	r4, r5
   85fb2:	ea80 0202 	eor.w	r2, r0, r2
   85fb6:	ea81 0303 	eor.w	r3, r1, r3
   85fba:	ea82 0000 	eor.w	r0, r2, r0
   85fbe:	ea83 0101 	eor.w	r1, r3, r1
   85fc2:	ea80 0202 	eor.w	r2, r0, r2
   85fc6:	ea81 0303 	eor.w	r3, r1, r3
   85fca:	2d36      	cmp	r5, #54	; 0x36
   85fcc:	bf88      	it	hi
   85fce:	bd30      	pophi	{r4, r5, pc}
   85fd0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   85fd4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   85fd8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   85fdc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   85fe0:	d002      	beq.n	85fe8 <__adddf3+0x70>
   85fe2:	4240      	negs	r0, r0
   85fe4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85fe8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   85fec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   85ff0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   85ff4:	d002      	beq.n	85ffc <__adddf3+0x84>
   85ff6:	4252      	negs	r2, r2
   85ff8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85ffc:	ea94 0f05 	teq	r4, r5
   86000:	f000 80a7 	beq.w	86152 <__adddf3+0x1da>
   86004:	f1a4 0401 	sub.w	r4, r4, #1
   86008:	f1d5 0e20 	rsbs	lr, r5, #32
   8600c:	db0d      	blt.n	8602a <__adddf3+0xb2>
   8600e:	fa02 fc0e 	lsl.w	ip, r2, lr
   86012:	fa22 f205 	lsr.w	r2, r2, r5
   86016:	1880      	adds	r0, r0, r2
   86018:	f141 0100 	adc.w	r1, r1, #0
   8601c:	fa03 f20e 	lsl.w	r2, r3, lr
   86020:	1880      	adds	r0, r0, r2
   86022:	fa43 f305 	asr.w	r3, r3, r5
   86026:	4159      	adcs	r1, r3
   86028:	e00e      	b.n	86048 <__adddf3+0xd0>
   8602a:	f1a5 0520 	sub.w	r5, r5, #32
   8602e:	f10e 0e20 	add.w	lr, lr, #32
   86032:	2a01      	cmp	r2, #1
   86034:	fa03 fc0e 	lsl.w	ip, r3, lr
   86038:	bf28      	it	cs
   8603a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8603e:	fa43 f305 	asr.w	r3, r3, r5
   86042:	18c0      	adds	r0, r0, r3
   86044:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   86048:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8604c:	d507      	bpl.n	8605e <__adddf3+0xe6>
   8604e:	f04f 0e00 	mov.w	lr, #0
   86052:	f1dc 0c00 	rsbs	ip, ip, #0
   86056:	eb7e 0000 	sbcs.w	r0, lr, r0
   8605a:	eb6e 0101 	sbc.w	r1, lr, r1
   8605e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   86062:	d31b      	bcc.n	8609c <__adddf3+0x124>
   86064:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   86068:	d30c      	bcc.n	86084 <__adddf3+0x10c>
   8606a:	0849      	lsrs	r1, r1, #1
   8606c:	ea5f 0030 	movs.w	r0, r0, rrx
   86070:	ea4f 0c3c 	mov.w	ip, ip, rrx
   86074:	f104 0401 	add.w	r4, r4, #1
   86078:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8607c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   86080:	f080 809a 	bcs.w	861b8 <__adddf3+0x240>
   86084:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   86088:	bf08      	it	eq
   8608a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8608e:	f150 0000 	adcs.w	r0, r0, #0
   86092:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   86096:	ea41 0105 	orr.w	r1, r1, r5
   8609a:	bd30      	pop	{r4, r5, pc}
   8609c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   860a0:	4140      	adcs	r0, r0
   860a2:	eb41 0101 	adc.w	r1, r1, r1
   860a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   860aa:	f1a4 0401 	sub.w	r4, r4, #1
   860ae:	d1e9      	bne.n	86084 <__adddf3+0x10c>
   860b0:	f091 0f00 	teq	r1, #0
   860b4:	bf04      	itt	eq
   860b6:	4601      	moveq	r1, r0
   860b8:	2000      	moveq	r0, #0
   860ba:	fab1 f381 	clz	r3, r1
   860be:	bf08      	it	eq
   860c0:	3320      	addeq	r3, #32
   860c2:	f1a3 030b 	sub.w	r3, r3, #11
   860c6:	f1b3 0220 	subs.w	r2, r3, #32
   860ca:	da0c      	bge.n	860e6 <__adddf3+0x16e>
   860cc:	320c      	adds	r2, #12
   860ce:	dd08      	ble.n	860e2 <__adddf3+0x16a>
   860d0:	f102 0c14 	add.w	ip, r2, #20
   860d4:	f1c2 020c 	rsb	r2, r2, #12
   860d8:	fa01 f00c 	lsl.w	r0, r1, ip
   860dc:	fa21 f102 	lsr.w	r1, r1, r2
   860e0:	e00c      	b.n	860fc <__adddf3+0x184>
   860e2:	f102 0214 	add.w	r2, r2, #20
   860e6:	bfd8      	it	le
   860e8:	f1c2 0c20 	rsble	ip, r2, #32
   860ec:	fa01 f102 	lsl.w	r1, r1, r2
   860f0:	fa20 fc0c 	lsr.w	ip, r0, ip
   860f4:	bfdc      	itt	le
   860f6:	ea41 010c 	orrle.w	r1, r1, ip
   860fa:	4090      	lslle	r0, r2
   860fc:	1ae4      	subs	r4, r4, r3
   860fe:	bfa2      	ittt	ge
   86100:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   86104:	4329      	orrge	r1, r5
   86106:	bd30      	popge	{r4, r5, pc}
   86108:	ea6f 0404 	mvn.w	r4, r4
   8610c:	3c1f      	subs	r4, #31
   8610e:	da1c      	bge.n	8614a <__adddf3+0x1d2>
   86110:	340c      	adds	r4, #12
   86112:	dc0e      	bgt.n	86132 <__adddf3+0x1ba>
   86114:	f104 0414 	add.w	r4, r4, #20
   86118:	f1c4 0220 	rsb	r2, r4, #32
   8611c:	fa20 f004 	lsr.w	r0, r0, r4
   86120:	fa01 f302 	lsl.w	r3, r1, r2
   86124:	ea40 0003 	orr.w	r0, r0, r3
   86128:	fa21 f304 	lsr.w	r3, r1, r4
   8612c:	ea45 0103 	orr.w	r1, r5, r3
   86130:	bd30      	pop	{r4, r5, pc}
   86132:	f1c4 040c 	rsb	r4, r4, #12
   86136:	f1c4 0220 	rsb	r2, r4, #32
   8613a:	fa20 f002 	lsr.w	r0, r0, r2
   8613e:	fa01 f304 	lsl.w	r3, r1, r4
   86142:	ea40 0003 	orr.w	r0, r0, r3
   86146:	4629      	mov	r1, r5
   86148:	bd30      	pop	{r4, r5, pc}
   8614a:	fa21 f004 	lsr.w	r0, r1, r4
   8614e:	4629      	mov	r1, r5
   86150:	bd30      	pop	{r4, r5, pc}
   86152:	f094 0f00 	teq	r4, #0
   86156:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8615a:	bf06      	itte	eq
   8615c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   86160:	3401      	addeq	r4, #1
   86162:	3d01      	subne	r5, #1
   86164:	e74e      	b.n	86004 <__adddf3+0x8c>
   86166:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8616a:	bf18      	it	ne
   8616c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   86170:	d029      	beq.n	861c6 <__adddf3+0x24e>
   86172:	ea94 0f05 	teq	r4, r5
   86176:	bf08      	it	eq
   86178:	ea90 0f02 	teqeq	r0, r2
   8617c:	d005      	beq.n	8618a <__adddf3+0x212>
   8617e:	ea54 0c00 	orrs.w	ip, r4, r0
   86182:	bf04      	itt	eq
   86184:	4619      	moveq	r1, r3
   86186:	4610      	moveq	r0, r2
   86188:	bd30      	pop	{r4, r5, pc}
   8618a:	ea91 0f03 	teq	r1, r3
   8618e:	bf1e      	ittt	ne
   86190:	2100      	movne	r1, #0
   86192:	2000      	movne	r0, #0
   86194:	bd30      	popne	{r4, r5, pc}
   86196:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8619a:	d105      	bne.n	861a8 <__adddf3+0x230>
   8619c:	0040      	lsls	r0, r0, #1
   8619e:	4149      	adcs	r1, r1
   861a0:	bf28      	it	cs
   861a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   861a6:	bd30      	pop	{r4, r5, pc}
   861a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   861ac:	bf3c      	itt	cc
   861ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   861b2:	bd30      	popcc	{r4, r5, pc}
   861b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   861b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   861bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   861c0:	f04f 0000 	mov.w	r0, #0
   861c4:	bd30      	pop	{r4, r5, pc}
   861c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   861ca:	bf1a      	itte	ne
   861cc:	4619      	movne	r1, r3
   861ce:	4610      	movne	r0, r2
   861d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   861d4:	bf1c      	itt	ne
   861d6:	460b      	movne	r3, r1
   861d8:	4602      	movne	r2, r0
   861da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   861de:	bf06      	itte	eq
   861e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   861e4:	ea91 0f03 	teqeq	r1, r3
   861e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   861ec:	bd30      	pop	{r4, r5, pc}
   861ee:	bf00      	nop

000861f0 <__aeabi_ui2d>:
   861f0:	f090 0f00 	teq	r0, #0
   861f4:	bf04      	itt	eq
   861f6:	2100      	moveq	r1, #0
   861f8:	4770      	bxeq	lr
   861fa:	b530      	push	{r4, r5, lr}
   861fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   86200:	f104 0432 	add.w	r4, r4, #50	; 0x32
   86204:	f04f 0500 	mov.w	r5, #0
   86208:	f04f 0100 	mov.w	r1, #0
   8620c:	e750      	b.n	860b0 <__adddf3+0x138>
   8620e:	bf00      	nop

00086210 <__aeabi_i2d>:
   86210:	f090 0f00 	teq	r0, #0
   86214:	bf04      	itt	eq
   86216:	2100      	moveq	r1, #0
   86218:	4770      	bxeq	lr
   8621a:	b530      	push	{r4, r5, lr}
   8621c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   86220:	f104 0432 	add.w	r4, r4, #50	; 0x32
   86224:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   86228:	bf48      	it	mi
   8622a:	4240      	negmi	r0, r0
   8622c:	f04f 0100 	mov.w	r1, #0
   86230:	e73e      	b.n	860b0 <__adddf3+0x138>
   86232:	bf00      	nop

00086234 <__aeabi_f2d>:
   86234:	0042      	lsls	r2, r0, #1
   86236:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8623a:	ea4f 0131 	mov.w	r1, r1, rrx
   8623e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   86242:	bf1f      	itttt	ne
   86244:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   86248:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8624c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   86250:	4770      	bxne	lr
   86252:	f092 0f00 	teq	r2, #0
   86256:	bf14      	ite	ne
   86258:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8625c:	4770      	bxeq	lr
   8625e:	b530      	push	{r4, r5, lr}
   86260:	f44f 7460 	mov.w	r4, #896	; 0x380
   86264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   86268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8626c:	e720      	b.n	860b0 <__adddf3+0x138>
   8626e:	bf00      	nop

00086270 <__aeabi_ul2d>:
   86270:	ea50 0201 	orrs.w	r2, r0, r1
   86274:	bf08      	it	eq
   86276:	4770      	bxeq	lr
   86278:	b530      	push	{r4, r5, lr}
   8627a:	f04f 0500 	mov.w	r5, #0
   8627e:	e00a      	b.n	86296 <__aeabi_l2d+0x16>

00086280 <__aeabi_l2d>:
   86280:	ea50 0201 	orrs.w	r2, r0, r1
   86284:	bf08      	it	eq
   86286:	4770      	bxeq	lr
   86288:	b530      	push	{r4, r5, lr}
   8628a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8628e:	d502      	bpl.n	86296 <__aeabi_l2d+0x16>
   86290:	4240      	negs	r0, r0
   86292:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   86296:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8629a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8629e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   862a2:	f43f aedc 	beq.w	8605e <__adddf3+0xe6>
   862a6:	f04f 0203 	mov.w	r2, #3
   862aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   862ae:	bf18      	it	ne
   862b0:	3203      	addne	r2, #3
   862b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   862b6:	bf18      	it	ne
   862b8:	3203      	addne	r2, #3
   862ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   862be:	f1c2 0320 	rsb	r3, r2, #32
   862c2:	fa00 fc03 	lsl.w	ip, r0, r3
   862c6:	fa20 f002 	lsr.w	r0, r0, r2
   862ca:	fa01 fe03 	lsl.w	lr, r1, r3
   862ce:	ea40 000e 	orr.w	r0, r0, lr
   862d2:	fa21 f102 	lsr.w	r1, r1, r2
   862d6:	4414      	add	r4, r2
   862d8:	e6c1      	b.n	8605e <__adddf3+0xe6>
   862da:	bf00      	nop

000862dc <__aeabi_dmul>:
   862dc:	b570      	push	{r4, r5, r6, lr}
   862de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   862e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   862e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   862ea:	bf1d      	ittte	ne
   862ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   862f0:	ea94 0f0c 	teqne	r4, ip
   862f4:	ea95 0f0c 	teqne	r5, ip
   862f8:	f000 f8de 	bleq	864b8 <__aeabi_dmul+0x1dc>
   862fc:	442c      	add	r4, r5
   862fe:	ea81 0603 	eor.w	r6, r1, r3
   86302:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   86306:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8630a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8630e:	bf18      	it	ne
   86310:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   86314:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   86318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8631c:	d038      	beq.n	86390 <__aeabi_dmul+0xb4>
   8631e:	fba0 ce02 	umull	ip, lr, r0, r2
   86322:	f04f 0500 	mov.w	r5, #0
   86326:	fbe1 e502 	umlal	lr, r5, r1, r2
   8632a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8632e:	fbe0 e503 	umlal	lr, r5, r0, r3
   86332:	f04f 0600 	mov.w	r6, #0
   86336:	fbe1 5603 	umlal	r5, r6, r1, r3
   8633a:	f09c 0f00 	teq	ip, #0
   8633e:	bf18      	it	ne
   86340:	f04e 0e01 	orrne.w	lr, lr, #1
   86344:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   86348:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8634c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   86350:	d204      	bcs.n	8635c <__aeabi_dmul+0x80>
   86352:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   86356:	416d      	adcs	r5, r5
   86358:	eb46 0606 	adc.w	r6, r6, r6
   8635c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   86360:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   86364:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   86368:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8636c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   86370:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   86374:	bf88      	it	hi
   86376:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8637a:	d81e      	bhi.n	863ba <__aeabi_dmul+0xde>
   8637c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   86380:	bf08      	it	eq
   86382:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   86386:	f150 0000 	adcs.w	r0, r0, #0
   8638a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8638e:	bd70      	pop	{r4, r5, r6, pc}
   86390:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   86394:	ea46 0101 	orr.w	r1, r6, r1
   86398:	ea40 0002 	orr.w	r0, r0, r2
   8639c:	ea81 0103 	eor.w	r1, r1, r3
   863a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   863a4:	bfc2      	ittt	gt
   863a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   863aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   863ae:	bd70      	popgt	{r4, r5, r6, pc}
   863b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   863b4:	f04f 0e00 	mov.w	lr, #0
   863b8:	3c01      	subs	r4, #1
   863ba:	f300 80ab 	bgt.w	86514 <__aeabi_dmul+0x238>
   863be:	f114 0f36 	cmn.w	r4, #54	; 0x36
   863c2:	bfde      	ittt	le
   863c4:	2000      	movle	r0, #0
   863c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   863ca:	bd70      	pople	{r4, r5, r6, pc}
   863cc:	f1c4 0400 	rsb	r4, r4, #0
   863d0:	3c20      	subs	r4, #32
   863d2:	da35      	bge.n	86440 <__aeabi_dmul+0x164>
   863d4:	340c      	adds	r4, #12
   863d6:	dc1b      	bgt.n	86410 <__aeabi_dmul+0x134>
   863d8:	f104 0414 	add.w	r4, r4, #20
   863dc:	f1c4 0520 	rsb	r5, r4, #32
   863e0:	fa00 f305 	lsl.w	r3, r0, r5
   863e4:	fa20 f004 	lsr.w	r0, r0, r4
   863e8:	fa01 f205 	lsl.w	r2, r1, r5
   863ec:	ea40 0002 	orr.w	r0, r0, r2
   863f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   863f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   863f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   863fc:	fa21 f604 	lsr.w	r6, r1, r4
   86400:	eb42 0106 	adc.w	r1, r2, r6
   86404:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   86408:	bf08      	it	eq
   8640a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8640e:	bd70      	pop	{r4, r5, r6, pc}
   86410:	f1c4 040c 	rsb	r4, r4, #12
   86414:	f1c4 0520 	rsb	r5, r4, #32
   86418:	fa00 f304 	lsl.w	r3, r0, r4
   8641c:	fa20 f005 	lsr.w	r0, r0, r5
   86420:	fa01 f204 	lsl.w	r2, r1, r4
   86424:	ea40 0002 	orr.w	r0, r0, r2
   86428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8642c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   86430:	f141 0100 	adc.w	r1, r1, #0
   86434:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   86438:	bf08      	it	eq
   8643a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8643e:	bd70      	pop	{r4, r5, r6, pc}
   86440:	f1c4 0520 	rsb	r5, r4, #32
   86444:	fa00 f205 	lsl.w	r2, r0, r5
   86448:	ea4e 0e02 	orr.w	lr, lr, r2
   8644c:	fa20 f304 	lsr.w	r3, r0, r4
   86450:	fa01 f205 	lsl.w	r2, r1, r5
   86454:	ea43 0302 	orr.w	r3, r3, r2
   86458:	fa21 f004 	lsr.w	r0, r1, r4
   8645c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   86460:	fa21 f204 	lsr.w	r2, r1, r4
   86464:	ea20 0002 	bic.w	r0, r0, r2
   86468:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8646c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   86470:	bf08      	it	eq
   86472:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   86476:	bd70      	pop	{r4, r5, r6, pc}
   86478:	f094 0f00 	teq	r4, #0
   8647c:	d10f      	bne.n	8649e <__aeabi_dmul+0x1c2>
   8647e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   86482:	0040      	lsls	r0, r0, #1
   86484:	eb41 0101 	adc.w	r1, r1, r1
   86488:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8648c:	bf08      	it	eq
   8648e:	3c01      	subeq	r4, #1
   86490:	d0f7      	beq.n	86482 <__aeabi_dmul+0x1a6>
   86492:	ea41 0106 	orr.w	r1, r1, r6
   86496:	f095 0f00 	teq	r5, #0
   8649a:	bf18      	it	ne
   8649c:	4770      	bxne	lr
   8649e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   864a2:	0052      	lsls	r2, r2, #1
   864a4:	eb43 0303 	adc.w	r3, r3, r3
   864a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   864ac:	bf08      	it	eq
   864ae:	3d01      	subeq	r5, #1
   864b0:	d0f7      	beq.n	864a2 <__aeabi_dmul+0x1c6>
   864b2:	ea43 0306 	orr.w	r3, r3, r6
   864b6:	4770      	bx	lr
   864b8:	ea94 0f0c 	teq	r4, ip
   864bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   864c0:	bf18      	it	ne
   864c2:	ea95 0f0c 	teqne	r5, ip
   864c6:	d00c      	beq.n	864e2 <__aeabi_dmul+0x206>
   864c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   864cc:	bf18      	it	ne
   864ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   864d2:	d1d1      	bne.n	86478 <__aeabi_dmul+0x19c>
   864d4:	ea81 0103 	eor.w	r1, r1, r3
   864d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   864dc:	f04f 0000 	mov.w	r0, #0
   864e0:	bd70      	pop	{r4, r5, r6, pc}
   864e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   864e6:	bf06      	itte	eq
   864e8:	4610      	moveq	r0, r2
   864ea:	4619      	moveq	r1, r3
   864ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   864f0:	d019      	beq.n	86526 <__aeabi_dmul+0x24a>
   864f2:	ea94 0f0c 	teq	r4, ip
   864f6:	d102      	bne.n	864fe <__aeabi_dmul+0x222>
   864f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   864fc:	d113      	bne.n	86526 <__aeabi_dmul+0x24a>
   864fe:	ea95 0f0c 	teq	r5, ip
   86502:	d105      	bne.n	86510 <__aeabi_dmul+0x234>
   86504:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   86508:	bf1c      	itt	ne
   8650a:	4610      	movne	r0, r2
   8650c:	4619      	movne	r1, r3
   8650e:	d10a      	bne.n	86526 <__aeabi_dmul+0x24a>
   86510:	ea81 0103 	eor.w	r1, r1, r3
   86514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   86518:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8651c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   86520:	f04f 0000 	mov.w	r0, #0
   86524:	bd70      	pop	{r4, r5, r6, pc}
   86526:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8652a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8652e:	bd70      	pop	{r4, r5, r6, pc}

00086530 <__aeabi_ddiv>:
   86530:	b570      	push	{r4, r5, r6, lr}
   86532:	f04f 0cff 	mov.w	ip, #255	; 0xff
   86536:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8653a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8653e:	bf1d      	ittte	ne
   86540:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   86544:	ea94 0f0c 	teqne	r4, ip
   86548:	ea95 0f0c 	teqne	r5, ip
   8654c:	f000 f8a7 	bleq	8669e <__aeabi_ddiv+0x16e>
   86550:	eba4 0405 	sub.w	r4, r4, r5
   86554:	ea81 0e03 	eor.w	lr, r1, r3
   86558:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8655c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   86560:	f000 8088 	beq.w	86674 <__aeabi_ddiv+0x144>
   86564:	ea4f 3303 	mov.w	r3, r3, lsl #12
   86568:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8656c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   86570:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   86574:	ea4f 2202 	mov.w	r2, r2, lsl #8
   86578:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8657c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   86580:	ea4f 2600 	mov.w	r6, r0, lsl #8
   86584:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   86588:	429d      	cmp	r5, r3
   8658a:	bf08      	it	eq
   8658c:	4296      	cmpeq	r6, r2
   8658e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   86592:	f504 7440 	add.w	r4, r4, #768	; 0x300
   86596:	d202      	bcs.n	8659e <__aeabi_ddiv+0x6e>
   86598:	085b      	lsrs	r3, r3, #1
   8659a:	ea4f 0232 	mov.w	r2, r2, rrx
   8659e:	1ab6      	subs	r6, r6, r2
   865a0:	eb65 0503 	sbc.w	r5, r5, r3
   865a4:	085b      	lsrs	r3, r3, #1
   865a6:	ea4f 0232 	mov.w	r2, r2, rrx
   865aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   865ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   865b2:	ebb6 0e02 	subs.w	lr, r6, r2
   865b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   865ba:	bf22      	ittt	cs
   865bc:	1ab6      	subcs	r6, r6, r2
   865be:	4675      	movcs	r5, lr
   865c0:	ea40 000c 	orrcs.w	r0, r0, ip
   865c4:	085b      	lsrs	r3, r3, #1
   865c6:	ea4f 0232 	mov.w	r2, r2, rrx
   865ca:	ebb6 0e02 	subs.w	lr, r6, r2
   865ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   865d2:	bf22      	ittt	cs
   865d4:	1ab6      	subcs	r6, r6, r2
   865d6:	4675      	movcs	r5, lr
   865d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   865dc:	085b      	lsrs	r3, r3, #1
   865de:	ea4f 0232 	mov.w	r2, r2, rrx
   865e2:	ebb6 0e02 	subs.w	lr, r6, r2
   865e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   865ea:	bf22      	ittt	cs
   865ec:	1ab6      	subcs	r6, r6, r2
   865ee:	4675      	movcs	r5, lr
   865f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   865f4:	085b      	lsrs	r3, r3, #1
   865f6:	ea4f 0232 	mov.w	r2, r2, rrx
   865fa:	ebb6 0e02 	subs.w	lr, r6, r2
   865fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   86602:	bf22      	ittt	cs
   86604:	1ab6      	subcs	r6, r6, r2
   86606:	4675      	movcs	r5, lr
   86608:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8660c:	ea55 0e06 	orrs.w	lr, r5, r6
   86610:	d018      	beq.n	86644 <__aeabi_ddiv+0x114>
   86612:	ea4f 1505 	mov.w	r5, r5, lsl #4
   86616:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8661a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8661e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   86622:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   86626:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8662a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8662e:	d1c0      	bne.n	865b2 <__aeabi_ddiv+0x82>
   86630:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   86634:	d10b      	bne.n	8664e <__aeabi_ddiv+0x11e>
   86636:	ea41 0100 	orr.w	r1, r1, r0
   8663a:	f04f 0000 	mov.w	r0, #0
   8663e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   86642:	e7b6      	b.n	865b2 <__aeabi_ddiv+0x82>
   86644:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   86648:	bf04      	itt	eq
   8664a:	4301      	orreq	r1, r0
   8664c:	2000      	moveq	r0, #0
   8664e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   86652:	bf88      	it	hi
   86654:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   86658:	f63f aeaf 	bhi.w	863ba <__aeabi_dmul+0xde>
   8665c:	ebb5 0c03 	subs.w	ip, r5, r3
   86660:	bf04      	itt	eq
   86662:	ebb6 0c02 	subseq.w	ip, r6, r2
   86666:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8666a:	f150 0000 	adcs.w	r0, r0, #0
   8666e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   86672:	bd70      	pop	{r4, r5, r6, pc}
   86674:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   86678:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8667c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   86680:	bfc2      	ittt	gt
   86682:	ebd4 050c 	rsbsgt	r5, r4, ip
   86686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8668a:	bd70      	popgt	{r4, r5, r6, pc}
   8668c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   86690:	f04f 0e00 	mov.w	lr, #0
   86694:	3c01      	subs	r4, #1
   86696:	e690      	b.n	863ba <__aeabi_dmul+0xde>
   86698:	ea45 0e06 	orr.w	lr, r5, r6
   8669c:	e68d      	b.n	863ba <__aeabi_dmul+0xde>
   8669e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   866a2:	ea94 0f0c 	teq	r4, ip
   866a6:	bf08      	it	eq
   866a8:	ea95 0f0c 	teqeq	r5, ip
   866ac:	f43f af3b 	beq.w	86526 <__aeabi_dmul+0x24a>
   866b0:	ea94 0f0c 	teq	r4, ip
   866b4:	d10a      	bne.n	866cc <__aeabi_ddiv+0x19c>
   866b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   866ba:	f47f af34 	bne.w	86526 <__aeabi_dmul+0x24a>
   866be:	ea95 0f0c 	teq	r5, ip
   866c2:	f47f af25 	bne.w	86510 <__aeabi_dmul+0x234>
   866c6:	4610      	mov	r0, r2
   866c8:	4619      	mov	r1, r3
   866ca:	e72c      	b.n	86526 <__aeabi_dmul+0x24a>
   866cc:	ea95 0f0c 	teq	r5, ip
   866d0:	d106      	bne.n	866e0 <__aeabi_ddiv+0x1b0>
   866d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   866d6:	f43f aefd 	beq.w	864d4 <__aeabi_dmul+0x1f8>
   866da:	4610      	mov	r0, r2
   866dc:	4619      	mov	r1, r3
   866de:	e722      	b.n	86526 <__aeabi_dmul+0x24a>
   866e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   866e4:	bf18      	it	ne
   866e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   866ea:	f47f aec5 	bne.w	86478 <__aeabi_dmul+0x19c>
   866ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   866f2:	f47f af0d 	bne.w	86510 <__aeabi_dmul+0x234>
   866f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   866fa:	f47f aeeb 	bne.w	864d4 <__aeabi_dmul+0x1f8>
   866fe:	e712      	b.n	86526 <__aeabi_dmul+0x24a>

00086700 <__gedf2>:
   86700:	f04f 3cff 	mov.w	ip, #4294967295
   86704:	e006      	b.n	86714 <__cmpdf2+0x4>
   86706:	bf00      	nop

00086708 <__ledf2>:
   86708:	f04f 0c01 	mov.w	ip, #1
   8670c:	e002      	b.n	86714 <__cmpdf2+0x4>
   8670e:	bf00      	nop

00086710 <__cmpdf2>:
   86710:	f04f 0c01 	mov.w	ip, #1
   86714:	f84d cd04 	str.w	ip, [sp, #-4]!
   86718:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8671c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   86720:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   86724:	bf18      	it	ne
   86726:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8672a:	d01b      	beq.n	86764 <__cmpdf2+0x54>
   8672c:	b001      	add	sp, #4
   8672e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   86732:	bf0c      	ite	eq
   86734:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   86738:	ea91 0f03 	teqne	r1, r3
   8673c:	bf02      	ittt	eq
   8673e:	ea90 0f02 	teqeq	r0, r2
   86742:	2000      	moveq	r0, #0
   86744:	4770      	bxeq	lr
   86746:	f110 0f00 	cmn.w	r0, #0
   8674a:	ea91 0f03 	teq	r1, r3
   8674e:	bf58      	it	pl
   86750:	4299      	cmppl	r1, r3
   86752:	bf08      	it	eq
   86754:	4290      	cmpeq	r0, r2
   86756:	bf2c      	ite	cs
   86758:	17d8      	asrcs	r0, r3, #31
   8675a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8675e:	f040 0001 	orr.w	r0, r0, #1
   86762:	4770      	bx	lr
   86764:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   86768:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8676c:	d102      	bne.n	86774 <__cmpdf2+0x64>
   8676e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   86772:	d107      	bne.n	86784 <__cmpdf2+0x74>
   86774:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   86778:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8677c:	d1d6      	bne.n	8672c <__cmpdf2+0x1c>
   8677e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   86782:	d0d3      	beq.n	8672c <__cmpdf2+0x1c>
   86784:	f85d 0b04 	ldr.w	r0, [sp], #4
   86788:	4770      	bx	lr
   8678a:	bf00      	nop

0008678c <__aeabi_cdrcmple>:
   8678c:	4684      	mov	ip, r0
   8678e:	4610      	mov	r0, r2
   86790:	4662      	mov	r2, ip
   86792:	468c      	mov	ip, r1
   86794:	4619      	mov	r1, r3
   86796:	4663      	mov	r3, ip
   86798:	e000      	b.n	8679c <__aeabi_cdcmpeq>
   8679a:	bf00      	nop

0008679c <__aeabi_cdcmpeq>:
   8679c:	b501      	push	{r0, lr}
   8679e:	f7ff ffb7 	bl	86710 <__cmpdf2>
   867a2:	2800      	cmp	r0, #0
   867a4:	bf48      	it	mi
   867a6:	f110 0f00 	cmnmi.w	r0, #0
   867aa:	bd01      	pop	{r0, pc}

000867ac <__aeabi_dcmpeq>:
   867ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   867b0:	f7ff fff4 	bl	8679c <__aeabi_cdcmpeq>
   867b4:	bf0c      	ite	eq
   867b6:	2001      	moveq	r0, #1
   867b8:	2000      	movne	r0, #0
   867ba:	f85d fb08 	ldr.w	pc, [sp], #8
   867be:	bf00      	nop

000867c0 <__aeabi_dcmplt>:
   867c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   867c4:	f7ff ffea 	bl	8679c <__aeabi_cdcmpeq>
   867c8:	bf34      	ite	cc
   867ca:	2001      	movcc	r0, #1
   867cc:	2000      	movcs	r0, #0
   867ce:	f85d fb08 	ldr.w	pc, [sp], #8
   867d2:	bf00      	nop

000867d4 <__aeabi_dcmple>:
   867d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   867d8:	f7ff ffe0 	bl	8679c <__aeabi_cdcmpeq>
   867dc:	bf94      	ite	ls
   867de:	2001      	movls	r0, #1
   867e0:	2000      	movhi	r0, #0
   867e2:	f85d fb08 	ldr.w	pc, [sp], #8
   867e6:	bf00      	nop

000867e8 <__aeabi_dcmpge>:
   867e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   867ec:	f7ff ffce 	bl	8678c <__aeabi_cdrcmple>
   867f0:	bf94      	ite	ls
   867f2:	2001      	movls	r0, #1
   867f4:	2000      	movhi	r0, #0
   867f6:	f85d fb08 	ldr.w	pc, [sp], #8
   867fa:	bf00      	nop

000867fc <__aeabi_dcmpgt>:
   867fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   86800:	f7ff ffc4 	bl	8678c <__aeabi_cdrcmple>
   86804:	bf34      	ite	cc
   86806:	2001      	movcc	r0, #1
   86808:	2000      	movcs	r0, #0
   8680a:	f85d fb08 	ldr.w	pc, [sp], #8
   8680e:	bf00      	nop

00086810 <__aeabi_dcmpun>:
   86810:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   86814:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   86818:	d102      	bne.n	86820 <__aeabi_dcmpun+0x10>
   8681a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8681e:	d10a      	bne.n	86836 <__aeabi_dcmpun+0x26>
   86820:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   86824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   86828:	d102      	bne.n	86830 <__aeabi_dcmpun+0x20>
   8682a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8682e:	d102      	bne.n	86836 <__aeabi_dcmpun+0x26>
   86830:	f04f 0000 	mov.w	r0, #0
   86834:	4770      	bx	lr
   86836:	f04f 0001 	mov.w	r0, #1
   8683a:	4770      	bx	lr

0008683c <__aeabi_d2iz>:
   8683c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   86840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   86844:	d215      	bcs.n	86872 <__aeabi_d2iz+0x36>
   86846:	d511      	bpl.n	8686c <__aeabi_d2iz+0x30>
   86848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8684c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   86850:	d912      	bls.n	86878 <__aeabi_d2iz+0x3c>
   86852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   86856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8685a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8685e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   86862:	fa23 f002 	lsr.w	r0, r3, r2
   86866:	bf18      	it	ne
   86868:	4240      	negne	r0, r0
   8686a:	4770      	bx	lr
   8686c:	f04f 0000 	mov.w	r0, #0
   86870:	4770      	bx	lr
   86872:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   86876:	d105      	bne.n	86884 <__aeabi_d2iz+0x48>
   86878:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8687c:	bf08      	it	eq
   8687e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   86882:	4770      	bx	lr
   86884:	f04f 0000 	mov.w	r0, #0
   86888:	4770      	bx	lr
   8688a:	bf00      	nop

0008688c <__aeabi_uldivmod>:
   8688c:	b953      	cbnz	r3, 868a4 <__aeabi_uldivmod+0x18>
   8688e:	b94a      	cbnz	r2, 868a4 <__aeabi_uldivmod+0x18>
   86890:	2900      	cmp	r1, #0
   86892:	bf08      	it	eq
   86894:	2800      	cmpeq	r0, #0
   86896:	bf1c      	itt	ne
   86898:	f04f 31ff 	movne.w	r1, #4294967295
   8689c:	f04f 30ff 	movne.w	r0, #4294967295
   868a0:	f000 b97a 	b.w	86b98 <__aeabi_idiv0>
   868a4:	f1ad 0c08 	sub.w	ip, sp, #8
   868a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   868ac:	f000 f806 	bl	868bc <__udivmoddi4>
   868b0:	f8dd e004 	ldr.w	lr, [sp, #4]
   868b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   868b8:	b004      	add	sp, #16
   868ba:	4770      	bx	lr

000868bc <__udivmoddi4>:
   868bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   868c0:	468c      	mov	ip, r1
   868c2:	460e      	mov	r6, r1
   868c4:	4604      	mov	r4, r0
   868c6:	9d08      	ldr	r5, [sp, #32]
   868c8:	2b00      	cmp	r3, #0
   868ca:	d150      	bne.n	8696e <__udivmoddi4+0xb2>
   868cc:	428a      	cmp	r2, r1
   868ce:	4617      	mov	r7, r2
   868d0:	d96c      	bls.n	869ac <__udivmoddi4+0xf0>
   868d2:	fab2 fe82 	clz	lr, r2
   868d6:	f1be 0f00 	cmp.w	lr, #0
   868da:	d00b      	beq.n	868f4 <__udivmoddi4+0x38>
   868dc:	f1ce 0c20 	rsb	ip, lr, #32
   868e0:	fa01 f60e 	lsl.w	r6, r1, lr
   868e4:	fa20 fc0c 	lsr.w	ip, r0, ip
   868e8:	fa02 f70e 	lsl.w	r7, r2, lr
   868ec:	ea4c 0c06 	orr.w	ip, ip, r6
   868f0:	fa00 f40e 	lsl.w	r4, r0, lr
   868f4:	0c3a      	lsrs	r2, r7, #16
   868f6:	fbbc f9f2 	udiv	r9, ip, r2
   868fa:	b2bb      	uxth	r3, r7
   868fc:	fb02 cc19 	mls	ip, r2, r9, ip
   86900:	fb09 fa03 	mul.w	sl, r9, r3
   86904:	ea4f 4814 	mov.w	r8, r4, lsr #16
   86908:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   8690c:	45b2      	cmp	sl, r6
   8690e:	d90a      	bls.n	86926 <__udivmoddi4+0x6a>
   86910:	19f6      	adds	r6, r6, r7
   86912:	f109 31ff 	add.w	r1, r9, #4294967295
   86916:	f080 8125 	bcs.w	86b64 <__udivmoddi4+0x2a8>
   8691a:	45b2      	cmp	sl, r6
   8691c:	f240 8122 	bls.w	86b64 <__udivmoddi4+0x2a8>
   86920:	f1a9 0902 	sub.w	r9, r9, #2
   86924:	443e      	add	r6, r7
   86926:	eba6 060a 	sub.w	r6, r6, sl
   8692a:	fbb6 f0f2 	udiv	r0, r6, r2
   8692e:	fb02 6610 	mls	r6, r2, r0, r6
   86932:	fb00 f303 	mul.w	r3, r0, r3
   86936:	b2a4      	uxth	r4, r4
   86938:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8693c:	42a3      	cmp	r3, r4
   8693e:	d909      	bls.n	86954 <__udivmoddi4+0x98>
   86940:	19e4      	adds	r4, r4, r7
   86942:	f100 32ff 	add.w	r2, r0, #4294967295
   86946:	f080 810b 	bcs.w	86b60 <__udivmoddi4+0x2a4>
   8694a:	42a3      	cmp	r3, r4
   8694c:	f240 8108 	bls.w	86b60 <__udivmoddi4+0x2a4>
   86950:	3802      	subs	r0, #2
   86952:	443c      	add	r4, r7
   86954:	2100      	movs	r1, #0
   86956:	1ae4      	subs	r4, r4, r3
   86958:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8695c:	2d00      	cmp	r5, #0
   8695e:	d062      	beq.n	86a26 <__udivmoddi4+0x16a>
   86960:	2300      	movs	r3, #0
   86962:	fa24 f40e 	lsr.w	r4, r4, lr
   86966:	602c      	str	r4, [r5, #0]
   86968:	606b      	str	r3, [r5, #4]
   8696a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8696e:	428b      	cmp	r3, r1
   86970:	d907      	bls.n	86982 <__udivmoddi4+0xc6>
   86972:	2d00      	cmp	r5, #0
   86974:	d055      	beq.n	86a22 <__udivmoddi4+0x166>
   86976:	2100      	movs	r1, #0
   86978:	e885 0041 	stmia.w	r5, {r0, r6}
   8697c:	4608      	mov	r0, r1
   8697e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86982:	fab3 f183 	clz	r1, r3
   86986:	2900      	cmp	r1, #0
   86988:	f040 808f 	bne.w	86aaa <__udivmoddi4+0x1ee>
   8698c:	42b3      	cmp	r3, r6
   8698e:	d302      	bcc.n	86996 <__udivmoddi4+0xda>
   86990:	4282      	cmp	r2, r0
   86992:	f200 80fc 	bhi.w	86b8e <__udivmoddi4+0x2d2>
   86996:	1a84      	subs	r4, r0, r2
   86998:	eb66 0603 	sbc.w	r6, r6, r3
   8699c:	2001      	movs	r0, #1
   8699e:	46b4      	mov	ip, r6
   869a0:	2d00      	cmp	r5, #0
   869a2:	d040      	beq.n	86a26 <__udivmoddi4+0x16a>
   869a4:	e885 1010 	stmia.w	r5, {r4, ip}
   869a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   869ac:	b912      	cbnz	r2, 869b4 <__udivmoddi4+0xf8>
   869ae:	2701      	movs	r7, #1
   869b0:	fbb7 f7f2 	udiv	r7, r7, r2
   869b4:	fab7 fe87 	clz	lr, r7
   869b8:	f1be 0f00 	cmp.w	lr, #0
   869bc:	d135      	bne.n	86a2a <__udivmoddi4+0x16e>
   869be:	2101      	movs	r1, #1
   869c0:	1bf6      	subs	r6, r6, r7
   869c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   869c6:	fa1f f887 	uxth.w	r8, r7
   869ca:	fbb6 f2fc 	udiv	r2, r6, ip
   869ce:	fb0c 6612 	mls	r6, ip, r2, r6
   869d2:	fb08 f002 	mul.w	r0, r8, r2
   869d6:	0c23      	lsrs	r3, r4, #16
   869d8:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   869dc:	42b0      	cmp	r0, r6
   869de:	d907      	bls.n	869f0 <__udivmoddi4+0x134>
   869e0:	19f6      	adds	r6, r6, r7
   869e2:	f102 33ff 	add.w	r3, r2, #4294967295
   869e6:	d202      	bcs.n	869ee <__udivmoddi4+0x132>
   869e8:	42b0      	cmp	r0, r6
   869ea:	f200 80d2 	bhi.w	86b92 <__udivmoddi4+0x2d6>
   869ee:	461a      	mov	r2, r3
   869f0:	1a36      	subs	r6, r6, r0
   869f2:	fbb6 f0fc 	udiv	r0, r6, ip
   869f6:	fb0c 6610 	mls	r6, ip, r0, r6
   869fa:	fb08 f800 	mul.w	r8, r8, r0
   869fe:	b2a3      	uxth	r3, r4
   86a00:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   86a04:	45a0      	cmp	r8, r4
   86a06:	d907      	bls.n	86a18 <__udivmoddi4+0x15c>
   86a08:	19e4      	adds	r4, r4, r7
   86a0a:	f100 33ff 	add.w	r3, r0, #4294967295
   86a0e:	d202      	bcs.n	86a16 <__udivmoddi4+0x15a>
   86a10:	45a0      	cmp	r8, r4
   86a12:	f200 80b9 	bhi.w	86b88 <__udivmoddi4+0x2cc>
   86a16:	4618      	mov	r0, r3
   86a18:	eba4 0408 	sub.w	r4, r4, r8
   86a1c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   86a20:	e79c      	b.n	8695c <__udivmoddi4+0xa0>
   86a22:	4629      	mov	r1, r5
   86a24:	4628      	mov	r0, r5
   86a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86a2a:	fa07 f70e 	lsl.w	r7, r7, lr
   86a2e:	f1ce 0320 	rsb	r3, lr, #32
   86a32:	fa26 f203 	lsr.w	r2, r6, r3
   86a36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86a3a:	fbb2 f1fc 	udiv	r1, r2, ip
   86a3e:	fa1f f887 	uxth.w	r8, r7
   86a42:	fb0c 2211 	mls	r2, ip, r1, r2
   86a46:	fa06 f60e 	lsl.w	r6, r6, lr
   86a4a:	fa20 f303 	lsr.w	r3, r0, r3
   86a4e:	fb01 f908 	mul.w	r9, r1, r8
   86a52:	4333      	orrs	r3, r6
   86a54:	0c1e      	lsrs	r6, r3, #16
   86a56:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   86a5a:	45b1      	cmp	r9, r6
   86a5c:	fa00 f40e 	lsl.w	r4, r0, lr
   86a60:	d909      	bls.n	86a76 <__udivmoddi4+0x1ba>
   86a62:	19f6      	adds	r6, r6, r7
   86a64:	f101 32ff 	add.w	r2, r1, #4294967295
   86a68:	f080 808c 	bcs.w	86b84 <__udivmoddi4+0x2c8>
   86a6c:	45b1      	cmp	r9, r6
   86a6e:	f240 8089 	bls.w	86b84 <__udivmoddi4+0x2c8>
   86a72:	3902      	subs	r1, #2
   86a74:	443e      	add	r6, r7
   86a76:	eba6 0609 	sub.w	r6, r6, r9
   86a7a:	fbb6 f0fc 	udiv	r0, r6, ip
   86a7e:	fb0c 6210 	mls	r2, ip, r0, r6
   86a82:	fb00 f908 	mul.w	r9, r0, r8
   86a86:	b29e      	uxth	r6, r3
   86a88:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   86a8c:	45b1      	cmp	r9, r6
   86a8e:	d907      	bls.n	86aa0 <__udivmoddi4+0x1e4>
   86a90:	19f6      	adds	r6, r6, r7
   86a92:	f100 33ff 	add.w	r3, r0, #4294967295
   86a96:	d271      	bcs.n	86b7c <__udivmoddi4+0x2c0>
   86a98:	45b1      	cmp	r9, r6
   86a9a:	d96f      	bls.n	86b7c <__udivmoddi4+0x2c0>
   86a9c:	3802      	subs	r0, #2
   86a9e:	443e      	add	r6, r7
   86aa0:	eba6 0609 	sub.w	r6, r6, r9
   86aa4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   86aa8:	e78f      	b.n	869ca <__udivmoddi4+0x10e>
   86aaa:	f1c1 0720 	rsb	r7, r1, #32
   86aae:	fa22 f807 	lsr.w	r8, r2, r7
   86ab2:	408b      	lsls	r3, r1
   86ab4:	ea48 0303 	orr.w	r3, r8, r3
   86ab8:	fa26 f407 	lsr.w	r4, r6, r7
   86abc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   86ac0:	fbb4 f9fe 	udiv	r9, r4, lr
   86ac4:	fa1f fc83 	uxth.w	ip, r3
   86ac8:	fb0e 4419 	mls	r4, lr, r9, r4
   86acc:	408e      	lsls	r6, r1
   86ace:	fa20 f807 	lsr.w	r8, r0, r7
   86ad2:	fb09 fa0c 	mul.w	sl, r9, ip
   86ad6:	ea48 0806 	orr.w	r8, r8, r6
   86ada:	ea4f 4618 	mov.w	r6, r8, lsr #16
   86ade:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   86ae2:	45a2      	cmp	sl, r4
   86ae4:	fa02 f201 	lsl.w	r2, r2, r1
   86ae8:	fa00 f601 	lsl.w	r6, r0, r1
   86aec:	d908      	bls.n	86b00 <__udivmoddi4+0x244>
   86aee:	18e4      	adds	r4, r4, r3
   86af0:	f109 30ff 	add.w	r0, r9, #4294967295
   86af4:	d244      	bcs.n	86b80 <__udivmoddi4+0x2c4>
   86af6:	45a2      	cmp	sl, r4
   86af8:	d942      	bls.n	86b80 <__udivmoddi4+0x2c4>
   86afa:	f1a9 0902 	sub.w	r9, r9, #2
   86afe:	441c      	add	r4, r3
   86b00:	eba4 040a 	sub.w	r4, r4, sl
   86b04:	fbb4 f0fe 	udiv	r0, r4, lr
   86b08:	fb0e 4410 	mls	r4, lr, r0, r4
   86b0c:	fb00 fc0c 	mul.w	ip, r0, ip
   86b10:	fa1f f888 	uxth.w	r8, r8
   86b14:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   86b18:	45a4      	cmp	ip, r4
   86b1a:	d907      	bls.n	86b2c <__udivmoddi4+0x270>
   86b1c:	18e4      	adds	r4, r4, r3
   86b1e:	f100 3eff 	add.w	lr, r0, #4294967295
   86b22:	d229      	bcs.n	86b78 <__udivmoddi4+0x2bc>
   86b24:	45a4      	cmp	ip, r4
   86b26:	d927      	bls.n	86b78 <__udivmoddi4+0x2bc>
   86b28:	3802      	subs	r0, #2
   86b2a:	441c      	add	r4, r3
   86b2c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86b30:	fba0 8902 	umull	r8, r9, r0, r2
   86b34:	eba4 0c0c 	sub.w	ip, r4, ip
   86b38:	45cc      	cmp	ip, r9
   86b3a:	46c2      	mov	sl, r8
   86b3c:	46ce      	mov	lr, r9
   86b3e:	d315      	bcc.n	86b6c <__udivmoddi4+0x2b0>
   86b40:	d012      	beq.n	86b68 <__udivmoddi4+0x2ac>
   86b42:	b155      	cbz	r5, 86b5a <__udivmoddi4+0x29e>
   86b44:	ebb6 030a 	subs.w	r3, r6, sl
   86b48:	eb6c 060e 	sbc.w	r6, ip, lr
   86b4c:	fa06 f707 	lsl.w	r7, r6, r7
   86b50:	40cb      	lsrs	r3, r1
   86b52:	431f      	orrs	r7, r3
   86b54:	40ce      	lsrs	r6, r1
   86b56:	602f      	str	r7, [r5, #0]
   86b58:	606e      	str	r6, [r5, #4]
   86b5a:	2100      	movs	r1, #0
   86b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86b60:	4610      	mov	r0, r2
   86b62:	e6f7      	b.n	86954 <__udivmoddi4+0x98>
   86b64:	4689      	mov	r9, r1
   86b66:	e6de      	b.n	86926 <__udivmoddi4+0x6a>
   86b68:	4546      	cmp	r6, r8
   86b6a:	d2ea      	bcs.n	86b42 <__udivmoddi4+0x286>
   86b6c:	ebb8 0a02 	subs.w	sl, r8, r2
   86b70:	eb69 0e03 	sbc.w	lr, r9, r3
   86b74:	3801      	subs	r0, #1
   86b76:	e7e4      	b.n	86b42 <__udivmoddi4+0x286>
   86b78:	4670      	mov	r0, lr
   86b7a:	e7d7      	b.n	86b2c <__udivmoddi4+0x270>
   86b7c:	4618      	mov	r0, r3
   86b7e:	e78f      	b.n	86aa0 <__udivmoddi4+0x1e4>
   86b80:	4681      	mov	r9, r0
   86b82:	e7bd      	b.n	86b00 <__udivmoddi4+0x244>
   86b84:	4611      	mov	r1, r2
   86b86:	e776      	b.n	86a76 <__udivmoddi4+0x1ba>
   86b88:	3802      	subs	r0, #2
   86b8a:	443c      	add	r4, r7
   86b8c:	e744      	b.n	86a18 <__udivmoddi4+0x15c>
   86b8e:	4608      	mov	r0, r1
   86b90:	e706      	b.n	869a0 <__udivmoddi4+0xe4>
   86b92:	3a02      	subs	r2, #2
   86b94:	443e      	add	r6, r7
   86b96:	e72b      	b.n	869f0 <__udivmoddi4+0x134>

00086b98 <__aeabi_idiv0>:
   86b98:	4770      	bx	lr
   86b9a:	bf00      	nop
   86b9c:	00000020 	.word	0x00000020
   86ba0:	2064636c 	.word	0x2064636c
   86ba4:	2077656e 	.word	0x2077656e
   86ba8:	00000a0d 	.word	0x00000a0d

00086bac <line2addr>:
   86bac:	54144000 6a6e6f42 2c72756f 0000000d     .@.TBonjour,....
   86bbc:	6d6d6f43 0d746e65 00000000 656c6c61     Comment.....alle
   86bcc:	00000d72 73756f76 00000d3f 6e6f6942     r...vous?...Bion
   86bdc:	72756f6a 0d2c6f6e 00000000 65766542     journo,.....Beve
   86bec:	0000000d 000d616c 61757161 21212121     ....la..aqua!!!!
   86bfc:	0000000d 6c6c6548 000d2c6f 0d776f48     ....Hello,..How.
   86c0c:	00000000 0d657261 00000000 3f756f79     ....are.....you?
   86c1c:	00000d3f 696e6f4b 77696863 000d2c61     ?...Konichiwa,..
   86c2c:	7374694d 73696275 000d6968 68737573     Mitsubishi..sush
   86c3c:	00000d69 6167614e 696b6173 0000000d     i...Nagasaki....
   86c4c:	003e0a0d 3e3e0a0d 0000003e 000a0d20     ..>...>>>... ...
   86c5c:	6e750a0d 776f6e6b 6d63206e 25203a64     ..unknown cmd: %
   86c6c:	0d583430 0000000a 73332e25 32302520     04X.....%.3s %02
   86c7c:	2e252064 25207333 00643230 64323025     d %.3s %02d.%02d
   86c8c:	3230253a 30253a64 00206432              :%02d:%02d .

00086c98 <flashSequ>:
   86c98:	00000032 000001f4 00000032 000004b0     2.......2.......
   86ca8:	00000000 00006874 0000646e 00006472     ....th..nd..rd..
   86cb8:	756e614a 00797261 72626546 79726175     January.February
   86cc8:	00000000 6372614d 00000068 69727041     ....March...Apri
   86cd8:	0000006c 0079614d 656e754a 00000000     l...May.June....
   86ce8:	796c754a 00000000 75677541 00007473     July....August..
   86cf8:	74706553 65626d65 00000072 6f74634f     September...Octo
   86d08:	00726562 65766f4e 7265626d 00000000     ber.November....
   86d18:	65636544 7265626d 00000000 646e7553     December....Sund
   86d28:	00007961 646e6f4d 00007961 73657554     ay..Monday..Tues
   86d38:	00796164 6e646557 61647365 00000079     day.Wednesday...
   86d48:	72756854 79616473 00000000 64697246     Thursday....Frid
   86d58:	00007961 75746153 79616472 00000000     ay..Saturday....

00086d68 <_cmdEntries>:
   86d68:	00006cab 000811b1 0000aaf6 000812d9     .l..............
   86d78:	000010e1 0008135d 00000000 00000000     ....]...........
   86d88:	0d203a20 0000000a 7465274c 64207461      : .....L'etat d
   86d98:	616c2065 6f726220 20656863 69617465     e la broche etai
   86da8:	61682074 0d207475 0000000a 7465274c     t haut .....L'et
   86db8:	64207461 616c2065 6f726220 20656863     at de la broche 
   86dc8:	69617465 61622074 0a0d2073 00000000     etait bas ......

00086dd8 <usart_console_settings>:
   86dd8:	0001c200 000000c0 00000800 00000000     ................
	...

00086df0 <flashSequApp>:
   86df0:	00000064 000001f4 00000064 000001f4     d.......d.......
   86e00:	00000064 00000898 00000000 090a0a0d     d...............
   86e10:	454d5441 5441204c 334d4153 54532055     ATMEL ATSAM3U ST
   86e20:	45545241 0a0a0d44 00000000              ARTED.......

00086e2c <_global_impure_ptr>:
   86e2c:	20070630 00464e49 00666e69 004e414e     0.. INF.inf.NAN.
   86e3c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   86e4c:	46454443 00000000 33323130 37363534     CDEF....01234567
   86e5c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   86e6c:	0000296c 00000030                       l)..0...

00086e74 <blanks.7223>:
   86e74:	20202020 20202020 20202020 20202020                     

00086e84 <zeroes.7224>:
   86e84:	30303030 30303030 30303030 30303030     0000000000000000
   86e94:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   86ea4:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   86eb4:	00000000                                ....

00086eb8 <__mprec_bigtens>:
   86eb8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   86ec8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   86ed8:	7f73bf3c 75154fdd                       <.s..O.u

00086ee0 <__mprec_tens>:
   86ee0:	00000000 3ff00000 00000000 40240000     .......?......$@
   86ef0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   86f00:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   86f10:	00000000 412e8480 00000000 416312d0     .......A......cA
   86f20:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   86f30:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   86f40:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   86f50:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   86f60:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   86f70:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   86f80:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   86f90:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   86fa0:	79d99db4 44ea7843                       ...yCx.D

00086fa8 <p05.6055>:
   86fa8:	00000005 00000019 0000007d              ........}...

00086fb4 <_ctype_>:
   86fb4:	20202000 20202020 28282020 20282828     .         ((((( 
   86fc4:	20202020 20202020 20202020 20202020                     
   86fd4:	10108820 10101010 10101010 10101010      ...............
   86fe4:	04040410 04040404 10040404 10101010     ................
   86ff4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   87004:	01010101 01010101 01010101 10101010     ................
   87014:	42421010 42424242 02020202 02020202     ..BBBBBB........
   87024:	02020202 02020202 02020202 10101010     ................
   87034:	00000020 00000000 00000000 00000000      ...............
	...

000870b8 <_init>:
   870b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   870ba:	bf00      	nop
   870bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   870be:	bc08      	pop	{r3}
   870c0:	469e      	mov	lr, r3
   870c2:	4770      	bx	lr

000870c4 <__init_array_start>:
   870c4:	00083a75 	.word	0x00083a75

000870c8 <__frame_dummy_init_array_entry>:
   870c8:	00080119                                ....

000870cc <_fini>:
   870cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   870ce:	bf00      	nop
   870d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   870d2:	bc08      	pop	{r3}
   870d4:	469e      	mov	lr, r3
   870d6:	4770      	bx	lr

000870d8 <__fini_array_start>:
   870d8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b470      	push	{r4, r5, r6}
20070002:	b083      	sub	sp, #12
20070004:	9e06      	ldr	r6, [sp, #24]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMS32|| SAM4CMP32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
20070006:	4d1b      	ldr	r5, [pc, #108]	; (20070074 <efc_perform_read_sequence+0x74>)
20070008:	42a8      	cmp	r0, r5
2007000a:	bf0c      	ite	eq
2007000c:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
20070010:	f44f 2540 	movne.w	r5, #786432	; 0xc0000
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070014:	b35b      	cbz	r3, 2007006e <efc_perform_read_sequence+0x6e>
20070016:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20070018:	6803      	ldr	r3, [r0, #0]
2007001a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2007001e:	6003      	str	r3, [r0, #0]
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20070020:	b2c9      	uxtb	r1, r1
20070022:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070026:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070028:	6883      	ldr	r3, [r0, #8]
2007002a:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2007002c:	9b01      	ldr	r3, [sp, #4]
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d1f9      	bne.n	20070028 <efc_perform_read_sequence+0x28>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070034:	b14e      	cbz	r6, 2007004a <efc_perform_read_sequence+0x4a>
20070036:	4629      	mov	r1, r5
20070038:	1f23      	subs	r3, r4, #4
2007003a:	eb05 0586 	add.w	r5, r5, r6, lsl #2
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007003e:	f851 4b04 	ldr.w	r4, [r1], #4
20070042:	f843 4f04 	str.w	r4, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070046:	42a9      	cmp	r1, r5
20070048:	d1f9      	bne.n	2007003e <efc_perform_read_sequence+0x3e>
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2007004a:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2007004c:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20070050:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070052:	6883      	ldr	r3, [r0, #8]
20070054:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070056:	9b01      	ldr	r3, [sp, #4]
20070058:	f013 0f01 	tst.w	r3, #1
2007005c:	d0f9      	beq.n	20070052 <efc_perform_read_sequence+0x52>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2007005e:	6803      	ldr	r3, [r0, #0]
20070060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20070064:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20070066:	2000      	movs	r0, #0
}
20070068:	b003      	add	sp, #12
2007006a:	bc70      	pop	{r4, r5, r6}
2007006c:	4770      	bx	lr
		return EFC_RC_INVALID;
2007006e:	2002      	movs	r0, #2
20070070:	e7fa      	b.n	20070068 <efc_perform_read_sequence+0x68>
20070072:	bf00      	nop
20070074:	400e0a00 	.word	0x400e0a00

20070078 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20070078:	6001      	str	r1, [r0, #0]
2007007a:	4770      	bx	lr

2007007c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2007007c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2007007e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20070080:	6883      	ldr	r3, [r0, #8]
20070082:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070084:	9b01      	ldr	r3, [sp, #4]
20070086:	f013 0f01 	tst.w	r3, #1
2007008a:	d0f9      	beq.n	20070080 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2007008c:	9801      	ldr	r0, [sp, #4]
}
2007008e:	f000 0006 	and.w	r0, r0, #6
20070092:	b002      	add	sp, #8
20070094:	4770      	bx	lr
20070096:	bf00      	nop

20070098 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070098:	f3bf 8f5f 	dmb	sy
2007009c:	3801      	subs	r0, #1
2007009e:	d1fb      	bne.n	20070098 <portable_delay_cycles>
200700a0:	4770      	bx	lr
	...

200700a4 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
200700a8:	4a20      	ldr	r2, [pc, #128]	; (2007012c <SystemInit+0x88>)
200700aa:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200700ac:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b0:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200700b2:	4b1f      	ldr	r3, [pc, #124]	; (20070130 <SystemInit+0x8c>)
200700b4:	6a1b      	ldr	r3, [r3, #32]
200700b6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200700ba:	d107      	bne.n	200700cc <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700bc:	4a1d      	ldr	r2, [pc, #116]	; (20070134 <SystemInit+0x90>)
200700be:	4b1c      	ldr	r3, [pc, #112]	; (20070130 <SystemInit+0x8c>)
200700c0:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200700c2:	461a      	mov	r2, r3
200700c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700c6:	f013 0f01 	tst.w	r3, #1
200700ca:	d0fb      	beq.n	200700c4 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700cc:	4a1a      	ldr	r2, [pc, #104]	; (20070138 <SystemInit+0x94>)
200700ce:	4b18      	ldr	r3, [pc, #96]	; (20070130 <SystemInit+0x8c>)
200700d0:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200700d2:	461a      	mov	r2, r3
200700d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200700da:	d0fb      	beq.n	200700d4 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200700dc:	4a14      	ldr	r2, [pc, #80]	; (20070130 <SystemInit+0x8c>)
200700de:	6b13      	ldr	r3, [r2, #48]	; 0x30
200700e0:	f023 0303 	bic.w	r3, r3, #3
200700e4:	f043 0301 	orr.w	r3, r3, #1
200700e8:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700ea:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700ec:	f013 0f08 	tst.w	r3, #8
200700f0:	d0fb      	beq.n	200700ea <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200700f2:	4a12      	ldr	r2, [pc, #72]	; (2007013c <SystemInit+0x98>)
200700f4:	4b0e      	ldr	r3, [pc, #56]	; (20070130 <SystemInit+0x8c>)
200700f6:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200700f8:	461a      	mov	r2, r3
200700fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700fc:	f013 0f02 	tst.w	r3, #2
20070100:	d0fb      	beq.n	200700fa <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070102:	2211      	movs	r2, #17
20070104:	4b0a      	ldr	r3, [pc, #40]	; (20070130 <SystemInit+0x8c>)
20070106:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070108:	461a      	mov	r2, r3
2007010a:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007010c:	f013 0f08 	tst.w	r3, #8
20070110:	d0fb      	beq.n	2007010a <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070112:	2212      	movs	r2, #18
20070114:	4b06      	ldr	r3, [pc, #24]	; (20070130 <SystemInit+0x8c>)
20070116:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070118:	461a      	mov	r2, r3
2007011a:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007011c:	f013 0f08 	tst.w	r3, #8
20070120:	d0fb      	beq.n	2007011a <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070122:	4a07      	ldr	r2, [pc, #28]	; (20070140 <SystemInit+0x9c>)
20070124:	4b07      	ldr	r3, [pc, #28]	; (20070144 <SystemInit+0xa0>)
20070126:	601a      	str	r2, [r3, #0]
20070128:	4770      	bx	lr
2007012a:	bf00      	nop
2007012c:	400e0a00 	.word	0x400e0a00
20070130:	400e0600 	.word	0x400e0600
20070134:	00370809 	.word	0x00370809
20070138:	01370809 	.word	0x01370809
2007013c:	200d3f01 	.word	0x200d3f01
20070140:	0501bd00 	.word	0x0501bd00
20070144:	20070624 	.word	0x20070624

20070148 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20070148:	4b1b      	ldr	r3, [pc, #108]	; (200701b8 <system_init_flash+0x70>)
2007014a:	4298      	cmp	r0, r3
2007014c:	d915      	bls.n	2007017a <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2007014e:	4b1b      	ldr	r3, [pc, #108]	; (200701bc <system_init_flash+0x74>)
20070150:	4298      	cmp	r0, r3
20070152:	d919      	bls.n	20070188 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070154:	4b1a      	ldr	r3, [pc, #104]	; (200701c0 <system_init_flash+0x78>)
20070156:	4298      	cmp	r0, r3
20070158:	d91e      	bls.n	20070198 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2007015a:	4b1a      	ldr	r3, [pc, #104]	; (200701c4 <system_init_flash+0x7c>)
2007015c:	4298      	cmp	r0, r3
2007015e:	d923      	bls.n	200701a8 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070160:	4b19      	ldr	r3, [pc, #100]	; (200701c8 <system_init_flash+0x80>)
20070162:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070164:	bf94      	ite	ls
20070166:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
2007016a:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
2007016e:	4a17      	ldr	r2, [pc, #92]	; (200701cc <system_init_flash+0x84>)
20070170:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070172:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070176:	6013      	str	r3, [r2, #0]
20070178:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2007017a:	2300      	movs	r3, #0
2007017c:	4a13      	ldr	r2, [pc, #76]	; (200701cc <system_init_flash+0x84>)
2007017e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20070180:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070184:	6013      	str	r3, [r2, #0]
20070186:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20070188:	f44f 7380 	mov.w	r3, #256	; 0x100
2007018c:	4a0f      	ldr	r2, [pc, #60]	; (200701cc <system_init_flash+0x84>)
2007018e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
20070190:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070194:	6013      	str	r3, [r2, #0]
20070196:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070198:	f44f 7300 	mov.w	r3, #512	; 0x200
2007019c:	4a0b      	ldr	r2, [pc, #44]	; (200701cc <system_init_flash+0x84>)
2007019e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200701a0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200701a4:	6013      	str	r3, [r2, #0]
200701a6:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200701a8:	f44f 7340 	mov.w	r3, #768	; 0x300
200701ac:	4a07      	ldr	r2, [pc, #28]	; (200701cc <system_init_flash+0x84>)
200701ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200701b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200701b4:	6013      	str	r3, [r2, #0]
200701b6:	4770      	bx	lr
200701b8:	0121eabf 	.word	0x0121eabf
200701bc:	02faf07f 	.word	0x02faf07f
200701c0:	03d08fff 	.word	0x03d08fff
200701c4:	04c4b3ff 	.word	0x04c4b3ff
200701c8:	055d4a7f 	.word	0x055d4a7f
200701cc:	400e0a00 	.word	0x400e0a00

200701d0 <wCRCTable>:
200701d0:	00000000 0000c0c1 0000c181 00000140     ............@...
200701e0:	0000c301 000003c0 00000280 0000c241     ............A...
200701f0:	0000c601 000006c0 00000780 0000c741     ............A...
20070200:	00000500 0000c5c1 0000c481 00000440     ............@...
20070210:	0000cc01 00000cc0 00000d80 0000cd41     ............A...
20070220:	00000f00 0000cfc1 0000ce81 00000e40     ............@...
20070230:	00000a00 0000cac1 0000cb81 00000b40     ............@...
20070240:	0000c901 000009c0 00000880 0000c841     ............A...
20070250:	0000d801 000018c0 00001980 0000d941     ............A...
20070260:	00001b00 0000dbc1 0000da81 00001a40     ............@...
20070270:	00001e00 0000dec1 0000df81 00001f40     ............@...
20070280:	0000dd01 00001dc0 00001c80 0000dc41     ............A...
20070290:	00001400 0000d4c1 0000d581 00001540     ............@...
200702a0:	0000d701 000017c0 00001680 0000d641     ............A...
200702b0:	0000d201 000012c0 00001380 0000d341     ............A...
200702c0:	00001100 0000d1c1 0000d081 00001040     ............@...
200702d0:	0000f001 000030c0 00003180 0000f141     .....0...1..A...
200702e0:	00003300 0000f3c1 0000f281 00003240     .3..........@2..
200702f0:	00003600 0000f6c1 0000f781 00003740     .6..........@7..
20070300:	0000f501 000035c0 00003480 0000f441     .....5...4..A...
20070310:	00003c00 0000fcc1 0000fd81 00003d40     .<..........@=..
20070320:	0000ff01 00003fc0 00003e80 0000fe41     .....?...>..A...
20070330:	0000fa01 00003ac0 00003b80 0000fb41     .....:...;..A...
20070340:	00003900 0000f9c1 0000f881 00003840     .9..........@8..
20070350:	00002800 0000e8c1 0000e981 00002940     .(..........@)..
20070360:	0000eb01 00002bc0 00002a80 0000ea41     .....+...*..A...
20070370:	0000ee01 00002ec0 00002f80 0000ef41     ........./..A...
20070380:	00002d00 0000edc1 0000ec81 00002c40     .-..........@,..
20070390:	0000e401 000024c0 00002580 0000e541     .....$...%..A...
200703a0:	00002700 0000e7c1 0000e681 00002640     .'..........@&..
200703b0:	00002200 0000e2c1 0000e381 00002340     ."..........@#..
200703c0:	0000e101 000021c0 00002080 0000e041     .....!... ..A...
200703d0:	0000a001 000060c0 00006180 0000a141     .....`...a..A...
200703e0:	00006300 0000a3c1 0000a281 00006240     .c..........@b..
200703f0:	00006600 0000a6c1 0000a781 00006740     .f..........@g..
20070400:	0000a501 000065c0 00006480 0000a441     .....e...d..A...
20070410:	00006c00 0000acc1 0000ad81 00006d40     .l..........@m..
20070420:	0000af01 00006fc0 00006e80 0000ae41     .....o...n..A...
20070430:	0000aa01 00006ac0 00006b80 0000ab41     .....j...k..A...
20070440:	00006900 0000a9c1 0000a881 00006840     .i..........@h..
20070450:	00007800 0000b8c1 0000b981 00007940     .x..........@y..
20070460:	0000bb01 00007bc0 00007a80 0000ba41     .....{...z..A...
20070470:	0000be01 00007ec0 00007f80 0000bf41     .....~......A...
20070480:	00007d00 0000bdc1 0000bc81 00007c40     .}..........@|..
20070490:	0000b401 000074c0 00007580 0000b541     .....t...u..A...
200704a0:	00007700 0000b7c1 0000b681 00007640     .w..........@v..
200704b0:	00007200 0000b2c1 0000b381 00007340     .r..........@s..
200704c0:	0000b101 000071c0 00007080 0000b041     .....q...p..A...
200704d0:	00005000 000090c1 00009181 00005140     .P..........@Q..
200704e0:	00009301 000053c0 00005280 00009241     .....S...R..A...
200704f0:	00009601 000056c0 00005780 00009741     .....V...W..A...
20070500:	00005500 000095c1 00009481 00005440     .U..........@T..
20070510:	00009c01 00005cc0 00005d80 00009d41     .....\...]..A...
20070520:	00005f00 00009fc1 00009e81 00005e40     ._..........@^..
20070530:	00005a00 00009ac1 00009b81 00005b40     .Z..........@[..
20070540:	00009901 000059c0 00005880 00009841     .....Y...X..A...
20070550:	00008801 000048c0 00004980 00008941     .....H...I..A...
20070560:	00004b00 00008bc1 00008a81 00004a40     .K..........@J..
20070570:	00004e00 00008ec1 00008f81 00004f40     .N..........@O..
20070580:	00008d01 00004dc0 00004c80 00008c41     .....M...L..A...
20070590:	00004400 000084c1 00008581 00004540     .D..........@E..
200705a0:	00008701 000047c0 00004680 00008641     .....G...F..A...
200705b0:	00008201 000042c0 00004380 00008341     .....B...C..A...
200705c0:	00004100 000081c1 00008081 00004040     .A..........@@..

200705d0 <pErrorFunc>:
200705d0:	00080b45                                E...

200705d4 <daysOfWeek>:
200705d4:	00086d24 00086d2c 00086d34 00086d3c     $m..,m..4m..<m..
200705e4:	00086d48 00086d54 00086d5c              Hm..Tm..\m..

200705f0 <months>:
200705f0:	00086cb8 00086cc0 00086ccc 00086cd4     .l...l...l...l..
20070600:	00086cdc 00086ce0 00086ce8 00086cf0     .l...l...l...l..
20070610:	00086cf8 00086d04 00086d0c 00086d18     .l...m...m...m..

20070620 <g_interrupt_enabled>:
20070620:	00000001                                ....

20070624 <SystemCoreClock>:
20070624:	003d0900                                ..=.

20070628 <_impure_ptr>:
20070628:	20070630 00000000                       0.. ....

20070630 <impure_data>:
20070630:	00000000 2007091c 20070984 200709ec     ....... ... ... 
	...
200706d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200706e8:	0005deec 0000000b 00000000 00000000     ................
	...

20070a58 <__atexit_recursive_mutex>:
20070a58:	20071670                                p.. 

20070a5c <__global_locale>:
20070a5c:	00000043 00000000 00000000 00000000     C...............
	...
20070a7c:	00000043 00000000 00000000 00000000     C...............
	...
20070a9c:	00000043 00000000 00000000 00000000     C...............
	...
20070abc:	00000043 00000000 00000000 00000000     C...............
	...
20070adc:	00000043 00000000 00000000 00000000     C...............
	...
20070afc:	00000043 00000000 00000000 00000000     C...............
	...
20070b1c:	00000043 00000000 00000000 00000000     C...............
	...
20070b3c:	00085791 00084fa9 00000000 00086fb4     .W...O.......o..
20070b4c:	00086eb0 00086e28 00086e28 00086e28     .n..(n..(n..(n..
20070b5c:	00086e28 00086e28 00086e28 00086e28     (n..(n..(n..(n..
20070b6c:	00086e28 00086e28 ffffffff ffffffff     (n..(n..........
20070b7c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070ba4:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20070bc8 <__malloc_av_>:
	...
20070bd0:	20070bc8 20070bc8 20070bd0 20070bd0     ... ... ... ... 
20070be0:	20070bd8 20070bd8 20070be0 20070be0     ... ... ... ... 
20070bf0:	20070be8 20070be8 20070bf0 20070bf0     ... ... ... ... 
20070c00:	20070bf8 20070bf8 20070c00 20070c00     ... ... ... ... 
20070c10:	20070c08 20070c08 20070c10 20070c10     ... ... ... ... 
20070c20:	20070c18 20070c18 20070c20 20070c20     ... ...  ..  .. 
20070c30:	20070c28 20070c28 20070c30 20070c30     (.. (.. 0.. 0.. 
20070c40:	20070c38 20070c38 20070c40 20070c40     8.. 8.. @.. @.. 
20070c50:	20070c48 20070c48 20070c50 20070c50     H.. H.. P.. P.. 
20070c60:	20070c58 20070c58 20070c60 20070c60     X.. X.. `.. `.. 
20070c70:	20070c68 20070c68 20070c70 20070c70     h.. h.. p.. p.. 
20070c80:	20070c78 20070c78 20070c80 20070c80     x.. x.. ... ... 
20070c90:	20070c88 20070c88 20070c90 20070c90     ... ... ... ... 
20070ca0:	20070c98 20070c98 20070ca0 20070ca0     ... ... ... ... 
20070cb0:	20070ca8 20070ca8 20070cb0 20070cb0     ... ... ... ... 
20070cc0:	20070cb8 20070cb8 20070cc0 20070cc0     ... ... ... ... 
20070cd0:	20070cc8 20070cc8 20070cd0 20070cd0     ... ... ... ... 
20070ce0:	20070cd8 20070cd8 20070ce0 20070ce0     ... ... ... ... 
20070cf0:	20070ce8 20070ce8 20070cf0 20070cf0     ... ... ... ... 
20070d00:	20070cf8 20070cf8 20070d00 20070d00     ... ... ... ... 
20070d10:	20070d08 20070d08 20070d10 20070d10     ... ... ... ... 
20070d20:	20070d18 20070d18 20070d20 20070d20     ... ...  ..  .. 
20070d30:	20070d28 20070d28 20070d30 20070d30     (.. (.. 0.. 0.. 
20070d40:	20070d38 20070d38 20070d40 20070d40     8.. 8.. @.. @.. 
20070d50:	20070d48 20070d48 20070d50 20070d50     H.. H.. P.. P.. 
20070d60:	20070d58 20070d58 20070d60 20070d60     X.. X.. `.. `.. 
20070d70:	20070d68 20070d68 20070d70 20070d70     h.. h.. p.. p.. 
20070d80:	20070d78 20070d78 20070d80 20070d80     x.. x.. ... ... 
20070d90:	20070d88 20070d88 20070d90 20070d90     ... ... ... ... 
20070da0:	20070d98 20070d98 20070da0 20070da0     ... ... ... ... 
20070db0:	20070da8 20070da8 20070db0 20070db0     ... ... ... ... 
20070dc0:	20070db8 20070db8 20070dc0 20070dc0     ... ... ... ... 
20070dd0:	20070dc8 20070dc8 20070dd0 20070dd0     ... ... ... ... 
20070de0:	20070dd8 20070dd8 20070de0 20070de0     ... ... ... ... 
20070df0:	20070de8 20070de8 20070df0 20070df0     ... ... ... ... 
20070e00:	20070df8 20070df8 20070e00 20070e00     ... ... ... ... 
20070e10:	20070e08 20070e08 20070e10 20070e10     ... ... ... ... 
20070e20:	20070e18 20070e18 20070e20 20070e20     ... ...  ..  .. 
20070e30:	20070e28 20070e28 20070e30 20070e30     (.. (.. 0.. 0.. 
20070e40:	20070e38 20070e38 20070e40 20070e40     8.. 8.. @.. @.. 
20070e50:	20070e48 20070e48 20070e50 20070e50     H.. H.. P.. P.. 
20070e60:	20070e58 20070e58 20070e60 20070e60     X.. X.. `.. `.. 
20070e70:	20070e68 20070e68 20070e70 20070e70     h.. h.. p.. p.. 
20070e80:	20070e78 20070e78 20070e80 20070e80     x.. x.. ... ... 
20070e90:	20070e88 20070e88 20070e90 20070e90     ... ... ... ... 
20070ea0:	20070e98 20070e98 20070ea0 20070ea0     ... ... ... ... 
20070eb0:	20070ea8 20070ea8 20070eb0 20070eb0     ... ... ... ... 
20070ec0:	20070eb8 20070eb8 20070ec0 20070ec0     ... ... ... ... 
20070ed0:	20070ec8 20070ec8 20070ed0 20070ed0     ... ... ... ... 
20070ee0:	20070ed8 20070ed8 20070ee0 20070ee0     ... ... ... ... 
20070ef0:	20070ee8 20070ee8 20070ef0 20070ef0     ... ... ... ... 
20070f00:	20070ef8 20070ef8 20070f00 20070f00     ... ... ... ... 
20070f10:	20070f08 20070f08 20070f10 20070f10     ... ... ... ... 
20070f20:	20070f18 20070f18 20070f20 20070f20     ... ...  ..  .. 
20070f30:	20070f28 20070f28 20070f30 20070f30     (.. (.. 0.. 0.. 
20070f40:	20070f38 20070f38 20070f40 20070f40     8.. 8.. @.. @.. 
20070f50:	20070f48 20070f48 20070f50 20070f50     H.. H.. P.. P.. 
20070f60:	20070f58 20070f58 20070f60 20070f60     X.. X.. `.. `.. 
20070f70:	20070f68 20070f68 20070f70 20070f70     h.. h.. p.. p.. 
20070f80:	20070f78 20070f78 20070f80 20070f80     x.. x.. ... ... 
20070f90:	20070f88 20070f88 20070f90 20070f90     ... ... ... ... 
20070fa0:	20070f98 20070f98 20070fa0 20070fa0     ... ... ... ... 
20070fb0:	20070fa8 20070fa8 20070fb0 20070fb0     ... ... ... ... 
20070fc0:	20070fb8 20070fb8 20070fc0 20070fc0     ... ... ... ... 

20070fd0 <__malloc_sbrk_base>:
20070fd0:	ffffffff                                ....

20070fd4 <__malloc_trim_threshold>:
20070fd4:	00020000                                ....
