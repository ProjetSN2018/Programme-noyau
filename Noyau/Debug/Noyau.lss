
Noyau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e5c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086e5c  00086e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000f40  20070000  00086e64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000005c8  20070f40  00087da4  00020f40  2**2
                  ALLOC
  4 .stack        00002000  20071508  0008836c  00020f40  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020f40  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020f69  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001a68c  00000000  00000000  00020fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003fe7  00000000  00000000  0003b64e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004cdd  00000000  00000000  0003f635  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ae8  00000000  00000000  00044312  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009b0  00000000  00000000  00044dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ba21  00000000  00000000  000457aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001399f  00000000  00000000  000611cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000653ee  00000000  00000000  00074b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002458  00000000  00000000  000d9f58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	08 35 07 20 c1 1c 08 00 bd 1c 08 00 bd 1c 08 00     .5. ............
   80010:	bd 1c 08 00 bd 1c 08 00 bd 1c 08 00 00 00 00 00     ................
	...
   8002c:	bd 1c 08 00 bd 1c 08 00 00 00 00 00 bd 1c 08 00     ................
   8003c:	bd 1c 08 00 bd 1c 08 00 bd 1c 08 00 e9 09 08 00     ................
   8004c:	bd 1c 08 00 bd 1c 08 00 bd 1c 08 00 bd 1c 08 00     ................
   8005c:	bd 1c 08 00 bd 1c 08 00 bd 1c 08 00 00 00 00 00     ................
   8006c:	31 1b 08 00 45 1b 08 00 59 1b 08 00 6d 1b 08 00     1...E...Y...m...
	...
   80084:	dd 12 08 00 bd 1c 08 00 bd 1c 08 00 bd 1c 08 00     ................
   80094:	bd 1c 08 00 bd 1c 08 00 bd 1c 08 00 bd 1c 08 00     ................
   800a4:	00 00 00 00 bd 1c 08 00 59 15 08 00 bd 1c 08 00     ........Y.......
   800b4:	bd 1c 08 00 bd 1c 08 00 bd 1c 08 00 bd 1c 08 00     ................
   800c4:	bd 1c 08 00 bd 1c 08 00 bd 1c 08 00 bd 1c 08 00     ................
   800d4:	bd 1c 08 00 bd 1c 08 00 bd 1c 08 00 bd 1c 08 00     ................
   800e4:	bd 1c 08 00 bd 1c 08 00 bd 1c 08 00 bd 1c 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070f40 	.word	0x20070f40
   80110:	00000000 	.word	0x00000000
   80114:	00086e64 	.word	0x00086e64

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00086e64 	.word	0x00086e64
   80154:	20070f44 	.word	0x20070f44
   80158:	00086e64 	.word	0x00086e64
   8015c:	00000000 	.word	0x00000000

00080160 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
   80160:	b921      	cbnz	r1, 8016c <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
   80162:	6843      	ldr	r3, [r0, #4]
   80164:	f023 0301 	bic.w	r3, r3, #1
   80168:	6043      	str	r3, [r0, #4]
   8016a:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
   8016c:	6843      	ldr	r3, [r0, #4]
   8016e:	f043 0301 	orr.w	r3, r3, #1
   80172:	6043      	str	r3, [r0, #4]
   80174:	4770      	bx	lr

00080176 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
   80176:	6201      	str	r1, [r0, #32]
   80178:	4770      	bx	lr

0008017a <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
   8017a:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
   8017c:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   8017e:	6884      	ldr	r4, [r0, #8]
   80180:	42a5      	cmp	r5, r4
   80182:	d003      	beq.n	8018c <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
   80184:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   80186:	6884      	ldr	r4, [r0, #8]
   80188:	42ac      	cmp	r4, r5
   8018a:	d1fb      	bne.n	80184 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
   8018c:	b161      	cbz	r1, 801a8 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8018e:	f3c4 5001 	ubfx	r0, r4, #20, #2
   80192:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   80196:	f3c4 4003 	ubfx	r0, r4, #16, #4
   8019a:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
   8019e:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
   801a2:	bf18      	it	ne
   801a4:	300c      	addne	r0, #12
   801a6:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
   801a8:	b142      	cbz	r2, 801bc <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
   801aa:	f3c4 3102 	ubfx	r1, r4, #12, #3
   801ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   801b2:	f3c4 2003 	ubfx	r0, r4, #8, #4
   801b6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
   801ba:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
   801bc:	b143      	cbz	r3, 801d0 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   801be:	f3c4 1202 	ubfx	r2, r4, #4, #3
   801c2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   801c6:	f004 040f 	and.w	r4, r4, #15
   801ca:	eb04 0442 	add.w	r4, r4, r2, lsl #1
   801ce:	601c      	str	r4, [r3, #0]
	}
}
   801d0:	bc30      	pop	{r4, r5}
   801d2:	4770      	bx	lr

000801d4 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
   801d4:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
   801d6:	6844      	ldr	r4, [r0, #4]
   801d8:	f014 0f01 	tst.w	r4, #1
   801dc:	d005      	beq.n	801ea <rtc_set_time+0x16>
		if (ul_hour > 12) {
   801de:	290c      	cmp	r1, #12
   801e0:	d93d      	bls.n	8025e <rtc_set_time+0x8a>
			ul_hour -= 12;
   801e2:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
   801e4:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   801e8:	e000      	b.n	801ec <rtc_set_time+0x18>
	uint32_t ul_time = 0;
   801ea:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   801ec:	4c1d      	ldr	r4, [pc, #116]	; (80264 <rtc_set_time+0x90>)
   801ee:	fba4 5603 	umull	r5, r6, r4, r3
   801f2:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
   801f4:	eb06 0586 	add.w	r5, r6, r6, lsl #2
   801f8:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
   801fc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
   80200:	fba4 6502 	umull	r6, r5, r4, r2
   80204:	08ed      	lsrs	r5, r5, #3
   80206:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
   8020a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8020e:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
   80212:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   80216:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
   80218:	fba4 4201 	umull	r4, r2, r4, r1
   8021c:	08d2      	lsrs	r2, r2, #3
   8021e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
   80222:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80226:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   8022a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   8022e:	6983      	ldr	r3, [r0, #24]
   80230:	f013 0f04 	tst.w	r3, #4
   80234:	d0fb      	beq.n	8022e <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
   80236:	6803      	ldr	r3, [r0, #0]
   80238:	f043 0301 	orr.w	r3, r3, #1
   8023c:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   8023e:	6983      	ldr	r3, [r0, #24]
   80240:	f013 0f01 	tst.w	r3, #1
   80244:	d0fb      	beq.n	8023e <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
   80246:	2301      	movs	r3, #1
   80248:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
   8024a:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
   8024c:	6803      	ldr	r3, [r0, #0]
   8024e:	f023 0301 	bic.w	r3, r3, #1
   80252:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
   80254:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   80256:	f000 0001 	and.w	r0, r0, #1
   8025a:	bcf0      	pop	{r4, r5, r6, r7}
   8025c:	4770      	bx	lr
	uint32_t ul_time = 0;
   8025e:	2700      	movs	r7, #0
   80260:	e7c4      	b.n	801ec <rtc_set_time+0x18>
   80262:	bf00      	nop
   80264:	cccccccd 	.word	0xcccccccd

00080268 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
   80268:	b4f0      	push	{r4, r5, r6, r7}
   8026a:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
   8026c:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   8026e:	68c4      	ldr	r4, [r0, #12]
   80270:	42a5      	cmp	r5, r4
   80272:	d003      	beq.n	8027c <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
   80274:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   80276:	68c4      	ldr	r4, [r0, #12]
   80278:	42ac      	cmp	r4, r5
   8027a:	d1fb      	bne.n	80274 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
   8027c:	b199      	cbz	r1, 802a6 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8027e:	f3c4 3003 	ubfx	r0, r4, #12, #4
   80282:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80286:	f3c4 2703 	ubfx	r7, r4, #8, #4
   8028a:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8028e:	f3c4 1002 	ubfx	r0, r4, #4, #3
   80292:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   80296:	f004 000f 	and.w	r0, r4, #15
   8029a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8029e:	2564      	movs	r5, #100	; 0x64
   802a0:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
   802a4:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
   802a6:	b142      	cbz	r2, 802ba <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   802a8:	f3c4 5000 	ubfx	r0, r4, #20, #1
   802ac:	0081      	lsls	r1, r0, #2
   802ae:	4408      	add	r0, r1
   802b0:	f3c4 4103 	ubfx	r1, r4, #16, #4
   802b4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
   802b8:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
   802ba:	b143      	cbz	r3, 802ce <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   802bc:	f3c4 7201 	ubfx	r2, r4, #28, #2
   802c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   802c4:	f3c4 6103 	ubfx	r1, r4, #24, #4
   802c8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   802cc:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
   802ce:	b116      	cbz	r6, 802d6 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
   802d0:	f3c4 5442 	ubfx	r4, r4, #21, #3
   802d4:	6034      	str	r4, [r6, #0]
	}
}
   802d6:	bcf0      	pop	{r4, r5, r6, r7}
   802d8:	4770      	bx	lr
	...

000802dc <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
   802dc:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   802de:	4d2a      	ldr	r5, [pc, #168]	; (80388 <rtc_set_date+0xac>)
   802e0:	fba5 4603 	umull	r4, r6, r5, r3
   802e4:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
   802e6:	9c03      	ldr	r4, [sp, #12]
   802e8:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   802ea:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
   802ee:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   802f2:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   802f6:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
   802fa:	fba5 6402 	umull	r6, r4, r5, r2
   802fe:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80300:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
   80304:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   80308:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   8030c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
   80310:	4b1e      	ldr	r3, [pc, #120]	; (8038c <rtc_set_date+0xb0>)
   80312:	fba3 4301 	umull	r4, r3, r3, r1
   80316:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80318:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
   8031c:	4b1c      	ldr	r3, [pc, #112]	; (80390 <rtc_set_date+0xb4>)
   8031e:	fba3 4301 	umull	r4, r3, r3, r1
   80322:	095b      	lsrs	r3, r3, #5
   80324:	fba5 6403 	umull	r6, r4, r5, r3
   80328:	08e4      	lsrs	r4, r4, #3
   8032a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   8032e:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80332:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
   80334:	fba5 4301 	umull	r4, r3, r5, r1
   80338:	08db      	lsrs	r3, r3, #3
   8033a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   8033e:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80342:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
   80346:	fba5 1503 	umull	r1, r5, r5, r3
   8034a:	08ed      	lsrs	r5, r5, #3
   8034c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   80350:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   80354:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   80358:	6983      	ldr	r3, [r0, #24]
   8035a:	f013 0f04 	tst.w	r3, #4
   8035e:	d0fb      	beq.n	80358 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
   80360:	6803      	ldr	r3, [r0, #0]
   80362:	f043 0302 	orr.w	r3, r3, #2
   80366:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   80368:	6983      	ldr	r3, [r0, #24]
   8036a:	f013 0f01 	tst.w	r3, #1
   8036e:	d0fb      	beq.n	80368 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
   80370:	2301      	movs	r3, #1
   80372:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
   80374:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
   80376:	6803      	ldr	r3, [r0, #0]
   80378:	f023 0302 	bic.w	r3, r3, #2
   8037c:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
   8037e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   80380:	f000 0002 	and.w	r0, r0, #2
   80384:	bc70      	pop	{r4, r5, r6}
   80386:	4770      	bx	lr
   80388:	cccccccd 	.word	0xcccccccd
   8038c:	10624dd3 	.word	0x10624dd3
   80390:	51eb851f 	.word	0x51eb851f

00080394 <Lcd>:
/////////////////////////////////////////////////////////////////////////////////////

const char line2addr[]={ 0x00, 0x40, 0x14, 0x54 };

 uint32_t Lcd(uint32_t sc, ...)
 {
   80394:	b40f      	push	{r0, r1, r2, r3}
   80396:	b538      	push	{r3, r4, r5, lr}
	switch (sc)
   80398:	9904      	ldr	r1, [sp, #16]
   8039a:	2907      	cmp	r1, #7
   8039c:	f000 80dc 	beq.w	80558 <Lcd+0x1c4>
   803a0:	d844      	bhi.n	8042c <Lcd+0x98>
   803a2:	2902      	cmp	r1, #2
   803a4:	f000 80cd 	beq.w	80542 <Lcd+0x1ae>
   803a8:	d91a      	bls.n	803e0 <Lcd+0x4c>
   803aa:	2905      	cmp	r1, #5
   803ac:	f000 80e9 	beq.w	80582 <Lcd+0x1ee>
   803b0:	2906      	cmp	r1, #6
   803b2:	f040 80f5 	bne.w	805a0 <Lcd+0x20c>
		delay_ms(1);
		gpio_set_pin_low(LCD_E);
		break;
	case _LCD_COMMAND:
#define cmd		((char)pa1)
		gpio_set_pin_low(LCD_RS);	//RS=0 => COMMAND
   803b6:	2068      	movs	r0, #104	; 0x68
   803b8:	4b7c      	ldr	r3, [pc, #496]	; (805ac <Lcd+0x218>)
   803ba:	4798      	blx	r3
		_LcdPutData(cmd);
   803bc:	9c05      	ldr	r4, [sp, #20]
   803be:	b2e1      	uxtb	r1, r4
   803c0:	2001      	movs	r0, #1
   803c2:	f7ff ffe7 	bl	80394 <Lcd>
		_LcdNybble();
   803c6:	2002      	movs	r0, #2
   803c8:	f7ff ffe4 	bl	80394 <Lcd>
		_LcdPutData(cmd<<4);
   803cc:	0121      	lsls	r1, r4, #4
   803ce:	f401 617f 	and.w	r1, r1, #4080	; 0xff0
   803d2:	2001      	movs	r0, #1
   803d4:	f7ff ffde 	bl	80394 <Lcd>
		_LcdNybble();
   803d8:	2002      	movs	r0, #2
   803da:	f7ff ffdb 	bl	80394 <Lcd>
#undef cmd
		break;
   803de:	e046      	b.n	8046e <Lcd+0xda>
	switch (sc)
   803e0:	2901      	cmp	r1, #1
   803e2:	f040 80dd 	bne.w	805a0 <Lcd+0x20c>
		if(mIsBitsSet(data,LCD_DATA7_MSK)) gpio_set_pin_high(LCD_DATA7); //P1
   803e6:	9c05      	ldr	r4, [sp, #20]
   803e8:	f014 0f80 	tst.w	r4, #128	; 0x80
   803ec:	f04f 0039 	mov.w	r0, #57	; 0x39
   803f0:	bf14      	ite	ne
   803f2:	4b6f      	ldrne	r3, [pc, #444]	; (805b0 <Lcd+0x21c>)
		else gpio_set_pin_low(LCD_DATA7);
   803f4:	4b6d      	ldreq	r3, [pc, #436]	; (805ac <Lcd+0x218>)
   803f6:	4798      	blx	r3
		if(mIsBitsSet(data,LCD_DATA6_MSK)) gpio_set_pin_high(LCD_DATA6); //P2
   803f8:	b2e4      	uxtb	r4, r4
   803fa:	f014 0f40 	tst.w	r4, #64	; 0x40
   803fe:	f04f 005c 	mov.w	r0, #92	; 0x5c
   80402:	bf14      	ite	ne
   80404:	4b6a      	ldrne	r3, [pc, #424]	; (805b0 <Lcd+0x21c>)
		else gpio_set_pin_low(LCD_DATA6);
   80406:	4b69      	ldreq	r3, [pc, #420]	; (805ac <Lcd+0x218>)
   80408:	4798      	blx	r3
		if(mIsBitsSet(data,LCD_DATA5_MSK)) gpio_set_pin_high(LCD_DATA5); //P3
   8040a:	f014 0f20 	tst.w	r4, #32
   8040e:	f04f 005a 	mov.w	r0, #90	; 0x5a
   80412:	bf14      	ite	ne
   80414:	4b66      	ldrne	r3, [pc, #408]	; (805b0 <Lcd+0x21c>)
		else gpio_set_pin_low(LCD_DATA5);
   80416:	4b65      	ldreq	r3, [pc, #404]	; (805ac <Lcd+0x218>)
   80418:	4798      	blx	r3
		if(mIsBitsSet(data,LCD_DATA4_MSK)) gpio_set_pin_high(LCD_DATA4); //P4
   8041a:	f014 0f10 	tst.w	r4, #16
   8041e:	f04f 0059 	mov.w	r0, #89	; 0x59
   80422:	bf14      	ite	ne
   80424:	4b62      	ldrne	r3, [pc, #392]	; (805b0 <Lcd+0x21c>)
		else gpio_set_pin_low(LCD_DATA4);
   80426:	4b61      	ldreq	r3, [pc, #388]	; (805ac <Lcd+0x218>)
   80428:	4798      	blx	r3
   8042a:	e020      	b.n	8046e <Lcd+0xda>
	switch (sc)
   8042c:	2964      	cmp	r1, #100	; 0x64
   8042e:	d046      	beq.n	804be <Lcd+0x12a>
   80430:	d922      	bls.n	80478 <Lcd+0xe4>
   80432:	2966      	cmp	r1, #102	; 0x66
   80434:	d030      	beq.n	80498 <Lcd+0x104>
   80436:	2967      	cmp	r1, #103	; 0x67
   80438:	f040 80b2 	bne.w	805a0 <Lcd+0x20c>
		LcdPutstr(" ",0,0);
   8043c:	4c5d      	ldr	r4, [pc, #372]	; (805b4 <Lcd+0x220>)
   8043e:	2300      	movs	r3, #0
   80440:	461a      	mov	r2, r3
   80442:	4621      	mov	r1, r4
   80444:	2066      	movs	r0, #102	; 0x66
   80446:	f7ff ffa5 	bl	80394 <Lcd>
		LcdPutstr(" ",1,0);
   8044a:	2300      	movs	r3, #0
   8044c:	2201      	movs	r2, #1
   8044e:	4621      	mov	r1, r4
   80450:	2066      	movs	r0, #102	; 0x66
   80452:	f7ff ff9f 	bl	80394 <Lcd>
		LcdPutstr(" ",2,0);
   80456:	2300      	movs	r3, #0
   80458:	2202      	movs	r2, #2
   8045a:	4621      	mov	r1, r4
   8045c:	2066      	movs	r0, #102	; 0x66
   8045e:	f7ff ff99 	bl	80394 <Lcd>
		LcdPutstr(" ",3,0);
   80462:	2300      	movs	r3, #0
   80464:	2203      	movs	r2, #3
   80466:	4621      	mov	r1, r4
   80468:	2066      	movs	r0, #102	; 0x66
   8046a:	f7ff ff93 	bl	80394 <Lcd>

	default:
		Error(ERR_LCD_SWITCH_BAD_SC, sc);
	}
	return 0;
   8046e:	2000      	movs	r0, #0
   80470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80474:	b004      	add	sp, #16
   80476:	4770      	bx	lr
	switch (sc)
   80478:	2908      	cmp	r1, #8
   8047a:	f040 8091 	bne.w	805a0 <Lcd+0x20c>
		_LcdCommand((line2addr[_nLine&0x03]+_nCol)|0x80);
   8047e:	9b05      	ldr	r3, [sp, #20]
   80480:	f003 0303 	and.w	r3, r3, #3
   80484:	4a4c      	ldr	r2, [pc, #304]	; (805b8 <Lcd+0x224>)
   80486:	5cd1      	ldrb	r1, [r2, r3]
   80488:	9b06      	ldr	r3, [sp, #24]
   8048a:	4419      	add	r1, r3
   8048c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   80490:	2006      	movs	r0, #6
   80492:	f7ff ff7f 	bl	80394 <Lcd>
		break;
   80496:	e7ea      	b.n	8046e <Lcd+0xda>
		_LcdSetCursor(_line,_col);
   80498:	9a07      	ldr	r2, [sp, #28]
   8049a:	9906      	ldr	r1, [sp, #24]
   8049c:	2008      	movs	r0, #8
   8049e:	f7ff ff79 	bl	80394 <Lcd>
		while(*(char*)_pStr)
   804a2:	9c05      	ldr	r4, [sp, #20]
   804a4:	7821      	ldrb	r1, [r4, #0]
   804a6:	2900      	cmp	r1, #0
   804a8:	d0e1      	beq.n	8046e <Lcd+0xda>
			_LcdWriteData(*(char*)_pStr);
   804aa:	2507      	movs	r5, #7
   804ac:	4628      	mov	r0, r5
   804ae:	f7ff ff71 	bl	80394 <Lcd>
			_pStr++;
   804b2:	3401      	adds	r4, #1
   804b4:	9405      	str	r4, [sp, #20]
		while(*(char*)_pStr)
   804b6:	7821      	ldrb	r1, [r4, #0]
   804b8:	2900      	cmp	r1, #0
   804ba:	d1f7      	bne.n	804ac <Lcd+0x118>
   804bc:	e7d7      	b.n	8046e <Lcd+0xda>
		Putstr("lcd new \r\n");
   804be:	493f      	ldr	r1, [pc, #252]	; (805bc <Lcd+0x228>)
   804c0:	2067      	movs	r0, #103	; 0x67
   804c2:	4b3f      	ldr	r3, [pc, #252]	; (805c0 <Lcd+0x22c>)
   804c4:	4798      	blx	r3
		gpio_configure_pin(LCD_DATA4, LCD_PIN_FLAGS);
   804c6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804ca:	2059      	movs	r0, #89	; 0x59
   804cc:	4c3d      	ldr	r4, [pc, #244]	; (805c4 <Lcd+0x230>)
   804ce:	47a0      	blx	r4
		gpio_configure_pin(LCD_DATA5, LCD_PIN_FLAGS);
   804d0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804d4:	205a      	movs	r0, #90	; 0x5a
   804d6:	47a0      	blx	r4
		gpio_configure_pin(LCD_DATA6, LCD_PIN_FLAGS);
   804d8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804dc:	205c      	movs	r0, #92	; 0x5c
   804de:	47a0      	blx	r4
		gpio_configure_pin(LCD_DATA7, LCD_PIN_FLAGS);
   804e0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804e4:	2039      	movs	r0, #57	; 0x39
   804e6:	47a0      	blx	r4
		gpio_configure_pin(LCD_E,	  LCD_PIN_FLAGS);
   804e8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804ec:	2067      	movs	r0, #103	; 0x67
   804ee:	47a0      	blx	r4
		gpio_configure_pin(LCD_RS,    LCD_PIN_FLAGS);
   804f0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804f4:	2068      	movs	r0, #104	; 0x68
   804f6:	47a0      	blx	r4
		gpio_set_pin_low(LCD_DATA4);
   804f8:	2059      	movs	r0, #89	; 0x59
   804fa:	4c2c      	ldr	r4, [pc, #176]	; (805ac <Lcd+0x218>)
   804fc:	47a0      	blx	r4
		gpio_set_pin_low(LCD_DATA5);
   804fe:	205a      	movs	r0, #90	; 0x5a
   80500:	47a0      	blx	r4
		gpio_set_pin_low(LCD_DATA6);
   80502:	205c      	movs	r0, #92	; 0x5c
   80504:	47a0      	blx	r4
		gpio_set_pin_low(LCD_DATA7);
   80506:	2039      	movs	r0, #57	; 0x39
   80508:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RS);
   8050a:	2068      	movs	r0, #104	; 0x68
   8050c:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   8050e:	2067      	movs	r0, #103	; 0x67
   80510:	47a0      	blx	r4
		delay_ms(100);			// SEQUENCE DISPLAY HAVEN
   80512:	482d      	ldr	r0, [pc, #180]	; (805c8 <Lcd+0x234>)
   80514:	4b2d      	ldr	r3, [pc, #180]	; (805cc <Lcd+0x238>)
   80516:	4798      	blx	r3
		_LcdCommand(0x20);		 //Function Set
   80518:	2120      	movs	r1, #32
   8051a:	2006      	movs	r0, #6
   8051c:	f7ff ff3a 	bl	80394 <Lcd>
		_LcdCommand(0x10);		 //Cursor or display shift
   80520:	2110      	movs	r1, #16
   80522:	2006      	movs	r0, #6
   80524:	f7ff ff36 	bl	80394 <Lcd>
		_LcdCommand(0x0E);		 //Display On/Off
   80528:	210e      	movs	r1, #14
   8052a:	2006      	movs	r0, #6
   8052c:	f7ff ff32 	bl	80394 <Lcd>
		_LcdCommand(0x06);		 //Entry Mode
   80530:	2106      	movs	r1, #6
   80532:	4608      	mov	r0, r1
   80534:	f7ff ff2e 	bl	80394 <Lcd>
		_LcdCommand(0x01);		 //Clear Display
   80538:	2101      	movs	r1, #1
   8053a:	2006      	movs	r0, #6
   8053c:	f7ff ff2a 	bl	80394 <Lcd>
		break;
   80540:	e795      	b.n	8046e <Lcd+0xda>
		gpio_set_pin_high(LCD_E);
   80542:	2067      	movs	r0, #103	; 0x67
   80544:	4b1a      	ldr	r3, [pc, #104]	; (805b0 <Lcd+0x21c>)
   80546:	4798      	blx	r3
		delay_ms(1);
   80548:	f241 7070 	movw	r0, #6000	; 0x1770
   8054c:	4b1f      	ldr	r3, [pc, #124]	; (805cc <Lcd+0x238>)
   8054e:	4798      	blx	r3
		gpio_set_pin_low(LCD_E);
   80550:	2067      	movs	r0, #103	; 0x67
   80552:	4b16      	ldr	r3, [pc, #88]	; (805ac <Lcd+0x218>)
   80554:	4798      	blx	r3
		break;
   80556:	e78a      	b.n	8046e <Lcd+0xda>
		gpio_set_pin_high(LCD_RS);	//RS=1 => DATA
   80558:	2068      	movs	r0, #104	; 0x68
   8055a:	4b15      	ldr	r3, [pc, #84]	; (805b0 <Lcd+0x21c>)
   8055c:	4798      	blx	r3
		_LcdPutData(data);
   8055e:	9c05      	ldr	r4, [sp, #20]
   80560:	b2e1      	uxtb	r1, r4
   80562:	2001      	movs	r0, #1
   80564:	f7ff ff16 	bl	80394 <Lcd>
		_LcdNybble();
   80568:	2002      	movs	r0, #2
   8056a:	f7ff ff13 	bl	80394 <Lcd>
		_LcdPutData(data<<4);
   8056e:	0121      	lsls	r1, r4, #4
   80570:	f401 617f 	and.w	r1, r1, #4080	; 0xff0
   80574:	2001      	movs	r0, #1
   80576:	f7ff ff0d 	bl	80394 <Lcd>
		_LcdNybble();
   8057a:	2002      	movs	r0, #2
   8057c:	f7ff ff0a 	bl	80394 <Lcd>
		break;
   80580:	e775      	b.n	8046e <Lcd+0xda>
		gpio_set_pin_high(LCD_DATA4);
   80582:	2059      	movs	r0, #89	; 0x59
   80584:	4c0a      	ldr	r4, [pc, #40]	; (805b0 <Lcd+0x21c>)
   80586:	47a0      	blx	r4
		gpio_set_pin_high(LCD_DATA5);
   80588:	205a      	movs	r0, #90	; 0x5a
   8058a:	47a0      	blx	r4
		gpio_set_pin_high(LCD_DATA6);
   8058c:	205c      	movs	r0, #92	; 0x5c
   8058e:	47a0      	blx	r4
		gpio_set_pin_high(LCD_DATA7);
   80590:	2039      	movs	r0, #57	; 0x39
   80592:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   80594:	2067      	movs	r0, #103	; 0x67
   80596:	4c05      	ldr	r4, [pc, #20]	; (805ac <Lcd+0x218>)
   80598:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RS);
   8059a:	2068      	movs	r0, #104	; 0x68
   8059c:	47a0      	blx	r4
		break;
   8059e:	e766      	b.n	8046e <Lcd+0xda>
		Error(ERR_LCD_SWITCH_BAD_SC, sc);
   805a0:	4b0b      	ldr	r3, [pc, #44]	; (805d0 <Lcd+0x23c>)
   805a2:	681b      	ldr	r3, [r3, #0]
   805a4:	2014      	movs	r0, #20
   805a6:	4798      	blx	r3
   805a8:	e761      	b.n	8046e <Lcd+0xda>
   805aa:	bf00      	nop
   805ac:	000818cb 	.word	0x000818cb
   805b0:	000818b1 	.word	0x000818b1
   805b4:	00086920 	.word	0x00086920
   805b8:	00086930 	.word	0x00086930
   805bc:	00086924 	.word	0x00086924
   805c0:	00081145 	.word	0x00081145
   805c4:	00081905 	.word	0x00081905
   805c8:	000927c0 	.word	0x000927c0
   805cc:	20070001 	.word	0x20070001
   805d0:	20070538 	.word	0x20070538

000805d4 <Menu>:
	int iIndexY;
}menuParam;
 

int Menu(int sc, ...)
{
   805d4:	b40f      	push	{r0, r1, r2, r3}
   805d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805da:	b082      	sub	sp, #8
   805dc:	9908      	ldr	r1, [sp, #32]

	switch(sc)
   805de:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   805e2:	2b04      	cmp	r3, #4
   805e4:	f200 8093 	bhi.w	8070e <Menu+0x13a>
   805e8:	e8df f003 	tbb	[pc, r3]
   805ec:	917b6503 	.word	0x917b6503
   805f0:	80          	.byte	0x80
   805f1:	00          	.byte	0x00
	{
	case MENU_NEW:
		tabl[0][0] = "Bonjour,\r";
   805f2:	4b49      	ldr	r3, [pc, #292]	; (80718 <Menu+0x144>)
   805f4:	4a49      	ldr	r2, [pc, #292]	; (8071c <Menu+0x148>)
   805f6:	601a      	str	r2, [r3, #0]
		tabl[0][1] = "Comment\r";
   805f8:	4a49      	ldr	r2, [pc, #292]	; (80720 <Menu+0x14c>)
   805fa:	605a      	str	r2, [r3, #4]
		tabl[0][2] = "aller\r";
   805fc:	4a49      	ldr	r2, [pc, #292]	; (80724 <Menu+0x150>)
   805fe:	609a      	str	r2, [r3, #8]
		tabl[0][3] = "vous?\r";
   80600:	4a49      	ldr	r2, [pc, #292]	; (80728 <Menu+0x154>)
   80602:	60da      	str	r2, [r3, #12]
		tabl[1][0] = "Bionjourno,\r";
   80604:	4a49      	ldr	r2, [pc, #292]	; (8072c <Menu+0x158>)
   80606:	611a      	str	r2, [r3, #16]
		tabl[1][1] = "Beve\r";
   80608:	4a49      	ldr	r2, [pc, #292]	; (80730 <Menu+0x15c>)
   8060a:	615a      	str	r2, [r3, #20]
		tabl[1][2] = "la\r";
   8060c:	4a49      	ldr	r2, [pc, #292]	; (80734 <Menu+0x160>)
   8060e:	619a      	str	r2, [r3, #24]
		tabl[1][3] = "aqua!!!!\r";
   80610:	4a49      	ldr	r2, [pc, #292]	; (80738 <Menu+0x164>)
   80612:	61da      	str	r2, [r3, #28]
		tabl[2][0] = "Hello,\r";
   80614:	4a49      	ldr	r2, [pc, #292]	; (8073c <Menu+0x168>)
   80616:	621a      	str	r2, [r3, #32]
		tabl[2][1] = "How\r";
   80618:	4a49      	ldr	r2, [pc, #292]	; (80740 <Menu+0x16c>)
   8061a:	625a      	str	r2, [r3, #36]	; 0x24
		tabl[2][2] = "are\r";
   8061c:	4a49      	ldr	r2, [pc, #292]	; (80744 <Menu+0x170>)
   8061e:	629a      	str	r2, [r3, #40]	; 0x28
		tabl[2][3] = "you??\r";
   80620:	4a49      	ldr	r2, [pc, #292]	; (80748 <Menu+0x174>)
   80622:	62da      	str	r2, [r3, #44]	; 0x2c
		tabl[3][0] = "Konichiwa,\r";
   80624:	4a49      	ldr	r2, [pc, #292]	; (8074c <Menu+0x178>)
   80626:	631a      	str	r2, [r3, #48]	; 0x30
		tabl[3][1] = "Mitsubishi\r";
   80628:	4a49      	ldr	r2, [pc, #292]	; (80750 <Menu+0x17c>)
   8062a:	635a      	str	r2, [r3, #52]	; 0x34
		tabl[3][2] = "sushi\r";
   8062c:	4a49      	ldr	r2, [pc, #292]	; (80754 <Menu+0x180>)
   8062e:	639a      	str	r2, [r3, #56]	; 0x38
		tabl[3][3] = "Nagasaki\r";
   80630:	4a49      	ldr	r2, [pc, #292]	; (80758 <Menu+0x184>)
   80632:	63da      	str	r2, [r3, #60]	; 0x3c


		menuParam.iIndexX = 0;
   80634:	4b49      	ldr	r3, [pc, #292]	; (8075c <Menu+0x188>)
   80636:	2500      	movs	r5, #0
   80638:	601d      	str	r5, [r3, #0]
		menuParam.iIndexY = 0;
   8063a:	605d      	str	r5, [r3, #4]
		//////////////////////////////////////INTERRUPT PIN/////////////////////////////
		pmc_enable_periph_clk(ID_PIOA);
   8063c:	200b      	movs	r0, #11
   8063e:	4b48      	ldr	r3, [pc, #288]	; (80760 <Menu+0x18c>)
   80640:	4798      	blx	r3
		pio_set_output(PIOA, PIO_PA23, LOW, DISABLE, ENABLE);
   80642:	4c48      	ldr	r4, [pc, #288]	; (80764 <Menu+0x190>)
   80644:	2601      	movs	r6, #1
   80646:	9600      	str	r6, [sp, #0]
   80648:	462b      	mov	r3, r5
   8064a:	462a      	mov	r2, r5
   8064c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80650:	4620      	mov	r0, r4
   80652:	4d45      	ldr	r5, [pc, #276]	; (80768 <Menu+0x194>)
   80654:	47a8      	blx	r5
		
		
		
		pio_set_input(PIOA, PIO_PA24, PIO_PULLUP);
   80656:	4632      	mov	r2, r6
   80658:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   8065c:	4620      	mov	r0, r4
   8065e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80794 <Menu+0x1c0>
   80662:	47c0      	blx	r8
		pio_handler_set(PIOA, ID_PIOA, PIO_PA24, PIO_IT_FALL_EDGE, ButtonSelect_ISR_Handler);
   80664:	4b41      	ldr	r3, [pc, #260]	; (8076c <Menu+0x198>)
   80666:	9300      	str	r3, [sp, #0]
   80668:	2350      	movs	r3, #80	; 0x50
   8066a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8066e:	210b      	movs	r1, #11
   80670:	4620      	mov	r0, r4
   80672:	4f3f      	ldr	r7, [pc, #252]	; (80770 <Menu+0x19c>)
   80674:	47b8      	blx	r7
		pio_enable_interrupt(PIOA, PIO_PA24);
   80676:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   8067a:	4620      	mov	r0, r4
   8067c:	4d3d      	ldr	r5, [pc, #244]	; (80774 <Menu+0x1a0>)
   8067e:	47a8      	blx	r5
		
		pio_set_input(PIOA, PIO_PA16, PIO_PULLUP);
   80680:	4632      	mov	r2, r6
   80682:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   80686:	4620      	mov	r0, r4
   80688:	47c0      	blx	r8
		pio_handler_set(PIOA, ID_PIOA, PIO_PA16, PIO_IT_FALL_EDGE, ButtonSwitch_ISR_Handler);
   8068a:	4b3b      	ldr	r3, [pc, #236]	; (80778 <Menu+0x1a4>)
   8068c:	9300      	str	r3, [sp, #0]
   8068e:	2350      	movs	r3, #80	; 0x50
   80690:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80694:	210b      	movs	r1, #11
   80696:	4620      	mov	r0, r4
   80698:	47b8      	blx	r7
		pio_enable_interrupt(PIOA, PIO_PA16);
   8069a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   8069e:	4620      	mov	r0, r4
   806a0:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   806a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   806a6:	4b35      	ldr	r3, [pc, #212]	; (8077c <Menu+0x1a8>)
   806a8:	601a      	str	r2, [r3, #0]
		break;
	default:
		Error(ERR_MENU_SWITCH_BAD_SC, sc);
	}
	return 0;
}
   806aa:	2000      	movs	r0, #0
   806ac:	b002      	add	sp, #8
   806ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   806b2:	b004      	add	sp, #16
   806b4:	4770      	bx	lr
		pio_toggle_pin(PIO_PA23_IDX);
   806b6:	2017      	movs	r0, #23
   806b8:	4b31      	ldr	r3, [pc, #196]	; (80780 <Menu+0x1ac>)
   806ba:	4798      	blx	r3
		menuParam.iIndexX++;
   806bc:	4b27      	ldr	r3, [pc, #156]	; (8075c <Menu+0x188>)
   806be:	681b      	ldr	r3, [r3, #0]
   806c0:	3301      	adds	r3, #1
		if(menuParam.iIndexX >=4) menuParam.iIndexX = 0;
   806c2:	2b03      	cmp	r3, #3
   806c4:	dc09      	bgt.n	806da <Menu+0x106>
		menuParam.iIndexX++;
   806c6:	4a25      	ldr	r2, [pc, #148]	; (8075c <Menu+0x188>)
   806c8:	6013      	str	r3, [r2, #0]
		if(menuParam.iIndexY >=2) menuParam.iIndexY = 0;
   806ca:	4b24      	ldr	r3, [pc, #144]	; (8075c <Menu+0x188>)
   806cc:	685b      	ldr	r3, [r3, #4]
   806ce:	2b01      	cmp	r3, #1
   806d0:	ddeb      	ble.n	806aa <Menu+0xd6>
   806d2:	2200      	movs	r2, #0
   806d4:	4b21      	ldr	r3, [pc, #132]	; (8075c <Menu+0x188>)
   806d6:	605a      	str	r2, [r3, #4]
   806d8:	e7e7      	b.n	806aa <Menu+0xd6>
		if(menuParam.iIndexX >=4) menuParam.iIndexX = 0;
   806da:	2200      	movs	r2, #0
   806dc:	4b1f      	ldr	r3, [pc, #124]	; (8075c <Menu+0x188>)
   806de:	601a      	str	r2, [r3, #0]
   806e0:	e7f3      	b.n	806ca <Menu+0xf6>
		menuParam.iIndexY++;
   806e2:	4a1e      	ldr	r2, [pc, #120]	; (8075c <Menu+0x188>)
   806e4:	6853      	ldr	r3, [r2, #4]
   806e6:	3301      	adds	r3, #1
   806e8:	6053      	str	r3, [r2, #4]
		break;
   806ea:	e7de      	b.n	806aa <Menu+0xd6>
		sprintf(buf, tabl[menuParam.iIndexX][menuParam.iIndexY]);
   806ec:	4a1b      	ldr	r2, [pc, #108]	; (8075c <Menu+0x188>)
   806ee:	6811      	ldr	r1, [r2, #0]
   806f0:	6853      	ldr	r3, [r2, #4]
   806f2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   806f6:	4c23      	ldr	r4, [pc, #140]	; (80784 <Menu+0x1b0>)
   806f8:	4a07      	ldr	r2, [pc, #28]	; (80718 <Menu+0x144>)
   806fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   806fe:	4620      	mov	r0, r4
   80700:	4b21      	ldr	r3, [pc, #132]	; (80788 <Menu+0x1b4>)
   80702:	4798      	blx	r3
		Putstr(buf);
   80704:	4621      	mov	r1, r4
   80706:	2067      	movs	r0, #103	; 0x67
   80708:	4b20      	ldr	r3, [pc, #128]	; (8078c <Menu+0x1b8>)
   8070a:	4798      	blx	r3
		break;
   8070c:	e7cd      	b.n	806aa <Menu+0xd6>
		Error(ERR_MENU_SWITCH_BAD_SC, sc);
   8070e:	4b20      	ldr	r3, [pc, #128]	; (80790 <Menu+0x1bc>)
   80710:	681b      	ldr	r3, [r3, #0]
   80712:	2010      	movs	r0, #16
   80714:	4798      	blx	r3
   80716:	e7c8      	b.n	806aa <Menu+0xd6>
   80718:	2007101c 	.word	0x2007101c
   8071c:	00086934 	.word	0x00086934
   80720:	00086940 	.word	0x00086940
   80724:	0008694c 	.word	0x0008694c
   80728:	00086954 	.word	0x00086954
   8072c:	0008695c 	.word	0x0008695c
   80730:	0008696c 	.word	0x0008696c
   80734:	00086974 	.word	0x00086974
   80738:	00086978 	.word	0x00086978
   8073c:	00086984 	.word	0x00086984
   80740:	0008698c 	.word	0x0008698c
   80744:	00086994 	.word	0x00086994
   80748:	0008699c 	.word	0x0008699c
   8074c:	000869a4 	.word	0x000869a4
   80750:	000869b0 	.word	0x000869b0
   80754:	000869bc 	.word	0x000869bc
   80758:	000869c4 	.word	0x000869c4
   8075c:	20071014 	.word	0x20071014
   80760:	00081c69 	.word	0x00081c69
   80764:	400e0e00 	.word	0x400e0e00
   80768:	00081851 	.word	0x00081851
   8076c:	000807b9 	.word	0x000807b9
   80770:	00081ac1 	.word	0x00081ac1
   80774:	000818a5 	.word	0x000818a5
   80778:	00080799 	.word	0x00080799
   8077c:	e000e100 	.word	0xe000e100
   80780:	000818e5 	.word	0x000818e5
   80784:	200713e0 	.word	0x200713e0
   80788:	00081f9d 	.word	0x00081f9d
   8078c:	00081145 	.word	0x00081145
   80790:	20070538 	.word	0x20070538
   80794:	0008181f 	.word	0x0008181f

00080798 <ButtonSwitch_ISR_Handler>:

void ButtonSwitch_ISR_Handler()
{
   80798:	b510      	push	{r4, lr}
   8079a:	b082      	sub	sp, #8
	PushTask(Menu,MENU_SWITCH_BUTTON,0,0);
   8079c:	2300      	movs	r3, #0
   8079e:	9300      	str	r3, [sp, #0]
   807a0:	2265      	movs	r2, #101	; 0x65
   807a2:	4903      	ldr	r1, [pc, #12]	; (807b0 <ButtonSwitch_ISR_Handler+0x18>)
   807a4:	2066      	movs	r0, #102	; 0x66
   807a6:	4c03      	ldr	r4, [pc, #12]	; (807b4 <ButtonSwitch_ISR_Handler+0x1c>)
   807a8:	47a0      	blx	r4
}
   807aa:	b002      	add	sp, #8
   807ac:	bd10      	pop	{r4, pc}
   807ae:	bf00      	nop
   807b0:	000805d5 	.word	0x000805d5
   807b4:	0008135d 	.word	0x0008135d

000807b8 <ButtonSelect_ISR_Handler>:

void ButtonSelect_ISR_Handler()
{
   807b8:	b510      	push	{r4, lr}
   807ba:	b082      	sub	sp, #8
	PushTask(Menu, MENU_SELECT_BUTTON,0,0);
   807bc:	2300      	movs	r3, #0
   807be:	9300      	str	r3, [sp, #0]
   807c0:	2266      	movs	r2, #102	; 0x66
   807c2:	4903      	ldr	r1, [pc, #12]	; (807d0 <ButtonSelect_ISR_Handler+0x18>)
   807c4:	4610      	mov	r0, r2
   807c6:	4c03      	ldr	r4, [pc, #12]	; (807d4 <ButtonSelect_ISR_Handler+0x1c>)
   807c8:	47a0      	blx	r4
   807ca:	b002      	add	sp, #8
   807cc:	bd10      	pop	{r4, pc}
   807ce:	bf00      	nop
   807d0:	000805d5 	.word	0x000805d5
   807d4:	0008135d 	.word	0x0008135d

000807d8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   807d8:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   807da:	0189      	lsls	r1, r1, #6
   807dc:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   807de:	2402      	movs	r4, #2
   807e0:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   807e2:	f04f 31ff 	mov.w	r1, #4294967295
   807e6:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   807e8:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   807ea:	605a      	str	r2, [r3, #4]
}
   807ec:	bc10      	pop	{r4}
   807ee:	4770      	bx	lr

000807f0 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   807f0:	0189      	lsls	r1, r1, #6
   807f2:	2305      	movs	r3, #5
   807f4:	5043      	str	r3, [r0, r1]
   807f6:	4770      	bx	lr

000807f8 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
   807f8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   807fc:	614a      	str	r2, [r1, #20]
   807fe:	4770      	bx	lr

00080800 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   80800:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80804:	61ca      	str	r2, [r1, #28]
   80806:	4770      	bx	lr

00080808 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80808:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   8080c:	624a      	str	r2, [r1, #36]	; 0x24
   8080e:	4770      	bx	lr

00080810 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80810:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   80814:	6a08      	ldr	r0, [r1, #32]
}
   80816:	4770      	bx	lr

00080818 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   80818:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   8081a:	010b      	lsls	r3, r1, #4
   8081c:	4293      	cmp	r3, r2
   8081e:	d914      	bls.n	8084a <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80820:	00c9      	lsls	r1, r1, #3
   80822:	084b      	lsrs	r3, r1, #1
   80824:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   80828:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   8082c:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8082e:	1e5c      	subs	r4, r3, #1
   80830:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   80834:	428c      	cmp	r4, r1
   80836:	d901      	bls.n	8083c <usart_set_async_baudrate+0x24>
		return 1;
   80838:	2001      	movs	r0, #1
   8083a:	e017      	b.n	8086c <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   8083c:	6841      	ldr	r1, [r0, #4]
   8083e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   80842:	6041      	str	r1, [r0, #4]
   80844:	e00c      	b.n	80860 <usart_set_async_baudrate+0x48>
		return 1;
   80846:	2001      	movs	r0, #1
   80848:	e010      	b.n	8086c <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   8084a:	0859      	lsrs	r1, r3, #1
   8084c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   80850:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   80854:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   80856:	1e5c      	subs	r4, r3, #1
   80858:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8085c:	428c      	cmp	r4, r1
   8085e:	d8f2      	bhi.n	80846 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   80860:	0412      	lsls	r2, r2, #16
   80862:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   80866:	431a      	orrs	r2, r3
   80868:	6202      	str	r2, [r0, #32]

	return 0;
   8086a:	2000      	movs	r0, #0
}
   8086c:	bc10      	pop	{r4}
   8086e:	4770      	bx	lr

00080870 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   80870:	4b08      	ldr	r3, [pc, #32]	; (80894 <usart_reset+0x24>)
   80872:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   80876:	2300      	movs	r3, #0
   80878:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   8087a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   8087c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   8087e:	2388      	movs	r3, #136	; 0x88
   80880:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   80882:	2324      	movs	r3, #36	; 0x24
   80884:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   80886:	f44f 7380 	mov.w	r3, #256	; 0x100
   8088a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   8088c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   80890:	6003      	str	r3, [r0, #0]
   80892:	4770      	bx	lr
   80894:	55534100 	.word	0x55534100

00080898 <usart_init_rs232>:
{
   80898:	b570      	push	{r4, r5, r6, lr}
   8089a:	4605      	mov	r5, r0
   8089c:	460c      	mov	r4, r1
   8089e:	4616      	mov	r6, r2
	usart_reset(p_usart);
   808a0:	4b0f      	ldr	r3, [pc, #60]	; (808e0 <usart_init_rs232+0x48>)
   808a2:	4798      	blx	r3
	ul_reg_val = 0;
   808a4:	2200      	movs	r2, #0
   808a6:	4b0f      	ldr	r3, [pc, #60]	; (808e4 <usart_init_rs232+0x4c>)
   808a8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   808aa:	b1a4      	cbz	r4, 808d6 <usart_init_rs232+0x3e>
   808ac:	4632      	mov	r2, r6
   808ae:	6821      	ldr	r1, [r4, #0]
   808b0:	4628      	mov	r0, r5
   808b2:	4b0d      	ldr	r3, [pc, #52]	; (808e8 <usart_init_rs232+0x50>)
   808b4:	4798      	blx	r3
   808b6:	4602      	mov	r2, r0
   808b8:	b978      	cbnz	r0, 808da <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   808ba:	6863      	ldr	r3, [r4, #4]
   808bc:	68a1      	ldr	r1, [r4, #8]
   808be:	430b      	orrs	r3, r1
   808c0:	6921      	ldr	r1, [r4, #16]
   808c2:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   808c4:	68e1      	ldr	r1, [r4, #12]
   808c6:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   808c8:	4906      	ldr	r1, [pc, #24]	; (808e4 <usart_init_rs232+0x4c>)
   808ca:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   808cc:	6869      	ldr	r1, [r5, #4]
   808ce:	430b      	orrs	r3, r1
   808d0:	606b      	str	r3, [r5, #4]
}
   808d2:	4610      	mov	r0, r2
   808d4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   808d6:	2201      	movs	r2, #1
   808d8:	e7fb      	b.n	808d2 <usart_init_rs232+0x3a>
   808da:	2201      	movs	r2, #1
   808dc:	e7f9      	b.n	808d2 <usart_init_rs232+0x3a>
   808de:	bf00      	nop
   808e0:	00080871 	.word	0x00080871
   808e4:	20070f5c 	.word	0x20070f5c
   808e8:	00080819 	.word	0x00080819

000808ec <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   808ec:	2340      	movs	r3, #64	; 0x40
   808ee:	6003      	str	r3, [r0, #0]
   808f0:	4770      	bx	lr

000808f2 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   808f2:	2310      	movs	r3, #16
   808f4:	6003      	str	r3, [r0, #0]
   808f6:	4770      	bx	lr

000808f8 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   808f8:	6081      	str	r1, [r0, #8]
   808fa:	4770      	bx	lr

000808fc <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   808fc:	60c1      	str	r1, [r0, #12]
   808fe:	4770      	bx	lr

00080900 <usart_get_status>:
	return p_usart->US_CSR;
   80900:	6940      	ldr	r0, [r0, #20]
}
   80902:	4770      	bx	lr

00080904 <CRC16MODBUSFRAME>:
unsigned int CRC16MODBUSFRAME (unsigned char *nData, unsigned int wLength)
{
    unsigned char  nTemp;
    unsigned int  wCRCWord = 0xFFFF;

    while (wLength--)
   80904:	b189      	cbz	r1, 8092a <CRC16MODBUSFRAME+0x26>
{
   80906:	b410      	push	{r4}
   80908:	1841      	adds	r1, r0, r1
    while (wLength--)
   8090a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    {
        nTemp = *nData++ ^ wCRCWord;
        wCRCWord >>= 8;
        wCRCWord ^= wCRCTable[nTemp];
   8090e:	4c09      	ldr	r4, [pc, #36]	; (80934 <CRC16MODBUSFRAME+0x30>)
        nTemp = *nData++ ^ wCRCWord;
   80910:	f810 3b01 	ldrb.w	r3, [r0], #1
   80914:	4053      	eors	r3, r2
        wCRCWord ^= wCRCTable[nTemp];
   80916:	b2db      	uxtb	r3, r3
   80918:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   8091c:	ea83 2212 	eor.w	r2, r3, r2, lsr #8
    while (wLength--)
   80920:	4281      	cmp	r1, r0
   80922:	d1f5      	bne.n	80910 <CRC16MODBUSFRAME+0xc>
    }
    return wCRCWord;
}
   80924:	4610      	mov	r0, r2
   80926:	bc10      	pop	{r4}
   80928:	4770      	bx	lr
    unsigned int  wCRCWord = 0xFFFF;
   8092a:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
   8092e:	4610      	mov	r0, r2
   80930:	4770      	bx	lr
   80932:	bf00      	nop
   80934:	20070138 	.word	0x20070138

00080938 <ErrorLed>:
 #include "../Headers/appli.h"

 t_ptf32 pErrorFunc = ErrorLed;

 uint32_t ErrorLed(uint32_t err, ...)
 {
   80938:	b40f      	push	{r0, r1, r2, r3}
   8093a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8093e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		delay_ms(2000);
		gpio_set_pin_low(LED0_GPIO);
		delay_ms(500);

		//Display tens of error code
		for(i=0; i<err/10; i++)
   80940:	f8df 809c 	ldr.w	r8, [pc, #156]	; 809e0 <ErrorLed+0xa8>
   80944:	fba8 2803 	umull	r2, r8, r8, r3
   80948:	ea4f 08d8 	mov.w	r8, r8, lsr #3
			delay_ms(200);
		}
		delay_ms(500);

		//Display units of error code
		for(i=0; i<err%10; i++)
   8094c:	eb08 0a88 	add.w	sl, r8, r8, lsl #2
   80950:	eba3 0a4a 	sub.w	sl, r3, sl, lsl #1
		gpio_set_pin_high(LED0_GPIO);
   80954:	253b      	movs	r5, #59	; 0x3b
		delay_ms(2000);
   80956:	4c1c      	ldr	r4, [pc, #112]	; (809c8 <ErrorLed+0x90>)
		delay_ms(500);
   80958:	f8df b088 	ldr.w	fp, [pc, #136]	; 809e4 <ErrorLed+0xac>
   8095c:	e001      	b.n	80962 <ErrorLed+0x2a>
			gpio_set_pin_high(LED0_GPIO);
			delay_ms(200);
			gpio_set_pin_low(LED0_GPIO);
			delay_ms(200);
		}
		delay_ms(1000);
   8095e:	481b      	ldr	r0, [pc, #108]	; (809cc <ErrorLed+0x94>)
   80960:	47a0      	blx	r4
		gpio_set_pin_high(LED0_GPIO);
   80962:	4628      	mov	r0, r5
   80964:	4b1a      	ldr	r3, [pc, #104]	; (809d0 <ErrorLed+0x98>)
   80966:	4798      	blx	r3
		delay_ms(2000);
   80968:	481a      	ldr	r0, [pc, #104]	; (809d4 <ErrorLed+0x9c>)
   8096a:	47a0      	blx	r4
		gpio_set_pin_low(LED0_GPIO);
   8096c:	4628      	mov	r0, r5
   8096e:	4b1a      	ldr	r3, [pc, #104]	; (809d8 <ErrorLed+0xa0>)
   80970:	4798      	blx	r3
		delay_ms(500);
   80972:	4658      	mov	r0, fp
   80974:	47a0      	blx	r4
		for(i=0; i<err/10; i++)
   80976:	f1b8 0f00 	cmp.w	r8, #0
   8097a:	d00f      	beq.n	8099c <ErrorLed+0x64>
   8097c:	2600      	movs	r6, #0
			gpio_set_pin_high(LED0_GPIO);
   8097e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 809d0 <ErrorLed+0x98>
			delay_ms(200);
   80982:	4f16      	ldr	r7, [pc, #88]	; (809dc <ErrorLed+0xa4>)
			gpio_set_pin_high(LED0_GPIO);
   80984:	4628      	mov	r0, r5
   80986:	47c8      	blx	r9
			delay_ms(200);
   80988:	4638      	mov	r0, r7
   8098a:	47a0      	blx	r4
			gpio_set_pin_low(LED0_GPIO);
   8098c:	4628      	mov	r0, r5
   8098e:	4b12      	ldr	r3, [pc, #72]	; (809d8 <ErrorLed+0xa0>)
   80990:	4798      	blx	r3
			delay_ms(200);
   80992:	4638      	mov	r0, r7
   80994:	47a0      	blx	r4
		for(i=0; i<err/10; i++)
   80996:	3601      	adds	r6, #1
   80998:	4546      	cmp	r6, r8
   8099a:	d1f3      	bne.n	80984 <ErrorLed+0x4c>
		delay_ms(500);
   8099c:	4658      	mov	r0, fp
   8099e:	47a0      	blx	r4
		for(i=0; i<err%10; i++)
   809a0:	f1ba 0f00 	cmp.w	sl, #0
   809a4:	d0db      	beq.n	8095e <ErrorLed+0x26>
   809a6:	2600      	movs	r6, #0
			gpio_set_pin_high(LED0_GPIO);
   809a8:	f8df 9024 	ldr.w	r9, [pc, #36]	; 809d0 <ErrorLed+0x98>
			delay_ms(200);
   809ac:	4f0b      	ldr	r7, [pc, #44]	; (809dc <ErrorLed+0xa4>)
			gpio_set_pin_high(LED0_GPIO);
   809ae:	4628      	mov	r0, r5
   809b0:	47c8      	blx	r9
			delay_ms(200);
   809b2:	4638      	mov	r0, r7
   809b4:	47a0      	blx	r4
			gpio_set_pin_low(LED0_GPIO);
   809b6:	4628      	mov	r0, r5
   809b8:	4b07      	ldr	r3, [pc, #28]	; (809d8 <ErrorLed+0xa0>)
   809ba:	4798      	blx	r3
			delay_ms(200);
   809bc:	4638      	mov	r0, r7
   809be:	47a0      	blx	r4
		for(i=0; i<err%10; i++)
   809c0:	3601      	adds	r6, #1
   809c2:	4556      	cmp	r6, sl
   809c4:	d1f3      	bne.n	809ae <ErrorLed+0x76>
   809c6:	e7ca      	b.n	8095e <ErrorLed+0x26>
   809c8:	20070001 	.word	0x20070001
   809cc:	005b8d80 	.word	0x005b8d80
   809d0:	000818b1 	.word	0x000818b1
   809d4:	00b71b00 	.word	0x00b71b00
   809d8:	000818cb 	.word	0x000818cb
   809dc:	00124f80 	.word	0x00124f80
   809e0:	cccccccd 	.word	0xcccccccd
   809e4:	002dc6c0 	.word	0x002dc6c0

000809e8 <RTC_Handler>:
	return 0;
 }


 void RTC_Handler(void )
 {
   809e8:	b510      	push	{r4, lr}
   809ea:	b082      	sub	sp, #8
	PushTask(Shell,_SHELL_PROMPT,0,0);
   809ec:	2300      	movs	r3, #0
   809ee:	9300      	str	r3, [sp, #0]
   809f0:	2204      	movs	r2, #4
   809f2:	4903      	ldr	r1, [pc, #12]	; (80a00 <RTC_Handler+0x18>)
   809f4:	2066      	movs	r0, #102	; 0x66
   809f6:	4c03      	ldr	r4, [pc, #12]	; (80a04 <RTC_Handler+0x1c>)
   809f8:	47a0      	blx	r4
 }
   809fa:	b002      	add	sp, #8
   809fc:	bd10      	pop	{r4, pc}
   809fe:	bf00      	nop
   80a00:	00080aad 	.word	0x00080aad
   80a04:	0008135d 	.word	0x0008135d

00080a08 <__RTCdayByDate>:
 uint8_t __RTCdayByDate(uint32_t date, uint32_t month, uint32_t centYear)
 {
	uint8_t  D; //Day of the week
#define y   centYear
	//Mike Keith algorithme ----------------------------------------------------------------//
	if(month>=3)
   80a08:	2902      	cmp	r1, #2
   80a0a:	d824      	bhi.n	80a56 <__RTCdayByDate+0x4e>
	{
		D = ( ((uint16_t)month*23)/9 + date + 4 + y + y/4 - y/100 + y/400 - 2 ) % 7 + 1;
	}
	else
	{
		D = ( ((uint16_t)month*23)/9 + date + 4 + y + (y-1)/4 - (y-1)/100 + (y-1)/400 ) % 7 + 1;
   80a0c:	1e53      	subs	r3, r2, #1
   80a0e:	3204      	adds	r2, #4
   80a10:	4410      	add	r0, r2
   80a12:	eb00 0093 	add.w	r0, r0, r3, lsr #2
   80a16:	4a22      	ldr	r2, [pc, #136]	; (80aa0 <__RTCdayByDate+0x98>)
   80a18:	fba2 2303 	umull	r2, r3, r2, r3
   80a1c:	eb00 10d3 	add.w	r0, r0, r3, lsr #7
   80a20:	eba0 1053 	sub.w	r0, r0, r3, lsr #5
   80a24:	b289      	uxth	r1, r1
   80a26:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   80a2a:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
   80a2e:	4b1d      	ldr	r3, [pc, #116]	; (80aa4 <__RTCdayByDate+0x9c>)
   80a30:	fb83 2301 	smull	r2, r3, r3, r1
   80a34:	17c9      	asrs	r1, r1, #31
   80a36:	ebc1 0163 	rsb	r1, r1, r3, asr #1
   80a3a:	4408      	add	r0, r1
   80a3c:	4b1a      	ldr	r3, [pc, #104]	; (80aa8 <__RTCdayByDate+0xa0>)
   80a3e:	fba3 2300 	umull	r2, r3, r3, r0
   80a42:	1ac2      	subs	r2, r0, r3
   80a44:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   80a48:	089b      	lsrs	r3, r3, #2
   80a4a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   80a4e:	1ac0      	subs	r0, r0, r3
   80a50:	3001      	adds	r0, #1
   80a52:	b2c0      	uxtb	r0, r0
	}
#undef y
	return D; //Normaly 1 to 7 !!!!
 }
   80a54:	4770      	bx	lr
		D = ( ((uint16_t)month*23)/9 + date + 4 + y + y/4 - y/100 + y/400 - 2 ) % 7 + 1;
   80a56:	1c93      	adds	r3, r2, #2
   80a58:	4418      	add	r0, r3
   80a5a:	eb00 0092 	add.w	r0, r0, r2, lsr #2
   80a5e:	4b10      	ldr	r3, [pc, #64]	; (80aa0 <__RTCdayByDate+0x98>)
   80a60:	fba3 3202 	umull	r3, r2, r3, r2
   80a64:	eb00 10d2 	add.w	r0, r0, r2, lsr #7
   80a68:	eba0 1252 	sub.w	r2, r0, r2, lsr #5
   80a6c:	b289      	uxth	r1, r1
   80a6e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   80a72:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
   80a76:	480b      	ldr	r0, [pc, #44]	; (80aa4 <__RTCdayByDate+0x9c>)
   80a78:	fb80 3001 	smull	r3, r0, r0, r1
   80a7c:	17c9      	asrs	r1, r1, #31
   80a7e:	ebc1 0160 	rsb	r1, r1, r0, asr #1
   80a82:	440a      	add	r2, r1
   80a84:	4808      	ldr	r0, [pc, #32]	; (80aa8 <__RTCdayByDate+0xa0>)
   80a86:	fba0 3002 	umull	r3, r0, r0, r2
   80a8a:	1a13      	subs	r3, r2, r0
   80a8c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
   80a90:	0880      	lsrs	r0, r0, #2
   80a92:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   80a96:	1a10      	subs	r0, r2, r0
   80a98:	3001      	adds	r0, #1
   80a9a:	b2c0      	uxtb	r0, r0
   80a9c:	4770      	bx	lr
   80a9e:	bf00      	nop
   80aa0:	51eb851f 	.word	0x51eb851f
   80aa4:	38e38e39 	.word	0x38e38e39
   80aa8:	24924925 	.word	0x24924925

00080aac <Shell>:
 {
   80aac:	b40f      	push	{r0, r1, r2, r3}
   80aae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80ab2:	b087      	sub	sp, #28
	switch(sc)
   80ab4:	990e      	ldr	r1, [sp, #56]	; 0x38
   80ab6:	2902      	cmp	r1, #2
   80ab8:	f000 8153 	beq.w	80d62 <Shell+0x2b6>
   80abc:	d944      	bls.n	80b48 <Shell+0x9c>
   80abe:	2904      	cmp	r1, #4
   80ac0:	f000 81a2 	beq.w	80e08 <Shell+0x35c>
   80ac4:	2964      	cmp	r1, #100	; 0x64
   80ac6:	f040 81f8 	bne.w	80eba <Shell+0x40e>
		gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80aca:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80ace:	203b      	movs	r0, #59	; 0x3b
   80ad0:	4bb2      	ldr	r3, [pc, #712]	; (80d9c <Shell+0x2f0>)
   80ad2:	4798      	blx	r3
		gpio_set_pin_low(LED0_GPIO);
   80ad4:	203b      	movs	r0, #59	; 0x3b
   80ad6:	4bb2      	ldr	r3, [pc, #712]	; (80da0 <Shell+0x2f4>)
   80ad8:	4798      	blx	r3
		PushTask(Shellcom,SHELLCOM_NEW, 0, 0);
   80ada:	2400      	movs	r4, #0
   80adc:	9400      	str	r4, [sp, #0]
   80ade:	4623      	mov	r3, r4
   80ae0:	2264      	movs	r2, #100	; 0x64
   80ae2:	49b0      	ldr	r1, [pc, #704]	; (80da4 <Shell+0x2f8>)
   80ae4:	2066      	movs	r0, #102	; 0x66
   80ae6:	4db0      	ldr	r5, [pc, #704]	; (80da8 <Shell+0x2fc>)
   80ae8:	47a8      	blx	r5
		state = IDLE;
   80aea:	4bb0      	ldr	r3, [pc, #704]	; (80dac <Shell+0x300>)
   80aec:	701c      	strb	r4, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80aee:	2002      	movs	r0, #2
   80af0:	4baf      	ldr	r3, [pc, #700]	; (80db0 <Shell+0x304>)
   80af2:	4798      	blx	r3
		rtc_set_hour_mode(RTC, 0);
   80af4:	4eaf      	ldr	r6, [pc, #700]	; (80db4 <Shell+0x308>)
   80af6:	4621      	mov	r1, r4
   80af8:	4630      	mov	r0, r6
   80afa:	4baf      	ldr	r3, [pc, #700]	; (80db8 <Shell+0x30c>)
   80afc:	4798      	blx	r3
		rtc_set_time(RTC, 1, 2, 3);
   80afe:	2303      	movs	r3, #3
   80b00:	2202      	movs	r2, #2
   80b02:	2101      	movs	r1, #1
   80b04:	4630      	mov	r0, r6
   80b06:	4fad      	ldr	r7, [pc, #692]	; (80dbc <Shell+0x310>)
   80b08:	47b8      	blx	r7
		rtc_enable_interrupt(RTC, RTC_IER_SECEN);
   80b0a:	2104      	movs	r1, #4
   80b0c:	4630      	mov	r0, r6
   80b0e:	4bac      	ldr	r3, [pc, #688]	; (80dc0 <Shell+0x314>)
   80b10:	4798      	blx	r3
		PushTask(Shell,_SHELL_HEARTBEAT,0,0);
   80b12:	4fac      	ldr	r7, [pc, #688]	; (80dc4 <Shell+0x318>)
   80b14:	9400      	str	r4, [sp, #0]
   80b16:	4623      	mov	r3, r4
   80b18:	2202      	movs	r2, #2
   80b1a:	4639      	mov	r1, r7
   80b1c:	2066      	movs	r0, #102	; 0x66
   80b1e:	47a8      	blx	r5
		PushTask(Shell,_SHELL_PROMPT,0,500);
   80b20:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
   80b24:	9600      	str	r6, [sp, #0]
   80b26:	4623      	mov	r3, r4
   80b28:	2204      	movs	r2, #4
   80b2a:	4639      	mov	r1, r7
   80b2c:	2066      	movs	r0, #102	; 0x66
   80b2e:	47a8      	blx	r5
		PushTask(Appli, APPLI_NEW, 0, 500);
   80b30:	9600      	str	r6, [sp, #0]
   80b32:	4623      	mov	r3, r4
   80b34:	2264      	movs	r2, #100	; 0x64
   80b36:	49a4      	ldr	r1, [pc, #656]	; (80dc8 <Shell+0x31c>)
   80b38:	2066      	movs	r0, #102	; 0x66
   80b3a:	47a8      	blx	r5
 }
   80b3c:	2000      	movs	r0, #0
   80b3e:	b007      	add	sp, #28
   80b40:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80b44:	b004      	add	sp, #16
   80b46:	4770      	bx	lr
	switch(sc)
   80b48:	2901      	cmp	r1, #1
   80b4a:	f040 81b6 	bne.w	80eba <Shell+0x40e>
		switch(state)
   80b4e:	4b97      	ldr	r3, [pc, #604]	; (80dac <Shell+0x300>)
   80b50:	781b      	ldrb	r3, [r3, #0]
   80b52:	2b06      	cmp	r3, #6
   80b54:	f200 80ff 	bhi.w	80d56 <Shell+0x2aa>
   80b58:	a201      	add	r2, pc, #4	; (adr r2, 80b60 <Shell+0xb4>)
   80b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80b5e:	bf00      	nop
   80b60:	00080b7d 	.word	0x00080b7d
   80b64:	00080c15 	.word	0x00080c15
   80b68:	00080cb9 	.word	0x00080cb9
   80b6c:	00080b3d 	.word	0x00080b3d
   80b70:	00080b3d 	.word	0x00080b3d
   80b74:	00080b3d 	.word	0x00080b3d
   80b78:	00080b3d 	.word	0x00080b3d
			switch(_kbhitChar)
   80b7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   80b7e:	b2ec      	uxtb	r4, r5
   80b80:	f1a4 0308 	sub.w	r3, r4, #8
   80b84:	2b18      	cmp	r3, #24
   80b86:	d835      	bhi.n	80bf4 <Shell+0x148>
   80b88:	a201      	add	r2, pc, #4	; (adr r2, 80b90 <Shell+0xe4>)
   80b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80b8e:	bf00      	nop
   80b90:	00080b3d 	.word	0x00080b3d
   80b94:	00080b3d 	.word	0x00080b3d
   80b98:	00080b3d 	.word	0x00080b3d
   80b9c:	00080bf5 	.word	0x00080bf5
   80ba0:	00080bf5 	.word	0x00080bf5
   80ba4:	00080b3d 	.word	0x00080b3d
   80ba8:	00080bf5 	.word	0x00080bf5
   80bac:	00080bf5 	.word	0x00080bf5
   80bb0:	00080bf5 	.word	0x00080bf5
   80bb4:	00080bf5 	.word	0x00080bf5
   80bb8:	00080bf5 	.word	0x00080bf5
   80bbc:	00080bf5 	.word	0x00080bf5
   80bc0:	00080bf5 	.word	0x00080bf5
   80bc4:	00080bf5 	.word	0x00080bf5
   80bc8:	00080bf5 	.word	0x00080bf5
   80bcc:	00080bf5 	.word	0x00080bf5
   80bd0:	00080bf5 	.word	0x00080bf5
   80bd4:	00080bf5 	.word	0x00080bf5
   80bd8:	00080bf5 	.word	0x00080bf5
   80bdc:	00080b3d 	.word	0x00080b3d
   80be0:	00080bf5 	.word	0x00080bf5
   80be4:	00080bf5 	.word	0x00080bf5
   80be8:	00080bf5 	.word	0x00080bf5
   80bec:	00080bf5 	.word	0x00080bf5
   80bf0:	00080b3d 	.word	0x00080b3d
				Putstr("\r\n>");
   80bf4:	4975      	ldr	r1, [pc, #468]	; (80dcc <Shell+0x320>)
   80bf6:	2067      	movs	r0, #103	; 0x67
   80bf8:	4f6a      	ldr	r7, [pc, #424]	; (80da4 <Shell+0x2f8>)
   80bfa:	47b8      	blx	r7
				*pEdit++ = _kbhitChar;
   80bfc:	4e6b      	ldr	r6, [pc, #428]	; (80dac <Shell+0x300>)
   80bfe:	4b74      	ldr	r3, [pc, #464]	; (80dd0 <Shell+0x324>)
   80c00:	60b3      	str	r3, [r6, #8]
			switch(_kbhitChar)
   80c02:	f803 5c01 	strb.w	r5, [r3, #-1]
				nbChar = 1;
   80c06:	2501      	movs	r5, #1
   80c08:	60f5      	str	r5, [r6, #12]
				Putch(_kbhitChar);
   80c0a:	4621      	mov	r1, r4
   80c0c:	2066      	movs	r0, #102	; 0x66
   80c0e:	47b8      	blx	r7
				state = EDITION;
   80c10:	7035      	strb	r5, [r6, #0]
				break;
   80c12:	e793      	b.n	80b3c <Shell+0x90>
			switch(_kbhitChar)
   80c14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   80c16:	b2d1      	uxtb	r1, r2
   80c18:	f1a1 0308 	sub.w	r3, r1, #8
   80c1c:	2b13      	cmp	r3, #19
   80c1e:	d83a      	bhi.n	80c96 <Shell+0x1ea>
   80c20:	a001      	add	r0, pc, #4	; (adr r0, 80c28 <Shell+0x17c>)
   80c22:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   80c26:	bf00      	nop
   80c28:	00080b3d 	.word	0x00080b3d
   80c2c:	00080b3d 	.word	0x00080b3d
   80c30:	00080b3d 	.word	0x00080b3d
   80c34:	00080c97 	.word	0x00080c97
   80c38:	00080c97 	.word	0x00080c97
   80c3c:	00080c79 	.word	0x00080c79
   80c40:	00080c97 	.word	0x00080c97
   80c44:	00080c97 	.word	0x00080c97
   80c48:	00080c97 	.word	0x00080c97
   80c4c:	00080c97 	.word	0x00080c97
   80c50:	00080c97 	.word	0x00080c97
   80c54:	00080c97 	.word	0x00080c97
   80c58:	00080c97 	.word	0x00080c97
   80c5c:	00080c97 	.word	0x00080c97
   80c60:	00080c97 	.word	0x00080c97
   80c64:	00080c97 	.word	0x00080c97
   80c68:	00080c97 	.word	0x00080c97
   80c6c:	00080c97 	.word	0x00080c97
   80c70:	00080c97 	.word	0x00080c97
   80c74:	00080b3d 	.word	0x00080b3d
				*pEdit++ = '\0';
   80c78:	4a4c      	ldr	r2, [pc, #304]	; (80dac <Shell+0x300>)
   80c7a:	6891      	ldr	r1, [r2, #8]
   80c7c:	1c4b      	adds	r3, r1, #1
   80c7e:	6093      	str	r3, [r2, #8]
   80c80:	2300      	movs	r3, #0
   80c82:	700b      	strb	r3, [r1, #0]
				state = EXECUTION;
   80c84:	2102      	movs	r1, #2
   80c86:	7011      	strb	r1, [r2, #0]
				PushTask(Shell, _SHELL_KBHIT, 0, 0);
   80c88:	9300      	str	r3, [sp, #0]
   80c8a:	2201      	movs	r2, #1
   80c8c:	494d      	ldr	r1, [pc, #308]	; (80dc4 <Shell+0x318>)
   80c8e:	2066      	movs	r0, #102	; 0x66
   80c90:	4c45      	ldr	r4, [pc, #276]	; (80da8 <Shell+0x2fc>)
   80c92:	47a0      	blx	r4
				break;
   80c94:	e752      	b.n	80b3c <Shell+0x90>
				if(nbChar < SHELL_EDIT_BUFFER_LEN - 2)
   80c96:	4b45      	ldr	r3, [pc, #276]	; (80dac <Shell+0x300>)
   80c98:	68db      	ldr	r3, [r3, #12]
   80c9a:	2bfd      	cmp	r3, #253	; 0xfd
   80c9c:	f63f af4e 	bhi.w	80b3c <Shell+0x90>
					*pEdit++ = _kbhitChar;
   80ca0:	4b42      	ldr	r3, [pc, #264]	; (80dac <Shell+0x300>)
   80ca2:	6898      	ldr	r0, [r3, #8]
   80ca4:	1c44      	adds	r4, r0, #1
   80ca6:	609c      	str	r4, [r3, #8]
			switch(_kbhitChar)
   80ca8:	7002      	strb	r2, [r0, #0]
					nbChar++;
   80caa:	68da      	ldr	r2, [r3, #12]
   80cac:	3201      	adds	r2, #1
   80cae:	60da      	str	r2, [r3, #12]
					Putch(_kbhitChar);
   80cb0:	2066      	movs	r0, #102	; 0x66
   80cb2:	4b3c      	ldr	r3, [pc, #240]	; (80da4 <Shell+0x2f8>)
   80cb4:	4798      	blx	r3
   80cb6:	e741      	b.n	80b3c <Shell+0x90>
			Putstr("\r\n>>>");
   80cb8:	4946      	ldr	r1, [pc, #280]	; (80dd4 <Shell+0x328>)
   80cba:	2067      	movs	r0, #103	; 0x67
   80cbc:	4c39      	ldr	r4, [pc, #228]	; (80da4 <Shell+0x2f8>)
   80cbe:	47a0      	blx	r4
			Putstr(shellBuf);
   80cc0:	4d45      	ldr	r5, [pc, #276]	; (80dd8 <Shell+0x32c>)
   80cc2:	4629      	mov	r1, r5
   80cc4:	2067      	movs	r0, #103	; 0x67
   80cc6:	47a0      	blx	r4
			Putstr("\r\n");
   80cc8:	4944      	ldr	r1, [pc, #272]	; (80ddc <Shell+0x330>)
   80cca:	2067      	movs	r0, #103	; 0x67
   80ccc:	47a0      	blx	r4
			pToken = (uint32_t)strtok(shellBuf, " \r\n");
   80cce:	4944      	ldr	r1, [pc, #272]	; (80de0 <Shell+0x334>)
   80cd0:	4628      	mov	r0, r5
   80cd2:	4b44      	ldr	r3, [pc, #272]	; (80de4 <Shell+0x338>)
   80cd4:	4798      	blx	r3
   80cd6:	4607      	mov	r7, r0
   80cd8:	900e      	str	r0, [sp, #56]	; 0x38
			if(pToken)
   80cda:	b918      	cbnz	r0, 80ce4 <Shell+0x238>
			state = IDLE;
   80cdc:	2200      	movs	r2, #0
   80cde:	4b33      	ldr	r3, [pc, #204]	; (80dac <Shell+0x300>)
   80ce0:	701a      	strb	r2, [r3, #0]
			break;
   80ce2:	e72b      	b.n	80b3c <Shell+0x90>
				crc = CRC16MODBUSFRAME(pToken, strlen(pToken));
   80ce4:	4b40      	ldr	r3, [pc, #256]	; (80de8 <Shell+0x33c>)
   80ce6:	4798      	blx	r3
   80ce8:	4601      	mov	r1, r0
   80cea:	4638      	mov	r0, r7
   80cec:	4b3f      	ldr	r3, [pc, #252]	; (80dec <Shell+0x340>)
   80cee:	4798      	blx	r3
   80cf0:	b285      	uxth	r5, r0
   80cf2:	4b2e      	ldr	r3, [pc, #184]	; (80dac <Shell+0x300>)
   80cf4:	821d      	strh	r5, [r3, #16]
				k = 0;
   80cf6:	2300      	movs	r3, #0
   80cf8:	9305      	str	r3, [sp, #20]
				while(_cmdEntries[k].cmdCode && (_cmdEntries[k].cmdCode != crc)) k++;
   80cfa:	4b3d      	ldr	r3, [pc, #244]	; (80df0 <Shell+0x344>)
   80cfc:	881b      	ldrh	r3, [r3, #0]
   80cfe:	b1db      	cbz	r3, 80d38 <Shell+0x28c>
   80d00:	429d      	cmp	r5, r3
   80d02:	d01b      	beq.n	80d3c <Shell+0x290>
   80d04:	2301      	movs	r3, #1
   80d06:	4e3a      	ldr	r6, [pc, #232]	; (80df0 <Shell+0x344>)
   80d08:	e000      	b.n	80d0c <Shell+0x260>
   80d0a:	4623      	mov	r3, r4
   80d0c:	f836 1033 	ldrh.w	r1, [r6, r3, lsl #3]
   80d10:	b121      	cbz	r1, 80d1c <Shell+0x270>
   80d12:	1c5c      	adds	r4, r3, #1
   80d14:	428d      	cmp	r5, r1
   80d16:	d1f8      	bne.n	80d0a <Shell+0x25e>
   80d18:	9305      	str	r3, [sp, #20]
   80d1a:	e000      	b.n	80d1e <Shell+0x272>
   80d1c:	9305      	str	r3, [sp, #20]
				if(_cmdEntries[k].pCmdFunc)
   80d1e:	4934      	ldr	r1, [pc, #208]	; (80df0 <Shell+0x344>)
   80d20:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   80d24:	685c      	ldr	r4, [r3, #4]
   80d26:	b15c      	cbz	r4, 80d40 <Shell+0x294>
					_cmdEntries[k].pCmdFunc(0, shellBuf + strlen(pToken) + 1);
   80d28:	4638      	mov	r0, r7
   80d2a:	4b2f      	ldr	r3, [pc, #188]	; (80de8 <Shell+0x33c>)
   80d2c:	4798      	blx	r3
   80d2e:	4928      	ldr	r1, [pc, #160]	; (80dd0 <Shell+0x324>)
   80d30:	4401      	add	r1, r0
   80d32:	2000      	movs	r0, #0
   80d34:	47a0      	blx	r4
   80d36:	e7d1      	b.n	80cdc <Shell+0x230>
				while(_cmdEntries[k].cmdCode && (_cmdEntries[k].cmdCode != crc)) k++;
   80d38:	2300      	movs	r3, #0
   80d3a:	e7f0      	b.n	80d1e <Shell+0x272>
   80d3c:	2300      	movs	r3, #0
   80d3e:	e7ee      	b.n	80d1e <Shell+0x272>
					sprintf(buf,"\r\nunknown cmd: %04X\r\n",crc);
   80d40:	4c2c      	ldr	r4, [pc, #176]	; (80df4 <Shell+0x348>)
   80d42:	b282      	uxth	r2, r0
   80d44:	492c      	ldr	r1, [pc, #176]	; (80df8 <Shell+0x34c>)
   80d46:	4620      	mov	r0, r4
   80d48:	4b2c      	ldr	r3, [pc, #176]	; (80dfc <Shell+0x350>)
   80d4a:	4798      	blx	r3
					Putstr(buf);
   80d4c:	4621      	mov	r1, r4
   80d4e:	2067      	movs	r0, #103	; 0x67
   80d50:	4b14      	ldr	r3, [pc, #80]	; (80da4 <Shell+0x2f8>)
   80d52:	4798      	blx	r3
   80d54:	e7c2      	b.n	80cdc <Shell+0x230>
			Putch(_kbhitChar);
   80d56:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   80d5a:	2066      	movs	r0, #102	; 0x66
   80d5c:	4b11      	ldr	r3, [pc, #68]	; (80da4 <Shell+0x2f8>)
   80d5e:	4798      	blx	r3
			break;
   80d60:	e6ec      	b.n	80b3c <Shell+0x90>
		k++; if(flashSequ[k]==0) k=0;
   80d62:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   80d64:	3401      	adds	r4, #1
   80d66:	940f      	str	r4, [sp, #60]	; 0x3c
   80d68:	4b25      	ldr	r3, [pc, #148]	; (80e00 <Shell+0x354>)
   80d6a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   80d6e:	b133      	cbz	r3, 80d7e <Shell+0x2d2>
		if(k%2==0) gpio_set_pin_high(LED0_GPIO);
   80d70:	f014 0f01 	tst.w	r4, #1
   80d74:	d004      	beq.n	80d80 <Shell+0x2d4>
		else gpio_set_pin_low(LED0_GPIO);
   80d76:	203b      	movs	r0, #59	; 0x3b
   80d78:	4b09      	ldr	r3, [pc, #36]	; (80da0 <Shell+0x2f4>)
   80d7a:	4798      	blx	r3
   80d7c:	e003      	b.n	80d86 <Shell+0x2da>
		if(k%2==0) gpio_set_pin_high(LED0_GPIO);
   80d7e:	2400      	movs	r4, #0
   80d80:	203b      	movs	r0, #59	; 0x3b
   80d82:	4b20      	ldr	r3, [pc, #128]	; (80e04 <Shell+0x358>)
   80d84:	4798      	blx	r3
		PushTask(Shell,_SHELL_HEARTBEAT,k,flashSequ[k]);
   80d86:	4b1e      	ldr	r3, [pc, #120]	; (80e00 <Shell+0x354>)
   80d88:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   80d8c:	9300      	str	r3, [sp, #0]
   80d8e:	4623      	mov	r3, r4
   80d90:	2202      	movs	r2, #2
   80d92:	490c      	ldr	r1, [pc, #48]	; (80dc4 <Shell+0x318>)
   80d94:	2066      	movs	r0, #102	; 0x66
   80d96:	4c04      	ldr	r4, [pc, #16]	; (80da8 <Shell+0x2fc>)
   80d98:	47a0      	blx	r4
		break;
   80d9a:	e6cf      	b.n	80b3c <Shell+0x90>
   80d9c:	00081905 	.word	0x00081905
   80da0:	000818cb 	.word	0x000818cb
   80da4:	00081145 	.word	0x00081145
   80da8:	0008135d 	.word	0x0008135d
   80dac:	2007105c 	.word	0x2007105c
   80db0:	00081c69 	.word	0x00081c69
   80db4:	400e1a60 	.word	0x400e1a60
   80db8:	00080161 	.word	0x00080161
   80dbc:	000801d5 	.word	0x000801d5
   80dc0:	00080177 	.word	0x00080177
   80dc4:	00080aad 	.word	0x00080aad
   80dc8:	00081579 	.word	0x00081579
   80dcc:	000869d0 	.word	0x000869d0
   80dd0:	20071071 	.word	0x20071071
   80dd4:	000869d4 	.word	0x000869d4
   80dd8:	20071070 	.word	0x20071070
   80ddc:	0008692c 	.word	0x0008692c
   80de0:	000869dc 	.word	0x000869dc
   80de4:	00082045 	.word	0x00082045
   80de8:	00081fe9 	.word	0x00081fe9
   80dec:	00080905 	.word	0x00080905
   80df0:	00086aec 	.word	0x00086aec
   80df4:	200713e0 	.word	0x200713e0
   80df8:	000869e0 	.word	0x000869e0
   80dfc:	00081f9d 	.word	0x00081f9d
   80e00:	00086a1c 	.word	0x00086a1c
   80e04:	000818b1 	.word	0x000818b1
		if(state==IDLE)
   80e08:	4b2e      	ldr	r3, [pc, #184]	; (80ec4 <Shell+0x418>)
   80e0a:	781b      	ldrb	r3, [r3, #0]
   80e0c:	b14b      	cbz	r3, 80e22 <Shell+0x376>
		PushTask(Shell,_SHELL_PROMPT,0,300);
   80e0e:	f44f 7396 	mov.w	r3, #300	; 0x12c
   80e12:	9300      	str	r3, [sp, #0]
   80e14:	2300      	movs	r3, #0
   80e16:	2204      	movs	r2, #4
   80e18:	492b      	ldr	r1, [pc, #172]	; (80ec8 <Shell+0x41c>)
   80e1a:	2066      	movs	r0, #102	; 0x66
   80e1c:	4c2b      	ldr	r4, [pc, #172]	; (80ecc <Shell+0x420>)
   80e1e:	47a0      	blx	r4
		break;
   80e20:	e68c      	b.n	80b3c <Shell+0x90>
			rtc_get_date(RTC, &yr, &mm, &dd, &wk);
   80e22:	4e2b      	ldr	r6, [pc, #172]	; (80ed0 <Shell+0x424>)
   80e24:	af02      	add	r7, sp, #8
   80e26:	9700      	str	r7, [sp, #0]
   80e28:	ab03      	add	r3, sp, #12
   80e2a:	aa04      	add	r2, sp, #16
   80e2c:	a905      	add	r1, sp, #20
   80e2e:	4630      	mov	r0, r6
   80e30:	4c28      	ldr	r4, [pc, #160]	; (80ed4 <Shell+0x428>)
   80e32:	47a0      	blx	r4
			day = __RTCdayByDate(dd, mm, yr/100);
   80e34:	f8dd 800c 	ldr.w	r8, [sp, #12]
   80e38:	9d04      	ldr	r5, [sp, #16]
   80e3a:	f8dd 9014 	ldr.w	r9, [sp, #20]
   80e3e:	4a26      	ldr	r2, [pc, #152]	; (80ed8 <Shell+0x42c>)
   80e40:	fba2 3209 	umull	r3, r2, r2, r9
   80e44:	0952      	lsrs	r2, r2, #5
   80e46:	4629      	mov	r1, r5
   80e48:	4640      	mov	r0, r8
   80e4a:	4b24      	ldr	r3, [pc, #144]	; (80edc <Shell+0x430>)
   80e4c:	4798      	blx	r3
			sprintf(buf,"%.3s %02d %.3s %02d", daysOfWeek[day - 3], dd, months[mm-1], yr);
   80e4e:	3803      	subs	r0, #3
   80e50:	4b23      	ldr	r3, [pc, #140]	; (80ee0 <Shell+0x434>)
   80e52:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   80e56:	4c23      	ldr	r4, [pc, #140]	; (80ee4 <Shell+0x438>)
   80e58:	f8cd 9004 	str.w	r9, [sp, #4]
   80e5c:	3d01      	subs	r5, #1
   80e5e:	4b22      	ldr	r3, [pc, #136]	; (80ee8 <Shell+0x43c>)
   80e60:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   80e64:	9300      	str	r3, [sp, #0]
   80e66:	4643      	mov	r3, r8
   80e68:	4920      	ldr	r1, [pc, #128]	; (80eec <Shell+0x440>)
   80e6a:	4620      	mov	r0, r4
   80e6c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80f04 <Shell+0x458>
   80e70:	47c8      	blx	r9
			Putstr(buf);
   80e72:	4621      	mov	r1, r4
   80e74:	2067      	movs	r0, #103	; 0x67
   80e76:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80f08 <Shell+0x45c>
   80e7a:	47c0      	blx	r8
			LcdPutstr(buf, 0, 2);
   80e7c:	2302      	movs	r3, #2
   80e7e:	2200      	movs	r2, #0
   80e80:	4621      	mov	r1, r4
   80e82:	2066      	movs	r0, #102	; 0x66
   80e84:	4d1a      	ldr	r5, [pc, #104]	; (80ef0 <Shell+0x444>)
   80e86:	47a8      	blx	r5
			rtc_get_time(RTC, &hh, &mn, &sec);
   80e88:	463b      	mov	r3, r7
   80e8a:	aa03      	add	r2, sp, #12
   80e8c:	a904      	add	r1, sp, #16
   80e8e:	4630      	mov	r0, r6
   80e90:	4e18      	ldr	r6, [pc, #96]	; (80ef4 <Shell+0x448>)
   80e92:	47b0      	blx	r6
			sprintf(buf, "%02d:%02d:%02d ", hh, mn, sec);
   80e94:	9b02      	ldr	r3, [sp, #8]
   80e96:	9300      	str	r3, [sp, #0]
   80e98:	9b03      	ldr	r3, [sp, #12]
   80e9a:	9a04      	ldr	r2, [sp, #16]
   80e9c:	4916      	ldr	r1, [pc, #88]	; (80ef8 <Shell+0x44c>)
   80e9e:	4620      	mov	r0, r4
   80ea0:	47c8      	blx	r9
			Putstr(buf);
   80ea2:	4621      	mov	r1, r4
   80ea4:	2067      	movs	r0, #103	; 0x67
   80ea6:	47c0      	blx	r8
			LcdPutstr(buf, 1, 5);
   80ea8:	2305      	movs	r3, #5
   80eaa:	2201      	movs	r2, #1
   80eac:	4621      	mov	r1, r4
   80eae:	2066      	movs	r0, #102	; 0x66
   80eb0:	47a8      	blx	r5
			Menu(MENU_PROMPT);
   80eb2:	2068      	movs	r0, #104	; 0x68
   80eb4:	4b11      	ldr	r3, [pc, #68]	; (80efc <Shell+0x450>)
   80eb6:	4798      	blx	r3
   80eb8:	e7a9      	b.n	80e0e <Shell+0x362>
		Error(ERR_SHELL_SWITCH_BAD_SC,sc);
   80eba:	4b11      	ldr	r3, [pc, #68]	; (80f00 <Shell+0x454>)
   80ebc:	681b      	ldr	r3, [r3, #0]
   80ebe:	200e      	movs	r0, #14
   80ec0:	4798      	blx	r3
   80ec2:	e63b      	b.n	80b3c <Shell+0x90>
   80ec4:	2007105c 	.word	0x2007105c
   80ec8:	00080aad 	.word	0x00080aad
   80ecc:	0008135d 	.word	0x0008135d
   80ed0:	400e1a60 	.word	0x400e1a60
   80ed4:	00080269 	.word	0x00080269
   80ed8:	51eb851f 	.word	0x51eb851f
   80edc:	00080a09 	.word	0x00080a09
   80ee0:	2007053c 	.word	0x2007053c
   80ee4:	200713e0 	.word	0x200713e0
   80ee8:	20070558 	.word	0x20070558
   80eec:	000869f8 	.word	0x000869f8
   80ef0:	00080395 	.word	0x00080395
   80ef4:	0008017b 	.word	0x0008017b
   80ef8:	00086a0c 	.word	0x00086a0c
   80efc:	000805d5 	.word	0x000805d5
   80f00:	20070538 	.word	0x20070538
   80f04:	00081f9d 	.word	0x00081f9d
   80f08:	00081145 	.word	0x00081145

00080f0c <_cmd_set>:


uint32_t u1, u2, u3, u4;

void _cmd_set(uint32_t sc, void* pParam)
{
   80f0c:	b510      	push	{r4, lr}
   80f0e:	b082      	sub	sp, #8
   80f10:	4608      	mov	r0, r1
	uint16_t crc;
#define pToken sc
	pToken = (uint32_t)strtok(pParam, " \r\n");
   80f12:	4940      	ldr	r1, [pc, #256]	; (81014 <_cmd_set+0x108>)
   80f14:	4b40      	ldr	r3, [pc, #256]	; (81018 <_cmd_set+0x10c>)
   80f16:	4798      	blx	r3
	if(pToken)
   80f18:	b908      	cbnz	r0, 80f1e <_cmd_set+0x12>
#undef pToken
	}
	

	
}
   80f1a:	b002      	add	sp, #8
   80f1c:	bd10      	pop	{r4, pc}
   80f1e:	4604      	mov	r4, r0
		crc = CRC16MODBUSFRAME((unsigned char*)pToken, strlen((char*)pToken));
   80f20:	4b3e      	ldr	r3, [pc, #248]	; (8101c <_cmd_set+0x110>)
   80f22:	4798      	blx	r3
   80f24:	4601      	mov	r1, r0
   80f26:	4620      	mov	r0, r4
   80f28:	4b3d      	ldr	r3, [pc, #244]	; (81020 <_cmd_set+0x114>)
   80f2a:	4798      	blx	r3
   80f2c:	b282      	uxth	r2, r0
		switch(crc)
   80f2e:	f247 3327 	movw	r3, #29479	; 0x7327
   80f32:	429a      	cmp	r2, r3
   80f34:	d00d      	beq.n	80f52 <_cmd_set+0x46>
   80f36:	f24e 13a9 	movw	r3, #57769	; 0xe1a9
   80f3a:	429a      	cmp	r2, r3
   80f3c:	d034      	beq.n	80fa8 <_cmd_set+0x9c>
			sprintf(buf,"\r\nunknown cmd: %04X\r\n",crc);
   80f3e:	4c39      	ldr	r4, [pc, #228]	; (81024 <_cmd_set+0x118>)
   80f40:	4939      	ldr	r1, [pc, #228]	; (81028 <_cmd_set+0x11c>)
   80f42:	4620      	mov	r0, r4
   80f44:	4b39      	ldr	r3, [pc, #228]	; (8102c <_cmd_set+0x120>)
   80f46:	4798      	blx	r3
			Putstr(buf);
   80f48:	4621      	mov	r1, r4
   80f4a:	2067      	movs	r0, #103	; 0x67
   80f4c:	4b38      	ldr	r3, [pc, #224]	; (81030 <_cmd_set+0x124>)
   80f4e:	4798      	blx	r3
}
   80f50:	e7e3      	b.n	80f1a <_cmd_set+0xe>
			pToken = strtok(NULL, " : \r\n");
   80f52:	4938      	ldr	r1, [pc, #224]	; (81034 <_cmd_set+0x128>)
   80f54:	2000      	movs	r0, #0
   80f56:	4b30      	ldr	r3, [pc, #192]	; (81018 <_cmd_set+0x10c>)
   80f58:	4798      	blx	r3
			if(pToken) hh = atoi(pToken);
   80f5a:	b9b0      	cbnz	r0, 80f8a <_cmd_set+0x7e>
			pToken = strtok(NULL, " : \r\n");
   80f5c:	4935      	ldr	r1, [pc, #212]	; (81034 <_cmd_set+0x128>)
   80f5e:	2000      	movs	r0, #0
   80f60:	4b2d      	ldr	r3, [pc, #180]	; (81018 <_cmd_set+0x10c>)
   80f62:	4798      	blx	r3
			if(pToken) mn = atoi(pToken);
   80f64:	b9b0      	cbnz	r0, 80f94 <_cmd_set+0x88>
			pToken = strtok(NULL, " : \r\n");
   80f66:	4933      	ldr	r1, [pc, #204]	; (81034 <_cmd_set+0x128>)
   80f68:	2000      	movs	r0, #0
   80f6a:	4b2b      	ldr	r3, [pc, #172]	; (81018 <_cmd_set+0x10c>)
   80f6c:	4798      	blx	r3
			if(pToken) sec = atoi(pToken);
   80f6e:	b9b0      	cbnz	r0, 80f9e <_cmd_set+0x92>
			rtc_set_time(RTC, hh, mn, sec);
   80f70:	4b31      	ldr	r3, [pc, #196]	; (81038 <_cmd_set+0x12c>)
   80f72:	681b      	ldr	r3, [r3, #0]
   80f74:	4a31      	ldr	r2, [pc, #196]	; (8103c <_cmd_set+0x130>)
   80f76:	6812      	ldr	r2, [r2, #0]
   80f78:	4931      	ldr	r1, [pc, #196]	; (81040 <_cmd_set+0x134>)
   80f7a:	6809      	ldr	r1, [r1, #0]
   80f7c:	4831      	ldr	r0, [pc, #196]	; (81044 <_cmd_set+0x138>)
   80f7e:	4c32      	ldr	r4, [pc, #200]	; (81048 <_cmd_set+0x13c>)
   80f80:	47a0      	blx	r4
			gpio_set_pin_high(PIO_PA16_IDX);
   80f82:	2010      	movs	r0, #16
   80f84:	4b31      	ldr	r3, [pc, #196]	; (8104c <_cmd_set+0x140>)
   80f86:	4798      	blx	r3
			break;
   80f88:	e7c7      	b.n	80f1a <_cmd_set+0xe>
			if(pToken) hh = atoi(pToken);
   80f8a:	4b31      	ldr	r3, [pc, #196]	; (81050 <_cmd_set+0x144>)
   80f8c:	4798      	blx	r3
   80f8e:	4b2c      	ldr	r3, [pc, #176]	; (81040 <_cmd_set+0x134>)
   80f90:	6018      	str	r0, [r3, #0]
   80f92:	e7e3      	b.n	80f5c <_cmd_set+0x50>
			if(pToken) mn = atoi(pToken);
   80f94:	4b2e      	ldr	r3, [pc, #184]	; (81050 <_cmd_set+0x144>)
   80f96:	4798      	blx	r3
   80f98:	4b28      	ldr	r3, [pc, #160]	; (8103c <_cmd_set+0x130>)
   80f9a:	6018      	str	r0, [r3, #0]
   80f9c:	e7e3      	b.n	80f66 <_cmd_set+0x5a>
			if(pToken) sec = atoi(pToken);
   80f9e:	4b2c      	ldr	r3, [pc, #176]	; (81050 <_cmd_set+0x144>)
   80fa0:	4798      	blx	r3
   80fa2:	4b25      	ldr	r3, [pc, #148]	; (81038 <_cmd_set+0x12c>)
   80fa4:	6018      	str	r0, [r3, #0]
   80fa6:	e7e3      	b.n	80f70 <_cmd_set+0x64>
			pToken = strtok(NULL, " : \r\n");
   80fa8:	4922      	ldr	r1, [pc, #136]	; (81034 <_cmd_set+0x128>)
   80faa:	2000      	movs	r0, #0
   80fac:	4b1a      	ldr	r3, [pc, #104]	; (81018 <_cmd_set+0x10c>)
   80fae:	4798      	blx	r3
			if(pToken) yr = atoi(pToken);
   80fb0:	b9d8      	cbnz	r0, 80fea <_cmd_set+0xde>
			pToken = strtok(NULL, " : \r\n");
   80fb2:	4920      	ldr	r1, [pc, #128]	; (81034 <_cmd_set+0x128>)
   80fb4:	2000      	movs	r0, #0
   80fb6:	4b18      	ldr	r3, [pc, #96]	; (81018 <_cmd_set+0x10c>)
   80fb8:	4798      	blx	r3
			if(pToken) mm = atoi(pToken);
   80fba:	b9d8      	cbnz	r0, 80ff4 <_cmd_set+0xe8>
			pToken = strtok(NULL, " : \r\n");
   80fbc:	491d      	ldr	r1, [pc, #116]	; (81034 <_cmd_set+0x128>)
   80fbe:	2000      	movs	r0, #0
   80fc0:	4b15      	ldr	r3, [pc, #84]	; (81018 <_cmd_set+0x10c>)
   80fc2:	4798      	blx	r3
			if(pToken) dd = atoi(pToken);
   80fc4:	b9d8      	cbnz	r0, 80ffe <_cmd_set+0xf2>
			pToken = strtok(NULL, " : \r\n");
   80fc6:	491b      	ldr	r1, [pc, #108]	; (81034 <_cmd_set+0x128>)
   80fc8:	2000      	movs	r0, #0
   80fca:	4b13      	ldr	r3, [pc, #76]	; (81018 <_cmd_set+0x10c>)
   80fcc:	4798      	blx	r3
			if(pToken) wk = atoi(pToken);
   80fce:	b9d8      	cbnz	r0, 81008 <_cmd_set+0xfc>
			rtc_set_date(RTC, yr, mm, dd, wk);
   80fd0:	4b19      	ldr	r3, [pc, #100]	; (81038 <_cmd_set+0x12c>)
   80fd2:	681b      	ldr	r3, [r3, #0]
   80fd4:	4a19      	ldr	r2, [pc, #100]	; (8103c <_cmd_set+0x130>)
   80fd6:	6812      	ldr	r2, [r2, #0]
   80fd8:	4919      	ldr	r1, [pc, #100]	; (81040 <_cmd_set+0x134>)
   80fda:	6809      	ldr	r1, [r1, #0]
   80fdc:	481d      	ldr	r0, [pc, #116]	; (81054 <_cmd_set+0x148>)
   80fde:	6800      	ldr	r0, [r0, #0]
   80fe0:	9000      	str	r0, [sp, #0]
   80fe2:	4818      	ldr	r0, [pc, #96]	; (81044 <_cmd_set+0x138>)
   80fe4:	4c1c      	ldr	r4, [pc, #112]	; (81058 <_cmd_set+0x14c>)
   80fe6:	47a0      	blx	r4
			break;
   80fe8:	e797      	b.n	80f1a <_cmd_set+0xe>
			if(pToken) yr = atoi(pToken);
   80fea:	4b19      	ldr	r3, [pc, #100]	; (81050 <_cmd_set+0x144>)
   80fec:	4798      	blx	r3
   80fee:	4b14      	ldr	r3, [pc, #80]	; (81040 <_cmd_set+0x134>)
   80ff0:	6018      	str	r0, [r3, #0]
   80ff2:	e7de      	b.n	80fb2 <_cmd_set+0xa6>
			if(pToken) mm = atoi(pToken);
   80ff4:	4b16      	ldr	r3, [pc, #88]	; (81050 <_cmd_set+0x144>)
   80ff6:	4798      	blx	r3
   80ff8:	4b10      	ldr	r3, [pc, #64]	; (8103c <_cmd_set+0x130>)
   80ffa:	6018      	str	r0, [r3, #0]
   80ffc:	e7de      	b.n	80fbc <_cmd_set+0xb0>
			if(pToken) dd = atoi(pToken);
   80ffe:	4b14      	ldr	r3, [pc, #80]	; (81050 <_cmd_set+0x144>)
   81000:	4798      	blx	r3
   81002:	4b0d      	ldr	r3, [pc, #52]	; (81038 <_cmd_set+0x12c>)
   81004:	6018      	str	r0, [r3, #0]
   81006:	e7de      	b.n	80fc6 <_cmd_set+0xba>
			if(pToken) wk = atoi(pToken);
   81008:	4b11      	ldr	r3, [pc, #68]	; (81050 <_cmd_set+0x144>)
   8100a:	4798      	blx	r3
   8100c:	4b11      	ldr	r3, [pc, #68]	; (81054 <_cmd_set+0x148>)
   8100e:	6018      	str	r0, [r3, #0]
   81010:	e7de      	b.n	80fd0 <_cmd_set+0xc4>
   81012:	bf00      	nop
   81014:	000869dc 	.word	0x000869dc
   81018:	00082045 	.word	0x00082045
   8101c:	00081fe9 	.word	0x00081fe9
   81020:	00080905 	.word	0x00080905
   81024:	200713e0 	.word	0x200713e0
   81028:	000869e0 	.word	0x000869e0
   8102c:	00081f9d 	.word	0x00081f9d
   81030:	00081145 	.word	0x00081145
   81034:	00086b0c 	.word	0x00086b0c
   81038:	2007118c 	.word	0x2007118c
   8103c:	20071180 	.word	0x20071180
   81040:	20071184 	.word	0x20071184
   81044:	400e1a60 	.word	0x400e1a60
   81048:	000801d5 	.word	0x000801d5
   8104c:	000818b1 	.word	0x000818b1
   81050:	00081ea9 	.word	0x00081ea9
   81054:	20071188 	.word	0x20071188
   81058:	000802dd 	.word	0x000802dd

0008105c <_cmd_show>:

void _cmd_show(uint32_t sc, void* pParam)
 {
   8105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8105e:	4b1b      	ldr	r3, [pc, #108]	; (810cc <_cmd_show+0x70>)
   81060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(PIO_PC23_IDX))
   81062:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   81066:	d118      	bne.n	8109a <_cmd_show+0x3e>
		ioport_set_pin_level(PIO_PC23_IDX,0);
		Putstr(buf);
	}
	else
	{
	sprintf(buf, "L'etat de la broche etait bas \r\n");
   81068:	4e19      	ldr	r6, [pc, #100]	; (810d0 <_cmd_show+0x74>)
   8106a:	4c1a      	ldr	r4, [pc, #104]	; (810d4 <_cmd_show+0x78>)
   8106c:	f106 0720 	add.w	r7, r6, #32
   81070:	4635      	mov	r5, r6
   81072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81074:	6020      	str	r0, [r4, #0]
   81076:	6061      	str	r1, [r4, #4]
   81078:	60a2      	str	r2, [r4, #8]
   8107a:	60e3      	str	r3, [r4, #12]
   8107c:	462e      	mov	r6, r5
   8107e:	3410      	adds	r4, #16
   81080:	42bd      	cmp	r5, r7
   81082:	d1f5      	bne.n	81070 <_cmd_show+0x14>
   81084:	782b      	ldrb	r3, [r5, #0]
   81086:	7023      	strb	r3, [r4, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81088:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8108c:	4b0f      	ldr	r3, [pc, #60]	; (810cc <_cmd_show+0x70>)
   8108e:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(PIO_PC23_IDX,1);
	Putstr(buf);
   81090:	4910      	ldr	r1, [pc, #64]	; (810d4 <_cmd_show+0x78>)
   81092:	2067      	movs	r0, #103	; 0x67
   81094:	4b10      	ldr	r3, [pc, #64]	; (810d8 <_cmd_show+0x7c>)
   81096:	4798      	blx	r3
   81098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sprintf(buf, "L'etat de la broche etait haut \r\n");
   8109a:	4e10      	ldr	r6, [pc, #64]	; (810dc <_cmd_show+0x80>)
   8109c:	4c0d      	ldr	r4, [pc, #52]	; (810d4 <_cmd_show+0x78>)
   8109e:	f106 0720 	add.w	r7, r6, #32
   810a2:	4635      	mov	r5, r6
   810a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   810a6:	6020      	str	r0, [r4, #0]
   810a8:	6061      	str	r1, [r4, #4]
   810aa:	60a2      	str	r2, [r4, #8]
   810ac:	60e3      	str	r3, [r4, #12]
   810ae:	462e      	mov	r6, r5
   810b0:	3410      	adds	r4, #16
   810b2:	42bd      	cmp	r5, r7
   810b4:	d1f5      	bne.n	810a2 <_cmd_show+0x46>
   810b6:	882b      	ldrh	r3, [r5, #0]
   810b8:	8023      	strh	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   810ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   810be:	4b03      	ldr	r3, [pc, #12]	; (810cc <_cmd_show+0x70>)
   810c0:	635a      	str	r2, [r3, #52]	; 0x34
		Putstr(buf);
   810c2:	4904      	ldr	r1, [pc, #16]	; (810d4 <_cmd_show+0x78>)
   810c4:	2067      	movs	r0, #103	; 0x67
   810c6:	4b04      	ldr	r3, [pc, #16]	; (810d8 <_cmd_show+0x7c>)
   810c8:	4798      	blx	r3
   810ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   810cc:	400e1200 	.word	0x400e1200
   810d0:	00086b38 	.word	0x00086b38
   810d4:	200713e0 	.word	0x200713e0
   810d8:	00081145 	.word	0x00081145
   810dc:	00086b14 	.word	0x00086b14

000810e0 <_cmd_menu>:
	//sprintf(buf, "Hello!!! \r\n");
	//Putstr(buf);
 }

 void _cmd_menu(uint32_t sc, void* pParam)
 {
   810e0:	b510      	push	{r4, lr}
   810e2:	4608      	mov	r0, r1
	uint16_t crc;
#define pToken sc
	pToken = (uint32_t)strtok(pParam, " \r\n");
   810e4:	4911      	ldr	r1, [pc, #68]	; (8112c <_cmd_menu+0x4c>)
   810e6:	4b12      	ldr	r3, [pc, #72]	; (81130 <_cmd_menu+0x50>)
   810e8:	4798      	blx	r3
	if(pToken)
   810ea:	b900      	cbnz	r0, 810ee <_cmd_menu+0xe>
   810ec:	bd10      	pop	{r4, pc}
   810ee:	4604      	mov	r4, r0
	{
		crc = CRC16MODBUSFRAME((unsigned char*)pToken, strlen((char*)pToken));
   810f0:	4b10      	ldr	r3, [pc, #64]	; (81134 <_cmd_menu+0x54>)
   810f2:	4798      	blx	r3
   810f4:	4601      	mov	r1, r0
   810f6:	4620      	mov	r0, r4
   810f8:	4b0f      	ldr	r3, [pc, #60]	; (81138 <_cmd_menu+0x58>)
   810fa:	4798      	blx	r3
		switch(crc)
   810fc:	b280      	uxth	r0, r0
   810fe:	f648 0362 	movw	r3, #34914	; 0x8862
   81102:	4298      	cmp	r0, r3
   81104:	d007      	beq.n	81116 <_cmd_menu+0x36>
   81106:	f648 338b 	movw	r3, #35723	; 0x8b8b
   8110a:	4298      	cmp	r0, r3
   8110c:	d107      	bne.n	8111e <_cmd_menu+0x3e>
		{
		case 0x8B8B:			//switch
			Menu(MENU_SWITCH_BUTTON);
   8110e:	2065      	movs	r0, #101	; 0x65
   81110:	4b0a      	ldr	r3, [pc, #40]	; (8113c <_cmd_menu+0x5c>)
   81112:	4798      	blx	r3
			break;
   81114:	bd10      	pop	{r4, pc}
		case 0x8862:			//select
			Menu(MENU_SELECT_BUTTON);
   81116:	2066      	movs	r0, #102	; 0x66
   81118:	4b08      	ldr	r3, [pc, #32]	; (8113c <_cmd_menu+0x5c>)
   8111a:	4798      	blx	r3
			break;	
   8111c:	bd10      	pop	{r4, pc}
		default:
			Error(ERR_SHELL_CMD_MENU_SWITCH_BAD_SC, sc);
   8111e:	4b08      	ldr	r3, [pc, #32]	; (81140 <_cmd_menu+0x60>)
   81120:	681b      	ldr	r3, [r3, #0]
   81122:	4621      	mov	r1, r4
   81124:	2013      	movs	r0, #19
   81126:	4798      	blx	r3
		}
#undef pToken
	}
	

 }
   81128:	e7e0      	b.n	810ec <_cmd_menu+0xc>
   8112a:	bf00      	nop
   8112c:	000869dc 	.word	0x000869dc
   81130:	00082045 	.word	0x00082045
   81134:	00081fe9 	.word	0x00081fe9
   81138:	00080905 	.word	0x00080905
   8113c:	000805d5 	.word	0x000805d5
   81140:	20070538 	.word	0x20070538

00081144 <Shellcom>:




 uint32_t Shellcom(uint32_t sc , ...)
 {
   81144:	b40f      	push	{r0, r1, r2, r3}
   81146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(sc)
   81148:	9906      	ldr	r1, [sp, #24]
   8114a:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   8114e:	2b05      	cmp	r3, #5
   81150:	f200 80a2 	bhi.w	81298 <Shellcom+0x154>
   81154:	e8df f003 	tbb	[pc, r3]
   81158:	2376a045 	.word	0x2376a045
   8115c:	7103      	.short	0x7103
#undef _pStr
		break;
	case SHELLCOM_PUTSTRLEN:
#define _pStr pa1
#define _len  pa2
	while(_len)
   8115e:	9d08      	ldr	r5, [sp, #32]
   81160:	2d00      	cmp	r5, #0
   81162:	d06a      	beq.n	8123a <Shellcom+0xf6>
	{
		*pTxWrite++ = *(char*)_pStr++; _len--;
   81164:	4c4f      	ldr	r4, [pc, #316]	; (812a4 <Shellcom+0x160>)
		if(pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) pTxWrite=shellcomTxBuf;
   81166:	4e50      	ldr	r6, [pc, #320]	; (812a8 <Shellcom+0x164>)
   81168:	f5a6 7780 	sub.w	r7, r6, #256	; 0x100
		*pTxWrite++ = *(char*)_pStr++; _len--;
   8116c:	6823      	ldr	r3, [r4, #0]
   8116e:	1c5a      	adds	r2, r3, #1
   81170:	6022      	str	r2, [r4, #0]
   81172:	9a07      	ldr	r2, [sp, #28]
   81174:	1c51      	adds	r1, r2, #1
   81176:	9107      	str	r1, [sp, #28]
   81178:	7812      	ldrb	r2, [r2, #0]
   8117a:	701a      	strb	r2, [r3, #0]
   8117c:	3d01      	subs	r5, #1
   8117e:	9508      	str	r5, [sp, #32]
		if(pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) pTxWrite=shellcomTxBuf;
   81180:	6823      	ldr	r3, [r4, #0]
   81182:	42b3      	cmp	r3, r6
   81184:	bf28      	it	cs
   81186:	6027      	strcs	r7, [r4, #0]
		if(pTxWrite==pTxRead) Error(ERR_SHELCOM_TXBUF_FULL,SHELLCOM_PUTSTR);
   81188:	6822      	ldr	r2, [r4, #0]
   8118a:	6863      	ldr	r3, [r4, #4]
   8118c:	429a      	cmp	r2, r3
   8118e:	d07d      	beq.n	8128c <Shellcom+0x148>
		usart_enable_interrupt(USART_SERIAL, US_IER_TXRDY);
   81190:	2102      	movs	r1, #2
   81192:	4846      	ldr	r0, [pc, #280]	; (812ac <Shellcom+0x168>)
   81194:	4b46      	ldr	r3, [pc, #280]	; (812b0 <Shellcom+0x16c>)
   81196:	4798      	blx	r3
	while(_len)
   81198:	2d00      	cmp	r5, #0
   8119a:	d1e7      	bne.n	8116c <Shellcom+0x28>
   8119c:	e04d      	b.n	8123a <Shellcom+0xf6>
		while(*(char*)_pStr)
   8119e:	9d07      	ldr	r5, [sp, #28]
   811a0:	462a      	mov	r2, r5
   811a2:	782b      	ldrb	r3, [r5, #0]
   811a4:	2b00      	cmp	r3, #0
   811a6:	d048      	beq.n	8123a <Shellcom+0xf6>
   811a8:	3501      	adds	r5, #1
			*pTxWrite++ = *(char*)_pStr++;
   811aa:	4c3e      	ldr	r4, [pc, #248]	; (812a4 <Shellcom+0x160>)
			if(pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) pTxWrite=shellcomTxBuf;
   811ac:	4e3e      	ldr	r6, [pc, #248]	; (812a8 <Shellcom+0x164>)
   811ae:	f5a6 7780 	sub.w	r7, r6, #256	; 0x100
			*pTxWrite++ = *(char*)_pStr++;
   811b2:	6823      	ldr	r3, [r4, #0]
   811b4:	1c59      	adds	r1, r3, #1
   811b6:	6021      	str	r1, [r4, #0]
   811b8:	9507      	str	r5, [sp, #28]
   811ba:	7812      	ldrb	r2, [r2, #0]
   811bc:	701a      	strb	r2, [r3, #0]
			if(pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) pTxWrite=shellcomTxBuf;
   811be:	6823      	ldr	r3, [r4, #0]
   811c0:	42b3      	cmp	r3, r6
   811c2:	bf28      	it	cs
   811c4:	6027      	strcs	r7, [r4, #0]
			if(pTxWrite==pTxRead) Error(ERR_SHELCOM_TXBUF_FULL,SHELLCOM_PUTSTR);
   811c6:	6822      	ldr	r2, [r4, #0]
   811c8:	6863      	ldr	r3, [r4, #4]
   811ca:	429a      	cmp	r2, r3
   811cc:	d058      	beq.n	81280 <Shellcom+0x13c>
			usart_enable_interrupt(USART_SERIAL, US_IER_TXRDY);
   811ce:	2102      	movs	r1, #2
   811d0:	4836      	ldr	r0, [pc, #216]	; (812ac <Shellcom+0x168>)
   811d2:	4b37      	ldr	r3, [pc, #220]	; (812b0 <Shellcom+0x16c>)
   811d4:	4798      	blx	r3
		while(*(char*)_pStr)
   811d6:	462a      	mov	r2, r5
   811d8:	f815 3b01 	ldrb.w	r3, [r5], #1
   811dc:	2b00      	cmp	r3, #0
   811de:	d1e8      	bne.n	811b2 <Shellcom+0x6e>
   811e0:	e02b      	b.n	8123a <Shellcom+0xf6>
		pTxWrite = pTxRead = shellcomTxBuf;
   811e2:	4b30      	ldr	r3, [pc, #192]	; (812a4 <Shellcom+0x160>)
   811e4:	4a33      	ldr	r2, [pc, #204]	; (812b4 <Shellcom+0x170>)
   811e6:	605a      	str	r2, [r3, #4]
   811e8:	601a      	str	r2, [r3, #0]
   811ea:	2011      	movs	r0, #17
   811ec:	4c32      	ldr	r4, [pc, #200]	; (812b8 <Shellcom+0x174>)
   811ee:	47a0      	blx	r4
		usart_init_rs232(USART_SERIAL, &usart_console_settings,	sysclk_get_cpu_hz());
   811f0:	4d2e      	ldr	r5, [pc, #184]	; (812ac <Shellcom+0x168>)
   811f2:	4a32      	ldr	r2, [pc, #200]	; (812bc <Shellcom+0x178>)
   811f4:	4932      	ldr	r1, [pc, #200]	; (812c0 <Shellcom+0x17c>)
   811f6:	4628      	mov	r0, r5
   811f8:	4b32      	ldr	r3, [pc, #200]	; (812c4 <Shellcom+0x180>)
   811fa:	4798      	blx	r3
		gpio_configure_pin(USART_SERIAL_TXD_IDX,USART_SERIAL_TXD_FLAGS);
   811fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81200:	200b      	movs	r0, #11
   81202:	4e31      	ldr	r6, [pc, #196]	; (812c8 <Shellcom+0x184>)
   81204:	47b0      	blx	r6
		gpio_configure_pin(USART_SERIAL_RXD_IDX,USART_SERIAL_RXD_FLAGS);
   81206:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8120a:	200a      	movs	r0, #10
   8120c:	47b0      	blx	r6
		usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);
   8120e:	2101      	movs	r1, #1
   81210:	4628      	mov	r0, r5
   81212:	4b27      	ldr	r3, [pc, #156]	; (812b0 <Shellcom+0x16c>)
   81214:	4798      	blx	r3
   81216:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   8121a:	4b2c      	ldr	r3, [pc, #176]	; (812cc <Shellcom+0x188>)
   8121c:	601a      	str	r2, [r3, #0]
		usart_enable_tx(USART_SERIAL);
   8121e:	4628      	mov	r0, r5
   81220:	4b2b      	ldr	r3, [pc, #172]	; (812d0 <Shellcom+0x18c>)
   81222:	4798      	blx	r3
		usart_enable_rx(USART_SERIAL);
   81224:	4628      	mov	r0, r5
   81226:	4b2b      	ldr	r3, [pc, #172]	; (812d4 <Shellcom+0x190>)
   81228:	4798      	blx	r3
   8122a:	200b      	movs	r0, #11
   8122c:	47a0      	blx	r4
   8122e:	200c      	movs	r0, #12
   81230:	47a0      	blx	r4
   81232:	200d      	movs	r0, #13
   81234:	47a0      	blx	r4
   81236:	200e      	movs	r0, #14
   81238:	47a0      	blx	r4
	default:
		Error(ERR_SHELLCOM_SWITCH_BAD_SC,sc);
	}

	return 0;
 }
   8123a:	2000      	movs	r0, #0
   8123c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   81240:	b004      	add	sp, #16
   81242:	4770      	bx	lr
		*pTxWrite++ = _ch;
   81244:	4b17      	ldr	r3, [pc, #92]	; (812a4 <Shellcom+0x160>)
   81246:	681a      	ldr	r2, [r3, #0]
   81248:	1c51      	adds	r1, r2, #1
   8124a:	6019      	str	r1, [r3, #0]
   8124c:	9907      	ldr	r1, [sp, #28]
   8124e:	7011      	strb	r1, [r2, #0]
		if(pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) pTxWrite=shellcomTxBuf;
   81250:	681a      	ldr	r2, [r3, #0]
   81252:	4b15      	ldr	r3, [pc, #84]	; (812a8 <Shellcom+0x164>)
   81254:	429a      	cmp	r2, r3
   81256:	d303      	bcc.n	81260 <Shellcom+0x11c>
   81258:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
   8125c:	4b11      	ldr	r3, [pc, #68]	; (812a4 <Shellcom+0x160>)
   8125e:	601a      	str	r2, [r3, #0]
		if(pTxWrite==pTxRead) Error(ERR_SHELCOM_TXBUF_FULL,SHELLCOM_PUTC);
   81260:	4b10      	ldr	r3, [pc, #64]	; (812a4 <Shellcom+0x160>)
   81262:	681a      	ldr	r2, [r3, #0]
   81264:	685b      	ldr	r3, [r3, #4]
   81266:	429a      	cmp	r2, r3
   81268:	d004      	beq.n	81274 <Shellcom+0x130>
		usart_enable_interrupt(USART_SERIAL, US_IER_TXRDY);
   8126a:	2102      	movs	r1, #2
   8126c:	480f      	ldr	r0, [pc, #60]	; (812ac <Shellcom+0x168>)
   8126e:	4b10      	ldr	r3, [pc, #64]	; (812b0 <Shellcom+0x16c>)
   81270:	4798      	blx	r3
		break;
   81272:	e7e2      	b.n	8123a <Shellcom+0xf6>
		if(pTxWrite==pTxRead) Error(ERR_SHELCOM_TXBUF_FULL,SHELLCOM_PUTC);
   81274:	4b18      	ldr	r3, [pc, #96]	; (812d8 <Shellcom+0x194>)
   81276:	681b      	ldr	r3, [r3, #0]
   81278:	2166      	movs	r1, #102	; 0x66
   8127a:	2017      	movs	r0, #23
   8127c:	4798      	blx	r3
   8127e:	e7f4      	b.n	8126a <Shellcom+0x126>
			if(pTxWrite==pTxRead) Error(ERR_SHELCOM_TXBUF_FULL,SHELLCOM_PUTSTR);
   81280:	4b15      	ldr	r3, [pc, #84]	; (812d8 <Shellcom+0x194>)
   81282:	681b      	ldr	r3, [r3, #0]
   81284:	2167      	movs	r1, #103	; 0x67
   81286:	2017      	movs	r0, #23
   81288:	4798      	blx	r3
   8128a:	e7a0      	b.n	811ce <Shellcom+0x8a>
		if(pTxWrite==pTxRead) Error(ERR_SHELCOM_TXBUF_FULL,SHELLCOM_PUTSTR);
   8128c:	4b12      	ldr	r3, [pc, #72]	; (812d8 <Shellcom+0x194>)
   8128e:	681b      	ldr	r3, [r3, #0]
   81290:	2167      	movs	r1, #103	; 0x67
   81292:	2017      	movs	r0, #23
   81294:	4798      	blx	r3
   81296:	e77b      	b.n	81190 <Shellcom+0x4c>
		Error(ERR_SHELLCOM_SWITCH_BAD_SC,sc);
   81298:	4b0f      	ldr	r3, [pc, #60]	; (812d8 <Shellcom+0x194>)
   8129a:	681b      	ldr	r3, [r3, #0]
   8129c:	200d      	movs	r0, #13
   8129e:	4798      	blx	r3
   812a0:	e7cb      	b.n	8123a <Shellcom+0xf6>
   812a2:	bf00      	nop
   812a4:	20071190 	.word	0x20071190
   812a8:	20071298 	.word	0x20071298
   812ac:	40098000 	.word	0x40098000
   812b0:	000808f9 	.word	0x000808f9
   812b4:	20071198 	.word	0x20071198
   812b8:	00081c69 	.word	0x00081c69
   812bc:	0501bd00 	.word	0x0501bd00
   812c0:	00086b5c 	.word	0x00086b5c
   812c4:	00080899 	.word	0x00080899
   812c8:	00081905 	.word	0x00081905
   812cc:	e000e100 	.word	0xe000e100
   812d0:	000808ed 	.word	0x000808ed
   812d4:	000808f3 	.word	0x000808f3
   812d8:	20070538 	.word	0x20070538

000812dc <USART0_Handler>:
	 _SHELL_KBHIT = 1,
 };

 
 void USART0_Handler()
 {
   812dc:	b530      	push	{r4, r5, lr}
   812de:	b083      	sub	sp, #12
	uint32_t dw_status = usart_get_status(USART_SERIAL);
   812e0:	4817      	ldr	r0, [pc, #92]	; (81340 <USART0_Handler+0x64>)
   812e2:	4b18      	ldr	r3, [pc, #96]	; (81344 <USART0_Handler+0x68>)
   812e4:	4798      	blx	r3
   812e6:	4604      	mov	r4, r0

	if(dw_status & US_CSR_RXRDY)
   812e8:	f010 0f01 	tst.w	r0, #1
   812ec:	d116      	bne.n	8131c <USART0_Handler+0x40>
	{
		PushTask(Shell, _SHELL_KBHIT, USART_SERIAL->US_RHR & US_RHR_RXCHR_Msk, 0);
	}

	if(dw_status & US_CSR_TXRDY)
   812ee:	f014 0f02 	tst.w	r4, #2
   812f2:	d011      	beq.n	81318 <USART0_Handler+0x3c>
	{
				
		if(pTxRead!=pTxWrite)
   812f4:	4a14      	ldr	r2, [pc, #80]	; (81348 <USART0_Handler+0x6c>)
   812f6:	6853      	ldr	r3, [r2, #4]
   812f8:	6812      	ldr	r2, [r2, #0]
   812fa:	4293      	cmp	r3, r2
   812fc:	d01a      	beq.n	81334 <USART0_Handler+0x58>
		{
			USART_SERIAL->US_THR = US_THR_TXCHR(*pTxRead++);
   812fe:	1c5a      	adds	r2, r3, #1
   81300:	4911      	ldr	r1, [pc, #68]	; (81348 <USART0_Handler+0x6c>)
   81302:	604a      	str	r2, [r1, #4]
   81304:	7819      	ldrb	r1, [r3, #0]
   81306:	4b0e      	ldr	r3, [pc, #56]	; (81340 <USART0_Handler+0x64>)
   81308:	61d9      	str	r1, [r3, #28]
			if(pTxRead>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) pTxRead = shellcomTxBuf;
   8130a:	4b10      	ldr	r3, [pc, #64]	; (8134c <USART0_Handler+0x70>)
   8130c:	429a      	cmp	r2, r3
   8130e:	d303      	bcc.n	81318 <USART0_Handler+0x3c>
   81310:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
   81314:	4b0c      	ldr	r3, [pc, #48]	; (81348 <USART0_Handler+0x6c>)
   81316:	605a      	str	r2, [r3, #4]
		else
		{
			usart_disable_interrupt(USART_SERIAL, US_IER_TXRDY);
		}
	}
 }
   81318:	b003      	add	sp, #12
   8131a:	bd30      	pop	{r4, r5, pc}
		PushTask(Shell, _SHELL_KBHIT, USART_SERIAL->US_RHR & US_RHR_RXCHR_Msk, 0);
   8131c:	4b08      	ldr	r3, [pc, #32]	; (81340 <USART0_Handler+0x64>)
   8131e:	699b      	ldr	r3, [r3, #24]
   81320:	2200      	movs	r2, #0
   81322:	9200      	str	r2, [sp, #0]
   81324:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81328:	2201      	movs	r2, #1
   8132a:	4909      	ldr	r1, [pc, #36]	; (81350 <USART0_Handler+0x74>)
   8132c:	2066      	movs	r0, #102	; 0x66
   8132e:	4d09      	ldr	r5, [pc, #36]	; (81354 <USART0_Handler+0x78>)
   81330:	47a8      	blx	r5
   81332:	e7dc      	b.n	812ee <USART0_Handler+0x12>
			usart_disable_interrupt(USART_SERIAL, US_IER_TXRDY);
   81334:	2102      	movs	r1, #2
   81336:	4802      	ldr	r0, [pc, #8]	; (81340 <USART0_Handler+0x64>)
   81338:	4b07      	ldr	r3, [pc, #28]	; (81358 <USART0_Handler+0x7c>)
   8133a:	4798      	blx	r3
 }
   8133c:	e7ec      	b.n	81318 <USART0_Handler+0x3c>
   8133e:	bf00      	nop
   81340:	40098000 	.word	0x40098000
   81344:	00080901 	.word	0x00080901
   81348:	20071190 	.word	0x20071190
   8134c:	20071298 	.word	0x20071298
   81350:	00080aad 	.word	0x00080aad
   81354:	0008135d 	.word	0x0008135d
   81358:	000808fd 	.word	0x000808fd

0008135c <Taskman>:
 };


 /////////////////////////////////////////////////////////////////////////////
 uint32_t Taskman(uint32_t sc, ...)
 {
   8135c:	b40f      	push	{r0, r1, r2, r3}
   8135e:	b5f0      	push	{r4, r5, r6, r7, lr}
   81360:	b083      	sub	sp, #12
//	uint8_t criticalStatus;
	
	switch(sc)
   81362:	9908      	ldr	r1, [sp, #32]
   81364:	2964      	cmp	r1, #100	; 0x64
   81366:	d024      	beq.n	813b2 <Taskman+0x56>
   81368:	d917      	bls.n	8139a <Taskman+0x3e>
   8136a:	2966      	cmp	r1, #102	; 0x66
   8136c:	d067      	beq.n	8143e <Taskman+0xe2>
   8136e:	2967      	cmp	r1, #103	; 0x67
   81370:	f040 80c8 	bne.w	81504 <Taskman+0x1a8>
#undef _delay
#undef k
		break;

	case TASKMAN_POP_TASK:
		if(taskman.pPop!=taskman.pPush)
   81374:	4a66      	ldr	r2, [pc, #408]	; (81510 <Taskman+0x1b4>)
   81376:	6853      	ldr	r3, [r2, #4]
   81378:	6812      	ldr	r2, [r2, #0]
   8137a:	4293      	cmp	r3, r2
   8137c:	d059      	beq.n	81432 <Taskman+0xd6>
		{
			t_ptf	 func;
			void*	 pa;
			func = taskman.pPop->pFunc;
   8137e:	681a      	ldr	r2, [r3, #0]
			sc = taskman.pPop->sc;
   81380:	6858      	ldr	r0, [r3, #4]
   81382:	9008      	str	r0, [sp, #32]
			pa = taskman.pPop->pParam;
   81384:	6899      	ldr	r1, [r3, #8]
			taskman.pPop++;
   81386:	3310      	adds	r3, #16
			if(taskman.pPop>=tasks+TASKMAN_TASKS_LIST_LEN) taskman.pPop=tasks;
   81388:	4c62      	ldr	r4, [pc, #392]	; (81514 <Taskman+0x1b8>)
   8138a:	42a3      	cmp	r3, r4
   8138c:	f0c0 80a3 	bcc.w	814d6 <Taskman+0x17a>
   81390:	4c61      	ldr	r4, [pc, #388]	; (81518 <Taskman+0x1bc>)
   81392:	4b5f      	ldr	r3, [pc, #380]	; (81510 <Taskman+0x1b4>)
   81394:	605c      	str	r4, [r3, #4]
			//Function call
			func(sc,pa);
   81396:	4790      	blx	r2
   81398:	e04b      	b.n	81432 <Taskman+0xd6>
	switch(sc)
   8139a:	2901      	cmp	r1, #1
   8139c:	f040 80b2 	bne.w	81504 <Taskman+0x1a8>
		}
		break;

	//Private services implementation section /////////////////////////////////
	case _TASKMAN_DELAYED_TASK_PROC:
		gpio_toggle_pin(PIO_PA2_IDX);
   813a0:	2002      	movs	r0, #2
   813a2:	4b5e      	ldr	r3, [pc, #376]	; (8151c <Taskman+0x1c0>)
   813a4:	4798      	blx	r3
#define k sc
		for(k=0;k<TASKMAN_DELAYED_TASKS_LIST_LEN;k++)
   813a6:	2500      	movs	r5, #0
   813a8:	9508      	str	r5, [sp, #32]
   813aa:	4c5d      	ldr	r4, [pc, #372]	; (81520 <Taskman+0x1c4>)
		{
			if(dTasks[k].delay)
			{
				if(--dTasks[k].delay==0)
				{
					PushTask(
   813ac:	462f      	mov	r7, r5
   813ae:	2666      	movs	r6, #102	; 0x66
   813b0:	e099      	b.n	814e6 <Taskman+0x18a>
		taskman.pPop=taskman.pPush=tasks;
   813b2:	4b57      	ldr	r3, [pc, #348]	; (81510 <Taskman+0x1b4>)
   813b4:	4a58      	ldr	r2, [pc, #352]	; (81518 <Taskman+0x1bc>)
   813b6:	601a      	str	r2, [r3, #0]
   813b8:	605a      	str	r2, [r3, #4]
   813ba:	4b59      	ldr	r3, [pc, #356]	; (81520 <Taskman+0x1c4>)
   813bc:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
			dTasks[k].delay=0;
   813c0:	2200      	movs	r2, #0
   813c2:	60da      	str	r2, [r3, #12]
   813c4:	3310      	adds	r3, #16
		for(k=0;k<TASKMAN_DELAYED_TASKS_LIST_LEN;k++)
   813c6:	428b      	cmp	r3, r1
   813c8:	d1fb      	bne.n	813c2 <Taskman+0x66>
		base->PIO_PUDR = mask;
   813ca:	4b56      	ldr	r3, [pc, #344]	; (81524 <Taskman+0x1c8>)
   813cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   813d0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_MDDR = mask;
   813d2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
   813d4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_SCIFSR = mask;
   813d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
   813da:	6f19      	ldr	r1, [r3, #112]	; 0x70
   813dc:	4311      	orrs	r1, r2
   813de:	6719      	str	r1, [r3, #112]	; 0x70
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   813e0:	605a      	str	r2, [r3, #4]
   813e2:	201b      	movs	r0, #27
   813e4:	4b50      	ldr	r3, [pc, #320]	; (81528 <Taskman+0x1cc>)
   813e6:	4798      	blx	r3

	 //Configure the PMC to enable the TC module.
	 sysclk_enable_peripheral_clock(ID_TC_WAVEFORM);

	 //Init TC to waveform mode.
	 tc_init(
   813e8:	4c50      	ldr	r4, [pc, #320]	; (8152c <Taskman+0x1d0>)
   813ea:	4a51      	ldr	r2, [pc, #324]	; (81530 <Taskman+0x1d4>)
   813ec:	2100      	movs	r1, #0
   813ee:	4620      	mov	r0, r4
   813f0:	4b50      	ldr	r3, [pc, #320]	; (81534 <Taskman+0x1d8>)
   813f2:	4798      	blx	r3

	 //Configure waveform frequency and duty cycle.
	 rc =	(sysclk_get_peripheral_bus_hz(TC) /
	 TC_WAVEFORM_DIVISOR) /
	 TC_WAVEFORM_FREQUENCY;
	 tc_write_rc(TC, TC_CHANNEL_WAVEFORM, rc);
   813f4:	f44f 7224 	mov.w	r2, #656	; 0x290
   813f8:	2100      	movs	r1, #0
   813fa:	4620      	mov	r0, r4
   813fc:	4b4e      	ldr	r3, [pc, #312]	; (81538 <Taskman+0x1dc>)
   813fe:	4798      	blx	r3

	 ra = (100 - TC_WAVEFORM_DUTY_CYCLE) * rc / 100;
	 tc_write_ra(TC, TC_CHANNEL_WAVEFORM, ra);
   81400:	f240 12cb 	movw	r2, #459	; 0x1cb
   81404:	2100      	movs	r1, #0
   81406:	4620      	mov	r0, r4
   81408:	4b4c      	ldr	r3, [pc, #304]	; (8153c <Taskman+0x1e0>)
   8140a:	4798      	blx	r3

	 //Enable TC TC_CHANNEL_WAVEFORM
	 tc_start(TC, TC_CHANNEL_WAVEFORM);
   8140c:	2100      	movs	r1, #0
   8140e:	4620      	mov	r0, r4
   81410:	4b4b      	ldr	r3, [pc, #300]	; (81540 <Taskman+0x1e4>)
   81412:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   81414:	4b4b      	ldr	r3, [pc, #300]	; (81544 <Taskman+0x1e8>)
   81416:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8141a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8141e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81422:	2100      	movs	r1, #0
   81424:	f883 131b 	strb.w	r1, [r3, #795]	; 0x31b
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81428:	601a      	str	r2, [r3, #0]
		tc_enable_interrupt(TC, TC_CHANNEL_WAVEFORM, TC_IER_CPAS);
   8142a:	2204      	movs	r2, #4
   8142c:	4620      	mov	r0, r4
   8142e:	4b46      	ldr	r3, [pc, #280]	; (81548 <Taskman+0x1ec>)
   81430:	4798      	blx	r3
 }
   81432:	2000      	movs	r0, #0
   81434:	b003      	add	sp, #12
   81436:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   8143a:	b004      	add	sp, #16
   8143c:	4770      	bx	lr
		cpu_irq_enter_critical();
   8143e:	4b43      	ldr	r3, [pc, #268]	; (8154c <Taskman+0x1f0>)
   81440:	4798      	blx	r3
		if(_delay)
   81442:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   81444:	b34d      	cbz	r5, 8149a <Taskman+0x13e>
			for(k=0;(k<TASKMAN_DELAYED_TASKS_LIST_LEN)&&(dTasks[k].delay);k++);
   81446:	2300      	movs	r3, #0
   81448:	9308      	str	r3, [sp, #32]
   8144a:	4b35      	ldr	r3, [pc, #212]	; (81520 <Taskman+0x1c4>)
   8144c:	68db      	ldr	r3, [r3, #12]
   8144e:	b1ab      	cbz	r3, 8147c <Taskman+0x120>
   81450:	2301      	movs	r3, #1
   81452:	9308      	str	r3, [sp, #32]
   81454:	4a32      	ldr	r2, [pc, #200]	; (81520 <Taskman+0x1c4>)
   81456:	2000      	movs	r0, #0
   81458:	461c      	mov	r4, r3
   8145a:	69d1      	ldr	r1, [r2, #28]
   8145c:	b159      	cbz	r1, 81476 <Taskman+0x11a>
   8145e:	3301      	adds	r3, #1
   81460:	3210      	adds	r2, #16
   81462:	4620      	mov	r0, r4
   81464:	2b0a      	cmp	r3, #10
   81466:	d1f8      	bne.n	8145a <Taskman+0xfe>
			if(k==TASKMAN_DELAYED_TASKS_LIST_LEN) Error(ERR_TASKMAN_DELAYED_TASKLIST_FULL, (uint32_t)0);
   81468:	4b39      	ldr	r3, [pc, #228]	; (81550 <Taskman+0x1f4>)
   8146a:	681b      	ldr	r3, [r3, #0]
   8146c:	2100      	movs	r1, #0
   8146e:	2016      	movs	r0, #22
   81470:	4798      	blx	r3
   81472:	230a      	movs	r3, #10
   81474:	e002      	b.n	8147c <Taskman+0x120>
   81476:	b970      	cbnz	r0, 81496 <Taskman+0x13a>
   81478:	2b0a      	cmp	r3, #10
   8147a:	d0f5      	beq.n	81468 <Taskman+0x10c>
			dTasks[k].pFunc=_func;
   8147c:	4928      	ldr	r1, [pc, #160]	; (81520 <Taskman+0x1c4>)
   8147e:	011b      	lsls	r3, r3, #4
   81480:	18ca      	adds	r2, r1, r3
   81482:	9809      	ldr	r0, [sp, #36]	; 0x24
   81484:	50c8      	str	r0, [r1, r3]
			dTasks[k].sc=_sc;
   81486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81488:	6053      	str	r3, [r2, #4]
			dTasks[k].pParam=_pParam;
   8148a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8148c:	6093      	str	r3, [r2, #8]
			dTasks[k].delay=_delay;
   8148e:	60d5      	str	r5, [r2, #12]
		cpu_irq_leave_critical();
   81490:	4b30      	ldr	r3, [pc, #192]	; (81554 <Taskman+0x1f8>)
   81492:	4798      	blx	r3
		break;
   81494:	e7cd      	b.n	81432 <Taskman+0xd6>
   81496:	9308      	str	r3, [sp, #32]
   81498:	e7ee      	b.n	81478 <Taskman+0x11c>
			taskman.pPush->pFunc=_func;
   8149a:	4b1d      	ldr	r3, [pc, #116]	; (81510 <Taskman+0x1b4>)
   8149c:	681a      	ldr	r2, [r3, #0]
   8149e:	9909      	ldr	r1, [sp, #36]	; 0x24
   814a0:	6011      	str	r1, [r2, #0]
			taskman.pPush->sc=_sc;
   814a2:	681b      	ldr	r3, [r3, #0]
   814a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   814a6:	605a      	str	r2, [r3, #4]
			taskman.pPush->pParam=_pParam;
   814a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   814aa:	609a      	str	r2, [r3, #8]
			taskman.pPush++;
   814ac:	3310      	adds	r3, #16
			if(taskman.pPush>=tasks+TASKMAN_TASKS_LIST_LEN) taskman.pPush=tasks;
   814ae:	4a19      	ldr	r2, [pc, #100]	; (81514 <Taskman+0x1b8>)
   814b0:	4293      	cmp	r3, r2
   814b2:	d20c      	bcs.n	814ce <Taskman+0x172>
			taskman.pPush++;
   814b4:	4a16      	ldr	r2, [pc, #88]	; (81510 <Taskman+0x1b4>)
   814b6:	6013      	str	r3, [r2, #0]
			if(taskman.pPush==taskman.pPop) Error(ERR_TASKMAN_TASKLIST_FULL, (uint32_t)0);
   814b8:	4b15      	ldr	r3, [pc, #84]	; (81510 <Taskman+0x1b4>)
   814ba:	681a      	ldr	r2, [r3, #0]
   814bc:	685b      	ldr	r3, [r3, #4]
   814be:	429a      	cmp	r2, r3
   814c0:	d1e6      	bne.n	81490 <Taskman+0x134>
   814c2:	4b23      	ldr	r3, [pc, #140]	; (81550 <Taskman+0x1f4>)
   814c4:	681b      	ldr	r3, [r3, #0]
   814c6:	2100      	movs	r1, #0
   814c8:	2015      	movs	r0, #21
   814ca:	4798      	blx	r3
   814cc:	e7e0      	b.n	81490 <Taskman+0x134>
			if(taskman.pPush>=tasks+TASKMAN_TASKS_LIST_LEN) taskman.pPush=tasks;
   814ce:	4a12      	ldr	r2, [pc, #72]	; (81518 <Taskman+0x1bc>)
   814d0:	4b0f      	ldr	r3, [pc, #60]	; (81510 <Taskman+0x1b4>)
   814d2:	601a      	str	r2, [r3, #0]
   814d4:	e7f0      	b.n	814b8 <Taskman+0x15c>
			taskman.pPop++;
   814d6:	4c0e      	ldr	r4, [pc, #56]	; (81510 <Taskman+0x1b4>)
   814d8:	6063      	str	r3, [r4, #4]
   814da:	e75c      	b.n	81396 <Taskman+0x3a>
		for(k=0;k<TASKMAN_DELAYED_TASKS_LIST_LEN;k++)
   814dc:	3501      	adds	r5, #1
   814de:	9508      	str	r5, [sp, #32]
   814e0:	3410      	adds	r4, #16
   814e2:	2d0a      	cmp	r5, #10
   814e4:	d0a5      	beq.n	81432 <Taskman+0xd6>
			if(dTasks[k].delay)
   814e6:	68e3      	ldr	r3, [r4, #12]
   814e8:	2b00      	cmp	r3, #0
   814ea:	d0f7      	beq.n	814dc <Taskman+0x180>
				if(--dTasks[k].delay==0)
   814ec:	3b01      	subs	r3, #1
   814ee:	60e3      	str	r3, [r4, #12]
   814f0:	2b00      	cmp	r3, #0
   814f2:	d1f3      	bne.n	814dc <Taskman+0x180>
					PushTask(
   814f4:	68a3      	ldr	r3, [r4, #8]
   814f6:	6862      	ldr	r2, [r4, #4]
   814f8:	6821      	ldr	r1, [r4, #0]
   814fa:	9700      	str	r7, [sp, #0]
   814fc:	4630      	mov	r0, r6
   814fe:	f7ff ff2d 	bl	8135c <Taskman>
   81502:	e7eb      	b.n	814dc <Taskman+0x180>
		Error(ERR_TASKMAN_SWITCH_BAD_SC, sc);
   81504:	4b12      	ldr	r3, [pc, #72]	; (81550 <Taskman+0x1f4>)
   81506:	681b      	ldr	r3, [r3, #0]
   81508:	200b      	movs	r0, #11
   8150a:	4798      	blx	r3
	return 0;
   8150c:	e791      	b.n	81432 <Taskman+0xd6>
   8150e:	bf00      	nop
   81510:	20071338 	.word	0x20071338
   81514:	20071338 	.word	0x20071338
   81518:	20071298 	.word	0x20071298
   8151c:	000818e5 	.word	0x000818e5
   81520:	20071340 	.word	0x20071340
   81524:	400e1000 	.word	0x400e1000
   81528:	00081c69 	.word	0x00081c69
   8152c:	40080000 	.word	0x40080000
   81530:	0009c003 	.word	0x0009c003
   81534:	000807d9 	.word	0x000807d9
   81538:	00080801 	.word	0x00080801
   8153c:	000807f9 	.word	0x000807f9
   81540:	000807f1 	.word	0x000807f1
   81544:	e000e100 	.word	0xe000e100
   81548:	00080809 	.word	0x00080809
   8154c:	000816f9 	.word	0x000816f9
   81550:	20070538 	.word	0x20070538
   81554:	00081735 	.word	0x00081735

00081558 <TC0_Handler>:
 {
   81558:	b508      	push	{r3, lr}
	 tc_get_status(TC, TC_CHANNEL_WAVEFORM);
   8155a:	2100      	movs	r1, #0
   8155c:	4803      	ldr	r0, [pc, #12]	; (8156c <TC0_Handler+0x14>)
   8155e:	4b04      	ldr	r3, [pc, #16]	; (81570 <TC0_Handler+0x18>)
   81560:	4798      	blx	r3
	 Taskman(_TASKMAN_DELAYED_TASK_PROC);
   81562:	2001      	movs	r0, #1
   81564:	4b03      	ldr	r3, [pc, #12]	; (81574 <TC0_Handler+0x1c>)
   81566:	4798      	blx	r3
   81568:	bd08      	pop	{r3, pc}
   8156a:	bf00      	nop
   8156c:	40080000 	.word	0x40080000
   81570:	00080811 	.word	0x00080811
   81574:	0008135d 	.word	0x0008135d

00081578 <Appli>:
	 100,500,100,500,100,2200,0
 };


uint32_t Appli(uint32_t sc,...)
{
   81578:	b40f      	push	{r0, r1, r2, r3}
   8157a:	b510      	push	{r4, lr}
   8157c:	b082      	sub	sp, #8
	switch(sc)
   8157e:	9904      	ldr	r1, [sp, #16]
   81580:	2964      	cmp	r1, #100	; 0x64
   81582:	d006      	beq.n	81592 <Appli+0x1a>
   81584:	2966      	cmp	r1, #102	; 0x66
   81586:	d01e      	beq.n	815c6 <Appli+0x4e>

#undef k
		break;

	default:
		Error(ERR_APPLI_SWITHC_BAD_SC, sc);
   81588:	4b1d      	ldr	r3, [pc, #116]	; (81600 <Appli+0x88>)
   8158a:	681b      	ldr	r3, [r3, #0]
   8158c:	200f      	movs	r0, #15
   8158e:	4798      	blx	r3
		break;
   81590:	e014      	b.n	815bc <Appli+0x44>
		gpio_configure_pin(PIO_PC1_IDX, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   81592:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81596:	2041      	movs	r0, #65	; 0x41
   81598:	4c1a      	ldr	r4, [pc, #104]	; (81604 <Appli+0x8c>)
   8159a:	47a0      	blx	r4
		gpio_configure_pin(PIO_PC2_IDX, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   8159c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   815a0:	2042      	movs	r0, #66	; 0x42
   815a2:	47a0      	blx	r4
		Lcd(LCD_NEW);
   815a4:	2064      	movs	r0, #100	; 0x64
   815a6:	4b18      	ldr	r3, [pc, #96]	; (81608 <Appli+0x90>)
   815a8:	4798      	blx	r3
		PushTask(Appli, APPLI_RUN, 0, 800);
   815aa:	f44f 7348 	mov.w	r3, #800	; 0x320
   815ae:	9300      	str	r3, [sp, #0]
   815b0:	2300      	movs	r3, #0
   815b2:	2266      	movs	r2, #102	; 0x66
   815b4:	4915      	ldr	r1, [pc, #84]	; (8160c <Appli+0x94>)
   815b6:	4610      	mov	r0, r2
   815b8:	4c15      	ldr	r4, [pc, #84]	; (81610 <Appli+0x98>)
   815ba:	47a0      	blx	r4
	}
   815bc:	b002      	add	sp, #8
   815be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   815c2:	b004      	add	sp, #16
   815c4:	4770      	bx	lr
		k++; if(flashSequApp[k]==0) k=0;
   815c6:	9c05      	ldr	r4, [sp, #20]
   815c8:	3401      	adds	r4, #1
   815ca:	9405      	str	r4, [sp, #20]
   815cc:	4b11      	ldr	r3, [pc, #68]	; (81614 <Appli+0x9c>)
   815ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   815d2:	b133      	cbz	r3, 815e2 <Appli+0x6a>
		if(k%2==0) gpio_set_pin_high(PIO_PC1_IDX);
   815d4:	f014 0f01 	tst.w	r4, #1
   815d8:	d004      	beq.n	815e4 <Appli+0x6c>
		else gpio_set_pin_low(PIO_PC1_IDX);
   815da:	2041      	movs	r0, #65	; 0x41
   815dc:	4b0e      	ldr	r3, [pc, #56]	; (81618 <Appli+0xa0>)
   815de:	4798      	blx	r3
   815e0:	e003      	b.n	815ea <Appli+0x72>
		if(k%2==0) gpio_set_pin_high(PIO_PC1_IDX);
   815e2:	2400      	movs	r4, #0
   815e4:	2041      	movs	r0, #65	; 0x41
   815e6:	4b0d      	ldr	r3, [pc, #52]	; (8161c <Appli+0xa4>)
   815e8:	4798      	blx	r3
		PushTask(Appli,APPLI_RUN,k,flashSequApp[k]);
   815ea:	4b0a      	ldr	r3, [pc, #40]	; (81614 <Appli+0x9c>)
   815ec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   815f0:	9300      	str	r3, [sp, #0]
   815f2:	4623      	mov	r3, r4
   815f4:	2266      	movs	r2, #102	; 0x66
   815f6:	4905      	ldr	r1, [pc, #20]	; (8160c <Appli+0x94>)
   815f8:	4610      	mov	r0, r2
   815fa:	4c05      	ldr	r4, [pc, #20]	; (81610 <Appli+0x98>)
   815fc:	47a0      	blx	r4
		break;
   815fe:	e7dd      	b.n	815bc <Appli+0x44>
   81600:	20070538 	.word	0x20070538
   81604:	00081905 	.word	0x00081905
   81608:	00080395 	.word	0x00080395
   8160c:	00081579 	.word	0x00081579
   81610:	0008135d 	.word	0x0008135d
   81614:	00086b74 	.word	0x00086b74
   81618:	000818cb 	.word	0x000818cb
   8161c:	000818b1 	.word	0x000818b1

00081620 <main>:
void Prompt(uint32_t sc, uint32_t i);

char buf[256];

int main (void)
{
   81620:	b500      	push	{lr}
   81622:	b083      	sub	sp, #12
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81624:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   81626:	f3bf 8f5f 	dmb	sy
	/* Insert system clock initialization code here (sysclk_init()). */

	cpu_irq_disable();
   8162a:	4e12      	ldr	r6, [pc, #72]	; (81674 <main+0x54>)
   8162c:	2400      	movs	r4, #0
   8162e:	7034      	strb	r4, [r6, #0]
	sysclk_init();
   81630:	4b11      	ldr	r3, [pc, #68]	; (81678 <main+0x58>)
   81632:	4798      	blx	r3
	board_init();
   81634:	4b11      	ldr	r3, [pc, #68]	; (8167c <main+0x5c>)
   81636:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());
	//////////////////////////////////////////////////////////////////
	
	Taskman(TASKMAN_NEW);
   81638:	2064      	movs	r0, #100	; 0x64
   8163a:	4d11      	ldr	r5, [pc, #68]	; (81680 <main+0x60>)
   8163c:	47a8      	blx	r5
		
	PushTask(Shell,SHELL_NEW, 0, 0);
   8163e:	9400      	str	r4, [sp, #0]
   81640:	4623      	mov	r3, r4
   81642:	2264      	movs	r2, #100	; 0x64
   81644:	490f      	ldr	r1, [pc, #60]	; (81684 <main+0x64>)
   81646:	2066      	movs	r0, #102	; 0x66
   81648:	47a8      	blx	r5
	PushTask(Menu, MENU_NEW,0 , 0);
   8164a:	9400      	str	r4, [sp, #0]
   8164c:	4623      	mov	r3, r4
   8164e:	2264      	movs	r2, #100	; 0x64
   81650:	490d      	ldr	r1, [pc, #52]	; (81688 <main+0x68>)
   81652:	2066      	movs	r0, #102	; 0x66
   81654:	47a8      	blx	r5

	Putstr("\r\n\n\tATMEL ATSAM3U STARTED\r\n\n");
   81656:	490d      	ldr	r1, [pc, #52]	; (8168c <main+0x6c>)
   81658:	2067      	movs	r0, #103	; 0x67
   8165a:	4b0d      	ldr	r3, [pc, #52]	; (81690 <main+0x70>)
   8165c:	4798      	blx	r3
	

	//PushTask(Sablier, SABLIER_NEW, 0, 0);
	//PushTask(Prompt, 0, 0, 800);
	
	cpu_irq_enable();
   8165e:	2301      	movs	r3, #1
   81660:	7033      	strb	r3, [r6, #0]
   81662:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81666:	b662      	cpsie	i
	
	for(;;)
	{
	

		PopTask();
   81668:	2567      	movs	r5, #103	; 0x67
   8166a:	4c05      	ldr	r4, [pc, #20]	; (81680 <main+0x60>)
   8166c:	4628      	mov	r0, r5
   8166e:	47a0      	blx	r4
   81670:	e7fc      	b.n	8166c <main+0x4c>
   81672:	bf00      	nop
   81674:	20070588 	.word	0x20070588
   81678:	00081695 	.word	0x00081695
   8167c:	00081761 	.word	0x00081761
   81680:	0008135d 	.word	0x0008135d
   81684:	00080aad 	.word	0x00080aad
   81688:	000805d5 	.word	0x000805d5
   8168c:	00086b90 	.word	0x00086b90
   81690:	00081145 	.word	0x00081145

00081694 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81694:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81696:	480e      	ldr	r0, [pc, #56]	; (816d0 <sysclk_init+0x3c>)
   81698:	4b0e      	ldr	r3, [pc, #56]	; (816d4 <sysclk_init+0x40>)
   8169a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8169c:	213e      	movs	r1, #62	; 0x3e
   8169e:	2000      	movs	r0, #0
   816a0:	4b0d      	ldr	r3, [pc, #52]	; (816d8 <sysclk_init+0x44>)
   816a2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   816a4:	4c0d      	ldr	r4, [pc, #52]	; (816dc <sysclk_init+0x48>)
   816a6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   816a8:	2800      	cmp	r0, #0
   816aa:	d0fc      	beq.n	816a6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   816ac:	4b0c      	ldr	r3, [pc, #48]	; (816e0 <sysclk_init+0x4c>)
   816ae:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   816b0:	4a0c      	ldr	r2, [pc, #48]	; (816e4 <sysclk_init+0x50>)
   816b2:	4b0d      	ldr	r3, [pc, #52]	; (816e8 <sysclk_init+0x54>)
   816b4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   816b6:	4c0d      	ldr	r4, [pc, #52]	; (816ec <sysclk_init+0x58>)
   816b8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   816ba:	2800      	cmp	r0, #0
   816bc:	d0fc      	beq.n	816b8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   816be:	2010      	movs	r0, #16
   816c0:	4b0b      	ldr	r3, [pc, #44]	; (816f0 <sysclk_init+0x5c>)
   816c2:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   816c4:	4b0b      	ldr	r3, [pc, #44]	; (816f4 <sysclk_init+0x60>)
   816c6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   816c8:	4801      	ldr	r0, [pc, #4]	; (816d0 <sysclk_init+0x3c>)
   816ca:	4b02      	ldr	r3, [pc, #8]	; (816d4 <sysclk_init+0x40>)
   816cc:	4798      	blx	r3
   816ce:	bd10      	pop	{r4, pc}
   816d0:	0501bd00 	.word	0x0501bd00
   816d4:	200700b1 	.word	0x200700b1
   816d8:	00081be5 	.word	0x00081be5
   816dc:	00081c39 	.word	0x00081c39
   816e0:	00081c49 	.word	0x00081c49
   816e4:	200d3f01 	.word	0x200d3f01
   816e8:	400e0600 	.word	0x400e0600
   816ec:	00081c59 	.word	0x00081c59
   816f0:	00081b81 	.word	0x00081b81
   816f4:	00081d59 	.word	0x00081d59

000816f8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   816f8:	4b0b      	ldr	r3, [pc, #44]	; (81728 <cpu_irq_enter_critical+0x30>)
   816fa:	681b      	ldr	r3, [r3, #0]
   816fc:	b92b      	cbnz	r3, 8170a <cpu_irq_enter_critical+0x12>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   816fe:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   81702:	b13b      	cbz	r3, 81714 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   81704:	2200      	movs	r2, #0
   81706:	4b09      	ldr	r3, [pc, #36]	; (8172c <cpu_irq_enter_critical+0x34>)
   81708:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   8170a:	4a07      	ldr	r2, [pc, #28]	; (81728 <cpu_irq_enter_critical+0x30>)
   8170c:	6813      	ldr	r3, [r2, #0]
   8170e:	3301      	adds	r3, #1
   81710:	6013      	str	r3, [r2, #0]
   81712:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
   81714:	b672      	cpsid	i
   81716:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   8171a:	2200      	movs	r2, #0
   8171c:	4b04      	ldr	r3, [pc, #16]	; (81730 <cpu_irq_enter_critical+0x38>)
   8171e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   81720:	2201      	movs	r2, #1
   81722:	4b02      	ldr	r3, [pc, #8]	; (8172c <cpu_irq_enter_critical+0x34>)
   81724:	701a      	strb	r2, [r3, #0]
   81726:	e7f0      	b.n	8170a <cpu_irq_enter_critical+0x12>
   81728:	20070f60 	.word	0x20070f60
   8172c:	20070f64 	.word	0x20070f64
   81730:	20070588 	.word	0x20070588

00081734 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   81734:	4b07      	ldr	r3, [pc, #28]	; (81754 <cpu_irq_leave_critical+0x20>)
   81736:	681a      	ldr	r2, [r3, #0]
   81738:	3a01      	subs	r2, #1
   8173a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   8173c:	681b      	ldr	r3, [r3, #0]
   8173e:	b943      	cbnz	r3, 81752 <cpu_irq_leave_critical+0x1e>
   81740:	4b05      	ldr	r3, [pc, #20]	; (81758 <cpu_irq_leave_critical+0x24>)
   81742:	781b      	ldrb	r3, [r3, #0]
   81744:	b12b      	cbz	r3, 81752 <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   81746:	2201      	movs	r2, #1
   81748:	4b04      	ldr	r3, [pc, #16]	; (8175c <cpu_irq_leave_critical+0x28>)
   8174a:	701a      	strb	r2, [r3, #0]
   8174c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81750:	b662      	cpsie	i
   81752:	4770      	bx	lr
   81754:	20070f60 	.word	0x20070f60
   81758:	20070f64 	.word	0x20070f64
   8175c:	20070588 	.word	0x20070588

00081760 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81760:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81762:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81766:	4b16      	ldr	r3, [pc, #88]	; (817c0 <board_init+0x60>)
   81768:	605a      	str	r2, [r3, #4]
   8176a:	200b      	movs	r0, #11
   8176c:	4c15      	ldr	r4, [pc, #84]	; (817c4 <board_init+0x64>)
   8176e:	47a0      	blx	r4
   81770:	200c      	movs	r0, #12
   81772:	47a0      	blx	r4
   81774:	200d      	movs	r0, #13
   81776:	47a0      	blx	r4
   81778:	200e      	movs	r0, #14
   8177a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8177c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81780:	203b      	movs	r0, #59	; 0x3b
   81782:	4c11      	ldr	r4, [pc, #68]	; (817c8 <board_init+0x68>)
   81784:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81786:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8178a:	2055      	movs	r0, #85	; 0x55
   8178c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8178e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81792:	2056      	movs	r0, #86	; 0x56
   81794:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81796:	490d      	ldr	r1, [pc, #52]	; (817cc <board_init+0x6c>)
   81798:	2068      	movs	r0, #104	; 0x68
   8179a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8179c:	490c      	ldr	r1, [pc, #48]	; (817d0 <board_init+0x70>)
   8179e:	205c      	movs	r0, #92	; 0x5c
   817a0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   817a2:	4a0c      	ldr	r2, [pc, #48]	; (817d4 <board_init+0x74>)
   817a4:	f44f 7140 	mov.w	r1, #768	; 0x300
   817a8:	480b      	ldr	r0, [pc, #44]	; (817d8 <board_init+0x78>)
   817aa:	4b0c      	ldr	r3, [pc, #48]	; (817dc <board_init+0x7c>)
   817ac:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   817ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   817b2:	202b      	movs	r0, #43	; 0x2b
   817b4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   817b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   817ba:	202a      	movs	r0, #42	; 0x2a
   817bc:	47a0      	blx	r4
   817be:	bd10      	pop	{r4, pc}
   817c0:	400e1a50 	.word	0x400e1a50
   817c4:	00081c69 	.word	0x00081c69
   817c8:	00081905 	.word	0x00081905
   817cc:	28000079 	.word	0x28000079
   817d0:	28000001 	.word	0x28000001
   817d4:	08000001 	.word	0x08000001
   817d8:	400e0e00 	.word	0x400e0e00
   817dc:	000819d5 	.word	0x000819d5

000817e0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   817e0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   817e2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   817e6:	d016      	beq.n	81816 <pio_set_peripheral+0x36>
   817e8:	d80b      	bhi.n	81802 <pio_set_peripheral+0x22>
   817ea:	b149      	cbz	r1, 81800 <pio_set_peripheral+0x20>
   817ec:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   817f0:	d105      	bne.n	817fe <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   817f2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   817f4:	6f01      	ldr	r1, [r0, #112]	; 0x70
   817f6:	400b      	ands	r3, r1
   817f8:	ea23 0302 	bic.w	r3, r3, r2
   817fc:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   817fe:	6042      	str	r2, [r0, #4]
   81800:	4770      	bx	lr
	switch (ul_type) {
   81802:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81806:	d0fb      	beq.n	81800 <pio_set_peripheral+0x20>
   81808:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8180c:	d0f8      	beq.n	81800 <pio_set_peripheral+0x20>
   8180e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81812:	d1f4      	bne.n	817fe <pio_set_peripheral+0x1e>
   81814:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81816:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81818:	4313      	orrs	r3, r2
   8181a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8181c:	e7ef      	b.n	817fe <pio_set_peripheral+0x1e>

0008181e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8181e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81820:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81824:	bf14      	ite	ne
   81826:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81828:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8182a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8182e:	bf14      	ite	ne
   81830:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   81832:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81834:	f012 0f02 	tst.w	r2, #2
   81838:	d107      	bne.n	8184a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8183a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8183e:	bf18      	it	ne
   81840:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81844:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81846:	6001      	str	r1, [r0, #0]
   81848:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8184a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8184e:	e7f9      	b.n	81844 <pio_set_input+0x26>

00081850 <pio_set_output>:
{
   81850:	b410      	push	{r4}
   81852:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81854:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81856:	b944      	cbnz	r4, 8186a <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   81858:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8185a:	b143      	cbz	r3, 8186e <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   8185c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8185e:	b942      	cbnz	r2, 81872 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   81860:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   81862:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81864:	6001      	str	r1, [r0, #0]
}
   81866:	bc10      	pop	{r4}
   81868:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8186a:	6641      	str	r1, [r0, #100]	; 0x64
   8186c:	e7f5      	b.n	8185a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8186e:	6541      	str	r1, [r0, #84]	; 0x54
   81870:	e7f5      	b.n	8185e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   81872:	6301      	str	r1, [r0, #48]	; 0x30
   81874:	e7f5      	b.n	81862 <pio_set_output+0x12>

00081876 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   81876:	f012 0f10 	tst.w	r2, #16
   8187a:	d010      	beq.n	8189e <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   8187c:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   81880:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   81884:	bf14      	ite	ne
   81886:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   8188a:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   8188e:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   81892:	bf14      	ite	ne
   81894:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   81898:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   8189c:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   8189e:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   818a2:	4770      	bx	lr

000818a4 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   818a4:	6401      	str	r1, [r0, #64]	; 0x40
   818a6:	4770      	bx	lr

000818a8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   818a8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   818aa:	4770      	bx	lr

000818ac <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   818ac:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   818ae:	4770      	bx	lr

000818b0 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   818b0:	0943      	lsrs	r3, r0, #5
   818b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   818b6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   818ba:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   818bc:	f000 001f 	and.w	r0, r0, #31
   818c0:	2201      	movs	r2, #1
   818c2:	fa02 f000 	lsl.w	r0, r2, r0
   818c6:	6318      	str	r0, [r3, #48]	; 0x30
   818c8:	4770      	bx	lr

000818ca <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   818ca:	0943      	lsrs	r3, r0, #5
   818cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   818d0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   818d4:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   818d6:	f000 001f 	and.w	r0, r0, #31
   818da:	2201      	movs	r2, #1
   818dc:	fa02 f000 	lsl.w	r0, r2, r0
   818e0:	6358      	str	r0, [r3, #52]	; 0x34
   818e2:	4770      	bx	lr

000818e4 <pio_toggle_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   818e4:	0943      	lsrs	r3, r0, #5
   818e6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   818ea:	f203 7307 	addw	r3, r3, #1799	; 0x707
   818ee:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   818f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
   818f2:	f000 021f 	and.w	r2, r0, #31
   818f6:	2001      	movs	r0, #1
   818f8:	4090      	lsls	r0, r2
   818fa:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   818fc:	bf14      	ite	ne
   818fe:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81900:	6318      	streq	r0, [r3, #48]	; 0x30
   81902:	4770      	bx	lr

00081904 <pio_configure_pin>:
{
   81904:	b570      	push	{r4, r5, r6, lr}
   81906:	b082      	sub	sp, #8
   81908:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8190a:	0943      	lsrs	r3, r0, #5
   8190c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81910:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81914:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81916:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8191a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8191e:	d031      	beq.n	81984 <pio_configure_pin+0x80>
   81920:	d816      	bhi.n	81950 <pio_configure_pin+0x4c>
   81922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81926:	d01b      	beq.n	81960 <pio_configure_pin+0x5c>
   81928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8192c:	d116      	bne.n	8195c <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8192e:	f000 001f 	and.w	r0, r0, #31
   81932:	2601      	movs	r6, #1
   81934:	4086      	lsls	r6, r0
   81936:	4632      	mov	r2, r6
   81938:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8193c:	4620      	mov	r0, r4
   8193e:	4b22      	ldr	r3, [pc, #136]	; (819c8 <pio_configure_pin+0xc4>)
   81940:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81942:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81946:	bf14      	ite	ne
   81948:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8194a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8194c:	2001      	movs	r0, #1
   8194e:	e017      	b.n	81980 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   81950:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81954:	d021      	beq.n	8199a <pio_configure_pin+0x96>
   81956:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8195a:	d01e      	beq.n	8199a <pio_configure_pin+0x96>
		return 0;
   8195c:	2000      	movs	r0, #0
   8195e:	e00f      	b.n	81980 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81960:	f000 001f 	and.w	r0, r0, #31
   81964:	2601      	movs	r6, #1
   81966:	4086      	lsls	r6, r0
   81968:	4632      	mov	r2, r6
   8196a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8196e:	4620      	mov	r0, r4
   81970:	4b15      	ldr	r3, [pc, #84]	; (819c8 <pio_configure_pin+0xc4>)
   81972:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81974:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81978:	bf14      	ite	ne
   8197a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8197c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8197e:	2001      	movs	r0, #1
}
   81980:	b002      	add	sp, #8
   81982:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81984:	f000 011f 	and.w	r1, r0, #31
   81988:	2601      	movs	r6, #1
   8198a:	462a      	mov	r2, r5
   8198c:	fa06 f101 	lsl.w	r1, r6, r1
   81990:	4620      	mov	r0, r4
   81992:	4b0e      	ldr	r3, [pc, #56]	; (819cc <pio_configure_pin+0xc8>)
   81994:	4798      	blx	r3
	return 1;
   81996:	4630      	mov	r0, r6
		break;
   81998:	e7f2      	b.n	81980 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8199a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8199e:	f000 011f 	and.w	r1, r0, #31
   819a2:	2601      	movs	r6, #1
   819a4:	ea05 0306 	and.w	r3, r5, r6
   819a8:	9300      	str	r3, [sp, #0]
   819aa:	f3c5 0380 	ubfx	r3, r5, #2, #1
   819ae:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   819b2:	bf14      	ite	ne
   819b4:	2200      	movne	r2, #0
   819b6:	2201      	moveq	r2, #1
   819b8:	fa06 f101 	lsl.w	r1, r6, r1
   819bc:	4620      	mov	r0, r4
   819be:	4c04      	ldr	r4, [pc, #16]	; (819d0 <pio_configure_pin+0xcc>)
   819c0:	47a0      	blx	r4
	return 1;
   819c2:	4630      	mov	r0, r6
		break;
   819c4:	e7dc      	b.n	81980 <pio_configure_pin+0x7c>
   819c6:	bf00      	nop
   819c8:	000817e1 	.word	0x000817e1
   819cc:	0008181f 	.word	0x0008181f
   819d0:	00081851 	.word	0x00081851

000819d4 <pio_configure_pin_group>:
{
   819d4:	b570      	push	{r4, r5, r6, lr}
   819d6:	b082      	sub	sp, #8
   819d8:	4605      	mov	r5, r0
   819da:	460e      	mov	r6, r1
   819dc:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   819de:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   819e2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   819e6:	d027      	beq.n	81a38 <pio_configure_pin_group+0x64>
   819e8:	d811      	bhi.n	81a0e <pio_configure_pin_group+0x3a>
   819ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   819ee:	d016      	beq.n	81a1e <pio_configure_pin_group+0x4a>
   819f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   819f4:	d111      	bne.n	81a1a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   819f6:	460a      	mov	r2, r1
   819f8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   819fc:	4b19      	ldr	r3, [pc, #100]	; (81a64 <pio_configure_pin_group+0x90>)
   819fe:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81a00:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81a04:	bf14      	ite	ne
   81a06:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81a08:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81a0a:	2001      	movs	r0, #1
   81a0c:	e012      	b.n	81a34 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   81a0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81a12:	d015      	beq.n	81a40 <pio_configure_pin_group+0x6c>
   81a14:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81a18:	d012      	beq.n	81a40 <pio_configure_pin_group+0x6c>
		return 0;
   81a1a:	2000      	movs	r0, #0
   81a1c:	e00a      	b.n	81a34 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81a1e:	460a      	mov	r2, r1
   81a20:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a24:	4b0f      	ldr	r3, [pc, #60]	; (81a64 <pio_configure_pin_group+0x90>)
   81a26:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81a28:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81a2c:	bf14      	ite	ne
   81a2e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81a30:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81a32:	2001      	movs	r0, #1
}
   81a34:	b002      	add	sp, #8
   81a36:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   81a38:	4b0b      	ldr	r3, [pc, #44]	; (81a68 <pio_configure_pin_group+0x94>)
   81a3a:	4798      	blx	r3
	return 1;
   81a3c:	2001      	movs	r0, #1
		break;
   81a3e:	e7f9      	b.n	81a34 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81a40:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   81a44:	f004 0301 	and.w	r3, r4, #1
   81a48:	9300      	str	r3, [sp, #0]
   81a4a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81a4e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81a52:	bf14      	ite	ne
   81a54:	2200      	movne	r2, #0
   81a56:	2201      	moveq	r2, #1
   81a58:	4631      	mov	r1, r6
   81a5a:	4628      	mov	r0, r5
   81a5c:	4c03      	ldr	r4, [pc, #12]	; (81a6c <pio_configure_pin_group+0x98>)
   81a5e:	47a0      	blx	r4
	return 1;
   81a60:	2001      	movs	r0, #1
		break;
   81a62:	e7e7      	b.n	81a34 <pio_configure_pin_group+0x60>
   81a64:	000817e1 	.word	0x000817e1
   81a68:	0008181f 	.word	0x0008181f
   81a6c:	00081851 	.word	0x00081851

00081a70 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81a74:	4604      	mov	r4, r0
   81a76:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81a78:	4b0e      	ldr	r3, [pc, #56]	; (81ab4 <pio_handler_process+0x44>)
   81a7a:	4798      	blx	r3
   81a7c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81a7e:	4620      	mov	r0, r4
   81a80:	4b0d      	ldr	r3, [pc, #52]	; (81ab8 <pio_handler_process+0x48>)
   81a82:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81a84:	4005      	ands	r5, r0
   81a86:	d013      	beq.n	81ab0 <pio_handler_process+0x40>
   81a88:	4c0c      	ldr	r4, [pc, #48]	; (81abc <pio_handler_process+0x4c>)
   81a8a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   81a8e:	e003      	b.n	81a98 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81a90:	42b4      	cmp	r4, r6
   81a92:	d00d      	beq.n	81ab0 <pio_handler_process+0x40>
   81a94:	3410      	adds	r4, #16
		while (status != 0) {
   81a96:	b15d      	cbz	r5, 81ab0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   81a98:	6820      	ldr	r0, [r4, #0]
   81a9a:	4540      	cmp	r0, r8
   81a9c:	d1f8      	bne.n	81a90 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81a9e:	6861      	ldr	r1, [r4, #4]
   81aa0:	4229      	tst	r1, r5
   81aa2:	d0f5      	beq.n	81a90 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81aa4:	68e3      	ldr	r3, [r4, #12]
   81aa6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81aa8:	6863      	ldr	r3, [r4, #4]
   81aaa:	ea25 0503 	bic.w	r5, r5, r3
   81aae:	e7ef      	b.n	81a90 <pio_handler_process+0x20>
   81ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ab4:	000818a9 	.word	0x000818a9
   81ab8:	000818ad 	.word	0x000818ad
   81abc:	20070f68 	.word	0x20070f68

00081ac0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   81ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   81ac2:	4c18      	ldr	r4, [pc, #96]	; (81b24 <pio_handler_set+0x64>)
   81ac4:	6826      	ldr	r6, [r4, #0]
   81ac6:	2e06      	cmp	r6, #6
   81ac8:	d829      	bhi.n	81b1e <pio_handler_set+0x5e>
   81aca:	f04f 0c00 	mov.w	ip, #0
   81ace:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   81ad0:	4f15      	ldr	r7, [pc, #84]	; (81b28 <pio_handler_set+0x68>)
   81ad2:	e004      	b.n	81ade <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   81ad4:	3401      	adds	r4, #1
   81ad6:	b2e4      	uxtb	r4, r4
   81ad8:	46a4      	mov	ip, r4
   81ada:	42a6      	cmp	r6, r4
   81adc:	d309      	bcc.n	81af2 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   81ade:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   81ae0:	0125      	lsls	r5, r4, #4
   81ae2:	597d      	ldr	r5, [r7, r5]
   81ae4:	428d      	cmp	r5, r1
   81ae6:	d1f5      	bne.n	81ad4 <pio_handler_set+0x14>
   81ae8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   81aec:	686d      	ldr	r5, [r5, #4]
   81aee:	4295      	cmp	r5, r2
   81af0:	d1f0      	bne.n	81ad4 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   81af2:	4d0d      	ldr	r5, [pc, #52]	; (81b28 <pio_handler_set+0x68>)
   81af4:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   81af8:	eb05 040e 	add.w	r4, r5, lr
   81afc:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   81b00:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   81b02:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   81b04:	9906      	ldr	r1, [sp, #24]
   81b06:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   81b08:	3601      	adds	r6, #1
   81b0a:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   81b0c:	bf04      	itt	eq
   81b0e:	4905      	ldreq	r1, [pc, #20]	; (81b24 <pio_handler_set+0x64>)
   81b10:	600e      	streq	r6, [r1, #0]
   81b12:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   81b14:	461a      	mov	r2, r3
   81b16:	4b05      	ldr	r3, [pc, #20]	; (81b2c <pio_handler_set+0x6c>)
   81b18:	4798      	blx	r3

	return 0;
   81b1a:	2000      	movs	r0, #0
   81b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   81b1e:	2001      	movs	r0, #1
}
   81b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81b22:	bf00      	nop
   81b24:	20070fd8 	.word	0x20070fd8
   81b28:	20070f68 	.word	0x20070f68
   81b2c:	00081877 	.word	0x00081877

00081b30 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81b30:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81b32:	210b      	movs	r1, #11
   81b34:	4801      	ldr	r0, [pc, #4]	; (81b3c <PIOA_Handler+0xc>)
   81b36:	4b02      	ldr	r3, [pc, #8]	; (81b40 <PIOA_Handler+0x10>)
   81b38:	4798      	blx	r3
   81b3a:	bd08      	pop	{r3, pc}
   81b3c:	400e0e00 	.word	0x400e0e00
   81b40:	00081a71 	.word	0x00081a71

00081b44 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81b44:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81b46:	210c      	movs	r1, #12
   81b48:	4801      	ldr	r0, [pc, #4]	; (81b50 <PIOB_Handler+0xc>)
   81b4a:	4b02      	ldr	r3, [pc, #8]	; (81b54 <PIOB_Handler+0x10>)
   81b4c:	4798      	blx	r3
   81b4e:	bd08      	pop	{r3, pc}
   81b50:	400e1000 	.word	0x400e1000
   81b54:	00081a71 	.word	0x00081a71

00081b58 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81b58:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81b5a:	210d      	movs	r1, #13
   81b5c:	4801      	ldr	r0, [pc, #4]	; (81b64 <PIOC_Handler+0xc>)
   81b5e:	4b02      	ldr	r3, [pc, #8]	; (81b68 <PIOC_Handler+0x10>)
   81b60:	4798      	blx	r3
   81b62:	bd08      	pop	{r3, pc}
   81b64:	400e1200 	.word	0x400e1200
   81b68:	00081a71 	.word	0x00081a71

00081b6c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81b6c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81b6e:	210e      	movs	r1, #14
   81b70:	4801      	ldr	r0, [pc, #4]	; (81b78 <PIOD_Handler+0xc>)
   81b72:	4b02      	ldr	r3, [pc, #8]	; (81b7c <PIOD_Handler+0x10>)
   81b74:	4798      	blx	r3
   81b76:	bd08      	pop	{r3, pc}
   81b78:	400e1400 	.word	0x400e1400
   81b7c:	00081a71 	.word	0x00081a71

00081b80 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81b80:	4a17      	ldr	r2, [pc, #92]	; (81be0 <pmc_switch_mck_to_pllack+0x60>)
   81b82:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81b88:	4318      	orrs	r0, r3
   81b8a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81b8c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81b8e:	f013 0f08 	tst.w	r3, #8
   81b92:	d10a      	bne.n	81baa <pmc_switch_mck_to_pllack+0x2a>
   81b94:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81b98:	4911      	ldr	r1, [pc, #68]	; (81be0 <pmc_switch_mck_to_pllack+0x60>)
   81b9a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81b9c:	f012 0f08 	tst.w	r2, #8
   81ba0:	d103      	bne.n	81baa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81ba2:	3b01      	subs	r3, #1
   81ba4:	d1f9      	bne.n	81b9a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   81ba6:	2001      	movs	r0, #1
   81ba8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81baa:	4a0d      	ldr	r2, [pc, #52]	; (81be0 <pmc_switch_mck_to_pllack+0x60>)
   81bac:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81bae:	f023 0303 	bic.w	r3, r3, #3
   81bb2:	f043 0302 	orr.w	r3, r3, #2
   81bb6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81bb8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81bba:	f013 0f08 	tst.w	r3, #8
   81bbe:	d10a      	bne.n	81bd6 <pmc_switch_mck_to_pllack+0x56>
   81bc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81bc4:	4906      	ldr	r1, [pc, #24]	; (81be0 <pmc_switch_mck_to_pllack+0x60>)
   81bc6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81bc8:	f012 0f08 	tst.w	r2, #8
   81bcc:	d105      	bne.n	81bda <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81bce:	3b01      	subs	r3, #1
   81bd0:	d1f9      	bne.n	81bc6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   81bd2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81bd4:	4770      	bx	lr
	return 0;
   81bd6:	2000      	movs	r0, #0
   81bd8:	4770      	bx	lr
   81bda:	2000      	movs	r0, #0
   81bdc:	4770      	bx	lr
   81bde:	bf00      	nop
   81be0:	400e0600 	.word	0x400e0600

00081be4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81be4:	b9c8      	cbnz	r0, 81c1a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81be6:	4a11      	ldr	r2, [pc, #68]	; (81c2c <pmc_switch_mainck_to_xtal+0x48>)
   81be8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81bea:	0209      	lsls	r1, r1, #8
   81bec:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81bee:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81bf2:	f023 0303 	bic.w	r3, r3, #3
   81bf6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81bfa:	f043 0301 	orr.w	r3, r3, #1
   81bfe:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81c00:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81c02:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81c04:	f013 0f01 	tst.w	r3, #1
   81c08:	d0fb      	beq.n	81c02 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81c0a:	4a08      	ldr	r2, [pc, #32]	; (81c2c <pmc_switch_mainck_to_xtal+0x48>)
   81c0c:	6a13      	ldr	r3, [r2, #32]
   81c0e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81c16:	6213      	str	r3, [r2, #32]
   81c18:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81c1a:	4904      	ldr	r1, [pc, #16]	; (81c2c <pmc_switch_mainck_to_xtal+0x48>)
   81c1c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81c1e:	4a04      	ldr	r2, [pc, #16]	; (81c30 <pmc_switch_mainck_to_xtal+0x4c>)
   81c20:	401a      	ands	r2, r3
   81c22:	4b04      	ldr	r3, [pc, #16]	; (81c34 <pmc_switch_mainck_to_xtal+0x50>)
   81c24:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81c26:	620b      	str	r3, [r1, #32]
   81c28:	4770      	bx	lr
   81c2a:	bf00      	nop
   81c2c:	400e0600 	.word	0x400e0600
   81c30:	fec8fffc 	.word	0xfec8fffc
   81c34:	01370002 	.word	0x01370002

00081c38 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81c38:	4b02      	ldr	r3, [pc, #8]	; (81c44 <pmc_osc_is_ready_mainck+0xc>)
   81c3a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81c3c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81c40:	4770      	bx	lr
   81c42:	bf00      	nop
   81c44:	400e0600 	.word	0x400e0600

00081c48 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81c48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81c4c:	4b01      	ldr	r3, [pc, #4]	; (81c54 <pmc_disable_pllack+0xc>)
   81c4e:	629a      	str	r2, [r3, #40]	; 0x28
   81c50:	4770      	bx	lr
   81c52:	bf00      	nop
   81c54:	400e0600 	.word	0x400e0600

00081c58 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81c58:	4b02      	ldr	r3, [pc, #8]	; (81c64 <pmc_is_locked_pllack+0xc>)
   81c5a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81c5c:	f000 0002 	and.w	r0, r0, #2
   81c60:	4770      	bx	lr
   81c62:	bf00      	nop
   81c64:	400e0600 	.word	0x400e0600

00081c68 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81c68:	282c      	cmp	r0, #44	; 0x2c
   81c6a:	d81e      	bhi.n	81caa <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   81c6c:	281f      	cmp	r0, #31
   81c6e:	d80c      	bhi.n	81c8a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81c70:	4b11      	ldr	r3, [pc, #68]	; (81cb8 <pmc_enable_periph_clk+0x50>)
   81c72:	699a      	ldr	r2, [r3, #24]
   81c74:	2301      	movs	r3, #1
   81c76:	4083      	lsls	r3, r0
   81c78:	4393      	bics	r3, r2
   81c7a:	d018      	beq.n	81cae <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   81c7c:	2301      	movs	r3, #1
   81c7e:	fa03 f000 	lsl.w	r0, r3, r0
   81c82:	4b0d      	ldr	r3, [pc, #52]	; (81cb8 <pmc_enable_periph_clk+0x50>)
   81c84:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81c86:	2000      	movs	r0, #0
   81c88:	4770      	bx	lr
		ul_id -= 32;
   81c8a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81c8c:	4b0a      	ldr	r3, [pc, #40]	; (81cb8 <pmc_enable_periph_clk+0x50>)
   81c8e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81c92:	2301      	movs	r3, #1
   81c94:	4083      	lsls	r3, r0
   81c96:	4393      	bics	r3, r2
   81c98:	d00b      	beq.n	81cb2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   81c9a:	2301      	movs	r3, #1
   81c9c:	fa03 f000 	lsl.w	r0, r3, r0
   81ca0:	4b05      	ldr	r3, [pc, #20]	; (81cb8 <pmc_enable_periph_clk+0x50>)
   81ca2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   81ca6:	2000      	movs	r0, #0
   81ca8:	4770      	bx	lr
		return 1;
   81caa:	2001      	movs	r0, #1
   81cac:	4770      	bx	lr
	return 0;
   81cae:	2000      	movs	r0, #0
   81cb0:	4770      	bx	lr
   81cb2:	2000      	movs	r0, #0
}
   81cb4:	4770      	bx	lr
   81cb6:	bf00      	nop
   81cb8:	400e0600 	.word	0x400e0600

00081cbc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81cbc:	e7fe      	b.n	81cbc <Dummy_Handler>
	...

00081cc0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81cc0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81cc2:	4b1c      	ldr	r3, [pc, #112]	; (81d34 <Reset_Handler+0x74>)
   81cc4:	4a1c      	ldr	r2, [pc, #112]	; (81d38 <Reset_Handler+0x78>)
   81cc6:	429a      	cmp	r2, r3
   81cc8:	d010      	beq.n	81cec <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   81cca:	4b1c      	ldr	r3, [pc, #112]	; (81d3c <Reset_Handler+0x7c>)
   81ccc:	4a19      	ldr	r2, [pc, #100]	; (81d34 <Reset_Handler+0x74>)
   81cce:	429a      	cmp	r2, r3
   81cd0:	d20c      	bcs.n	81cec <Reset_Handler+0x2c>
   81cd2:	3b01      	subs	r3, #1
   81cd4:	1a9b      	subs	r3, r3, r2
   81cd6:	f023 0303 	bic.w	r3, r3, #3
   81cda:	3304      	adds	r3, #4
   81cdc:	4413      	add	r3, r2
   81cde:	4916      	ldr	r1, [pc, #88]	; (81d38 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   81ce0:	f851 0b04 	ldr.w	r0, [r1], #4
   81ce4:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   81ce8:	429a      	cmp	r2, r3
   81cea:	d1f9      	bne.n	81ce0 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81cec:	4b14      	ldr	r3, [pc, #80]	; (81d40 <Reset_Handler+0x80>)
   81cee:	4a15      	ldr	r2, [pc, #84]	; (81d44 <Reset_Handler+0x84>)
   81cf0:	429a      	cmp	r2, r3
   81cf2:	d20a      	bcs.n	81d0a <Reset_Handler+0x4a>
   81cf4:	3b01      	subs	r3, #1
   81cf6:	1a9b      	subs	r3, r3, r2
   81cf8:	f023 0303 	bic.w	r3, r3, #3
   81cfc:	3304      	adds	r3, #4
   81cfe:	4413      	add	r3, r2
		*pDest++ = 0;
   81d00:	2100      	movs	r1, #0
   81d02:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   81d06:	4293      	cmp	r3, r2
   81d08:	d1fb      	bne.n	81d02 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81d0a:	4b0f      	ldr	r3, [pc, #60]	; (81d48 <Reset_Handler+0x88>)
   81d0c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81d10:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81d14:	490d      	ldr	r1, [pc, #52]	; (81d4c <Reset_Handler+0x8c>)
   81d16:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81d18:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81d20:	d203      	bcs.n	81d2a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81d22:	688b      	ldr	r3, [r1, #8]
   81d24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81d28:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81d2a:	4b09      	ldr	r3, [pc, #36]	; (81d50 <Reset_Handler+0x90>)
   81d2c:	4798      	blx	r3

	/* Branch to main function */
	main();
   81d2e:	4b09      	ldr	r3, [pc, #36]	; (81d54 <Reset_Handler+0x94>)
   81d30:	4798      	blx	r3
   81d32:	e7fe      	b.n	81d32 <Reset_Handler+0x72>
   81d34:	20070000 	.word	0x20070000
   81d38:	00086e64 	.word	0x00086e64
   81d3c:	20070f40 	.word	0x20070f40
   81d40:	20071508 	.word	0x20071508
   81d44:	20070f40 	.word	0x20070f40
   81d48:	00080000 	.word	0x00080000
   81d4c:	e000ed00 	.word	0xe000ed00
   81d50:	00081eb1 	.word	0x00081eb1
   81d54:	00081621 	.word	0x00081621

00081d58 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81d58:	4b3d      	ldr	r3, [pc, #244]	; (81e50 <SystemCoreClockUpdate+0xf8>)
   81d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81d5c:	f003 0303 	and.w	r3, r3, #3
   81d60:	2b03      	cmp	r3, #3
   81d62:	d80e      	bhi.n	81d82 <SystemCoreClockUpdate+0x2a>
   81d64:	e8df f003 	tbb	[pc, r3]
   81d68:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81d6c:	4b39      	ldr	r3, [pc, #228]	; (81e54 <SystemCoreClockUpdate+0xfc>)
   81d6e:	695b      	ldr	r3, [r3, #20]
   81d70:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81d74:	bf14      	ite	ne
   81d76:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81d7a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81d7e:	4b36      	ldr	r3, [pc, #216]	; (81e58 <SystemCoreClockUpdate+0x100>)
   81d80:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81d82:	4b33      	ldr	r3, [pc, #204]	; (81e50 <SystemCoreClockUpdate+0xf8>)
   81d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81d86:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81d8a:	2b70      	cmp	r3, #112	; 0x70
   81d8c:	d057      	beq.n	81e3e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81d8e:	4b30      	ldr	r3, [pc, #192]	; (81e50 <SystemCoreClockUpdate+0xf8>)
   81d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81d92:	4931      	ldr	r1, [pc, #196]	; (81e58 <SystemCoreClockUpdate+0x100>)
   81d94:	f3c2 1202 	ubfx	r2, r2, #4, #3
   81d98:	680b      	ldr	r3, [r1, #0]
   81d9a:	40d3      	lsrs	r3, r2
   81d9c:	600b      	str	r3, [r1, #0]
   81d9e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81da0:	4b2b      	ldr	r3, [pc, #172]	; (81e50 <SystemCoreClockUpdate+0xf8>)
   81da2:	6a1b      	ldr	r3, [r3, #32]
   81da4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81da8:	d003      	beq.n	81db2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81daa:	4a2c      	ldr	r2, [pc, #176]	; (81e5c <SystemCoreClockUpdate+0x104>)
   81dac:	4b2a      	ldr	r3, [pc, #168]	; (81e58 <SystemCoreClockUpdate+0x100>)
   81dae:	601a      	str	r2, [r3, #0]
   81db0:	e7e7      	b.n	81d82 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81db2:	4a2b      	ldr	r2, [pc, #172]	; (81e60 <SystemCoreClockUpdate+0x108>)
   81db4:	4b28      	ldr	r3, [pc, #160]	; (81e58 <SystemCoreClockUpdate+0x100>)
   81db6:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81db8:	4b25      	ldr	r3, [pc, #148]	; (81e50 <SystemCoreClockUpdate+0xf8>)
   81dba:	6a1b      	ldr	r3, [r3, #32]
   81dbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81dc0:	2b10      	cmp	r3, #16
   81dc2:	d005      	beq.n	81dd0 <SystemCoreClockUpdate+0x78>
   81dc4:	2b20      	cmp	r3, #32
   81dc6:	d1dc      	bne.n	81d82 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   81dc8:	4a24      	ldr	r2, [pc, #144]	; (81e5c <SystemCoreClockUpdate+0x104>)
   81dca:	4b23      	ldr	r3, [pc, #140]	; (81e58 <SystemCoreClockUpdate+0x100>)
   81dcc:	601a      	str	r2, [r3, #0]
				break;
   81dce:	e7d8      	b.n	81d82 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   81dd0:	4a24      	ldr	r2, [pc, #144]	; (81e64 <SystemCoreClockUpdate+0x10c>)
   81dd2:	4b21      	ldr	r3, [pc, #132]	; (81e58 <SystemCoreClockUpdate+0x100>)
   81dd4:	601a      	str	r2, [r3, #0]
				break;
   81dd6:	e7d4      	b.n	81d82 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81dd8:	4b1d      	ldr	r3, [pc, #116]	; (81e50 <SystemCoreClockUpdate+0xf8>)
   81dda:	6a1b      	ldr	r3, [r3, #32]
   81ddc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81de0:	d00c      	beq.n	81dfc <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81de2:	4a1e      	ldr	r2, [pc, #120]	; (81e5c <SystemCoreClockUpdate+0x104>)
   81de4:	4b1c      	ldr	r3, [pc, #112]	; (81e58 <SystemCoreClockUpdate+0x100>)
   81de6:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81de8:	4b19      	ldr	r3, [pc, #100]	; (81e50 <SystemCoreClockUpdate+0xf8>)
   81dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81dec:	f003 0303 	and.w	r3, r3, #3
   81df0:	2b02      	cmp	r3, #2
   81df2:	d016      	beq.n	81e22 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81df4:	4a1c      	ldr	r2, [pc, #112]	; (81e68 <SystemCoreClockUpdate+0x110>)
   81df6:	4b18      	ldr	r3, [pc, #96]	; (81e58 <SystemCoreClockUpdate+0x100>)
   81df8:	601a      	str	r2, [r3, #0]
   81dfa:	e7c2      	b.n	81d82 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81dfc:	4a18      	ldr	r2, [pc, #96]	; (81e60 <SystemCoreClockUpdate+0x108>)
   81dfe:	4b16      	ldr	r3, [pc, #88]	; (81e58 <SystemCoreClockUpdate+0x100>)
   81e00:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81e02:	4b13      	ldr	r3, [pc, #76]	; (81e50 <SystemCoreClockUpdate+0xf8>)
   81e04:	6a1b      	ldr	r3, [r3, #32]
   81e06:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81e0a:	2b10      	cmp	r3, #16
   81e0c:	d005      	beq.n	81e1a <SystemCoreClockUpdate+0xc2>
   81e0e:	2b20      	cmp	r3, #32
   81e10:	d1ea      	bne.n	81de8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   81e12:	4a12      	ldr	r2, [pc, #72]	; (81e5c <SystemCoreClockUpdate+0x104>)
   81e14:	4b10      	ldr	r3, [pc, #64]	; (81e58 <SystemCoreClockUpdate+0x100>)
   81e16:	601a      	str	r2, [r3, #0]
				break;
   81e18:	e7e6      	b.n	81de8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   81e1a:	4a12      	ldr	r2, [pc, #72]	; (81e64 <SystemCoreClockUpdate+0x10c>)
   81e1c:	4b0e      	ldr	r3, [pc, #56]	; (81e58 <SystemCoreClockUpdate+0x100>)
   81e1e:	601a      	str	r2, [r3, #0]
				break;
   81e20:	e7e2      	b.n	81de8 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81e22:	4a0b      	ldr	r2, [pc, #44]	; (81e50 <SystemCoreClockUpdate+0xf8>)
   81e24:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81e26:	6a92      	ldr	r2, [r2, #40]	; 0x28
   81e28:	480b      	ldr	r0, [pc, #44]	; (81e58 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81e2a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   81e2e:	6803      	ldr	r3, [r0, #0]
   81e30:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81e34:	b2d2      	uxtb	r2, r2
   81e36:	fbb3 f3f2 	udiv	r3, r3, r2
   81e3a:	6003      	str	r3, [r0, #0]
   81e3c:	e7a1      	b.n	81d82 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   81e3e:	4a06      	ldr	r2, [pc, #24]	; (81e58 <SystemCoreClockUpdate+0x100>)
   81e40:	6813      	ldr	r3, [r2, #0]
   81e42:	490a      	ldr	r1, [pc, #40]	; (81e6c <SystemCoreClockUpdate+0x114>)
   81e44:	fba1 1303 	umull	r1, r3, r1, r3
   81e48:	085b      	lsrs	r3, r3, #1
   81e4a:	6013      	str	r3, [r2, #0]
   81e4c:	4770      	bx	lr
   81e4e:	bf00      	nop
   81e50:	400e0600 	.word	0x400e0600
   81e54:	400e1a10 	.word	0x400e1a10
   81e58:	2007058c 	.word	0x2007058c
   81e5c:	00b71b00 	.word	0x00b71b00
   81e60:	003d0900 	.word	0x003d0900
   81e64:	007a1200 	.word	0x007a1200
   81e68:	0e4e1c00 	.word	0x0e4e1c00
   81e6c:	aaaaaaab 	.word	0xaaaaaaab

00081e70 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81e70:	4b0a      	ldr	r3, [pc, #40]	; (81e9c <_sbrk+0x2c>)
   81e72:	681b      	ldr	r3, [r3, #0]
   81e74:	b153      	cbz	r3, 81e8c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   81e76:	4b09      	ldr	r3, [pc, #36]	; (81e9c <_sbrk+0x2c>)
   81e78:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81e7a:	181a      	adds	r2, r3, r0
   81e7c:	4908      	ldr	r1, [pc, #32]	; (81ea0 <_sbrk+0x30>)
   81e7e:	4291      	cmp	r1, r2
   81e80:	db08      	blt.n	81e94 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   81e82:	4610      	mov	r0, r2
   81e84:	4a05      	ldr	r2, [pc, #20]	; (81e9c <_sbrk+0x2c>)
   81e86:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81e88:	4618      	mov	r0, r3
   81e8a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   81e8c:	4a05      	ldr	r2, [pc, #20]	; (81ea4 <_sbrk+0x34>)
   81e8e:	4b03      	ldr	r3, [pc, #12]	; (81e9c <_sbrk+0x2c>)
   81e90:	601a      	str	r2, [r3, #0]
   81e92:	e7f0      	b.n	81e76 <_sbrk+0x6>
		return (caddr_t) -1;	
   81e94:	f04f 30ff 	mov.w	r0, #4294967295
}
   81e98:	4770      	bx	lr
   81e9a:	bf00      	nop
   81e9c:	20070fdc 	.word	0x20070fdc
   81ea0:	20087ffc 	.word	0x20087ffc
   81ea4:	20073508 	.word	0x20073508

00081ea8 <atoi>:
   81ea8:	220a      	movs	r2, #10
   81eaa:	2100      	movs	r1, #0
   81eac:	f000 b998 	b.w	821e0 <strtol>

00081eb0 <__libc_init_array>:
   81eb0:	b570      	push	{r4, r5, r6, lr}
   81eb2:	4e0f      	ldr	r6, [pc, #60]	; (81ef0 <__libc_init_array+0x40>)
   81eb4:	4d0f      	ldr	r5, [pc, #60]	; (81ef4 <__libc_init_array+0x44>)
   81eb6:	1b76      	subs	r6, r6, r5
   81eb8:	10b6      	asrs	r6, r6, #2
   81eba:	bf18      	it	ne
   81ebc:	2400      	movne	r4, #0
   81ebe:	d005      	beq.n	81ecc <__libc_init_array+0x1c>
   81ec0:	3401      	adds	r4, #1
   81ec2:	f855 3b04 	ldr.w	r3, [r5], #4
   81ec6:	4798      	blx	r3
   81ec8:	42a6      	cmp	r6, r4
   81eca:	d1f9      	bne.n	81ec0 <__libc_init_array+0x10>
   81ecc:	4e0a      	ldr	r6, [pc, #40]	; (81ef8 <__libc_init_array+0x48>)
   81ece:	4d0b      	ldr	r5, [pc, #44]	; (81efc <__libc_init_array+0x4c>)
   81ed0:	f004 ffb2 	bl	86e38 <_init>
   81ed4:	1b76      	subs	r6, r6, r5
   81ed6:	10b6      	asrs	r6, r6, #2
   81ed8:	bf18      	it	ne
   81eda:	2400      	movne	r4, #0
   81edc:	d006      	beq.n	81eec <__libc_init_array+0x3c>
   81ede:	3401      	adds	r4, #1
   81ee0:	f855 3b04 	ldr.w	r3, [r5], #4
   81ee4:	4798      	blx	r3
   81ee6:	42a6      	cmp	r6, r4
   81ee8:	d1f9      	bne.n	81ede <__libc_init_array+0x2e>
   81eea:	bd70      	pop	{r4, r5, r6, pc}
   81eec:	bd70      	pop	{r4, r5, r6, pc}
   81eee:	bf00      	nop
   81ef0:	00086e44 	.word	0x00086e44
   81ef4:	00086e44 	.word	0x00086e44
   81ef8:	00086e4c 	.word	0x00086e4c
   81efc:	00086e44 	.word	0x00086e44

00081f00 <memset>:
   81f00:	b470      	push	{r4, r5, r6}
   81f02:	0786      	lsls	r6, r0, #30
   81f04:	d046      	beq.n	81f94 <memset+0x94>
   81f06:	1e54      	subs	r4, r2, #1
   81f08:	2a00      	cmp	r2, #0
   81f0a:	d041      	beq.n	81f90 <memset+0x90>
   81f0c:	b2ca      	uxtb	r2, r1
   81f0e:	4603      	mov	r3, r0
   81f10:	e002      	b.n	81f18 <memset+0x18>
   81f12:	f114 34ff 	adds.w	r4, r4, #4294967295
   81f16:	d33b      	bcc.n	81f90 <memset+0x90>
   81f18:	f803 2b01 	strb.w	r2, [r3], #1
   81f1c:	079d      	lsls	r5, r3, #30
   81f1e:	d1f8      	bne.n	81f12 <memset+0x12>
   81f20:	2c03      	cmp	r4, #3
   81f22:	d92e      	bls.n	81f82 <memset+0x82>
   81f24:	b2cd      	uxtb	r5, r1
   81f26:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81f2a:	2c0f      	cmp	r4, #15
   81f2c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81f30:	d919      	bls.n	81f66 <memset+0x66>
   81f32:	4626      	mov	r6, r4
   81f34:	f103 0210 	add.w	r2, r3, #16
   81f38:	3e10      	subs	r6, #16
   81f3a:	2e0f      	cmp	r6, #15
   81f3c:	f842 5c10 	str.w	r5, [r2, #-16]
   81f40:	f842 5c0c 	str.w	r5, [r2, #-12]
   81f44:	f842 5c08 	str.w	r5, [r2, #-8]
   81f48:	f842 5c04 	str.w	r5, [r2, #-4]
   81f4c:	f102 0210 	add.w	r2, r2, #16
   81f50:	d8f2      	bhi.n	81f38 <memset+0x38>
   81f52:	f1a4 0210 	sub.w	r2, r4, #16
   81f56:	f022 020f 	bic.w	r2, r2, #15
   81f5a:	f004 040f 	and.w	r4, r4, #15
   81f5e:	3210      	adds	r2, #16
   81f60:	2c03      	cmp	r4, #3
   81f62:	4413      	add	r3, r2
   81f64:	d90d      	bls.n	81f82 <memset+0x82>
   81f66:	461e      	mov	r6, r3
   81f68:	4622      	mov	r2, r4
   81f6a:	3a04      	subs	r2, #4
   81f6c:	2a03      	cmp	r2, #3
   81f6e:	f846 5b04 	str.w	r5, [r6], #4
   81f72:	d8fa      	bhi.n	81f6a <memset+0x6a>
   81f74:	1f22      	subs	r2, r4, #4
   81f76:	f022 0203 	bic.w	r2, r2, #3
   81f7a:	3204      	adds	r2, #4
   81f7c:	4413      	add	r3, r2
   81f7e:	f004 0403 	and.w	r4, r4, #3
   81f82:	b12c      	cbz	r4, 81f90 <memset+0x90>
   81f84:	b2c9      	uxtb	r1, r1
   81f86:	441c      	add	r4, r3
   81f88:	f803 1b01 	strb.w	r1, [r3], #1
   81f8c:	429c      	cmp	r4, r3
   81f8e:	d1fb      	bne.n	81f88 <memset+0x88>
   81f90:	bc70      	pop	{r4, r5, r6}
   81f92:	4770      	bx	lr
   81f94:	4614      	mov	r4, r2
   81f96:	4603      	mov	r3, r0
   81f98:	e7c2      	b.n	81f20 <memset+0x20>
   81f9a:	bf00      	nop

00081f9c <sprintf>:
   81f9c:	b40e      	push	{r1, r2, r3}
   81f9e:	4601      	mov	r1, r0
   81fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   81fa2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   81fa6:	f44f 7702 	mov.w	r7, #520	; 0x208
   81faa:	f64f 76ff 	movw	r6, #65535	; 0xffff
   81fae:	b09c      	sub	sp, #112	; 0x70
   81fb0:	ac21      	add	r4, sp, #132	; 0x84
   81fb2:	f854 2b04 	ldr.w	r2, [r4], #4
   81fb6:	4b0b      	ldr	r3, [pc, #44]	; (81fe4 <sprintf+0x48>)
   81fb8:	9102      	str	r1, [sp, #8]
   81fba:	9106      	str	r1, [sp, #24]
   81fbc:	6818      	ldr	r0, [r3, #0]
   81fbe:	a902      	add	r1, sp, #8
   81fc0:	4623      	mov	r3, r4
   81fc2:	9401      	str	r4, [sp, #4]
   81fc4:	f8ad 7014 	strh.w	r7, [sp, #20]
   81fc8:	9504      	str	r5, [sp, #16]
   81fca:	9507      	str	r5, [sp, #28]
   81fcc:	f8ad 6016 	strh.w	r6, [sp, #22]
   81fd0:	f000 f91c 	bl	8220c <_svfprintf_r>
   81fd4:	2200      	movs	r2, #0
   81fd6:	9b02      	ldr	r3, [sp, #8]
   81fd8:	701a      	strb	r2, [r3, #0]
   81fda:	b01c      	add	sp, #112	; 0x70
   81fdc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   81fe0:	b003      	add	sp, #12
   81fe2:	4770      	bx	lr
   81fe4:	20070590 	.word	0x20070590

00081fe8 <strlen>:
   81fe8:	f020 0103 	bic.w	r1, r0, #3
   81fec:	f010 0003 	ands.w	r0, r0, #3
   81ff0:	f1c0 0000 	rsb	r0, r0, #0
   81ff4:	f851 3b04 	ldr.w	r3, [r1], #4
   81ff8:	f100 0c04 	add.w	ip, r0, #4
   81ffc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82000:	f06f 0200 	mvn.w	r2, #0
   82004:	bf1c      	itt	ne
   82006:	fa22 f20c 	lsrne.w	r2, r2, ip
   8200a:	4313      	orrne	r3, r2
   8200c:	f04f 0c01 	mov.w	ip, #1
   82010:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82014:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82018:	eba3 020c 	sub.w	r2, r3, ip
   8201c:	ea22 0203 	bic.w	r2, r2, r3
   82020:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82024:	bf04      	itt	eq
   82026:	f851 3b04 	ldreq.w	r3, [r1], #4
   8202a:	3004      	addeq	r0, #4
   8202c:	d0f4      	beq.n	82018 <strlen+0x30>
   8202e:	f1c2 0100 	rsb	r1, r2, #0
   82032:	ea02 0201 	and.w	r2, r2, r1
   82036:	fab2 f282 	clz	r2, r2
   8203a:	f1c2 021f 	rsb	r2, r2, #31
   8203e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   82042:	4770      	bx	lr

00082044 <strtok>:
   82044:	4a02      	ldr	r2, [pc, #8]	; (82050 <strtok+0xc>)
   82046:	2301      	movs	r3, #1
   82048:	6812      	ldr	r2, [r2, #0]
   8204a:	325c      	adds	r2, #92	; 0x5c
   8204c:	f000 b802 	b.w	82054 <__strtok_r>
   82050:	20070590 	.word	0x20070590

00082054 <__strtok_r>:
   82054:	b4f0      	push	{r4, r5, r6, r7}
   82056:	b318      	cbz	r0, 820a0 <__strtok_r+0x4c>
   82058:	4607      	mov	r7, r0
   8205a:	460d      	mov	r5, r1
   8205c:	f817 6b01 	ldrb.w	r6, [r7], #1
   82060:	e001      	b.n	82066 <__strtok_r+0x12>
   82062:	42a6      	cmp	r6, r4
   82064:	d017      	beq.n	82096 <__strtok_r+0x42>
   82066:	f815 4b01 	ldrb.w	r4, [r5], #1
   8206a:	2c00      	cmp	r4, #0
   8206c:	d1f9      	bne.n	82062 <__strtok_r+0xe>
   8206e:	b1e6      	cbz	r6, 820aa <__strtok_r+0x56>
   82070:	460c      	mov	r4, r1
   82072:	f817 5b01 	ldrb.w	r5, [r7], #1
   82076:	e001      	b.n	8207c <__strtok_r+0x28>
   82078:	2b00      	cmp	r3, #0
   8207a:	d0f9      	beq.n	82070 <__strtok_r+0x1c>
   8207c:	f814 3b01 	ldrb.w	r3, [r4], #1
   82080:	429d      	cmp	r5, r3
   82082:	d1f9      	bne.n	82078 <__strtok_r+0x24>
   82084:	b155      	cbz	r5, 8209c <__strtok_r+0x48>
   82086:	2300      	movs	r3, #0
   82088:	f807 3c01 	strb.w	r3, [r7, #-1]
   8208c:	4606      	mov	r6, r0
   8208e:	6017      	str	r7, [r2, #0]
   82090:	4630      	mov	r0, r6
   82092:	bcf0      	pop	{r4, r5, r6, r7}
   82094:	4770      	bx	lr
   82096:	b153      	cbz	r3, 820ae <__strtok_r+0x5a>
   82098:	4638      	mov	r0, r7
   8209a:	e7dd      	b.n	82058 <__strtok_r+0x4>
   8209c:	462f      	mov	r7, r5
   8209e:	e7f5      	b.n	8208c <__strtok_r+0x38>
   820a0:	6810      	ldr	r0, [r2, #0]
   820a2:	2800      	cmp	r0, #0
   820a4:	d1d8      	bne.n	82058 <__strtok_r+0x4>
   820a6:	4606      	mov	r6, r0
   820a8:	e7f2      	b.n	82090 <__strtok_r+0x3c>
   820aa:	6016      	str	r6, [r2, #0]
   820ac:	e7f0      	b.n	82090 <__strtok_r+0x3c>
   820ae:	6017      	str	r7, [r2, #0]
   820b0:	4606      	mov	r6, r0
   820b2:	7003      	strb	r3, [r0, #0]
   820b4:	e7ec      	b.n	82090 <__strtok_r+0x3c>
   820b6:	bf00      	nop

000820b8 <_strtol_l.isra.0>:
   820b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   820bc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   820c0:	460f      	mov	r7, r1
   820c2:	4680      	mov	r8, r0
   820c4:	4616      	mov	r6, r2
   820c6:	461d      	mov	r5, r3
   820c8:	468a      	mov	sl, r1
   820ca:	e000      	b.n	820ce <_strtol_l.isra.0+0x16>
   820cc:	46a2      	mov	sl, r4
   820ce:	4654      	mov	r4, sl
   820d0:	4648      	mov	r0, r9
   820d2:	f814 bb01 	ldrb.w	fp, [r4], #1
   820d6:	f002 fafb 	bl	846d0 <__locale_ctype_ptr_l>
   820da:	4458      	add	r0, fp
   820dc:	7842      	ldrb	r2, [r0, #1]
   820de:	f012 0208 	ands.w	r2, r2, #8
   820e2:	d1f3      	bne.n	820cc <_strtol_l.isra.0+0x14>
   820e4:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   820e8:	d04f      	beq.n	8218a <_strtol_l.isra.0+0xd2>
   820ea:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   820ee:	bf04      	itt	eq
   820f0:	f894 b000 	ldrbeq.w	fp, [r4]
   820f4:	f10a 0402 	addeq.w	r4, sl, #2
   820f8:	b11d      	cbz	r5, 82102 <_strtol_l.isra.0+0x4a>
   820fa:	2d10      	cmp	r5, #16
   820fc:	d056      	beq.n	821ac <_strtol_l.isra.0+0xf4>
   820fe:	46ac      	mov	ip, r5
   82100:	e004      	b.n	8210c <_strtol_l.isra.0+0x54>
   82102:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   82106:	d060      	beq.n	821ca <_strtol_l.isra.0+0x112>
   82108:	250a      	movs	r5, #10
   8210a:	46ac      	mov	ip, r5
   8210c:	2a00      	cmp	r2, #0
   8210e:	bf0c      	ite	eq
   82110:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   82114:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   82118:	2100      	movs	r1, #0
   8211a:	fbb9 fefc 	udiv	lr, r9, ip
   8211e:	4608      	mov	r0, r1
   82120:	fb0c 9a1e 	mls	sl, ip, lr, r9
   82124:	e005      	b.n	82132 <_strtol_l.isra.0+0x7a>
   82126:	d029      	beq.n	8217c <_strtol_l.isra.0+0xc4>
   82128:	2101      	movs	r1, #1
   8212a:	fb0c 3000 	mla	r0, ip, r0, r3
   8212e:	f814 bb01 	ldrb.w	fp, [r4], #1
   82132:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   82136:	2b09      	cmp	r3, #9
   82138:	d905      	bls.n	82146 <_strtol_l.isra.0+0x8e>
   8213a:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   8213e:	2b19      	cmp	r3, #25
   82140:	d80b      	bhi.n	8215a <_strtol_l.isra.0+0xa2>
   82142:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   82146:	429d      	cmp	r5, r3
   82148:	dd0f      	ble.n	8216a <_strtol_l.isra.0+0xb2>
   8214a:	f1b1 3fff 	cmp.w	r1, #4294967295
   8214e:	d0ee      	beq.n	8212e <_strtol_l.isra.0+0x76>
   82150:	4586      	cmp	lr, r0
   82152:	d2e8      	bcs.n	82126 <_strtol_l.isra.0+0x6e>
   82154:	f04f 31ff 	mov.w	r1, #4294967295
   82158:	e7e9      	b.n	8212e <_strtol_l.isra.0+0x76>
   8215a:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   8215e:	2b19      	cmp	r3, #25
   82160:	d803      	bhi.n	8216a <_strtol_l.isra.0+0xb2>
   82162:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   82166:	429d      	cmp	r5, r3
   82168:	dcef      	bgt.n	8214a <_strtol_l.isra.0+0x92>
   8216a:	1c4b      	adds	r3, r1, #1
   8216c:	d013      	beq.n	82196 <_strtol_l.isra.0+0xde>
   8216e:	b102      	cbz	r2, 82172 <_strtol_l.isra.0+0xba>
   82170:	4240      	negs	r0, r0
   82172:	b146      	cbz	r6, 82186 <_strtol_l.isra.0+0xce>
   82174:	b9c1      	cbnz	r1, 821a8 <_strtol_l.isra.0+0xf0>
   82176:	6037      	str	r7, [r6, #0]
   82178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8217c:	459a      	cmp	sl, r3
   8217e:	dad3      	bge.n	82128 <_strtol_l.isra.0+0x70>
   82180:	f04f 31ff 	mov.w	r1, #4294967295
   82184:	e7d3      	b.n	8212e <_strtol_l.isra.0+0x76>
   82186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8218a:	f894 b000 	ldrb.w	fp, [r4]
   8218e:	2201      	movs	r2, #1
   82190:	f10a 0402 	add.w	r4, sl, #2
   82194:	e7b0      	b.n	820f8 <_strtol_l.isra.0+0x40>
   82196:	2322      	movs	r3, #34	; 0x22
   82198:	f8c8 3000 	str.w	r3, [r8]
   8219c:	b1ee      	cbz	r6, 821da <_strtol_l.isra.0+0x122>
   8219e:	1e67      	subs	r7, r4, #1
   821a0:	4648      	mov	r0, r9
   821a2:	6037      	str	r7, [r6, #0]
   821a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   821a8:	4681      	mov	r9, r0
   821aa:	e7f8      	b.n	8219e <_strtol_l.isra.0+0xe6>
   821ac:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   821b0:	d1a5      	bne.n	820fe <_strtol_l.isra.0+0x46>
   821b2:	7823      	ldrb	r3, [r4, #0]
   821b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   821b8:	2b58      	cmp	r3, #88	; 0x58
   821ba:	d1a0      	bne.n	820fe <_strtol_l.isra.0+0x46>
   821bc:	f04f 0c10 	mov.w	ip, #16
   821c0:	f894 b001 	ldrb.w	fp, [r4, #1]
   821c4:	4665      	mov	r5, ip
   821c6:	3402      	adds	r4, #2
   821c8:	e7a0      	b.n	8210c <_strtol_l.isra.0+0x54>
   821ca:	7823      	ldrb	r3, [r4, #0]
   821cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   821d0:	2b58      	cmp	r3, #88	; 0x58
   821d2:	d0f3      	beq.n	821bc <_strtol_l.isra.0+0x104>
   821d4:	2508      	movs	r5, #8
   821d6:	46ac      	mov	ip, r5
   821d8:	e798      	b.n	8210c <_strtol_l.isra.0+0x54>
   821da:	4648      	mov	r0, r9
   821dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000821e0 <strtol>:
   821e0:	4b08      	ldr	r3, [pc, #32]	; (82204 <strtol+0x24>)
   821e2:	b570      	push	{r4, r5, r6, lr}
   821e4:	681d      	ldr	r5, [r3, #0]
   821e6:	4e08      	ldr	r6, [pc, #32]	; (82208 <strtol+0x28>)
   821e8:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   821ea:	b082      	sub	sp, #8
   821ec:	2c00      	cmp	r4, #0
   821ee:	bf08      	it	eq
   821f0:	4634      	moveq	r4, r6
   821f2:	4613      	mov	r3, r2
   821f4:	9400      	str	r4, [sp, #0]
   821f6:	460a      	mov	r2, r1
   821f8:	4601      	mov	r1, r0
   821fa:	4628      	mov	r0, r5
   821fc:	f7ff ff5c 	bl	820b8 <_strtol_l.isra.0>
   82200:	b002      	add	sp, #8
   82202:	bd70      	pop	{r4, r5, r6, pc}
   82204:	20070590 	.word	0x20070590
   82208:	200709c4 	.word	0x200709c4

0008220c <_svfprintf_r>:
   8220c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82210:	b0c3      	sub	sp, #268	; 0x10c
   82212:	460c      	mov	r4, r1
   82214:	910b      	str	r1, [sp, #44]	; 0x2c
   82216:	4692      	mov	sl, r2
   82218:	930f      	str	r3, [sp, #60]	; 0x3c
   8221a:	900c      	str	r0, [sp, #48]	; 0x30
   8221c:	f002 fa5c 	bl	846d8 <_localeconv_r>
   82220:	6803      	ldr	r3, [r0, #0]
   82222:	4618      	mov	r0, r3
   82224:	931a      	str	r3, [sp, #104]	; 0x68
   82226:	f7ff fedf 	bl	81fe8 <strlen>
   8222a:	89a3      	ldrh	r3, [r4, #12]
   8222c:	9019      	str	r0, [sp, #100]	; 0x64
   8222e:	0619      	lsls	r1, r3, #24
   82230:	d503      	bpl.n	8223a <_svfprintf_r+0x2e>
   82232:	6923      	ldr	r3, [r4, #16]
   82234:	2b00      	cmp	r3, #0
   82236:	f001 8035 	beq.w	832a4 <_svfprintf_r+0x1098>
   8223a:	2300      	movs	r3, #0
   8223c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   82240:	46c8      	mov	r8, r9
   82242:	9315      	str	r3, [sp, #84]	; 0x54
   82244:	9313      	str	r3, [sp, #76]	; 0x4c
   82246:	9314      	str	r3, [sp, #80]	; 0x50
   82248:	9318      	str	r3, [sp, #96]	; 0x60
   8224a:	931b      	str	r3, [sp, #108]	; 0x6c
   8224c:	9309      	str	r3, [sp, #36]	; 0x24
   8224e:	9316      	str	r3, [sp, #88]	; 0x58
   82250:	9317      	str	r3, [sp, #92]	; 0x5c
   82252:	9327      	str	r3, [sp, #156]	; 0x9c
   82254:	9326      	str	r3, [sp, #152]	; 0x98
   82256:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   8225a:	f89a 3000 	ldrb.w	r3, [sl]
   8225e:	4654      	mov	r4, sl
   82260:	b1eb      	cbz	r3, 8229e <_svfprintf_r+0x92>
   82262:	2b25      	cmp	r3, #37	; 0x25
   82264:	d102      	bne.n	8226c <_svfprintf_r+0x60>
   82266:	e01a      	b.n	8229e <_svfprintf_r+0x92>
   82268:	2b25      	cmp	r3, #37	; 0x25
   8226a:	d003      	beq.n	82274 <_svfprintf_r+0x68>
   8226c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82270:	2b00      	cmp	r3, #0
   82272:	d1f9      	bne.n	82268 <_svfprintf_r+0x5c>
   82274:	eba4 050a 	sub.w	r5, r4, sl
   82278:	b18d      	cbz	r5, 8229e <_svfprintf_r+0x92>
   8227a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8227c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8227e:	3301      	adds	r3, #1
   82280:	442a      	add	r2, r5
   82282:	2b07      	cmp	r3, #7
   82284:	f8c8 a000 	str.w	sl, [r8]
   82288:	f8c8 5004 	str.w	r5, [r8, #4]
   8228c:	9227      	str	r2, [sp, #156]	; 0x9c
   8228e:	9326      	str	r3, [sp, #152]	; 0x98
   82290:	f300 808a 	bgt.w	823a8 <_svfprintf_r+0x19c>
   82294:	f108 0808 	add.w	r8, r8, #8
   82298:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8229a:	442b      	add	r3, r5
   8229c:	9309      	str	r3, [sp, #36]	; 0x24
   8229e:	7823      	ldrb	r3, [r4, #0]
   822a0:	2b00      	cmp	r3, #0
   822a2:	f000 8089 	beq.w	823b8 <_svfprintf_r+0x1ac>
   822a6:	2300      	movs	r3, #0
   822a8:	f04f 30ff 	mov.w	r0, #4294967295
   822ac:	461a      	mov	r2, r3
   822ae:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   822b2:	4619      	mov	r1, r3
   822b4:	930d      	str	r3, [sp, #52]	; 0x34
   822b6:	469b      	mov	fp, r3
   822b8:	7863      	ldrb	r3, [r4, #1]
   822ba:	f104 0a01 	add.w	sl, r4, #1
   822be:	900a      	str	r0, [sp, #40]	; 0x28
   822c0:	f10a 0a01 	add.w	sl, sl, #1
   822c4:	f1a3 0020 	sub.w	r0, r3, #32
   822c8:	2858      	cmp	r0, #88	; 0x58
   822ca:	f200 83b7 	bhi.w	82a3c <_svfprintf_r+0x830>
   822ce:	e8df f010 	tbh	[pc, r0, lsl #1]
   822d2:	034c      	.short	0x034c
   822d4:	03b503b5 	.word	0x03b503b5
   822d8:	03b50354 	.word	0x03b50354
   822dc:	03b503b5 	.word	0x03b503b5
   822e0:	03b503b5 	.word	0x03b503b5
   822e4:	005903b5 	.word	0x005903b5
   822e8:	03b50359 	.word	0x03b50359
   822ec:	02140066 	.word	0x02140066
   822f0:	022f03b5 	.word	0x022f03b5
   822f4:	03a503a5 	.word	0x03a503a5
   822f8:	03a503a5 	.word	0x03a503a5
   822fc:	03a503a5 	.word	0x03a503a5
   82300:	03a503a5 	.word	0x03a503a5
   82304:	03b503a5 	.word	0x03b503a5
   82308:	03b503b5 	.word	0x03b503b5
   8230c:	03b503b5 	.word	0x03b503b5
   82310:	03b503b5 	.word	0x03b503b5
   82314:	03b503b5 	.word	0x03b503b5
   82318:	028b03b5 	.word	0x028b03b5
   8231c:	03b502d3 	.word	0x03b502d3
   82320:	03b502d3 	.word	0x03b502d3
   82324:	03b503b5 	.word	0x03b503b5
   82328:	031b03b5 	.word	0x031b03b5
   8232c:	03b503b5 	.word	0x03b503b5
   82330:	03b50320 	.word	0x03b50320
   82334:	03b503b5 	.word	0x03b503b5
   82338:	03b503b5 	.word	0x03b503b5
   8233c:	03b50234 	.word	0x03b50234
   82340:	024b03b5 	.word	0x024b03b5
   82344:	03b503b5 	.word	0x03b503b5
   82348:	03b503b5 	.word	0x03b503b5
   8234c:	03b503b5 	.word	0x03b503b5
   82350:	03b503b5 	.word	0x03b503b5
   82354:	03b503b5 	.word	0x03b503b5
   82358:	039e0276 	.word	0x039e0276
   8235c:	02d302d3 	.word	0x02d302d3
   82360:	036302d3 	.word	0x036302d3
   82364:	03b5039e 	.word	0x03b5039e
   82368:	036803b5 	.word	0x036803b5
   8236c:	037503b5 	.word	0x037503b5
   82370:	038c01dd 	.word	0x038c01dd
   82374:	03b5035e 	.word	0x03b5035e
   82378:	03b501f2 	.word	0x03b501f2
   8237c:	03b50087 	.word	0x03b50087
   82380:	033203b5 	.word	0x033203b5
   82384:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82386:	6823      	ldr	r3, [r4, #0]
   82388:	4618      	mov	r0, r3
   8238a:	930d      	str	r3, [sp, #52]	; 0x34
   8238c:	4623      	mov	r3, r4
   8238e:	2800      	cmp	r0, #0
   82390:	f103 0304 	add.w	r3, r3, #4
   82394:	930f      	str	r3, [sp, #60]	; 0x3c
   82396:	da04      	bge.n	823a2 <_svfprintf_r+0x196>
   82398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8239a:	425b      	negs	r3, r3
   8239c:	930d      	str	r3, [sp, #52]	; 0x34
   8239e:	f04b 0b04 	orr.w	fp, fp, #4
   823a2:	f89a 3000 	ldrb.w	r3, [sl]
   823a6:	e78b      	b.n	822c0 <_svfprintf_r+0xb4>
   823a8:	aa25      	add	r2, sp, #148	; 0x94
   823aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   823ac:	980c      	ldr	r0, [sp, #48]	; 0x30
   823ae:	f003 f833 	bl	85418 <__ssprint_r>
   823b2:	b940      	cbnz	r0, 823c6 <_svfprintf_r+0x1ba>
   823b4:	46c8      	mov	r8, r9
   823b6:	e76f      	b.n	82298 <_svfprintf_r+0x8c>
   823b8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   823ba:	b123      	cbz	r3, 823c6 <_svfprintf_r+0x1ba>
   823bc:	980c      	ldr	r0, [sp, #48]	; 0x30
   823be:	aa25      	add	r2, sp, #148	; 0x94
   823c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   823c2:	f003 f829 	bl	85418 <__ssprint_r>
   823c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   823c8:	899b      	ldrh	r3, [r3, #12]
   823ca:	f013 0f40 	tst.w	r3, #64	; 0x40
   823ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   823d0:	bf18      	it	ne
   823d2:	f04f 33ff 	movne.w	r3, #4294967295
   823d6:	9309      	str	r3, [sp, #36]	; 0x24
   823d8:	9809      	ldr	r0, [sp, #36]	; 0x24
   823da:	b043      	add	sp, #268	; 0x10c
   823dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   823e0:	f01b 0f20 	tst.w	fp, #32
   823e4:	9311      	str	r3, [sp, #68]	; 0x44
   823e6:	f040 81af 	bne.w	82748 <_svfprintf_r+0x53c>
   823ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   823ec:	f01b 0f10 	tst.w	fp, #16
   823f0:	4613      	mov	r3, r2
   823f2:	f040 859a 	bne.w	82f2a <_svfprintf_r+0xd1e>
   823f6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   823fa:	f000 8596 	beq.w	82f2a <_svfprintf_r+0xd1e>
   823fe:	2500      	movs	r5, #0
   82400:	2301      	movs	r3, #1
   82402:	8814      	ldrh	r4, [r2, #0]
   82404:	3204      	adds	r2, #4
   82406:	920f      	str	r2, [sp, #60]	; 0x3c
   82408:	2200      	movs	r2, #0
   8240a:	4617      	mov	r7, r2
   8240c:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   82410:	990a      	ldr	r1, [sp, #40]	; 0x28
   82412:	1c4a      	adds	r2, r1, #1
   82414:	f000 8210 	beq.w	82838 <_svfprintf_r+0x62c>
   82418:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   8241c:	9207      	str	r2, [sp, #28]
   8241e:	ea54 0205 	orrs.w	r2, r4, r5
   82422:	f040 820f 	bne.w	82844 <_svfprintf_r+0x638>
   82426:	2900      	cmp	r1, #0
   82428:	f040 8431 	bne.w	82c8e <_svfprintf_r+0xa82>
   8242c:	2b00      	cmp	r3, #0
   8242e:	f040 8539 	bne.w	82ea4 <_svfprintf_r+0xc98>
   82432:	f01b 0301 	ands.w	r3, fp, #1
   82436:	930e      	str	r3, [sp, #56]	; 0x38
   82438:	f000 8662 	beq.w	83100 <_svfprintf_r+0xef4>
   8243c:	2330      	movs	r3, #48	; 0x30
   8243e:	ae42      	add	r6, sp, #264	; 0x108
   82440:	f806 3d41 	strb.w	r3, [r6, #-65]!
   82444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82446:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82448:	4293      	cmp	r3, r2
   8244a:	bfb8      	it	lt
   8244c:	4613      	movlt	r3, r2
   8244e:	9308      	str	r3, [sp, #32]
   82450:	2300      	movs	r3, #0
   82452:	9312      	str	r3, [sp, #72]	; 0x48
   82454:	b117      	cbz	r7, 8245c <_svfprintf_r+0x250>
   82456:	9b08      	ldr	r3, [sp, #32]
   82458:	3301      	adds	r3, #1
   8245a:	9308      	str	r3, [sp, #32]
   8245c:	9b07      	ldr	r3, [sp, #28]
   8245e:	f013 0302 	ands.w	r3, r3, #2
   82462:	9310      	str	r3, [sp, #64]	; 0x40
   82464:	d002      	beq.n	8246c <_svfprintf_r+0x260>
   82466:	9b08      	ldr	r3, [sp, #32]
   82468:	3302      	adds	r3, #2
   8246a:	9308      	str	r3, [sp, #32]
   8246c:	9b07      	ldr	r3, [sp, #28]
   8246e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   82472:	f040 8310 	bne.w	82a96 <_svfprintf_r+0x88a>
   82476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82478:	9a08      	ldr	r2, [sp, #32]
   8247a:	eba3 0b02 	sub.w	fp, r3, r2
   8247e:	f1bb 0f00 	cmp.w	fp, #0
   82482:	f340 8308 	ble.w	82a96 <_svfprintf_r+0x88a>
   82486:	f1bb 0f10 	cmp.w	fp, #16
   8248a:	f340 87b2 	ble.w	833f2 <_svfprintf_r+0x11e6>
   8248e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82490:	4643      	mov	r3, r8
   82492:	4621      	mov	r1, r4
   82494:	46a8      	mov	r8, r5
   82496:	2710      	movs	r7, #16
   82498:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8249a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8249c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8249e:	e006      	b.n	824ae <_svfprintf_r+0x2a2>
   824a0:	f1ab 0b10 	sub.w	fp, fp, #16
   824a4:	f1bb 0f10 	cmp.w	fp, #16
   824a8:	f103 0308 	add.w	r3, r3, #8
   824ac:	dd18      	ble.n	824e0 <_svfprintf_r+0x2d4>
   824ae:	3201      	adds	r2, #1
   824b0:	48ab      	ldr	r0, [pc, #684]	; (82760 <_svfprintf_r+0x554>)
   824b2:	3110      	adds	r1, #16
   824b4:	2a07      	cmp	r2, #7
   824b6:	9127      	str	r1, [sp, #156]	; 0x9c
   824b8:	9226      	str	r2, [sp, #152]	; 0x98
   824ba:	e883 0081 	stmia.w	r3, {r0, r7}
   824be:	ddef      	ble.n	824a0 <_svfprintf_r+0x294>
   824c0:	aa25      	add	r2, sp, #148	; 0x94
   824c2:	4629      	mov	r1, r5
   824c4:	4620      	mov	r0, r4
   824c6:	f002 ffa7 	bl	85418 <__ssprint_r>
   824ca:	2800      	cmp	r0, #0
   824cc:	f47f af7b 	bne.w	823c6 <_svfprintf_r+0x1ba>
   824d0:	f1ab 0b10 	sub.w	fp, fp, #16
   824d4:	f1bb 0f10 	cmp.w	fp, #16
   824d8:	464b      	mov	r3, r9
   824da:	9927      	ldr	r1, [sp, #156]	; 0x9c
   824dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   824de:	dce6      	bgt.n	824ae <_svfprintf_r+0x2a2>
   824e0:	4645      	mov	r5, r8
   824e2:	460c      	mov	r4, r1
   824e4:	4698      	mov	r8, r3
   824e6:	3201      	adds	r2, #1
   824e8:	4b9d      	ldr	r3, [pc, #628]	; (82760 <_svfprintf_r+0x554>)
   824ea:	445c      	add	r4, fp
   824ec:	2a07      	cmp	r2, #7
   824ee:	9427      	str	r4, [sp, #156]	; 0x9c
   824f0:	9226      	str	r2, [sp, #152]	; 0x98
   824f2:	e888 0808 	stmia.w	r8, {r3, fp}
   824f6:	f300 82c3 	bgt.w	82a80 <_svfprintf_r+0x874>
   824fa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   824fe:	f108 0808 	add.w	r8, r8, #8
   82502:	b187      	cbz	r7, 82526 <_svfprintf_r+0x31a>
   82504:	2101      	movs	r1, #1
   82506:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82508:	440c      	add	r4, r1
   8250a:	440b      	add	r3, r1
   8250c:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   82510:	2b07      	cmp	r3, #7
   82512:	9427      	str	r4, [sp, #156]	; 0x9c
   82514:	9326      	str	r3, [sp, #152]	; 0x98
   82516:	f8c8 1004 	str.w	r1, [r8, #4]
   8251a:	f8c8 2000 	str.w	r2, [r8]
   8251e:	f300 83cd 	bgt.w	82cbc <_svfprintf_r+0xab0>
   82522:	f108 0808 	add.w	r8, r8, #8
   82526:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82528:	b17b      	cbz	r3, 8254a <_svfprintf_r+0x33e>
   8252a:	2102      	movs	r1, #2
   8252c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8252e:	440c      	add	r4, r1
   82530:	3301      	adds	r3, #1
   82532:	aa1e      	add	r2, sp, #120	; 0x78
   82534:	2b07      	cmp	r3, #7
   82536:	9427      	str	r4, [sp, #156]	; 0x9c
   82538:	9326      	str	r3, [sp, #152]	; 0x98
   8253a:	f8c8 1004 	str.w	r1, [r8, #4]
   8253e:	f8c8 2000 	str.w	r2, [r8]
   82542:	f300 8411 	bgt.w	82d68 <_svfprintf_r+0xb5c>
   82546:	f108 0808 	add.w	r8, r8, #8
   8254a:	2d80      	cmp	r5, #128	; 0x80
   8254c:	f000 8304 	beq.w	82b58 <_svfprintf_r+0x94c>
   82550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82552:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82554:	1a9f      	subs	r7, r3, r2
   82556:	2f00      	cmp	r7, #0
   82558:	dd37      	ble.n	825ca <_svfprintf_r+0x3be>
   8255a:	2f10      	cmp	r7, #16
   8255c:	f340 8679 	ble.w	83252 <_svfprintf_r+0x1046>
   82560:	4d80      	ldr	r5, [pc, #512]	; (82764 <_svfprintf_r+0x558>)
   82562:	4642      	mov	r2, r8
   82564:	4621      	mov	r1, r4
   82566:	46b0      	mov	r8, r6
   82568:	f04f 0b10 	mov.w	fp, #16
   8256c:	462e      	mov	r6, r5
   8256e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82570:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82572:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82574:	e004      	b.n	82580 <_svfprintf_r+0x374>
   82576:	3f10      	subs	r7, #16
   82578:	2f10      	cmp	r7, #16
   8257a:	f102 0208 	add.w	r2, r2, #8
   8257e:	dd15      	ble.n	825ac <_svfprintf_r+0x3a0>
   82580:	3301      	adds	r3, #1
   82582:	3110      	adds	r1, #16
   82584:	2b07      	cmp	r3, #7
   82586:	9127      	str	r1, [sp, #156]	; 0x9c
   82588:	9326      	str	r3, [sp, #152]	; 0x98
   8258a:	e882 0840 	stmia.w	r2, {r6, fp}
   8258e:	ddf2      	ble.n	82576 <_svfprintf_r+0x36a>
   82590:	aa25      	add	r2, sp, #148	; 0x94
   82592:	4629      	mov	r1, r5
   82594:	4620      	mov	r0, r4
   82596:	f002 ff3f 	bl	85418 <__ssprint_r>
   8259a:	2800      	cmp	r0, #0
   8259c:	f47f af13 	bne.w	823c6 <_svfprintf_r+0x1ba>
   825a0:	3f10      	subs	r7, #16
   825a2:	2f10      	cmp	r7, #16
   825a4:	464a      	mov	r2, r9
   825a6:	9927      	ldr	r1, [sp, #156]	; 0x9c
   825a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   825aa:	dce9      	bgt.n	82580 <_svfprintf_r+0x374>
   825ac:	4635      	mov	r5, r6
   825ae:	460c      	mov	r4, r1
   825b0:	4646      	mov	r6, r8
   825b2:	4690      	mov	r8, r2
   825b4:	3301      	adds	r3, #1
   825b6:	443c      	add	r4, r7
   825b8:	2b07      	cmp	r3, #7
   825ba:	9427      	str	r4, [sp, #156]	; 0x9c
   825bc:	9326      	str	r3, [sp, #152]	; 0x98
   825be:	e888 00a0 	stmia.w	r8, {r5, r7}
   825c2:	f300 8370 	bgt.w	82ca6 <_svfprintf_r+0xa9a>
   825c6:	f108 0808 	add.w	r8, r8, #8
   825ca:	9b07      	ldr	r3, [sp, #28]
   825cc:	05df      	lsls	r7, r3, #23
   825ce:	f100 8264 	bmi.w	82a9a <_svfprintf_r+0x88e>
   825d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   825d4:	990e      	ldr	r1, [sp, #56]	; 0x38
   825d6:	3301      	adds	r3, #1
   825d8:	440c      	add	r4, r1
   825da:	2b07      	cmp	r3, #7
   825dc:	9427      	str	r4, [sp, #156]	; 0x9c
   825de:	f8c8 6000 	str.w	r6, [r8]
   825e2:	f8c8 1004 	str.w	r1, [r8, #4]
   825e6:	9326      	str	r3, [sp, #152]	; 0x98
   825e8:	f300 83b3 	bgt.w	82d52 <_svfprintf_r+0xb46>
   825ec:	f108 0808 	add.w	r8, r8, #8
   825f0:	9b07      	ldr	r3, [sp, #28]
   825f2:	075b      	lsls	r3, r3, #29
   825f4:	d53b      	bpl.n	8266e <_svfprintf_r+0x462>
   825f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   825f8:	9a08      	ldr	r2, [sp, #32]
   825fa:	1a9d      	subs	r5, r3, r2
   825fc:	2d00      	cmp	r5, #0
   825fe:	dd36      	ble.n	8266e <_svfprintf_r+0x462>
   82600:	2d10      	cmp	r5, #16
   82602:	f340 8721 	ble.w	83448 <_svfprintf_r+0x123c>
   82606:	2610      	movs	r6, #16
   82608:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8260a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8260c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   82610:	e004      	b.n	8261c <_svfprintf_r+0x410>
   82612:	3d10      	subs	r5, #16
   82614:	2d10      	cmp	r5, #16
   82616:	f108 0808 	add.w	r8, r8, #8
   8261a:	dd16      	ble.n	8264a <_svfprintf_r+0x43e>
   8261c:	3301      	adds	r3, #1
   8261e:	4a50      	ldr	r2, [pc, #320]	; (82760 <_svfprintf_r+0x554>)
   82620:	3410      	adds	r4, #16
   82622:	2b07      	cmp	r3, #7
   82624:	9427      	str	r4, [sp, #156]	; 0x9c
   82626:	9326      	str	r3, [sp, #152]	; 0x98
   82628:	e888 0044 	stmia.w	r8, {r2, r6}
   8262c:	ddf1      	ble.n	82612 <_svfprintf_r+0x406>
   8262e:	aa25      	add	r2, sp, #148	; 0x94
   82630:	4659      	mov	r1, fp
   82632:	4638      	mov	r0, r7
   82634:	f002 fef0 	bl	85418 <__ssprint_r>
   82638:	2800      	cmp	r0, #0
   8263a:	f47f aec4 	bne.w	823c6 <_svfprintf_r+0x1ba>
   8263e:	3d10      	subs	r5, #16
   82640:	2d10      	cmp	r5, #16
   82642:	46c8      	mov	r8, r9
   82644:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82646:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82648:	dce8      	bgt.n	8261c <_svfprintf_r+0x410>
   8264a:	3301      	adds	r3, #1
   8264c:	4a44      	ldr	r2, [pc, #272]	; (82760 <_svfprintf_r+0x554>)
   8264e:	442c      	add	r4, r5
   82650:	2b07      	cmp	r3, #7
   82652:	9427      	str	r4, [sp, #156]	; 0x9c
   82654:	9326      	str	r3, [sp, #152]	; 0x98
   82656:	e888 0024 	stmia.w	r8, {r2, r5}
   8265a:	dd08      	ble.n	8266e <_svfprintf_r+0x462>
   8265c:	aa25      	add	r2, sp, #148	; 0x94
   8265e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82660:	980c      	ldr	r0, [sp, #48]	; 0x30
   82662:	f002 fed9 	bl	85418 <__ssprint_r>
   82666:	2800      	cmp	r0, #0
   82668:	f47f aead 	bne.w	823c6 <_svfprintf_r+0x1ba>
   8266c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8266e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   82672:	9908      	ldr	r1, [sp, #32]
   82674:	428a      	cmp	r2, r1
   82676:	bfac      	ite	ge
   82678:	189b      	addge	r3, r3, r2
   8267a:	185b      	addlt	r3, r3, r1
   8267c:	9309      	str	r3, [sp, #36]	; 0x24
   8267e:	2c00      	cmp	r4, #0
   82680:	f040 82fb 	bne.w	82c7a <_svfprintf_r+0xa6e>
   82684:	2300      	movs	r3, #0
   82686:	46c8      	mov	r8, r9
   82688:	9326      	str	r3, [sp, #152]	; 0x98
   8268a:	e5e6      	b.n	8225a <_svfprintf_r+0x4e>
   8268c:	9311      	str	r3, [sp, #68]	; 0x44
   8268e:	f01b 0320 	ands.w	r3, fp, #32
   82692:	f040 8145 	bne.w	82920 <_svfprintf_r+0x714>
   82696:	f01b 0210 	ands.w	r2, fp, #16
   8269a:	f040 8466 	bne.w	82f6a <_svfprintf_r+0xd5e>
   8269e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   826a2:	f000 8462 	beq.w	82f6a <_svfprintf_r+0xd5e>
   826a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   826a8:	4613      	mov	r3, r2
   826aa:	460a      	mov	r2, r1
   826ac:	3204      	adds	r2, #4
   826ae:	880c      	ldrh	r4, [r1, #0]
   826b0:	2500      	movs	r5, #0
   826b2:	920f      	str	r2, [sp, #60]	; 0x3c
   826b4:	e6a8      	b.n	82408 <_svfprintf_r+0x1fc>
   826b6:	2500      	movs	r5, #0
   826b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   826ba:	9311      	str	r3, [sp, #68]	; 0x44
   826bc:	6816      	ldr	r6, [r2, #0]
   826be:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   826c2:	1d14      	adds	r4, r2, #4
   826c4:	2e00      	cmp	r6, #0
   826c6:	f000 86cd 	beq.w	83464 <_svfprintf_r+0x1258>
   826ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   826cc:	1c53      	adds	r3, r2, #1
   826ce:	f000 861b 	beq.w	83308 <_svfprintf_r+0x10fc>
   826d2:	4629      	mov	r1, r5
   826d4:	4630      	mov	r0, r6
   826d6:	f002 fac9 	bl	84c6c <memchr>
   826da:	2800      	cmp	r0, #0
   826dc:	f000 870d 	beq.w	834fa <_svfprintf_r+0x12ee>
   826e0:	1b83      	subs	r3, r0, r6
   826e2:	950a      	str	r5, [sp, #40]	; 0x28
   826e4:	930e      	str	r3, [sp, #56]	; 0x38
   826e6:	940f      	str	r4, [sp, #60]	; 0x3c
   826e8:	f8cd b01c 	str.w	fp, [sp, #28]
   826ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   826f0:	9308      	str	r3, [sp, #32]
   826f2:	9512      	str	r5, [sp, #72]	; 0x48
   826f4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   826f8:	e6ac      	b.n	82454 <_svfprintf_r+0x248>
   826fa:	f89a 3000 	ldrb.w	r3, [sl]
   826fe:	f10a 0401 	add.w	r4, sl, #1
   82702:	2b2a      	cmp	r3, #42	; 0x2a
   82704:	f000 87c2 	beq.w	8368c <_svfprintf_r+0x1480>
   82708:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8270c:	2809      	cmp	r0, #9
   8270e:	46a2      	mov	sl, r4
   82710:	f200 8718 	bhi.w	83544 <_svfprintf_r+0x1338>
   82714:	2300      	movs	r3, #0
   82716:	461c      	mov	r4, r3
   82718:	f81a 3b01 	ldrb.w	r3, [sl], #1
   8271c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82720:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   82724:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82728:	2809      	cmp	r0, #9
   8272a:	d9f5      	bls.n	82718 <_svfprintf_r+0x50c>
   8272c:	940a      	str	r4, [sp, #40]	; 0x28
   8272e:	e5c9      	b.n	822c4 <_svfprintf_r+0xb8>
   82730:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   82734:	f89a 3000 	ldrb.w	r3, [sl]
   82738:	e5c2      	b.n	822c0 <_svfprintf_r+0xb4>
   8273a:	f04b 0b10 	orr.w	fp, fp, #16
   8273e:	f01b 0f20 	tst.w	fp, #32
   82742:	9311      	str	r3, [sp, #68]	; 0x44
   82744:	f43f ae51 	beq.w	823ea <_svfprintf_r+0x1de>
   82748:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8274a:	3407      	adds	r4, #7
   8274c:	f024 0307 	bic.w	r3, r4, #7
   82750:	f103 0208 	add.w	r2, r3, #8
   82754:	e9d3 4500 	ldrd	r4, r5, [r3]
   82758:	920f      	str	r2, [sp, #60]	; 0x3c
   8275a:	2301      	movs	r3, #1
   8275c:	e654      	b.n	82408 <_svfprintf_r+0x1fc>
   8275e:	bf00      	nop
   82760:	00086bf8 	.word	0x00086bf8
   82764:	00086c08 	.word	0x00086c08
   82768:	9311      	str	r3, [sp, #68]	; 0x44
   8276a:	2a00      	cmp	r2, #0
   8276c:	f040 87ad 	bne.w	836ca <_svfprintf_r+0x14be>
   82770:	4bbe      	ldr	r3, [pc, #760]	; (82a6c <_svfprintf_r+0x860>)
   82772:	f01b 0f20 	tst.w	fp, #32
   82776:	9318      	str	r3, [sp, #96]	; 0x60
   82778:	f040 80e7 	bne.w	8294a <_svfprintf_r+0x73e>
   8277c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8277e:	f01b 0f10 	tst.w	fp, #16
   82782:	4613      	mov	r3, r2
   82784:	f040 83d8 	bne.w	82f38 <_svfprintf_r+0xd2c>
   82788:	f01b 0f40 	tst.w	fp, #64	; 0x40
   8278c:	f000 83d4 	beq.w	82f38 <_svfprintf_r+0xd2c>
   82790:	2500      	movs	r5, #0
   82792:	3304      	adds	r3, #4
   82794:	8814      	ldrh	r4, [r2, #0]
   82796:	930f      	str	r3, [sp, #60]	; 0x3c
   82798:	f01b 0f01 	tst.w	fp, #1
   8279c:	f000 80e3 	beq.w	82966 <_svfprintf_r+0x75a>
   827a0:	ea54 0305 	orrs.w	r3, r4, r5
   827a4:	f000 80df 	beq.w	82966 <_svfprintf_r+0x75a>
   827a8:	2330      	movs	r3, #48	; 0x30
   827aa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   827ae:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   827b2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   827b6:	f04b 0b02 	orr.w	fp, fp, #2
   827ba:	2302      	movs	r3, #2
   827bc:	e624      	b.n	82408 <_svfprintf_r+0x1fc>
   827be:	2201      	movs	r2, #1
   827c0:	9311      	str	r3, [sp, #68]	; 0x44
   827c2:	2300      	movs	r3, #0
   827c4:	4611      	mov	r1, r2
   827c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   827c8:	9208      	str	r2, [sp, #32]
   827ca:	6802      	ldr	r2, [r0, #0]
   827cc:	461f      	mov	r7, r3
   827ce:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   827d2:	930a      	str	r3, [sp, #40]	; 0x28
   827d4:	9312      	str	r3, [sp, #72]	; 0x48
   827d6:	1d03      	adds	r3, r0, #4
   827d8:	f8cd b01c 	str.w	fp, [sp, #28]
   827dc:	910e      	str	r1, [sp, #56]	; 0x38
   827de:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   827e2:	930f      	str	r3, [sp, #60]	; 0x3c
   827e4:	ae28      	add	r6, sp, #160	; 0xa0
   827e6:	e639      	b.n	8245c <_svfprintf_r+0x250>
   827e8:	9311      	str	r3, [sp, #68]	; 0x44
   827ea:	2a00      	cmp	r2, #0
   827ec:	f040 8784 	bne.w	836f8 <_svfprintf_r+0x14ec>
   827f0:	f04b 0b10 	orr.w	fp, fp, #16
   827f4:	f01b 0f20 	tst.w	fp, #32
   827f8:	f040 8475 	bne.w	830e6 <_svfprintf_r+0xeda>
   827fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   827fe:	f01b 0f10 	tst.w	fp, #16
   82802:	4613      	mov	r3, r2
   82804:	f040 839d 	bne.w	82f42 <_svfprintf_r+0xd36>
   82808:	f01b 0f40 	tst.w	fp, #64	; 0x40
   8280c:	f000 8399 	beq.w	82f42 <_svfprintf_r+0xd36>
   82810:	f9b2 4000 	ldrsh.w	r4, [r2]
   82814:	3304      	adds	r3, #4
   82816:	17e5      	asrs	r5, r4, #31
   82818:	930f      	str	r3, [sp, #60]	; 0x3c
   8281a:	4622      	mov	r2, r4
   8281c:	462b      	mov	r3, r5
   8281e:	2a00      	cmp	r2, #0
   82820:	f173 0300 	sbcs.w	r3, r3, #0
   82824:	f2c0 8398 	blt.w	82f58 <_svfprintf_r+0xd4c>
   82828:	990a      	ldr	r1, [sp, #40]	; 0x28
   8282a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8282e:	1c4a      	adds	r2, r1, #1
   82830:	f04f 0301 	mov.w	r3, #1
   82834:	f47f adf0 	bne.w	82418 <_svfprintf_r+0x20c>
   82838:	ea54 0205 	orrs.w	r2, r4, r5
   8283c:	f000 8229 	beq.w	82c92 <_svfprintf_r+0xa86>
   82840:	f8cd b01c 	str.w	fp, [sp, #28]
   82844:	2b01      	cmp	r3, #1
   82846:	f000 830e 	beq.w	82e66 <_svfprintf_r+0xc5a>
   8284a:	2b02      	cmp	r3, #2
   8284c:	f040 829c 	bne.w	82d88 <_svfprintf_r+0xb7c>
   82850:	464e      	mov	r6, r9
   82852:	9818      	ldr	r0, [sp, #96]	; 0x60
   82854:	0923      	lsrs	r3, r4, #4
   82856:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8285a:	0929      	lsrs	r1, r5, #4
   8285c:	f004 020f 	and.w	r2, r4, #15
   82860:	460d      	mov	r5, r1
   82862:	461c      	mov	r4, r3
   82864:	5c83      	ldrb	r3, [r0, r2]
   82866:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8286a:	ea54 0305 	orrs.w	r3, r4, r5
   8286e:	d1f1      	bne.n	82854 <_svfprintf_r+0x648>
   82870:	eba9 0306 	sub.w	r3, r9, r6
   82874:	930e      	str	r3, [sp, #56]	; 0x38
   82876:	e5e5      	b.n	82444 <_svfprintf_r+0x238>
   82878:	9311      	str	r3, [sp, #68]	; 0x44
   8287a:	2a00      	cmp	r2, #0
   8287c:	f040 8738 	bne.w	836f0 <_svfprintf_r+0x14e4>
   82880:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82882:	f01b 0f08 	tst.w	fp, #8
   82886:	f104 0407 	add.w	r4, r4, #7
   8288a:	f000 84cf 	beq.w	8322c <_svfprintf_r+0x1020>
   8288e:	f024 0307 	bic.w	r3, r4, #7
   82892:	f103 0208 	add.w	r2, r3, #8
   82896:	920f      	str	r2, [sp, #60]	; 0x3c
   82898:	681a      	ldr	r2, [r3, #0]
   8289a:	685b      	ldr	r3, [r3, #4]
   8289c:	9215      	str	r2, [sp, #84]	; 0x54
   8289e:	9314      	str	r3, [sp, #80]	; 0x50
   828a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   828a2:	9d15      	ldr	r5, [sp, #84]	; 0x54
   828a4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   828a8:	4628      	mov	r0, r5
   828aa:	4621      	mov	r1, r4
   828ac:	f04f 32ff 	mov.w	r2, #4294967295
   828b0:	4b6f      	ldr	r3, [pc, #444]	; (82a70 <_svfprintf_r+0x864>)
   828b2:	f003 fe6f 	bl	86594 <__aeabi_dcmpun>
   828b6:	2800      	cmp	r0, #0
   828b8:	f040 8434 	bne.w	83124 <_svfprintf_r+0xf18>
   828bc:	4628      	mov	r0, r5
   828be:	4621      	mov	r1, r4
   828c0:	f04f 32ff 	mov.w	r2, #4294967295
   828c4:	4b6a      	ldr	r3, [pc, #424]	; (82a70 <_svfprintf_r+0x864>)
   828c6:	f003 fe47 	bl	86558 <__aeabi_dcmple>
   828ca:	2800      	cmp	r0, #0
   828cc:	f040 842a 	bne.w	83124 <_svfprintf_r+0xf18>
   828d0:	a815      	add	r0, sp, #84	; 0x54
   828d2:	c80d      	ldmia	r0, {r0, r2, r3}
   828d4:	9914      	ldr	r1, [sp, #80]	; 0x50
   828d6:	f003 fe35 	bl	86544 <__aeabi_dcmplt>
   828da:	2800      	cmp	r0, #0
   828dc:	f040 85d4 	bne.w	83488 <_svfprintf_r+0x127c>
   828e0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   828e4:	2303      	movs	r3, #3
   828e6:	461a      	mov	r2, r3
   828e8:	9308      	str	r3, [sp, #32]
   828ea:	2300      	movs	r3, #0
   828ec:	4e61      	ldr	r6, [pc, #388]	; (82a74 <_svfprintf_r+0x868>)
   828ee:	4619      	mov	r1, r3
   828f0:	930a      	str	r3, [sp, #40]	; 0x28
   828f2:	4b61      	ldr	r3, [pc, #388]	; (82a78 <_svfprintf_r+0x86c>)
   828f4:	920e      	str	r2, [sp, #56]	; 0x38
   828f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   828f8:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   828fc:	9007      	str	r0, [sp, #28]
   828fe:	9112      	str	r1, [sp, #72]	; 0x48
   82900:	2a47      	cmp	r2, #71	; 0x47
   82902:	bfd8      	it	le
   82904:	461e      	movle	r6, r3
   82906:	e5a5      	b.n	82454 <_svfprintf_r+0x248>
   82908:	f04b 0b08 	orr.w	fp, fp, #8
   8290c:	f89a 3000 	ldrb.w	r3, [sl]
   82910:	e4d6      	b.n	822c0 <_svfprintf_r+0xb4>
   82912:	f04b 0b10 	orr.w	fp, fp, #16
   82916:	9311      	str	r3, [sp, #68]	; 0x44
   82918:	f01b 0320 	ands.w	r3, fp, #32
   8291c:	f43f aebb 	beq.w	82696 <_svfprintf_r+0x48a>
   82920:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82922:	3407      	adds	r4, #7
   82924:	f024 0307 	bic.w	r3, r4, #7
   82928:	f103 0208 	add.w	r2, r3, #8
   8292c:	e9d3 4500 	ldrd	r4, r5, [r3]
   82930:	920f      	str	r2, [sp, #60]	; 0x3c
   82932:	2300      	movs	r3, #0
   82934:	e568      	b.n	82408 <_svfprintf_r+0x1fc>
   82936:	9311      	str	r3, [sp, #68]	; 0x44
   82938:	2a00      	cmp	r2, #0
   8293a:	f040 86c2 	bne.w	836c2 <_svfprintf_r+0x14b6>
   8293e:	4b4f      	ldr	r3, [pc, #316]	; (82a7c <_svfprintf_r+0x870>)
   82940:	f01b 0f20 	tst.w	fp, #32
   82944:	9318      	str	r3, [sp, #96]	; 0x60
   82946:	f43f af19 	beq.w	8277c <_svfprintf_r+0x570>
   8294a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8294c:	f01b 0f01 	tst.w	fp, #1
   82950:	f104 0407 	add.w	r4, r4, #7
   82954:	f024 0307 	bic.w	r3, r4, #7
   82958:	f103 0208 	add.w	r2, r3, #8
   8295c:	920f      	str	r2, [sp, #60]	; 0x3c
   8295e:	e9d3 4500 	ldrd	r4, r5, [r3]
   82962:	f47f af1d 	bne.w	827a0 <_svfprintf_r+0x594>
   82966:	2302      	movs	r3, #2
   82968:	e54e      	b.n	82408 <_svfprintf_r+0x1fc>
   8296a:	f89a 3000 	ldrb.w	r3, [sl]
   8296e:	2900      	cmp	r1, #0
   82970:	f47f aca6 	bne.w	822c0 <_svfprintf_r+0xb4>
   82974:	2201      	movs	r2, #1
   82976:	2120      	movs	r1, #32
   82978:	e4a2      	b.n	822c0 <_svfprintf_r+0xb4>
   8297a:	f04b 0b01 	orr.w	fp, fp, #1
   8297e:	f89a 3000 	ldrb.w	r3, [sl]
   82982:	e49d      	b.n	822c0 <_svfprintf_r+0xb4>
   82984:	f89a 3000 	ldrb.w	r3, [sl]
   82988:	2201      	movs	r2, #1
   8298a:	212b      	movs	r1, #43	; 0x2b
   8298c:	e498      	b.n	822c0 <_svfprintf_r+0xb4>
   8298e:	f04b 0b20 	orr.w	fp, fp, #32
   82992:	f89a 3000 	ldrb.w	r3, [sl]
   82996:	e493      	b.n	822c0 <_svfprintf_r+0xb4>
   82998:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   8299c:	f89a 3000 	ldrb.w	r3, [sl]
   829a0:	e48e      	b.n	822c0 <_svfprintf_r+0xb4>
   829a2:	f89a 3000 	ldrb.w	r3, [sl]
   829a6:	2b6c      	cmp	r3, #108	; 0x6c
   829a8:	bf03      	ittte	eq
   829aa:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   829ae:	f04b 0b20 	orreq.w	fp, fp, #32
   829b2:	f10a 0a01 	addeq.w	sl, sl, #1
   829b6:	f04b 0b10 	orrne.w	fp, fp, #16
   829ba:	e481      	b.n	822c0 <_svfprintf_r+0xb4>
   829bc:	2a00      	cmp	r2, #0
   829be:	f040 867c 	bne.w	836ba <_svfprintf_r+0x14ae>
   829c2:	f01b 0f20 	tst.w	fp, #32
   829c6:	f040 8452 	bne.w	8326e <_svfprintf_r+0x1062>
   829ca:	f01b 0f10 	tst.w	fp, #16
   829ce:	f040 8438 	bne.w	83242 <_svfprintf_r+0x1036>
   829d2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   829d6:	f000 8434 	beq.w	83242 <_svfprintf_r+0x1036>
   829da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   829dc:	6813      	ldr	r3, [r2, #0]
   829de:	3204      	adds	r2, #4
   829e0:	920f      	str	r2, [sp, #60]	; 0x3c
   829e2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   829e6:	801a      	strh	r2, [r3, #0]
   829e8:	e437      	b.n	8225a <_svfprintf_r+0x4e>
   829ea:	2378      	movs	r3, #120	; 0x78
   829ec:	2230      	movs	r2, #48	; 0x30
   829ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
   829f0:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   829f4:	9311      	str	r3, [sp, #68]	; 0x44
   829f6:	1d03      	adds	r3, r0, #4
   829f8:	930f      	str	r3, [sp, #60]	; 0x3c
   829fa:	4b20      	ldr	r3, [pc, #128]	; (82a7c <_svfprintf_r+0x870>)
   829fc:	6804      	ldr	r4, [r0, #0]
   829fe:	9318      	str	r3, [sp, #96]	; 0x60
   82a00:	f04b 0b02 	orr.w	fp, fp, #2
   82a04:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   82a08:	2500      	movs	r5, #0
   82a0a:	2302      	movs	r3, #2
   82a0c:	e4fc      	b.n	82408 <_svfprintf_r+0x1fc>
   82a0e:	9311      	str	r3, [sp, #68]	; 0x44
   82a10:	2a00      	cmp	r2, #0
   82a12:	f43f aeef 	beq.w	827f4 <_svfprintf_r+0x5e8>
   82a16:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   82a1a:	e6eb      	b.n	827f4 <_svfprintf_r+0x5e8>
   82a1c:	2000      	movs	r0, #0
   82a1e:	4604      	mov	r4, r0
   82a20:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82a24:	f81a 3b01 	ldrb.w	r3, [sl], #1
   82a28:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82a2c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   82a30:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82a34:	2809      	cmp	r0, #9
   82a36:	d9f5      	bls.n	82a24 <_svfprintf_r+0x818>
   82a38:	940d      	str	r4, [sp, #52]	; 0x34
   82a3a:	e443      	b.n	822c4 <_svfprintf_r+0xb8>
   82a3c:	9311      	str	r3, [sp, #68]	; 0x44
   82a3e:	2a00      	cmp	r2, #0
   82a40:	f040 864a 	bne.w	836d8 <_svfprintf_r+0x14cc>
   82a44:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82a46:	2a00      	cmp	r2, #0
   82a48:	f43f acb6 	beq.w	823b8 <_svfprintf_r+0x1ac>
   82a4c:	2300      	movs	r3, #0
   82a4e:	2101      	movs	r1, #1
   82a50:	461f      	mov	r7, r3
   82a52:	9108      	str	r1, [sp, #32]
   82a54:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   82a58:	f8cd b01c 	str.w	fp, [sp, #28]
   82a5c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   82a60:	930a      	str	r3, [sp, #40]	; 0x28
   82a62:	9312      	str	r3, [sp, #72]	; 0x48
   82a64:	910e      	str	r1, [sp, #56]	; 0x38
   82a66:	ae28      	add	r6, sp, #160	; 0xa0
   82a68:	e4f8      	b.n	8245c <_svfprintf_r+0x250>
   82a6a:	bf00      	nop
   82a6c:	00086bc4 	.word	0x00086bc4
   82a70:	7fefffff 	.word	0x7fefffff
   82a74:	00086bb8 	.word	0x00086bb8
   82a78:	00086bb4 	.word	0x00086bb4
   82a7c:	00086bd8 	.word	0x00086bd8
   82a80:	aa25      	add	r2, sp, #148	; 0x94
   82a82:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82a84:	980c      	ldr	r0, [sp, #48]	; 0x30
   82a86:	f002 fcc7 	bl	85418 <__ssprint_r>
   82a8a:	2800      	cmp	r0, #0
   82a8c:	f47f ac9b 	bne.w	823c6 <_svfprintf_r+0x1ba>
   82a90:	46c8      	mov	r8, r9
   82a92:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82a96:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82a98:	e533      	b.n	82502 <_svfprintf_r+0x2f6>
   82a9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82a9c:	2b65      	cmp	r3, #101	; 0x65
   82a9e:	f340 809a 	ble.w	82bd6 <_svfprintf_r+0x9ca>
   82aa2:	a815      	add	r0, sp, #84	; 0x54
   82aa4:	c80d      	ldmia	r0, {r0, r2, r3}
   82aa6:	9914      	ldr	r1, [sp, #80]	; 0x50
   82aa8:	f003 fd42 	bl	86530 <__aeabi_dcmpeq>
   82aac:	2800      	cmp	r0, #0
   82aae:	f000 8193 	beq.w	82dd8 <_svfprintf_r+0xbcc>
   82ab2:	2101      	movs	r1, #1
   82ab4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82ab6:	4ab5      	ldr	r2, [pc, #724]	; (82d8c <_svfprintf_r+0xb80>)
   82ab8:	440b      	add	r3, r1
   82aba:	440c      	add	r4, r1
   82abc:	2b07      	cmp	r3, #7
   82abe:	9427      	str	r4, [sp, #156]	; 0x9c
   82ac0:	9326      	str	r3, [sp, #152]	; 0x98
   82ac2:	f8c8 1004 	str.w	r1, [r8, #4]
   82ac6:	f8c8 2000 	str.w	r2, [r8]
   82aca:	f300 83c6 	bgt.w	8325a <_svfprintf_r+0x104e>
   82ace:	f108 0808 	add.w	r8, r8, #8
   82ad2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   82ad4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   82ad6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82ad8:	4293      	cmp	r3, r2
   82ada:	db03      	blt.n	82ae4 <_svfprintf_r+0x8d8>
   82adc:	9b07      	ldr	r3, [sp, #28]
   82ade:	07dd      	lsls	r5, r3, #31
   82ae0:	f57f ad86 	bpl.w	825f0 <_svfprintf_r+0x3e4>
   82ae4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82ae6:	9919      	ldr	r1, [sp, #100]	; 0x64
   82ae8:	3301      	adds	r3, #1
   82aea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   82aec:	440c      	add	r4, r1
   82aee:	2b07      	cmp	r3, #7
   82af0:	f8c8 2000 	str.w	r2, [r8]
   82af4:	f8c8 1004 	str.w	r1, [r8, #4]
   82af8:	9427      	str	r4, [sp, #156]	; 0x9c
   82afa:	9326      	str	r3, [sp, #152]	; 0x98
   82afc:	f300 83c4 	bgt.w	83288 <_svfprintf_r+0x107c>
   82b00:	f108 0808 	add.w	r8, r8, #8
   82b04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82b06:	1e5e      	subs	r6, r3, #1
   82b08:	2e00      	cmp	r6, #0
   82b0a:	f77f ad71 	ble.w	825f0 <_svfprintf_r+0x3e4>
   82b0e:	2e10      	cmp	r6, #16
   82b10:	f340 8575 	ble.w	835fe <_svfprintf_r+0x13f2>
   82b14:	4622      	mov	r2, r4
   82b16:	2710      	movs	r7, #16
   82b18:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82b1a:	4d9d      	ldr	r5, [pc, #628]	; (82d90 <_svfprintf_r+0xb84>)
   82b1c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   82b20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   82b22:	e005      	b.n	82b30 <_svfprintf_r+0x924>
   82b24:	f108 0808 	add.w	r8, r8, #8
   82b28:	3e10      	subs	r6, #16
   82b2a:	2e10      	cmp	r6, #16
   82b2c:	f340 8225 	ble.w	82f7a <_svfprintf_r+0xd6e>
   82b30:	3301      	adds	r3, #1
   82b32:	3210      	adds	r2, #16
   82b34:	2b07      	cmp	r3, #7
   82b36:	9227      	str	r2, [sp, #156]	; 0x9c
   82b38:	9326      	str	r3, [sp, #152]	; 0x98
   82b3a:	e888 00a0 	stmia.w	r8, {r5, r7}
   82b3e:	ddf1      	ble.n	82b24 <_svfprintf_r+0x918>
   82b40:	aa25      	add	r2, sp, #148	; 0x94
   82b42:	4621      	mov	r1, r4
   82b44:	4658      	mov	r0, fp
   82b46:	f002 fc67 	bl	85418 <__ssprint_r>
   82b4a:	2800      	cmp	r0, #0
   82b4c:	f47f ac3b 	bne.w	823c6 <_svfprintf_r+0x1ba>
   82b50:	46c8      	mov	r8, r9
   82b52:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   82b54:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82b56:	e7e7      	b.n	82b28 <_svfprintf_r+0x91c>
   82b58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82b5a:	9a08      	ldr	r2, [sp, #32]
   82b5c:	1a9f      	subs	r7, r3, r2
   82b5e:	2f00      	cmp	r7, #0
   82b60:	f77f acf6 	ble.w	82550 <_svfprintf_r+0x344>
   82b64:	2f10      	cmp	r7, #16
   82b66:	f340 84a8 	ble.w	834ba <_svfprintf_r+0x12ae>
   82b6a:	4d89      	ldr	r5, [pc, #548]	; (82d90 <_svfprintf_r+0xb84>)
   82b6c:	4642      	mov	r2, r8
   82b6e:	4621      	mov	r1, r4
   82b70:	46b0      	mov	r8, r6
   82b72:	f04f 0b10 	mov.w	fp, #16
   82b76:	462e      	mov	r6, r5
   82b78:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82b7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82b7c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82b7e:	e004      	b.n	82b8a <_svfprintf_r+0x97e>
   82b80:	3f10      	subs	r7, #16
   82b82:	2f10      	cmp	r7, #16
   82b84:	f102 0208 	add.w	r2, r2, #8
   82b88:	dd15      	ble.n	82bb6 <_svfprintf_r+0x9aa>
   82b8a:	3301      	adds	r3, #1
   82b8c:	3110      	adds	r1, #16
   82b8e:	2b07      	cmp	r3, #7
   82b90:	9127      	str	r1, [sp, #156]	; 0x9c
   82b92:	9326      	str	r3, [sp, #152]	; 0x98
   82b94:	e882 0840 	stmia.w	r2, {r6, fp}
   82b98:	ddf2      	ble.n	82b80 <_svfprintf_r+0x974>
   82b9a:	aa25      	add	r2, sp, #148	; 0x94
   82b9c:	4629      	mov	r1, r5
   82b9e:	4620      	mov	r0, r4
   82ba0:	f002 fc3a 	bl	85418 <__ssprint_r>
   82ba4:	2800      	cmp	r0, #0
   82ba6:	f47f ac0e 	bne.w	823c6 <_svfprintf_r+0x1ba>
   82baa:	3f10      	subs	r7, #16
   82bac:	2f10      	cmp	r7, #16
   82bae:	464a      	mov	r2, r9
   82bb0:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82bb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82bb4:	dce9      	bgt.n	82b8a <_svfprintf_r+0x97e>
   82bb6:	4635      	mov	r5, r6
   82bb8:	460c      	mov	r4, r1
   82bba:	4646      	mov	r6, r8
   82bbc:	4690      	mov	r8, r2
   82bbe:	3301      	adds	r3, #1
   82bc0:	443c      	add	r4, r7
   82bc2:	2b07      	cmp	r3, #7
   82bc4:	9427      	str	r4, [sp, #156]	; 0x9c
   82bc6:	9326      	str	r3, [sp, #152]	; 0x98
   82bc8:	e888 00a0 	stmia.w	r8, {r5, r7}
   82bcc:	f300 829e 	bgt.w	8310c <_svfprintf_r+0xf00>
   82bd0:	f108 0808 	add.w	r8, r8, #8
   82bd4:	e4bc      	b.n	82550 <_svfprintf_r+0x344>
   82bd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82bd8:	2b01      	cmp	r3, #1
   82bda:	f340 824f 	ble.w	8307c <_svfprintf_r+0xe70>
   82bde:	2301      	movs	r3, #1
   82be0:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82be2:	441c      	add	r4, r3
   82be4:	441f      	add	r7, r3
   82be6:	2f07      	cmp	r7, #7
   82be8:	9427      	str	r4, [sp, #156]	; 0x9c
   82bea:	f8c8 6000 	str.w	r6, [r8]
   82bee:	9726      	str	r7, [sp, #152]	; 0x98
   82bf0:	f8c8 3004 	str.w	r3, [r8, #4]
   82bf4:	f300 825f 	bgt.w	830b6 <_svfprintf_r+0xeaa>
   82bf8:	f108 0808 	add.w	r8, r8, #8
   82bfc:	9a19      	ldr	r2, [sp, #100]	; 0x64
   82bfe:	3701      	adds	r7, #1
   82c00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   82c02:	4414      	add	r4, r2
   82c04:	2f07      	cmp	r7, #7
   82c06:	9427      	str	r4, [sp, #156]	; 0x9c
   82c08:	9726      	str	r7, [sp, #152]	; 0x98
   82c0a:	f8c8 3000 	str.w	r3, [r8]
   82c0e:	f8c8 2004 	str.w	r2, [r8, #4]
   82c12:	f300 825c 	bgt.w	830ce <_svfprintf_r+0xec2>
   82c16:	f108 0808 	add.w	r8, r8, #8
   82c1a:	a815      	add	r0, sp, #84	; 0x54
   82c1c:	c80d      	ldmia	r0, {r0, r2, r3}
   82c1e:	9914      	ldr	r1, [sp, #80]	; 0x50
   82c20:	f003 fc86 	bl	86530 <__aeabi_dcmpeq>
   82c24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82c26:	2800      	cmp	r0, #0
   82c28:	f040 8141 	bne.w	82eae <_svfprintf_r+0xca2>
   82c2c:	3b01      	subs	r3, #1
   82c2e:	3701      	adds	r7, #1
   82c30:	3601      	adds	r6, #1
   82c32:	441c      	add	r4, r3
   82c34:	2f07      	cmp	r7, #7
   82c36:	f8c8 6000 	str.w	r6, [r8]
   82c3a:	9726      	str	r7, [sp, #152]	; 0x98
   82c3c:	9427      	str	r4, [sp, #156]	; 0x9c
   82c3e:	f8c8 3004 	str.w	r3, [r8, #4]
   82c42:	f300 8166 	bgt.w	82f12 <_svfprintf_r+0xd06>
   82c46:	f108 0808 	add.w	r8, r8, #8
   82c4a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   82c4c:	3701      	adds	r7, #1
   82c4e:	4414      	add	r4, r2
   82c50:	ab21      	add	r3, sp, #132	; 0x84
   82c52:	2f07      	cmp	r7, #7
   82c54:	9427      	str	r4, [sp, #156]	; 0x9c
   82c56:	9726      	str	r7, [sp, #152]	; 0x98
   82c58:	f8c8 2004 	str.w	r2, [r8, #4]
   82c5c:	f8c8 3000 	str.w	r3, [r8]
   82c60:	f77f acc4 	ble.w	825ec <_svfprintf_r+0x3e0>
   82c64:	aa25      	add	r2, sp, #148	; 0x94
   82c66:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82c68:	980c      	ldr	r0, [sp, #48]	; 0x30
   82c6a:	f002 fbd5 	bl	85418 <__ssprint_r>
   82c6e:	2800      	cmp	r0, #0
   82c70:	f47f aba9 	bne.w	823c6 <_svfprintf_r+0x1ba>
   82c74:	46c8      	mov	r8, r9
   82c76:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82c78:	e4ba      	b.n	825f0 <_svfprintf_r+0x3e4>
   82c7a:	aa25      	add	r2, sp, #148	; 0x94
   82c7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82c7e:	980c      	ldr	r0, [sp, #48]	; 0x30
   82c80:	f002 fbca 	bl	85418 <__ssprint_r>
   82c84:	2800      	cmp	r0, #0
   82c86:	f43f acfd 	beq.w	82684 <_svfprintf_r+0x478>
   82c8a:	f7ff bb9c 	b.w	823c6 <_svfprintf_r+0x1ba>
   82c8e:	f8dd b01c 	ldr.w	fp, [sp, #28]
   82c92:	2b01      	cmp	r3, #1
   82c94:	f000 817e 	beq.w	82f94 <_svfprintf_r+0xd88>
   82c98:	2b02      	cmp	r3, #2
   82c9a:	d171      	bne.n	82d80 <_svfprintf_r+0xb74>
   82c9c:	f8cd b01c 	str.w	fp, [sp, #28]
   82ca0:	2400      	movs	r4, #0
   82ca2:	2500      	movs	r5, #0
   82ca4:	e5d4      	b.n	82850 <_svfprintf_r+0x644>
   82ca6:	aa25      	add	r2, sp, #148	; 0x94
   82ca8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82caa:	980c      	ldr	r0, [sp, #48]	; 0x30
   82cac:	f002 fbb4 	bl	85418 <__ssprint_r>
   82cb0:	2800      	cmp	r0, #0
   82cb2:	f47f ab88 	bne.w	823c6 <_svfprintf_r+0x1ba>
   82cb6:	46c8      	mov	r8, r9
   82cb8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82cba:	e486      	b.n	825ca <_svfprintf_r+0x3be>
   82cbc:	aa25      	add	r2, sp, #148	; 0x94
   82cbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82cc0:	980c      	ldr	r0, [sp, #48]	; 0x30
   82cc2:	f002 fba9 	bl	85418 <__ssprint_r>
   82cc6:	2800      	cmp	r0, #0
   82cc8:	f47f ab7d 	bne.w	823c6 <_svfprintf_r+0x1ba>
   82ccc:	46c8      	mov	r8, r9
   82cce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82cd0:	e429      	b.n	82526 <_svfprintf_r+0x31a>
   82cd2:	2001      	movs	r0, #1
   82cd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82cd6:	4a2d      	ldr	r2, [pc, #180]	; (82d8c <_svfprintf_r+0xb80>)
   82cd8:	4403      	add	r3, r0
   82cda:	4404      	add	r4, r0
   82cdc:	2b07      	cmp	r3, #7
   82cde:	9427      	str	r4, [sp, #156]	; 0x9c
   82ce0:	9326      	str	r3, [sp, #152]	; 0x98
   82ce2:	f8c8 0004 	str.w	r0, [r8, #4]
   82ce6:	f8c8 2000 	str.w	r2, [r8]
   82cea:	f340 82d8 	ble.w	8329e <_svfprintf_r+0x1092>
   82cee:	aa25      	add	r2, sp, #148	; 0x94
   82cf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82cf2:	980c      	ldr	r0, [sp, #48]	; 0x30
   82cf4:	f002 fb90 	bl	85418 <__ssprint_r>
   82cf8:	2800      	cmp	r0, #0
   82cfa:	f47f ab64 	bne.w	823c6 <_svfprintf_r+0x1ba>
   82cfe:	46c8      	mov	r8, r9
   82d00:	991f      	ldr	r1, [sp, #124]	; 0x7c
   82d02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82d04:	b929      	cbnz	r1, 82d12 <_svfprintf_r+0xb06>
   82d06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82d08:	b91b      	cbnz	r3, 82d12 <_svfprintf_r+0xb06>
   82d0a:	9b07      	ldr	r3, [sp, #28]
   82d0c:	07d8      	lsls	r0, r3, #31
   82d0e:	f57f ac6f 	bpl.w	825f0 <_svfprintf_r+0x3e4>
   82d12:	9819      	ldr	r0, [sp, #100]	; 0x64
   82d14:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82d16:	4602      	mov	r2, r0
   82d18:	3301      	adds	r3, #1
   82d1a:	4422      	add	r2, r4
   82d1c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   82d1e:	2b07      	cmp	r3, #7
   82d20:	9227      	str	r2, [sp, #156]	; 0x9c
   82d22:	f8c8 4000 	str.w	r4, [r8]
   82d26:	f8c8 0004 	str.w	r0, [r8, #4]
   82d2a:	9326      	str	r3, [sp, #152]	; 0x98
   82d2c:	f300 8431 	bgt.w	83592 <_svfprintf_r+0x1386>
   82d30:	f108 0808 	add.w	r8, r8, #8
   82d34:	2900      	cmp	r1, #0
   82d36:	f2c0 8409 	blt.w	8354c <_svfprintf_r+0x1340>
   82d3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   82d3c:	3301      	adds	r3, #1
   82d3e:	188c      	adds	r4, r1, r2
   82d40:	2b07      	cmp	r3, #7
   82d42:	9427      	str	r4, [sp, #156]	; 0x9c
   82d44:	9326      	str	r3, [sp, #152]	; 0x98
   82d46:	f8c8 6000 	str.w	r6, [r8]
   82d4a:	f8c8 1004 	str.w	r1, [r8, #4]
   82d4e:	f77f ac4d 	ble.w	825ec <_svfprintf_r+0x3e0>
   82d52:	aa25      	add	r2, sp, #148	; 0x94
   82d54:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82d56:	980c      	ldr	r0, [sp, #48]	; 0x30
   82d58:	f002 fb5e 	bl	85418 <__ssprint_r>
   82d5c:	2800      	cmp	r0, #0
   82d5e:	f47f ab32 	bne.w	823c6 <_svfprintf_r+0x1ba>
   82d62:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82d64:	46c8      	mov	r8, r9
   82d66:	e443      	b.n	825f0 <_svfprintf_r+0x3e4>
   82d68:	aa25      	add	r2, sp, #148	; 0x94
   82d6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82d6c:	980c      	ldr	r0, [sp, #48]	; 0x30
   82d6e:	f002 fb53 	bl	85418 <__ssprint_r>
   82d72:	2800      	cmp	r0, #0
   82d74:	f47f ab27 	bne.w	823c6 <_svfprintf_r+0x1ba>
   82d78:	46c8      	mov	r8, r9
   82d7a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82d7c:	f7ff bbe5 	b.w	8254a <_svfprintf_r+0x33e>
   82d80:	2400      	movs	r4, #0
   82d82:	2500      	movs	r5, #0
   82d84:	f8cd b01c 	str.w	fp, [sp, #28]
   82d88:	4649      	mov	r1, r9
   82d8a:	e004      	b.n	82d96 <_svfprintf_r+0xb8a>
   82d8c:	00086bf4 	.word	0x00086bf4
   82d90:	00086c08 	.word	0x00086c08
   82d94:	4631      	mov	r1, r6
   82d96:	08e2      	lsrs	r2, r4, #3
   82d98:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   82d9c:	08e8      	lsrs	r0, r5, #3
   82d9e:	f004 0307 	and.w	r3, r4, #7
   82da2:	4605      	mov	r5, r0
   82da4:	4614      	mov	r4, r2
   82da6:	3330      	adds	r3, #48	; 0x30
   82da8:	ea54 0205 	orrs.w	r2, r4, r5
   82dac:	f801 3c01 	strb.w	r3, [r1, #-1]
   82db0:	f101 36ff 	add.w	r6, r1, #4294967295
   82db4:	d1ee      	bne.n	82d94 <_svfprintf_r+0xb88>
   82db6:	9a07      	ldr	r2, [sp, #28]
   82db8:	07d2      	lsls	r2, r2, #31
   82dba:	f57f ad59 	bpl.w	82870 <_svfprintf_r+0x664>
   82dbe:	2b30      	cmp	r3, #48	; 0x30
   82dc0:	f43f ad56 	beq.w	82870 <_svfprintf_r+0x664>
   82dc4:	2330      	movs	r3, #48	; 0x30
   82dc6:	3902      	subs	r1, #2
   82dc8:	f806 3c01 	strb.w	r3, [r6, #-1]
   82dcc:	eba9 0301 	sub.w	r3, r9, r1
   82dd0:	930e      	str	r3, [sp, #56]	; 0x38
   82dd2:	460e      	mov	r6, r1
   82dd4:	f7ff bb36 	b.w	82444 <_svfprintf_r+0x238>
   82dd8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   82dda:	2900      	cmp	r1, #0
   82ddc:	f77f af79 	ble.w	82cd2 <_svfprintf_r+0xac6>
   82de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   82de2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   82de4:	4293      	cmp	r3, r2
   82de6:	bfa8      	it	ge
   82de8:	4613      	movge	r3, r2
   82dea:	2b00      	cmp	r3, #0
   82dec:	461f      	mov	r7, r3
   82dee:	dd0b      	ble.n	82e08 <_svfprintf_r+0xbfc>
   82df0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82df2:	443c      	add	r4, r7
   82df4:	3301      	adds	r3, #1
   82df6:	2b07      	cmp	r3, #7
   82df8:	9427      	str	r4, [sp, #156]	; 0x9c
   82dfa:	e888 00c0 	stmia.w	r8, {r6, r7}
   82dfe:	9326      	str	r3, [sp, #152]	; 0x98
   82e00:	f300 82fb 	bgt.w	833fa <_svfprintf_r+0x11ee>
   82e04:	f108 0808 	add.w	r8, r8, #8
   82e08:	9b12      	ldr	r3, [sp, #72]	; 0x48
   82e0a:	2f00      	cmp	r7, #0
   82e0c:	bfa8      	it	ge
   82e0e:	1bdb      	subge	r3, r3, r7
   82e10:	2b00      	cmp	r3, #0
   82e12:	461f      	mov	r7, r3
   82e14:	f340 80d7 	ble.w	82fc6 <_svfprintf_r+0xdba>
   82e18:	2b10      	cmp	r3, #16
   82e1a:	f340 8434 	ble.w	83686 <_svfprintf_r+0x147a>
   82e1e:	4dba      	ldr	r5, [pc, #744]	; (83108 <_svfprintf_r+0xefc>)
   82e20:	4642      	mov	r2, r8
   82e22:	4621      	mov	r1, r4
   82e24:	46b0      	mov	r8, r6
   82e26:	f04f 0b10 	mov.w	fp, #16
   82e2a:	462e      	mov	r6, r5
   82e2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82e2e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82e30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82e32:	e004      	b.n	82e3e <_svfprintf_r+0xc32>
   82e34:	3208      	adds	r2, #8
   82e36:	3f10      	subs	r7, #16
   82e38:	2f10      	cmp	r7, #16
   82e3a:	f340 80b5 	ble.w	82fa8 <_svfprintf_r+0xd9c>
   82e3e:	3301      	adds	r3, #1
   82e40:	3110      	adds	r1, #16
   82e42:	2b07      	cmp	r3, #7
   82e44:	9127      	str	r1, [sp, #156]	; 0x9c
   82e46:	9326      	str	r3, [sp, #152]	; 0x98
   82e48:	e882 0840 	stmia.w	r2, {r6, fp}
   82e4c:	ddf2      	ble.n	82e34 <_svfprintf_r+0xc28>
   82e4e:	aa25      	add	r2, sp, #148	; 0x94
   82e50:	4629      	mov	r1, r5
   82e52:	4620      	mov	r0, r4
   82e54:	f002 fae0 	bl	85418 <__ssprint_r>
   82e58:	2800      	cmp	r0, #0
   82e5a:	f47f aab4 	bne.w	823c6 <_svfprintf_r+0x1ba>
   82e5e:	464a      	mov	r2, r9
   82e60:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82e62:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82e64:	e7e7      	b.n	82e36 <_svfprintf_r+0xc2a>
   82e66:	2d00      	cmp	r5, #0
   82e68:	bf08      	it	eq
   82e6a:	2c0a      	cmpeq	r4, #10
   82e6c:	f0c0 8090 	bcc.w	82f90 <_svfprintf_r+0xd84>
   82e70:	464e      	mov	r6, r9
   82e72:	4620      	mov	r0, r4
   82e74:	4629      	mov	r1, r5
   82e76:	220a      	movs	r2, #10
   82e78:	2300      	movs	r3, #0
   82e7a:	f003 fbc9 	bl	86610 <__aeabi_uldivmod>
   82e7e:	3230      	adds	r2, #48	; 0x30
   82e80:	f806 2d01 	strb.w	r2, [r6, #-1]!
   82e84:	4620      	mov	r0, r4
   82e86:	4629      	mov	r1, r5
   82e88:	2300      	movs	r3, #0
   82e8a:	220a      	movs	r2, #10
   82e8c:	f003 fbc0 	bl	86610 <__aeabi_uldivmod>
   82e90:	4604      	mov	r4, r0
   82e92:	460d      	mov	r5, r1
   82e94:	ea54 0305 	orrs.w	r3, r4, r5
   82e98:	d1eb      	bne.n	82e72 <_svfprintf_r+0xc66>
   82e9a:	eba9 0306 	sub.w	r3, r9, r6
   82e9e:	930e      	str	r3, [sp, #56]	; 0x38
   82ea0:	f7ff bad0 	b.w	82444 <_svfprintf_r+0x238>
   82ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82ea6:	464e      	mov	r6, r9
   82ea8:	930e      	str	r3, [sp, #56]	; 0x38
   82eaa:	f7ff bacb 	b.w	82444 <_svfprintf_r+0x238>
   82eae:	1e5e      	subs	r6, r3, #1
   82eb0:	2e00      	cmp	r6, #0
   82eb2:	f77f aeca 	ble.w	82c4a <_svfprintf_r+0xa3e>
   82eb6:	2e10      	cmp	r6, #16
   82eb8:	f340 83e3 	ble.w	83682 <_svfprintf_r+0x1476>
   82ebc:	4622      	mov	r2, r4
   82ebe:	f04f 0b10 	mov.w	fp, #16
   82ec2:	4d91      	ldr	r5, [pc, #580]	; (83108 <_svfprintf_r+0xefc>)
   82ec4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82ec6:	e004      	b.n	82ed2 <_svfprintf_r+0xcc6>
   82ec8:	3e10      	subs	r6, #16
   82eca:	2e10      	cmp	r6, #16
   82ecc:	f108 0808 	add.w	r8, r8, #8
   82ed0:	dd15      	ble.n	82efe <_svfprintf_r+0xcf2>
   82ed2:	3701      	adds	r7, #1
   82ed4:	3210      	adds	r2, #16
   82ed6:	2f07      	cmp	r7, #7
   82ed8:	9227      	str	r2, [sp, #156]	; 0x9c
   82eda:	9726      	str	r7, [sp, #152]	; 0x98
   82edc:	e888 0820 	stmia.w	r8, {r5, fp}
   82ee0:	ddf2      	ble.n	82ec8 <_svfprintf_r+0xcbc>
   82ee2:	aa25      	add	r2, sp, #148	; 0x94
   82ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82ee6:	4620      	mov	r0, r4
   82ee8:	f002 fa96 	bl	85418 <__ssprint_r>
   82eec:	2800      	cmp	r0, #0
   82eee:	f47f aa6a 	bne.w	823c6 <_svfprintf_r+0x1ba>
   82ef2:	3e10      	subs	r6, #16
   82ef4:	2e10      	cmp	r6, #16
   82ef6:	46c8      	mov	r8, r9
   82ef8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   82efa:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82efc:	dce9      	bgt.n	82ed2 <_svfprintf_r+0xcc6>
   82efe:	4614      	mov	r4, r2
   82f00:	3701      	adds	r7, #1
   82f02:	4434      	add	r4, r6
   82f04:	2f07      	cmp	r7, #7
   82f06:	9427      	str	r4, [sp, #156]	; 0x9c
   82f08:	9726      	str	r7, [sp, #152]	; 0x98
   82f0a:	e888 0060 	stmia.w	r8, {r5, r6}
   82f0e:	f77f ae9a 	ble.w	82c46 <_svfprintf_r+0xa3a>
   82f12:	aa25      	add	r2, sp, #148	; 0x94
   82f14:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82f16:	980c      	ldr	r0, [sp, #48]	; 0x30
   82f18:	f002 fa7e 	bl	85418 <__ssprint_r>
   82f1c:	2800      	cmp	r0, #0
   82f1e:	f47f aa52 	bne.w	823c6 <_svfprintf_r+0x1ba>
   82f22:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82f24:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82f26:	46c8      	mov	r8, r9
   82f28:	e68f      	b.n	82c4a <_svfprintf_r+0xa3e>
   82f2a:	3204      	adds	r2, #4
   82f2c:	681c      	ldr	r4, [r3, #0]
   82f2e:	2500      	movs	r5, #0
   82f30:	2301      	movs	r3, #1
   82f32:	920f      	str	r2, [sp, #60]	; 0x3c
   82f34:	f7ff ba68 	b.w	82408 <_svfprintf_r+0x1fc>
   82f38:	681c      	ldr	r4, [r3, #0]
   82f3a:	3304      	adds	r3, #4
   82f3c:	930f      	str	r3, [sp, #60]	; 0x3c
   82f3e:	2500      	movs	r5, #0
   82f40:	e42a      	b.n	82798 <_svfprintf_r+0x58c>
   82f42:	681c      	ldr	r4, [r3, #0]
   82f44:	3304      	adds	r3, #4
   82f46:	17e5      	asrs	r5, r4, #31
   82f48:	4622      	mov	r2, r4
   82f4a:	930f      	str	r3, [sp, #60]	; 0x3c
   82f4c:	462b      	mov	r3, r5
   82f4e:	2a00      	cmp	r2, #0
   82f50:	f173 0300 	sbcs.w	r3, r3, #0
   82f54:	f6bf ac68 	bge.w	82828 <_svfprintf_r+0x61c>
   82f58:	272d      	movs	r7, #45	; 0x2d
   82f5a:	4264      	negs	r4, r4
   82f5c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   82f60:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   82f64:	2301      	movs	r3, #1
   82f66:	f7ff ba53 	b.w	82410 <_svfprintf_r+0x204>
   82f6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   82f6c:	2500      	movs	r5, #0
   82f6e:	460a      	mov	r2, r1
   82f70:	3204      	adds	r2, #4
   82f72:	680c      	ldr	r4, [r1, #0]
   82f74:	920f      	str	r2, [sp, #60]	; 0x3c
   82f76:	f7ff ba47 	b.w	82408 <_svfprintf_r+0x1fc>
   82f7a:	4614      	mov	r4, r2
   82f7c:	3301      	adds	r3, #1
   82f7e:	4434      	add	r4, r6
   82f80:	2b07      	cmp	r3, #7
   82f82:	9427      	str	r4, [sp, #156]	; 0x9c
   82f84:	9326      	str	r3, [sp, #152]	; 0x98
   82f86:	e888 0060 	stmia.w	r8, {r5, r6}
   82f8a:	f77f ab2f 	ble.w	825ec <_svfprintf_r+0x3e0>
   82f8e:	e6e0      	b.n	82d52 <_svfprintf_r+0xb46>
   82f90:	f8dd b01c 	ldr.w	fp, [sp, #28]
   82f94:	2301      	movs	r3, #1
   82f96:	ae42      	add	r6, sp, #264	; 0x108
   82f98:	3430      	adds	r4, #48	; 0x30
   82f9a:	f8cd b01c 	str.w	fp, [sp, #28]
   82f9e:	f806 4d41 	strb.w	r4, [r6, #-65]!
   82fa2:	930e      	str	r3, [sp, #56]	; 0x38
   82fa4:	f7ff ba4e 	b.w	82444 <_svfprintf_r+0x238>
   82fa8:	4635      	mov	r5, r6
   82faa:	460c      	mov	r4, r1
   82fac:	4646      	mov	r6, r8
   82fae:	4690      	mov	r8, r2
   82fb0:	3301      	adds	r3, #1
   82fb2:	443c      	add	r4, r7
   82fb4:	2b07      	cmp	r3, #7
   82fb6:	9427      	str	r4, [sp, #156]	; 0x9c
   82fb8:	9326      	str	r3, [sp, #152]	; 0x98
   82fba:	e888 00a0 	stmia.w	r8, {r5, r7}
   82fbe:	f300 8246 	bgt.w	8344e <_svfprintf_r+0x1242>
   82fc2:	f108 0808 	add.w	r8, r8, #8
   82fc6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   82fc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82fca:	429a      	cmp	r2, r3
   82fcc:	db45      	blt.n	8305a <_svfprintf_r+0xe4e>
   82fce:	9b07      	ldr	r3, [sp, #28]
   82fd0:	07d9      	lsls	r1, r3, #31
   82fd2:	d442      	bmi.n	8305a <_svfprintf_r+0xe4e>
   82fd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82fd6:	9812      	ldr	r0, [sp, #72]	; 0x48
   82fd8:	1a9a      	subs	r2, r3, r2
   82fda:	1a1d      	subs	r5, r3, r0
   82fdc:	4295      	cmp	r5, r2
   82fde:	bfa8      	it	ge
   82fe0:	4615      	movge	r5, r2
   82fe2:	2d00      	cmp	r5, #0
   82fe4:	dd0e      	ble.n	83004 <_svfprintf_r+0xdf8>
   82fe6:	9926      	ldr	r1, [sp, #152]	; 0x98
   82fe8:	4406      	add	r6, r0
   82fea:	3101      	adds	r1, #1
   82fec:	442c      	add	r4, r5
   82fee:	2907      	cmp	r1, #7
   82ff0:	f8c8 6000 	str.w	r6, [r8]
   82ff4:	9427      	str	r4, [sp, #156]	; 0x9c
   82ff6:	f8c8 5004 	str.w	r5, [r8, #4]
   82ffa:	9126      	str	r1, [sp, #152]	; 0x98
   82ffc:	f300 8216 	bgt.w	8342c <_svfprintf_r+0x1220>
   83000:	f108 0808 	add.w	r8, r8, #8
   83004:	2d00      	cmp	r5, #0
   83006:	bfb4      	ite	lt
   83008:	4616      	movlt	r6, r2
   8300a:	1b56      	subge	r6, r2, r5
   8300c:	2e00      	cmp	r6, #0
   8300e:	f77f aaef 	ble.w	825f0 <_svfprintf_r+0x3e4>
   83012:	2e10      	cmp	r6, #16
   83014:	f340 82f3 	ble.w	835fe <_svfprintf_r+0x13f2>
   83018:	4622      	mov	r2, r4
   8301a:	2710      	movs	r7, #16
   8301c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8301e:	4d3a      	ldr	r5, [pc, #232]	; (83108 <_svfprintf_r+0xefc>)
   83020:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   83024:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   83026:	e004      	b.n	83032 <_svfprintf_r+0xe26>
   83028:	f108 0808 	add.w	r8, r8, #8
   8302c:	3e10      	subs	r6, #16
   8302e:	2e10      	cmp	r6, #16
   83030:	dda3      	ble.n	82f7a <_svfprintf_r+0xd6e>
   83032:	3301      	adds	r3, #1
   83034:	3210      	adds	r2, #16
   83036:	2b07      	cmp	r3, #7
   83038:	9227      	str	r2, [sp, #156]	; 0x9c
   8303a:	9326      	str	r3, [sp, #152]	; 0x98
   8303c:	e888 00a0 	stmia.w	r8, {r5, r7}
   83040:	ddf2      	ble.n	83028 <_svfprintf_r+0xe1c>
   83042:	aa25      	add	r2, sp, #148	; 0x94
   83044:	4621      	mov	r1, r4
   83046:	4658      	mov	r0, fp
   83048:	f002 f9e6 	bl	85418 <__ssprint_r>
   8304c:	2800      	cmp	r0, #0
   8304e:	f47f a9ba 	bne.w	823c6 <_svfprintf_r+0x1ba>
   83052:	46c8      	mov	r8, r9
   83054:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83056:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83058:	e7e8      	b.n	8302c <_svfprintf_r+0xe20>
   8305a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8305c:	9819      	ldr	r0, [sp, #100]	; 0x64
   8305e:	3301      	adds	r3, #1
   83060:	991a      	ldr	r1, [sp, #104]	; 0x68
   83062:	4404      	add	r4, r0
   83064:	2b07      	cmp	r3, #7
   83066:	9427      	str	r4, [sp, #156]	; 0x9c
   83068:	f8c8 1000 	str.w	r1, [r8]
   8306c:	f8c8 0004 	str.w	r0, [r8, #4]
   83070:	9326      	str	r3, [sp, #152]	; 0x98
   83072:	f300 81cf 	bgt.w	83414 <_svfprintf_r+0x1208>
   83076:	f108 0808 	add.w	r8, r8, #8
   8307a:	e7ab      	b.n	82fd4 <_svfprintf_r+0xdc8>
   8307c:	9b07      	ldr	r3, [sp, #28]
   8307e:	07da      	lsls	r2, r3, #31
   83080:	f53f adad 	bmi.w	82bde <_svfprintf_r+0x9d2>
   83084:	2301      	movs	r3, #1
   83086:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83088:	441c      	add	r4, r3
   8308a:	441f      	add	r7, r3
   8308c:	2f07      	cmp	r7, #7
   8308e:	9427      	str	r4, [sp, #156]	; 0x9c
   83090:	f8c8 6000 	str.w	r6, [r8]
   83094:	9726      	str	r7, [sp, #152]	; 0x98
   83096:	f8c8 3004 	str.w	r3, [r8, #4]
   8309a:	f77f add4 	ble.w	82c46 <_svfprintf_r+0xa3a>
   8309e:	aa25      	add	r2, sp, #148	; 0x94
   830a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   830a2:	980c      	ldr	r0, [sp, #48]	; 0x30
   830a4:	f002 f9b8 	bl	85418 <__ssprint_r>
   830a8:	2800      	cmp	r0, #0
   830aa:	f47f a98c 	bne.w	823c6 <_svfprintf_r+0x1ba>
   830ae:	46c8      	mov	r8, r9
   830b0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   830b2:	9f26      	ldr	r7, [sp, #152]	; 0x98
   830b4:	e5c9      	b.n	82c4a <_svfprintf_r+0xa3e>
   830b6:	aa25      	add	r2, sp, #148	; 0x94
   830b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   830ba:	980c      	ldr	r0, [sp, #48]	; 0x30
   830bc:	f002 f9ac 	bl	85418 <__ssprint_r>
   830c0:	2800      	cmp	r0, #0
   830c2:	f47f a980 	bne.w	823c6 <_svfprintf_r+0x1ba>
   830c6:	46c8      	mov	r8, r9
   830c8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   830ca:	9f26      	ldr	r7, [sp, #152]	; 0x98
   830cc:	e596      	b.n	82bfc <_svfprintf_r+0x9f0>
   830ce:	aa25      	add	r2, sp, #148	; 0x94
   830d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   830d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   830d4:	f002 f9a0 	bl	85418 <__ssprint_r>
   830d8:	2800      	cmp	r0, #0
   830da:	f47f a974 	bne.w	823c6 <_svfprintf_r+0x1ba>
   830de:	46c8      	mov	r8, r9
   830e0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   830e2:	9f26      	ldr	r7, [sp, #152]	; 0x98
   830e4:	e599      	b.n	82c1a <_svfprintf_r+0xa0e>
   830e6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   830e8:	3407      	adds	r4, #7
   830ea:	f024 0407 	bic.w	r4, r4, #7
   830ee:	f104 0108 	add.w	r1, r4, #8
   830f2:	e9d4 2300 	ldrd	r2, r3, [r4]
   830f6:	910f      	str	r1, [sp, #60]	; 0x3c
   830f8:	4614      	mov	r4, r2
   830fa:	461d      	mov	r5, r3
   830fc:	f7ff bb8f 	b.w	8281e <_svfprintf_r+0x612>
   83100:	464e      	mov	r6, r9
   83102:	f7ff b99f 	b.w	82444 <_svfprintf_r+0x238>
   83106:	bf00      	nop
   83108:	00086c08 	.word	0x00086c08
   8310c:	aa25      	add	r2, sp, #148	; 0x94
   8310e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83110:	980c      	ldr	r0, [sp, #48]	; 0x30
   83112:	f002 f981 	bl	85418 <__ssprint_r>
   83116:	2800      	cmp	r0, #0
   83118:	f47f a955 	bne.w	823c6 <_svfprintf_r+0x1ba>
   8311c:	46c8      	mov	r8, r9
   8311e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83120:	f7ff ba16 	b.w	82550 <_svfprintf_r+0x344>
   83124:	9c15      	ldr	r4, [sp, #84]	; 0x54
   83126:	4622      	mov	r2, r4
   83128:	4620      	mov	r0, r4
   8312a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   8312c:	4623      	mov	r3, r4
   8312e:	4621      	mov	r1, r4
   83130:	f003 fa30 	bl	86594 <__aeabi_dcmpun>
   83134:	2800      	cmp	r0, #0
   83136:	f040 8273 	bne.w	83620 <_svfprintf_r+0x1414>
   8313a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8313c:	3301      	adds	r3, #1
   8313e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83140:	f023 0320 	bic.w	r3, r3, #32
   83144:	930e      	str	r3, [sp, #56]	; 0x38
   83146:	f000 819c 	beq.w	83482 <_svfprintf_r+0x1276>
   8314a:	2b47      	cmp	r3, #71	; 0x47
   8314c:	f000 80d6 	beq.w	832fc <_svfprintf_r+0x10f0>
   83150:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   83154:	9307      	str	r3, [sp, #28]
   83156:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83158:	1e1f      	subs	r7, r3, #0
   8315a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8315c:	9308      	str	r3, [sp, #32]
   8315e:	bfb7      	itett	lt
   83160:	463b      	movlt	r3, r7
   83162:	2300      	movge	r3, #0
   83164:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   83168:	232d      	movlt	r3, #45	; 0x2d
   8316a:	9310      	str	r3, [sp, #64]	; 0x40
   8316c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8316e:	2b66      	cmp	r3, #102	; 0x66
   83170:	f000 8190 	beq.w	83494 <_svfprintf_r+0x1288>
   83174:	2b46      	cmp	r3, #70	; 0x46
   83176:	f000 80a4 	beq.w	832c2 <_svfprintf_r+0x10b6>
   8317a:	2002      	movs	r0, #2
   8317c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8317e:	a923      	add	r1, sp, #140	; 0x8c
   83180:	2b45      	cmp	r3, #69	; 0x45
   83182:	bf0a      	itet	eq
   83184:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   83186:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   83188:	1c5d      	addeq	r5, r3, #1
   8318a:	e88d 0021 	stmia.w	sp, {r0, r5}
   8318e:	9104      	str	r1, [sp, #16]
   83190:	a820      	add	r0, sp, #128	; 0x80
   83192:	a91f      	add	r1, sp, #124	; 0x7c
   83194:	463b      	mov	r3, r7
   83196:	9003      	str	r0, [sp, #12]
   83198:	9a08      	ldr	r2, [sp, #32]
   8319a:	9102      	str	r1, [sp, #8]
   8319c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8319e:	f000 fb5b 	bl	83858 <_dtoa_r>
   831a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   831a4:	4606      	mov	r6, r0
   831a6:	2b67      	cmp	r3, #103	; 0x67
   831a8:	f040 81ba 	bne.w	83520 <_svfprintf_r+0x1314>
   831ac:	f01b 0f01 	tst.w	fp, #1
   831b0:	f000 8223 	beq.w	835fa <_svfprintf_r+0x13ee>
   831b4:	1974      	adds	r4, r6, r5
   831b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   831b8:	9808      	ldr	r0, [sp, #32]
   831ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   831bc:	4639      	mov	r1, r7
   831be:	f003 f9b7 	bl	86530 <__aeabi_dcmpeq>
   831c2:	2800      	cmp	r0, #0
   831c4:	f040 8124 	bne.w	83410 <_svfprintf_r+0x1204>
   831c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   831ca:	42a3      	cmp	r3, r4
   831cc:	d206      	bcs.n	831dc <_svfprintf_r+0xfd0>
   831ce:	2130      	movs	r1, #48	; 0x30
   831d0:	1c5a      	adds	r2, r3, #1
   831d2:	9223      	str	r2, [sp, #140]	; 0x8c
   831d4:	7019      	strb	r1, [r3, #0]
   831d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   831d8:	429c      	cmp	r4, r3
   831da:	d8f9      	bhi.n	831d0 <_svfprintf_r+0xfc4>
   831dc:	1b9b      	subs	r3, r3, r6
   831de:	9313      	str	r3, [sp, #76]	; 0x4c
   831e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   831e2:	2b47      	cmp	r3, #71	; 0x47
   831e4:	f000 80a2 	beq.w	8332c <_svfprintf_r+0x1120>
   831e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   831ea:	2b65      	cmp	r3, #101	; 0x65
   831ec:	f340 81a7 	ble.w	8353e <_svfprintf_r+0x1332>
   831f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   831f2:	2b66      	cmp	r3, #102	; 0x66
   831f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   831f6:	9312      	str	r3, [sp, #72]	; 0x48
   831f8:	f000 8171 	beq.w	834de <_svfprintf_r+0x12d2>
   831fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   831fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
   83200:	4619      	mov	r1, r3
   83202:	4291      	cmp	r1, r2
   83204:	f300 815d 	bgt.w	834c2 <_svfprintf_r+0x12b6>
   83208:	f01b 0f01 	tst.w	fp, #1
   8320c:	f040 81f0 	bne.w	835f0 <_svfprintf_r+0x13e4>
   83210:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   83214:	9308      	str	r3, [sp, #32]
   83216:	2367      	movs	r3, #103	; 0x67
   83218:	920e      	str	r2, [sp, #56]	; 0x38
   8321a:	9311      	str	r3, [sp, #68]	; 0x44
   8321c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8321e:	2b00      	cmp	r3, #0
   83220:	d17d      	bne.n	8331e <_svfprintf_r+0x1112>
   83222:	930a      	str	r3, [sp, #40]	; 0x28
   83224:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83228:	f7ff b914 	b.w	82454 <_svfprintf_r+0x248>
   8322c:	f024 0407 	bic.w	r4, r4, #7
   83230:	6823      	ldr	r3, [r4, #0]
   83232:	9315      	str	r3, [sp, #84]	; 0x54
   83234:	6863      	ldr	r3, [r4, #4]
   83236:	9314      	str	r3, [sp, #80]	; 0x50
   83238:	f104 0308 	add.w	r3, r4, #8
   8323c:	930f      	str	r3, [sp, #60]	; 0x3c
   8323e:	f7ff bb2f 	b.w	828a0 <_svfprintf_r+0x694>
   83242:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83244:	6813      	ldr	r3, [r2, #0]
   83246:	3204      	adds	r2, #4
   83248:	920f      	str	r2, [sp, #60]	; 0x3c
   8324a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8324c:	601a      	str	r2, [r3, #0]
   8324e:	f7ff b804 	b.w	8225a <_svfprintf_r+0x4e>
   83252:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83254:	4daf      	ldr	r5, [pc, #700]	; (83514 <_svfprintf_r+0x1308>)
   83256:	f7ff b9ad 	b.w	825b4 <_svfprintf_r+0x3a8>
   8325a:	aa25      	add	r2, sp, #148	; 0x94
   8325c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8325e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83260:	f002 f8da 	bl	85418 <__ssprint_r>
   83264:	2800      	cmp	r0, #0
   83266:	f47f a8ae 	bne.w	823c6 <_svfprintf_r+0x1ba>
   8326a:	46c8      	mov	r8, r9
   8326c:	e431      	b.n	82ad2 <_svfprintf_r+0x8c6>
   8326e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83270:	4613      	mov	r3, r2
   83272:	3304      	adds	r3, #4
   83274:	930f      	str	r3, [sp, #60]	; 0x3c
   83276:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83278:	6811      	ldr	r1, [r2, #0]
   8327a:	17dd      	asrs	r5, r3, #31
   8327c:	461a      	mov	r2, r3
   8327e:	462b      	mov	r3, r5
   83280:	e9c1 2300 	strd	r2, r3, [r1]
   83284:	f7fe bfe9 	b.w	8225a <_svfprintf_r+0x4e>
   83288:	aa25      	add	r2, sp, #148	; 0x94
   8328a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8328c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8328e:	f002 f8c3 	bl	85418 <__ssprint_r>
   83292:	2800      	cmp	r0, #0
   83294:	f47f a897 	bne.w	823c6 <_svfprintf_r+0x1ba>
   83298:	46c8      	mov	r8, r9
   8329a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8329c:	e432      	b.n	82b04 <_svfprintf_r+0x8f8>
   8329e:	f108 0808 	add.w	r8, r8, #8
   832a2:	e52f      	b.n	82d04 <_svfprintf_r+0xaf8>
   832a4:	2140      	movs	r1, #64	; 0x40
   832a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   832a8:	f001 fa28 	bl	846fc <_malloc_r>
   832ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   832ae:	6010      	str	r0, [r2, #0]
   832b0:	6110      	str	r0, [r2, #16]
   832b2:	2800      	cmp	r0, #0
   832b4:	f000 8214 	beq.w	836e0 <_svfprintf_r+0x14d4>
   832b8:	2340      	movs	r3, #64	; 0x40
   832ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   832bc:	6153      	str	r3, [r2, #20]
   832be:	f7fe bfbc 	b.w	8223a <_svfprintf_r+0x2e>
   832c2:	2003      	movs	r0, #3
   832c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   832c6:	a923      	add	r1, sp, #140	; 0x8c
   832c8:	e88d 0011 	stmia.w	sp, {r0, r4}
   832cc:	9104      	str	r1, [sp, #16]
   832ce:	a820      	add	r0, sp, #128	; 0x80
   832d0:	a91f      	add	r1, sp, #124	; 0x7c
   832d2:	9003      	str	r0, [sp, #12]
   832d4:	9a08      	ldr	r2, [sp, #32]
   832d6:	463b      	mov	r3, r7
   832d8:	9102      	str	r1, [sp, #8]
   832da:	980c      	ldr	r0, [sp, #48]	; 0x30
   832dc:	f000 fabc 	bl	83858 <_dtoa_r>
   832e0:	4625      	mov	r5, r4
   832e2:	4606      	mov	r6, r0
   832e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   832e6:	1974      	adds	r4, r6, r5
   832e8:	2b46      	cmp	r3, #70	; 0x46
   832ea:	f47f af64 	bne.w	831b6 <_svfprintf_r+0xfaa>
   832ee:	7833      	ldrb	r3, [r6, #0]
   832f0:	2b30      	cmp	r3, #48	; 0x30
   832f2:	f000 8187 	beq.w	83604 <_svfprintf_r+0x13f8>
   832f6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   832f8:	442c      	add	r4, r5
   832fa:	e75c      	b.n	831b6 <_svfprintf_r+0xfaa>
   832fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   832fe:	2b00      	cmp	r3, #0
   83300:	bf08      	it	eq
   83302:	2301      	moveq	r3, #1
   83304:	930a      	str	r3, [sp, #40]	; 0x28
   83306:	e723      	b.n	83150 <_svfprintf_r+0xf44>
   83308:	4630      	mov	r0, r6
   8330a:	950a      	str	r5, [sp, #40]	; 0x28
   8330c:	f7fe fe6c 	bl	81fe8 <strlen>
   83310:	940f      	str	r4, [sp, #60]	; 0x3c
   83312:	900e      	str	r0, [sp, #56]	; 0x38
   83314:	f8cd b01c 	str.w	fp, [sp, #28]
   83318:	4603      	mov	r3, r0
   8331a:	f7ff b9e7 	b.w	826ec <_svfprintf_r+0x4e0>
   8331e:	272d      	movs	r7, #45	; 0x2d
   83320:	2300      	movs	r3, #0
   83322:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   83326:	930a      	str	r3, [sp, #40]	; 0x28
   83328:	f7ff b895 	b.w	82456 <_svfprintf_r+0x24a>
   8332c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8332e:	461a      	mov	r2, r3
   83330:	9312      	str	r3, [sp, #72]	; 0x48
   83332:	3303      	adds	r3, #3
   83334:	db04      	blt.n	83340 <_svfprintf_r+0x1134>
   83336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83338:	4619      	mov	r1, r3
   8333a:	4291      	cmp	r1, r2
   8333c:	f6bf af5e 	bge.w	831fc <_svfprintf_r+0xff0>
   83340:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83342:	3b02      	subs	r3, #2
   83344:	9311      	str	r3, [sp, #68]	; 0x44
   83346:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83348:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   8334c:	3b01      	subs	r3, #1
   8334e:	2b00      	cmp	r3, #0
   83350:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   83354:	bfb4      	ite	lt
   83356:	222d      	movlt	r2, #45	; 0x2d
   83358:	222b      	movge	r2, #43	; 0x2b
   8335a:	931f      	str	r3, [sp, #124]	; 0x7c
   8335c:	bfb8      	it	lt
   8335e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   83360:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   83364:	bfb8      	it	lt
   83366:	f1c3 0301 	rsblt	r3, r3, #1
   8336a:	2b09      	cmp	r3, #9
   8336c:	f340 811f 	ble.w	835ae <_svfprintf_r+0x13a2>
   83370:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   83374:	4601      	mov	r1, r0
   83376:	4c68      	ldr	r4, [pc, #416]	; (83518 <_svfprintf_r+0x130c>)
   83378:	e000      	b.n	8337c <_svfprintf_r+0x1170>
   8337a:	4611      	mov	r1, r2
   8337c:	fb84 5203 	smull	r5, r2, r4, r3
   83380:	17dd      	asrs	r5, r3, #31
   83382:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   83386:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   8338a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   8338e:	3230      	adds	r2, #48	; 0x30
   83390:	2d09      	cmp	r5, #9
   83392:	f801 2c01 	strb.w	r2, [r1, #-1]
   83396:	462b      	mov	r3, r5
   83398:	f101 32ff 	add.w	r2, r1, #4294967295
   8339c:	dced      	bgt.n	8337a <_svfprintf_r+0x116e>
   8339e:	3330      	adds	r3, #48	; 0x30
   833a0:	3902      	subs	r1, #2
   833a2:	b2dc      	uxtb	r4, r3
   833a4:	4288      	cmp	r0, r1
   833a6:	f802 4c01 	strb.w	r4, [r2, #-1]
   833aa:	f240 8192 	bls.w	836d2 <_svfprintf_r+0x14c6>
   833ae:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   833b2:	4613      	mov	r3, r2
   833b4:	e001      	b.n	833ba <_svfprintf_r+0x11ae>
   833b6:	f813 4b01 	ldrb.w	r4, [r3], #1
   833ba:	4283      	cmp	r3, r0
   833bc:	f801 4b01 	strb.w	r4, [r1], #1
   833c0:	d1f9      	bne.n	833b6 <_svfprintf_r+0x11aa>
   833c2:	3301      	adds	r3, #1
   833c4:	1a9b      	subs	r3, r3, r2
   833c6:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   833ca:	4413      	add	r3, r2
   833cc:	aa21      	add	r2, sp, #132	; 0x84
   833ce:	1a9b      	subs	r3, r3, r2
   833d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   833d2:	931b      	str	r3, [sp, #108]	; 0x6c
   833d4:	2a01      	cmp	r2, #1
   833d6:	4413      	add	r3, r2
   833d8:	930e      	str	r3, [sp, #56]	; 0x38
   833da:	f340 8148 	ble.w	8366e <_svfprintf_r+0x1462>
   833de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   833e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   833e2:	4413      	add	r3, r2
   833e4:	930e      	str	r3, [sp, #56]	; 0x38
   833e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   833ea:	9308      	str	r3, [sp, #32]
   833ec:	2300      	movs	r3, #0
   833ee:	9312      	str	r3, [sp, #72]	; 0x48
   833f0:	e714      	b.n	8321c <_svfprintf_r+0x1010>
   833f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   833f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   833f6:	f7ff b876 	b.w	824e6 <_svfprintf_r+0x2da>
   833fa:	aa25      	add	r2, sp, #148	; 0x94
   833fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   833fe:	980c      	ldr	r0, [sp, #48]	; 0x30
   83400:	f002 f80a 	bl	85418 <__ssprint_r>
   83404:	2800      	cmp	r0, #0
   83406:	f47e afde 	bne.w	823c6 <_svfprintf_r+0x1ba>
   8340a:	46c8      	mov	r8, r9
   8340c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8340e:	e4fb      	b.n	82e08 <_svfprintf_r+0xbfc>
   83410:	4623      	mov	r3, r4
   83412:	e6e3      	b.n	831dc <_svfprintf_r+0xfd0>
   83414:	aa25      	add	r2, sp, #148	; 0x94
   83416:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83418:	980c      	ldr	r0, [sp, #48]	; 0x30
   8341a:	f001 fffd 	bl	85418 <__ssprint_r>
   8341e:	2800      	cmp	r0, #0
   83420:	f47e afd1 	bne.w	823c6 <_svfprintf_r+0x1ba>
   83424:	46c8      	mov	r8, r9
   83426:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   83428:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8342a:	e5d3      	b.n	82fd4 <_svfprintf_r+0xdc8>
   8342c:	aa25      	add	r2, sp, #148	; 0x94
   8342e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83430:	980c      	ldr	r0, [sp, #48]	; 0x30
   83432:	f001 fff1 	bl	85418 <__ssprint_r>
   83436:	2800      	cmp	r0, #0
   83438:	f47e afc5 	bne.w	823c6 <_svfprintf_r+0x1ba>
   8343c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8343e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   83440:	46c8      	mov	r8, r9
   83442:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83444:	1a9a      	subs	r2, r3, r2
   83446:	e5dd      	b.n	83004 <_svfprintf_r+0xdf8>
   83448:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8344a:	f7ff b8fe 	b.w	8264a <_svfprintf_r+0x43e>
   8344e:	aa25      	add	r2, sp, #148	; 0x94
   83450:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83452:	980c      	ldr	r0, [sp, #48]	; 0x30
   83454:	f001 ffe0 	bl	85418 <__ssprint_r>
   83458:	2800      	cmp	r0, #0
   8345a:	f47e afb4 	bne.w	823c6 <_svfprintf_r+0x1ba>
   8345e:	46c8      	mov	r8, r9
   83460:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83462:	e5b0      	b.n	82fc6 <_svfprintf_r+0xdba>
   83464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83466:	4637      	mov	r7, r6
   83468:	2b06      	cmp	r3, #6
   8346a:	bf28      	it	cs
   8346c:	2306      	movcs	r3, #6
   8346e:	960a      	str	r6, [sp, #40]	; 0x28
   83470:	9612      	str	r6, [sp, #72]	; 0x48
   83472:	9308      	str	r3, [sp, #32]
   83474:	940f      	str	r4, [sp, #60]	; 0x3c
   83476:	f8cd b01c 	str.w	fp, [sp, #28]
   8347a:	930e      	str	r3, [sp, #56]	; 0x38
   8347c:	4e27      	ldr	r6, [pc, #156]	; (8351c <_svfprintf_r+0x1310>)
   8347e:	f7fe bfe9 	b.w	82454 <_svfprintf_r+0x248>
   83482:	2306      	movs	r3, #6
   83484:	930a      	str	r3, [sp, #40]	; 0x28
   83486:	e663      	b.n	83150 <_svfprintf_r+0xf44>
   83488:	232d      	movs	r3, #45	; 0x2d
   8348a:	461f      	mov	r7, r3
   8348c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   83490:	f7ff ba28 	b.w	828e4 <_svfprintf_r+0x6d8>
   83494:	2003      	movs	r0, #3
   83496:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   83498:	a923      	add	r1, sp, #140	; 0x8c
   8349a:	e88d 0011 	stmia.w	sp, {r0, r4}
   8349e:	9104      	str	r1, [sp, #16]
   834a0:	a820      	add	r0, sp, #128	; 0x80
   834a2:	a91f      	add	r1, sp, #124	; 0x7c
   834a4:	9003      	str	r0, [sp, #12]
   834a6:	9a08      	ldr	r2, [sp, #32]
   834a8:	463b      	mov	r3, r7
   834aa:	9102      	str	r1, [sp, #8]
   834ac:	980c      	ldr	r0, [sp, #48]	; 0x30
   834ae:	f000 f9d3 	bl	83858 <_dtoa_r>
   834b2:	4625      	mov	r5, r4
   834b4:	4606      	mov	r6, r0
   834b6:	1904      	adds	r4, r0, r4
   834b8:	e719      	b.n	832ee <_svfprintf_r+0x10e2>
   834ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
   834bc:	4d15      	ldr	r5, [pc, #84]	; (83514 <_svfprintf_r+0x1308>)
   834be:	f7ff bb7e 	b.w	82bbe <_svfprintf_r+0x9b2>
   834c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
   834c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   834c6:	4413      	add	r3, r2
   834c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   834ca:	930e      	str	r3, [sp, #56]	; 0x38
   834cc:	2a00      	cmp	r2, #0
   834ce:	f340 80c7 	ble.w	83660 <_svfprintf_r+0x1454>
   834d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   834d6:	9308      	str	r3, [sp, #32]
   834d8:	2367      	movs	r3, #103	; 0x67
   834da:	9311      	str	r3, [sp, #68]	; 0x44
   834dc:	e69e      	b.n	8321c <_svfprintf_r+0x1010>
   834de:	2b00      	cmp	r3, #0
   834e0:	f340 80e1 	ble.w	836a6 <_svfprintf_r+0x149a>
   834e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   834e6:	2a00      	cmp	r2, #0
   834e8:	f040 80b0 	bne.w	8364c <_svfprintf_r+0x1440>
   834ec:	f01b 0f01 	tst.w	fp, #1
   834f0:	f040 80ac 	bne.w	8364c <_svfprintf_r+0x1440>
   834f4:	9308      	str	r3, [sp, #32]
   834f6:	930e      	str	r3, [sp, #56]	; 0x38
   834f8:	e690      	b.n	8321c <_svfprintf_r+0x1010>
   834fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   834fc:	940f      	str	r4, [sp, #60]	; 0x3c
   834fe:	9308      	str	r3, [sp, #32]
   83500:	930e      	str	r3, [sp, #56]	; 0x38
   83502:	900a      	str	r0, [sp, #40]	; 0x28
   83504:	f8cd b01c 	str.w	fp, [sp, #28]
   83508:	9012      	str	r0, [sp, #72]	; 0x48
   8350a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8350e:	f7fe bfa1 	b.w	82454 <_svfprintf_r+0x248>
   83512:	bf00      	nop
   83514:	00086c08 	.word	0x00086c08
   83518:	66666667 	.word	0x66666667
   8351c:	00086bec 	.word	0x00086bec
   83520:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83522:	2b47      	cmp	r3, #71	; 0x47
   83524:	f47f ae46 	bne.w	831b4 <_svfprintf_r+0xfa8>
   83528:	f01b 0f01 	tst.w	fp, #1
   8352c:	f47f aeda 	bne.w	832e4 <_svfprintf_r+0x10d8>
   83530:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   83532:	1b9b      	subs	r3, r3, r6
   83534:	9313      	str	r3, [sp, #76]	; 0x4c
   83536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83538:	2b47      	cmp	r3, #71	; 0x47
   8353a:	f43f aef7 	beq.w	8332c <_svfprintf_r+0x1120>
   8353e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   83540:	9312      	str	r3, [sp, #72]	; 0x48
   83542:	e700      	b.n	83346 <_svfprintf_r+0x113a>
   83544:	2000      	movs	r0, #0
   83546:	900a      	str	r0, [sp, #40]	; 0x28
   83548:	f7fe bebc 	b.w	822c4 <_svfprintf_r+0xb8>
   8354c:	424f      	negs	r7, r1
   8354e:	3110      	adds	r1, #16
   83550:	da35      	bge.n	835be <_svfprintf_r+0x13b2>
   83552:	2410      	movs	r4, #16
   83554:	4d6a      	ldr	r5, [pc, #424]	; (83700 <_svfprintf_r+0x14f4>)
   83556:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8355a:	e004      	b.n	83566 <_svfprintf_r+0x135a>
   8355c:	f108 0808 	add.w	r8, r8, #8
   83560:	3f10      	subs	r7, #16
   83562:	2f10      	cmp	r7, #16
   83564:	dd2c      	ble.n	835c0 <_svfprintf_r+0x13b4>
   83566:	3301      	adds	r3, #1
   83568:	3210      	adds	r2, #16
   8356a:	2b07      	cmp	r3, #7
   8356c:	9227      	str	r2, [sp, #156]	; 0x9c
   8356e:	9326      	str	r3, [sp, #152]	; 0x98
   83570:	f8c8 5000 	str.w	r5, [r8]
   83574:	f8c8 4004 	str.w	r4, [r8, #4]
   83578:	ddf0      	ble.n	8355c <_svfprintf_r+0x1350>
   8357a:	aa25      	add	r2, sp, #148	; 0x94
   8357c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8357e:	4658      	mov	r0, fp
   83580:	f001 ff4a 	bl	85418 <__ssprint_r>
   83584:	2800      	cmp	r0, #0
   83586:	f47e af1e 	bne.w	823c6 <_svfprintf_r+0x1ba>
   8358a:	46c8      	mov	r8, r9
   8358c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8358e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83590:	e7e6      	b.n	83560 <_svfprintf_r+0x1354>
   83592:	aa25      	add	r2, sp, #148	; 0x94
   83594:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83596:	980c      	ldr	r0, [sp, #48]	; 0x30
   83598:	f001 ff3e 	bl	85418 <__ssprint_r>
   8359c:	2800      	cmp	r0, #0
   8359e:	f47e af12 	bne.w	823c6 <_svfprintf_r+0x1ba>
   835a2:	46c8      	mov	r8, r9
   835a4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   835a6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   835a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   835aa:	f7ff bbc3 	b.w	82d34 <_svfprintf_r+0xb28>
   835ae:	2230      	movs	r2, #48	; 0x30
   835b0:	4413      	add	r3, r2
   835b2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   835b6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   835ba:	ab22      	add	r3, sp, #136	; 0x88
   835bc:	e706      	b.n	833cc <_svfprintf_r+0x11c0>
   835be:	4d50      	ldr	r5, [pc, #320]	; (83700 <_svfprintf_r+0x14f4>)
   835c0:	3301      	adds	r3, #1
   835c2:	443a      	add	r2, r7
   835c4:	2b07      	cmp	r3, #7
   835c6:	e888 00a0 	stmia.w	r8, {r5, r7}
   835ca:	9227      	str	r2, [sp, #156]	; 0x9c
   835cc:	9326      	str	r3, [sp, #152]	; 0x98
   835ce:	f108 0808 	add.w	r8, r8, #8
   835d2:	f77f abb2 	ble.w	82d3a <_svfprintf_r+0xb2e>
   835d6:	aa25      	add	r2, sp, #148	; 0x94
   835d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   835da:	980c      	ldr	r0, [sp, #48]	; 0x30
   835dc:	f001 ff1c 	bl	85418 <__ssprint_r>
   835e0:	2800      	cmp	r0, #0
   835e2:	f47e aef0 	bne.w	823c6 <_svfprintf_r+0x1ba>
   835e6:	46c8      	mov	r8, r9
   835e8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   835ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
   835ec:	f7ff bba5 	b.w	82d3a <_svfprintf_r+0xb2e>
   835f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   835f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
   835f4:	4413      	add	r3, r2
   835f6:	930e      	str	r3, [sp, #56]	; 0x38
   835f8:	e76b      	b.n	834d2 <_svfprintf_r+0x12c6>
   835fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   835fc:	e5ee      	b.n	831dc <_svfprintf_r+0xfd0>
   835fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83600:	4d3f      	ldr	r5, [pc, #252]	; (83700 <_svfprintf_r+0x14f4>)
   83602:	e4bb      	b.n	82f7c <_svfprintf_r+0xd70>
   83604:	9a16      	ldr	r2, [sp, #88]	; 0x58
   83606:	9808      	ldr	r0, [sp, #32]
   83608:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8360a:	4639      	mov	r1, r7
   8360c:	f002 ff90 	bl	86530 <__aeabi_dcmpeq>
   83610:	2800      	cmp	r0, #0
   83612:	f47f ae70 	bne.w	832f6 <_svfprintf_r+0x10ea>
   83616:	f1c5 0501 	rsb	r5, r5, #1
   8361a:	951f      	str	r5, [sp, #124]	; 0x7c
   8361c:	442c      	add	r4, r5
   8361e:	e5ca      	b.n	831b6 <_svfprintf_r+0xfaa>
   83620:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83622:	4e38      	ldr	r6, [pc, #224]	; (83704 <_svfprintf_r+0x14f8>)
   83624:	2b00      	cmp	r3, #0
   83626:	bfbe      	ittt	lt
   83628:	232d      	movlt	r3, #45	; 0x2d
   8362a:	461f      	movlt	r7, r3
   8362c:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   83630:	f04f 0303 	mov.w	r3, #3
   83634:	461a      	mov	r2, r3
   83636:	9308      	str	r3, [sp, #32]
   83638:	f04f 0300 	mov.w	r3, #0
   8363c:	bfa8      	it	ge
   8363e:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   83642:	4619      	mov	r1, r3
   83644:	930a      	str	r3, [sp, #40]	; 0x28
   83646:	4b30      	ldr	r3, [pc, #192]	; (83708 <_svfprintf_r+0x14fc>)
   83648:	f7ff b954 	b.w	828f4 <_svfprintf_r+0x6e8>
   8364c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8364e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83650:	4413      	add	r3, r2
   83652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83654:	441a      	add	r2, r3
   83656:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8365a:	920e      	str	r2, [sp, #56]	; 0x38
   8365c:	9308      	str	r3, [sp, #32]
   8365e:	e5dd      	b.n	8321c <_svfprintf_r+0x1010>
   83660:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   83664:	f1c3 0301 	rsb	r3, r3, #1
   83668:	441a      	add	r2, r3
   8366a:	4613      	mov	r3, r2
   8366c:	e7c3      	b.n	835f6 <_svfprintf_r+0x13ea>
   8366e:	f01b 0301 	ands.w	r3, fp, #1
   83672:	9312      	str	r3, [sp, #72]	; 0x48
   83674:	f47f aeb3 	bne.w	833de <_svfprintf_r+0x11d2>
   83678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8367a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8367e:	9308      	str	r3, [sp, #32]
   83680:	e5cc      	b.n	8321c <_svfprintf_r+0x1010>
   83682:	4d1f      	ldr	r5, [pc, #124]	; (83700 <_svfprintf_r+0x14f4>)
   83684:	e43c      	b.n	82f00 <_svfprintf_r+0xcf4>
   83686:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83688:	4d1d      	ldr	r5, [pc, #116]	; (83700 <_svfprintf_r+0x14f4>)
   8368a:	e491      	b.n	82fb0 <_svfprintf_r+0xda4>
   8368c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   8368e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   83692:	6828      	ldr	r0, [r5, #0]
   83694:	46a2      	mov	sl, r4
   83696:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8369a:	900a      	str	r0, [sp, #40]	; 0x28
   8369c:	4628      	mov	r0, r5
   8369e:	3004      	adds	r0, #4
   836a0:	900f      	str	r0, [sp, #60]	; 0x3c
   836a2:	f7fe be0d 	b.w	822c0 <_svfprintf_r+0xb4>
   836a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   836a8:	b913      	cbnz	r3, 836b0 <_svfprintf_r+0x14a4>
   836aa:	f01b 0f01 	tst.w	fp, #1
   836ae:	d002      	beq.n	836b6 <_svfprintf_r+0x14aa>
   836b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
   836b2:	3301      	adds	r3, #1
   836b4:	e7cd      	b.n	83652 <_svfprintf_r+0x1446>
   836b6:	2301      	movs	r3, #1
   836b8:	e71c      	b.n	834f4 <_svfprintf_r+0x12e8>
   836ba:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836be:	f7ff b980 	b.w	829c2 <_svfprintf_r+0x7b6>
   836c2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836c6:	f7ff b93a 	b.w	8293e <_svfprintf_r+0x732>
   836ca:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836ce:	f7ff b84f 	b.w	82770 <_svfprintf_r+0x564>
   836d2:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   836d6:	e679      	b.n	833cc <_svfprintf_r+0x11c0>
   836d8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836dc:	f7ff b9b2 	b.w	82a44 <_svfprintf_r+0x838>
   836e0:	f04f 32ff 	mov.w	r2, #4294967295
   836e4:	230c      	movs	r3, #12
   836e6:	9209      	str	r2, [sp, #36]	; 0x24
   836e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   836ea:	6013      	str	r3, [r2, #0]
   836ec:	f7fe be74 	b.w	823d8 <_svfprintf_r+0x1cc>
   836f0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836f4:	f7ff b8c4 	b.w	82880 <_svfprintf_r+0x674>
   836f8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836fc:	f7ff b878 	b.w	827f0 <_svfprintf_r+0x5e4>
   83700:	00086c08 	.word	0x00086c08
   83704:	00086bc0 	.word	0x00086bc0
   83708:	00086bbc 	.word	0x00086bbc

0008370c <register_fini>:
   8370c:	4b02      	ldr	r3, [pc, #8]	; (83718 <register_fini+0xc>)
   8370e:	b113      	cbz	r3, 83716 <register_fini+0xa>
   83710:	4802      	ldr	r0, [pc, #8]	; (8371c <register_fini+0x10>)
   83712:	f000 b805 	b.w	83720 <atexit>
   83716:	4770      	bx	lr
   83718:	00000000 	.word	0x00000000
   8371c:	0008469d 	.word	0x0008469d

00083720 <atexit>:
   83720:	2300      	movs	r3, #0
   83722:	4601      	mov	r1, r0
   83724:	461a      	mov	r2, r3
   83726:	4618      	mov	r0, r3
   83728:	f001 bf00 	b.w	8552c <__register_exitproc>

0008372c <quorem>:
   8372c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83730:	6903      	ldr	r3, [r0, #16]
   83732:	690f      	ldr	r7, [r1, #16]
   83734:	b083      	sub	sp, #12
   83736:	429f      	cmp	r7, r3
   83738:	f300 8088 	bgt.w	8384c <quorem+0x120>
   8373c:	3f01      	subs	r7, #1
   8373e:	f101 0614 	add.w	r6, r1, #20
   83742:	f100 0a14 	add.w	sl, r0, #20
   83746:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   8374a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8374e:	3301      	adds	r3, #1
   83750:	fbb2 f8f3 	udiv	r8, r2, r3
   83754:	00bb      	lsls	r3, r7, #2
   83756:	9300      	str	r3, [sp, #0]
   83758:	eb06 0903 	add.w	r9, r6, r3
   8375c:	4453      	add	r3, sl
   8375e:	9301      	str	r3, [sp, #4]
   83760:	f1b8 0f00 	cmp.w	r8, #0
   83764:	d03b      	beq.n	837de <quorem+0xb2>
   83766:	2300      	movs	r3, #0
   83768:	46b4      	mov	ip, r6
   8376a:	461c      	mov	r4, r3
   8376c:	46d6      	mov	lr, sl
   8376e:	f85c 2b04 	ldr.w	r2, [ip], #4
   83772:	f8de 5000 	ldr.w	r5, [lr]
   83776:	fa1f fb82 	uxth.w	fp, r2
   8377a:	fb08 330b 	mla	r3, r8, fp, r3
   8377e:	0c12      	lsrs	r2, r2, #16
   83780:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   83784:	fb08 bb02 	mla	fp, r8, r2, fp
   83788:	b29a      	uxth	r2, r3
   8378a:	1aa2      	subs	r2, r4, r2
   8378c:	b2ab      	uxth	r3, r5
   8378e:	fa1f f48b 	uxth.w	r4, fp
   83792:	441a      	add	r2, r3
   83794:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   83798:	eb04 4422 	add.w	r4, r4, r2, asr #16
   8379c:	b292      	uxth	r2, r2
   8379e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   837a2:	45e1      	cmp	r9, ip
   837a4:	f84e 2b04 	str.w	r2, [lr], #4
   837a8:	ea4f 4424 	mov.w	r4, r4, asr #16
   837ac:	ea4f 431b 	mov.w	r3, fp, lsr #16
   837b0:	d2dd      	bcs.n	8376e <quorem+0x42>
   837b2:	9b00      	ldr	r3, [sp, #0]
   837b4:	f85a 3003 	ldr.w	r3, [sl, r3]
   837b8:	b98b      	cbnz	r3, 837de <quorem+0xb2>
   837ba:	9c01      	ldr	r4, [sp, #4]
   837bc:	1f23      	subs	r3, r4, #4
   837be:	459a      	cmp	sl, r3
   837c0:	d20c      	bcs.n	837dc <quorem+0xb0>
   837c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   837c6:	b94b      	cbnz	r3, 837dc <quorem+0xb0>
   837c8:	f1a4 0308 	sub.w	r3, r4, #8
   837cc:	e002      	b.n	837d4 <quorem+0xa8>
   837ce:	681a      	ldr	r2, [r3, #0]
   837d0:	3b04      	subs	r3, #4
   837d2:	b91a      	cbnz	r2, 837dc <quorem+0xb0>
   837d4:	459a      	cmp	sl, r3
   837d6:	f107 37ff 	add.w	r7, r7, #4294967295
   837da:	d3f8      	bcc.n	837ce <quorem+0xa2>
   837dc:	6107      	str	r7, [r0, #16]
   837de:	4604      	mov	r4, r0
   837e0:	f001 fd0a 	bl	851f8 <__mcmp>
   837e4:	2800      	cmp	r0, #0
   837e6:	db2d      	blt.n	83844 <quorem+0x118>
   837e8:	4655      	mov	r5, sl
   837ea:	2300      	movs	r3, #0
   837ec:	f108 0801 	add.w	r8, r8, #1
   837f0:	f856 1b04 	ldr.w	r1, [r6], #4
   837f4:	6828      	ldr	r0, [r5, #0]
   837f6:	b28a      	uxth	r2, r1
   837f8:	1a9a      	subs	r2, r3, r2
   837fa:	0c0b      	lsrs	r3, r1, #16
   837fc:	b281      	uxth	r1, r0
   837fe:	440a      	add	r2, r1
   83800:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   83804:	eb03 4322 	add.w	r3, r3, r2, asr #16
   83808:	b292      	uxth	r2, r2
   8380a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   8380e:	45b1      	cmp	r9, r6
   83810:	f845 2b04 	str.w	r2, [r5], #4
   83814:	ea4f 4323 	mov.w	r3, r3, asr #16
   83818:	d2ea      	bcs.n	837f0 <quorem+0xc4>
   8381a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8381e:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   83822:	b97a      	cbnz	r2, 83844 <quorem+0x118>
   83824:	1f1a      	subs	r2, r3, #4
   83826:	4592      	cmp	sl, r2
   83828:	d20b      	bcs.n	83842 <quorem+0x116>
   8382a:	f853 2c04 	ldr.w	r2, [r3, #-4]
   8382e:	b942      	cbnz	r2, 83842 <quorem+0x116>
   83830:	3b08      	subs	r3, #8
   83832:	e002      	b.n	8383a <quorem+0x10e>
   83834:	681a      	ldr	r2, [r3, #0]
   83836:	3b04      	subs	r3, #4
   83838:	b91a      	cbnz	r2, 83842 <quorem+0x116>
   8383a:	459a      	cmp	sl, r3
   8383c:	f107 37ff 	add.w	r7, r7, #4294967295
   83840:	d3f8      	bcc.n	83834 <quorem+0x108>
   83842:	6127      	str	r7, [r4, #16]
   83844:	4640      	mov	r0, r8
   83846:	b003      	add	sp, #12
   83848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8384c:	2000      	movs	r0, #0
   8384e:	b003      	add	sp, #12
   83850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83854:	0000      	movs	r0, r0
	...

00083858 <_dtoa_r>:
   83858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8385c:	6c05      	ldr	r5, [r0, #64]	; 0x40
   8385e:	b09b      	sub	sp, #108	; 0x6c
   83860:	4604      	mov	r4, r0
   83862:	4692      	mov	sl, r2
   83864:	469b      	mov	fp, r3
   83866:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   83868:	b14d      	cbz	r5, 8387e <_dtoa_r+0x26>
   8386a:	2301      	movs	r3, #1
   8386c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   8386e:	4629      	mov	r1, r5
   83870:	4093      	lsls	r3, r2
   83872:	60ab      	str	r3, [r5, #8]
   83874:	606a      	str	r2, [r5, #4]
   83876:	f001 fae7 	bl	84e48 <_Bfree>
   8387a:	2300      	movs	r3, #0
   8387c:	6423      	str	r3, [r4, #64]	; 0x40
   8387e:	f1bb 0f00 	cmp.w	fp, #0
   83882:	465d      	mov	r5, fp
   83884:	db35      	blt.n	838f2 <_dtoa_r+0x9a>
   83886:	2300      	movs	r3, #0
   83888:	6033      	str	r3, [r6, #0]
   8388a:	4b9d      	ldr	r3, [pc, #628]	; (83b00 <_dtoa_r+0x2a8>)
   8388c:	43ab      	bics	r3, r5
   8388e:	d015      	beq.n	838bc <_dtoa_r+0x64>
   83890:	2200      	movs	r2, #0
   83892:	2300      	movs	r3, #0
   83894:	4650      	mov	r0, sl
   83896:	4659      	mov	r1, fp
   83898:	f002 fe4a 	bl	86530 <__aeabi_dcmpeq>
   8389c:	4680      	mov	r8, r0
   8389e:	2800      	cmp	r0, #0
   838a0:	d02d      	beq.n	838fe <_dtoa_r+0xa6>
   838a2:	2301      	movs	r3, #1
   838a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   838a6:	6013      	str	r3, [r2, #0]
   838a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   838aa:	2b00      	cmp	r3, #0
   838ac:	f000 80bd 	beq.w	83a2a <_dtoa_r+0x1d2>
   838b0:	4894      	ldr	r0, [pc, #592]	; (83b04 <_dtoa_r+0x2ac>)
   838b2:	6018      	str	r0, [r3, #0]
   838b4:	3801      	subs	r0, #1
   838b6:	b01b      	add	sp, #108	; 0x6c
   838b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   838bc:	f242 730f 	movw	r3, #9999	; 0x270f
   838c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   838c2:	6013      	str	r3, [r2, #0]
   838c4:	f1ba 0f00 	cmp.w	sl, #0
   838c8:	d10d      	bne.n	838e6 <_dtoa_r+0x8e>
   838ca:	f3c5 0513 	ubfx	r5, r5, #0, #20
   838ce:	b955      	cbnz	r5, 838e6 <_dtoa_r+0x8e>
   838d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   838d2:	488d      	ldr	r0, [pc, #564]	; (83b08 <_dtoa_r+0x2b0>)
   838d4:	2b00      	cmp	r3, #0
   838d6:	d0ee      	beq.n	838b6 <_dtoa_r+0x5e>
   838d8:	f100 0308 	add.w	r3, r0, #8
   838dc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   838de:	6013      	str	r3, [r2, #0]
   838e0:	b01b      	add	sp, #108	; 0x6c
   838e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   838e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   838e8:	4888      	ldr	r0, [pc, #544]	; (83b0c <_dtoa_r+0x2b4>)
   838ea:	2b00      	cmp	r3, #0
   838ec:	d0e3      	beq.n	838b6 <_dtoa_r+0x5e>
   838ee:	1cc3      	adds	r3, r0, #3
   838f0:	e7f4      	b.n	838dc <_dtoa_r+0x84>
   838f2:	2301      	movs	r3, #1
   838f4:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   838f8:	6033      	str	r3, [r6, #0]
   838fa:	46ab      	mov	fp, r5
   838fc:	e7c5      	b.n	8388a <_dtoa_r+0x32>
   838fe:	aa18      	add	r2, sp, #96	; 0x60
   83900:	ab19      	add	r3, sp, #100	; 0x64
   83902:	9201      	str	r2, [sp, #4]
   83904:	9300      	str	r3, [sp, #0]
   83906:	4652      	mov	r2, sl
   83908:	465b      	mov	r3, fp
   8390a:	4620      	mov	r0, r4
   8390c:	f001 fd1e 	bl	8534c <__d2b>
   83910:	0d2b      	lsrs	r3, r5, #20
   83912:	4681      	mov	r9, r0
   83914:	d071      	beq.n	839fa <_dtoa_r+0x1a2>
   83916:	4650      	mov	r0, sl
   83918:	f3cb 0213 	ubfx	r2, fp, #0, #20
   8391c:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   83920:	9f18      	ldr	r7, [sp, #96]	; 0x60
   83922:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   83926:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   8392a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8392e:	2200      	movs	r2, #0
   83930:	4b77      	ldr	r3, [pc, #476]	; (83b10 <_dtoa_r+0x2b8>)
   83932:	f002 f9e1 	bl	85cf8 <__aeabi_dsub>
   83936:	a36c      	add	r3, pc, #432	; (adr r3, 83ae8 <_dtoa_r+0x290>)
   83938:	e9d3 2300 	ldrd	r2, r3, [r3]
   8393c:	f002 fb90 	bl	86060 <__aeabi_dmul>
   83940:	a36b      	add	r3, pc, #428	; (adr r3, 83af0 <_dtoa_r+0x298>)
   83942:	e9d3 2300 	ldrd	r2, r3, [r3]
   83946:	f002 f9d9 	bl	85cfc <__adddf3>
   8394a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   8394e:	4630      	mov	r0, r6
   83950:	f002 fb20 	bl	85f94 <__aeabi_i2d>
   83954:	a368      	add	r3, pc, #416	; (adr r3, 83af8 <_dtoa_r+0x2a0>)
   83956:	e9d3 2300 	ldrd	r2, r3, [r3]
   8395a:	f002 fb81 	bl	86060 <__aeabi_dmul>
   8395e:	4602      	mov	r2, r0
   83960:	460b      	mov	r3, r1
   83962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   83966:	f002 f9c9 	bl	85cfc <__adddf3>
   8396a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8396e:	f002 fe27 	bl	865c0 <__aeabi_d2iz>
   83972:	2200      	movs	r2, #0
   83974:	9002      	str	r0, [sp, #8]
   83976:	2300      	movs	r3, #0
   83978:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8397c:	f002 fde2 	bl	86544 <__aeabi_dcmplt>
   83980:	2800      	cmp	r0, #0
   83982:	f040 816d 	bne.w	83c60 <_dtoa_r+0x408>
   83986:	9d02      	ldr	r5, [sp, #8]
   83988:	2d16      	cmp	r5, #22
   8398a:	f200 8157 	bhi.w	83c3c <_dtoa_r+0x3e4>
   8398e:	4961      	ldr	r1, [pc, #388]	; (83b14 <_dtoa_r+0x2bc>)
   83990:	4652      	mov	r2, sl
   83992:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   83996:	465b      	mov	r3, fp
   83998:	e9d1 0100 	ldrd	r0, r1, [r1]
   8399c:	f002 fdf0 	bl	86580 <__aeabi_dcmpgt>
   839a0:	2800      	cmp	r0, #0
   839a2:	f000 81be 	beq.w	83d22 <_dtoa_r+0x4ca>
   839a6:	1e6b      	subs	r3, r5, #1
   839a8:	9302      	str	r3, [sp, #8]
   839aa:	2300      	movs	r3, #0
   839ac:	930e      	str	r3, [sp, #56]	; 0x38
   839ae:	1bbf      	subs	r7, r7, r6
   839b0:	1e7b      	subs	r3, r7, #1
   839b2:	9308      	str	r3, [sp, #32]
   839b4:	f100 814e 	bmi.w	83c54 <_dtoa_r+0x3fc>
   839b8:	2300      	movs	r3, #0
   839ba:	930a      	str	r3, [sp, #40]	; 0x28
   839bc:	9b02      	ldr	r3, [sp, #8]
   839be:	2b00      	cmp	r3, #0
   839c0:	f2c0 813f 	blt.w	83c42 <_dtoa_r+0x3ea>
   839c4:	9a08      	ldr	r2, [sp, #32]
   839c6:	930d      	str	r3, [sp, #52]	; 0x34
   839c8:	4611      	mov	r1, r2
   839ca:	4419      	add	r1, r3
   839cc:	2300      	movs	r3, #0
   839ce:	9108      	str	r1, [sp, #32]
   839d0:	930c      	str	r3, [sp, #48]	; 0x30
   839d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   839d4:	2b09      	cmp	r3, #9
   839d6:	d82a      	bhi.n	83a2e <_dtoa_r+0x1d6>
   839d8:	2b05      	cmp	r3, #5
   839da:	f340 8658 	ble.w	8468e <_dtoa_r+0xe36>
   839de:	2500      	movs	r5, #0
   839e0:	3b04      	subs	r3, #4
   839e2:	9324      	str	r3, [sp, #144]	; 0x90
   839e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   839e6:	3b02      	subs	r3, #2
   839e8:	2b03      	cmp	r3, #3
   839ea:	f200 863f 	bhi.w	8466c <_dtoa_r+0xe14>
   839ee:	e8df f013 	tbh	[pc, r3, lsl #1]
   839f2:	03ce      	.short	0x03ce
   839f4:	03d902c3 	.word	0x03d902c3
   839f8:	045b      	.short	0x045b
   839fa:	9f18      	ldr	r7, [sp, #96]	; 0x60
   839fc:	9e19      	ldr	r6, [sp, #100]	; 0x64
   839fe:	443e      	add	r6, r7
   83a00:	f206 4332 	addw	r3, r6, #1074	; 0x432
   83a04:	2b20      	cmp	r3, #32
   83a06:	f340 8187 	ble.w	83d18 <_dtoa_r+0x4c0>
   83a0a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   83a0e:	f206 4012 	addw	r0, r6, #1042	; 0x412
   83a12:	409d      	lsls	r5, r3
   83a14:	fa2a f000 	lsr.w	r0, sl, r0
   83a18:	4328      	orrs	r0, r5
   83a1a:	f002 faab 	bl	85f74 <__aeabi_ui2d>
   83a1e:	2301      	movs	r3, #1
   83a20:	3e01      	subs	r6, #1
   83a22:	9314      	str	r3, [sp, #80]	; 0x50
   83a24:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   83a28:	e781      	b.n	8392e <_dtoa_r+0xd6>
   83a2a:	483b      	ldr	r0, [pc, #236]	; (83b18 <_dtoa_r+0x2c0>)
   83a2c:	e743      	b.n	838b6 <_dtoa_r+0x5e>
   83a2e:	2100      	movs	r1, #0
   83a30:	4620      	mov	r0, r4
   83a32:	6461      	str	r1, [r4, #68]	; 0x44
   83a34:	9125      	str	r1, [sp, #148]	; 0x94
   83a36:	f001 f9e1 	bl	84dfc <_Balloc>
   83a3a:	f04f 33ff 	mov.w	r3, #4294967295
   83a3e:	9307      	str	r3, [sp, #28]
   83a40:	930f      	str	r3, [sp, #60]	; 0x3c
   83a42:	2301      	movs	r3, #1
   83a44:	9a25      	ldr	r2, [sp, #148]	; 0x94
   83a46:	9004      	str	r0, [sp, #16]
   83a48:	6420      	str	r0, [r4, #64]	; 0x40
   83a4a:	9224      	str	r2, [sp, #144]	; 0x90
   83a4c:	930b      	str	r3, [sp, #44]	; 0x2c
   83a4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   83a50:	2b00      	cmp	r3, #0
   83a52:	f2c0 80d3 	blt.w	83bfc <_dtoa_r+0x3a4>
   83a56:	9a02      	ldr	r2, [sp, #8]
   83a58:	2a0e      	cmp	r2, #14
   83a5a:	f300 80cf 	bgt.w	83bfc <_dtoa_r+0x3a4>
   83a5e:	4b2d      	ldr	r3, [pc, #180]	; (83b14 <_dtoa_r+0x2bc>)
   83a60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   83a64:	e9d3 2300 	ldrd	r2, r3, [r3]
   83a68:	e9cd 2308 	strd	r2, r3, [sp, #32]
   83a6c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   83a6e:	2b00      	cmp	r3, #0
   83a70:	f2c0 83b4 	blt.w	841dc <_dtoa_r+0x984>
   83a74:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   83a78:	4650      	mov	r0, sl
   83a7a:	462a      	mov	r2, r5
   83a7c:	4633      	mov	r3, r6
   83a7e:	4659      	mov	r1, fp
   83a80:	f002 fc18 	bl	862b4 <__aeabi_ddiv>
   83a84:	f002 fd9c 	bl	865c0 <__aeabi_d2iz>
   83a88:	4680      	mov	r8, r0
   83a8a:	f002 fa83 	bl	85f94 <__aeabi_i2d>
   83a8e:	462a      	mov	r2, r5
   83a90:	4633      	mov	r3, r6
   83a92:	f002 fae5 	bl	86060 <__aeabi_dmul>
   83a96:	4602      	mov	r2, r0
   83a98:	460b      	mov	r3, r1
   83a9a:	4650      	mov	r0, sl
   83a9c:	4659      	mov	r1, fp
   83a9e:	f002 f92b 	bl	85cf8 <__aeabi_dsub>
   83aa2:	9e07      	ldr	r6, [sp, #28]
   83aa4:	9f04      	ldr	r7, [sp, #16]
   83aa6:	f108 0530 	add.w	r5, r8, #48	; 0x30
   83aaa:	2e01      	cmp	r6, #1
   83aac:	703d      	strb	r5, [r7, #0]
   83aae:	4602      	mov	r2, r0
   83ab0:	460b      	mov	r3, r1
   83ab2:	f107 0501 	add.w	r5, r7, #1
   83ab6:	d064      	beq.n	83b82 <_dtoa_r+0x32a>
   83ab8:	2200      	movs	r2, #0
   83aba:	4b18      	ldr	r3, [pc, #96]	; (83b1c <_dtoa_r+0x2c4>)
   83abc:	f002 fad0 	bl	86060 <__aeabi_dmul>
   83ac0:	2200      	movs	r2, #0
   83ac2:	2300      	movs	r3, #0
   83ac4:	4606      	mov	r6, r0
   83ac6:	460f      	mov	r7, r1
   83ac8:	f002 fd32 	bl	86530 <__aeabi_dcmpeq>
   83acc:	2800      	cmp	r0, #0
   83ace:	f040 8082 	bne.w	83bd6 <_dtoa_r+0x37e>
   83ad2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   83ad6:	f04f 0a00 	mov.w	sl, #0
   83ada:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   83ade:	f04f 0b00 	mov.w	fp, #0
   83ae2:	940b      	str	r4, [sp, #44]	; 0x2c
   83ae4:	e029      	b.n	83b3a <_dtoa_r+0x2e2>
   83ae6:	bf00      	nop
   83ae8:	636f4361 	.word	0x636f4361
   83aec:	3fd287a7 	.word	0x3fd287a7
   83af0:	8b60c8b3 	.word	0x8b60c8b3
   83af4:	3fc68a28 	.word	0x3fc68a28
   83af8:	509f79fb 	.word	0x509f79fb
   83afc:	3fd34413 	.word	0x3fd34413
   83b00:	7ff00000 	.word	0x7ff00000
   83b04:	00086bf5 	.word	0x00086bf5
   83b08:	00086c18 	.word	0x00086c18
   83b0c:	00086c24 	.word	0x00086c24
   83b10:	3ff80000 	.word	0x3ff80000
   83b14:	00086c60 	.word	0x00086c60
   83b18:	00086bf4 	.word	0x00086bf4
   83b1c:	40240000 	.word	0x40240000
   83b20:	2200      	movs	r2, #0
   83b22:	4b81      	ldr	r3, [pc, #516]	; (83d28 <_dtoa_r+0x4d0>)
   83b24:	f002 fa9c 	bl	86060 <__aeabi_dmul>
   83b28:	4652      	mov	r2, sl
   83b2a:	465b      	mov	r3, fp
   83b2c:	4606      	mov	r6, r0
   83b2e:	460f      	mov	r7, r1
   83b30:	f002 fcfe 	bl	86530 <__aeabi_dcmpeq>
   83b34:	2800      	cmp	r0, #0
   83b36:	f040 83ba 	bne.w	842ae <_dtoa_r+0xa56>
   83b3a:	4642      	mov	r2, r8
   83b3c:	464b      	mov	r3, r9
   83b3e:	4630      	mov	r0, r6
   83b40:	4639      	mov	r1, r7
   83b42:	f002 fbb7 	bl	862b4 <__aeabi_ddiv>
   83b46:	f002 fd3b 	bl	865c0 <__aeabi_d2iz>
   83b4a:	4604      	mov	r4, r0
   83b4c:	f002 fa22 	bl	85f94 <__aeabi_i2d>
   83b50:	4642      	mov	r2, r8
   83b52:	464b      	mov	r3, r9
   83b54:	f002 fa84 	bl	86060 <__aeabi_dmul>
   83b58:	4602      	mov	r2, r0
   83b5a:	460b      	mov	r3, r1
   83b5c:	4630      	mov	r0, r6
   83b5e:	4639      	mov	r1, r7
   83b60:	f002 f8ca 	bl	85cf8 <__aeabi_dsub>
   83b64:	f104 0630 	add.w	r6, r4, #48	; 0x30
   83b68:	f805 6b01 	strb.w	r6, [r5], #1
   83b6c:	9e04      	ldr	r6, [sp, #16]
   83b6e:	9f07      	ldr	r7, [sp, #28]
   83b70:	1bae      	subs	r6, r5, r6
   83b72:	42be      	cmp	r6, r7
   83b74:	4602      	mov	r2, r0
   83b76:	460b      	mov	r3, r1
   83b78:	d1d2      	bne.n	83b20 <_dtoa_r+0x2c8>
   83b7a:	46a0      	mov	r8, r4
   83b7c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   83b80:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   83b82:	4610      	mov	r0, r2
   83b84:	4619      	mov	r1, r3
   83b86:	f002 f8b9 	bl	85cfc <__adddf3>
   83b8a:	4606      	mov	r6, r0
   83b8c:	460f      	mov	r7, r1
   83b8e:	4602      	mov	r2, r0
   83b90:	460b      	mov	r3, r1
   83b92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   83b96:	f002 fcd5 	bl	86544 <__aeabi_dcmplt>
   83b9a:	b948      	cbnz	r0, 83bb0 <_dtoa_r+0x358>
   83b9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   83ba0:	4632      	mov	r2, r6
   83ba2:	463b      	mov	r3, r7
   83ba4:	f002 fcc4 	bl	86530 <__aeabi_dcmpeq>
   83ba8:	b1a8      	cbz	r0, 83bd6 <_dtoa_r+0x37e>
   83baa:	f018 0f01 	tst.w	r8, #1
   83bae:	d012      	beq.n	83bd6 <_dtoa_r+0x37e>
   83bb0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   83bb4:	1e6b      	subs	r3, r5, #1
   83bb6:	9a04      	ldr	r2, [sp, #16]
   83bb8:	e004      	b.n	83bc4 <_dtoa_r+0x36c>
   83bba:	429a      	cmp	r2, r3
   83bbc:	f000 8402 	beq.w	843c4 <_dtoa_r+0xb6c>
   83bc0:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   83bc4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   83bc8:	f103 0501 	add.w	r5, r3, #1
   83bcc:	d0f5      	beq.n	83bba <_dtoa_r+0x362>
   83bce:	f108 0801 	add.w	r8, r8, #1
   83bd2:	f883 8000 	strb.w	r8, [r3]
   83bd6:	4649      	mov	r1, r9
   83bd8:	4620      	mov	r0, r4
   83bda:	f001 f935 	bl	84e48 <_Bfree>
   83bde:	2200      	movs	r2, #0
   83be0:	9b02      	ldr	r3, [sp, #8]
   83be2:	702a      	strb	r2, [r5, #0]
   83be4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83be6:	3301      	adds	r3, #1
   83be8:	6013      	str	r3, [r2, #0]
   83bea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83bec:	2b00      	cmp	r3, #0
   83bee:	f000 839f 	beq.w	84330 <_dtoa_r+0xad8>
   83bf2:	9804      	ldr	r0, [sp, #16]
   83bf4:	601d      	str	r5, [r3, #0]
   83bf6:	b01b      	add	sp, #108	; 0x6c
   83bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83bfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83bfe:	2a00      	cmp	r2, #0
   83c00:	d03e      	beq.n	83c80 <_dtoa_r+0x428>
   83c02:	9a24      	ldr	r2, [sp, #144]	; 0x90
   83c04:	2a01      	cmp	r2, #1
   83c06:	f340 8311 	ble.w	8422c <_dtoa_r+0x9d4>
   83c0a:	9b07      	ldr	r3, [sp, #28]
   83c0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83c0e:	1e5f      	subs	r7, r3, #1
   83c10:	42ba      	cmp	r2, r7
   83c12:	f2c0 8390 	blt.w	84336 <_dtoa_r+0xade>
   83c16:	1bd7      	subs	r7, r2, r7
   83c18:	9b07      	ldr	r3, [sp, #28]
   83c1a:	2b00      	cmp	r3, #0
   83c1c:	f2c0 848c 	blt.w	84538 <_dtoa_r+0xce0>
   83c20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83c22:	9b07      	ldr	r3, [sp, #28]
   83c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83c26:	2101      	movs	r1, #1
   83c28:	441a      	add	r2, r3
   83c2a:	920a      	str	r2, [sp, #40]	; 0x28
   83c2c:	9a08      	ldr	r2, [sp, #32]
   83c2e:	4620      	mov	r0, r4
   83c30:	441a      	add	r2, r3
   83c32:	9208      	str	r2, [sp, #32]
   83c34:	f001 f9a4 	bl	84f80 <__i2b>
   83c38:	4606      	mov	r6, r0
   83c3a:	e023      	b.n	83c84 <_dtoa_r+0x42c>
   83c3c:	2301      	movs	r3, #1
   83c3e:	930e      	str	r3, [sp, #56]	; 0x38
   83c40:	e6b5      	b.n	839ae <_dtoa_r+0x156>
   83c42:	2300      	movs	r3, #0
   83c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83c46:	930d      	str	r3, [sp, #52]	; 0x34
   83c48:	9b02      	ldr	r3, [sp, #8]
   83c4a:	1ad2      	subs	r2, r2, r3
   83c4c:	425b      	negs	r3, r3
   83c4e:	920a      	str	r2, [sp, #40]	; 0x28
   83c50:	930c      	str	r3, [sp, #48]	; 0x30
   83c52:	e6be      	b.n	839d2 <_dtoa_r+0x17a>
   83c54:	f1c7 0301 	rsb	r3, r7, #1
   83c58:	930a      	str	r3, [sp, #40]	; 0x28
   83c5a:	2300      	movs	r3, #0
   83c5c:	9308      	str	r3, [sp, #32]
   83c5e:	e6ad      	b.n	839bc <_dtoa_r+0x164>
   83c60:	9d02      	ldr	r5, [sp, #8]
   83c62:	4628      	mov	r0, r5
   83c64:	f002 f996 	bl	85f94 <__aeabi_i2d>
   83c68:	4602      	mov	r2, r0
   83c6a:	460b      	mov	r3, r1
   83c6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83c70:	f002 fc5e 	bl	86530 <__aeabi_dcmpeq>
   83c74:	2800      	cmp	r0, #0
   83c76:	f47f ae86 	bne.w	83986 <_dtoa_r+0x12e>
   83c7a:	1e6b      	subs	r3, r5, #1
   83c7c:	9302      	str	r3, [sp, #8]
   83c7e:	e682      	b.n	83986 <_dtoa_r+0x12e>
   83c80:	ad0a      	add	r5, sp, #40	; 0x28
   83c82:	cde0      	ldmia	r5, {r5, r6, r7}
   83c84:	2d00      	cmp	r5, #0
   83c86:	dd0c      	ble.n	83ca2 <_dtoa_r+0x44a>
   83c88:	9908      	ldr	r1, [sp, #32]
   83c8a:	2900      	cmp	r1, #0
   83c8c:	460b      	mov	r3, r1
   83c8e:	dd08      	ble.n	83ca2 <_dtoa_r+0x44a>
   83c90:	42a9      	cmp	r1, r5
   83c92:	bfa8      	it	ge
   83c94:	462b      	movge	r3, r5
   83c96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83c98:	1aed      	subs	r5, r5, r3
   83c9a:	1ad2      	subs	r2, r2, r3
   83c9c:	1acb      	subs	r3, r1, r3
   83c9e:	920a      	str	r2, [sp, #40]	; 0x28
   83ca0:	9308      	str	r3, [sp, #32]
   83ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83ca4:	b1d3      	cbz	r3, 83cdc <_dtoa_r+0x484>
   83ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83ca8:	2b00      	cmp	r3, #0
   83caa:	f000 82b8 	beq.w	8421e <_dtoa_r+0x9c6>
   83cae:	2f00      	cmp	r7, #0
   83cb0:	dd10      	ble.n	83cd4 <_dtoa_r+0x47c>
   83cb2:	4631      	mov	r1, r6
   83cb4:	463a      	mov	r2, r7
   83cb6:	4620      	mov	r0, r4
   83cb8:	f001 f9fe 	bl	850b8 <__pow5mult>
   83cbc:	464a      	mov	r2, r9
   83cbe:	4601      	mov	r1, r0
   83cc0:	4606      	mov	r6, r0
   83cc2:	4620      	mov	r0, r4
   83cc4:	f001 f966 	bl	84f94 <__multiply>
   83cc8:	4603      	mov	r3, r0
   83cca:	4649      	mov	r1, r9
   83ccc:	4620      	mov	r0, r4
   83cce:	4699      	mov	r9, r3
   83cd0:	f001 f8ba 	bl	84e48 <_Bfree>
   83cd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83cd6:	1bda      	subs	r2, r3, r7
   83cd8:	f040 82a2 	bne.w	84220 <_dtoa_r+0x9c8>
   83cdc:	2101      	movs	r1, #1
   83cde:	4620      	mov	r0, r4
   83ce0:	f001 f94e 	bl	84f80 <__i2b>
   83ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83ce6:	4680      	mov	r8, r0
   83ce8:	2b00      	cmp	r3, #0
   83cea:	dd1f      	ble.n	83d2c <_dtoa_r+0x4d4>
   83cec:	4601      	mov	r1, r0
   83cee:	461a      	mov	r2, r3
   83cf0:	4620      	mov	r0, r4
   83cf2:	f001 f9e1 	bl	850b8 <__pow5mult>
   83cf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83cf8:	4680      	mov	r8, r0
   83cfa:	2b01      	cmp	r3, #1
   83cfc:	f340 8255 	ble.w	841aa <_dtoa_r+0x952>
   83d00:	2300      	movs	r3, #0
   83d02:	930c      	str	r3, [sp, #48]	; 0x30
   83d04:	f8d8 3010 	ldr.w	r3, [r8, #16]
   83d08:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   83d0c:	6918      	ldr	r0, [r3, #16]
   83d0e:	f001 f8e7 	bl	84ee0 <__hi0bits>
   83d12:	f1c0 0020 	rsb	r0, r0, #32
   83d16:	e013      	b.n	83d40 <_dtoa_r+0x4e8>
   83d18:	f1c3 0520 	rsb	r5, r3, #32
   83d1c:	fa0a f005 	lsl.w	r0, sl, r5
   83d20:	e67b      	b.n	83a1a <_dtoa_r+0x1c2>
   83d22:	900e      	str	r0, [sp, #56]	; 0x38
   83d24:	e643      	b.n	839ae <_dtoa_r+0x156>
   83d26:	bf00      	nop
   83d28:	40240000 	.word	0x40240000
   83d2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83d2e:	2b01      	cmp	r3, #1
   83d30:	f340 8285 	ble.w	8423e <_dtoa_r+0x9e6>
   83d34:	2300      	movs	r3, #0
   83d36:	930c      	str	r3, [sp, #48]	; 0x30
   83d38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83d3a:	2001      	movs	r0, #1
   83d3c:	2b00      	cmp	r3, #0
   83d3e:	d1e1      	bne.n	83d04 <_dtoa_r+0x4ac>
   83d40:	9a08      	ldr	r2, [sp, #32]
   83d42:	4410      	add	r0, r2
   83d44:	f010 001f 	ands.w	r0, r0, #31
   83d48:	f000 80a1 	beq.w	83e8e <_dtoa_r+0x636>
   83d4c:	f1c0 0320 	rsb	r3, r0, #32
   83d50:	2b04      	cmp	r3, #4
   83d52:	f340 8486 	ble.w	84662 <_dtoa_r+0xe0a>
   83d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83d58:	f1c0 001c 	rsb	r0, r0, #28
   83d5c:	4403      	add	r3, r0
   83d5e:	930a      	str	r3, [sp, #40]	; 0x28
   83d60:	4613      	mov	r3, r2
   83d62:	4403      	add	r3, r0
   83d64:	4405      	add	r5, r0
   83d66:	9308      	str	r3, [sp, #32]
   83d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83d6a:	2b00      	cmp	r3, #0
   83d6c:	dd05      	ble.n	83d7a <_dtoa_r+0x522>
   83d6e:	4649      	mov	r1, r9
   83d70:	461a      	mov	r2, r3
   83d72:	4620      	mov	r0, r4
   83d74:	f001 f9f0 	bl	85158 <__lshift>
   83d78:	4681      	mov	r9, r0
   83d7a:	9b08      	ldr	r3, [sp, #32]
   83d7c:	2b00      	cmp	r3, #0
   83d7e:	dd05      	ble.n	83d8c <_dtoa_r+0x534>
   83d80:	4641      	mov	r1, r8
   83d82:	461a      	mov	r2, r3
   83d84:	4620      	mov	r0, r4
   83d86:	f001 f9e7 	bl	85158 <__lshift>
   83d8a:	4680      	mov	r8, r0
   83d8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83d8e:	2b00      	cmp	r3, #0
   83d90:	f040 8086 	bne.w	83ea0 <_dtoa_r+0x648>
   83d94:	9b07      	ldr	r3, [sp, #28]
   83d96:	2b00      	cmp	r3, #0
   83d98:	f340 8264 	ble.w	84264 <_dtoa_r+0xa0c>
   83d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83d9e:	2b00      	cmp	r3, #0
   83da0:	f000 8098 	beq.w	83ed4 <_dtoa_r+0x67c>
   83da4:	2d00      	cmp	r5, #0
   83da6:	dd05      	ble.n	83db4 <_dtoa_r+0x55c>
   83da8:	4631      	mov	r1, r6
   83daa:	462a      	mov	r2, r5
   83dac:	4620      	mov	r0, r4
   83dae:	f001 f9d3 	bl	85158 <__lshift>
   83db2:	4606      	mov	r6, r0
   83db4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83db6:	2b00      	cmp	r3, #0
   83db8:	f040 8336 	bne.w	84428 <_dtoa_r+0xbd0>
   83dbc:	9608      	str	r6, [sp, #32]
   83dbe:	9b07      	ldr	r3, [sp, #28]
   83dc0:	9a04      	ldr	r2, [sp, #16]
   83dc2:	3b01      	subs	r3, #1
   83dc4:	18d3      	adds	r3, r2, r3
   83dc6:	930b      	str	r3, [sp, #44]	; 0x2c
   83dc8:	4617      	mov	r7, r2
   83dca:	f00a 0301 	and.w	r3, sl, #1
   83dce:	46c2      	mov	sl, r8
   83dd0:	f8dd b020 	ldr.w	fp, [sp, #32]
   83dd4:	930c      	str	r3, [sp, #48]	; 0x30
   83dd6:	4651      	mov	r1, sl
   83dd8:	4648      	mov	r0, r9
   83dda:	f7ff fca7 	bl	8372c <quorem>
   83dde:	4631      	mov	r1, r6
   83de0:	4605      	mov	r5, r0
   83de2:	4648      	mov	r0, r9
   83de4:	f001 fa08 	bl	851f8 <__mcmp>
   83de8:	465a      	mov	r2, fp
   83dea:	9007      	str	r0, [sp, #28]
   83dec:	4651      	mov	r1, sl
   83dee:	4620      	mov	r0, r4
   83df0:	f001 fa1e 	bl	85230 <__mdiff>
   83df4:	68c2      	ldr	r2, [r0, #12]
   83df6:	4680      	mov	r8, r0
   83df8:	f105 0330 	add.w	r3, r5, #48	; 0x30
   83dfc:	2a00      	cmp	r2, #0
   83dfe:	f040 8229 	bne.w	84254 <_dtoa_r+0x9fc>
   83e02:	4601      	mov	r1, r0
   83e04:	4648      	mov	r0, r9
   83e06:	930a      	str	r3, [sp, #40]	; 0x28
   83e08:	f001 f9f6 	bl	851f8 <__mcmp>
   83e0c:	4641      	mov	r1, r8
   83e0e:	9008      	str	r0, [sp, #32]
   83e10:	4620      	mov	r0, r4
   83e12:	f001 f819 	bl	84e48 <_Bfree>
   83e16:	9a08      	ldr	r2, [sp, #32]
   83e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83e1a:	b932      	cbnz	r2, 83e2a <_dtoa_r+0x5d2>
   83e1c:	9924      	ldr	r1, [sp, #144]	; 0x90
   83e1e:	b921      	cbnz	r1, 83e2a <_dtoa_r+0x5d2>
   83e20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83e22:	2a00      	cmp	r2, #0
   83e24:	f000 83ee 	beq.w	84604 <_dtoa_r+0xdac>
   83e28:	9a24      	ldr	r2, [sp, #144]	; 0x90
   83e2a:	9907      	ldr	r1, [sp, #28]
   83e2c:	2900      	cmp	r1, #0
   83e2e:	f2c0 829f 	blt.w	84370 <_dtoa_r+0xb18>
   83e32:	d105      	bne.n	83e40 <_dtoa_r+0x5e8>
   83e34:	9924      	ldr	r1, [sp, #144]	; 0x90
   83e36:	b919      	cbnz	r1, 83e40 <_dtoa_r+0x5e8>
   83e38:	990c      	ldr	r1, [sp, #48]	; 0x30
   83e3a:	2900      	cmp	r1, #0
   83e3c:	f000 8298 	beq.w	84370 <_dtoa_r+0xb18>
   83e40:	2a00      	cmp	r2, #0
   83e42:	f300 8305 	bgt.w	84450 <_dtoa_r+0xbf8>
   83e46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83e48:	f107 0801 	add.w	r8, r7, #1
   83e4c:	4297      	cmp	r7, r2
   83e4e:	703b      	strb	r3, [r7, #0]
   83e50:	4645      	mov	r5, r8
   83e52:	f000 830b 	beq.w	8446c <_dtoa_r+0xc14>
   83e56:	4649      	mov	r1, r9
   83e58:	2300      	movs	r3, #0
   83e5a:	220a      	movs	r2, #10
   83e5c:	4620      	mov	r0, r4
   83e5e:	f000 fffd 	bl	84e5c <__multadd>
   83e62:	455e      	cmp	r6, fp
   83e64:	4681      	mov	r9, r0
   83e66:	4631      	mov	r1, r6
   83e68:	f04f 0300 	mov.w	r3, #0
   83e6c:	f04f 020a 	mov.w	r2, #10
   83e70:	4620      	mov	r0, r4
   83e72:	f000 81e9 	beq.w	84248 <_dtoa_r+0x9f0>
   83e76:	f000 fff1 	bl	84e5c <__multadd>
   83e7a:	4659      	mov	r1, fp
   83e7c:	4606      	mov	r6, r0
   83e7e:	2300      	movs	r3, #0
   83e80:	220a      	movs	r2, #10
   83e82:	4620      	mov	r0, r4
   83e84:	f000 ffea 	bl	84e5c <__multadd>
   83e88:	4647      	mov	r7, r8
   83e8a:	4683      	mov	fp, r0
   83e8c:	e7a3      	b.n	83dd6 <_dtoa_r+0x57e>
   83e8e:	201c      	movs	r0, #28
   83e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83e92:	4405      	add	r5, r0
   83e94:	4403      	add	r3, r0
   83e96:	930a      	str	r3, [sp, #40]	; 0x28
   83e98:	9b08      	ldr	r3, [sp, #32]
   83e9a:	4403      	add	r3, r0
   83e9c:	9308      	str	r3, [sp, #32]
   83e9e:	e763      	b.n	83d68 <_dtoa_r+0x510>
   83ea0:	4641      	mov	r1, r8
   83ea2:	4648      	mov	r0, r9
   83ea4:	f001 f9a8 	bl	851f8 <__mcmp>
   83ea8:	2800      	cmp	r0, #0
   83eaa:	f6bf af73 	bge.w	83d94 <_dtoa_r+0x53c>
   83eae:	9f02      	ldr	r7, [sp, #8]
   83eb0:	4649      	mov	r1, r9
   83eb2:	2300      	movs	r3, #0
   83eb4:	220a      	movs	r2, #10
   83eb6:	4620      	mov	r0, r4
   83eb8:	3f01      	subs	r7, #1
   83eba:	9702      	str	r7, [sp, #8]
   83ebc:	f000 ffce 	bl	84e5c <__multadd>
   83ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83ec2:	4681      	mov	r9, r0
   83ec4:	2b00      	cmp	r3, #0
   83ec6:	f040 83b5 	bne.w	84634 <_dtoa_r+0xddc>
   83eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   83ecc:	2b00      	cmp	r3, #0
   83ece:	f340 83be 	ble.w	8464e <_dtoa_r+0xdf6>
   83ed2:	9307      	str	r3, [sp, #28]
   83ed4:	f8dd a010 	ldr.w	sl, [sp, #16]
   83ed8:	9f07      	ldr	r7, [sp, #28]
   83eda:	4655      	mov	r5, sl
   83edc:	e006      	b.n	83eec <_dtoa_r+0x694>
   83ede:	4649      	mov	r1, r9
   83ee0:	2300      	movs	r3, #0
   83ee2:	220a      	movs	r2, #10
   83ee4:	4620      	mov	r0, r4
   83ee6:	f000 ffb9 	bl	84e5c <__multadd>
   83eea:	4681      	mov	r9, r0
   83eec:	4641      	mov	r1, r8
   83eee:	4648      	mov	r0, r9
   83ef0:	f7ff fc1c 	bl	8372c <quorem>
   83ef4:	3030      	adds	r0, #48	; 0x30
   83ef6:	f805 0b01 	strb.w	r0, [r5], #1
   83efa:	eba5 030a 	sub.w	r3, r5, sl
   83efe:	42bb      	cmp	r3, r7
   83f00:	dbed      	blt.n	83ede <_dtoa_r+0x686>
   83f02:	9b04      	ldr	r3, [sp, #16]
   83f04:	9a07      	ldr	r2, [sp, #28]
   83f06:	4682      	mov	sl, r0
   83f08:	2a01      	cmp	r2, #1
   83f0a:	bfac      	ite	ge
   83f0c:	189b      	addge	r3, r3, r2
   83f0e:	3301      	addlt	r3, #1
   83f10:	f04f 0b00 	mov.w	fp, #0
   83f14:	461d      	mov	r5, r3
   83f16:	4649      	mov	r1, r9
   83f18:	2201      	movs	r2, #1
   83f1a:	4620      	mov	r0, r4
   83f1c:	f001 f91c 	bl	85158 <__lshift>
   83f20:	4641      	mov	r1, r8
   83f22:	4681      	mov	r9, r0
   83f24:	f001 f968 	bl	851f8 <__mcmp>
   83f28:	2800      	cmp	r0, #0
   83f2a:	f340 823f 	ble.w	843ac <_dtoa_r+0xb54>
   83f2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   83f32:	1e6b      	subs	r3, r5, #1
   83f34:	9904      	ldr	r1, [sp, #16]
   83f36:	e004      	b.n	83f42 <_dtoa_r+0x6ea>
   83f38:	428b      	cmp	r3, r1
   83f3a:	f000 81ae 	beq.w	8429a <_dtoa_r+0xa42>
   83f3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   83f42:	2a39      	cmp	r2, #57	; 0x39
   83f44:	f103 0501 	add.w	r5, r3, #1
   83f48:	d0f6      	beq.n	83f38 <_dtoa_r+0x6e0>
   83f4a:	3201      	adds	r2, #1
   83f4c:	701a      	strb	r2, [r3, #0]
   83f4e:	4641      	mov	r1, r8
   83f50:	4620      	mov	r0, r4
   83f52:	f000 ff79 	bl	84e48 <_Bfree>
   83f56:	2e00      	cmp	r6, #0
   83f58:	f43f ae3d 	beq.w	83bd6 <_dtoa_r+0x37e>
   83f5c:	f1bb 0f00 	cmp.w	fp, #0
   83f60:	d005      	beq.n	83f6e <_dtoa_r+0x716>
   83f62:	45b3      	cmp	fp, r6
   83f64:	d003      	beq.n	83f6e <_dtoa_r+0x716>
   83f66:	4659      	mov	r1, fp
   83f68:	4620      	mov	r0, r4
   83f6a:	f000 ff6d 	bl	84e48 <_Bfree>
   83f6e:	4631      	mov	r1, r6
   83f70:	4620      	mov	r0, r4
   83f72:	f000 ff69 	bl	84e48 <_Bfree>
   83f76:	e62e      	b.n	83bd6 <_dtoa_r+0x37e>
   83f78:	2300      	movs	r3, #0
   83f7a:	930b      	str	r3, [sp, #44]	; 0x2c
   83f7c:	9b02      	ldr	r3, [sp, #8]
   83f7e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   83f80:	4413      	add	r3, r2
   83f82:	930f      	str	r3, [sp, #60]	; 0x3c
   83f84:	3301      	adds	r3, #1
   83f86:	2b01      	cmp	r3, #1
   83f88:	461f      	mov	r7, r3
   83f8a:	461e      	mov	r6, r3
   83f8c:	bfb8      	it	lt
   83f8e:	2701      	movlt	r7, #1
   83f90:	9307      	str	r3, [sp, #28]
   83f92:	2100      	movs	r1, #0
   83f94:	2f17      	cmp	r7, #23
   83f96:	6461      	str	r1, [r4, #68]	; 0x44
   83f98:	d90a      	bls.n	83fb0 <_dtoa_r+0x758>
   83f9a:	2201      	movs	r2, #1
   83f9c:	2304      	movs	r3, #4
   83f9e:	005b      	lsls	r3, r3, #1
   83fa0:	f103 0014 	add.w	r0, r3, #20
   83fa4:	4287      	cmp	r7, r0
   83fa6:	4611      	mov	r1, r2
   83fa8:	f102 0201 	add.w	r2, r2, #1
   83fac:	d2f7      	bcs.n	83f9e <_dtoa_r+0x746>
   83fae:	6461      	str	r1, [r4, #68]	; 0x44
   83fb0:	4620      	mov	r0, r4
   83fb2:	f000 ff23 	bl	84dfc <_Balloc>
   83fb6:	2e0e      	cmp	r6, #14
   83fb8:	9004      	str	r0, [sp, #16]
   83fba:	6420      	str	r0, [r4, #64]	; 0x40
   83fbc:	f63f ad47 	bhi.w	83a4e <_dtoa_r+0x1f6>
   83fc0:	2d00      	cmp	r5, #0
   83fc2:	f43f ad44 	beq.w	83a4e <_dtoa_r+0x1f6>
   83fc6:	9902      	ldr	r1, [sp, #8]
   83fc8:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   83fcc:	2900      	cmp	r1, #0
   83fce:	f340 8203 	ble.w	843d8 <_dtoa_r+0xb80>
   83fd2:	4bb9      	ldr	r3, [pc, #740]	; (842b8 <_dtoa_r+0xa60>)
   83fd4:	f001 020f 	and.w	r2, r1, #15
   83fd8:	110d      	asrs	r5, r1, #4
   83fda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   83fde:	06e9      	lsls	r1, r5, #27
   83fe0:	e9d3 6700 	ldrd	r6, r7, [r3]
   83fe4:	f140 81af 	bpl.w	84346 <_dtoa_r+0xaee>
   83fe8:	4bb4      	ldr	r3, [pc, #720]	; (842bc <_dtoa_r+0xa64>)
   83fea:	4650      	mov	r0, sl
   83fec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   83ff0:	4659      	mov	r1, fp
   83ff2:	f002 f95f 	bl	862b4 <__aeabi_ddiv>
   83ff6:	f04f 0a03 	mov.w	sl, #3
   83ffa:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   83ffe:	f005 050f 	and.w	r5, r5, #15
   84002:	b18d      	cbz	r5, 84028 <_dtoa_r+0x7d0>
   84004:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 842bc <_dtoa_r+0xa64>
   84008:	07ea      	lsls	r2, r5, #31
   8400a:	d509      	bpl.n	84020 <_dtoa_r+0x7c8>
   8400c:	e9d8 2300 	ldrd	r2, r3, [r8]
   84010:	4630      	mov	r0, r6
   84012:	4639      	mov	r1, r7
   84014:	f002 f824 	bl	86060 <__aeabi_dmul>
   84018:	4606      	mov	r6, r0
   8401a:	460f      	mov	r7, r1
   8401c:	f10a 0a01 	add.w	sl, sl, #1
   84020:	106d      	asrs	r5, r5, #1
   84022:	f108 0808 	add.w	r8, r8, #8
   84026:	d1ef      	bne.n	84008 <_dtoa_r+0x7b0>
   84028:	463b      	mov	r3, r7
   8402a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8402e:	4632      	mov	r2, r6
   84030:	f002 f940 	bl	862b4 <__aeabi_ddiv>
   84034:	4607      	mov	r7, r0
   84036:	4688      	mov	r8, r1
   84038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8403a:	b143      	cbz	r3, 8404e <_dtoa_r+0x7f6>
   8403c:	2200      	movs	r2, #0
   8403e:	4ba0      	ldr	r3, [pc, #640]	; (842c0 <_dtoa_r+0xa68>)
   84040:	4638      	mov	r0, r7
   84042:	4641      	mov	r1, r8
   84044:	f002 fa7e 	bl	86544 <__aeabi_dcmplt>
   84048:	2800      	cmp	r0, #0
   8404a:	f040 8287 	bne.w	8455c <_dtoa_r+0xd04>
   8404e:	4650      	mov	r0, sl
   84050:	f001 ffa0 	bl	85f94 <__aeabi_i2d>
   84054:	463a      	mov	r2, r7
   84056:	4643      	mov	r3, r8
   84058:	f002 f802 	bl	86060 <__aeabi_dmul>
   8405c:	4b99      	ldr	r3, [pc, #612]	; (842c4 <_dtoa_r+0xa6c>)
   8405e:	2200      	movs	r2, #0
   84060:	f001 fe4c 	bl	85cfc <__adddf3>
   84064:	9b07      	ldr	r3, [sp, #28]
   84066:	4605      	mov	r5, r0
   84068:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8406c:	2b00      	cmp	r3, #0
   8406e:	f000 813f 	beq.w	842f0 <_dtoa_r+0xa98>
   84072:	9b02      	ldr	r3, [sp, #8]
   84074:	9315      	str	r3, [sp, #84]	; 0x54
   84076:	9b07      	ldr	r3, [sp, #28]
   84078:	9312      	str	r3, [sp, #72]	; 0x48
   8407a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8407c:	2b00      	cmp	r3, #0
   8407e:	f000 81fb 	beq.w	84478 <_dtoa_r+0xc20>
   84082:	9a12      	ldr	r2, [sp, #72]	; 0x48
   84084:	4b8c      	ldr	r3, [pc, #560]	; (842b8 <_dtoa_r+0xa60>)
   84086:	2000      	movs	r0, #0
   84088:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8408c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   84090:	498d      	ldr	r1, [pc, #564]	; (842c8 <_dtoa_r+0xa70>)
   84092:	f002 f90f 	bl	862b4 <__aeabi_ddiv>
   84096:	462a      	mov	r2, r5
   84098:	4633      	mov	r3, r6
   8409a:	f001 fe2d 	bl	85cf8 <__aeabi_dsub>
   8409e:	4682      	mov	sl, r0
   840a0:	468b      	mov	fp, r1
   840a2:	4638      	mov	r0, r7
   840a4:	4641      	mov	r1, r8
   840a6:	f002 fa8b 	bl	865c0 <__aeabi_d2iz>
   840aa:	4605      	mov	r5, r0
   840ac:	f001 ff72 	bl	85f94 <__aeabi_i2d>
   840b0:	4602      	mov	r2, r0
   840b2:	460b      	mov	r3, r1
   840b4:	4638      	mov	r0, r7
   840b6:	4641      	mov	r1, r8
   840b8:	f001 fe1e 	bl	85cf8 <__aeabi_dsub>
   840bc:	3530      	adds	r5, #48	; 0x30
   840be:	fa5f f885 	uxtb.w	r8, r5
   840c2:	9d04      	ldr	r5, [sp, #16]
   840c4:	4606      	mov	r6, r0
   840c6:	460f      	mov	r7, r1
   840c8:	f885 8000 	strb.w	r8, [r5]
   840cc:	4602      	mov	r2, r0
   840ce:	460b      	mov	r3, r1
   840d0:	4650      	mov	r0, sl
   840d2:	4659      	mov	r1, fp
   840d4:	3501      	adds	r5, #1
   840d6:	f002 fa53 	bl	86580 <__aeabi_dcmpgt>
   840da:	2800      	cmp	r0, #0
   840dc:	d154      	bne.n	84188 <_dtoa_r+0x930>
   840de:	4632      	mov	r2, r6
   840e0:	463b      	mov	r3, r7
   840e2:	2000      	movs	r0, #0
   840e4:	4976      	ldr	r1, [pc, #472]	; (842c0 <_dtoa_r+0xa68>)
   840e6:	f001 fe07 	bl	85cf8 <__aeabi_dsub>
   840ea:	4602      	mov	r2, r0
   840ec:	460b      	mov	r3, r1
   840ee:	4650      	mov	r0, sl
   840f0:	4659      	mov	r1, fp
   840f2:	f002 fa45 	bl	86580 <__aeabi_dcmpgt>
   840f6:	2800      	cmp	r0, #0
   840f8:	f040 8270 	bne.w	845dc <_dtoa_r+0xd84>
   840fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   840fe:	2a01      	cmp	r2, #1
   84100:	f000 8112 	beq.w	84328 <_dtoa_r+0xad0>
   84104:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84106:	9a04      	ldr	r2, [sp, #16]
   84108:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8410c:	4413      	add	r3, r2
   8410e:	4699      	mov	r9, r3
   84110:	e00f      	b.n	84132 <_dtoa_r+0x8da>
   84112:	4632      	mov	r2, r6
   84114:	463b      	mov	r3, r7
   84116:	2000      	movs	r0, #0
   84118:	4969      	ldr	r1, [pc, #420]	; (842c0 <_dtoa_r+0xa68>)
   8411a:	f001 fded 	bl	85cf8 <__aeabi_dsub>
   8411e:	4652      	mov	r2, sl
   84120:	465b      	mov	r3, fp
   84122:	f002 fa0f 	bl	86544 <__aeabi_dcmplt>
   84126:	2800      	cmp	r0, #0
   84128:	f040 8256 	bne.w	845d8 <_dtoa_r+0xd80>
   8412c:	454d      	cmp	r5, r9
   8412e:	f000 80f9 	beq.w	84324 <_dtoa_r+0xacc>
   84132:	4650      	mov	r0, sl
   84134:	4659      	mov	r1, fp
   84136:	2200      	movs	r2, #0
   84138:	4b64      	ldr	r3, [pc, #400]	; (842cc <_dtoa_r+0xa74>)
   8413a:	f001 ff91 	bl	86060 <__aeabi_dmul>
   8413e:	2200      	movs	r2, #0
   84140:	4b62      	ldr	r3, [pc, #392]	; (842cc <_dtoa_r+0xa74>)
   84142:	4682      	mov	sl, r0
   84144:	468b      	mov	fp, r1
   84146:	4630      	mov	r0, r6
   84148:	4639      	mov	r1, r7
   8414a:	f001 ff89 	bl	86060 <__aeabi_dmul>
   8414e:	460f      	mov	r7, r1
   84150:	4606      	mov	r6, r0
   84152:	f002 fa35 	bl	865c0 <__aeabi_d2iz>
   84156:	4680      	mov	r8, r0
   84158:	f001 ff1c 	bl	85f94 <__aeabi_i2d>
   8415c:	4602      	mov	r2, r0
   8415e:	460b      	mov	r3, r1
   84160:	4630      	mov	r0, r6
   84162:	4639      	mov	r1, r7
   84164:	f001 fdc8 	bl	85cf8 <__aeabi_dsub>
   84168:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8416c:	fa5f f888 	uxtb.w	r8, r8
   84170:	f805 8b01 	strb.w	r8, [r5], #1
   84174:	4652      	mov	r2, sl
   84176:	465b      	mov	r3, fp
   84178:	4606      	mov	r6, r0
   8417a:	460f      	mov	r7, r1
   8417c:	f002 f9e2 	bl	86544 <__aeabi_dcmplt>
   84180:	2800      	cmp	r0, #0
   84182:	d0c6      	beq.n	84112 <_dtoa_r+0x8ba>
   84184:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   84188:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8418a:	9302      	str	r3, [sp, #8]
   8418c:	e523      	b.n	83bd6 <_dtoa_r+0x37e>
   8418e:	2300      	movs	r3, #0
   84190:	930b      	str	r3, [sp, #44]	; 0x2c
   84192:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84194:	2b00      	cmp	r3, #0
   84196:	f340 80dd 	ble.w	84354 <_dtoa_r+0xafc>
   8419a:	461f      	mov	r7, r3
   8419c:	461e      	mov	r6, r3
   8419e:	930f      	str	r3, [sp, #60]	; 0x3c
   841a0:	9307      	str	r3, [sp, #28]
   841a2:	e6f6      	b.n	83f92 <_dtoa_r+0x73a>
   841a4:	2301      	movs	r3, #1
   841a6:	930b      	str	r3, [sp, #44]	; 0x2c
   841a8:	e7f3      	b.n	84192 <_dtoa_r+0x93a>
   841aa:	f1ba 0f00 	cmp.w	sl, #0
   841ae:	f47f ada7 	bne.w	83d00 <_dtoa_r+0x4a8>
   841b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   841b6:	2b00      	cmp	r3, #0
   841b8:	f47f adbc 	bne.w	83d34 <_dtoa_r+0x4dc>
   841bc:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   841c0:	0d3f      	lsrs	r7, r7, #20
   841c2:	053f      	lsls	r7, r7, #20
   841c4:	2f00      	cmp	r7, #0
   841c6:	f000 820d 	beq.w	845e4 <_dtoa_r+0xd8c>
   841ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   841cc:	3301      	adds	r3, #1
   841ce:	930a      	str	r3, [sp, #40]	; 0x28
   841d0:	9b08      	ldr	r3, [sp, #32]
   841d2:	3301      	adds	r3, #1
   841d4:	9308      	str	r3, [sp, #32]
   841d6:	2301      	movs	r3, #1
   841d8:	930c      	str	r3, [sp, #48]	; 0x30
   841da:	e5ad      	b.n	83d38 <_dtoa_r+0x4e0>
   841dc:	9b07      	ldr	r3, [sp, #28]
   841de:	2b00      	cmp	r3, #0
   841e0:	f73f ac48 	bgt.w	83a74 <_dtoa_r+0x21c>
   841e4:	f040 8222 	bne.w	8462c <_dtoa_r+0xdd4>
   841e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   841ec:	2200      	movs	r2, #0
   841ee:	4b38      	ldr	r3, [pc, #224]	; (842d0 <_dtoa_r+0xa78>)
   841f0:	f001 ff36 	bl	86060 <__aeabi_dmul>
   841f4:	4652      	mov	r2, sl
   841f6:	465b      	mov	r3, fp
   841f8:	f002 f9b8 	bl	8656c <__aeabi_dcmpge>
   841fc:	f8dd 801c 	ldr.w	r8, [sp, #28]
   84200:	4646      	mov	r6, r8
   84202:	2800      	cmp	r0, #0
   84204:	d041      	beq.n	8428a <_dtoa_r+0xa32>
   84206:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84208:	9d04      	ldr	r5, [sp, #16]
   8420a:	43db      	mvns	r3, r3
   8420c:	9302      	str	r3, [sp, #8]
   8420e:	4641      	mov	r1, r8
   84210:	4620      	mov	r0, r4
   84212:	f000 fe19 	bl	84e48 <_Bfree>
   84216:	2e00      	cmp	r6, #0
   84218:	f43f acdd 	beq.w	83bd6 <_dtoa_r+0x37e>
   8421c:	e6a7      	b.n	83f6e <_dtoa_r+0x716>
   8421e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84220:	4649      	mov	r1, r9
   84222:	4620      	mov	r0, r4
   84224:	f000 ff48 	bl	850b8 <__pow5mult>
   84228:	4681      	mov	r9, r0
   8422a:	e557      	b.n	83cdc <_dtoa_r+0x484>
   8422c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   8422e:	2a00      	cmp	r2, #0
   84230:	f000 8188 	beq.w	84544 <_dtoa_r+0xcec>
   84234:	f203 4333 	addw	r3, r3, #1075	; 0x433
   84238:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8423a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8423c:	e4f2      	b.n	83c24 <_dtoa_r+0x3cc>
   8423e:	f1ba 0f00 	cmp.w	sl, #0
   84242:	f47f ad77 	bne.w	83d34 <_dtoa_r+0x4dc>
   84246:	e7b4      	b.n	841b2 <_dtoa_r+0x95a>
   84248:	f000 fe08 	bl	84e5c <__multadd>
   8424c:	4647      	mov	r7, r8
   8424e:	4606      	mov	r6, r0
   84250:	4683      	mov	fp, r0
   84252:	e5c0      	b.n	83dd6 <_dtoa_r+0x57e>
   84254:	4601      	mov	r1, r0
   84256:	4620      	mov	r0, r4
   84258:	9308      	str	r3, [sp, #32]
   8425a:	f000 fdf5 	bl	84e48 <_Bfree>
   8425e:	2201      	movs	r2, #1
   84260:	9b08      	ldr	r3, [sp, #32]
   84262:	e5e2      	b.n	83e2a <_dtoa_r+0x5d2>
   84264:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84266:	2b02      	cmp	r3, #2
   84268:	f77f ad98 	ble.w	83d9c <_dtoa_r+0x544>
   8426c:	9b07      	ldr	r3, [sp, #28]
   8426e:	2b00      	cmp	r3, #0
   84270:	d1c9      	bne.n	84206 <_dtoa_r+0x9ae>
   84272:	4641      	mov	r1, r8
   84274:	2205      	movs	r2, #5
   84276:	4620      	mov	r0, r4
   84278:	f000 fdf0 	bl	84e5c <__multadd>
   8427c:	4601      	mov	r1, r0
   8427e:	4680      	mov	r8, r0
   84280:	4648      	mov	r0, r9
   84282:	f000 ffb9 	bl	851f8 <__mcmp>
   84286:	2800      	cmp	r0, #0
   84288:	ddbd      	ble.n	84206 <_dtoa_r+0x9ae>
   8428a:	2331      	movs	r3, #49	; 0x31
   8428c:	9a02      	ldr	r2, [sp, #8]
   8428e:	9904      	ldr	r1, [sp, #16]
   84290:	3201      	adds	r2, #1
   84292:	9202      	str	r2, [sp, #8]
   84294:	700b      	strb	r3, [r1, #0]
   84296:	1c4d      	adds	r5, r1, #1
   84298:	e7b9      	b.n	8420e <_dtoa_r+0x9b6>
   8429a:	2331      	movs	r3, #49	; 0x31
   8429c:	9a02      	ldr	r2, [sp, #8]
   8429e:	3201      	adds	r2, #1
   842a0:	9202      	str	r2, [sp, #8]
   842a2:	9a04      	ldr	r2, [sp, #16]
   842a4:	7013      	strb	r3, [r2, #0]
   842a6:	e652      	b.n	83f4e <_dtoa_r+0x6f6>
   842a8:	2301      	movs	r3, #1
   842aa:	930b      	str	r3, [sp, #44]	; 0x2c
   842ac:	e666      	b.n	83f7c <_dtoa_r+0x724>
   842ae:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   842b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   842b4:	e48f      	b.n	83bd6 <_dtoa_r+0x37e>
   842b6:	bf00      	nop
   842b8:	00086c60 	.word	0x00086c60
   842bc:	00086c38 	.word	0x00086c38
   842c0:	3ff00000 	.word	0x3ff00000
   842c4:	401c0000 	.word	0x401c0000
   842c8:	3fe00000 	.word	0x3fe00000
   842cc:	40240000 	.word	0x40240000
   842d0:	40140000 	.word	0x40140000
   842d4:	4650      	mov	r0, sl
   842d6:	f001 fe5d 	bl	85f94 <__aeabi_i2d>
   842da:	463a      	mov	r2, r7
   842dc:	4643      	mov	r3, r8
   842de:	f001 febf 	bl	86060 <__aeabi_dmul>
   842e2:	2200      	movs	r2, #0
   842e4:	4bc1      	ldr	r3, [pc, #772]	; (845ec <_dtoa_r+0xd94>)
   842e6:	f001 fd09 	bl	85cfc <__adddf3>
   842ea:	4605      	mov	r5, r0
   842ec:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   842f0:	4641      	mov	r1, r8
   842f2:	2200      	movs	r2, #0
   842f4:	4bbe      	ldr	r3, [pc, #760]	; (845f0 <_dtoa_r+0xd98>)
   842f6:	4638      	mov	r0, r7
   842f8:	f001 fcfe 	bl	85cf8 <__aeabi_dsub>
   842fc:	462a      	mov	r2, r5
   842fe:	4633      	mov	r3, r6
   84300:	4682      	mov	sl, r0
   84302:	468b      	mov	fp, r1
   84304:	f002 f93c 	bl	86580 <__aeabi_dcmpgt>
   84308:	4680      	mov	r8, r0
   8430a:	2800      	cmp	r0, #0
   8430c:	f040 8110 	bne.w	84530 <_dtoa_r+0xcd8>
   84310:	462a      	mov	r2, r5
   84312:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   84316:	4650      	mov	r0, sl
   84318:	4659      	mov	r1, fp
   8431a:	f002 f913 	bl	86544 <__aeabi_dcmplt>
   8431e:	b118      	cbz	r0, 84328 <_dtoa_r+0xad0>
   84320:	4646      	mov	r6, r8
   84322:	e770      	b.n	84206 <_dtoa_r+0x9ae>
   84324:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   84328:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   8432c:	f7ff bb8f 	b.w	83a4e <_dtoa_r+0x1f6>
   84330:	9804      	ldr	r0, [sp, #16]
   84332:	f7ff bac0 	b.w	838b6 <_dtoa_r+0x5e>
   84336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84338:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8433a:	1afb      	subs	r3, r7, r3
   8433c:	441a      	add	r2, r3
   8433e:	970c      	str	r7, [sp, #48]	; 0x30
   84340:	920d      	str	r2, [sp, #52]	; 0x34
   84342:	2700      	movs	r7, #0
   84344:	e468      	b.n	83c18 <_dtoa_r+0x3c0>
   84346:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8434a:	f04f 0a02 	mov.w	sl, #2
   8434e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   84352:	e656      	b.n	84002 <_dtoa_r+0x7aa>
   84354:	2100      	movs	r1, #0
   84356:	2301      	movs	r3, #1
   84358:	4620      	mov	r0, r4
   8435a:	6461      	str	r1, [r4, #68]	; 0x44
   8435c:	9325      	str	r3, [sp, #148]	; 0x94
   8435e:	f000 fd4d 	bl	84dfc <_Balloc>
   84362:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84364:	9004      	str	r0, [sp, #16]
   84366:	9307      	str	r3, [sp, #28]
   84368:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8436a:	6420      	str	r0, [r4, #64]	; 0x40
   8436c:	930f      	str	r3, [sp, #60]	; 0x3c
   8436e:	e627      	b.n	83fc0 <_dtoa_r+0x768>
   84370:	2a00      	cmp	r2, #0
   84372:	46d0      	mov	r8, sl
   84374:	f8cd b020 	str.w	fp, [sp, #32]
   84378:	469a      	mov	sl, r3
   8437a:	dd11      	ble.n	843a0 <_dtoa_r+0xb48>
   8437c:	4649      	mov	r1, r9
   8437e:	2201      	movs	r2, #1
   84380:	4620      	mov	r0, r4
   84382:	f000 fee9 	bl	85158 <__lshift>
   84386:	4641      	mov	r1, r8
   84388:	4681      	mov	r9, r0
   8438a:	f000 ff35 	bl	851f8 <__mcmp>
   8438e:	2800      	cmp	r0, #0
   84390:	f340 8145 	ble.w	8461e <_dtoa_r+0xdc6>
   84394:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   84398:	f000 8105 	beq.w	845a6 <_dtoa_r+0xd4e>
   8439c:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   843a0:	46b3      	mov	fp, r6
   843a2:	f887 a000 	strb.w	sl, [r7]
   843a6:	1c7d      	adds	r5, r7, #1
   843a8:	9e08      	ldr	r6, [sp, #32]
   843aa:	e5d0      	b.n	83f4e <_dtoa_r+0x6f6>
   843ac:	d104      	bne.n	843b8 <_dtoa_r+0xb60>
   843ae:	f01a 0f01 	tst.w	sl, #1
   843b2:	d001      	beq.n	843b8 <_dtoa_r+0xb60>
   843b4:	e5bb      	b.n	83f2e <_dtoa_r+0x6d6>
   843b6:	4615      	mov	r5, r2
   843b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   843bc:	1e6a      	subs	r2, r5, #1
   843be:	2b30      	cmp	r3, #48	; 0x30
   843c0:	d0f9      	beq.n	843b6 <_dtoa_r+0xb5e>
   843c2:	e5c4      	b.n	83f4e <_dtoa_r+0x6f6>
   843c4:	2230      	movs	r2, #48	; 0x30
   843c6:	9904      	ldr	r1, [sp, #16]
   843c8:	700a      	strb	r2, [r1, #0]
   843ca:	9a02      	ldr	r2, [sp, #8]
   843cc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   843d0:	3201      	adds	r2, #1
   843d2:	9202      	str	r2, [sp, #8]
   843d4:	f7ff bbfb 	b.w	83bce <_dtoa_r+0x376>
   843d8:	f000 80bb 	beq.w	84552 <_dtoa_r+0xcfa>
   843dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   843e0:	9b02      	ldr	r3, [sp, #8]
   843e2:	f04f 0a02 	mov.w	sl, #2
   843e6:	425d      	negs	r5, r3
   843e8:	4b82      	ldr	r3, [pc, #520]	; (845f4 <_dtoa_r+0xd9c>)
   843ea:	f005 020f 	and.w	r2, r5, #15
   843ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   843f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   843f6:	f001 fe33 	bl	86060 <__aeabi_dmul>
   843fa:	112d      	asrs	r5, r5, #4
   843fc:	4607      	mov	r7, r0
   843fe:	4688      	mov	r8, r1
   84400:	f43f ae1a 	beq.w	84038 <_dtoa_r+0x7e0>
   84404:	4e7c      	ldr	r6, [pc, #496]	; (845f8 <_dtoa_r+0xda0>)
   84406:	07eb      	lsls	r3, r5, #31
   84408:	d509      	bpl.n	8441e <_dtoa_r+0xbc6>
   8440a:	e9d6 2300 	ldrd	r2, r3, [r6]
   8440e:	4638      	mov	r0, r7
   84410:	4641      	mov	r1, r8
   84412:	f001 fe25 	bl	86060 <__aeabi_dmul>
   84416:	4607      	mov	r7, r0
   84418:	4688      	mov	r8, r1
   8441a:	f10a 0a01 	add.w	sl, sl, #1
   8441e:	106d      	asrs	r5, r5, #1
   84420:	f106 0608 	add.w	r6, r6, #8
   84424:	d1ef      	bne.n	84406 <_dtoa_r+0xbae>
   84426:	e607      	b.n	84038 <_dtoa_r+0x7e0>
   84428:	6871      	ldr	r1, [r6, #4]
   8442a:	4620      	mov	r0, r4
   8442c:	f000 fce6 	bl	84dfc <_Balloc>
   84430:	4605      	mov	r5, r0
   84432:	6933      	ldr	r3, [r6, #16]
   84434:	f106 010c 	add.w	r1, r6, #12
   84438:	3302      	adds	r3, #2
   8443a:	009a      	lsls	r2, r3, #2
   8443c:	300c      	adds	r0, #12
   8443e:	f000 fc5b 	bl	84cf8 <memcpy>
   84442:	4629      	mov	r1, r5
   84444:	2201      	movs	r2, #1
   84446:	4620      	mov	r0, r4
   84448:	f000 fe86 	bl	85158 <__lshift>
   8444c:	9008      	str	r0, [sp, #32]
   8444e:	e4b6      	b.n	83dbe <_dtoa_r+0x566>
   84450:	2b39      	cmp	r3, #57	; 0x39
   84452:	f8cd b020 	str.w	fp, [sp, #32]
   84456:	46d0      	mov	r8, sl
   84458:	f000 80a5 	beq.w	845a6 <_dtoa_r+0xd4e>
   8445c:	f103 0a01 	add.w	sl, r3, #1
   84460:	46b3      	mov	fp, r6
   84462:	f887 a000 	strb.w	sl, [r7]
   84466:	1c7d      	adds	r5, r7, #1
   84468:	9e08      	ldr	r6, [sp, #32]
   8446a:	e570      	b.n	83f4e <_dtoa_r+0x6f6>
   8446c:	465a      	mov	r2, fp
   8446e:	46d0      	mov	r8, sl
   84470:	46b3      	mov	fp, r6
   84472:	469a      	mov	sl, r3
   84474:	4616      	mov	r6, r2
   84476:	e54e      	b.n	83f16 <_dtoa_r+0x6be>
   84478:	9812      	ldr	r0, [sp, #72]	; 0x48
   8447a:	495e      	ldr	r1, [pc, #376]	; (845f4 <_dtoa_r+0xd9c>)
   8447c:	462a      	mov	r2, r5
   8447e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   84482:	4633      	mov	r3, r6
   84484:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   84488:	f001 fdea 	bl	86060 <__aeabi_dmul>
   8448c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   84490:	4638      	mov	r0, r7
   84492:	4641      	mov	r1, r8
   84494:	f002 f894 	bl	865c0 <__aeabi_d2iz>
   84498:	4605      	mov	r5, r0
   8449a:	f001 fd7b 	bl	85f94 <__aeabi_i2d>
   8449e:	4602      	mov	r2, r0
   844a0:	460b      	mov	r3, r1
   844a2:	4638      	mov	r0, r7
   844a4:	4641      	mov	r1, r8
   844a6:	f001 fc27 	bl	85cf8 <__aeabi_dsub>
   844aa:	4606      	mov	r6, r0
   844ac:	9812      	ldr	r0, [sp, #72]	; 0x48
   844ae:	9a04      	ldr	r2, [sp, #16]
   844b0:	3530      	adds	r5, #48	; 0x30
   844b2:	2801      	cmp	r0, #1
   844b4:	7015      	strb	r5, [r2, #0]
   844b6:	460f      	mov	r7, r1
   844b8:	f102 0501 	add.w	r5, r2, #1
   844bc:	d026      	beq.n	8450c <_dtoa_r+0xcb4>
   844be:	9b12      	ldr	r3, [sp, #72]	; 0x48
   844c0:	9a04      	ldr	r2, [sp, #16]
   844c2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   844c6:	4413      	add	r3, r2
   844c8:	f04f 0a00 	mov.w	sl, #0
   844cc:	4699      	mov	r9, r3
   844ce:	f8df b130 	ldr.w	fp, [pc, #304]	; 84600 <_dtoa_r+0xda8>
   844d2:	4652      	mov	r2, sl
   844d4:	465b      	mov	r3, fp
   844d6:	4630      	mov	r0, r6
   844d8:	4639      	mov	r1, r7
   844da:	f001 fdc1 	bl	86060 <__aeabi_dmul>
   844de:	460f      	mov	r7, r1
   844e0:	4606      	mov	r6, r0
   844e2:	f002 f86d 	bl	865c0 <__aeabi_d2iz>
   844e6:	4680      	mov	r8, r0
   844e8:	f001 fd54 	bl	85f94 <__aeabi_i2d>
   844ec:	4602      	mov	r2, r0
   844ee:	460b      	mov	r3, r1
   844f0:	4630      	mov	r0, r6
   844f2:	4639      	mov	r1, r7
   844f4:	f001 fc00 	bl	85cf8 <__aeabi_dsub>
   844f8:	f108 0830 	add.w	r8, r8, #48	; 0x30
   844fc:	f805 8b01 	strb.w	r8, [r5], #1
   84500:	454d      	cmp	r5, r9
   84502:	4606      	mov	r6, r0
   84504:	460f      	mov	r7, r1
   84506:	d1e4      	bne.n	844d2 <_dtoa_r+0xc7a>
   84508:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8450c:	2200      	movs	r2, #0
   8450e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   84512:	4b3a      	ldr	r3, [pc, #232]	; (845fc <_dtoa_r+0xda4>)
   84514:	f001 fbf2 	bl	85cfc <__adddf3>
   84518:	4632      	mov	r2, r6
   8451a:	463b      	mov	r3, r7
   8451c:	f002 f812 	bl	86544 <__aeabi_dcmplt>
   84520:	2800      	cmp	r0, #0
   84522:	d046      	beq.n	845b2 <_dtoa_r+0xd5a>
   84524:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84526:	9302      	str	r3, [sp, #8]
   84528:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8452c:	f7ff bb42 	b.w	83bb4 <_dtoa_r+0x35c>
   84530:	f04f 0800 	mov.w	r8, #0
   84534:	4646      	mov	r6, r8
   84536:	e6a8      	b.n	8428a <_dtoa_r+0xa32>
   84538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8453a:	9a07      	ldr	r2, [sp, #28]
   8453c:	1a9d      	subs	r5, r3, r2
   8453e:	2300      	movs	r3, #0
   84540:	f7ff bb70 	b.w	83c24 <_dtoa_r+0x3cc>
   84544:	9b18      	ldr	r3, [sp, #96]	; 0x60
   84546:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   84548:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8454c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8454e:	f7ff bb69 	b.w	83c24 <_dtoa_r+0x3cc>
   84552:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   84556:	f04f 0a02 	mov.w	sl, #2
   8455a:	e56d      	b.n	84038 <_dtoa_r+0x7e0>
   8455c:	9b07      	ldr	r3, [sp, #28]
   8455e:	2b00      	cmp	r3, #0
   84560:	f43f aeb8 	beq.w	842d4 <_dtoa_r+0xa7c>
   84564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84566:	2b00      	cmp	r3, #0
   84568:	f77f aede 	ble.w	84328 <_dtoa_r+0xad0>
   8456c:	2200      	movs	r2, #0
   8456e:	4b24      	ldr	r3, [pc, #144]	; (84600 <_dtoa_r+0xda8>)
   84570:	4638      	mov	r0, r7
   84572:	4641      	mov	r1, r8
   84574:	f001 fd74 	bl	86060 <__aeabi_dmul>
   84578:	4607      	mov	r7, r0
   8457a:	4688      	mov	r8, r1
   8457c:	f10a 0001 	add.w	r0, sl, #1
   84580:	f001 fd08 	bl	85f94 <__aeabi_i2d>
   84584:	463a      	mov	r2, r7
   84586:	4643      	mov	r3, r8
   84588:	f001 fd6a 	bl	86060 <__aeabi_dmul>
   8458c:	2200      	movs	r2, #0
   8458e:	4b17      	ldr	r3, [pc, #92]	; (845ec <_dtoa_r+0xd94>)
   84590:	f001 fbb4 	bl	85cfc <__adddf3>
   84594:	9a02      	ldr	r2, [sp, #8]
   84596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84598:	3a01      	subs	r2, #1
   8459a:	4605      	mov	r5, r0
   8459c:	9215      	str	r2, [sp, #84]	; 0x54
   8459e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   845a2:	9312      	str	r3, [sp, #72]	; 0x48
   845a4:	e569      	b.n	8407a <_dtoa_r+0x822>
   845a6:	2239      	movs	r2, #57	; 0x39
   845a8:	46b3      	mov	fp, r6
   845aa:	703a      	strb	r2, [r7, #0]
   845ac:	9e08      	ldr	r6, [sp, #32]
   845ae:	1c7d      	adds	r5, r7, #1
   845b0:	e4bf      	b.n	83f32 <_dtoa_r+0x6da>
   845b2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   845b6:	2000      	movs	r0, #0
   845b8:	4910      	ldr	r1, [pc, #64]	; (845fc <_dtoa_r+0xda4>)
   845ba:	f001 fb9d 	bl	85cf8 <__aeabi_dsub>
   845be:	4632      	mov	r2, r6
   845c0:	463b      	mov	r3, r7
   845c2:	f001 ffdd 	bl	86580 <__aeabi_dcmpgt>
   845c6:	b908      	cbnz	r0, 845cc <_dtoa_r+0xd74>
   845c8:	e6ae      	b.n	84328 <_dtoa_r+0xad0>
   845ca:	4615      	mov	r5, r2
   845cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   845d0:	1e6a      	subs	r2, r5, #1
   845d2:	2b30      	cmp	r3, #48	; 0x30
   845d4:	d0f9      	beq.n	845ca <_dtoa_r+0xd72>
   845d6:	e5d7      	b.n	84188 <_dtoa_r+0x930>
   845d8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   845dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   845de:	9302      	str	r3, [sp, #8]
   845e0:	f7ff bae8 	b.w	83bb4 <_dtoa_r+0x35c>
   845e4:	970c      	str	r7, [sp, #48]	; 0x30
   845e6:	f7ff bba7 	b.w	83d38 <_dtoa_r+0x4e0>
   845ea:	bf00      	nop
   845ec:	401c0000 	.word	0x401c0000
   845f0:	40140000 	.word	0x40140000
   845f4:	00086c60 	.word	0x00086c60
   845f8:	00086c38 	.word	0x00086c38
   845fc:	3fe00000 	.word	0x3fe00000
   84600:	40240000 	.word	0x40240000
   84604:	2b39      	cmp	r3, #57	; 0x39
   84606:	f8cd b020 	str.w	fp, [sp, #32]
   8460a:	46d0      	mov	r8, sl
   8460c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84610:	469a      	mov	sl, r3
   84612:	d0c8      	beq.n	845a6 <_dtoa_r+0xd4e>
   84614:	f1bb 0f00 	cmp.w	fp, #0
   84618:	f73f aec0 	bgt.w	8439c <_dtoa_r+0xb44>
   8461c:	e6c0      	b.n	843a0 <_dtoa_r+0xb48>
   8461e:	f47f aebf 	bne.w	843a0 <_dtoa_r+0xb48>
   84622:	f01a 0f01 	tst.w	sl, #1
   84626:	f43f aebb 	beq.w	843a0 <_dtoa_r+0xb48>
   8462a:	e6b3      	b.n	84394 <_dtoa_r+0xb3c>
   8462c:	f04f 0800 	mov.w	r8, #0
   84630:	4646      	mov	r6, r8
   84632:	e5e8      	b.n	84206 <_dtoa_r+0x9ae>
   84634:	4631      	mov	r1, r6
   84636:	2300      	movs	r3, #0
   84638:	220a      	movs	r2, #10
   8463a:	4620      	mov	r0, r4
   8463c:	f000 fc0e 	bl	84e5c <__multadd>
   84640:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84642:	4606      	mov	r6, r0
   84644:	2b00      	cmp	r3, #0
   84646:	dd07      	ble.n	84658 <_dtoa_r+0xe00>
   84648:	9307      	str	r3, [sp, #28]
   8464a:	f7ff bbab 	b.w	83da4 <_dtoa_r+0x54c>
   8464e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84650:	2b02      	cmp	r3, #2
   84652:	dc1f      	bgt.n	84694 <_dtoa_r+0xe3c>
   84654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84656:	e43c      	b.n	83ed2 <_dtoa_r+0x67a>
   84658:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8465a:	2b02      	cmp	r3, #2
   8465c:	dc1a      	bgt.n	84694 <_dtoa_r+0xe3c>
   8465e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84660:	e7f2      	b.n	84648 <_dtoa_r+0xdf0>
   84662:	f43f ab81 	beq.w	83d68 <_dtoa_r+0x510>
   84666:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8466a:	e411      	b.n	83e90 <_dtoa_r+0x638>
   8466c:	2500      	movs	r5, #0
   8466e:	4620      	mov	r0, r4
   84670:	6465      	str	r5, [r4, #68]	; 0x44
   84672:	4629      	mov	r1, r5
   84674:	f000 fbc2 	bl	84dfc <_Balloc>
   84678:	f04f 33ff 	mov.w	r3, #4294967295
   8467c:	9307      	str	r3, [sp, #28]
   8467e:	930f      	str	r3, [sp, #60]	; 0x3c
   84680:	2301      	movs	r3, #1
   84682:	9004      	str	r0, [sp, #16]
   84684:	9525      	str	r5, [sp, #148]	; 0x94
   84686:	6420      	str	r0, [r4, #64]	; 0x40
   84688:	930b      	str	r3, [sp, #44]	; 0x2c
   8468a:	f7ff b9e0 	b.w	83a4e <_dtoa_r+0x1f6>
   8468e:	2501      	movs	r5, #1
   84690:	f7ff b9a8 	b.w	839e4 <_dtoa_r+0x18c>
   84694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84696:	9307      	str	r3, [sp, #28]
   84698:	e5e8      	b.n	8426c <_dtoa_r+0xa14>
   8469a:	bf00      	nop

0008469c <__libc_fini_array>:
   8469c:	b538      	push	{r3, r4, r5, lr}
   8469e:	4c0a      	ldr	r4, [pc, #40]	; (846c8 <__libc_fini_array+0x2c>)
   846a0:	4d0a      	ldr	r5, [pc, #40]	; (846cc <__libc_fini_array+0x30>)
   846a2:	1b64      	subs	r4, r4, r5
   846a4:	10a4      	asrs	r4, r4, #2
   846a6:	d00a      	beq.n	846be <__libc_fini_array+0x22>
   846a8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   846ac:	3b01      	subs	r3, #1
   846ae:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   846b2:	3c01      	subs	r4, #1
   846b4:	f855 3904 	ldr.w	r3, [r5], #-4
   846b8:	4798      	blx	r3
   846ba:	2c00      	cmp	r4, #0
   846bc:	d1f9      	bne.n	846b2 <__libc_fini_array+0x16>
   846be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   846c2:	f002 bbc3 	b.w	86e4c <_fini>
   846c6:	bf00      	nop
   846c8:	00086e5c 	.word	0x00086e5c
   846cc:	00086e58 	.word	0x00086e58

000846d0 <__locale_ctype_ptr_l>:
   846d0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   846d4:	4770      	bx	lr
   846d6:	bf00      	nop

000846d8 <_localeconv_r>:
   846d8:	4a04      	ldr	r2, [pc, #16]	; (846ec <_localeconv_r+0x14>)
   846da:	4b05      	ldr	r3, [pc, #20]	; (846f0 <_localeconv_r+0x18>)
   846dc:	6812      	ldr	r2, [r2, #0]
   846de:	6b50      	ldr	r0, [r2, #52]	; 0x34
   846e0:	2800      	cmp	r0, #0
   846e2:	bf08      	it	eq
   846e4:	4618      	moveq	r0, r3
   846e6:	30f0      	adds	r0, #240	; 0xf0
   846e8:	4770      	bx	lr
   846ea:	bf00      	nop
   846ec:	20070590 	.word	0x20070590
   846f0:	200709c4 	.word	0x200709c4

000846f4 <__retarget_lock_acquire_recursive>:
   846f4:	4770      	bx	lr
   846f6:	bf00      	nop

000846f8 <__retarget_lock_release_recursive>:
   846f8:	4770      	bx	lr
   846fa:	bf00      	nop

000846fc <_malloc_r>:
   846fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84700:	f101 060b 	add.w	r6, r1, #11
   84704:	2e16      	cmp	r6, #22
   84706:	b083      	sub	sp, #12
   84708:	4605      	mov	r5, r0
   8470a:	f240 809e 	bls.w	8484a <_malloc_r+0x14e>
   8470e:	f036 0607 	bics.w	r6, r6, #7
   84712:	f100 80bd 	bmi.w	84890 <_malloc_r+0x194>
   84716:	42b1      	cmp	r1, r6
   84718:	f200 80ba 	bhi.w	84890 <_malloc_r+0x194>
   8471c:	f000 fb62 	bl	84de4 <__malloc_lock>
   84720:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   84724:	f0c0 8285 	bcc.w	84c32 <_malloc_r+0x536>
   84728:	0a73      	lsrs	r3, r6, #9
   8472a:	f000 80b8 	beq.w	8489e <_malloc_r+0x1a2>
   8472e:	2b04      	cmp	r3, #4
   84730:	f200 816c 	bhi.w	84a0c <_malloc_r+0x310>
   84734:	09b3      	lsrs	r3, r6, #6
   84736:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8473a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8473e:	00c1      	lsls	r1, r0, #3
   84740:	4fb8      	ldr	r7, [pc, #736]	; (84a24 <_malloc_r+0x328>)
   84742:	4439      	add	r1, r7
   84744:	684c      	ldr	r4, [r1, #4]
   84746:	3908      	subs	r1, #8
   84748:	42a1      	cmp	r1, r4
   8474a:	d106      	bne.n	8475a <_malloc_r+0x5e>
   8474c:	e00c      	b.n	84768 <_malloc_r+0x6c>
   8474e:	2a00      	cmp	r2, #0
   84750:	f280 80ab 	bge.w	848aa <_malloc_r+0x1ae>
   84754:	68e4      	ldr	r4, [r4, #12]
   84756:	42a1      	cmp	r1, r4
   84758:	d006      	beq.n	84768 <_malloc_r+0x6c>
   8475a:	6863      	ldr	r3, [r4, #4]
   8475c:	f023 0303 	bic.w	r3, r3, #3
   84760:	1b9a      	subs	r2, r3, r6
   84762:	2a0f      	cmp	r2, #15
   84764:	ddf3      	ble.n	8474e <_malloc_r+0x52>
   84766:	4670      	mov	r0, lr
   84768:	693c      	ldr	r4, [r7, #16]
   8476a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 84a38 <_malloc_r+0x33c>
   8476e:	4574      	cmp	r4, lr
   84770:	f000 819e 	beq.w	84ab0 <_malloc_r+0x3b4>
   84774:	6863      	ldr	r3, [r4, #4]
   84776:	f023 0303 	bic.w	r3, r3, #3
   8477a:	1b9a      	subs	r2, r3, r6
   8477c:	2a0f      	cmp	r2, #15
   8477e:	f300 8183 	bgt.w	84a88 <_malloc_r+0x38c>
   84782:	2a00      	cmp	r2, #0
   84784:	f8c7 e014 	str.w	lr, [r7, #20]
   84788:	f8c7 e010 	str.w	lr, [r7, #16]
   8478c:	f280 8091 	bge.w	848b2 <_malloc_r+0x1b6>
   84790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84794:	f080 8154 	bcs.w	84a40 <_malloc_r+0x344>
   84798:	2201      	movs	r2, #1
   8479a:	08db      	lsrs	r3, r3, #3
   8479c:	6879      	ldr	r1, [r7, #4]
   8479e:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   847a2:	4413      	add	r3, r2
   847a4:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   847a8:	fa02 f20c 	lsl.w	r2, r2, ip
   847ac:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   847b0:	430a      	orrs	r2, r1
   847b2:	f1ac 0108 	sub.w	r1, ip, #8
   847b6:	60e1      	str	r1, [r4, #12]
   847b8:	f8c4 8008 	str.w	r8, [r4, #8]
   847bc:	607a      	str	r2, [r7, #4]
   847be:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   847c2:	f8c8 400c 	str.w	r4, [r8, #12]
   847c6:	2401      	movs	r4, #1
   847c8:	1083      	asrs	r3, r0, #2
   847ca:	409c      	lsls	r4, r3
   847cc:	4294      	cmp	r4, r2
   847ce:	d87d      	bhi.n	848cc <_malloc_r+0x1d0>
   847d0:	4214      	tst	r4, r2
   847d2:	d106      	bne.n	847e2 <_malloc_r+0xe6>
   847d4:	f020 0003 	bic.w	r0, r0, #3
   847d8:	0064      	lsls	r4, r4, #1
   847da:	4214      	tst	r4, r2
   847dc:	f100 0004 	add.w	r0, r0, #4
   847e0:	d0fa      	beq.n	847d8 <_malloc_r+0xdc>
   847e2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   847e6:	46cc      	mov	ip, r9
   847e8:	4680      	mov	r8, r0
   847ea:	f8dc 300c 	ldr.w	r3, [ip, #12]
   847ee:	459c      	cmp	ip, r3
   847f0:	d107      	bne.n	84802 <_malloc_r+0x106>
   847f2:	e15f      	b.n	84ab4 <_malloc_r+0x3b8>
   847f4:	2a00      	cmp	r2, #0
   847f6:	f280 816d 	bge.w	84ad4 <_malloc_r+0x3d8>
   847fa:	68db      	ldr	r3, [r3, #12]
   847fc:	459c      	cmp	ip, r3
   847fe:	f000 8159 	beq.w	84ab4 <_malloc_r+0x3b8>
   84802:	6859      	ldr	r1, [r3, #4]
   84804:	f021 0103 	bic.w	r1, r1, #3
   84808:	1b8a      	subs	r2, r1, r6
   8480a:	2a0f      	cmp	r2, #15
   8480c:	ddf2      	ble.n	847f4 <_malloc_r+0xf8>
   8480e:	68dc      	ldr	r4, [r3, #12]
   84810:	f8d3 c008 	ldr.w	ip, [r3, #8]
   84814:	f046 0801 	orr.w	r8, r6, #1
   84818:	4628      	mov	r0, r5
   8481a:	441e      	add	r6, r3
   8481c:	f042 0501 	orr.w	r5, r2, #1
   84820:	f8c3 8004 	str.w	r8, [r3, #4]
   84824:	f8cc 400c 	str.w	r4, [ip, #12]
   84828:	f8c4 c008 	str.w	ip, [r4, #8]
   8482c:	617e      	str	r6, [r7, #20]
   8482e:	613e      	str	r6, [r7, #16]
   84830:	f8c6 e00c 	str.w	lr, [r6, #12]
   84834:	f8c6 e008 	str.w	lr, [r6, #8]
   84838:	6075      	str	r5, [r6, #4]
   8483a:	505a      	str	r2, [r3, r1]
   8483c:	9300      	str	r3, [sp, #0]
   8483e:	f000 fad7 	bl	84df0 <__malloc_unlock>
   84842:	9b00      	ldr	r3, [sp, #0]
   84844:	f103 0408 	add.w	r4, r3, #8
   84848:	e01e      	b.n	84888 <_malloc_r+0x18c>
   8484a:	2910      	cmp	r1, #16
   8484c:	d820      	bhi.n	84890 <_malloc_r+0x194>
   8484e:	f000 fac9 	bl	84de4 <__malloc_lock>
   84852:	2610      	movs	r6, #16
   84854:	2318      	movs	r3, #24
   84856:	2002      	movs	r0, #2
   84858:	4f72      	ldr	r7, [pc, #456]	; (84a24 <_malloc_r+0x328>)
   8485a:	443b      	add	r3, r7
   8485c:	685c      	ldr	r4, [r3, #4]
   8485e:	f1a3 0208 	sub.w	r2, r3, #8
   84862:	4294      	cmp	r4, r2
   84864:	f000 812f 	beq.w	84ac6 <_malloc_r+0x3ca>
   84868:	6863      	ldr	r3, [r4, #4]
   8486a:	68e1      	ldr	r1, [r4, #12]
   8486c:	f023 0303 	bic.w	r3, r3, #3
   84870:	4423      	add	r3, r4
   84872:	685a      	ldr	r2, [r3, #4]
   84874:	68a6      	ldr	r6, [r4, #8]
   84876:	f042 0201 	orr.w	r2, r2, #1
   8487a:	60f1      	str	r1, [r6, #12]
   8487c:	4628      	mov	r0, r5
   8487e:	608e      	str	r6, [r1, #8]
   84880:	605a      	str	r2, [r3, #4]
   84882:	f000 fab5 	bl	84df0 <__malloc_unlock>
   84886:	3408      	adds	r4, #8
   84888:	4620      	mov	r0, r4
   8488a:	b003      	add	sp, #12
   8488c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84890:	2400      	movs	r4, #0
   84892:	230c      	movs	r3, #12
   84894:	4620      	mov	r0, r4
   84896:	602b      	str	r3, [r5, #0]
   84898:	b003      	add	sp, #12
   8489a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8489e:	2040      	movs	r0, #64	; 0x40
   848a0:	f44f 7100 	mov.w	r1, #512	; 0x200
   848a4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   848a8:	e74a      	b.n	84740 <_malloc_r+0x44>
   848aa:	4423      	add	r3, r4
   848ac:	685a      	ldr	r2, [r3, #4]
   848ae:	68e1      	ldr	r1, [r4, #12]
   848b0:	e7e0      	b.n	84874 <_malloc_r+0x178>
   848b2:	4423      	add	r3, r4
   848b4:	685a      	ldr	r2, [r3, #4]
   848b6:	4628      	mov	r0, r5
   848b8:	f042 0201 	orr.w	r2, r2, #1
   848bc:	605a      	str	r2, [r3, #4]
   848be:	3408      	adds	r4, #8
   848c0:	f000 fa96 	bl	84df0 <__malloc_unlock>
   848c4:	4620      	mov	r0, r4
   848c6:	b003      	add	sp, #12
   848c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   848cc:	68bc      	ldr	r4, [r7, #8]
   848ce:	6863      	ldr	r3, [r4, #4]
   848d0:	f023 0803 	bic.w	r8, r3, #3
   848d4:	45b0      	cmp	r8, r6
   848d6:	d304      	bcc.n	848e2 <_malloc_r+0x1e6>
   848d8:	eba8 0306 	sub.w	r3, r8, r6
   848dc:	2b0f      	cmp	r3, #15
   848de:	f300 8085 	bgt.w	849ec <_malloc_r+0x2f0>
   848e2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 84a3c <_malloc_r+0x340>
   848e6:	4b50      	ldr	r3, [pc, #320]	; (84a28 <_malloc_r+0x32c>)
   848e8:	f8d9 2000 	ldr.w	r2, [r9]
   848ec:	681b      	ldr	r3, [r3, #0]
   848ee:	3201      	adds	r2, #1
   848f0:	4433      	add	r3, r6
   848f2:	eb04 0a08 	add.w	sl, r4, r8
   848f6:	f000 8154 	beq.w	84ba2 <_malloc_r+0x4a6>
   848fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   848fe:	330f      	adds	r3, #15
   84900:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   84904:	f02b 0b0f 	bic.w	fp, fp, #15
   84908:	4659      	mov	r1, fp
   8490a:	4628      	mov	r0, r5
   8490c:	f000 fd72 	bl	853f4 <_sbrk_r>
   84910:	1c41      	adds	r1, r0, #1
   84912:	4602      	mov	r2, r0
   84914:	f000 80fb 	beq.w	84b0e <_malloc_r+0x412>
   84918:	4582      	cmp	sl, r0
   8491a:	f200 80f6 	bhi.w	84b0a <_malloc_r+0x40e>
   8491e:	4b43      	ldr	r3, [pc, #268]	; (84a2c <_malloc_r+0x330>)
   84920:	6819      	ldr	r1, [r3, #0]
   84922:	4459      	add	r1, fp
   84924:	6019      	str	r1, [r3, #0]
   84926:	f000 814c 	beq.w	84bc2 <_malloc_r+0x4c6>
   8492a:	f8d9 0000 	ldr.w	r0, [r9]
   8492e:	3001      	adds	r0, #1
   84930:	bf1b      	ittet	ne
   84932:	eba2 0a0a 	subne.w	sl, r2, sl
   84936:	4451      	addne	r1, sl
   84938:	f8c9 2000 	streq.w	r2, [r9]
   8493c:	6019      	strne	r1, [r3, #0]
   8493e:	f012 0107 	ands.w	r1, r2, #7
   84942:	f000 8114 	beq.w	84b6e <_malloc_r+0x472>
   84946:	f1c1 0008 	rsb	r0, r1, #8
   8494a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8494e:	4402      	add	r2, r0
   84950:	3108      	adds	r1, #8
   84952:	eb02 090b 	add.w	r9, r2, fp
   84956:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8495a:	eba1 0909 	sub.w	r9, r1, r9
   8495e:	4649      	mov	r1, r9
   84960:	4628      	mov	r0, r5
   84962:	9301      	str	r3, [sp, #4]
   84964:	9200      	str	r2, [sp, #0]
   84966:	f000 fd45 	bl	853f4 <_sbrk_r>
   8496a:	1c43      	adds	r3, r0, #1
   8496c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   84970:	f000 8142 	beq.w	84bf8 <_malloc_r+0x4fc>
   84974:	1a80      	subs	r0, r0, r2
   84976:	4448      	add	r0, r9
   84978:	f040 0001 	orr.w	r0, r0, #1
   8497c:	6819      	ldr	r1, [r3, #0]
   8497e:	42bc      	cmp	r4, r7
   84980:	4449      	add	r1, r9
   84982:	60ba      	str	r2, [r7, #8]
   84984:	6019      	str	r1, [r3, #0]
   84986:	6050      	str	r0, [r2, #4]
   84988:	d017      	beq.n	849ba <_malloc_r+0x2be>
   8498a:	f1b8 0f0f 	cmp.w	r8, #15
   8498e:	f240 80fa 	bls.w	84b86 <_malloc_r+0x48a>
   84992:	f04f 0c05 	mov.w	ip, #5
   84996:	6862      	ldr	r2, [r4, #4]
   84998:	f1a8 000c 	sub.w	r0, r8, #12
   8499c:	f020 0007 	bic.w	r0, r0, #7
   849a0:	f002 0201 	and.w	r2, r2, #1
   849a4:	eb04 0e00 	add.w	lr, r4, r0
   849a8:	4302      	orrs	r2, r0
   849aa:	280f      	cmp	r0, #15
   849ac:	6062      	str	r2, [r4, #4]
   849ae:	f8ce c004 	str.w	ip, [lr, #4]
   849b2:	f8ce c008 	str.w	ip, [lr, #8]
   849b6:	f200 8116 	bhi.w	84be6 <_malloc_r+0x4ea>
   849ba:	4b1d      	ldr	r3, [pc, #116]	; (84a30 <_malloc_r+0x334>)
   849bc:	68bc      	ldr	r4, [r7, #8]
   849be:	681a      	ldr	r2, [r3, #0]
   849c0:	4291      	cmp	r1, r2
   849c2:	bf88      	it	hi
   849c4:	6019      	strhi	r1, [r3, #0]
   849c6:	4b1b      	ldr	r3, [pc, #108]	; (84a34 <_malloc_r+0x338>)
   849c8:	681a      	ldr	r2, [r3, #0]
   849ca:	4291      	cmp	r1, r2
   849cc:	6862      	ldr	r2, [r4, #4]
   849ce:	bf88      	it	hi
   849d0:	6019      	strhi	r1, [r3, #0]
   849d2:	f022 0203 	bic.w	r2, r2, #3
   849d6:	4296      	cmp	r6, r2
   849d8:	eba2 0306 	sub.w	r3, r2, r6
   849dc:	d801      	bhi.n	849e2 <_malloc_r+0x2e6>
   849de:	2b0f      	cmp	r3, #15
   849e0:	dc04      	bgt.n	849ec <_malloc_r+0x2f0>
   849e2:	4628      	mov	r0, r5
   849e4:	f000 fa04 	bl	84df0 <__malloc_unlock>
   849e8:	2400      	movs	r4, #0
   849ea:	e74d      	b.n	84888 <_malloc_r+0x18c>
   849ec:	f046 0201 	orr.w	r2, r6, #1
   849f0:	f043 0301 	orr.w	r3, r3, #1
   849f4:	4426      	add	r6, r4
   849f6:	6062      	str	r2, [r4, #4]
   849f8:	4628      	mov	r0, r5
   849fa:	60be      	str	r6, [r7, #8]
   849fc:	3408      	adds	r4, #8
   849fe:	6073      	str	r3, [r6, #4]
   84a00:	f000 f9f6 	bl	84df0 <__malloc_unlock>
   84a04:	4620      	mov	r0, r4
   84a06:	b003      	add	sp, #12
   84a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84a0c:	2b14      	cmp	r3, #20
   84a0e:	d970      	bls.n	84af2 <_malloc_r+0x3f6>
   84a10:	2b54      	cmp	r3, #84	; 0x54
   84a12:	f200 80a2 	bhi.w	84b5a <_malloc_r+0x45e>
   84a16:	0b33      	lsrs	r3, r6, #12
   84a18:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   84a1c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   84a20:	00c1      	lsls	r1, r0, #3
   84a22:	e68d      	b.n	84740 <_malloc_r+0x44>
   84a24:	20070b30 	.word	0x20070b30
   84a28:	20071010 	.word	0x20071010
   84a2c:	20070fe0 	.word	0x20070fe0
   84a30:	20071008 	.word	0x20071008
   84a34:	2007100c 	.word	0x2007100c
   84a38:	20070b38 	.word	0x20070b38
   84a3c:	20070f38 	.word	0x20070f38
   84a40:	0a5a      	lsrs	r2, r3, #9
   84a42:	2a04      	cmp	r2, #4
   84a44:	d95b      	bls.n	84afe <_malloc_r+0x402>
   84a46:	2a14      	cmp	r2, #20
   84a48:	f200 80ae 	bhi.w	84ba8 <_malloc_r+0x4ac>
   84a4c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   84a50:	00c9      	lsls	r1, r1, #3
   84a52:	325b      	adds	r2, #91	; 0x5b
   84a54:	eb07 0c01 	add.w	ip, r7, r1
   84a58:	5879      	ldr	r1, [r7, r1]
   84a5a:	f1ac 0c08 	sub.w	ip, ip, #8
   84a5e:	458c      	cmp	ip, r1
   84a60:	f000 8088 	beq.w	84b74 <_malloc_r+0x478>
   84a64:	684a      	ldr	r2, [r1, #4]
   84a66:	f022 0203 	bic.w	r2, r2, #3
   84a6a:	4293      	cmp	r3, r2
   84a6c:	d273      	bcs.n	84b56 <_malloc_r+0x45a>
   84a6e:	6889      	ldr	r1, [r1, #8]
   84a70:	458c      	cmp	ip, r1
   84a72:	d1f7      	bne.n	84a64 <_malloc_r+0x368>
   84a74:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84a78:	687a      	ldr	r2, [r7, #4]
   84a7a:	60e3      	str	r3, [r4, #12]
   84a7c:	f8c4 c008 	str.w	ip, [r4, #8]
   84a80:	609c      	str	r4, [r3, #8]
   84a82:	f8cc 400c 	str.w	r4, [ip, #12]
   84a86:	e69e      	b.n	847c6 <_malloc_r+0xca>
   84a88:	f046 0c01 	orr.w	ip, r6, #1
   84a8c:	f042 0101 	orr.w	r1, r2, #1
   84a90:	4426      	add	r6, r4
   84a92:	f8c4 c004 	str.w	ip, [r4, #4]
   84a96:	4628      	mov	r0, r5
   84a98:	617e      	str	r6, [r7, #20]
   84a9a:	613e      	str	r6, [r7, #16]
   84a9c:	f8c6 e00c 	str.w	lr, [r6, #12]
   84aa0:	f8c6 e008 	str.w	lr, [r6, #8]
   84aa4:	6071      	str	r1, [r6, #4]
   84aa6:	50e2      	str	r2, [r4, r3]
   84aa8:	f000 f9a2 	bl	84df0 <__malloc_unlock>
   84aac:	3408      	adds	r4, #8
   84aae:	e6eb      	b.n	84888 <_malloc_r+0x18c>
   84ab0:	687a      	ldr	r2, [r7, #4]
   84ab2:	e688      	b.n	847c6 <_malloc_r+0xca>
   84ab4:	f108 0801 	add.w	r8, r8, #1
   84ab8:	f018 0f03 	tst.w	r8, #3
   84abc:	f10c 0c08 	add.w	ip, ip, #8
   84ac0:	f47f ae93 	bne.w	847ea <_malloc_r+0xee>
   84ac4:	e02d      	b.n	84b22 <_malloc_r+0x426>
   84ac6:	68dc      	ldr	r4, [r3, #12]
   84ac8:	42a3      	cmp	r3, r4
   84aca:	bf08      	it	eq
   84acc:	3002      	addeq	r0, #2
   84ace:	f43f ae4b 	beq.w	84768 <_malloc_r+0x6c>
   84ad2:	e6c9      	b.n	84868 <_malloc_r+0x16c>
   84ad4:	461c      	mov	r4, r3
   84ad6:	4419      	add	r1, r3
   84ad8:	684a      	ldr	r2, [r1, #4]
   84ada:	68db      	ldr	r3, [r3, #12]
   84adc:	f854 6f08 	ldr.w	r6, [r4, #8]!
   84ae0:	f042 0201 	orr.w	r2, r2, #1
   84ae4:	604a      	str	r2, [r1, #4]
   84ae6:	4628      	mov	r0, r5
   84ae8:	60f3      	str	r3, [r6, #12]
   84aea:	609e      	str	r6, [r3, #8]
   84aec:	f000 f980 	bl	84df0 <__malloc_unlock>
   84af0:	e6ca      	b.n	84888 <_malloc_r+0x18c>
   84af2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   84af6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   84afa:	00c1      	lsls	r1, r0, #3
   84afc:	e620      	b.n	84740 <_malloc_r+0x44>
   84afe:	099a      	lsrs	r2, r3, #6
   84b00:	f102 0139 	add.w	r1, r2, #57	; 0x39
   84b04:	00c9      	lsls	r1, r1, #3
   84b06:	3238      	adds	r2, #56	; 0x38
   84b08:	e7a4      	b.n	84a54 <_malloc_r+0x358>
   84b0a:	42bc      	cmp	r4, r7
   84b0c:	d054      	beq.n	84bb8 <_malloc_r+0x4bc>
   84b0e:	68bc      	ldr	r4, [r7, #8]
   84b10:	6862      	ldr	r2, [r4, #4]
   84b12:	f022 0203 	bic.w	r2, r2, #3
   84b16:	e75e      	b.n	849d6 <_malloc_r+0x2da>
   84b18:	f859 3908 	ldr.w	r3, [r9], #-8
   84b1c:	4599      	cmp	r9, r3
   84b1e:	f040 8086 	bne.w	84c2e <_malloc_r+0x532>
   84b22:	f010 0f03 	tst.w	r0, #3
   84b26:	f100 30ff 	add.w	r0, r0, #4294967295
   84b2a:	d1f5      	bne.n	84b18 <_malloc_r+0x41c>
   84b2c:	687b      	ldr	r3, [r7, #4]
   84b2e:	ea23 0304 	bic.w	r3, r3, r4
   84b32:	607b      	str	r3, [r7, #4]
   84b34:	0064      	lsls	r4, r4, #1
   84b36:	429c      	cmp	r4, r3
   84b38:	f63f aec8 	bhi.w	848cc <_malloc_r+0x1d0>
   84b3c:	2c00      	cmp	r4, #0
   84b3e:	f43f aec5 	beq.w	848cc <_malloc_r+0x1d0>
   84b42:	421c      	tst	r4, r3
   84b44:	4640      	mov	r0, r8
   84b46:	f47f ae4c 	bne.w	847e2 <_malloc_r+0xe6>
   84b4a:	0064      	lsls	r4, r4, #1
   84b4c:	421c      	tst	r4, r3
   84b4e:	f100 0004 	add.w	r0, r0, #4
   84b52:	d0fa      	beq.n	84b4a <_malloc_r+0x44e>
   84b54:	e645      	b.n	847e2 <_malloc_r+0xe6>
   84b56:	468c      	mov	ip, r1
   84b58:	e78c      	b.n	84a74 <_malloc_r+0x378>
   84b5a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   84b5e:	d815      	bhi.n	84b8c <_malloc_r+0x490>
   84b60:	0bf3      	lsrs	r3, r6, #15
   84b62:	f103 0078 	add.w	r0, r3, #120	; 0x78
   84b66:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   84b6a:	00c1      	lsls	r1, r0, #3
   84b6c:	e5e8      	b.n	84740 <_malloc_r+0x44>
   84b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   84b72:	e6ee      	b.n	84952 <_malloc_r+0x256>
   84b74:	2101      	movs	r1, #1
   84b76:	687b      	ldr	r3, [r7, #4]
   84b78:	1092      	asrs	r2, r2, #2
   84b7a:	fa01 f202 	lsl.w	r2, r1, r2
   84b7e:	431a      	orrs	r2, r3
   84b80:	607a      	str	r2, [r7, #4]
   84b82:	4663      	mov	r3, ip
   84b84:	e779      	b.n	84a7a <_malloc_r+0x37e>
   84b86:	2301      	movs	r3, #1
   84b88:	6053      	str	r3, [r2, #4]
   84b8a:	e72a      	b.n	849e2 <_malloc_r+0x2e6>
   84b8c:	f240 5254 	movw	r2, #1364	; 0x554
   84b90:	4293      	cmp	r3, r2
   84b92:	d822      	bhi.n	84bda <_malloc_r+0x4de>
   84b94:	0cb3      	lsrs	r3, r6, #18
   84b96:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   84b9a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   84b9e:	00c1      	lsls	r1, r0, #3
   84ba0:	e5ce      	b.n	84740 <_malloc_r+0x44>
   84ba2:	f103 0b10 	add.w	fp, r3, #16
   84ba6:	e6af      	b.n	84908 <_malloc_r+0x20c>
   84ba8:	2a54      	cmp	r2, #84	; 0x54
   84baa:	d829      	bhi.n	84c00 <_malloc_r+0x504>
   84bac:	0b1a      	lsrs	r2, r3, #12
   84bae:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   84bb2:	00c9      	lsls	r1, r1, #3
   84bb4:	326e      	adds	r2, #110	; 0x6e
   84bb6:	e74d      	b.n	84a54 <_malloc_r+0x358>
   84bb8:	4b20      	ldr	r3, [pc, #128]	; (84c3c <_malloc_r+0x540>)
   84bba:	6819      	ldr	r1, [r3, #0]
   84bbc:	4459      	add	r1, fp
   84bbe:	6019      	str	r1, [r3, #0]
   84bc0:	e6b3      	b.n	8492a <_malloc_r+0x22e>
   84bc2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   84bc6:	2800      	cmp	r0, #0
   84bc8:	f47f aeaf 	bne.w	8492a <_malloc_r+0x22e>
   84bcc:	eb08 030b 	add.w	r3, r8, fp
   84bd0:	68ba      	ldr	r2, [r7, #8]
   84bd2:	f043 0301 	orr.w	r3, r3, #1
   84bd6:	6053      	str	r3, [r2, #4]
   84bd8:	e6ef      	b.n	849ba <_malloc_r+0x2be>
   84bda:	207f      	movs	r0, #127	; 0x7f
   84bdc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84be0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   84be4:	e5ac      	b.n	84740 <_malloc_r+0x44>
   84be6:	f104 0108 	add.w	r1, r4, #8
   84bea:	4628      	mov	r0, r5
   84bec:	9300      	str	r3, [sp, #0]
   84bee:	f000 fd7f 	bl	856f0 <_free_r>
   84bf2:	9b00      	ldr	r3, [sp, #0]
   84bf4:	6819      	ldr	r1, [r3, #0]
   84bf6:	e6e0      	b.n	849ba <_malloc_r+0x2be>
   84bf8:	2001      	movs	r0, #1
   84bfa:	f04f 0900 	mov.w	r9, #0
   84bfe:	e6bd      	b.n	8497c <_malloc_r+0x280>
   84c00:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84c04:	d805      	bhi.n	84c12 <_malloc_r+0x516>
   84c06:	0bda      	lsrs	r2, r3, #15
   84c08:	f102 0178 	add.w	r1, r2, #120	; 0x78
   84c0c:	00c9      	lsls	r1, r1, #3
   84c0e:	3277      	adds	r2, #119	; 0x77
   84c10:	e720      	b.n	84a54 <_malloc_r+0x358>
   84c12:	f240 5154 	movw	r1, #1364	; 0x554
   84c16:	428a      	cmp	r2, r1
   84c18:	d805      	bhi.n	84c26 <_malloc_r+0x52a>
   84c1a:	0c9a      	lsrs	r2, r3, #18
   84c1c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   84c20:	00c9      	lsls	r1, r1, #3
   84c22:	327c      	adds	r2, #124	; 0x7c
   84c24:	e716      	b.n	84a54 <_malloc_r+0x358>
   84c26:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84c2a:	227e      	movs	r2, #126	; 0x7e
   84c2c:	e712      	b.n	84a54 <_malloc_r+0x358>
   84c2e:	687b      	ldr	r3, [r7, #4]
   84c30:	e780      	b.n	84b34 <_malloc_r+0x438>
   84c32:	08f0      	lsrs	r0, r6, #3
   84c34:	f106 0308 	add.w	r3, r6, #8
   84c38:	e60e      	b.n	84858 <_malloc_r+0x15c>
   84c3a:	bf00      	nop
   84c3c:	20070fe0 	.word	0x20070fe0

00084c40 <__ascii_mbtowc>:
   84c40:	b082      	sub	sp, #8
   84c42:	b149      	cbz	r1, 84c58 <__ascii_mbtowc+0x18>
   84c44:	b15a      	cbz	r2, 84c5e <__ascii_mbtowc+0x1e>
   84c46:	b16b      	cbz	r3, 84c64 <__ascii_mbtowc+0x24>
   84c48:	7813      	ldrb	r3, [r2, #0]
   84c4a:	600b      	str	r3, [r1, #0]
   84c4c:	7812      	ldrb	r2, [r2, #0]
   84c4e:	1c10      	adds	r0, r2, #0
   84c50:	bf18      	it	ne
   84c52:	2001      	movne	r0, #1
   84c54:	b002      	add	sp, #8
   84c56:	4770      	bx	lr
   84c58:	a901      	add	r1, sp, #4
   84c5a:	2a00      	cmp	r2, #0
   84c5c:	d1f3      	bne.n	84c46 <__ascii_mbtowc+0x6>
   84c5e:	4610      	mov	r0, r2
   84c60:	b002      	add	sp, #8
   84c62:	4770      	bx	lr
   84c64:	f06f 0001 	mvn.w	r0, #1
   84c68:	e7f4      	b.n	84c54 <__ascii_mbtowc+0x14>
   84c6a:	bf00      	nop

00084c6c <memchr>:
   84c6c:	0783      	lsls	r3, r0, #30
   84c6e:	b470      	push	{r4, r5, r6}
   84c70:	b2cd      	uxtb	r5, r1
   84c72:	d03d      	beq.n	84cf0 <memchr+0x84>
   84c74:	1e54      	subs	r4, r2, #1
   84c76:	b30a      	cbz	r2, 84cbc <memchr+0x50>
   84c78:	7803      	ldrb	r3, [r0, #0]
   84c7a:	42ab      	cmp	r3, r5
   84c7c:	d01f      	beq.n	84cbe <memchr+0x52>
   84c7e:	1c43      	adds	r3, r0, #1
   84c80:	e005      	b.n	84c8e <memchr+0x22>
   84c82:	f114 34ff 	adds.w	r4, r4, #4294967295
   84c86:	d319      	bcc.n	84cbc <memchr+0x50>
   84c88:	7802      	ldrb	r2, [r0, #0]
   84c8a:	42aa      	cmp	r2, r5
   84c8c:	d017      	beq.n	84cbe <memchr+0x52>
   84c8e:	f013 0f03 	tst.w	r3, #3
   84c92:	4618      	mov	r0, r3
   84c94:	f103 0301 	add.w	r3, r3, #1
   84c98:	d1f3      	bne.n	84c82 <memchr+0x16>
   84c9a:	2c03      	cmp	r4, #3
   84c9c:	d811      	bhi.n	84cc2 <memchr+0x56>
   84c9e:	b34c      	cbz	r4, 84cf4 <memchr+0x88>
   84ca0:	7803      	ldrb	r3, [r0, #0]
   84ca2:	42ab      	cmp	r3, r5
   84ca4:	d00b      	beq.n	84cbe <memchr+0x52>
   84ca6:	4404      	add	r4, r0
   84ca8:	1c43      	adds	r3, r0, #1
   84caa:	e002      	b.n	84cb2 <memchr+0x46>
   84cac:	7802      	ldrb	r2, [r0, #0]
   84cae:	42aa      	cmp	r2, r5
   84cb0:	d005      	beq.n	84cbe <memchr+0x52>
   84cb2:	429c      	cmp	r4, r3
   84cb4:	4618      	mov	r0, r3
   84cb6:	f103 0301 	add.w	r3, r3, #1
   84cba:	d1f7      	bne.n	84cac <memchr+0x40>
   84cbc:	2000      	movs	r0, #0
   84cbe:	bc70      	pop	{r4, r5, r6}
   84cc0:	4770      	bx	lr
   84cc2:	0209      	lsls	r1, r1, #8
   84cc4:	b289      	uxth	r1, r1
   84cc6:	4329      	orrs	r1, r5
   84cc8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   84ccc:	6803      	ldr	r3, [r0, #0]
   84cce:	4606      	mov	r6, r0
   84cd0:	404b      	eors	r3, r1
   84cd2:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   84cd6:	ea22 0303 	bic.w	r3, r2, r3
   84cda:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   84cde:	f100 0004 	add.w	r0, r0, #4
   84ce2:	d103      	bne.n	84cec <memchr+0x80>
   84ce4:	3c04      	subs	r4, #4
   84ce6:	2c03      	cmp	r4, #3
   84ce8:	d8f0      	bhi.n	84ccc <memchr+0x60>
   84cea:	e7d8      	b.n	84c9e <memchr+0x32>
   84cec:	4630      	mov	r0, r6
   84cee:	e7d7      	b.n	84ca0 <memchr+0x34>
   84cf0:	4614      	mov	r4, r2
   84cf2:	e7d2      	b.n	84c9a <memchr+0x2e>
   84cf4:	4620      	mov	r0, r4
   84cf6:	e7e2      	b.n	84cbe <memchr+0x52>

00084cf8 <memcpy>:
   84cf8:	4684      	mov	ip, r0
   84cfa:	ea41 0300 	orr.w	r3, r1, r0
   84cfe:	f013 0303 	ands.w	r3, r3, #3
   84d02:	d149      	bne.n	84d98 <memcpy+0xa0>
   84d04:	3a40      	subs	r2, #64	; 0x40
   84d06:	d323      	bcc.n	84d50 <memcpy+0x58>
   84d08:	680b      	ldr	r3, [r1, #0]
   84d0a:	6003      	str	r3, [r0, #0]
   84d0c:	684b      	ldr	r3, [r1, #4]
   84d0e:	6043      	str	r3, [r0, #4]
   84d10:	688b      	ldr	r3, [r1, #8]
   84d12:	6083      	str	r3, [r0, #8]
   84d14:	68cb      	ldr	r3, [r1, #12]
   84d16:	60c3      	str	r3, [r0, #12]
   84d18:	690b      	ldr	r3, [r1, #16]
   84d1a:	6103      	str	r3, [r0, #16]
   84d1c:	694b      	ldr	r3, [r1, #20]
   84d1e:	6143      	str	r3, [r0, #20]
   84d20:	698b      	ldr	r3, [r1, #24]
   84d22:	6183      	str	r3, [r0, #24]
   84d24:	69cb      	ldr	r3, [r1, #28]
   84d26:	61c3      	str	r3, [r0, #28]
   84d28:	6a0b      	ldr	r3, [r1, #32]
   84d2a:	6203      	str	r3, [r0, #32]
   84d2c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   84d2e:	6243      	str	r3, [r0, #36]	; 0x24
   84d30:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   84d32:	6283      	str	r3, [r0, #40]	; 0x28
   84d34:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   84d36:	62c3      	str	r3, [r0, #44]	; 0x2c
   84d38:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84d3a:	6303      	str	r3, [r0, #48]	; 0x30
   84d3c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   84d3e:	6343      	str	r3, [r0, #52]	; 0x34
   84d40:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   84d42:	6383      	str	r3, [r0, #56]	; 0x38
   84d44:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   84d46:	63c3      	str	r3, [r0, #60]	; 0x3c
   84d48:	3040      	adds	r0, #64	; 0x40
   84d4a:	3140      	adds	r1, #64	; 0x40
   84d4c:	3a40      	subs	r2, #64	; 0x40
   84d4e:	d2db      	bcs.n	84d08 <memcpy+0x10>
   84d50:	3230      	adds	r2, #48	; 0x30
   84d52:	d30b      	bcc.n	84d6c <memcpy+0x74>
   84d54:	680b      	ldr	r3, [r1, #0]
   84d56:	6003      	str	r3, [r0, #0]
   84d58:	684b      	ldr	r3, [r1, #4]
   84d5a:	6043      	str	r3, [r0, #4]
   84d5c:	688b      	ldr	r3, [r1, #8]
   84d5e:	6083      	str	r3, [r0, #8]
   84d60:	68cb      	ldr	r3, [r1, #12]
   84d62:	60c3      	str	r3, [r0, #12]
   84d64:	3010      	adds	r0, #16
   84d66:	3110      	adds	r1, #16
   84d68:	3a10      	subs	r2, #16
   84d6a:	d2f3      	bcs.n	84d54 <memcpy+0x5c>
   84d6c:	320c      	adds	r2, #12
   84d6e:	d305      	bcc.n	84d7c <memcpy+0x84>
   84d70:	f851 3b04 	ldr.w	r3, [r1], #4
   84d74:	f840 3b04 	str.w	r3, [r0], #4
   84d78:	3a04      	subs	r2, #4
   84d7a:	d2f9      	bcs.n	84d70 <memcpy+0x78>
   84d7c:	3204      	adds	r2, #4
   84d7e:	d008      	beq.n	84d92 <memcpy+0x9a>
   84d80:	07d2      	lsls	r2, r2, #31
   84d82:	bf1c      	itt	ne
   84d84:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84d88:	f800 3b01 	strbne.w	r3, [r0], #1
   84d8c:	d301      	bcc.n	84d92 <memcpy+0x9a>
   84d8e:	880b      	ldrh	r3, [r1, #0]
   84d90:	8003      	strh	r3, [r0, #0]
   84d92:	4660      	mov	r0, ip
   84d94:	4770      	bx	lr
   84d96:	bf00      	nop
   84d98:	2a08      	cmp	r2, #8
   84d9a:	d313      	bcc.n	84dc4 <memcpy+0xcc>
   84d9c:	078b      	lsls	r3, r1, #30
   84d9e:	d0b1      	beq.n	84d04 <memcpy+0xc>
   84da0:	f010 0303 	ands.w	r3, r0, #3
   84da4:	d0ae      	beq.n	84d04 <memcpy+0xc>
   84da6:	f1c3 0304 	rsb	r3, r3, #4
   84daa:	1ad2      	subs	r2, r2, r3
   84dac:	07db      	lsls	r3, r3, #31
   84dae:	bf1c      	itt	ne
   84db0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84db4:	f800 3b01 	strbne.w	r3, [r0], #1
   84db8:	d3a4      	bcc.n	84d04 <memcpy+0xc>
   84dba:	f831 3b02 	ldrh.w	r3, [r1], #2
   84dbe:	f820 3b02 	strh.w	r3, [r0], #2
   84dc2:	e79f      	b.n	84d04 <memcpy+0xc>
   84dc4:	3a04      	subs	r2, #4
   84dc6:	d3d9      	bcc.n	84d7c <memcpy+0x84>
   84dc8:	3a01      	subs	r2, #1
   84dca:	f811 3b01 	ldrb.w	r3, [r1], #1
   84dce:	f800 3b01 	strb.w	r3, [r0], #1
   84dd2:	d2f9      	bcs.n	84dc8 <memcpy+0xd0>
   84dd4:	780b      	ldrb	r3, [r1, #0]
   84dd6:	7003      	strb	r3, [r0, #0]
   84dd8:	784b      	ldrb	r3, [r1, #1]
   84dda:	7043      	strb	r3, [r0, #1]
   84ddc:	788b      	ldrb	r3, [r1, #2]
   84dde:	7083      	strb	r3, [r0, #2]
   84de0:	4660      	mov	r0, ip
   84de2:	4770      	bx	lr

00084de4 <__malloc_lock>:
   84de4:	4801      	ldr	r0, [pc, #4]	; (84dec <__malloc_lock+0x8>)
   84de6:	f7ff bc85 	b.w	846f4 <__retarget_lock_acquire_recursive>
   84dea:	bf00      	nop
   84dec:	200714f0 	.word	0x200714f0

00084df0 <__malloc_unlock>:
   84df0:	4801      	ldr	r0, [pc, #4]	; (84df8 <__malloc_unlock+0x8>)
   84df2:	f7ff bc81 	b.w	846f8 <__retarget_lock_release_recursive>
   84df6:	bf00      	nop
   84df8:	200714f0 	.word	0x200714f0

00084dfc <_Balloc>:
   84dfc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   84dfe:	b570      	push	{r4, r5, r6, lr}
   84e00:	4605      	mov	r5, r0
   84e02:	460c      	mov	r4, r1
   84e04:	b14b      	cbz	r3, 84e1a <_Balloc+0x1e>
   84e06:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   84e0a:	b180      	cbz	r0, 84e2e <_Balloc+0x32>
   84e0c:	6802      	ldr	r2, [r0, #0]
   84e0e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   84e12:	2300      	movs	r3, #0
   84e14:	6103      	str	r3, [r0, #16]
   84e16:	60c3      	str	r3, [r0, #12]
   84e18:	bd70      	pop	{r4, r5, r6, pc}
   84e1a:	2221      	movs	r2, #33	; 0x21
   84e1c:	2104      	movs	r1, #4
   84e1e:	f000 fbe7 	bl	855f0 <_calloc_r>
   84e22:	64e8      	str	r0, [r5, #76]	; 0x4c
   84e24:	4603      	mov	r3, r0
   84e26:	2800      	cmp	r0, #0
   84e28:	d1ed      	bne.n	84e06 <_Balloc+0xa>
   84e2a:	2000      	movs	r0, #0
   84e2c:	bd70      	pop	{r4, r5, r6, pc}
   84e2e:	2101      	movs	r1, #1
   84e30:	fa01 f604 	lsl.w	r6, r1, r4
   84e34:	1d72      	adds	r2, r6, #5
   84e36:	4628      	mov	r0, r5
   84e38:	0092      	lsls	r2, r2, #2
   84e3a:	f000 fbd9 	bl	855f0 <_calloc_r>
   84e3e:	2800      	cmp	r0, #0
   84e40:	d0f3      	beq.n	84e2a <_Balloc+0x2e>
   84e42:	6044      	str	r4, [r0, #4]
   84e44:	6086      	str	r6, [r0, #8]
   84e46:	e7e4      	b.n	84e12 <_Balloc+0x16>

00084e48 <_Bfree>:
   84e48:	b131      	cbz	r1, 84e58 <_Bfree+0x10>
   84e4a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   84e4c:	684a      	ldr	r2, [r1, #4]
   84e4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   84e52:	6008      	str	r0, [r1, #0]
   84e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   84e58:	4770      	bx	lr
   84e5a:	bf00      	nop

00084e5c <__multadd>:
   84e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   84e5e:	460c      	mov	r4, r1
   84e60:	4605      	mov	r5, r0
   84e62:	f04f 0e00 	mov.w	lr, #0
   84e66:	690e      	ldr	r6, [r1, #16]
   84e68:	b083      	sub	sp, #12
   84e6a:	f101 0714 	add.w	r7, r1, #20
   84e6e:	6838      	ldr	r0, [r7, #0]
   84e70:	f10e 0e01 	add.w	lr, lr, #1
   84e74:	b281      	uxth	r1, r0
   84e76:	fb02 3301 	mla	r3, r2, r1, r3
   84e7a:	0c01      	lsrs	r1, r0, #16
   84e7c:	0c18      	lsrs	r0, r3, #16
   84e7e:	fb02 0101 	mla	r1, r2, r1, r0
   84e82:	b29b      	uxth	r3, r3
   84e84:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   84e88:	4576      	cmp	r6, lr
   84e8a:	f847 3b04 	str.w	r3, [r7], #4
   84e8e:	ea4f 4311 	mov.w	r3, r1, lsr #16
   84e92:	dcec      	bgt.n	84e6e <__multadd+0x12>
   84e94:	b13b      	cbz	r3, 84ea6 <__multadd+0x4a>
   84e96:	68a2      	ldr	r2, [r4, #8]
   84e98:	4296      	cmp	r6, r2
   84e9a:	da07      	bge.n	84eac <__multadd+0x50>
   84e9c:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   84ea0:	3601      	adds	r6, #1
   84ea2:	6153      	str	r3, [r2, #20]
   84ea4:	6126      	str	r6, [r4, #16]
   84ea6:	4620      	mov	r0, r4
   84ea8:	b003      	add	sp, #12
   84eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84eac:	6861      	ldr	r1, [r4, #4]
   84eae:	4628      	mov	r0, r5
   84eb0:	3101      	adds	r1, #1
   84eb2:	9301      	str	r3, [sp, #4]
   84eb4:	f7ff ffa2 	bl	84dfc <_Balloc>
   84eb8:	4607      	mov	r7, r0
   84eba:	6922      	ldr	r2, [r4, #16]
   84ebc:	f104 010c 	add.w	r1, r4, #12
   84ec0:	3202      	adds	r2, #2
   84ec2:	0092      	lsls	r2, r2, #2
   84ec4:	300c      	adds	r0, #12
   84ec6:	f7ff ff17 	bl	84cf8 <memcpy>
   84eca:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   84ecc:	6861      	ldr	r1, [r4, #4]
   84ece:	9b01      	ldr	r3, [sp, #4]
   84ed0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   84ed4:	6020      	str	r0, [r4, #0]
   84ed6:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   84eda:	463c      	mov	r4, r7
   84edc:	e7de      	b.n	84e9c <__multadd+0x40>
   84ede:	bf00      	nop

00084ee0 <__hi0bits>:
   84ee0:	0c02      	lsrs	r2, r0, #16
   84ee2:	0412      	lsls	r2, r2, #16
   84ee4:	4603      	mov	r3, r0
   84ee6:	b9b2      	cbnz	r2, 84f16 <__hi0bits+0x36>
   84ee8:	0403      	lsls	r3, r0, #16
   84eea:	2010      	movs	r0, #16
   84eec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   84ef0:	bf04      	itt	eq
   84ef2:	021b      	lsleq	r3, r3, #8
   84ef4:	3008      	addeq	r0, #8
   84ef6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   84efa:	bf04      	itt	eq
   84efc:	011b      	lsleq	r3, r3, #4
   84efe:	3004      	addeq	r0, #4
   84f00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   84f04:	bf04      	itt	eq
   84f06:	009b      	lsleq	r3, r3, #2
   84f08:	3002      	addeq	r0, #2
   84f0a:	2b00      	cmp	r3, #0
   84f0c:	db02      	blt.n	84f14 <__hi0bits+0x34>
   84f0e:	005b      	lsls	r3, r3, #1
   84f10:	d403      	bmi.n	84f1a <__hi0bits+0x3a>
   84f12:	2020      	movs	r0, #32
   84f14:	4770      	bx	lr
   84f16:	2000      	movs	r0, #0
   84f18:	e7e8      	b.n	84eec <__hi0bits+0xc>
   84f1a:	3001      	adds	r0, #1
   84f1c:	4770      	bx	lr
   84f1e:	bf00      	nop

00084f20 <__lo0bits>:
   84f20:	6803      	ldr	r3, [r0, #0]
   84f22:	4601      	mov	r1, r0
   84f24:	f013 0207 	ands.w	r2, r3, #7
   84f28:	d007      	beq.n	84f3a <__lo0bits+0x1a>
   84f2a:	07da      	lsls	r2, r3, #31
   84f2c:	d421      	bmi.n	84f72 <__lo0bits+0x52>
   84f2e:	0798      	lsls	r0, r3, #30
   84f30:	d421      	bmi.n	84f76 <__lo0bits+0x56>
   84f32:	089b      	lsrs	r3, r3, #2
   84f34:	600b      	str	r3, [r1, #0]
   84f36:	2002      	movs	r0, #2
   84f38:	4770      	bx	lr
   84f3a:	b298      	uxth	r0, r3
   84f3c:	b198      	cbz	r0, 84f66 <__lo0bits+0x46>
   84f3e:	4610      	mov	r0, r2
   84f40:	f013 0fff 	tst.w	r3, #255	; 0xff
   84f44:	bf04      	itt	eq
   84f46:	0a1b      	lsreq	r3, r3, #8
   84f48:	3008      	addeq	r0, #8
   84f4a:	071a      	lsls	r2, r3, #28
   84f4c:	bf04      	itt	eq
   84f4e:	091b      	lsreq	r3, r3, #4
   84f50:	3004      	addeq	r0, #4
   84f52:	079a      	lsls	r2, r3, #30
   84f54:	bf04      	itt	eq
   84f56:	089b      	lsreq	r3, r3, #2
   84f58:	3002      	addeq	r0, #2
   84f5a:	07da      	lsls	r2, r3, #31
   84f5c:	d407      	bmi.n	84f6e <__lo0bits+0x4e>
   84f5e:	085b      	lsrs	r3, r3, #1
   84f60:	d104      	bne.n	84f6c <__lo0bits+0x4c>
   84f62:	2020      	movs	r0, #32
   84f64:	4770      	bx	lr
   84f66:	0c1b      	lsrs	r3, r3, #16
   84f68:	2010      	movs	r0, #16
   84f6a:	e7e9      	b.n	84f40 <__lo0bits+0x20>
   84f6c:	3001      	adds	r0, #1
   84f6e:	600b      	str	r3, [r1, #0]
   84f70:	4770      	bx	lr
   84f72:	2000      	movs	r0, #0
   84f74:	4770      	bx	lr
   84f76:	085b      	lsrs	r3, r3, #1
   84f78:	600b      	str	r3, [r1, #0]
   84f7a:	2001      	movs	r0, #1
   84f7c:	4770      	bx	lr
   84f7e:	bf00      	nop

00084f80 <__i2b>:
   84f80:	b510      	push	{r4, lr}
   84f82:	460c      	mov	r4, r1
   84f84:	2101      	movs	r1, #1
   84f86:	f7ff ff39 	bl	84dfc <_Balloc>
   84f8a:	2201      	movs	r2, #1
   84f8c:	6144      	str	r4, [r0, #20]
   84f8e:	6102      	str	r2, [r0, #16]
   84f90:	bd10      	pop	{r4, pc}
   84f92:	bf00      	nop

00084f94 <__multiply>:
   84f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84f98:	690c      	ldr	r4, [r1, #16]
   84f9a:	6915      	ldr	r5, [r2, #16]
   84f9c:	b083      	sub	sp, #12
   84f9e:	42ac      	cmp	r4, r5
   84fa0:	468b      	mov	fp, r1
   84fa2:	4616      	mov	r6, r2
   84fa4:	da04      	bge.n	84fb0 <__multiply+0x1c>
   84fa6:	4622      	mov	r2, r4
   84fa8:	46b3      	mov	fp, r6
   84faa:	462c      	mov	r4, r5
   84fac:	460e      	mov	r6, r1
   84fae:	4615      	mov	r5, r2
   84fb0:	f8db 3008 	ldr.w	r3, [fp, #8]
   84fb4:	eb04 0805 	add.w	r8, r4, r5
   84fb8:	f8db 1004 	ldr.w	r1, [fp, #4]
   84fbc:	4598      	cmp	r8, r3
   84fbe:	bfc8      	it	gt
   84fc0:	3101      	addgt	r1, #1
   84fc2:	f7ff ff1b 	bl	84dfc <_Balloc>
   84fc6:	f100 0914 	add.w	r9, r0, #20
   84fca:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   84fce:	45d1      	cmp	r9, sl
   84fd0:	9000      	str	r0, [sp, #0]
   84fd2:	d205      	bcs.n	84fe0 <__multiply+0x4c>
   84fd4:	464b      	mov	r3, r9
   84fd6:	2100      	movs	r1, #0
   84fd8:	f843 1b04 	str.w	r1, [r3], #4
   84fdc:	459a      	cmp	sl, r3
   84fde:	d8fb      	bhi.n	84fd8 <__multiply+0x44>
   84fe0:	f106 0c14 	add.w	ip, r6, #20
   84fe4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   84fe8:	f10b 0b14 	add.w	fp, fp, #20
   84fec:	459c      	cmp	ip, r3
   84fee:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   84ff2:	d24b      	bcs.n	8508c <__multiply+0xf8>
   84ff4:	f8cd a004 	str.w	sl, [sp, #4]
   84ff8:	469a      	mov	sl, r3
   84ffa:	f8dc 5000 	ldr.w	r5, [ip]
   84ffe:	b2af      	uxth	r7, r5
   85000:	b1e7      	cbz	r7, 8503c <__multiply+0xa8>
   85002:	464d      	mov	r5, r9
   85004:	465e      	mov	r6, fp
   85006:	2100      	movs	r1, #0
   85008:	f856 2b04 	ldr.w	r2, [r6], #4
   8500c:	6828      	ldr	r0, [r5, #0]
   8500e:	b293      	uxth	r3, r2
   85010:	b284      	uxth	r4, r0
   85012:	0c12      	lsrs	r2, r2, #16
   85014:	fb07 4303 	mla	r3, r7, r3, r4
   85018:	0c00      	lsrs	r0, r0, #16
   8501a:	fb07 0202 	mla	r2, r7, r2, r0
   8501e:	440b      	add	r3, r1
   85020:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   85024:	b29b      	uxth	r3, r3
   85026:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8502a:	45b6      	cmp	lr, r6
   8502c:	f845 3b04 	str.w	r3, [r5], #4
   85030:	ea4f 4111 	mov.w	r1, r1, lsr #16
   85034:	d8e8      	bhi.n	85008 <__multiply+0x74>
   85036:	6029      	str	r1, [r5, #0]
   85038:	f8dc 5000 	ldr.w	r5, [ip]
   8503c:	0c2d      	lsrs	r5, r5, #16
   8503e:	d01d      	beq.n	8507c <__multiply+0xe8>
   85040:	f8d9 3000 	ldr.w	r3, [r9]
   85044:	4648      	mov	r0, r9
   85046:	461c      	mov	r4, r3
   85048:	4659      	mov	r1, fp
   8504a:	2200      	movs	r2, #0
   8504c:	880e      	ldrh	r6, [r1, #0]
   8504e:	0c24      	lsrs	r4, r4, #16
   85050:	fb05 4406 	mla	r4, r5, r6, r4
   85054:	b29b      	uxth	r3, r3
   85056:	4422      	add	r2, r4
   85058:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8505c:	f840 3b04 	str.w	r3, [r0], #4
   85060:	f851 3b04 	ldr.w	r3, [r1], #4
   85064:	6804      	ldr	r4, [r0, #0]
   85066:	0c1b      	lsrs	r3, r3, #16
   85068:	b2a6      	uxth	r6, r4
   8506a:	fb05 6303 	mla	r3, r5, r3, r6
   8506e:	458e      	cmp	lr, r1
   85070:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   85074:	ea4f 4213 	mov.w	r2, r3, lsr #16
   85078:	d8e8      	bhi.n	8504c <__multiply+0xb8>
   8507a:	6003      	str	r3, [r0, #0]
   8507c:	f10c 0c04 	add.w	ip, ip, #4
   85080:	45e2      	cmp	sl, ip
   85082:	f109 0904 	add.w	r9, r9, #4
   85086:	d8b8      	bhi.n	84ffa <__multiply+0x66>
   85088:	f8dd a004 	ldr.w	sl, [sp, #4]
   8508c:	f1b8 0f00 	cmp.w	r8, #0
   85090:	dd0b      	ble.n	850aa <__multiply+0x116>
   85092:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   85096:	f1aa 0a04 	sub.w	sl, sl, #4
   8509a:	b11b      	cbz	r3, 850a4 <__multiply+0x110>
   8509c:	e005      	b.n	850aa <__multiply+0x116>
   8509e:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   850a2:	b913      	cbnz	r3, 850aa <__multiply+0x116>
   850a4:	f1b8 0801 	subs.w	r8, r8, #1
   850a8:	d1f9      	bne.n	8509e <__multiply+0x10a>
   850aa:	9800      	ldr	r0, [sp, #0]
   850ac:	f8c0 8010 	str.w	r8, [r0, #16]
   850b0:	b003      	add	sp, #12
   850b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   850b6:	bf00      	nop

000850b8 <__pow5mult>:
   850b8:	f012 0303 	ands.w	r3, r2, #3
   850bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   850c0:	4614      	mov	r4, r2
   850c2:	4607      	mov	r7, r0
   850c4:	d12e      	bne.n	85124 <__pow5mult+0x6c>
   850c6:	460d      	mov	r5, r1
   850c8:	10a4      	asrs	r4, r4, #2
   850ca:	d01c      	beq.n	85106 <__pow5mult+0x4e>
   850cc:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   850ce:	b396      	cbz	r6, 85136 <__pow5mult+0x7e>
   850d0:	07e3      	lsls	r3, r4, #31
   850d2:	f04f 0800 	mov.w	r8, #0
   850d6:	d406      	bmi.n	850e6 <__pow5mult+0x2e>
   850d8:	1064      	asrs	r4, r4, #1
   850da:	d014      	beq.n	85106 <__pow5mult+0x4e>
   850dc:	6830      	ldr	r0, [r6, #0]
   850de:	b1a8      	cbz	r0, 8510c <__pow5mult+0x54>
   850e0:	4606      	mov	r6, r0
   850e2:	07e3      	lsls	r3, r4, #31
   850e4:	d5f8      	bpl.n	850d8 <__pow5mult+0x20>
   850e6:	4632      	mov	r2, r6
   850e8:	4629      	mov	r1, r5
   850ea:	4638      	mov	r0, r7
   850ec:	f7ff ff52 	bl	84f94 <__multiply>
   850f0:	b1b5      	cbz	r5, 85120 <__pow5mult+0x68>
   850f2:	686a      	ldr	r2, [r5, #4]
   850f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   850f6:	1064      	asrs	r4, r4, #1
   850f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   850fc:	6029      	str	r1, [r5, #0]
   850fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   85102:	4605      	mov	r5, r0
   85104:	d1ea      	bne.n	850dc <__pow5mult+0x24>
   85106:	4628      	mov	r0, r5
   85108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8510c:	4632      	mov	r2, r6
   8510e:	4631      	mov	r1, r6
   85110:	4638      	mov	r0, r7
   85112:	f7ff ff3f 	bl	84f94 <__multiply>
   85116:	6030      	str	r0, [r6, #0]
   85118:	f8c0 8000 	str.w	r8, [r0]
   8511c:	4606      	mov	r6, r0
   8511e:	e7e0      	b.n	850e2 <__pow5mult+0x2a>
   85120:	4605      	mov	r5, r0
   85122:	e7d9      	b.n	850d8 <__pow5mult+0x20>
   85124:	4a0b      	ldr	r2, [pc, #44]	; (85154 <__pow5mult+0x9c>)
   85126:	3b01      	subs	r3, #1
   85128:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8512c:	2300      	movs	r3, #0
   8512e:	f7ff fe95 	bl	84e5c <__multadd>
   85132:	4605      	mov	r5, r0
   85134:	e7c8      	b.n	850c8 <__pow5mult+0x10>
   85136:	2101      	movs	r1, #1
   85138:	4638      	mov	r0, r7
   8513a:	f7ff fe5f 	bl	84dfc <_Balloc>
   8513e:	f240 2171 	movw	r1, #625	; 0x271
   85142:	2201      	movs	r2, #1
   85144:	2300      	movs	r3, #0
   85146:	6141      	str	r1, [r0, #20]
   85148:	6102      	str	r2, [r0, #16]
   8514a:	4606      	mov	r6, r0
   8514c:	64b8      	str	r0, [r7, #72]	; 0x48
   8514e:	6003      	str	r3, [r0, #0]
   85150:	e7be      	b.n	850d0 <__pow5mult+0x18>
   85152:	bf00      	nop
   85154:	00086d28 	.word	0x00086d28

00085158 <__lshift>:
   85158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8515c:	690b      	ldr	r3, [r1, #16]
   8515e:	1154      	asrs	r4, r2, #5
   85160:	eb04 0803 	add.w	r8, r4, r3
   85164:	688b      	ldr	r3, [r1, #8]
   85166:	f108 0501 	add.w	r5, r8, #1
   8516a:	429d      	cmp	r5, r3
   8516c:	460e      	mov	r6, r1
   8516e:	4691      	mov	r9, r2
   85170:	4607      	mov	r7, r0
   85172:	6849      	ldr	r1, [r1, #4]
   85174:	dd04      	ble.n	85180 <__lshift+0x28>
   85176:	005b      	lsls	r3, r3, #1
   85178:	429d      	cmp	r5, r3
   8517a:	f101 0101 	add.w	r1, r1, #1
   8517e:	dcfa      	bgt.n	85176 <__lshift+0x1e>
   85180:	4638      	mov	r0, r7
   85182:	f7ff fe3b 	bl	84dfc <_Balloc>
   85186:	2c00      	cmp	r4, #0
   85188:	f100 0314 	add.w	r3, r0, #20
   8518c:	dd06      	ble.n	8519c <__lshift+0x44>
   8518e:	2100      	movs	r1, #0
   85190:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   85194:	f843 1b04 	str.w	r1, [r3], #4
   85198:	429a      	cmp	r2, r3
   8519a:	d1fb      	bne.n	85194 <__lshift+0x3c>
   8519c:	6934      	ldr	r4, [r6, #16]
   8519e:	f106 0114 	add.w	r1, r6, #20
   851a2:	f019 091f 	ands.w	r9, r9, #31
   851a6:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   851aa:	d01d      	beq.n	851e8 <__lshift+0x90>
   851ac:	2200      	movs	r2, #0
   851ae:	f1c9 0c20 	rsb	ip, r9, #32
   851b2:	680c      	ldr	r4, [r1, #0]
   851b4:	fa04 f409 	lsl.w	r4, r4, r9
   851b8:	4314      	orrs	r4, r2
   851ba:	f843 4b04 	str.w	r4, [r3], #4
   851be:	f851 2b04 	ldr.w	r2, [r1], #4
   851c2:	458e      	cmp	lr, r1
   851c4:	fa22 f20c 	lsr.w	r2, r2, ip
   851c8:	d8f3      	bhi.n	851b2 <__lshift+0x5a>
   851ca:	601a      	str	r2, [r3, #0]
   851cc:	b10a      	cbz	r2, 851d2 <__lshift+0x7a>
   851ce:	f108 0502 	add.w	r5, r8, #2
   851d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   851d4:	6872      	ldr	r2, [r6, #4]
   851d6:	3d01      	subs	r5, #1
   851d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   851dc:	6105      	str	r5, [r0, #16]
   851de:	6031      	str	r1, [r6, #0]
   851e0:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   851e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   851e8:	3b04      	subs	r3, #4
   851ea:	f851 2b04 	ldr.w	r2, [r1], #4
   851ee:	458e      	cmp	lr, r1
   851f0:	f843 2f04 	str.w	r2, [r3, #4]!
   851f4:	d8f9      	bhi.n	851ea <__lshift+0x92>
   851f6:	e7ec      	b.n	851d2 <__lshift+0x7a>

000851f8 <__mcmp>:
   851f8:	b430      	push	{r4, r5}
   851fa:	690b      	ldr	r3, [r1, #16]
   851fc:	4605      	mov	r5, r0
   851fe:	6900      	ldr	r0, [r0, #16]
   85200:	1ac0      	subs	r0, r0, r3
   85202:	d10f      	bne.n	85224 <__mcmp+0x2c>
   85204:	009b      	lsls	r3, r3, #2
   85206:	3514      	adds	r5, #20
   85208:	3114      	adds	r1, #20
   8520a:	4419      	add	r1, r3
   8520c:	442b      	add	r3, r5
   8520e:	e001      	b.n	85214 <__mcmp+0x1c>
   85210:	429d      	cmp	r5, r3
   85212:	d207      	bcs.n	85224 <__mcmp+0x2c>
   85214:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   85218:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8521c:	4294      	cmp	r4, r2
   8521e:	d0f7      	beq.n	85210 <__mcmp+0x18>
   85220:	d302      	bcc.n	85228 <__mcmp+0x30>
   85222:	2001      	movs	r0, #1
   85224:	bc30      	pop	{r4, r5}
   85226:	4770      	bx	lr
   85228:	f04f 30ff 	mov.w	r0, #4294967295
   8522c:	e7fa      	b.n	85224 <__mcmp+0x2c>
   8522e:	bf00      	nop

00085230 <__mdiff>:
   85230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85234:	690c      	ldr	r4, [r1, #16]
   85236:	4689      	mov	r9, r1
   85238:	6911      	ldr	r1, [r2, #16]
   8523a:	4692      	mov	sl, r2
   8523c:	1a64      	subs	r4, r4, r1
   8523e:	2c00      	cmp	r4, #0
   85240:	d117      	bne.n	85272 <__mdiff+0x42>
   85242:	0089      	lsls	r1, r1, #2
   85244:	f109 0714 	add.w	r7, r9, #20
   85248:	f102 0614 	add.w	r6, r2, #20
   8524c:	187b      	adds	r3, r7, r1
   8524e:	4431      	add	r1, r6
   85250:	e001      	b.n	85256 <__mdiff+0x26>
   85252:	429f      	cmp	r7, r3
   85254:	d265      	bcs.n	85322 <__mdiff+0xf2>
   85256:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8525a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8525e:	4295      	cmp	r5, r2
   85260:	d0f7      	beq.n	85252 <__mdiff+0x22>
   85262:	d267      	bcs.n	85334 <__mdiff+0x104>
   85264:	464b      	mov	r3, r9
   85266:	46bb      	mov	fp, r7
   85268:	46d1      	mov	r9, sl
   8526a:	4637      	mov	r7, r6
   8526c:	469a      	mov	sl, r3
   8526e:	2401      	movs	r4, #1
   85270:	e005      	b.n	8527e <__mdiff+0x4e>
   85272:	db61      	blt.n	85338 <__mdiff+0x108>
   85274:	2400      	movs	r4, #0
   85276:	f109 0714 	add.w	r7, r9, #20
   8527a:	f10a 0b14 	add.w	fp, sl, #20
   8527e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   85282:	f7ff fdbb 	bl	84dfc <_Balloc>
   85286:	465d      	mov	r5, fp
   85288:	f04f 0800 	mov.w	r8, #0
   8528c:	f8d9 e010 	ldr.w	lr, [r9, #16]
   85290:	f8da 3010 	ldr.w	r3, [sl, #16]
   85294:	463e      	mov	r6, r7
   85296:	60c4      	str	r4, [r0, #12]
   85298:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   8529c:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   852a0:	f100 0414 	add.w	r4, r0, #20
   852a4:	f856 9b04 	ldr.w	r9, [r6], #4
   852a8:	f855 2b04 	ldr.w	r2, [r5], #4
   852ac:	fa1f f389 	uxth.w	r3, r9
   852b0:	4443      	add	r3, r8
   852b2:	fa1f f882 	uxth.w	r8, r2
   852b6:	0c12      	lsrs	r2, r2, #16
   852b8:	eba3 0308 	sub.w	r3, r3, r8
   852bc:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   852c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   852c4:	b29b      	uxth	r3, r3
   852c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   852ca:	45ac      	cmp	ip, r5
   852cc:	f844 3b04 	str.w	r3, [r4], #4
   852d0:	ea4f 4822 	mov.w	r8, r2, asr #16
   852d4:	d8e6      	bhi.n	852a4 <__mdiff+0x74>
   852d6:	42b7      	cmp	r7, r6
   852d8:	d917      	bls.n	8530a <__mdiff+0xda>
   852da:	46a4      	mov	ip, r4
   852dc:	4635      	mov	r5, r6
   852de:	f855 3b04 	ldr.w	r3, [r5], #4
   852e2:	b299      	uxth	r1, r3
   852e4:	4441      	add	r1, r8
   852e6:	140a      	asrs	r2, r1, #16
   852e8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   852ec:	b289      	uxth	r1, r1
   852ee:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   852f2:	42af      	cmp	r7, r5
   852f4:	f84c 3b04 	str.w	r3, [ip], #4
   852f8:	ea4f 4822 	mov.w	r8, r2, asr #16
   852fc:	d8ef      	bhi.n	852de <__mdiff+0xae>
   852fe:	43f6      	mvns	r6, r6
   85300:	4437      	add	r7, r6
   85302:	f027 0703 	bic.w	r7, r7, #3
   85306:	3704      	adds	r7, #4
   85308:	443c      	add	r4, r7
   8530a:	3c04      	subs	r4, #4
   8530c:	b92b      	cbnz	r3, 8531a <__mdiff+0xea>
   8530e:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   85312:	f10e 3eff 	add.w	lr, lr, #4294967295
   85316:	2b00      	cmp	r3, #0
   85318:	d0f9      	beq.n	8530e <__mdiff+0xde>
   8531a:	f8c0 e010 	str.w	lr, [r0, #16]
   8531e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85322:	2100      	movs	r1, #0
   85324:	f7ff fd6a 	bl	84dfc <_Balloc>
   85328:	2201      	movs	r2, #1
   8532a:	2300      	movs	r3, #0
   8532c:	6102      	str	r2, [r0, #16]
   8532e:	6143      	str	r3, [r0, #20]
   85330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85334:	46b3      	mov	fp, r6
   85336:	e7a2      	b.n	8527e <__mdiff+0x4e>
   85338:	464b      	mov	r3, r9
   8533a:	f109 0b14 	add.w	fp, r9, #20
   8533e:	f102 0714 	add.w	r7, r2, #20
   85342:	4691      	mov	r9, r2
   85344:	2401      	movs	r4, #1
   85346:	469a      	mov	sl, r3
   85348:	e799      	b.n	8527e <__mdiff+0x4e>
   8534a:	bf00      	nop

0008534c <__d2b>:
   8534c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8534e:	2101      	movs	r1, #1
   85350:	b083      	sub	sp, #12
   85352:	461c      	mov	r4, r3
   85354:	f3c3 550a 	ubfx	r5, r3, #20, #11
   85358:	4616      	mov	r6, r2
   8535a:	f7ff fd4f 	bl	84dfc <_Balloc>
   8535e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   85362:	4607      	mov	r7, r0
   85364:	b10d      	cbz	r5, 8536a <__d2b+0x1e>
   85366:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8536a:	9401      	str	r4, [sp, #4]
   8536c:	b306      	cbz	r6, 853b0 <__d2b+0x64>
   8536e:	a802      	add	r0, sp, #8
   85370:	f840 6d08 	str.w	r6, [r0, #-8]!
   85374:	f7ff fdd4 	bl	84f20 <__lo0bits>
   85378:	2800      	cmp	r0, #0
   8537a:	d130      	bne.n	853de <__d2b+0x92>
   8537c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   85380:	617a      	str	r2, [r7, #20]
   85382:	2b00      	cmp	r3, #0
   85384:	bf0c      	ite	eq
   85386:	2101      	moveq	r1, #1
   85388:	2102      	movne	r1, #2
   8538a:	61bb      	str	r3, [r7, #24]
   8538c:	6139      	str	r1, [r7, #16]
   8538e:	b9d5      	cbnz	r5, 853c6 <__d2b+0x7a>
   85390:	9a08      	ldr	r2, [sp, #32]
   85392:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   85396:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8539a:	6010      	str	r0, [r2, #0]
   8539c:	6918      	ldr	r0, [r3, #16]
   8539e:	f7ff fd9f 	bl	84ee0 <__hi0bits>
   853a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   853a4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   853a8:	6018      	str	r0, [r3, #0]
   853aa:	4638      	mov	r0, r7
   853ac:	b003      	add	sp, #12
   853ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   853b0:	a801      	add	r0, sp, #4
   853b2:	f7ff fdb5 	bl	84f20 <__lo0bits>
   853b6:	2201      	movs	r2, #1
   853b8:	9b01      	ldr	r3, [sp, #4]
   853ba:	4611      	mov	r1, r2
   853bc:	3020      	adds	r0, #32
   853be:	613a      	str	r2, [r7, #16]
   853c0:	617b      	str	r3, [r7, #20]
   853c2:	2d00      	cmp	r5, #0
   853c4:	d0e4      	beq.n	85390 <__d2b+0x44>
   853c6:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   853ca:	9a08      	ldr	r2, [sp, #32]
   853cc:	4403      	add	r3, r0
   853ce:	6013      	str	r3, [r2, #0]
   853d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   853d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   853d6:	6018      	str	r0, [r3, #0]
   853d8:	4638      	mov	r0, r7
   853da:	b003      	add	sp, #12
   853dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   853de:	9b01      	ldr	r3, [sp, #4]
   853e0:	f1c0 0220 	rsb	r2, r0, #32
   853e4:	9900      	ldr	r1, [sp, #0]
   853e6:	fa03 f202 	lsl.w	r2, r3, r2
   853ea:	430a      	orrs	r2, r1
   853ec:	40c3      	lsrs	r3, r0
   853ee:	9301      	str	r3, [sp, #4]
   853f0:	617a      	str	r2, [r7, #20]
   853f2:	e7c6      	b.n	85382 <__d2b+0x36>

000853f4 <_sbrk_r>:
   853f4:	b538      	push	{r3, r4, r5, lr}
   853f6:	2300      	movs	r3, #0
   853f8:	4c06      	ldr	r4, [pc, #24]	; (85414 <_sbrk_r+0x20>)
   853fa:	4605      	mov	r5, r0
   853fc:	4608      	mov	r0, r1
   853fe:	6023      	str	r3, [r4, #0]
   85400:	f7fc fd36 	bl	81e70 <_sbrk>
   85404:	1c43      	adds	r3, r0, #1
   85406:	d000      	beq.n	8540a <_sbrk_r+0x16>
   85408:	bd38      	pop	{r3, r4, r5, pc}
   8540a:	6823      	ldr	r3, [r4, #0]
   8540c:	2b00      	cmp	r3, #0
   8540e:	d0fb      	beq.n	85408 <_sbrk_r+0x14>
   85410:	602b      	str	r3, [r5, #0]
   85412:	bd38      	pop	{r3, r4, r5, pc}
   85414:	20071504 	.word	0x20071504

00085418 <__ssprint_r>:
   85418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8541c:	6893      	ldr	r3, [r2, #8]
   8541e:	b083      	sub	sp, #12
   85420:	4690      	mov	r8, r2
   85422:	2b00      	cmp	r3, #0
   85424:	d070      	beq.n	85508 <__ssprint_r+0xf0>
   85426:	4682      	mov	sl, r0
   85428:	460c      	mov	r4, r1
   8542a:	6817      	ldr	r7, [r2, #0]
   8542c:	688d      	ldr	r5, [r1, #8]
   8542e:	6808      	ldr	r0, [r1, #0]
   85430:	e042      	b.n	854b8 <__ssprint_r+0xa0>
   85432:	89a3      	ldrh	r3, [r4, #12]
   85434:	f413 6f90 	tst.w	r3, #1152	; 0x480
   85438:	d02e      	beq.n	85498 <__ssprint_r+0x80>
   8543a:	6965      	ldr	r5, [r4, #20]
   8543c:	6921      	ldr	r1, [r4, #16]
   8543e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   85442:	eba0 0b01 	sub.w	fp, r0, r1
   85446:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8544a:	f10b 0001 	add.w	r0, fp, #1
   8544e:	106d      	asrs	r5, r5, #1
   85450:	4430      	add	r0, r6
   85452:	42a8      	cmp	r0, r5
   85454:	462a      	mov	r2, r5
   85456:	bf84      	itt	hi
   85458:	4605      	movhi	r5, r0
   8545a:	462a      	movhi	r2, r5
   8545c:	055b      	lsls	r3, r3, #21
   8545e:	d538      	bpl.n	854d2 <__ssprint_r+0xba>
   85460:	4611      	mov	r1, r2
   85462:	4650      	mov	r0, sl
   85464:	f7ff f94a 	bl	846fc <_malloc_r>
   85468:	2800      	cmp	r0, #0
   8546a:	d03c      	beq.n	854e6 <__ssprint_r+0xce>
   8546c:	465a      	mov	r2, fp
   8546e:	6921      	ldr	r1, [r4, #16]
   85470:	9001      	str	r0, [sp, #4]
   85472:	f7ff fc41 	bl	84cf8 <memcpy>
   85476:	89a2      	ldrh	r2, [r4, #12]
   85478:	9b01      	ldr	r3, [sp, #4]
   8547a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8547e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   85482:	81a2      	strh	r2, [r4, #12]
   85484:	eba5 020b 	sub.w	r2, r5, fp
   85488:	eb03 000b 	add.w	r0, r3, fp
   8548c:	6165      	str	r5, [r4, #20]
   8548e:	46b3      	mov	fp, r6
   85490:	4635      	mov	r5, r6
   85492:	6123      	str	r3, [r4, #16]
   85494:	6020      	str	r0, [r4, #0]
   85496:	60a2      	str	r2, [r4, #8]
   85498:	465a      	mov	r2, fp
   8549a:	4649      	mov	r1, r9
   8549c:	f000 fa0e 	bl	858bc <memmove>
   854a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   854a4:	68a2      	ldr	r2, [r4, #8]
   854a6:	6820      	ldr	r0, [r4, #0]
   854a8:	1b55      	subs	r5, r2, r5
   854aa:	4458      	add	r0, fp
   854ac:	1b9e      	subs	r6, r3, r6
   854ae:	60a5      	str	r5, [r4, #8]
   854b0:	6020      	str	r0, [r4, #0]
   854b2:	f8c8 6008 	str.w	r6, [r8, #8]
   854b6:	b33e      	cbz	r6, 85508 <__ssprint_r+0xf0>
   854b8:	687e      	ldr	r6, [r7, #4]
   854ba:	463b      	mov	r3, r7
   854bc:	3708      	adds	r7, #8
   854be:	2e00      	cmp	r6, #0
   854c0:	d0fa      	beq.n	854b8 <__ssprint_r+0xa0>
   854c2:	42ae      	cmp	r6, r5
   854c4:	f8d3 9000 	ldr.w	r9, [r3]
   854c8:	46ab      	mov	fp, r5
   854ca:	d2b2      	bcs.n	85432 <__ssprint_r+0x1a>
   854cc:	4635      	mov	r5, r6
   854ce:	46b3      	mov	fp, r6
   854d0:	e7e2      	b.n	85498 <__ssprint_r+0x80>
   854d2:	4650      	mov	r0, sl
   854d4:	f000 fa56 	bl	85984 <_realloc_r>
   854d8:	4603      	mov	r3, r0
   854da:	2800      	cmp	r0, #0
   854dc:	d1d2      	bne.n	85484 <__ssprint_r+0x6c>
   854de:	6921      	ldr	r1, [r4, #16]
   854e0:	4650      	mov	r0, sl
   854e2:	f000 f905 	bl	856f0 <_free_r>
   854e6:	230c      	movs	r3, #12
   854e8:	2200      	movs	r2, #0
   854ea:	f04f 30ff 	mov.w	r0, #4294967295
   854ee:	f8ca 3000 	str.w	r3, [sl]
   854f2:	89a3      	ldrh	r3, [r4, #12]
   854f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   854f8:	81a3      	strh	r3, [r4, #12]
   854fa:	f8c8 2008 	str.w	r2, [r8, #8]
   854fe:	f8c8 2004 	str.w	r2, [r8, #4]
   85502:	b003      	add	sp, #12
   85504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85508:	2000      	movs	r0, #0
   8550a:	f8c8 0004 	str.w	r0, [r8, #4]
   8550e:	b003      	add	sp, #12
   85510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085514 <__ascii_wctomb>:
   85514:	b119      	cbz	r1, 8551e <__ascii_wctomb+0xa>
   85516:	2aff      	cmp	r2, #255	; 0xff
   85518:	d803      	bhi.n	85522 <__ascii_wctomb+0xe>
   8551a:	700a      	strb	r2, [r1, #0]
   8551c:	2101      	movs	r1, #1
   8551e:	4608      	mov	r0, r1
   85520:	4770      	bx	lr
   85522:	238a      	movs	r3, #138	; 0x8a
   85524:	f04f 31ff 	mov.w	r1, #4294967295
   85528:	6003      	str	r3, [r0, #0]
   8552a:	e7f8      	b.n	8551e <__ascii_wctomb+0xa>

0008552c <__register_exitproc>:
   8552c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85530:	4d2c      	ldr	r5, [pc, #176]	; (855e4 <__register_exitproc+0xb8>)
   85532:	4606      	mov	r6, r0
   85534:	6828      	ldr	r0, [r5, #0]
   85536:	4698      	mov	r8, r3
   85538:	460f      	mov	r7, r1
   8553a:	4691      	mov	r9, r2
   8553c:	f7ff f8da 	bl	846f4 <__retarget_lock_acquire_recursive>
   85540:	4b29      	ldr	r3, [pc, #164]	; (855e8 <__register_exitproc+0xbc>)
   85542:	681c      	ldr	r4, [r3, #0]
   85544:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   85548:	2b00      	cmp	r3, #0
   8554a:	d03e      	beq.n	855ca <__register_exitproc+0x9e>
   8554c:	685a      	ldr	r2, [r3, #4]
   8554e:	2a1f      	cmp	r2, #31
   85550:	dc1c      	bgt.n	8558c <__register_exitproc+0x60>
   85552:	f102 0e01 	add.w	lr, r2, #1
   85556:	b176      	cbz	r6, 85576 <__register_exitproc+0x4a>
   85558:	2101      	movs	r1, #1
   8555a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8555e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   85562:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   85566:	4091      	lsls	r1, r2
   85568:	4308      	orrs	r0, r1
   8556a:	2e02      	cmp	r6, #2
   8556c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85570:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   85574:	d023      	beq.n	855be <__register_exitproc+0x92>
   85576:	3202      	adds	r2, #2
   85578:	f8c3 e004 	str.w	lr, [r3, #4]
   8557c:	6828      	ldr	r0, [r5, #0]
   8557e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   85582:	f7ff f8b9 	bl	846f8 <__retarget_lock_release_recursive>
   85586:	2000      	movs	r0, #0
   85588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8558c:	4b17      	ldr	r3, [pc, #92]	; (855ec <__register_exitproc+0xc0>)
   8558e:	b30b      	cbz	r3, 855d4 <__register_exitproc+0xa8>
   85590:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85594:	f3af 8000 	nop.w
   85598:	4603      	mov	r3, r0
   8559a:	b1d8      	cbz	r0, 855d4 <__register_exitproc+0xa8>
   8559c:	2000      	movs	r0, #0
   8559e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   855a2:	f04f 0e01 	mov.w	lr, #1
   855a6:	6058      	str	r0, [r3, #4]
   855a8:	6019      	str	r1, [r3, #0]
   855aa:	4602      	mov	r2, r0
   855ac:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   855b0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   855b4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   855b8:	2e00      	cmp	r6, #0
   855ba:	d0dc      	beq.n	85576 <__register_exitproc+0x4a>
   855bc:	e7cc      	b.n	85558 <__register_exitproc+0x2c>
   855be:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   855c2:	4301      	orrs	r1, r0
   855c4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   855c8:	e7d5      	b.n	85576 <__register_exitproc+0x4a>
   855ca:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   855ce:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   855d2:	e7bb      	b.n	8554c <__register_exitproc+0x20>
   855d4:	6828      	ldr	r0, [r5, #0]
   855d6:	f7ff f88f 	bl	846f8 <__retarget_lock_release_recursive>
   855da:	f04f 30ff 	mov.w	r0, #4294967295
   855de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   855e2:	bf00      	nop
   855e4:	200709c0 	.word	0x200709c0
   855e8:	00086bb0 	.word	0x00086bb0
   855ec:	00000000 	.word	0x00000000

000855f0 <_calloc_r>:
   855f0:	b510      	push	{r4, lr}
   855f2:	fb02 f101 	mul.w	r1, r2, r1
   855f6:	f7ff f881 	bl	846fc <_malloc_r>
   855fa:	4604      	mov	r4, r0
   855fc:	b1d8      	cbz	r0, 85636 <_calloc_r+0x46>
   855fe:	f850 2c04 	ldr.w	r2, [r0, #-4]
   85602:	f022 0203 	bic.w	r2, r2, #3
   85606:	3a04      	subs	r2, #4
   85608:	2a24      	cmp	r2, #36	; 0x24
   8560a:	d818      	bhi.n	8563e <_calloc_r+0x4e>
   8560c:	2a13      	cmp	r2, #19
   8560e:	d914      	bls.n	8563a <_calloc_r+0x4a>
   85610:	2300      	movs	r3, #0
   85612:	2a1b      	cmp	r2, #27
   85614:	6003      	str	r3, [r0, #0]
   85616:	6043      	str	r3, [r0, #4]
   85618:	d916      	bls.n	85648 <_calloc_r+0x58>
   8561a:	2a24      	cmp	r2, #36	; 0x24
   8561c:	6083      	str	r3, [r0, #8]
   8561e:	60c3      	str	r3, [r0, #12]
   85620:	bf11      	iteee	ne
   85622:	f100 0210 	addne.w	r2, r0, #16
   85626:	6103      	streq	r3, [r0, #16]
   85628:	6143      	streq	r3, [r0, #20]
   8562a:	f100 0218 	addeq.w	r2, r0, #24
   8562e:	2300      	movs	r3, #0
   85630:	6013      	str	r3, [r2, #0]
   85632:	6053      	str	r3, [r2, #4]
   85634:	6093      	str	r3, [r2, #8]
   85636:	4620      	mov	r0, r4
   85638:	bd10      	pop	{r4, pc}
   8563a:	4602      	mov	r2, r0
   8563c:	e7f7      	b.n	8562e <_calloc_r+0x3e>
   8563e:	2100      	movs	r1, #0
   85640:	f7fc fc5e 	bl	81f00 <memset>
   85644:	4620      	mov	r0, r4
   85646:	bd10      	pop	{r4, pc}
   85648:	f100 0208 	add.w	r2, r0, #8
   8564c:	e7ef      	b.n	8562e <_calloc_r+0x3e>
   8564e:	bf00      	nop

00085650 <_malloc_trim_r>:
   85650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85652:	460c      	mov	r4, r1
   85654:	4f23      	ldr	r7, [pc, #140]	; (856e4 <_malloc_trim_r+0x94>)
   85656:	4606      	mov	r6, r0
   85658:	f7ff fbc4 	bl	84de4 <__malloc_lock>
   8565c:	68bb      	ldr	r3, [r7, #8]
   8565e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   85662:	685d      	ldr	r5, [r3, #4]
   85664:	310f      	adds	r1, #15
   85666:	f025 0503 	bic.w	r5, r5, #3
   8566a:	4429      	add	r1, r5
   8566c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   85670:	f021 010f 	bic.w	r1, r1, #15
   85674:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   85678:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8567c:	db07      	blt.n	8568e <_malloc_trim_r+0x3e>
   8567e:	2100      	movs	r1, #0
   85680:	4630      	mov	r0, r6
   85682:	f7ff feb7 	bl	853f4 <_sbrk_r>
   85686:	68bb      	ldr	r3, [r7, #8]
   85688:	442b      	add	r3, r5
   8568a:	4298      	cmp	r0, r3
   8568c:	d004      	beq.n	85698 <_malloc_trim_r+0x48>
   8568e:	4630      	mov	r0, r6
   85690:	f7ff fbae 	bl	84df0 <__malloc_unlock>
   85694:	2000      	movs	r0, #0
   85696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85698:	4261      	negs	r1, r4
   8569a:	4630      	mov	r0, r6
   8569c:	f7ff feaa 	bl	853f4 <_sbrk_r>
   856a0:	3001      	adds	r0, #1
   856a2:	d00d      	beq.n	856c0 <_malloc_trim_r+0x70>
   856a4:	4b10      	ldr	r3, [pc, #64]	; (856e8 <_malloc_trim_r+0x98>)
   856a6:	68ba      	ldr	r2, [r7, #8]
   856a8:	6819      	ldr	r1, [r3, #0]
   856aa:	1b2d      	subs	r5, r5, r4
   856ac:	f045 0501 	orr.w	r5, r5, #1
   856b0:	4630      	mov	r0, r6
   856b2:	1b09      	subs	r1, r1, r4
   856b4:	6055      	str	r5, [r2, #4]
   856b6:	6019      	str	r1, [r3, #0]
   856b8:	f7ff fb9a 	bl	84df0 <__malloc_unlock>
   856bc:	2001      	movs	r0, #1
   856be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   856c0:	2100      	movs	r1, #0
   856c2:	4630      	mov	r0, r6
   856c4:	f7ff fe96 	bl	853f4 <_sbrk_r>
   856c8:	68ba      	ldr	r2, [r7, #8]
   856ca:	1a83      	subs	r3, r0, r2
   856cc:	2b0f      	cmp	r3, #15
   856ce:	ddde      	ble.n	8568e <_malloc_trim_r+0x3e>
   856d0:	4c06      	ldr	r4, [pc, #24]	; (856ec <_malloc_trim_r+0x9c>)
   856d2:	4905      	ldr	r1, [pc, #20]	; (856e8 <_malloc_trim_r+0x98>)
   856d4:	6824      	ldr	r4, [r4, #0]
   856d6:	f043 0301 	orr.w	r3, r3, #1
   856da:	1b00      	subs	r0, r0, r4
   856dc:	6053      	str	r3, [r2, #4]
   856de:	6008      	str	r0, [r1, #0]
   856e0:	e7d5      	b.n	8568e <_malloc_trim_r+0x3e>
   856e2:	bf00      	nop
   856e4:	20070b30 	.word	0x20070b30
   856e8:	20070fe0 	.word	0x20070fe0
   856ec:	20070f38 	.word	0x20070f38

000856f0 <_free_r>:
   856f0:	2900      	cmp	r1, #0
   856f2:	d044      	beq.n	8577e <_free_r+0x8e>
   856f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   856f8:	460d      	mov	r5, r1
   856fa:	4680      	mov	r8, r0
   856fc:	f7ff fb72 	bl	84de4 <__malloc_lock>
   85700:	f855 7c04 	ldr.w	r7, [r5, #-4]
   85704:	4969      	ldr	r1, [pc, #420]	; (858ac <_free_r+0x1bc>)
   85706:	f1a5 0408 	sub.w	r4, r5, #8
   8570a:	f027 0301 	bic.w	r3, r7, #1
   8570e:	18e2      	adds	r2, r4, r3
   85710:	688e      	ldr	r6, [r1, #8]
   85712:	6850      	ldr	r0, [r2, #4]
   85714:	42b2      	cmp	r2, r6
   85716:	f020 0003 	bic.w	r0, r0, #3
   8571a:	d05e      	beq.n	857da <_free_r+0xea>
   8571c:	07fe      	lsls	r6, r7, #31
   8571e:	6050      	str	r0, [r2, #4]
   85720:	d40b      	bmi.n	8573a <_free_r+0x4a>
   85722:	f855 7c08 	ldr.w	r7, [r5, #-8]
   85726:	f101 0e08 	add.w	lr, r1, #8
   8572a:	1be4      	subs	r4, r4, r7
   8572c:	68a5      	ldr	r5, [r4, #8]
   8572e:	443b      	add	r3, r7
   85730:	4575      	cmp	r5, lr
   85732:	d06d      	beq.n	85810 <_free_r+0x120>
   85734:	68e7      	ldr	r7, [r4, #12]
   85736:	60ef      	str	r7, [r5, #12]
   85738:	60bd      	str	r5, [r7, #8]
   8573a:	1815      	adds	r5, r2, r0
   8573c:	686d      	ldr	r5, [r5, #4]
   8573e:	07ed      	lsls	r5, r5, #31
   85740:	d53e      	bpl.n	857c0 <_free_r+0xd0>
   85742:	f043 0201 	orr.w	r2, r3, #1
   85746:	6062      	str	r2, [r4, #4]
   85748:	50e3      	str	r3, [r4, r3]
   8574a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8574e:	d217      	bcs.n	85780 <_free_r+0x90>
   85750:	2201      	movs	r2, #1
   85752:	08db      	lsrs	r3, r3, #3
   85754:	1098      	asrs	r0, r3, #2
   85756:	684d      	ldr	r5, [r1, #4]
   85758:	4413      	add	r3, r2
   8575a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8575e:	4082      	lsls	r2, r0
   85760:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   85764:	432a      	orrs	r2, r5
   85766:	3808      	subs	r0, #8
   85768:	60e0      	str	r0, [r4, #12]
   8576a:	60a7      	str	r7, [r4, #8]
   8576c:	604a      	str	r2, [r1, #4]
   8576e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85772:	60fc      	str	r4, [r7, #12]
   85774:	4640      	mov	r0, r8
   85776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8577a:	f7ff bb39 	b.w	84df0 <__malloc_unlock>
   8577e:	4770      	bx	lr
   85780:	0a5a      	lsrs	r2, r3, #9
   85782:	2a04      	cmp	r2, #4
   85784:	d852      	bhi.n	8582c <_free_r+0x13c>
   85786:	099a      	lsrs	r2, r3, #6
   85788:	f102 0739 	add.w	r7, r2, #57	; 0x39
   8578c:	00ff      	lsls	r7, r7, #3
   8578e:	f102 0538 	add.w	r5, r2, #56	; 0x38
   85792:	19c8      	adds	r0, r1, r7
   85794:	59ca      	ldr	r2, [r1, r7]
   85796:	3808      	subs	r0, #8
   85798:	4290      	cmp	r0, r2
   8579a:	d04f      	beq.n	8583c <_free_r+0x14c>
   8579c:	6851      	ldr	r1, [r2, #4]
   8579e:	f021 0103 	bic.w	r1, r1, #3
   857a2:	428b      	cmp	r3, r1
   857a4:	d232      	bcs.n	8580c <_free_r+0x11c>
   857a6:	6892      	ldr	r2, [r2, #8]
   857a8:	4290      	cmp	r0, r2
   857aa:	d1f7      	bne.n	8579c <_free_r+0xac>
   857ac:	68c3      	ldr	r3, [r0, #12]
   857ae:	60a0      	str	r0, [r4, #8]
   857b0:	60e3      	str	r3, [r4, #12]
   857b2:	609c      	str	r4, [r3, #8]
   857b4:	60c4      	str	r4, [r0, #12]
   857b6:	4640      	mov	r0, r8
   857b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   857bc:	f7ff bb18 	b.w	84df0 <__malloc_unlock>
   857c0:	6895      	ldr	r5, [r2, #8]
   857c2:	4f3b      	ldr	r7, [pc, #236]	; (858b0 <_free_r+0x1c0>)
   857c4:	4403      	add	r3, r0
   857c6:	42bd      	cmp	r5, r7
   857c8:	d040      	beq.n	8584c <_free_r+0x15c>
   857ca:	68d0      	ldr	r0, [r2, #12]
   857cc:	f043 0201 	orr.w	r2, r3, #1
   857d0:	60e8      	str	r0, [r5, #12]
   857d2:	6085      	str	r5, [r0, #8]
   857d4:	6062      	str	r2, [r4, #4]
   857d6:	50e3      	str	r3, [r4, r3]
   857d8:	e7b7      	b.n	8574a <_free_r+0x5a>
   857da:	07ff      	lsls	r7, r7, #31
   857dc:	4403      	add	r3, r0
   857de:	d407      	bmi.n	857f0 <_free_r+0x100>
   857e0:	f855 5c08 	ldr.w	r5, [r5, #-8]
   857e4:	1b64      	subs	r4, r4, r5
   857e6:	68e2      	ldr	r2, [r4, #12]
   857e8:	68a0      	ldr	r0, [r4, #8]
   857ea:	442b      	add	r3, r5
   857ec:	60c2      	str	r2, [r0, #12]
   857ee:	6090      	str	r0, [r2, #8]
   857f0:	4a30      	ldr	r2, [pc, #192]	; (858b4 <_free_r+0x1c4>)
   857f2:	f043 0001 	orr.w	r0, r3, #1
   857f6:	6812      	ldr	r2, [r2, #0]
   857f8:	6060      	str	r0, [r4, #4]
   857fa:	4293      	cmp	r3, r2
   857fc:	608c      	str	r4, [r1, #8]
   857fe:	d3b9      	bcc.n	85774 <_free_r+0x84>
   85800:	4b2d      	ldr	r3, [pc, #180]	; (858b8 <_free_r+0x1c8>)
   85802:	4640      	mov	r0, r8
   85804:	6819      	ldr	r1, [r3, #0]
   85806:	f7ff ff23 	bl	85650 <_malloc_trim_r>
   8580a:	e7b3      	b.n	85774 <_free_r+0x84>
   8580c:	4610      	mov	r0, r2
   8580e:	e7cd      	b.n	857ac <_free_r+0xbc>
   85810:	1811      	adds	r1, r2, r0
   85812:	6849      	ldr	r1, [r1, #4]
   85814:	07c9      	lsls	r1, r1, #31
   85816:	d444      	bmi.n	858a2 <_free_r+0x1b2>
   85818:	6891      	ldr	r1, [r2, #8]
   8581a:	4403      	add	r3, r0
   8581c:	68d2      	ldr	r2, [r2, #12]
   8581e:	f043 0001 	orr.w	r0, r3, #1
   85822:	60ca      	str	r2, [r1, #12]
   85824:	6091      	str	r1, [r2, #8]
   85826:	6060      	str	r0, [r4, #4]
   85828:	50e3      	str	r3, [r4, r3]
   8582a:	e7a3      	b.n	85774 <_free_r+0x84>
   8582c:	2a14      	cmp	r2, #20
   8582e:	d816      	bhi.n	8585e <_free_r+0x16e>
   85830:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   85834:	00ff      	lsls	r7, r7, #3
   85836:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8583a:	e7aa      	b.n	85792 <_free_r+0xa2>
   8583c:	2301      	movs	r3, #1
   8583e:	10aa      	asrs	r2, r5, #2
   85840:	684d      	ldr	r5, [r1, #4]
   85842:	4093      	lsls	r3, r2
   85844:	432b      	orrs	r3, r5
   85846:	604b      	str	r3, [r1, #4]
   85848:	4603      	mov	r3, r0
   8584a:	e7b0      	b.n	857ae <_free_r+0xbe>
   8584c:	f043 0201 	orr.w	r2, r3, #1
   85850:	614c      	str	r4, [r1, #20]
   85852:	610c      	str	r4, [r1, #16]
   85854:	60e5      	str	r5, [r4, #12]
   85856:	60a5      	str	r5, [r4, #8]
   85858:	6062      	str	r2, [r4, #4]
   8585a:	50e3      	str	r3, [r4, r3]
   8585c:	e78a      	b.n	85774 <_free_r+0x84>
   8585e:	2a54      	cmp	r2, #84	; 0x54
   85860:	d806      	bhi.n	85870 <_free_r+0x180>
   85862:	0b1a      	lsrs	r2, r3, #12
   85864:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   85868:	00ff      	lsls	r7, r7, #3
   8586a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8586e:	e790      	b.n	85792 <_free_r+0xa2>
   85870:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85874:	d806      	bhi.n	85884 <_free_r+0x194>
   85876:	0bda      	lsrs	r2, r3, #15
   85878:	f102 0778 	add.w	r7, r2, #120	; 0x78
   8587c:	00ff      	lsls	r7, r7, #3
   8587e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   85882:	e786      	b.n	85792 <_free_r+0xa2>
   85884:	f240 5054 	movw	r0, #1364	; 0x554
   85888:	4282      	cmp	r2, r0
   8588a:	d806      	bhi.n	8589a <_free_r+0x1aa>
   8588c:	0c9a      	lsrs	r2, r3, #18
   8588e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   85892:	00ff      	lsls	r7, r7, #3
   85894:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   85898:	e77b      	b.n	85792 <_free_r+0xa2>
   8589a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8589e:	257e      	movs	r5, #126	; 0x7e
   858a0:	e777      	b.n	85792 <_free_r+0xa2>
   858a2:	f043 0101 	orr.w	r1, r3, #1
   858a6:	6061      	str	r1, [r4, #4]
   858a8:	6013      	str	r3, [r2, #0]
   858aa:	e763      	b.n	85774 <_free_r+0x84>
   858ac:	20070b30 	.word	0x20070b30
   858b0:	20070b38 	.word	0x20070b38
   858b4:	20070f3c 	.word	0x20070f3c
   858b8:	20071010 	.word	0x20071010

000858bc <memmove>:
   858bc:	4288      	cmp	r0, r1
   858be:	b5f0      	push	{r4, r5, r6, r7, lr}
   858c0:	d90d      	bls.n	858de <memmove+0x22>
   858c2:	188b      	adds	r3, r1, r2
   858c4:	4298      	cmp	r0, r3
   858c6:	d20a      	bcs.n	858de <memmove+0x22>
   858c8:	1884      	adds	r4, r0, r2
   858ca:	2a00      	cmp	r2, #0
   858cc:	d051      	beq.n	85972 <memmove+0xb6>
   858ce:	4622      	mov	r2, r4
   858d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   858d4:	4299      	cmp	r1, r3
   858d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   858da:	d1f9      	bne.n	858d0 <memmove+0x14>
   858dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   858de:	2a0f      	cmp	r2, #15
   858e0:	d948      	bls.n	85974 <memmove+0xb8>
   858e2:	ea41 0300 	orr.w	r3, r1, r0
   858e6:	079b      	lsls	r3, r3, #30
   858e8:	d146      	bne.n	85978 <memmove+0xbc>
   858ea:	4615      	mov	r5, r2
   858ec:	f100 0410 	add.w	r4, r0, #16
   858f0:	f101 0310 	add.w	r3, r1, #16
   858f4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   858f8:	3d10      	subs	r5, #16
   858fa:	f844 6c10 	str.w	r6, [r4, #-16]
   858fe:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   85902:	2d0f      	cmp	r5, #15
   85904:	f844 6c0c 	str.w	r6, [r4, #-12]
   85908:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8590c:	f104 0410 	add.w	r4, r4, #16
   85910:	f844 6c18 	str.w	r6, [r4, #-24]
   85914:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85918:	f103 0310 	add.w	r3, r3, #16
   8591c:	f844 6c14 	str.w	r6, [r4, #-20]
   85920:	d8e8      	bhi.n	858f4 <memmove+0x38>
   85922:	f1a2 0310 	sub.w	r3, r2, #16
   85926:	f023 030f 	bic.w	r3, r3, #15
   8592a:	f002 0e0f 	and.w	lr, r2, #15
   8592e:	3310      	adds	r3, #16
   85930:	f1be 0f03 	cmp.w	lr, #3
   85934:	4419      	add	r1, r3
   85936:	4403      	add	r3, r0
   85938:	d921      	bls.n	8597e <memmove+0xc2>
   8593a:	460e      	mov	r6, r1
   8593c:	4674      	mov	r4, lr
   8593e:	1f1d      	subs	r5, r3, #4
   85940:	f856 7b04 	ldr.w	r7, [r6], #4
   85944:	3c04      	subs	r4, #4
   85946:	2c03      	cmp	r4, #3
   85948:	f845 7f04 	str.w	r7, [r5, #4]!
   8594c:	d8f8      	bhi.n	85940 <memmove+0x84>
   8594e:	f1ae 0404 	sub.w	r4, lr, #4
   85952:	f024 0403 	bic.w	r4, r4, #3
   85956:	3404      	adds	r4, #4
   85958:	4421      	add	r1, r4
   8595a:	4423      	add	r3, r4
   8595c:	f002 0203 	and.w	r2, r2, #3
   85960:	b162      	cbz	r2, 8597c <memmove+0xc0>
   85962:	3b01      	subs	r3, #1
   85964:	440a      	add	r2, r1
   85966:	f811 4b01 	ldrb.w	r4, [r1], #1
   8596a:	428a      	cmp	r2, r1
   8596c:	f803 4f01 	strb.w	r4, [r3, #1]!
   85970:	d1f9      	bne.n	85966 <memmove+0xaa>
   85972:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85974:	4603      	mov	r3, r0
   85976:	e7f3      	b.n	85960 <memmove+0xa4>
   85978:	4603      	mov	r3, r0
   8597a:	e7f2      	b.n	85962 <memmove+0xa6>
   8597c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8597e:	4672      	mov	r2, lr
   85980:	e7ee      	b.n	85960 <memmove+0xa4>
   85982:	bf00      	nop

00085984 <_realloc_r>:
   85984:	2900      	cmp	r1, #0
   85986:	f000 8094 	beq.w	85ab2 <_realloc_r+0x12e>
   8598a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8598e:	460c      	mov	r4, r1
   85990:	4615      	mov	r5, r2
   85992:	b083      	sub	sp, #12
   85994:	4680      	mov	r8, r0
   85996:	f105 060b 	add.w	r6, r5, #11
   8599a:	f7ff fa23 	bl	84de4 <__malloc_lock>
   8599e:	f854 ec04 	ldr.w	lr, [r4, #-4]
   859a2:	2e16      	cmp	r6, #22
   859a4:	f02e 0703 	bic.w	r7, lr, #3
   859a8:	f1a4 0908 	sub.w	r9, r4, #8
   859ac:	d83c      	bhi.n	85a28 <_realloc_r+0xa4>
   859ae:	2210      	movs	r2, #16
   859b0:	4616      	mov	r6, r2
   859b2:	42b5      	cmp	r5, r6
   859b4:	d83d      	bhi.n	85a32 <_realloc_r+0xae>
   859b6:	4297      	cmp	r7, r2
   859b8:	da43      	bge.n	85a42 <_realloc_r+0xbe>
   859ba:	4bc6      	ldr	r3, [pc, #792]	; (85cd4 <_realloc_r+0x350>)
   859bc:	eb09 0007 	add.w	r0, r9, r7
   859c0:	6899      	ldr	r1, [r3, #8]
   859c2:	4288      	cmp	r0, r1
   859c4:	f000 80c3 	beq.w	85b4e <_realloc_r+0x1ca>
   859c8:	6843      	ldr	r3, [r0, #4]
   859ca:	f023 0101 	bic.w	r1, r3, #1
   859ce:	4401      	add	r1, r0
   859d0:	6849      	ldr	r1, [r1, #4]
   859d2:	07c9      	lsls	r1, r1, #31
   859d4:	d54d      	bpl.n	85a72 <_realloc_r+0xee>
   859d6:	f01e 0f01 	tst.w	lr, #1
   859da:	f000 809b 	beq.w	85b14 <_realloc_r+0x190>
   859de:	4629      	mov	r1, r5
   859e0:	4640      	mov	r0, r8
   859e2:	f7fe fe8b 	bl	846fc <_malloc_r>
   859e6:	4605      	mov	r5, r0
   859e8:	2800      	cmp	r0, #0
   859ea:	d03b      	beq.n	85a64 <_realloc_r+0xe0>
   859ec:	f854 3c04 	ldr.w	r3, [r4, #-4]
   859f0:	f1a0 0208 	sub.w	r2, r0, #8
   859f4:	f023 0301 	bic.w	r3, r3, #1
   859f8:	444b      	add	r3, r9
   859fa:	429a      	cmp	r2, r3
   859fc:	f000 812b 	beq.w	85c56 <_realloc_r+0x2d2>
   85a00:	1f3a      	subs	r2, r7, #4
   85a02:	2a24      	cmp	r2, #36	; 0x24
   85a04:	f200 8118 	bhi.w	85c38 <_realloc_r+0x2b4>
   85a08:	2a13      	cmp	r2, #19
   85a0a:	f200 80eb 	bhi.w	85be4 <_realloc_r+0x260>
   85a0e:	4603      	mov	r3, r0
   85a10:	4622      	mov	r2, r4
   85a12:	6811      	ldr	r1, [r2, #0]
   85a14:	6019      	str	r1, [r3, #0]
   85a16:	6851      	ldr	r1, [r2, #4]
   85a18:	6059      	str	r1, [r3, #4]
   85a1a:	6892      	ldr	r2, [r2, #8]
   85a1c:	609a      	str	r2, [r3, #8]
   85a1e:	4621      	mov	r1, r4
   85a20:	4640      	mov	r0, r8
   85a22:	f7ff fe65 	bl	856f0 <_free_r>
   85a26:	e01d      	b.n	85a64 <_realloc_r+0xe0>
   85a28:	f026 0607 	bic.w	r6, r6, #7
   85a2c:	2e00      	cmp	r6, #0
   85a2e:	4632      	mov	r2, r6
   85a30:	dabf      	bge.n	859b2 <_realloc_r+0x2e>
   85a32:	2500      	movs	r5, #0
   85a34:	230c      	movs	r3, #12
   85a36:	4628      	mov	r0, r5
   85a38:	f8c8 3000 	str.w	r3, [r8]
   85a3c:	b003      	add	sp, #12
   85a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85a42:	4625      	mov	r5, r4
   85a44:	1bbb      	subs	r3, r7, r6
   85a46:	2b0f      	cmp	r3, #15
   85a48:	f8d9 2004 	ldr.w	r2, [r9, #4]
   85a4c:	d81d      	bhi.n	85a8a <_realloc_r+0x106>
   85a4e:	f002 0201 	and.w	r2, r2, #1
   85a52:	433a      	orrs	r2, r7
   85a54:	eb09 0107 	add.w	r1, r9, r7
   85a58:	f8c9 2004 	str.w	r2, [r9, #4]
   85a5c:	684b      	ldr	r3, [r1, #4]
   85a5e:	f043 0301 	orr.w	r3, r3, #1
   85a62:	604b      	str	r3, [r1, #4]
   85a64:	4640      	mov	r0, r8
   85a66:	f7ff f9c3 	bl	84df0 <__malloc_unlock>
   85a6a:	4628      	mov	r0, r5
   85a6c:	b003      	add	sp, #12
   85a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85a72:	f023 0303 	bic.w	r3, r3, #3
   85a76:	18f9      	adds	r1, r7, r3
   85a78:	4291      	cmp	r1, r2
   85a7a:	db1d      	blt.n	85ab8 <_realloc_r+0x134>
   85a7c:	68c3      	ldr	r3, [r0, #12]
   85a7e:	6882      	ldr	r2, [r0, #8]
   85a80:	4625      	mov	r5, r4
   85a82:	60d3      	str	r3, [r2, #12]
   85a84:	460f      	mov	r7, r1
   85a86:	609a      	str	r2, [r3, #8]
   85a88:	e7dc      	b.n	85a44 <_realloc_r+0xc0>
   85a8a:	f002 0201 	and.w	r2, r2, #1
   85a8e:	eb09 0106 	add.w	r1, r9, r6
   85a92:	f043 0301 	orr.w	r3, r3, #1
   85a96:	4332      	orrs	r2, r6
   85a98:	f8c9 2004 	str.w	r2, [r9, #4]
   85a9c:	444f      	add	r7, r9
   85a9e:	604b      	str	r3, [r1, #4]
   85aa0:	687b      	ldr	r3, [r7, #4]
   85aa2:	3108      	adds	r1, #8
   85aa4:	f043 0301 	orr.w	r3, r3, #1
   85aa8:	607b      	str	r3, [r7, #4]
   85aaa:	4640      	mov	r0, r8
   85aac:	f7ff fe20 	bl	856f0 <_free_r>
   85ab0:	e7d8      	b.n	85a64 <_realloc_r+0xe0>
   85ab2:	4611      	mov	r1, r2
   85ab4:	f7fe be22 	b.w	846fc <_malloc_r>
   85ab8:	f01e 0f01 	tst.w	lr, #1
   85abc:	d18f      	bne.n	859de <_realloc_r+0x5a>
   85abe:	f854 1c08 	ldr.w	r1, [r4, #-8]
   85ac2:	eba9 0a01 	sub.w	sl, r9, r1
   85ac6:	f8da 1004 	ldr.w	r1, [sl, #4]
   85aca:	f021 0103 	bic.w	r1, r1, #3
   85ace:	440b      	add	r3, r1
   85ad0:	443b      	add	r3, r7
   85ad2:	4293      	cmp	r3, r2
   85ad4:	db26      	blt.n	85b24 <_realloc_r+0x1a0>
   85ad6:	4655      	mov	r5, sl
   85ad8:	68c1      	ldr	r1, [r0, #12]
   85ada:	6880      	ldr	r0, [r0, #8]
   85adc:	1f3a      	subs	r2, r7, #4
   85ade:	60c1      	str	r1, [r0, #12]
   85ae0:	6088      	str	r0, [r1, #8]
   85ae2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85ae6:	f8da 100c 	ldr.w	r1, [sl, #12]
   85aea:	2a24      	cmp	r2, #36	; 0x24
   85aec:	60c1      	str	r1, [r0, #12]
   85aee:	6088      	str	r0, [r1, #8]
   85af0:	d826      	bhi.n	85b40 <_realloc_r+0x1bc>
   85af2:	2a13      	cmp	r2, #19
   85af4:	f240 8081 	bls.w	85bfa <_realloc_r+0x276>
   85af8:	6821      	ldr	r1, [r4, #0]
   85afa:	2a1b      	cmp	r2, #27
   85afc:	f8ca 1008 	str.w	r1, [sl, #8]
   85b00:	6861      	ldr	r1, [r4, #4]
   85b02:	f8ca 100c 	str.w	r1, [sl, #12]
   85b06:	f200 80ad 	bhi.w	85c64 <_realloc_r+0x2e0>
   85b0a:	f104 0008 	add.w	r0, r4, #8
   85b0e:	f10a 0210 	add.w	r2, sl, #16
   85b12:	e074      	b.n	85bfe <_realloc_r+0x27a>
   85b14:	f854 3c08 	ldr.w	r3, [r4, #-8]
   85b18:	eba9 0a03 	sub.w	sl, r9, r3
   85b1c:	f8da 1004 	ldr.w	r1, [sl, #4]
   85b20:	f021 0103 	bic.w	r1, r1, #3
   85b24:	187b      	adds	r3, r7, r1
   85b26:	4293      	cmp	r3, r2
   85b28:	f6ff af59 	blt.w	859de <_realloc_r+0x5a>
   85b2c:	4655      	mov	r5, sl
   85b2e:	f8da 100c 	ldr.w	r1, [sl, #12]
   85b32:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85b36:	1f3a      	subs	r2, r7, #4
   85b38:	2a24      	cmp	r2, #36	; 0x24
   85b3a:	60c1      	str	r1, [r0, #12]
   85b3c:	6088      	str	r0, [r1, #8]
   85b3e:	d9d8      	bls.n	85af2 <_realloc_r+0x16e>
   85b40:	4621      	mov	r1, r4
   85b42:	4628      	mov	r0, r5
   85b44:	461f      	mov	r7, r3
   85b46:	46d1      	mov	r9, sl
   85b48:	f7ff feb8 	bl	858bc <memmove>
   85b4c:	e77a      	b.n	85a44 <_realloc_r+0xc0>
   85b4e:	6841      	ldr	r1, [r0, #4]
   85b50:	f106 0010 	add.w	r0, r6, #16
   85b54:	f021 0b03 	bic.w	fp, r1, #3
   85b58:	44bb      	add	fp, r7
   85b5a:	4583      	cmp	fp, r0
   85b5c:	da58      	bge.n	85c10 <_realloc_r+0x28c>
   85b5e:	f01e 0f01 	tst.w	lr, #1
   85b62:	f47f af3c 	bne.w	859de <_realloc_r+0x5a>
   85b66:	f854 1c08 	ldr.w	r1, [r4, #-8]
   85b6a:	eba9 0a01 	sub.w	sl, r9, r1
   85b6e:	f8da 1004 	ldr.w	r1, [sl, #4]
   85b72:	f021 0103 	bic.w	r1, r1, #3
   85b76:	448b      	add	fp, r1
   85b78:	4558      	cmp	r0, fp
   85b7a:	dcd3      	bgt.n	85b24 <_realloc_r+0x1a0>
   85b7c:	4655      	mov	r5, sl
   85b7e:	f8da 100c 	ldr.w	r1, [sl, #12]
   85b82:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85b86:	1f3a      	subs	r2, r7, #4
   85b88:	2a24      	cmp	r2, #36	; 0x24
   85b8a:	60c1      	str	r1, [r0, #12]
   85b8c:	6088      	str	r0, [r1, #8]
   85b8e:	f200 808d 	bhi.w	85cac <_realloc_r+0x328>
   85b92:	2a13      	cmp	r2, #19
   85b94:	f240 8087 	bls.w	85ca6 <_realloc_r+0x322>
   85b98:	6821      	ldr	r1, [r4, #0]
   85b9a:	2a1b      	cmp	r2, #27
   85b9c:	f8ca 1008 	str.w	r1, [sl, #8]
   85ba0:	6861      	ldr	r1, [r4, #4]
   85ba2:	f8ca 100c 	str.w	r1, [sl, #12]
   85ba6:	f200 8088 	bhi.w	85cba <_realloc_r+0x336>
   85baa:	f104 0108 	add.w	r1, r4, #8
   85bae:	f10a 0210 	add.w	r2, sl, #16
   85bb2:	6808      	ldr	r0, [r1, #0]
   85bb4:	6010      	str	r0, [r2, #0]
   85bb6:	6848      	ldr	r0, [r1, #4]
   85bb8:	6050      	str	r0, [r2, #4]
   85bba:	6889      	ldr	r1, [r1, #8]
   85bbc:	6091      	str	r1, [r2, #8]
   85bbe:	ebab 0206 	sub.w	r2, fp, r6
   85bc2:	eb0a 0106 	add.w	r1, sl, r6
   85bc6:	f042 0201 	orr.w	r2, r2, #1
   85bca:	6099      	str	r1, [r3, #8]
   85bcc:	604a      	str	r2, [r1, #4]
   85bce:	f8da 3004 	ldr.w	r3, [sl, #4]
   85bd2:	4640      	mov	r0, r8
   85bd4:	f003 0301 	and.w	r3, r3, #1
   85bd8:	431e      	orrs	r6, r3
   85bda:	f8ca 6004 	str.w	r6, [sl, #4]
   85bde:	f7ff f907 	bl	84df0 <__malloc_unlock>
   85be2:	e742      	b.n	85a6a <_realloc_r+0xe6>
   85be4:	6823      	ldr	r3, [r4, #0]
   85be6:	2a1b      	cmp	r2, #27
   85be8:	6003      	str	r3, [r0, #0]
   85bea:	6863      	ldr	r3, [r4, #4]
   85bec:	6043      	str	r3, [r0, #4]
   85bee:	d827      	bhi.n	85c40 <_realloc_r+0x2bc>
   85bf0:	f100 0308 	add.w	r3, r0, #8
   85bf4:	f104 0208 	add.w	r2, r4, #8
   85bf8:	e70b      	b.n	85a12 <_realloc_r+0x8e>
   85bfa:	4620      	mov	r0, r4
   85bfc:	462a      	mov	r2, r5
   85bfe:	6801      	ldr	r1, [r0, #0]
   85c00:	461f      	mov	r7, r3
   85c02:	6011      	str	r1, [r2, #0]
   85c04:	6841      	ldr	r1, [r0, #4]
   85c06:	46d1      	mov	r9, sl
   85c08:	6051      	str	r1, [r2, #4]
   85c0a:	6883      	ldr	r3, [r0, #8]
   85c0c:	6093      	str	r3, [r2, #8]
   85c0e:	e719      	b.n	85a44 <_realloc_r+0xc0>
   85c10:	ebab 0b06 	sub.w	fp, fp, r6
   85c14:	eb09 0106 	add.w	r1, r9, r6
   85c18:	f04b 0201 	orr.w	r2, fp, #1
   85c1c:	6099      	str	r1, [r3, #8]
   85c1e:	604a      	str	r2, [r1, #4]
   85c20:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85c24:	4640      	mov	r0, r8
   85c26:	f003 0301 	and.w	r3, r3, #1
   85c2a:	431e      	orrs	r6, r3
   85c2c:	f844 6c04 	str.w	r6, [r4, #-4]
   85c30:	f7ff f8de 	bl	84df0 <__malloc_unlock>
   85c34:	4625      	mov	r5, r4
   85c36:	e718      	b.n	85a6a <_realloc_r+0xe6>
   85c38:	4621      	mov	r1, r4
   85c3a:	f7ff fe3f 	bl	858bc <memmove>
   85c3e:	e6ee      	b.n	85a1e <_realloc_r+0x9a>
   85c40:	68a3      	ldr	r3, [r4, #8]
   85c42:	2a24      	cmp	r2, #36	; 0x24
   85c44:	6083      	str	r3, [r0, #8]
   85c46:	68e3      	ldr	r3, [r4, #12]
   85c48:	60c3      	str	r3, [r0, #12]
   85c4a:	d018      	beq.n	85c7e <_realloc_r+0x2fa>
   85c4c:	f100 0310 	add.w	r3, r0, #16
   85c50:	f104 0210 	add.w	r2, r4, #16
   85c54:	e6dd      	b.n	85a12 <_realloc_r+0x8e>
   85c56:	f850 3c04 	ldr.w	r3, [r0, #-4]
   85c5a:	4625      	mov	r5, r4
   85c5c:	f023 0303 	bic.w	r3, r3, #3
   85c60:	441f      	add	r7, r3
   85c62:	e6ef      	b.n	85a44 <_realloc_r+0xc0>
   85c64:	68a1      	ldr	r1, [r4, #8]
   85c66:	2a24      	cmp	r2, #36	; 0x24
   85c68:	f8ca 1010 	str.w	r1, [sl, #16]
   85c6c:	68e1      	ldr	r1, [r4, #12]
   85c6e:	f8ca 1014 	str.w	r1, [sl, #20]
   85c72:	d00d      	beq.n	85c90 <_realloc_r+0x30c>
   85c74:	f104 0010 	add.w	r0, r4, #16
   85c78:	f10a 0218 	add.w	r2, sl, #24
   85c7c:	e7bf      	b.n	85bfe <_realloc_r+0x27a>
   85c7e:	6922      	ldr	r2, [r4, #16]
   85c80:	f100 0318 	add.w	r3, r0, #24
   85c84:	6102      	str	r2, [r0, #16]
   85c86:	6961      	ldr	r1, [r4, #20]
   85c88:	f104 0218 	add.w	r2, r4, #24
   85c8c:	6141      	str	r1, [r0, #20]
   85c8e:	e6c0      	b.n	85a12 <_realloc_r+0x8e>
   85c90:	6922      	ldr	r2, [r4, #16]
   85c92:	f104 0018 	add.w	r0, r4, #24
   85c96:	f8ca 2018 	str.w	r2, [sl, #24]
   85c9a:	6961      	ldr	r1, [r4, #20]
   85c9c:	f10a 0220 	add.w	r2, sl, #32
   85ca0:	f8ca 101c 	str.w	r1, [sl, #28]
   85ca4:	e7ab      	b.n	85bfe <_realloc_r+0x27a>
   85ca6:	4621      	mov	r1, r4
   85ca8:	462a      	mov	r2, r5
   85caa:	e782      	b.n	85bb2 <_realloc_r+0x22e>
   85cac:	4621      	mov	r1, r4
   85cae:	4628      	mov	r0, r5
   85cb0:	9301      	str	r3, [sp, #4]
   85cb2:	f7ff fe03 	bl	858bc <memmove>
   85cb6:	9b01      	ldr	r3, [sp, #4]
   85cb8:	e781      	b.n	85bbe <_realloc_r+0x23a>
   85cba:	68a1      	ldr	r1, [r4, #8]
   85cbc:	2a24      	cmp	r2, #36	; 0x24
   85cbe:	f8ca 1010 	str.w	r1, [sl, #16]
   85cc2:	68e1      	ldr	r1, [r4, #12]
   85cc4:	f8ca 1014 	str.w	r1, [sl, #20]
   85cc8:	d006      	beq.n	85cd8 <_realloc_r+0x354>
   85cca:	f104 0110 	add.w	r1, r4, #16
   85cce:	f10a 0218 	add.w	r2, sl, #24
   85cd2:	e76e      	b.n	85bb2 <_realloc_r+0x22e>
   85cd4:	20070b30 	.word	0x20070b30
   85cd8:	6922      	ldr	r2, [r4, #16]
   85cda:	f104 0118 	add.w	r1, r4, #24
   85cde:	f8ca 2018 	str.w	r2, [sl, #24]
   85ce2:	6960      	ldr	r0, [r4, #20]
   85ce4:	f10a 0220 	add.w	r2, sl, #32
   85ce8:	f8ca 001c 	str.w	r0, [sl, #28]
   85cec:	e761      	b.n	85bb2 <_realloc_r+0x22e>
   85cee:	bf00      	nop

00085cf0 <__aeabi_drsub>:
   85cf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   85cf4:	e002      	b.n	85cfc <__adddf3>
   85cf6:	bf00      	nop

00085cf8 <__aeabi_dsub>:
   85cf8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00085cfc <__adddf3>:
   85cfc:	b530      	push	{r4, r5, lr}
   85cfe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   85d02:	ea4f 0543 	mov.w	r5, r3, lsl #1
   85d06:	ea94 0f05 	teq	r4, r5
   85d0a:	bf08      	it	eq
   85d0c:	ea90 0f02 	teqeq	r0, r2
   85d10:	bf1f      	itttt	ne
   85d12:	ea54 0c00 	orrsne.w	ip, r4, r0
   85d16:	ea55 0c02 	orrsne.w	ip, r5, r2
   85d1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   85d1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   85d22:	f000 80e2 	beq.w	85eea <__adddf3+0x1ee>
   85d26:	ea4f 5454 	mov.w	r4, r4, lsr #21
   85d2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   85d2e:	bfb8      	it	lt
   85d30:	426d      	neglt	r5, r5
   85d32:	dd0c      	ble.n	85d4e <__adddf3+0x52>
   85d34:	442c      	add	r4, r5
   85d36:	ea80 0202 	eor.w	r2, r0, r2
   85d3a:	ea81 0303 	eor.w	r3, r1, r3
   85d3e:	ea82 0000 	eor.w	r0, r2, r0
   85d42:	ea83 0101 	eor.w	r1, r3, r1
   85d46:	ea80 0202 	eor.w	r2, r0, r2
   85d4a:	ea81 0303 	eor.w	r3, r1, r3
   85d4e:	2d36      	cmp	r5, #54	; 0x36
   85d50:	bf88      	it	hi
   85d52:	bd30      	pophi	{r4, r5, pc}
   85d54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   85d58:	ea4f 3101 	mov.w	r1, r1, lsl #12
   85d5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   85d60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   85d64:	d002      	beq.n	85d6c <__adddf3+0x70>
   85d66:	4240      	negs	r0, r0
   85d68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85d6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   85d70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   85d74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   85d78:	d002      	beq.n	85d80 <__adddf3+0x84>
   85d7a:	4252      	negs	r2, r2
   85d7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85d80:	ea94 0f05 	teq	r4, r5
   85d84:	f000 80a7 	beq.w	85ed6 <__adddf3+0x1da>
   85d88:	f1a4 0401 	sub.w	r4, r4, #1
   85d8c:	f1d5 0e20 	rsbs	lr, r5, #32
   85d90:	db0d      	blt.n	85dae <__adddf3+0xb2>
   85d92:	fa02 fc0e 	lsl.w	ip, r2, lr
   85d96:	fa22 f205 	lsr.w	r2, r2, r5
   85d9a:	1880      	adds	r0, r0, r2
   85d9c:	f141 0100 	adc.w	r1, r1, #0
   85da0:	fa03 f20e 	lsl.w	r2, r3, lr
   85da4:	1880      	adds	r0, r0, r2
   85da6:	fa43 f305 	asr.w	r3, r3, r5
   85daa:	4159      	adcs	r1, r3
   85dac:	e00e      	b.n	85dcc <__adddf3+0xd0>
   85dae:	f1a5 0520 	sub.w	r5, r5, #32
   85db2:	f10e 0e20 	add.w	lr, lr, #32
   85db6:	2a01      	cmp	r2, #1
   85db8:	fa03 fc0e 	lsl.w	ip, r3, lr
   85dbc:	bf28      	it	cs
   85dbe:	f04c 0c02 	orrcs.w	ip, ip, #2
   85dc2:	fa43 f305 	asr.w	r3, r3, r5
   85dc6:	18c0      	adds	r0, r0, r3
   85dc8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   85dcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85dd0:	d507      	bpl.n	85de2 <__adddf3+0xe6>
   85dd2:	f04f 0e00 	mov.w	lr, #0
   85dd6:	f1dc 0c00 	rsbs	ip, ip, #0
   85dda:	eb7e 0000 	sbcs.w	r0, lr, r0
   85dde:	eb6e 0101 	sbc.w	r1, lr, r1
   85de2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   85de6:	d31b      	bcc.n	85e20 <__adddf3+0x124>
   85de8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   85dec:	d30c      	bcc.n	85e08 <__adddf3+0x10c>
   85dee:	0849      	lsrs	r1, r1, #1
   85df0:	ea5f 0030 	movs.w	r0, r0, rrx
   85df4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   85df8:	f104 0401 	add.w	r4, r4, #1
   85dfc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   85e00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   85e04:	f080 809a 	bcs.w	85f3c <__adddf3+0x240>
   85e08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   85e0c:	bf08      	it	eq
   85e0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   85e12:	f150 0000 	adcs.w	r0, r0, #0
   85e16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   85e1a:	ea41 0105 	orr.w	r1, r1, r5
   85e1e:	bd30      	pop	{r4, r5, pc}
   85e20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   85e24:	4140      	adcs	r0, r0
   85e26:	eb41 0101 	adc.w	r1, r1, r1
   85e2a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85e2e:	f1a4 0401 	sub.w	r4, r4, #1
   85e32:	d1e9      	bne.n	85e08 <__adddf3+0x10c>
   85e34:	f091 0f00 	teq	r1, #0
   85e38:	bf04      	itt	eq
   85e3a:	4601      	moveq	r1, r0
   85e3c:	2000      	moveq	r0, #0
   85e3e:	fab1 f381 	clz	r3, r1
   85e42:	bf08      	it	eq
   85e44:	3320      	addeq	r3, #32
   85e46:	f1a3 030b 	sub.w	r3, r3, #11
   85e4a:	f1b3 0220 	subs.w	r2, r3, #32
   85e4e:	da0c      	bge.n	85e6a <__adddf3+0x16e>
   85e50:	320c      	adds	r2, #12
   85e52:	dd08      	ble.n	85e66 <__adddf3+0x16a>
   85e54:	f102 0c14 	add.w	ip, r2, #20
   85e58:	f1c2 020c 	rsb	r2, r2, #12
   85e5c:	fa01 f00c 	lsl.w	r0, r1, ip
   85e60:	fa21 f102 	lsr.w	r1, r1, r2
   85e64:	e00c      	b.n	85e80 <__adddf3+0x184>
   85e66:	f102 0214 	add.w	r2, r2, #20
   85e6a:	bfd8      	it	le
   85e6c:	f1c2 0c20 	rsble	ip, r2, #32
   85e70:	fa01 f102 	lsl.w	r1, r1, r2
   85e74:	fa20 fc0c 	lsr.w	ip, r0, ip
   85e78:	bfdc      	itt	le
   85e7a:	ea41 010c 	orrle.w	r1, r1, ip
   85e7e:	4090      	lslle	r0, r2
   85e80:	1ae4      	subs	r4, r4, r3
   85e82:	bfa2      	ittt	ge
   85e84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   85e88:	4329      	orrge	r1, r5
   85e8a:	bd30      	popge	{r4, r5, pc}
   85e8c:	ea6f 0404 	mvn.w	r4, r4
   85e90:	3c1f      	subs	r4, #31
   85e92:	da1c      	bge.n	85ece <__adddf3+0x1d2>
   85e94:	340c      	adds	r4, #12
   85e96:	dc0e      	bgt.n	85eb6 <__adddf3+0x1ba>
   85e98:	f104 0414 	add.w	r4, r4, #20
   85e9c:	f1c4 0220 	rsb	r2, r4, #32
   85ea0:	fa20 f004 	lsr.w	r0, r0, r4
   85ea4:	fa01 f302 	lsl.w	r3, r1, r2
   85ea8:	ea40 0003 	orr.w	r0, r0, r3
   85eac:	fa21 f304 	lsr.w	r3, r1, r4
   85eb0:	ea45 0103 	orr.w	r1, r5, r3
   85eb4:	bd30      	pop	{r4, r5, pc}
   85eb6:	f1c4 040c 	rsb	r4, r4, #12
   85eba:	f1c4 0220 	rsb	r2, r4, #32
   85ebe:	fa20 f002 	lsr.w	r0, r0, r2
   85ec2:	fa01 f304 	lsl.w	r3, r1, r4
   85ec6:	ea40 0003 	orr.w	r0, r0, r3
   85eca:	4629      	mov	r1, r5
   85ecc:	bd30      	pop	{r4, r5, pc}
   85ece:	fa21 f004 	lsr.w	r0, r1, r4
   85ed2:	4629      	mov	r1, r5
   85ed4:	bd30      	pop	{r4, r5, pc}
   85ed6:	f094 0f00 	teq	r4, #0
   85eda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   85ede:	bf06      	itte	eq
   85ee0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   85ee4:	3401      	addeq	r4, #1
   85ee6:	3d01      	subne	r5, #1
   85ee8:	e74e      	b.n	85d88 <__adddf3+0x8c>
   85eea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   85eee:	bf18      	it	ne
   85ef0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   85ef4:	d029      	beq.n	85f4a <__adddf3+0x24e>
   85ef6:	ea94 0f05 	teq	r4, r5
   85efa:	bf08      	it	eq
   85efc:	ea90 0f02 	teqeq	r0, r2
   85f00:	d005      	beq.n	85f0e <__adddf3+0x212>
   85f02:	ea54 0c00 	orrs.w	ip, r4, r0
   85f06:	bf04      	itt	eq
   85f08:	4619      	moveq	r1, r3
   85f0a:	4610      	moveq	r0, r2
   85f0c:	bd30      	pop	{r4, r5, pc}
   85f0e:	ea91 0f03 	teq	r1, r3
   85f12:	bf1e      	ittt	ne
   85f14:	2100      	movne	r1, #0
   85f16:	2000      	movne	r0, #0
   85f18:	bd30      	popne	{r4, r5, pc}
   85f1a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   85f1e:	d105      	bne.n	85f2c <__adddf3+0x230>
   85f20:	0040      	lsls	r0, r0, #1
   85f22:	4149      	adcs	r1, r1
   85f24:	bf28      	it	cs
   85f26:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   85f2a:	bd30      	pop	{r4, r5, pc}
   85f2c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   85f30:	bf3c      	itt	cc
   85f32:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   85f36:	bd30      	popcc	{r4, r5, pc}
   85f38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85f3c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   85f40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   85f44:	f04f 0000 	mov.w	r0, #0
   85f48:	bd30      	pop	{r4, r5, pc}
   85f4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   85f4e:	bf1a      	itte	ne
   85f50:	4619      	movne	r1, r3
   85f52:	4610      	movne	r0, r2
   85f54:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   85f58:	bf1c      	itt	ne
   85f5a:	460b      	movne	r3, r1
   85f5c:	4602      	movne	r2, r0
   85f5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   85f62:	bf06      	itte	eq
   85f64:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   85f68:	ea91 0f03 	teqeq	r1, r3
   85f6c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   85f70:	bd30      	pop	{r4, r5, pc}
   85f72:	bf00      	nop

00085f74 <__aeabi_ui2d>:
   85f74:	f090 0f00 	teq	r0, #0
   85f78:	bf04      	itt	eq
   85f7a:	2100      	moveq	r1, #0
   85f7c:	4770      	bxeq	lr
   85f7e:	b530      	push	{r4, r5, lr}
   85f80:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85f84:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85f88:	f04f 0500 	mov.w	r5, #0
   85f8c:	f04f 0100 	mov.w	r1, #0
   85f90:	e750      	b.n	85e34 <__adddf3+0x138>
   85f92:	bf00      	nop

00085f94 <__aeabi_i2d>:
   85f94:	f090 0f00 	teq	r0, #0
   85f98:	bf04      	itt	eq
   85f9a:	2100      	moveq	r1, #0
   85f9c:	4770      	bxeq	lr
   85f9e:	b530      	push	{r4, r5, lr}
   85fa0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85fa4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85fa8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   85fac:	bf48      	it	mi
   85fae:	4240      	negmi	r0, r0
   85fb0:	f04f 0100 	mov.w	r1, #0
   85fb4:	e73e      	b.n	85e34 <__adddf3+0x138>
   85fb6:	bf00      	nop

00085fb8 <__aeabi_f2d>:
   85fb8:	0042      	lsls	r2, r0, #1
   85fba:	ea4f 01e2 	mov.w	r1, r2, asr #3
   85fbe:	ea4f 0131 	mov.w	r1, r1, rrx
   85fc2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   85fc6:	bf1f      	itttt	ne
   85fc8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   85fcc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   85fd0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   85fd4:	4770      	bxne	lr
   85fd6:	f092 0f00 	teq	r2, #0
   85fda:	bf14      	ite	ne
   85fdc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   85fe0:	4770      	bxeq	lr
   85fe2:	b530      	push	{r4, r5, lr}
   85fe4:	f44f 7460 	mov.w	r4, #896	; 0x380
   85fe8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85fec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   85ff0:	e720      	b.n	85e34 <__adddf3+0x138>
   85ff2:	bf00      	nop

00085ff4 <__aeabi_ul2d>:
   85ff4:	ea50 0201 	orrs.w	r2, r0, r1
   85ff8:	bf08      	it	eq
   85ffa:	4770      	bxeq	lr
   85ffc:	b530      	push	{r4, r5, lr}
   85ffe:	f04f 0500 	mov.w	r5, #0
   86002:	e00a      	b.n	8601a <__aeabi_l2d+0x16>

00086004 <__aeabi_l2d>:
   86004:	ea50 0201 	orrs.w	r2, r0, r1
   86008:	bf08      	it	eq
   8600a:	4770      	bxeq	lr
   8600c:	b530      	push	{r4, r5, lr}
   8600e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   86012:	d502      	bpl.n	8601a <__aeabi_l2d+0x16>
   86014:	4240      	negs	r0, r0
   86016:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8601a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8601e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   86022:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   86026:	f43f aedc 	beq.w	85de2 <__adddf3+0xe6>
   8602a:	f04f 0203 	mov.w	r2, #3
   8602e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   86032:	bf18      	it	ne
   86034:	3203      	addne	r2, #3
   86036:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8603a:	bf18      	it	ne
   8603c:	3203      	addne	r2, #3
   8603e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   86042:	f1c2 0320 	rsb	r3, r2, #32
   86046:	fa00 fc03 	lsl.w	ip, r0, r3
   8604a:	fa20 f002 	lsr.w	r0, r0, r2
   8604e:	fa01 fe03 	lsl.w	lr, r1, r3
   86052:	ea40 000e 	orr.w	r0, r0, lr
   86056:	fa21 f102 	lsr.w	r1, r1, r2
   8605a:	4414      	add	r4, r2
   8605c:	e6c1      	b.n	85de2 <__adddf3+0xe6>
   8605e:	bf00      	nop

00086060 <__aeabi_dmul>:
   86060:	b570      	push	{r4, r5, r6, lr}
   86062:	f04f 0cff 	mov.w	ip, #255	; 0xff
   86066:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8606a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8606e:	bf1d      	ittte	ne
   86070:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   86074:	ea94 0f0c 	teqne	r4, ip
   86078:	ea95 0f0c 	teqne	r5, ip
   8607c:	f000 f8de 	bleq	8623c <__aeabi_dmul+0x1dc>
   86080:	442c      	add	r4, r5
   86082:	ea81 0603 	eor.w	r6, r1, r3
   86086:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8608a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8608e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   86092:	bf18      	it	ne
   86094:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   86098:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8609c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   860a0:	d038      	beq.n	86114 <__aeabi_dmul+0xb4>
   860a2:	fba0 ce02 	umull	ip, lr, r0, r2
   860a6:	f04f 0500 	mov.w	r5, #0
   860aa:	fbe1 e502 	umlal	lr, r5, r1, r2
   860ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   860b2:	fbe0 e503 	umlal	lr, r5, r0, r3
   860b6:	f04f 0600 	mov.w	r6, #0
   860ba:	fbe1 5603 	umlal	r5, r6, r1, r3
   860be:	f09c 0f00 	teq	ip, #0
   860c2:	bf18      	it	ne
   860c4:	f04e 0e01 	orrne.w	lr, lr, #1
   860c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   860cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   860d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   860d4:	d204      	bcs.n	860e0 <__aeabi_dmul+0x80>
   860d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   860da:	416d      	adcs	r5, r5
   860dc:	eb46 0606 	adc.w	r6, r6, r6
   860e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   860e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   860e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   860ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   860f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   860f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   860f8:	bf88      	it	hi
   860fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   860fe:	d81e      	bhi.n	8613e <__aeabi_dmul+0xde>
   86100:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   86104:	bf08      	it	eq
   86106:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8610a:	f150 0000 	adcs.w	r0, r0, #0
   8610e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   86112:	bd70      	pop	{r4, r5, r6, pc}
   86114:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   86118:	ea46 0101 	orr.w	r1, r6, r1
   8611c:	ea40 0002 	orr.w	r0, r0, r2
   86120:	ea81 0103 	eor.w	r1, r1, r3
   86124:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   86128:	bfc2      	ittt	gt
   8612a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8612e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   86132:	bd70      	popgt	{r4, r5, r6, pc}
   86134:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   86138:	f04f 0e00 	mov.w	lr, #0
   8613c:	3c01      	subs	r4, #1
   8613e:	f300 80ab 	bgt.w	86298 <__aeabi_dmul+0x238>
   86142:	f114 0f36 	cmn.w	r4, #54	; 0x36
   86146:	bfde      	ittt	le
   86148:	2000      	movle	r0, #0
   8614a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8614e:	bd70      	pople	{r4, r5, r6, pc}
   86150:	f1c4 0400 	rsb	r4, r4, #0
   86154:	3c20      	subs	r4, #32
   86156:	da35      	bge.n	861c4 <__aeabi_dmul+0x164>
   86158:	340c      	adds	r4, #12
   8615a:	dc1b      	bgt.n	86194 <__aeabi_dmul+0x134>
   8615c:	f104 0414 	add.w	r4, r4, #20
   86160:	f1c4 0520 	rsb	r5, r4, #32
   86164:	fa00 f305 	lsl.w	r3, r0, r5
   86168:	fa20 f004 	lsr.w	r0, r0, r4
   8616c:	fa01 f205 	lsl.w	r2, r1, r5
   86170:	ea40 0002 	orr.w	r0, r0, r2
   86174:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   86178:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8617c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   86180:	fa21 f604 	lsr.w	r6, r1, r4
   86184:	eb42 0106 	adc.w	r1, r2, r6
   86188:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8618c:	bf08      	it	eq
   8618e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   86192:	bd70      	pop	{r4, r5, r6, pc}
   86194:	f1c4 040c 	rsb	r4, r4, #12
   86198:	f1c4 0520 	rsb	r5, r4, #32
   8619c:	fa00 f304 	lsl.w	r3, r0, r4
   861a0:	fa20 f005 	lsr.w	r0, r0, r5
   861a4:	fa01 f204 	lsl.w	r2, r1, r4
   861a8:	ea40 0002 	orr.w	r0, r0, r2
   861ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   861b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   861b4:	f141 0100 	adc.w	r1, r1, #0
   861b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   861bc:	bf08      	it	eq
   861be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   861c2:	bd70      	pop	{r4, r5, r6, pc}
   861c4:	f1c4 0520 	rsb	r5, r4, #32
   861c8:	fa00 f205 	lsl.w	r2, r0, r5
   861cc:	ea4e 0e02 	orr.w	lr, lr, r2
   861d0:	fa20 f304 	lsr.w	r3, r0, r4
   861d4:	fa01 f205 	lsl.w	r2, r1, r5
   861d8:	ea43 0302 	orr.w	r3, r3, r2
   861dc:	fa21 f004 	lsr.w	r0, r1, r4
   861e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   861e4:	fa21 f204 	lsr.w	r2, r1, r4
   861e8:	ea20 0002 	bic.w	r0, r0, r2
   861ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   861f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   861f4:	bf08      	it	eq
   861f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   861fa:	bd70      	pop	{r4, r5, r6, pc}
   861fc:	f094 0f00 	teq	r4, #0
   86200:	d10f      	bne.n	86222 <__aeabi_dmul+0x1c2>
   86202:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   86206:	0040      	lsls	r0, r0, #1
   86208:	eb41 0101 	adc.w	r1, r1, r1
   8620c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   86210:	bf08      	it	eq
   86212:	3c01      	subeq	r4, #1
   86214:	d0f7      	beq.n	86206 <__aeabi_dmul+0x1a6>
   86216:	ea41 0106 	orr.w	r1, r1, r6
   8621a:	f095 0f00 	teq	r5, #0
   8621e:	bf18      	it	ne
   86220:	4770      	bxne	lr
   86222:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   86226:	0052      	lsls	r2, r2, #1
   86228:	eb43 0303 	adc.w	r3, r3, r3
   8622c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   86230:	bf08      	it	eq
   86232:	3d01      	subeq	r5, #1
   86234:	d0f7      	beq.n	86226 <__aeabi_dmul+0x1c6>
   86236:	ea43 0306 	orr.w	r3, r3, r6
   8623a:	4770      	bx	lr
   8623c:	ea94 0f0c 	teq	r4, ip
   86240:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   86244:	bf18      	it	ne
   86246:	ea95 0f0c 	teqne	r5, ip
   8624a:	d00c      	beq.n	86266 <__aeabi_dmul+0x206>
   8624c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   86250:	bf18      	it	ne
   86252:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   86256:	d1d1      	bne.n	861fc <__aeabi_dmul+0x19c>
   86258:	ea81 0103 	eor.w	r1, r1, r3
   8625c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   86260:	f04f 0000 	mov.w	r0, #0
   86264:	bd70      	pop	{r4, r5, r6, pc}
   86266:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8626a:	bf06      	itte	eq
   8626c:	4610      	moveq	r0, r2
   8626e:	4619      	moveq	r1, r3
   86270:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   86274:	d019      	beq.n	862aa <__aeabi_dmul+0x24a>
   86276:	ea94 0f0c 	teq	r4, ip
   8627a:	d102      	bne.n	86282 <__aeabi_dmul+0x222>
   8627c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   86280:	d113      	bne.n	862aa <__aeabi_dmul+0x24a>
   86282:	ea95 0f0c 	teq	r5, ip
   86286:	d105      	bne.n	86294 <__aeabi_dmul+0x234>
   86288:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8628c:	bf1c      	itt	ne
   8628e:	4610      	movne	r0, r2
   86290:	4619      	movne	r1, r3
   86292:	d10a      	bne.n	862aa <__aeabi_dmul+0x24a>
   86294:	ea81 0103 	eor.w	r1, r1, r3
   86298:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8629c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   862a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   862a4:	f04f 0000 	mov.w	r0, #0
   862a8:	bd70      	pop	{r4, r5, r6, pc}
   862aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   862ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   862b2:	bd70      	pop	{r4, r5, r6, pc}

000862b4 <__aeabi_ddiv>:
   862b4:	b570      	push	{r4, r5, r6, lr}
   862b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   862ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   862be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   862c2:	bf1d      	ittte	ne
   862c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   862c8:	ea94 0f0c 	teqne	r4, ip
   862cc:	ea95 0f0c 	teqne	r5, ip
   862d0:	f000 f8a7 	bleq	86422 <__aeabi_ddiv+0x16e>
   862d4:	eba4 0405 	sub.w	r4, r4, r5
   862d8:	ea81 0e03 	eor.w	lr, r1, r3
   862dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   862e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   862e4:	f000 8088 	beq.w	863f8 <__aeabi_ddiv+0x144>
   862e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   862ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   862f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   862f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   862f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   862fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   86300:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   86304:	ea4f 2600 	mov.w	r6, r0, lsl #8
   86308:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8630c:	429d      	cmp	r5, r3
   8630e:	bf08      	it	eq
   86310:	4296      	cmpeq	r6, r2
   86312:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   86316:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8631a:	d202      	bcs.n	86322 <__aeabi_ddiv+0x6e>
   8631c:	085b      	lsrs	r3, r3, #1
   8631e:	ea4f 0232 	mov.w	r2, r2, rrx
   86322:	1ab6      	subs	r6, r6, r2
   86324:	eb65 0503 	sbc.w	r5, r5, r3
   86328:	085b      	lsrs	r3, r3, #1
   8632a:	ea4f 0232 	mov.w	r2, r2, rrx
   8632e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   86332:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   86336:	ebb6 0e02 	subs.w	lr, r6, r2
   8633a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8633e:	bf22      	ittt	cs
   86340:	1ab6      	subcs	r6, r6, r2
   86342:	4675      	movcs	r5, lr
   86344:	ea40 000c 	orrcs.w	r0, r0, ip
   86348:	085b      	lsrs	r3, r3, #1
   8634a:	ea4f 0232 	mov.w	r2, r2, rrx
   8634e:	ebb6 0e02 	subs.w	lr, r6, r2
   86352:	eb75 0e03 	sbcs.w	lr, r5, r3
   86356:	bf22      	ittt	cs
   86358:	1ab6      	subcs	r6, r6, r2
   8635a:	4675      	movcs	r5, lr
   8635c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   86360:	085b      	lsrs	r3, r3, #1
   86362:	ea4f 0232 	mov.w	r2, r2, rrx
   86366:	ebb6 0e02 	subs.w	lr, r6, r2
   8636a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8636e:	bf22      	ittt	cs
   86370:	1ab6      	subcs	r6, r6, r2
   86372:	4675      	movcs	r5, lr
   86374:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   86378:	085b      	lsrs	r3, r3, #1
   8637a:	ea4f 0232 	mov.w	r2, r2, rrx
   8637e:	ebb6 0e02 	subs.w	lr, r6, r2
   86382:	eb75 0e03 	sbcs.w	lr, r5, r3
   86386:	bf22      	ittt	cs
   86388:	1ab6      	subcs	r6, r6, r2
   8638a:	4675      	movcs	r5, lr
   8638c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   86390:	ea55 0e06 	orrs.w	lr, r5, r6
   86394:	d018      	beq.n	863c8 <__aeabi_ddiv+0x114>
   86396:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8639a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8639e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   863a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   863a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   863aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   863ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   863b2:	d1c0      	bne.n	86336 <__aeabi_ddiv+0x82>
   863b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   863b8:	d10b      	bne.n	863d2 <__aeabi_ddiv+0x11e>
   863ba:	ea41 0100 	orr.w	r1, r1, r0
   863be:	f04f 0000 	mov.w	r0, #0
   863c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   863c6:	e7b6      	b.n	86336 <__aeabi_ddiv+0x82>
   863c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   863cc:	bf04      	itt	eq
   863ce:	4301      	orreq	r1, r0
   863d0:	2000      	moveq	r0, #0
   863d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   863d6:	bf88      	it	hi
   863d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   863dc:	f63f aeaf 	bhi.w	8613e <__aeabi_dmul+0xde>
   863e0:	ebb5 0c03 	subs.w	ip, r5, r3
   863e4:	bf04      	itt	eq
   863e6:	ebb6 0c02 	subseq.w	ip, r6, r2
   863ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   863ee:	f150 0000 	adcs.w	r0, r0, #0
   863f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   863f6:	bd70      	pop	{r4, r5, r6, pc}
   863f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   863fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   86400:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   86404:	bfc2      	ittt	gt
   86406:	ebd4 050c 	rsbsgt	r5, r4, ip
   8640a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8640e:	bd70      	popgt	{r4, r5, r6, pc}
   86410:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   86414:	f04f 0e00 	mov.w	lr, #0
   86418:	3c01      	subs	r4, #1
   8641a:	e690      	b.n	8613e <__aeabi_dmul+0xde>
   8641c:	ea45 0e06 	orr.w	lr, r5, r6
   86420:	e68d      	b.n	8613e <__aeabi_dmul+0xde>
   86422:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   86426:	ea94 0f0c 	teq	r4, ip
   8642a:	bf08      	it	eq
   8642c:	ea95 0f0c 	teqeq	r5, ip
   86430:	f43f af3b 	beq.w	862aa <__aeabi_dmul+0x24a>
   86434:	ea94 0f0c 	teq	r4, ip
   86438:	d10a      	bne.n	86450 <__aeabi_ddiv+0x19c>
   8643a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8643e:	f47f af34 	bne.w	862aa <__aeabi_dmul+0x24a>
   86442:	ea95 0f0c 	teq	r5, ip
   86446:	f47f af25 	bne.w	86294 <__aeabi_dmul+0x234>
   8644a:	4610      	mov	r0, r2
   8644c:	4619      	mov	r1, r3
   8644e:	e72c      	b.n	862aa <__aeabi_dmul+0x24a>
   86450:	ea95 0f0c 	teq	r5, ip
   86454:	d106      	bne.n	86464 <__aeabi_ddiv+0x1b0>
   86456:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8645a:	f43f aefd 	beq.w	86258 <__aeabi_dmul+0x1f8>
   8645e:	4610      	mov	r0, r2
   86460:	4619      	mov	r1, r3
   86462:	e722      	b.n	862aa <__aeabi_dmul+0x24a>
   86464:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   86468:	bf18      	it	ne
   8646a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8646e:	f47f aec5 	bne.w	861fc <__aeabi_dmul+0x19c>
   86472:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   86476:	f47f af0d 	bne.w	86294 <__aeabi_dmul+0x234>
   8647a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8647e:	f47f aeeb 	bne.w	86258 <__aeabi_dmul+0x1f8>
   86482:	e712      	b.n	862aa <__aeabi_dmul+0x24a>

00086484 <__gedf2>:
   86484:	f04f 3cff 	mov.w	ip, #4294967295
   86488:	e006      	b.n	86498 <__cmpdf2+0x4>
   8648a:	bf00      	nop

0008648c <__ledf2>:
   8648c:	f04f 0c01 	mov.w	ip, #1
   86490:	e002      	b.n	86498 <__cmpdf2+0x4>
   86492:	bf00      	nop

00086494 <__cmpdf2>:
   86494:	f04f 0c01 	mov.w	ip, #1
   86498:	f84d cd04 	str.w	ip, [sp, #-4]!
   8649c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   864a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   864a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   864a8:	bf18      	it	ne
   864aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   864ae:	d01b      	beq.n	864e8 <__cmpdf2+0x54>
   864b0:	b001      	add	sp, #4
   864b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   864b6:	bf0c      	ite	eq
   864b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   864bc:	ea91 0f03 	teqne	r1, r3
   864c0:	bf02      	ittt	eq
   864c2:	ea90 0f02 	teqeq	r0, r2
   864c6:	2000      	moveq	r0, #0
   864c8:	4770      	bxeq	lr
   864ca:	f110 0f00 	cmn.w	r0, #0
   864ce:	ea91 0f03 	teq	r1, r3
   864d2:	bf58      	it	pl
   864d4:	4299      	cmppl	r1, r3
   864d6:	bf08      	it	eq
   864d8:	4290      	cmpeq	r0, r2
   864da:	bf2c      	ite	cs
   864dc:	17d8      	asrcs	r0, r3, #31
   864de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   864e2:	f040 0001 	orr.w	r0, r0, #1
   864e6:	4770      	bx	lr
   864e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   864ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   864f0:	d102      	bne.n	864f8 <__cmpdf2+0x64>
   864f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   864f6:	d107      	bne.n	86508 <__cmpdf2+0x74>
   864f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   864fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   86500:	d1d6      	bne.n	864b0 <__cmpdf2+0x1c>
   86502:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   86506:	d0d3      	beq.n	864b0 <__cmpdf2+0x1c>
   86508:	f85d 0b04 	ldr.w	r0, [sp], #4
   8650c:	4770      	bx	lr
   8650e:	bf00      	nop

00086510 <__aeabi_cdrcmple>:
   86510:	4684      	mov	ip, r0
   86512:	4610      	mov	r0, r2
   86514:	4662      	mov	r2, ip
   86516:	468c      	mov	ip, r1
   86518:	4619      	mov	r1, r3
   8651a:	4663      	mov	r3, ip
   8651c:	e000      	b.n	86520 <__aeabi_cdcmpeq>
   8651e:	bf00      	nop

00086520 <__aeabi_cdcmpeq>:
   86520:	b501      	push	{r0, lr}
   86522:	f7ff ffb7 	bl	86494 <__cmpdf2>
   86526:	2800      	cmp	r0, #0
   86528:	bf48      	it	mi
   8652a:	f110 0f00 	cmnmi.w	r0, #0
   8652e:	bd01      	pop	{r0, pc}

00086530 <__aeabi_dcmpeq>:
   86530:	f84d ed08 	str.w	lr, [sp, #-8]!
   86534:	f7ff fff4 	bl	86520 <__aeabi_cdcmpeq>
   86538:	bf0c      	ite	eq
   8653a:	2001      	moveq	r0, #1
   8653c:	2000      	movne	r0, #0
   8653e:	f85d fb08 	ldr.w	pc, [sp], #8
   86542:	bf00      	nop

00086544 <__aeabi_dcmplt>:
   86544:	f84d ed08 	str.w	lr, [sp, #-8]!
   86548:	f7ff ffea 	bl	86520 <__aeabi_cdcmpeq>
   8654c:	bf34      	ite	cc
   8654e:	2001      	movcc	r0, #1
   86550:	2000      	movcs	r0, #0
   86552:	f85d fb08 	ldr.w	pc, [sp], #8
   86556:	bf00      	nop

00086558 <__aeabi_dcmple>:
   86558:	f84d ed08 	str.w	lr, [sp, #-8]!
   8655c:	f7ff ffe0 	bl	86520 <__aeabi_cdcmpeq>
   86560:	bf94      	ite	ls
   86562:	2001      	movls	r0, #1
   86564:	2000      	movhi	r0, #0
   86566:	f85d fb08 	ldr.w	pc, [sp], #8
   8656a:	bf00      	nop

0008656c <__aeabi_dcmpge>:
   8656c:	f84d ed08 	str.w	lr, [sp, #-8]!
   86570:	f7ff ffce 	bl	86510 <__aeabi_cdrcmple>
   86574:	bf94      	ite	ls
   86576:	2001      	movls	r0, #1
   86578:	2000      	movhi	r0, #0
   8657a:	f85d fb08 	ldr.w	pc, [sp], #8
   8657e:	bf00      	nop

00086580 <__aeabi_dcmpgt>:
   86580:	f84d ed08 	str.w	lr, [sp, #-8]!
   86584:	f7ff ffc4 	bl	86510 <__aeabi_cdrcmple>
   86588:	bf34      	ite	cc
   8658a:	2001      	movcc	r0, #1
   8658c:	2000      	movcs	r0, #0
   8658e:	f85d fb08 	ldr.w	pc, [sp], #8
   86592:	bf00      	nop

00086594 <__aeabi_dcmpun>:
   86594:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   86598:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8659c:	d102      	bne.n	865a4 <__aeabi_dcmpun+0x10>
   8659e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   865a2:	d10a      	bne.n	865ba <__aeabi_dcmpun+0x26>
   865a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   865a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   865ac:	d102      	bne.n	865b4 <__aeabi_dcmpun+0x20>
   865ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   865b2:	d102      	bne.n	865ba <__aeabi_dcmpun+0x26>
   865b4:	f04f 0000 	mov.w	r0, #0
   865b8:	4770      	bx	lr
   865ba:	f04f 0001 	mov.w	r0, #1
   865be:	4770      	bx	lr

000865c0 <__aeabi_d2iz>:
   865c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   865c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   865c8:	d215      	bcs.n	865f6 <__aeabi_d2iz+0x36>
   865ca:	d511      	bpl.n	865f0 <__aeabi_d2iz+0x30>
   865cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   865d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   865d4:	d912      	bls.n	865fc <__aeabi_d2iz+0x3c>
   865d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   865da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   865de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   865e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   865e6:	fa23 f002 	lsr.w	r0, r3, r2
   865ea:	bf18      	it	ne
   865ec:	4240      	negne	r0, r0
   865ee:	4770      	bx	lr
   865f0:	f04f 0000 	mov.w	r0, #0
   865f4:	4770      	bx	lr
   865f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   865fa:	d105      	bne.n	86608 <__aeabi_d2iz+0x48>
   865fc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   86600:	bf08      	it	eq
   86602:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   86606:	4770      	bx	lr
   86608:	f04f 0000 	mov.w	r0, #0
   8660c:	4770      	bx	lr
   8660e:	bf00      	nop

00086610 <__aeabi_uldivmod>:
   86610:	b953      	cbnz	r3, 86628 <__aeabi_uldivmod+0x18>
   86612:	b94a      	cbnz	r2, 86628 <__aeabi_uldivmod+0x18>
   86614:	2900      	cmp	r1, #0
   86616:	bf08      	it	eq
   86618:	2800      	cmpeq	r0, #0
   8661a:	bf1c      	itt	ne
   8661c:	f04f 31ff 	movne.w	r1, #4294967295
   86620:	f04f 30ff 	movne.w	r0, #4294967295
   86624:	f000 b97a 	b.w	8691c <__aeabi_idiv0>
   86628:	f1ad 0c08 	sub.w	ip, sp, #8
   8662c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   86630:	f000 f806 	bl	86640 <__udivmoddi4>
   86634:	f8dd e004 	ldr.w	lr, [sp, #4]
   86638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8663c:	b004      	add	sp, #16
   8663e:	4770      	bx	lr

00086640 <__udivmoddi4>:
   86640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86644:	468c      	mov	ip, r1
   86646:	460e      	mov	r6, r1
   86648:	4604      	mov	r4, r0
   8664a:	9d08      	ldr	r5, [sp, #32]
   8664c:	2b00      	cmp	r3, #0
   8664e:	d150      	bne.n	866f2 <__udivmoddi4+0xb2>
   86650:	428a      	cmp	r2, r1
   86652:	4617      	mov	r7, r2
   86654:	d96c      	bls.n	86730 <__udivmoddi4+0xf0>
   86656:	fab2 fe82 	clz	lr, r2
   8665a:	f1be 0f00 	cmp.w	lr, #0
   8665e:	d00b      	beq.n	86678 <__udivmoddi4+0x38>
   86660:	f1ce 0c20 	rsb	ip, lr, #32
   86664:	fa01 f60e 	lsl.w	r6, r1, lr
   86668:	fa20 fc0c 	lsr.w	ip, r0, ip
   8666c:	fa02 f70e 	lsl.w	r7, r2, lr
   86670:	ea4c 0c06 	orr.w	ip, ip, r6
   86674:	fa00 f40e 	lsl.w	r4, r0, lr
   86678:	0c3a      	lsrs	r2, r7, #16
   8667a:	fbbc f9f2 	udiv	r9, ip, r2
   8667e:	b2bb      	uxth	r3, r7
   86680:	fb02 cc19 	mls	ip, r2, r9, ip
   86684:	fb09 fa03 	mul.w	sl, r9, r3
   86688:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8668c:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   86690:	45b2      	cmp	sl, r6
   86692:	d90a      	bls.n	866aa <__udivmoddi4+0x6a>
   86694:	19f6      	adds	r6, r6, r7
   86696:	f109 31ff 	add.w	r1, r9, #4294967295
   8669a:	f080 8125 	bcs.w	868e8 <__udivmoddi4+0x2a8>
   8669e:	45b2      	cmp	sl, r6
   866a0:	f240 8122 	bls.w	868e8 <__udivmoddi4+0x2a8>
   866a4:	f1a9 0902 	sub.w	r9, r9, #2
   866a8:	443e      	add	r6, r7
   866aa:	eba6 060a 	sub.w	r6, r6, sl
   866ae:	fbb6 f0f2 	udiv	r0, r6, r2
   866b2:	fb02 6610 	mls	r6, r2, r0, r6
   866b6:	fb00 f303 	mul.w	r3, r0, r3
   866ba:	b2a4      	uxth	r4, r4
   866bc:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   866c0:	42a3      	cmp	r3, r4
   866c2:	d909      	bls.n	866d8 <__udivmoddi4+0x98>
   866c4:	19e4      	adds	r4, r4, r7
   866c6:	f100 32ff 	add.w	r2, r0, #4294967295
   866ca:	f080 810b 	bcs.w	868e4 <__udivmoddi4+0x2a4>
   866ce:	42a3      	cmp	r3, r4
   866d0:	f240 8108 	bls.w	868e4 <__udivmoddi4+0x2a4>
   866d4:	3802      	subs	r0, #2
   866d6:	443c      	add	r4, r7
   866d8:	2100      	movs	r1, #0
   866da:	1ae4      	subs	r4, r4, r3
   866dc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   866e0:	2d00      	cmp	r5, #0
   866e2:	d062      	beq.n	867aa <__udivmoddi4+0x16a>
   866e4:	2300      	movs	r3, #0
   866e6:	fa24 f40e 	lsr.w	r4, r4, lr
   866ea:	602c      	str	r4, [r5, #0]
   866ec:	606b      	str	r3, [r5, #4]
   866ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   866f2:	428b      	cmp	r3, r1
   866f4:	d907      	bls.n	86706 <__udivmoddi4+0xc6>
   866f6:	2d00      	cmp	r5, #0
   866f8:	d055      	beq.n	867a6 <__udivmoddi4+0x166>
   866fa:	2100      	movs	r1, #0
   866fc:	e885 0041 	stmia.w	r5, {r0, r6}
   86700:	4608      	mov	r0, r1
   86702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86706:	fab3 f183 	clz	r1, r3
   8670a:	2900      	cmp	r1, #0
   8670c:	f040 808f 	bne.w	8682e <__udivmoddi4+0x1ee>
   86710:	42b3      	cmp	r3, r6
   86712:	d302      	bcc.n	8671a <__udivmoddi4+0xda>
   86714:	4282      	cmp	r2, r0
   86716:	f200 80fc 	bhi.w	86912 <__udivmoddi4+0x2d2>
   8671a:	1a84      	subs	r4, r0, r2
   8671c:	eb66 0603 	sbc.w	r6, r6, r3
   86720:	2001      	movs	r0, #1
   86722:	46b4      	mov	ip, r6
   86724:	2d00      	cmp	r5, #0
   86726:	d040      	beq.n	867aa <__udivmoddi4+0x16a>
   86728:	e885 1010 	stmia.w	r5, {r4, ip}
   8672c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86730:	b912      	cbnz	r2, 86738 <__udivmoddi4+0xf8>
   86732:	2701      	movs	r7, #1
   86734:	fbb7 f7f2 	udiv	r7, r7, r2
   86738:	fab7 fe87 	clz	lr, r7
   8673c:	f1be 0f00 	cmp.w	lr, #0
   86740:	d135      	bne.n	867ae <__udivmoddi4+0x16e>
   86742:	2101      	movs	r1, #1
   86744:	1bf6      	subs	r6, r6, r7
   86746:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8674a:	fa1f f887 	uxth.w	r8, r7
   8674e:	fbb6 f2fc 	udiv	r2, r6, ip
   86752:	fb0c 6612 	mls	r6, ip, r2, r6
   86756:	fb08 f002 	mul.w	r0, r8, r2
   8675a:	0c23      	lsrs	r3, r4, #16
   8675c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   86760:	42b0      	cmp	r0, r6
   86762:	d907      	bls.n	86774 <__udivmoddi4+0x134>
   86764:	19f6      	adds	r6, r6, r7
   86766:	f102 33ff 	add.w	r3, r2, #4294967295
   8676a:	d202      	bcs.n	86772 <__udivmoddi4+0x132>
   8676c:	42b0      	cmp	r0, r6
   8676e:	f200 80d2 	bhi.w	86916 <__udivmoddi4+0x2d6>
   86772:	461a      	mov	r2, r3
   86774:	1a36      	subs	r6, r6, r0
   86776:	fbb6 f0fc 	udiv	r0, r6, ip
   8677a:	fb0c 6610 	mls	r6, ip, r0, r6
   8677e:	fb08 f800 	mul.w	r8, r8, r0
   86782:	b2a3      	uxth	r3, r4
   86784:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   86788:	45a0      	cmp	r8, r4
   8678a:	d907      	bls.n	8679c <__udivmoddi4+0x15c>
   8678c:	19e4      	adds	r4, r4, r7
   8678e:	f100 33ff 	add.w	r3, r0, #4294967295
   86792:	d202      	bcs.n	8679a <__udivmoddi4+0x15a>
   86794:	45a0      	cmp	r8, r4
   86796:	f200 80b9 	bhi.w	8690c <__udivmoddi4+0x2cc>
   8679a:	4618      	mov	r0, r3
   8679c:	eba4 0408 	sub.w	r4, r4, r8
   867a0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   867a4:	e79c      	b.n	866e0 <__udivmoddi4+0xa0>
   867a6:	4629      	mov	r1, r5
   867a8:	4628      	mov	r0, r5
   867aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   867ae:	fa07 f70e 	lsl.w	r7, r7, lr
   867b2:	f1ce 0320 	rsb	r3, lr, #32
   867b6:	fa26 f203 	lsr.w	r2, r6, r3
   867ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   867be:	fbb2 f1fc 	udiv	r1, r2, ip
   867c2:	fa1f f887 	uxth.w	r8, r7
   867c6:	fb0c 2211 	mls	r2, ip, r1, r2
   867ca:	fa06 f60e 	lsl.w	r6, r6, lr
   867ce:	fa20 f303 	lsr.w	r3, r0, r3
   867d2:	fb01 f908 	mul.w	r9, r1, r8
   867d6:	4333      	orrs	r3, r6
   867d8:	0c1e      	lsrs	r6, r3, #16
   867da:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   867de:	45b1      	cmp	r9, r6
   867e0:	fa00 f40e 	lsl.w	r4, r0, lr
   867e4:	d909      	bls.n	867fa <__udivmoddi4+0x1ba>
   867e6:	19f6      	adds	r6, r6, r7
   867e8:	f101 32ff 	add.w	r2, r1, #4294967295
   867ec:	f080 808c 	bcs.w	86908 <__udivmoddi4+0x2c8>
   867f0:	45b1      	cmp	r9, r6
   867f2:	f240 8089 	bls.w	86908 <__udivmoddi4+0x2c8>
   867f6:	3902      	subs	r1, #2
   867f8:	443e      	add	r6, r7
   867fa:	eba6 0609 	sub.w	r6, r6, r9
   867fe:	fbb6 f0fc 	udiv	r0, r6, ip
   86802:	fb0c 6210 	mls	r2, ip, r0, r6
   86806:	fb00 f908 	mul.w	r9, r0, r8
   8680a:	b29e      	uxth	r6, r3
   8680c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   86810:	45b1      	cmp	r9, r6
   86812:	d907      	bls.n	86824 <__udivmoddi4+0x1e4>
   86814:	19f6      	adds	r6, r6, r7
   86816:	f100 33ff 	add.w	r3, r0, #4294967295
   8681a:	d271      	bcs.n	86900 <__udivmoddi4+0x2c0>
   8681c:	45b1      	cmp	r9, r6
   8681e:	d96f      	bls.n	86900 <__udivmoddi4+0x2c0>
   86820:	3802      	subs	r0, #2
   86822:	443e      	add	r6, r7
   86824:	eba6 0609 	sub.w	r6, r6, r9
   86828:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   8682c:	e78f      	b.n	8674e <__udivmoddi4+0x10e>
   8682e:	f1c1 0720 	rsb	r7, r1, #32
   86832:	fa22 f807 	lsr.w	r8, r2, r7
   86836:	408b      	lsls	r3, r1
   86838:	ea48 0303 	orr.w	r3, r8, r3
   8683c:	fa26 f407 	lsr.w	r4, r6, r7
   86840:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   86844:	fbb4 f9fe 	udiv	r9, r4, lr
   86848:	fa1f fc83 	uxth.w	ip, r3
   8684c:	fb0e 4419 	mls	r4, lr, r9, r4
   86850:	408e      	lsls	r6, r1
   86852:	fa20 f807 	lsr.w	r8, r0, r7
   86856:	fb09 fa0c 	mul.w	sl, r9, ip
   8685a:	ea48 0806 	orr.w	r8, r8, r6
   8685e:	ea4f 4618 	mov.w	r6, r8, lsr #16
   86862:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   86866:	45a2      	cmp	sl, r4
   86868:	fa02 f201 	lsl.w	r2, r2, r1
   8686c:	fa00 f601 	lsl.w	r6, r0, r1
   86870:	d908      	bls.n	86884 <__udivmoddi4+0x244>
   86872:	18e4      	adds	r4, r4, r3
   86874:	f109 30ff 	add.w	r0, r9, #4294967295
   86878:	d244      	bcs.n	86904 <__udivmoddi4+0x2c4>
   8687a:	45a2      	cmp	sl, r4
   8687c:	d942      	bls.n	86904 <__udivmoddi4+0x2c4>
   8687e:	f1a9 0902 	sub.w	r9, r9, #2
   86882:	441c      	add	r4, r3
   86884:	eba4 040a 	sub.w	r4, r4, sl
   86888:	fbb4 f0fe 	udiv	r0, r4, lr
   8688c:	fb0e 4410 	mls	r4, lr, r0, r4
   86890:	fb00 fc0c 	mul.w	ip, r0, ip
   86894:	fa1f f888 	uxth.w	r8, r8
   86898:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   8689c:	45a4      	cmp	ip, r4
   8689e:	d907      	bls.n	868b0 <__udivmoddi4+0x270>
   868a0:	18e4      	adds	r4, r4, r3
   868a2:	f100 3eff 	add.w	lr, r0, #4294967295
   868a6:	d229      	bcs.n	868fc <__udivmoddi4+0x2bc>
   868a8:	45a4      	cmp	ip, r4
   868aa:	d927      	bls.n	868fc <__udivmoddi4+0x2bc>
   868ac:	3802      	subs	r0, #2
   868ae:	441c      	add	r4, r3
   868b0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   868b4:	fba0 8902 	umull	r8, r9, r0, r2
   868b8:	eba4 0c0c 	sub.w	ip, r4, ip
   868bc:	45cc      	cmp	ip, r9
   868be:	46c2      	mov	sl, r8
   868c0:	46ce      	mov	lr, r9
   868c2:	d315      	bcc.n	868f0 <__udivmoddi4+0x2b0>
   868c4:	d012      	beq.n	868ec <__udivmoddi4+0x2ac>
   868c6:	b155      	cbz	r5, 868de <__udivmoddi4+0x29e>
   868c8:	ebb6 030a 	subs.w	r3, r6, sl
   868cc:	eb6c 060e 	sbc.w	r6, ip, lr
   868d0:	fa06 f707 	lsl.w	r7, r6, r7
   868d4:	40cb      	lsrs	r3, r1
   868d6:	431f      	orrs	r7, r3
   868d8:	40ce      	lsrs	r6, r1
   868da:	602f      	str	r7, [r5, #0]
   868dc:	606e      	str	r6, [r5, #4]
   868de:	2100      	movs	r1, #0
   868e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   868e4:	4610      	mov	r0, r2
   868e6:	e6f7      	b.n	866d8 <__udivmoddi4+0x98>
   868e8:	4689      	mov	r9, r1
   868ea:	e6de      	b.n	866aa <__udivmoddi4+0x6a>
   868ec:	4546      	cmp	r6, r8
   868ee:	d2ea      	bcs.n	868c6 <__udivmoddi4+0x286>
   868f0:	ebb8 0a02 	subs.w	sl, r8, r2
   868f4:	eb69 0e03 	sbc.w	lr, r9, r3
   868f8:	3801      	subs	r0, #1
   868fa:	e7e4      	b.n	868c6 <__udivmoddi4+0x286>
   868fc:	4670      	mov	r0, lr
   868fe:	e7d7      	b.n	868b0 <__udivmoddi4+0x270>
   86900:	4618      	mov	r0, r3
   86902:	e78f      	b.n	86824 <__udivmoddi4+0x1e4>
   86904:	4681      	mov	r9, r0
   86906:	e7bd      	b.n	86884 <__udivmoddi4+0x244>
   86908:	4611      	mov	r1, r2
   8690a:	e776      	b.n	867fa <__udivmoddi4+0x1ba>
   8690c:	3802      	subs	r0, #2
   8690e:	443c      	add	r4, r7
   86910:	e744      	b.n	8679c <__udivmoddi4+0x15c>
   86912:	4608      	mov	r0, r1
   86914:	e706      	b.n	86724 <__udivmoddi4+0xe4>
   86916:	3a02      	subs	r2, #2
   86918:	443e      	add	r6, r7
   8691a:	e72b      	b.n	86774 <__udivmoddi4+0x134>

0008691c <__aeabi_idiv0>:
   8691c:	4770      	bx	lr
   8691e:	bf00      	nop
   86920:	00000020 	.word	0x00000020
   86924:	2064636c 	.word	0x2064636c
   86928:	2077656e 	.word	0x2077656e
   8692c:	00000a0d 	.word	0x00000a0d

00086930 <line2addr>:
   86930:	54144000 6a6e6f42 2c72756f 0000000d     .@.TBonjour,....
   86940:	6d6d6f43 0d746e65 00000000 656c6c61     Comment.....alle
   86950:	00000d72 73756f76 00000d3f 6e6f6942     r...vous?...Bion
   86960:	72756f6a 0d2c6f6e 00000000 65766542     journo,.....Beve
   86970:	0000000d 000d616c 61757161 21212121     ....la..aqua!!!!
   86980:	0000000d 6c6c6548 000d2c6f 0d776f48     ....Hello,..How.
   86990:	00000000 0d657261 00000000 3f756f79     ....are.....you?
   869a0:	00000d3f 696e6f4b 77696863 000d2c61     ?...Konichiwa,..
   869b0:	7374694d 73696275 000d6968 68737573     Mitsubishi..sush
   869c0:	00000d69 6167614e 696b6173 0000000d     i...Nagasaki....
   869d0:	003e0a0d 3e3e0a0d 0000003e 000a0d20     ..>...>>>... ...
   869e0:	6e750a0d 776f6e6b 6d63206e 25203a64     ..unknown cmd: %
   869f0:	0d583430 0000000a 73332e25 32302520     04X.....%.3s %02
   86a00:	2e252064 25207333 00643230 64323025     d %.3s %02d.%02d
   86a10:	3230253a 30253a64 00206432              :%02d:%02d .

00086a1c <flashSequ>:
   86a1c:	00000032 000001f4 00000032 000004b0     2.......2.......
   86a2c:	00000000 00006874 0000646e 00006472     ....th..nd..rd..
   86a3c:	756e614a 00797261 72626546 79726175     January.February
   86a4c:	00000000 6372614d 00000068 69727041     ....March...Apri
   86a5c:	0000006c 0079614d 656e754a 00000000     l...May.June....
   86a6c:	796c754a 00000000 75677541 00007473     July....August..
   86a7c:	74706553 65626d65 00000072 6f74634f     September...Octo
   86a8c:	00726562 65766f4e 7265626d 00000000     ber.November....
   86a9c:	65636544 7265626d 00000000 646e7553     December....Sund
   86aac:	00007961 646e6f4d 00007961 73657554     ay..Monday..Tues
   86abc:	00796164 6e646557 61647365 00000079     day.Wednesday...
   86acc:	72756854 79616473 00000000 64697246     Thursday....Frid
   86adc:	00007961 75746153 79616472 00000000     ay..Saturday....

00086aec <_cmdEntries>:
   86aec:	00006cab 00080f0d 0000aaf6 0008105d     .l..........]...
   86afc:	000010e1 000810e1 00000000 00000000     ................
   86b0c:	0d203a20 0000000a 7465274c 64207461      : .....L'etat d
   86b1c:	616c2065 6f726220 20656863 69617465     e la broche etai
   86b2c:	61682074 0d207475 0000000a 7465274c     t haut .....L'et
   86b3c:	64207461 616c2065 6f726220 20656863     at de la broche 
   86b4c:	69617465 61622074 0a0d2073 00000000     etait bas ......

00086b5c <usart_console_settings>:
   86b5c:	0001c200 000000c0 00000800 00000000     ................
	...

00086b74 <flashSequApp>:
   86b74:	00000064 000001f4 00000064 000001f4     d.......d.......
   86b84:	00000064 00000898 00000000 090a0a0d     d...............
   86b94:	454d5441 5441204c 334d4153 54532055     ATMEL ATSAM3U ST
   86ba4:	45545241 0a0a0d44 00000000              ARTED.......

00086bb0 <_global_impure_ptr>:
   86bb0:	20070598 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   86bc0:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   86bd0:	46454443 00000000 33323130 37363534     CDEF....01234567
   86be0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   86bf0:	0000296c 00000030                       l)..0...

00086bf8 <blanks.7223>:
   86bf8:	20202020 20202020 20202020 20202020                     

00086c08 <zeroes.7224>:
   86c08:	30303030 30303030 30303030 30303030     0000000000000000
   86c18:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   86c28:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00086c38 <__mprec_bigtens>:
   86c38:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   86c48:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   86c58:	7f73bf3c 75154fdd                       <.s..O.u

00086c60 <__mprec_tens>:
   86c60:	00000000 3ff00000 00000000 40240000     .......?......$@
   86c70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   86c80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   86c90:	00000000 412e8480 00000000 416312d0     .......A......cA
   86ca0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   86cb0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   86cc0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   86cd0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   86ce0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   86cf0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   86d00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   86d10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   86d20:	79d99db4 44ea7843                       ...yCx.D

00086d28 <p05.6055>:
   86d28:	00000005 00000019 0000007d              ........}...

00086d34 <_ctype_>:
   86d34:	20202000 20202020 28282020 20282828     .         ((((( 
   86d44:	20202020 20202020 20202020 20202020                     
   86d54:	10108820 10101010 10101010 10101010      ...............
   86d64:	04040410 04040404 10040404 10101010     ................
   86d74:	41411010 41414141 01010101 01010101     ..AAAAAA........
   86d84:	01010101 01010101 01010101 10101010     ................
   86d94:	42421010 42424242 02020202 02020202     ..BBBBBB........
   86da4:	02020202 02020202 02020202 10101010     ................
   86db4:	00000020 00000000 00000000 00000000      ...............
	...

00086e38 <_init>:
   86e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86e3a:	bf00      	nop
   86e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86e3e:	bc08      	pop	{r3}
   86e40:	469e      	mov	lr, r3
   86e42:	4770      	bx	lr

00086e44 <__init_array_start>:
   86e44:	0008370d 	.word	0x0008370d

00086e48 <__frame_dummy_init_array_entry>:
   86e48:	00080119                                ....

00086e4c <_fini>:
   86e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86e4e:	bf00      	nop
   86e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86e52:	bc08      	pop	{r3}
   86e54:	469e      	mov	lr, r3
   86e56:	4770      	bx	lr

00086e58 <__fini_array_start>:
   86e58:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007058c 	.word	0x2007058c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d915      	bls.n	200700e2 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b6:	4b1b      	ldr	r3, [pc, #108]	; (20070124 <system_init_flash+0x74>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d919      	bls.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700bc:	4b1a      	ldr	r3, [pc, #104]	; (20070128 <system_init_flash+0x78>)
200700be:	4298      	cmp	r0, r3
200700c0:	d91e      	bls.n	20070100 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700c2:	4b1a      	ldr	r3, [pc, #104]	; (2007012c <system_init_flash+0x7c>)
200700c4:	4298      	cmp	r0, r3
200700c6:	d923      	bls.n	20070110 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700c8:	4b19      	ldr	r3, [pc, #100]	; (20070130 <system_init_flash+0x80>)
200700ca:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700cc:	bf94      	ite	ls
200700ce:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700d2:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700d6:	4a17      	ldr	r2, [pc, #92]	; (20070134 <system_init_flash+0x84>)
200700d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700da:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700de:	6013      	str	r3, [r2, #0]
200700e0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e2:	2300      	movs	r3, #0
200700e4:	4a13      	ldr	r2, [pc, #76]	; (20070134 <system_init_flash+0x84>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f0:	f44f 7380 	mov.w	r3, #256	; 0x100
200700f4:	4a0f      	ldr	r2, [pc, #60]	; (20070134 <system_init_flash+0x84>)
200700f6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700fc:	6013      	str	r3, [r2, #0]
200700fe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070100:	f44f 7300 	mov.w	r3, #512	; 0x200
20070104:	4a0b      	ldr	r2, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070106:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070108:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007010c:	6013      	str	r3, [r2, #0]
2007010e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070110:	f44f 7340 	mov.w	r3, #768	; 0x300
20070114:	4a07      	ldr	r2, [pc, #28]	; (20070134 <system_init_flash+0x84>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	02faf07f 	.word	0x02faf07f
20070128:	03d08fff 	.word	0x03d08fff
2007012c:	04c4b3ff 	.word	0x04c4b3ff
20070130:	055d4a7f 	.word	0x055d4a7f
20070134:	400e0a00 	.word	0x400e0a00

20070138 <wCRCTable>:
20070138:	00000000 0000c0c1 0000c181 00000140     ............@...
20070148:	0000c301 000003c0 00000280 0000c241     ............A...
20070158:	0000c601 000006c0 00000780 0000c741     ............A...
20070168:	00000500 0000c5c1 0000c481 00000440     ............@...
20070178:	0000cc01 00000cc0 00000d80 0000cd41     ............A...
20070188:	00000f00 0000cfc1 0000ce81 00000e40     ............@...
20070198:	00000a00 0000cac1 0000cb81 00000b40     ............@...
200701a8:	0000c901 000009c0 00000880 0000c841     ............A...
200701b8:	0000d801 000018c0 00001980 0000d941     ............A...
200701c8:	00001b00 0000dbc1 0000da81 00001a40     ............@...
200701d8:	00001e00 0000dec1 0000df81 00001f40     ............@...
200701e8:	0000dd01 00001dc0 00001c80 0000dc41     ............A...
200701f8:	00001400 0000d4c1 0000d581 00001540     ............@...
20070208:	0000d701 000017c0 00001680 0000d641     ............A...
20070218:	0000d201 000012c0 00001380 0000d341     ............A...
20070228:	00001100 0000d1c1 0000d081 00001040     ............@...
20070238:	0000f001 000030c0 00003180 0000f141     .....0...1..A...
20070248:	00003300 0000f3c1 0000f281 00003240     .3..........@2..
20070258:	00003600 0000f6c1 0000f781 00003740     .6..........@7..
20070268:	0000f501 000035c0 00003480 0000f441     .....5...4..A...
20070278:	00003c00 0000fcc1 0000fd81 00003d40     .<..........@=..
20070288:	0000ff01 00003fc0 00003e80 0000fe41     .....?...>..A...
20070298:	0000fa01 00003ac0 00003b80 0000fb41     .....:...;..A...
200702a8:	00003900 0000f9c1 0000f881 00003840     .9..........@8..
200702b8:	00002800 0000e8c1 0000e981 00002940     .(..........@)..
200702c8:	0000eb01 00002bc0 00002a80 0000ea41     .....+...*..A...
200702d8:	0000ee01 00002ec0 00002f80 0000ef41     ........./..A...
200702e8:	00002d00 0000edc1 0000ec81 00002c40     .-..........@,..
200702f8:	0000e401 000024c0 00002580 0000e541     .....$...%..A...
20070308:	00002700 0000e7c1 0000e681 00002640     .'..........@&..
20070318:	00002200 0000e2c1 0000e381 00002340     ."..........@#..
20070328:	0000e101 000021c0 00002080 0000e041     .....!... ..A...
20070338:	0000a001 000060c0 00006180 0000a141     .....`...a..A...
20070348:	00006300 0000a3c1 0000a281 00006240     .c..........@b..
20070358:	00006600 0000a6c1 0000a781 00006740     .f..........@g..
20070368:	0000a501 000065c0 00006480 0000a441     .....e...d..A...
20070378:	00006c00 0000acc1 0000ad81 00006d40     .l..........@m..
20070388:	0000af01 00006fc0 00006e80 0000ae41     .....o...n..A...
20070398:	0000aa01 00006ac0 00006b80 0000ab41     .....j...k..A...
200703a8:	00006900 0000a9c1 0000a881 00006840     .i..........@h..
200703b8:	00007800 0000b8c1 0000b981 00007940     .x..........@y..
200703c8:	0000bb01 00007bc0 00007a80 0000ba41     .....{...z..A...
200703d8:	0000be01 00007ec0 00007f80 0000bf41     .....~......A...
200703e8:	00007d00 0000bdc1 0000bc81 00007c40     .}..........@|..
200703f8:	0000b401 000074c0 00007580 0000b541     .....t...u..A...
20070408:	00007700 0000b7c1 0000b681 00007640     .w..........@v..
20070418:	00007200 0000b2c1 0000b381 00007340     .r..........@s..
20070428:	0000b101 000071c0 00007080 0000b041     .....q...p..A...
20070438:	00005000 000090c1 00009181 00005140     .P..........@Q..
20070448:	00009301 000053c0 00005280 00009241     .....S...R..A...
20070458:	00009601 000056c0 00005780 00009741     .....V...W..A...
20070468:	00005500 000095c1 00009481 00005440     .U..........@T..
20070478:	00009c01 00005cc0 00005d80 00009d41     .....\...]..A...
20070488:	00005f00 00009fc1 00009e81 00005e40     ._..........@^..
20070498:	00005a00 00009ac1 00009b81 00005b40     .Z..........@[..
200704a8:	00009901 000059c0 00005880 00009841     .....Y...X..A...
200704b8:	00008801 000048c0 00004980 00008941     .....H...I..A...
200704c8:	00004b00 00008bc1 00008a81 00004a40     .K..........@J..
200704d8:	00004e00 00008ec1 00008f81 00004f40     .N..........@O..
200704e8:	00008d01 00004dc0 00004c80 00008c41     .....M...L..A...
200704f8:	00004400 000084c1 00008581 00004540     .D..........@E..
20070508:	00008701 000047c0 00004680 00008641     .....G...F..A...
20070518:	00008201 000042c0 00004380 00008341     .....B...C..A...
20070528:	00004100 000081c1 00008081 00004040     .A..........@@..

20070538 <pErrorFunc>:
20070538:	00080939                                9...

2007053c <daysOfWeek>:
2007053c:	00086aa8 00086ab0 00086ab8 00086ac0     .j...j...j...j..
2007054c:	00086acc 00086ad8 00086ae0              .j...j...j..

20070558 <months>:
20070558:	00086a3c 00086a44 00086a50 00086a58     <j..Dj..Pj..Xj..
20070568:	00086a60 00086a64 00086a6c 00086a74     `j..dj..lj..tj..
20070578:	00086a7c 00086a88 00086a90 00086a9c     |j...j...j...j..

20070588 <g_interrupt_enabled>:
20070588:	00000001                                ....

2007058c <SystemCoreClock>:
2007058c:	003d0900                                ..=.

20070590 <_impure_ptr>:
20070590:	20070598 00000000                       ... ....

20070598 <impure_data>:
20070598:	00000000 20070884 200708ec 20070954     ....... ... T.. 
	...
20070640:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070650:	0005deec 0000000b 00000000 00000000     ................
	...

200709c0 <__atexit_recursive_mutex>:
200709c0:	200714e0                                ... 

200709c4 <__global_locale>:
200709c4:	00000043 00000000 00000000 00000000     C...............
	...
200709e4:	00000043 00000000 00000000 00000000     C...............
	...
20070a04:	00000043 00000000 00000000 00000000     C...............
	...
20070a24:	00000043 00000000 00000000 00000000     C...............
	...
20070a44:	00000043 00000000 00000000 00000000     C...............
	...
20070a64:	00000043 00000000 00000000 00000000     C...............
	...
20070a84:	00000043 00000000 00000000 00000000     C...............
	...
20070aa4:	00085515 00084c41 00000000 00086d34     .U..AL......4m..
20070ab4:	00086c34 00086bac 00086bac 00086bac     4l...k...k...k..
20070ac4:	00086bac 00086bac 00086bac 00086bac     .k...k...k...k..
20070ad4:	00086bac 00086bac ffffffff ffffffff     .k...k..........
20070ae4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070b0c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20070b30 <__malloc_av_>:
	...
20070b38:	20070b30 20070b30 20070b38 20070b38     0.. 0.. 8.. 8.. 
20070b48:	20070b40 20070b40 20070b48 20070b48     @.. @.. H.. H.. 
20070b58:	20070b50 20070b50 20070b58 20070b58     P.. P.. X.. X.. 
20070b68:	20070b60 20070b60 20070b68 20070b68     `.. `.. h.. h.. 
20070b78:	20070b70 20070b70 20070b78 20070b78     p.. p.. x.. x.. 
20070b88:	20070b80 20070b80 20070b88 20070b88     ... ... ... ... 
20070b98:	20070b90 20070b90 20070b98 20070b98     ... ... ... ... 
20070ba8:	20070ba0 20070ba0 20070ba8 20070ba8     ... ... ... ... 
20070bb8:	20070bb0 20070bb0 20070bb8 20070bb8     ... ... ... ... 
20070bc8:	20070bc0 20070bc0 20070bc8 20070bc8     ... ... ... ... 
20070bd8:	20070bd0 20070bd0 20070bd8 20070bd8     ... ... ... ... 
20070be8:	20070be0 20070be0 20070be8 20070be8     ... ... ... ... 
20070bf8:	20070bf0 20070bf0 20070bf8 20070bf8     ... ... ... ... 
20070c08:	20070c00 20070c00 20070c08 20070c08     ... ... ... ... 
20070c18:	20070c10 20070c10 20070c18 20070c18     ... ... ... ... 
20070c28:	20070c20 20070c20 20070c28 20070c28      ..  .. (.. (.. 
20070c38:	20070c30 20070c30 20070c38 20070c38     0.. 0.. 8.. 8.. 
20070c48:	20070c40 20070c40 20070c48 20070c48     @.. @.. H.. H.. 
20070c58:	20070c50 20070c50 20070c58 20070c58     P.. P.. X.. X.. 
20070c68:	20070c60 20070c60 20070c68 20070c68     `.. `.. h.. h.. 
20070c78:	20070c70 20070c70 20070c78 20070c78     p.. p.. x.. x.. 
20070c88:	20070c80 20070c80 20070c88 20070c88     ... ... ... ... 
20070c98:	20070c90 20070c90 20070c98 20070c98     ... ... ... ... 
20070ca8:	20070ca0 20070ca0 20070ca8 20070ca8     ... ... ... ... 
20070cb8:	20070cb0 20070cb0 20070cb8 20070cb8     ... ... ... ... 
20070cc8:	20070cc0 20070cc0 20070cc8 20070cc8     ... ... ... ... 
20070cd8:	20070cd0 20070cd0 20070cd8 20070cd8     ... ... ... ... 
20070ce8:	20070ce0 20070ce0 20070ce8 20070ce8     ... ... ... ... 
20070cf8:	20070cf0 20070cf0 20070cf8 20070cf8     ... ... ... ... 
20070d08:	20070d00 20070d00 20070d08 20070d08     ... ... ... ... 
20070d18:	20070d10 20070d10 20070d18 20070d18     ... ... ... ... 
20070d28:	20070d20 20070d20 20070d28 20070d28      ..  .. (.. (.. 
20070d38:	20070d30 20070d30 20070d38 20070d38     0.. 0.. 8.. 8.. 
20070d48:	20070d40 20070d40 20070d48 20070d48     @.. @.. H.. H.. 
20070d58:	20070d50 20070d50 20070d58 20070d58     P.. P.. X.. X.. 
20070d68:	20070d60 20070d60 20070d68 20070d68     `.. `.. h.. h.. 
20070d78:	20070d70 20070d70 20070d78 20070d78     p.. p.. x.. x.. 
20070d88:	20070d80 20070d80 20070d88 20070d88     ... ... ... ... 
20070d98:	20070d90 20070d90 20070d98 20070d98     ... ... ... ... 
20070da8:	20070da0 20070da0 20070da8 20070da8     ... ... ... ... 
20070db8:	20070db0 20070db0 20070db8 20070db8     ... ... ... ... 
20070dc8:	20070dc0 20070dc0 20070dc8 20070dc8     ... ... ... ... 
20070dd8:	20070dd0 20070dd0 20070dd8 20070dd8     ... ... ... ... 
20070de8:	20070de0 20070de0 20070de8 20070de8     ... ... ... ... 
20070df8:	20070df0 20070df0 20070df8 20070df8     ... ... ... ... 
20070e08:	20070e00 20070e00 20070e08 20070e08     ... ... ... ... 
20070e18:	20070e10 20070e10 20070e18 20070e18     ... ... ... ... 
20070e28:	20070e20 20070e20 20070e28 20070e28      ..  .. (.. (.. 
20070e38:	20070e30 20070e30 20070e38 20070e38     0.. 0.. 8.. 8.. 
20070e48:	20070e40 20070e40 20070e48 20070e48     @.. @.. H.. H.. 
20070e58:	20070e50 20070e50 20070e58 20070e58     P.. P.. X.. X.. 
20070e68:	20070e60 20070e60 20070e68 20070e68     `.. `.. h.. h.. 
20070e78:	20070e70 20070e70 20070e78 20070e78     p.. p.. x.. x.. 
20070e88:	20070e80 20070e80 20070e88 20070e88     ... ... ... ... 
20070e98:	20070e90 20070e90 20070e98 20070e98     ... ... ... ... 
20070ea8:	20070ea0 20070ea0 20070ea8 20070ea8     ... ... ... ... 
20070eb8:	20070eb0 20070eb0 20070eb8 20070eb8     ... ... ... ... 
20070ec8:	20070ec0 20070ec0 20070ec8 20070ec8     ... ... ... ... 
20070ed8:	20070ed0 20070ed0 20070ed8 20070ed8     ... ... ... ... 
20070ee8:	20070ee0 20070ee0 20070ee8 20070ee8     ... ... ... ... 
20070ef8:	20070ef0 20070ef0 20070ef8 20070ef8     ... ... ... ... 
20070f08:	20070f00 20070f00 20070f08 20070f08     ... ... ... ... 
20070f18:	20070f10 20070f10 20070f18 20070f18     ... ... ... ... 
20070f28:	20070f20 20070f20 20070f28 20070f28      ..  .. (.. (.. 

20070f38 <__malloc_sbrk_base>:
20070f38:	ffffffff                                ....

20070f3c <__malloc_trim_threshold>:
20070f3c:	00020000                                ....
