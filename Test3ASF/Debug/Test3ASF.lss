
Test3ASF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b64  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000564  20070000  00080b64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000b4  20070564  000810c8  00020564  2**2
                  ALLOC
  3 .stack        00002000  20070618  0008117c  00020564  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020564  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002058d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000d69a  00000000  00000000  000205e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e9e  00000000  00000000  0002dc80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002ed5  00000000  00000000  0002fb1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000770  00000000  00000000  000329f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006f0  00000000  00000000  00033163  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000158ae  00000000  00000000  00033853  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009426  00000000  00000000  00049101  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006373c  00000000  00000000  00052527  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001100  00000000  00000000  000b5c64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	18 26 07 20 05 08 08 00 01 08 08 00 01 08 08 00     .&. ............
   80010:	01 08 08 00 01 08 08 00 01 08 08 00 00 00 00 00     ................
	...
   8002c:	01 08 08 00 01 08 08 00 00 00 00 00 01 08 08 00     ................
   8003c:	01 08 08 00 01 08 08 00 01 08 08 00 01 08 08 00     ................
   8004c:	01 08 08 00 01 08 08 00 01 08 08 00 01 08 08 00     ................
   8005c:	01 08 08 00 01 08 08 00 01 08 08 00 00 00 00 00     ................
   8006c:	75 06 08 00 89 06 08 00 9d 06 08 00 b1 06 08 00     u...............
	...
   80084:	01 08 08 00 01 08 08 00 01 08 08 00 01 08 08 00     ................
   80094:	01 08 08 00 01 08 08 00 01 08 08 00 01 08 08 00     ................
   800a4:	00 00 00 00 01 08 08 00 01 08 08 00 01 08 08 00     ................
   800b4:	01 08 08 00 01 08 08 00 01 08 08 00 01 08 08 00     ................
   800c4:	01 08 08 00 01 08 08 00 01 08 08 00 01 08 08 00     ................
   800d4:	01 08 08 00 01 08 08 00 01 08 08 00 01 08 08 00     ................
   800e4:	01 08 08 00 01 08 08 00 01 08 08 00 01 08 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070564 	.word	0x20070564
   80110:	00000000 	.word	0x00000000
   80114:	00080b64 	.word	0x00080b64

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080b64 	.word	0x00080b64
   80154:	20070568 	.word	0x20070568
   80158:	00080b64 	.word	0x00080b64
   8015c:	00000000 	.word	0x00000000

00080160 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   80160:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   80162:	010b      	lsls	r3, r1, #4
   80164:	4293      	cmp	r3, r2
   80166:	d914      	bls.n	80192 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80168:	00c9      	lsls	r1, r1, #3
   8016a:	084b      	lsrs	r3, r1, #1
   8016c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   80170:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   80174:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   80176:	1e5c      	subs	r4, r3, #1
   80178:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8017c:	428c      	cmp	r4, r1
   8017e:	d901      	bls.n	80184 <usart_set_async_baudrate+0x24>
		return 1;
   80180:	2001      	movs	r0, #1
   80182:	e017      	b.n	801b4 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   80184:	6841      	ldr	r1, [r0, #4]
   80186:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   8018a:	6041      	str	r1, [r0, #4]
   8018c:	e00c      	b.n	801a8 <usart_set_async_baudrate+0x48>
		return 1;
   8018e:	2001      	movs	r0, #1
   80190:	e010      	b.n	801b4 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80192:	0859      	lsrs	r1, r3, #1
   80194:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   80198:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   8019c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8019e:	1e5c      	subs	r4, r3, #1
   801a0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   801a4:	428c      	cmp	r4, r1
   801a6:	d8f2      	bhi.n	8018e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   801a8:	0412      	lsls	r2, r2, #16
   801aa:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   801ae:	431a      	orrs	r2, r3
   801b0:	6202      	str	r2, [r0, #32]

	return 0;
   801b2:	2000      	movs	r0, #0
}
   801b4:	bc10      	pop	{r4}
   801b6:	4770      	bx	lr

000801b8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   801b8:	4b08      	ldr	r3, [pc, #32]	; (801dc <usart_reset+0x24>)
   801ba:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   801be:	2300      	movs	r3, #0
   801c0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   801c2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   801c4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   801c6:	2388      	movs	r3, #136	; 0x88
   801c8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   801ca:	2324      	movs	r3, #36	; 0x24
   801cc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   801ce:	f44f 7380 	mov.w	r3, #256	; 0x100
   801d2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   801d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   801d8:	6003      	str	r3, [r0, #0]
   801da:	4770      	bx	lr
   801dc:	55534100 	.word	0x55534100

000801e0 <usart_init_rs232>:
{
   801e0:	b570      	push	{r4, r5, r6, lr}
   801e2:	4605      	mov	r5, r0
   801e4:	460c      	mov	r4, r1
   801e6:	4616      	mov	r6, r2
	usart_reset(p_usart);
   801e8:	4b0f      	ldr	r3, [pc, #60]	; (80228 <usart_init_rs232+0x48>)
   801ea:	4798      	blx	r3
	ul_reg_val = 0;
   801ec:	2200      	movs	r2, #0
   801ee:	4b0f      	ldr	r3, [pc, #60]	; (8022c <usart_init_rs232+0x4c>)
   801f0:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   801f2:	b1a4      	cbz	r4, 8021e <usart_init_rs232+0x3e>
   801f4:	4632      	mov	r2, r6
   801f6:	6821      	ldr	r1, [r4, #0]
   801f8:	4628      	mov	r0, r5
   801fa:	4b0d      	ldr	r3, [pc, #52]	; (80230 <usart_init_rs232+0x50>)
   801fc:	4798      	blx	r3
   801fe:	4602      	mov	r2, r0
   80200:	b978      	cbnz	r0, 80222 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   80202:	6863      	ldr	r3, [r4, #4]
   80204:	68a1      	ldr	r1, [r4, #8]
   80206:	430b      	orrs	r3, r1
   80208:	6921      	ldr	r1, [r4, #16]
   8020a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   8020c:	68e1      	ldr	r1, [r4, #12]
   8020e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   80210:	4906      	ldr	r1, [pc, #24]	; (8022c <usart_init_rs232+0x4c>)
   80212:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   80214:	6869      	ldr	r1, [r5, #4]
   80216:	430b      	orrs	r3, r1
   80218:	606b      	str	r3, [r5, #4]
}
   8021a:	4610      	mov	r0, r2
   8021c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   8021e:	2201      	movs	r2, #1
   80220:	e7fb      	b.n	8021a <usart_init_rs232+0x3a>
   80222:	2201      	movs	r2, #1
   80224:	e7f9      	b.n	8021a <usart_init_rs232+0x3a>
   80226:	bf00      	nop
   80228:	000801b9 	.word	0x000801b9
   8022c:	20070580 	.word	0x20070580
   80230:	00080161 	.word	0x00080161

00080234 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80234:	6943      	ldr	r3, [r0, #20]
   80236:	f013 0f02 	tst.w	r3, #2
   8023a:	d0fb      	beq.n	80234 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   8023c:	f3c1 0108 	ubfx	r1, r1, #0, #9
   80240:	61c1      	str	r1, [r0, #28]
}
   80242:	2000      	movs	r0, #0
   80244:	4770      	bx	lr
	...

00080248 <main>:
};



int main (void)
{
   80248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8024a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8024c:	f3bf 8f5f 	dmb	sy
	uint32_t cpt=0;
	/* Insert system clock initialization code here (sysclk_init()). */
	cpu_irq_disable();
   80250:	2400      	movs	r4, #0
   80252:	4b1c      	ldr	r3, [pc, #112]	; (802c4 <main+0x7c>)
   80254:	701c      	strb	r4, [r3, #0]
	sysclk_init();
   80256:	4b1c      	ldr	r3, [pc, #112]	; (802c8 <main+0x80>)
   80258:	4798      	blx	r3
	board_init();
   8025a:	4b1c      	ldr	r3, [pc, #112]	; (802cc <main+0x84>)
   8025c:	4798      	blx	r3

	delay_init(sysclk_get_cpu_hz());

	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8025e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80262:	203b      	movs	r0, #59	; 0x3b
   80264:	4d1a      	ldr	r5, [pc, #104]	; (802d0 <main+0x88>)
   80266:	47a8      	blx	r5
	/* Insert application code here, after the board has been initialized. */
	//Taskman(TASKMAN_NEW);
	gpio_set_pin_high(LED0_GPIO);
   80268:	203b      	movs	r0, #59	; 0x3b
   8026a:	4b1a      	ldr	r3, [pc, #104]	; (802d4 <main+0x8c>)
   8026c:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8026e:	2011      	movs	r0, #17
   80270:	4b19      	ldr	r3, [pc, #100]	; (802d8 <main+0x90>)
   80272:	4798      	blx	r3
	//pushTask(Sablier, SABLIER_NEW,0 ,0);
	

		sysclk_enable_peripheral_clock(USART_SERIAL_ID);
		usart_init_rs232(USART_SERIAL, &usart_console_settings,	sysclk_get_cpu_hz());
   80274:	4e19      	ldr	r6, [pc, #100]	; (802dc <main+0x94>)
   80276:	4a1a      	ldr	r2, [pc, #104]	; (802e0 <main+0x98>)
   80278:	491a      	ldr	r1, [pc, #104]	; (802e4 <main+0x9c>)
   8027a:	4630      	mov	r0, r6
   8027c:	4b1a      	ldr	r3, [pc, #104]	; (802e8 <main+0xa0>)
   8027e:	4798      	blx	r3
		gpio_configure_pin(USART_SERIAL_TXD_IDX,USART_SERIAL_TXD_FLAGS);
   80280:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80284:	200b      	movs	r0, #11
   80286:	47a8      	blx	r5
		gpio_configure_pin(USART_SERIAL_RXD_IDX,USART_SERIAL_RXD_FLAGS);
   80288:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8028c:	200a      	movs	r0, #10
   8028e:	47a8      	blx	r5
		//usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);
		//NVIC_EnableIRQ(USART_SERIAL_ID);

		 usart_putchar(USART_SERIAL,'x');
   80290:	2178      	movs	r1, #120	; 0x78
   80292:	4630      	mov	r0, r6
   80294:	4b15      	ldr	r3, [pc, #84]	; (802ec <main+0xa4>)
   80296:	4798      	blx	r3
	
	for(;;cpt++)
	{
		//Taskman(TASKMAN_POP_TASK);
		if(cpt%100000==0)
   80298:	4e15      	ldr	r6, [pc, #84]	; (802f0 <main+0xa8>)
   8029a:	4d16      	ldr	r5, [pc, #88]	; (802f4 <main+0xac>)
		{
			 usart_putchar(USART_SERIAL,'a');
   8029c:	4f0f      	ldr	r7, [pc, #60]	; (802dc <main+0x94>)
   8029e:	e000      	b.n	802a2 <main+0x5a>
	for(;;cpt++)
   802a0:	3401      	adds	r4, #1
		if(cpt%100000==0)
   802a2:	0963      	lsrs	r3, r4, #5
   802a4:	fba6 2303 	umull	r2, r3, r6, r3
   802a8:	09db      	lsrs	r3, r3, #7
   802aa:	fb05 4313 	mls	r3, r5, r3, r4
   802ae:	2b00      	cmp	r3, #0
   802b0:	d1f6      	bne.n	802a0 <main+0x58>
			 usart_putchar(USART_SERIAL,'a');
   802b2:	2161      	movs	r1, #97	; 0x61
   802b4:	4638      	mov	r0, r7
   802b6:	4b0d      	ldr	r3, [pc, #52]	; (802ec <main+0xa4>)
   802b8:	4798      	blx	r3
			 gpio_toggle_pin(LED0_GPIO);
   802ba:	203b      	movs	r0, #59	; 0x3b
   802bc:	4b0e      	ldr	r3, [pc, #56]	; (802f8 <main+0xb0>)
   802be:	4798      	blx	r3
   802c0:	e7ee      	b.n	802a0 <main+0x58>
   802c2:	bf00      	nop
   802c4:	2007012c 	.word	0x2007012c
   802c8:	000802fd 	.word	0x000802fd
   802cc:	00080361 	.word	0x00080361
   802d0:	000804b9 	.word	0x000804b9
   802d4:	0008047f 	.word	0x0008047f
   802d8:	000807ad 	.word	0x000807ad
   802dc:	40098000 	.word	0x40098000
   802e0:	0501bd00 	.word	0x0501bd00
   802e4:	00080b24 	.word	0x00080b24
   802e8:	000801e1 	.word	0x000801e1
   802ec:	00080235 	.word	0x00080235
   802f0:	0a7c5ac5 	.word	0x0a7c5ac5
   802f4:	000186a0 	.word	0x000186a0
   802f8:	00080499 	.word	0x00080499

000802fc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   802fc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   802fe:	480e      	ldr	r0, [pc, #56]	; (80338 <sysclk_init+0x3c>)
   80300:	4b0e      	ldr	r3, [pc, #56]	; (8033c <sysclk_init+0x40>)
   80302:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80304:	213e      	movs	r1, #62	; 0x3e
   80306:	2000      	movs	r0, #0
   80308:	4b0d      	ldr	r3, [pc, #52]	; (80340 <sysclk_init+0x44>)
   8030a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8030c:	4c0d      	ldr	r4, [pc, #52]	; (80344 <sysclk_init+0x48>)
   8030e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80310:	2800      	cmp	r0, #0
   80312:	d0fc      	beq.n	8030e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80314:	4b0c      	ldr	r3, [pc, #48]	; (80348 <sysclk_init+0x4c>)
   80316:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80318:	4a0c      	ldr	r2, [pc, #48]	; (8034c <sysclk_init+0x50>)
   8031a:	4b0d      	ldr	r3, [pc, #52]	; (80350 <sysclk_init+0x54>)
   8031c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8031e:	4c0d      	ldr	r4, [pc, #52]	; (80354 <sysclk_init+0x58>)
   80320:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80322:	2800      	cmp	r0, #0
   80324:	d0fc      	beq.n	80320 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80326:	2010      	movs	r0, #16
   80328:	4b0b      	ldr	r3, [pc, #44]	; (80358 <sysclk_init+0x5c>)
   8032a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8032c:	4b0b      	ldr	r3, [pc, #44]	; (8035c <sysclk_init+0x60>)
   8032e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80330:	4801      	ldr	r0, [pc, #4]	; (80338 <sysclk_init+0x3c>)
   80332:	4b02      	ldr	r3, [pc, #8]	; (8033c <sysclk_init+0x40>)
   80334:	4798      	blx	r3
   80336:	bd10      	pop	{r4, pc}
   80338:	0501bd00 	.word	0x0501bd00
   8033c:	200700a5 	.word	0x200700a5
   80340:	00080729 	.word	0x00080729
   80344:	0008077d 	.word	0x0008077d
   80348:	0008078d 	.word	0x0008078d
   8034c:	200d3f01 	.word	0x200d3f01
   80350:	400e0600 	.word	0x400e0600
   80354:	0008079d 	.word	0x0008079d
   80358:	000806c5 	.word	0x000806c5
   8035c:	0008089d 	.word	0x0008089d

00080360 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80360:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80362:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80366:	4b16      	ldr	r3, [pc, #88]	; (803c0 <board_init+0x60>)
   80368:	605a      	str	r2, [r3, #4]
   8036a:	200b      	movs	r0, #11
   8036c:	4c15      	ldr	r4, [pc, #84]	; (803c4 <board_init+0x64>)
   8036e:	47a0      	blx	r4
   80370:	200c      	movs	r0, #12
   80372:	47a0      	blx	r4
   80374:	200d      	movs	r0, #13
   80376:	47a0      	blx	r4
   80378:	200e      	movs	r0, #14
   8037a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8037c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80380:	203b      	movs	r0, #59	; 0x3b
   80382:	4c11      	ldr	r4, [pc, #68]	; (803c8 <board_init+0x68>)
   80384:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80386:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8038a:	2055      	movs	r0, #85	; 0x55
   8038c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8038e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80392:	2056      	movs	r0, #86	; 0x56
   80394:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80396:	490d      	ldr	r1, [pc, #52]	; (803cc <board_init+0x6c>)
   80398:	2068      	movs	r0, #104	; 0x68
   8039a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8039c:	490c      	ldr	r1, [pc, #48]	; (803d0 <board_init+0x70>)
   8039e:	205c      	movs	r0, #92	; 0x5c
   803a0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   803a2:	4a0c      	ldr	r2, [pc, #48]	; (803d4 <board_init+0x74>)
   803a4:	f44f 7140 	mov.w	r1, #768	; 0x300
   803a8:	480b      	ldr	r0, [pc, #44]	; (803d8 <board_init+0x78>)
   803aa:	4b0c      	ldr	r3, [pc, #48]	; (803dc <board_init+0x7c>)
   803ac:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   803ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803b2:	202b      	movs	r0, #43	; 0x2b
   803b4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   803b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803ba:	202a      	movs	r0, #42	; 0x2a
   803bc:	47a0      	blx	r4
   803be:	bd10      	pop	{r4, pc}
   803c0:	400e1a50 	.word	0x400e1a50
   803c4:	000807ad 	.word	0x000807ad
   803c8:	000804b9 	.word	0x000804b9
   803cc:	28000079 	.word	0x28000079
   803d0:	28000001 	.word	0x28000001
   803d4:	08000001 	.word	0x08000001
   803d8:	400e0e00 	.word	0x400e0e00
   803dc:	00080589 	.word	0x00080589

000803e0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   803e0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   803e2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   803e6:	d016      	beq.n	80416 <pio_set_peripheral+0x36>
   803e8:	d80b      	bhi.n	80402 <pio_set_peripheral+0x22>
   803ea:	b149      	cbz	r1, 80400 <pio_set_peripheral+0x20>
   803ec:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   803f0:	d105      	bne.n	803fe <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   803f2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   803f4:	6f01      	ldr	r1, [r0, #112]	; 0x70
   803f6:	400b      	ands	r3, r1
   803f8:	ea23 0302 	bic.w	r3, r3, r2
   803fc:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   803fe:	6042      	str	r2, [r0, #4]
   80400:	4770      	bx	lr
	switch (ul_type) {
   80402:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80406:	d0fb      	beq.n	80400 <pio_set_peripheral+0x20>
   80408:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8040c:	d0f8      	beq.n	80400 <pio_set_peripheral+0x20>
   8040e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80412:	d1f4      	bne.n	803fe <pio_set_peripheral+0x1e>
   80414:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80416:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80418:	4313      	orrs	r3, r2
   8041a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8041c:	e7ef      	b.n	803fe <pio_set_peripheral+0x1e>

0008041e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8041e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80420:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80424:	bf14      	ite	ne
   80426:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80428:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8042a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8042e:	bf14      	ite	ne
   80430:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80432:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80434:	f012 0f02 	tst.w	r2, #2
   80438:	d107      	bne.n	8044a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8043a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8043e:	bf18      	it	ne
   80440:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80444:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80446:	6001      	str	r1, [r0, #0]
   80448:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8044a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8044e:	e7f9      	b.n	80444 <pio_set_input+0x26>

00080450 <pio_set_output>:
{
   80450:	b410      	push	{r4}
   80452:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80454:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80456:	b944      	cbnz	r4, 8046a <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80458:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8045a:	b143      	cbz	r3, 8046e <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   8045c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8045e:	b942      	cbnz	r2, 80472 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80460:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80462:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80464:	6001      	str	r1, [r0, #0]
}
   80466:	bc10      	pop	{r4}
   80468:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8046a:	6641      	str	r1, [r0, #100]	; 0x64
   8046c:	e7f5      	b.n	8045a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8046e:	6541      	str	r1, [r0, #84]	; 0x54
   80470:	e7f5      	b.n	8045e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80472:	6301      	str	r1, [r0, #48]	; 0x30
   80474:	e7f5      	b.n	80462 <pio_set_output+0x12>

00080476 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80476:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80478:	4770      	bx	lr

0008047a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8047a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8047c:	4770      	bx	lr

0008047e <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8047e:	0943      	lsrs	r3, r0, #5
   80480:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80484:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80488:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8048a:	f000 001f 	and.w	r0, r0, #31
   8048e:	2201      	movs	r2, #1
   80490:	fa02 f000 	lsl.w	r0, r2, r0
   80494:	6318      	str	r0, [r3, #48]	; 0x30
   80496:	4770      	bx	lr

00080498 <pio_toggle_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80498:	0943      	lsrs	r3, r0, #5
   8049a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8049e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   804a2:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   804a4:	6b99      	ldr	r1, [r3, #56]	; 0x38
   804a6:	f000 021f 	and.w	r2, r0, #31
   804aa:	2001      	movs	r0, #1
   804ac:	4090      	lsls	r0, r2
   804ae:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   804b0:	bf14      	ite	ne
   804b2:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   804b4:	6318      	streq	r0, [r3, #48]	; 0x30
   804b6:	4770      	bx	lr

000804b8 <pio_configure_pin>:
{
   804b8:	b570      	push	{r4, r5, r6, lr}
   804ba:	b082      	sub	sp, #8
   804bc:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   804be:	0943      	lsrs	r3, r0, #5
   804c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   804c4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   804c8:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   804ca:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   804ce:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   804d2:	d031      	beq.n	80538 <pio_configure_pin+0x80>
   804d4:	d816      	bhi.n	80504 <pio_configure_pin+0x4c>
   804d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   804da:	d01b      	beq.n	80514 <pio_configure_pin+0x5c>
   804dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   804e0:	d116      	bne.n	80510 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   804e2:	f000 001f 	and.w	r0, r0, #31
   804e6:	2601      	movs	r6, #1
   804e8:	4086      	lsls	r6, r0
   804ea:	4632      	mov	r2, r6
   804ec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   804f0:	4620      	mov	r0, r4
   804f2:	4b22      	ldr	r3, [pc, #136]	; (8057c <pio_configure_pin+0xc4>)
   804f4:	4798      	blx	r3
	if (ul_pull_up_enable) {
   804f6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   804fa:	bf14      	ite	ne
   804fc:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   804fe:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80500:	2001      	movs	r0, #1
   80502:	e017      	b.n	80534 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80504:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80508:	d021      	beq.n	8054e <pio_configure_pin+0x96>
   8050a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8050e:	d01e      	beq.n	8054e <pio_configure_pin+0x96>
		return 0;
   80510:	2000      	movs	r0, #0
   80512:	e00f      	b.n	80534 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80514:	f000 001f 	and.w	r0, r0, #31
   80518:	2601      	movs	r6, #1
   8051a:	4086      	lsls	r6, r0
   8051c:	4632      	mov	r2, r6
   8051e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80522:	4620      	mov	r0, r4
   80524:	4b15      	ldr	r3, [pc, #84]	; (8057c <pio_configure_pin+0xc4>)
   80526:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80528:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8052c:	bf14      	ite	ne
   8052e:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80530:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80532:	2001      	movs	r0, #1
}
   80534:	b002      	add	sp, #8
   80536:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80538:	f000 011f 	and.w	r1, r0, #31
   8053c:	2601      	movs	r6, #1
   8053e:	462a      	mov	r2, r5
   80540:	fa06 f101 	lsl.w	r1, r6, r1
   80544:	4620      	mov	r0, r4
   80546:	4b0e      	ldr	r3, [pc, #56]	; (80580 <pio_configure_pin+0xc8>)
   80548:	4798      	blx	r3
	return 1;
   8054a:	4630      	mov	r0, r6
		break;
   8054c:	e7f2      	b.n	80534 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8054e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80552:	f000 011f 	and.w	r1, r0, #31
   80556:	2601      	movs	r6, #1
   80558:	ea05 0306 	and.w	r3, r5, r6
   8055c:	9300      	str	r3, [sp, #0]
   8055e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80562:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80566:	bf14      	ite	ne
   80568:	2200      	movne	r2, #0
   8056a:	2201      	moveq	r2, #1
   8056c:	fa06 f101 	lsl.w	r1, r6, r1
   80570:	4620      	mov	r0, r4
   80572:	4c04      	ldr	r4, [pc, #16]	; (80584 <pio_configure_pin+0xcc>)
   80574:	47a0      	blx	r4
	return 1;
   80576:	4630      	mov	r0, r6
		break;
   80578:	e7dc      	b.n	80534 <pio_configure_pin+0x7c>
   8057a:	bf00      	nop
   8057c:	000803e1 	.word	0x000803e1
   80580:	0008041f 	.word	0x0008041f
   80584:	00080451 	.word	0x00080451

00080588 <pio_configure_pin_group>:
{
   80588:	b570      	push	{r4, r5, r6, lr}
   8058a:	b082      	sub	sp, #8
   8058c:	4605      	mov	r5, r0
   8058e:	460e      	mov	r6, r1
   80590:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80592:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80596:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8059a:	d027      	beq.n	805ec <pio_configure_pin_group+0x64>
   8059c:	d811      	bhi.n	805c2 <pio_configure_pin_group+0x3a>
   8059e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   805a2:	d016      	beq.n	805d2 <pio_configure_pin_group+0x4a>
   805a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   805a8:	d111      	bne.n	805ce <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   805aa:	460a      	mov	r2, r1
   805ac:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   805b0:	4b19      	ldr	r3, [pc, #100]	; (80618 <pio_configure_pin_group+0x90>)
   805b2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   805b4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   805b8:	bf14      	ite	ne
   805ba:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   805bc:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   805be:	2001      	movs	r0, #1
   805c0:	e012      	b.n	805e8 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   805c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   805c6:	d015      	beq.n	805f4 <pio_configure_pin_group+0x6c>
   805c8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   805cc:	d012      	beq.n	805f4 <pio_configure_pin_group+0x6c>
		return 0;
   805ce:	2000      	movs	r0, #0
   805d0:	e00a      	b.n	805e8 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   805d2:	460a      	mov	r2, r1
   805d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   805d8:	4b0f      	ldr	r3, [pc, #60]	; (80618 <pio_configure_pin_group+0x90>)
   805da:	4798      	blx	r3
	if (ul_pull_up_enable) {
   805dc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   805e0:	bf14      	ite	ne
   805e2:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   805e4:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   805e6:	2001      	movs	r0, #1
}
   805e8:	b002      	add	sp, #8
   805ea:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   805ec:	4b0b      	ldr	r3, [pc, #44]	; (8061c <pio_configure_pin_group+0x94>)
   805ee:	4798      	blx	r3
	return 1;
   805f0:	2001      	movs	r0, #1
		break;
   805f2:	e7f9      	b.n	805e8 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   805f4:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   805f8:	f004 0301 	and.w	r3, r4, #1
   805fc:	9300      	str	r3, [sp, #0]
   805fe:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80602:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80606:	bf14      	ite	ne
   80608:	2200      	movne	r2, #0
   8060a:	2201      	moveq	r2, #1
   8060c:	4631      	mov	r1, r6
   8060e:	4628      	mov	r0, r5
   80610:	4c03      	ldr	r4, [pc, #12]	; (80620 <pio_configure_pin_group+0x98>)
   80612:	47a0      	blx	r4
	return 1;
   80614:	2001      	movs	r0, #1
		break;
   80616:	e7e7      	b.n	805e8 <pio_configure_pin_group+0x60>
   80618:	000803e1 	.word	0x000803e1
   8061c:	0008041f 	.word	0x0008041f
   80620:	00080451 	.word	0x00080451

00080624 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80628:	4604      	mov	r4, r0
   8062a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8062c:	4b0e      	ldr	r3, [pc, #56]	; (80668 <pio_handler_process+0x44>)
   8062e:	4798      	blx	r3
   80630:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80632:	4620      	mov	r0, r4
   80634:	4b0d      	ldr	r3, [pc, #52]	; (8066c <pio_handler_process+0x48>)
   80636:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80638:	4005      	ands	r5, r0
   8063a:	d013      	beq.n	80664 <pio_handler_process+0x40>
   8063c:	4c0c      	ldr	r4, [pc, #48]	; (80670 <pio_handler_process+0x4c>)
   8063e:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80642:	e003      	b.n	8064c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80644:	42b4      	cmp	r4, r6
   80646:	d00d      	beq.n	80664 <pio_handler_process+0x40>
   80648:	3410      	adds	r4, #16
		while (status != 0) {
   8064a:	b15d      	cbz	r5, 80664 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   8064c:	6820      	ldr	r0, [r4, #0]
   8064e:	4540      	cmp	r0, r8
   80650:	d1f8      	bne.n	80644 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80652:	6861      	ldr	r1, [r4, #4]
   80654:	4229      	tst	r1, r5
   80656:	d0f5      	beq.n	80644 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80658:	68e3      	ldr	r3, [r4, #12]
   8065a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   8065c:	6863      	ldr	r3, [r4, #4]
   8065e:	ea25 0503 	bic.w	r5, r5, r3
   80662:	e7ef      	b.n	80644 <pio_handler_process+0x20>
   80664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80668:	00080477 	.word	0x00080477
   8066c:	0008047b 	.word	0x0008047b
   80670:	20070584 	.word	0x20070584

00080674 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80674:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80676:	210b      	movs	r1, #11
   80678:	4801      	ldr	r0, [pc, #4]	; (80680 <PIOA_Handler+0xc>)
   8067a:	4b02      	ldr	r3, [pc, #8]	; (80684 <PIOA_Handler+0x10>)
   8067c:	4798      	blx	r3
   8067e:	bd08      	pop	{r3, pc}
   80680:	400e0e00 	.word	0x400e0e00
   80684:	00080625 	.word	0x00080625

00080688 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80688:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8068a:	210c      	movs	r1, #12
   8068c:	4801      	ldr	r0, [pc, #4]	; (80694 <PIOB_Handler+0xc>)
   8068e:	4b02      	ldr	r3, [pc, #8]	; (80698 <PIOB_Handler+0x10>)
   80690:	4798      	blx	r3
   80692:	bd08      	pop	{r3, pc}
   80694:	400e1000 	.word	0x400e1000
   80698:	00080625 	.word	0x00080625

0008069c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8069c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8069e:	210d      	movs	r1, #13
   806a0:	4801      	ldr	r0, [pc, #4]	; (806a8 <PIOC_Handler+0xc>)
   806a2:	4b02      	ldr	r3, [pc, #8]	; (806ac <PIOC_Handler+0x10>)
   806a4:	4798      	blx	r3
   806a6:	bd08      	pop	{r3, pc}
   806a8:	400e1200 	.word	0x400e1200
   806ac:	00080625 	.word	0x00080625

000806b0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   806b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   806b2:	210e      	movs	r1, #14
   806b4:	4801      	ldr	r0, [pc, #4]	; (806bc <PIOD_Handler+0xc>)
   806b6:	4b02      	ldr	r3, [pc, #8]	; (806c0 <PIOD_Handler+0x10>)
   806b8:	4798      	blx	r3
   806ba:	bd08      	pop	{r3, pc}
   806bc:	400e1400 	.word	0x400e1400
   806c0:	00080625 	.word	0x00080625

000806c4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   806c4:	4a17      	ldr	r2, [pc, #92]	; (80724 <pmc_switch_mck_to_pllack+0x60>)
   806c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   806c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   806cc:	4318      	orrs	r0, r3
   806ce:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   806d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806d2:	f013 0f08 	tst.w	r3, #8
   806d6:	d10a      	bne.n	806ee <pmc_switch_mck_to_pllack+0x2a>
   806d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   806dc:	4911      	ldr	r1, [pc, #68]	; (80724 <pmc_switch_mck_to_pllack+0x60>)
   806de:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   806e0:	f012 0f08 	tst.w	r2, #8
   806e4:	d103      	bne.n	806ee <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   806e6:	3b01      	subs	r3, #1
   806e8:	d1f9      	bne.n	806de <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   806ea:	2001      	movs	r0, #1
   806ec:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   806ee:	4a0d      	ldr	r2, [pc, #52]	; (80724 <pmc_switch_mck_to_pllack+0x60>)
   806f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   806f2:	f023 0303 	bic.w	r3, r3, #3
   806f6:	f043 0302 	orr.w	r3, r3, #2
   806fa:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   806fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806fe:	f013 0f08 	tst.w	r3, #8
   80702:	d10a      	bne.n	8071a <pmc_switch_mck_to_pllack+0x56>
   80704:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80708:	4906      	ldr	r1, [pc, #24]	; (80724 <pmc_switch_mck_to_pllack+0x60>)
   8070a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8070c:	f012 0f08 	tst.w	r2, #8
   80710:	d105      	bne.n	8071e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80712:	3b01      	subs	r3, #1
   80714:	d1f9      	bne.n	8070a <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80716:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80718:	4770      	bx	lr
	return 0;
   8071a:	2000      	movs	r0, #0
   8071c:	4770      	bx	lr
   8071e:	2000      	movs	r0, #0
   80720:	4770      	bx	lr
   80722:	bf00      	nop
   80724:	400e0600 	.word	0x400e0600

00080728 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80728:	b9c8      	cbnz	r0, 8075e <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8072a:	4a11      	ldr	r2, [pc, #68]	; (80770 <pmc_switch_mainck_to_xtal+0x48>)
   8072c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8072e:	0209      	lsls	r1, r1, #8
   80730:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80732:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80736:	f023 0303 	bic.w	r3, r3, #3
   8073a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8073e:	f043 0301 	orr.w	r3, r3, #1
   80742:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80744:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80746:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80748:	f013 0f01 	tst.w	r3, #1
   8074c:	d0fb      	beq.n	80746 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8074e:	4a08      	ldr	r2, [pc, #32]	; (80770 <pmc_switch_mainck_to_xtal+0x48>)
   80750:	6a13      	ldr	r3, [r2, #32]
   80752:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8075a:	6213      	str	r3, [r2, #32]
   8075c:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8075e:	4904      	ldr	r1, [pc, #16]	; (80770 <pmc_switch_mainck_to_xtal+0x48>)
   80760:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80762:	4a04      	ldr	r2, [pc, #16]	; (80774 <pmc_switch_mainck_to_xtal+0x4c>)
   80764:	401a      	ands	r2, r3
   80766:	4b04      	ldr	r3, [pc, #16]	; (80778 <pmc_switch_mainck_to_xtal+0x50>)
   80768:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8076a:	620b      	str	r3, [r1, #32]
   8076c:	4770      	bx	lr
   8076e:	bf00      	nop
   80770:	400e0600 	.word	0x400e0600
   80774:	fec8fffc 	.word	0xfec8fffc
   80778:	01370002 	.word	0x01370002

0008077c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8077c:	4b02      	ldr	r3, [pc, #8]	; (80788 <pmc_osc_is_ready_mainck+0xc>)
   8077e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80780:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80784:	4770      	bx	lr
   80786:	bf00      	nop
   80788:	400e0600 	.word	0x400e0600

0008078c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8078c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80790:	4b01      	ldr	r3, [pc, #4]	; (80798 <pmc_disable_pllack+0xc>)
   80792:	629a      	str	r2, [r3, #40]	; 0x28
   80794:	4770      	bx	lr
   80796:	bf00      	nop
   80798:	400e0600 	.word	0x400e0600

0008079c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8079c:	4b02      	ldr	r3, [pc, #8]	; (807a8 <pmc_is_locked_pllack+0xc>)
   8079e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   807a0:	f000 0002 	and.w	r0, r0, #2
   807a4:	4770      	bx	lr
   807a6:	bf00      	nop
   807a8:	400e0600 	.word	0x400e0600

000807ac <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   807ac:	282c      	cmp	r0, #44	; 0x2c
   807ae:	d81e      	bhi.n	807ee <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   807b0:	281f      	cmp	r0, #31
   807b2:	d80c      	bhi.n	807ce <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   807b4:	4b11      	ldr	r3, [pc, #68]	; (807fc <pmc_enable_periph_clk+0x50>)
   807b6:	699a      	ldr	r2, [r3, #24]
   807b8:	2301      	movs	r3, #1
   807ba:	4083      	lsls	r3, r0
   807bc:	4393      	bics	r3, r2
   807be:	d018      	beq.n	807f2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   807c0:	2301      	movs	r3, #1
   807c2:	fa03 f000 	lsl.w	r0, r3, r0
   807c6:	4b0d      	ldr	r3, [pc, #52]	; (807fc <pmc_enable_periph_clk+0x50>)
   807c8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   807ca:	2000      	movs	r0, #0
   807cc:	4770      	bx	lr
		ul_id -= 32;
   807ce:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   807d0:	4b0a      	ldr	r3, [pc, #40]	; (807fc <pmc_enable_periph_clk+0x50>)
   807d2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   807d6:	2301      	movs	r3, #1
   807d8:	4083      	lsls	r3, r0
   807da:	4393      	bics	r3, r2
   807dc:	d00b      	beq.n	807f6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   807de:	2301      	movs	r3, #1
   807e0:	fa03 f000 	lsl.w	r0, r3, r0
   807e4:	4b05      	ldr	r3, [pc, #20]	; (807fc <pmc_enable_periph_clk+0x50>)
   807e6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   807ea:	2000      	movs	r0, #0
   807ec:	4770      	bx	lr
		return 1;
   807ee:	2001      	movs	r0, #1
   807f0:	4770      	bx	lr
	return 0;
   807f2:	2000      	movs	r0, #0
   807f4:	4770      	bx	lr
   807f6:	2000      	movs	r0, #0
}
   807f8:	4770      	bx	lr
   807fa:	bf00      	nop
   807fc:	400e0600 	.word	0x400e0600

00080800 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80800:	e7fe      	b.n	80800 <Dummy_Handler>
	...

00080804 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80804:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80806:	4b1c      	ldr	r3, [pc, #112]	; (80878 <Reset_Handler+0x74>)
   80808:	4a1c      	ldr	r2, [pc, #112]	; (8087c <Reset_Handler+0x78>)
   8080a:	429a      	cmp	r2, r3
   8080c:	d010      	beq.n	80830 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8080e:	4b1c      	ldr	r3, [pc, #112]	; (80880 <Reset_Handler+0x7c>)
   80810:	4a19      	ldr	r2, [pc, #100]	; (80878 <Reset_Handler+0x74>)
   80812:	429a      	cmp	r2, r3
   80814:	d20c      	bcs.n	80830 <Reset_Handler+0x2c>
   80816:	3b01      	subs	r3, #1
   80818:	1a9b      	subs	r3, r3, r2
   8081a:	f023 0303 	bic.w	r3, r3, #3
   8081e:	3304      	adds	r3, #4
   80820:	4413      	add	r3, r2
   80822:	4916      	ldr	r1, [pc, #88]	; (8087c <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80824:	f851 0b04 	ldr.w	r0, [r1], #4
   80828:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   8082c:	429a      	cmp	r2, r3
   8082e:	d1f9      	bne.n	80824 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80830:	4b14      	ldr	r3, [pc, #80]	; (80884 <Reset_Handler+0x80>)
   80832:	4a15      	ldr	r2, [pc, #84]	; (80888 <Reset_Handler+0x84>)
   80834:	429a      	cmp	r2, r3
   80836:	d20a      	bcs.n	8084e <Reset_Handler+0x4a>
   80838:	3b01      	subs	r3, #1
   8083a:	1a9b      	subs	r3, r3, r2
   8083c:	f023 0303 	bic.w	r3, r3, #3
   80840:	3304      	adds	r3, #4
   80842:	4413      	add	r3, r2
		*pDest++ = 0;
   80844:	2100      	movs	r1, #0
   80846:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   8084a:	4293      	cmp	r3, r2
   8084c:	d1fb      	bne.n	80846 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8084e:	4b0f      	ldr	r3, [pc, #60]	; (8088c <Reset_Handler+0x88>)
   80850:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80854:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80858:	490d      	ldr	r1, [pc, #52]	; (80890 <Reset_Handler+0x8c>)
   8085a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8085c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80864:	d203      	bcs.n	8086e <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80866:	688b      	ldr	r3, [r1, #8]
   80868:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8086c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8086e:	4b09      	ldr	r3, [pc, #36]	; (80894 <Reset_Handler+0x90>)
   80870:	4798      	blx	r3

	/* Branch to main function */
	main();
   80872:	4b09      	ldr	r3, [pc, #36]	; (80898 <Reset_Handler+0x94>)
   80874:	4798      	blx	r3
   80876:	e7fe      	b.n	80876 <Reset_Handler+0x72>
   80878:	20070000 	.word	0x20070000
   8087c:	00080b64 	.word	0x00080b64
   80880:	20070564 	.word	0x20070564
   80884:	20070618 	.word	0x20070618
   80888:	20070564 	.word	0x20070564
   8088c:	00080000 	.word	0x00080000
   80890:	e000ed00 	.word	0xe000ed00
   80894:	000809b5 	.word	0x000809b5
   80898:	00080249 	.word	0x00080249

0008089c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8089c:	4b3d      	ldr	r3, [pc, #244]	; (80994 <SystemCoreClockUpdate+0xf8>)
   8089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   808a0:	f003 0303 	and.w	r3, r3, #3
   808a4:	2b03      	cmp	r3, #3
   808a6:	d80e      	bhi.n	808c6 <SystemCoreClockUpdate+0x2a>
   808a8:	e8df f003 	tbb	[pc, r3]
   808ac:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   808b0:	4b39      	ldr	r3, [pc, #228]	; (80998 <SystemCoreClockUpdate+0xfc>)
   808b2:	695b      	ldr	r3, [r3, #20]
   808b4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   808b8:	bf14      	ite	ne
   808ba:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   808be:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   808c2:	4b36      	ldr	r3, [pc, #216]	; (8099c <SystemCoreClockUpdate+0x100>)
   808c4:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   808c6:	4b33      	ldr	r3, [pc, #204]	; (80994 <SystemCoreClockUpdate+0xf8>)
   808c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   808ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
   808ce:	2b70      	cmp	r3, #112	; 0x70
   808d0:	d057      	beq.n	80982 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   808d2:	4b30      	ldr	r3, [pc, #192]	; (80994 <SystemCoreClockUpdate+0xf8>)
   808d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   808d6:	4931      	ldr	r1, [pc, #196]	; (8099c <SystemCoreClockUpdate+0x100>)
   808d8:	f3c2 1202 	ubfx	r2, r2, #4, #3
   808dc:	680b      	ldr	r3, [r1, #0]
   808de:	40d3      	lsrs	r3, r2
   808e0:	600b      	str	r3, [r1, #0]
   808e2:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   808e4:	4b2b      	ldr	r3, [pc, #172]	; (80994 <SystemCoreClockUpdate+0xf8>)
   808e6:	6a1b      	ldr	r3, [r3, #32]
   808e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   808ec:	d003      	beq.n	808f6 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   808ee:	4a2c      	ldr	r2, [pc, #176]	; (809a0 <SystemCoreClockUpdate+0x104>)
   808f0:	4b2a      	ldr	r3, [pc, #168]	; (8099c <SystemCoreClockUpdate+0x100>)
   808f2:	601a      	str	r2, [r3, #0]
   808f4:	e7e7      	b.n	808c6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   808f6:	4a2b      	ldr	r2, [pc, #172]	; (809a4 <SystemCoreClockUpdate+0x108>)
   808f8:	4b28      	ldr	r3, [pc, #160]	; (8099c <SystemCoreClockUpdate+0x100>)
   808fa:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   808fc:	4b25      	ldr	r3, [pc, #148]	; (80994 <SystemCoreClockUpdate+0xf8>)
   808fe:	6a1b      	ldr	r3, [r3, #32]
   80900:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80904:	2b10      	cmp	r3, #16
   80906:	d005      	beq.n	80914 <SystemCoreClockUpdate+0x78>
   80908:	2b20      	cmp	r3, #32
   8090a:	d1dc      	bne.n	808c6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   8090c:	4a24      	ldr	r2, [pc, #144]	; (809a0 <SystemCoreClockUpdate+0x104>)
   8090e:	4b23      	ldr	r3, [pc, #140]	; (8099c <SystemCoreClockUpdate+0x100>)
   80910:	601a      	str	r2, [r3, #0]
				break;
   80912:	e7d8      	b.n	808c6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80914:	4a24      	ldr	r2, [pc, #144]	; (809a8 <SystemCoreClockUpdate+0x10c>)
   80916:	4b21      	ldr	r3, [pc, #132]	; (8099c <SystemCoreClockUpdate+0x100>)
   80918:	601a      	str	r2, [r3, #0]
				break;
   8091a:	e7d4      	b.n	808c6 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8091c:	4b1d      	ldr	r3, [pc, #116]	; (80994 <SystemCoreClockUpdate+0xf8>)
   8091e:	6a1b      	ldr	r3, [r3, #32]
   80920:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80924:	d00c      	beq.n	80940 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80926:	4a1e      	ldr	r2, [pc, #120]	; (809a0 <SystemCoreClockUpdate+0x104>)
   80928:	4b1c      	ldr	r3, [pc, #112]	; (8099c <SystemCoreClockUpdate+0x100>)
   8092a:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8092c:	4b19      	ldr	r3, [pc, #100]	; (80994 <SystemCoreClockUpdate+0xf8>)
   8092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80930:	f003 0303 	and.w	r3, r3, #3
   80934:	2b02      	cmp	r3, #2
   80936:	d016      	beq.n	80966 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80938:	4a1c      	ldr	r2, [pc, #112]	; (809ac <SystemCoreClockUpdate+0x110>)
   8093a:	4b18      	ldr	r3, [pc, #96]	; (8099c <SystemCoreClockUpdate+0x100>)
   8093c:	601a      	str	r2, [r3, #0]
   8093e:	e7c2      	b.n	808c6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80940:	4a18      	ldr	r2, [pc, #96]	; (809a4 <SystemCoreClockUpdate+0x108>)
   80942:	4b16      	ldr	r3, [pc, #88]	; (8099c <SystemCoreClockUpdate+0x100>)
   80944:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80946:	4b13      	ldr	r3, [pc, #76]	; (80994 <SystemCoreClockUpdate+0xf8>)
   80948:	6a1b      	ldr	r3, [r3, #32]
   8094a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8094e:	2b10      	cmp	r3, #16
   80950:	d005      	beq.n	8095e <SystemCoreClockUpdate+0xc2>
   80952:	2b20      	cmp	r3, #32
   80954:	d1ea      	bne.n	8092c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80956:	4a12      	ldr	r2, [pc, #72]	; (809a0 <SystemCoreClockUpdate+0x104>)
   80958:	4b10      	ldr	r3, [pc, #64]	; (8099c <SystemCoreClockUpdate+0x100>)
   8095a:	601a      	str	r2, [r3, #0]
				break;
   8095c:	e7e6      	b.n	8092c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8095e:	4a12      	ldr	r2, [pc, #72]	; (809a8 <SystemCoreClockUpdate+0x10c>)
   80960:	4b0e      	ldr	r3, [pc, #56]	; (8099c <SystemCoreClockUpdate+0x100>)
   80962:	601a      	str	r2, [r3, #0]
				break;
   80964:	e7e2      	b.n	8092c <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80966:	4a0b      	ldr	r2, [pc, #44]	; (80994 <SystemCoreClockUpdate+0xf8>)
   80968:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8096a:	6a92      	ldr	r2, [r2, #40]	; 0x28
   8096c:	480b      	ldr	r0, [pc, #44]	; (8099c <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8096e:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80972:	6803      	ldr	r3, [r0, #0]
   80974:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80978:	b2d2      	uxtb	r2, r2
   8097a:	fbb3 f3f2 	udiv	r3, r3, r2
   8097e:	6003      	str	r3, [r0, #0]
   80980:	e7a1      	b.n	808c6 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80982:	4a06      	ldr	r2, [pc, #24]	; (8099c <SystemCoreClockUpdate+0x100>)
   80984:	6813      	ldr	r3, [r2, #0]
   80986:	490a      	ldr	r1, [pc, #40]	; (809b0 <SystemCoreClockUpdate+0x114>)
   80988:	fba1 1303 	umull	r1, r3, r1, r3
   8098c:	085b      	lsrs	r3, r3, #1
   8098e:	6013      	str	r3, [r2, #0]
   80990:	4770      	bx	lr
   80992:	bf00      	nop
   80994:	400e0600 	.word	0x400e0600
   80998:	400e1a10 	.word	0x400e1a10
   8099c:	20070130 	.word	0x20070130
   809a0:	00b71b00 	.word	0x00b71b00
   809a4:	003d0900 	.word	0x003d0900
   809a8:	007a1200 	.word	0x007a1200
   809ac:	0e4e1c00 	.word	0x0e4e1c00
   809b0:	aaaaaaab 	.word	0xaaaaaaab

000809b4 <__libc_init_array>:
   809b4:	b570      	push	{r4, r5, r6, lr}
   809b6:	4e0f      	ldr	r6, [pc, #60]	; (809f4 <__libc_init_array+0x40>)
   809b8:	4d0f      	ldr	r5, [pc, #60]	; (809f8 <__libc_init_array+0x44>)
   809ba:	1b76      	subs	r6, r6, r5
   809bc:	10b6      	asrs	r6, r6, #2
   809be:	bf18      	it	ne
   809c0:	2400      	movne	r4, #0
   809c2:	d005      	beq.n	809d0 <__libc_init_array+0x1c>
   809c4:	3401      	adds	r4, #1
   809c6:	f855 3b04 	ldr.w	r3, [r5], #4
   809ca:	4798      	blx	r3
   809cc:	42a6      	cmp	r6, r4
   809ce:	d1f9      	bne.n	809c4 <__libc_init_array+0x10>
   809d0:	4e0a      	ldr	r6, [pc, #40]	; (809fc <__libc_init_array+0x48>)
   809d2:	4d0b      	ldr	r5, [pc, #44]	; (80a00 <__libc_init_array+0x4c>)
   809d4:	f000 f8b4 	bl	80b40 <_init>
   809d8:	1b76      	subs	r6, r6, r5
   809da:	10b6      	asrs	r6, r6, #2
   809dc:	bf18      	it	ne
   809de:	2400      	movne	r4, #0
   809e0:	d006      	beq.n	809f0 <__libc_init_array+0x3c>
   809e2:	3401      	adds	r4, #1
   809e4:	f855 3b04 	ldr.w	r3, [r5], #4
   809e8:	4798      	blx	r3
   809ea:	42a6      	cmp	r6, r4
   809ec:	d1f9      	bne.n	809e2 <__libc_init_array+0x2e>
   809ee:	bd70      	pop	{r4, r5, r6, pc}
   809f0:	bd70      	pop	{r4, r5, r6, pc}
   809f2:	bf00      	nop
   809f4:	00080b4c 	.word	0x00080b4c
   809f8:	00080b4c 	.word	0x00080b4c
   809fc:	00080b54 	.word	0x00080b54
   80a00:	00080b4c 	.word	0x00080b4c

00080a04 <register_fini>:
   80a04:	4b02      	ldr	r3, [pc, #8]	; (80a10 <register_fini+0xc>)
   80a06:	b113      	cbz	r3, 80a0e <register_fini+0xa>
   80a08:	4802      	ldr	r0, [pc, #8]	; (80a14 <register_fini+0x10>)
   80a0a:	f000 b805 	b.w	80a18 <atexit>
   80a0e:	4770      	bx	lr
   80a10:	00000000 	.word	0x00000000
   80a14:	00080a25 	.word	0x00080a25

00080a18 <atexit>:
   80a18:	2300      	movs	r3, #0
   80a1a:	4601      	mov	r1, r0
   80a1c:	461a      	mov	r2, r3
   80a1e:	4618      	mov	r0, r3
   80a20:	f000 b81e 	b.w	80a60 <__register_exitproc>

00080a24 <__libc_fini_array>:
   80a24:	b538      	push	{r3, r4, r5, lr}
   80a26:	4c0a      	ldr	r4, [pc, #40]	; (80a50 <__libc_fini_array+0x2c>)
   80a28:	4d0a      	ldr	r5, [pc, #40]	; (80a54 <__libc_fini_array+0x30>)
   80a2a:	1b64      	subs	r4, r4, r5
   80a2c:	10a4      	asrs	r4, r4, #2
   80a2e:	d00a      	beq.n	80a46 <__libc_fini_array+0x22>
   80a30:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80a34:	3b01      	subs	r3, #1
   80a36:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80a3a:	3c01      	subs	r4, #1
   80a3c:	f855 3904 	ldr.w	r3, [r5], #-4
   80a40:	4798      	blx	r3
   80a42:	2c00      	cmp	r4, #0
   80a44:	d1f9      	bne.n	80a3a <__libc_fini_array+0x16>
   80a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80a4a:	f000 b883 	b.w	80b54 <_fini>
   80a4e:	bf00      	nop
   80a50:	00080b64 	.word	0x00080b64
   80a54:	00080b60 	.word	0x00080b60

00080a58 <__retarget_lock_acquire_recursive>:
   80a58:	4770      	bx	lr
   80a5a:	bf00      	nop

00080a5c <__retarget_lock_release_recursive>:
   80a5c:	4770      	bx	lr
   80a5e:	bf00      	nop

00080a60 <__register_exitproc>:
   80a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80a64:	4d2c      	ldr	r5, [pc, #176]	; (80b18 <__register_exitproc+0xb8>)
   80a66:	4606      	mov	r6, r0
   80a68:	6828      	ldr	r0, [r5, #0]
   80a6a:	4698      	mov	r8, r3
   80a6c:	460f      	mov	r7, r1
   80a6e:	4691      	mov	r9, r2
   80a70:	f7ff fff2 	bl	80a58 <__retarget_lock_acquire_recursive>
   80a74:	4b29      	ldr	r3, [pc, #164]	; (80b1c <__register_exitproc+0xbc>)
   80a76:	681c      	ldr	r4, [r3, #0]
   80a78:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80a7c:	2b00      	cmp	r3, #0
   80a7e:	d03e      	beq.n	80afe <__register_exitproc+0x9e>
   80a80:	685a      	ldr	r2, [r3, #4]
   80a82:	2a1f      	cmp	r2, #31
   80a84:	dc1c      	bgt.n	80ac0 <__register_exitproc+0x60>
   80a86:	f102 0e01 	add.w	lr, r2, #1
   80a8a:	b176      	cbz	r6, 80aaa <__register_exitproc+0x4a>
   80a8c:	2101      	movs	r1, #1
   80a8e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80a92:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80a96:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80a9a:	4091      	lsls	r1, r2
   80a9c:	4308      	orrs	r0, r1
   80a9e:	2e02      	cmp	r6, #2
   80aa0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80aa4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80aa8:	d023      	beq.n	80af2 <__register_exitproc+0x92>
   80aaa:	3202      	adds	r2, #2
   80aac:	f8c3 e004 	str.w	lr, [r3, #4]
   80ab0:	6828      	ldr	r0, [r5, #0]
   80ab2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80ab6:	f7ff ffd1 	bl	80a5c <__retarget_lock_release_recursive>
   80aba:	2000      	movs	r0, #0
   80abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80ac0:	4b17      	ldr	r3, [pc, #92]	; (80b20 <__register_exitproc+0xc0>)
   80ac2:	b30b      	cbz	r3, 80b08 <__register_exitproc+0xa8>
   80ac4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80ac8:	f3af 8000 	nop.w
   80acc:	4603      	mov	r3, r0
   80ace:	b1d8      	cbz	r0, 80b08 <__register_exitproc+0xa8>
   80ad0:	2000      	movs	r0, #0
   80ad2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80ad6:	f04f 0e01 	mov.w	lr, #1
   80ada:	6058      	str	r0, [r3, #4]
   80adc:	6019      	str	r1, [r3, #0]
   80ade:	4602      	mov	r2, r0
   80ae0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80ae4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80ae8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80aec:	2e00      	cmp	r6, #0
   80aee:	d0dc      	beq.n	80aaa <__register_exitproc+0x4a>
   80af0:	e7cc      	b.n	80a8c <__register_exitproc+0x2c>
   80af2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80af6:	4301      	orrs	r1, r0
   80af8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80afc:	e7d5      	b.n	80aaa <__register_exitproc+0x4a>
   80afe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80b02:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80b06:	e7bb      	b.n	80a80 <__register_exitproc+0x20>
   80b08:	6828      	ldr	r0, [r5, #0]
   80b0a:	f7ff ffa7 	bl	80a5c <__retarget_lock_release_recursive>
   80b0e:	f04f 30ff 	mov.w	r0, #4294967295
   80b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b16:	bf00      	nop
   80b18:	20070560 	.word	0x20070560
   80b1c:	00080b3c 	.word	0x00080b3c
   80b20:	00000000 	.word	0x00000000

00080b24 <usart_console_settings>:
   80b24:	0001c200 000000c0 00000800 00000000     ................
	...

00080b3c <_global_impure_ptr>:
   80b3c:	20070138                                8.. 

00080b40 <_init>:
   80b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b42:	bf00      	nop
   80b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80b46:	bc08      	pop	{r3}
   80b48:	469e      	mov	lr, r3
   80b4a:	4770      	bx	lr

00080b4c <__init_array_start>:
   80b4c:	00080a05 	.word	0x00080a05

00080b50 <__frame_dummy_init_array_entry>:
   80b50:	00080119                                ....

00080b54 <_fini>:
   80b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b56:	bf00      	nop
   80b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80b5a:	bc08      	pop	{r3}
   80b5c:	469e      	mov	lr, r3
   80b5e:	4770      	bx	lr

00080b60 <__fini_array_start>:
   80b60:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900 00000000                       ..=.....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	200705f4                                ... 
