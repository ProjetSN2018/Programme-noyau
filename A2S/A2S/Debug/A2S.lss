
A2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b374  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008b374  0008b374  0001b374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000fe0  20000000  0008b37c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001a3c  20000fe0  0008c35c  00020fe0  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020fe0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00021009  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002a158  00000000  00000000  00021062  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005f46  00000000  00000000  0004b1ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006a90  00000000  00000000  00051100  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ef0  00000000  00000000  00057b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d58  00000000  00000000  00058a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c8bd  00000000  00000000  000597d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001e126  00000000  00000000  00076095  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054952  00000000  00000000  000941bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002e94  00000000  00000000  000e8b10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 b1 49 08 00 ad 49 08 00 ad 49 08 00     .@. .I...I...I..
   80010:	ad 49 08 00 ad 49 08 00 ad 49 08 00 00 00 00 00     .I...I...I......
	...
   8002c:	ad 49 08 00 ad 49 08 00 00 00 00 00 ad 49 08 00     .I...I.......I..
   8003c:	ad 49 08 00 ad 49 08 00 ad 49 08 00 49 15 08 00     .I...I...I..I...
   8004c:	ad 49 08 00 ad 49 08 00 ad 49 08 00 ad 49 08 00     .I...I...I...I..
   8005c:	ad 49 08 00 01 37 08 00 ad 49 08 00 e9 02 08 00     .I...7...I......
   8006c:	fd 02 08 00 ad 49 08 00 b1 0d 08 00 ad 49 08 00     .....I.......I..
   8007c:	ad 49 08 00 ad 49 08 00 ad 49 08 00 ad 49 08 00     .I...I...I...I..
   8008c:	ad 49 08 00 ad 49 08 00 ad 49 08 00 81 3a 08 00     .I...I...I...:..
   8009c:	ad 49 08 00 ad 49 08 00 ad 49 08 00 ad 49 08 00     .I...I...I...I..
   800ac:	ad 49 08 00 ad 49 08 00 ad 49 08 00 ad 49 08 00     .I...I...I...I..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000fe0 	.word	0x20000fe0
   800d8:	00000000 	.word	0x00000000
   800dc:	0008b37c 	.word	0x0008b37c

000800e0 <frame_dummy>:
   800e0:	4b0c      	ldr	r3, [pc, #48]	; (80114 <frame_dummy+0x34>)
   800e2:	b143      	cbz	r3, 800f6 <frame_dummy+0x16>
   800e4:	480c      	ldr	r0, [pc, #48]	; (80118 <frame_dummy+0x38>)
   800e6:	b510      	push	{r4, lr}
   800e8:	490c      	ldr	r1, [pc, #48]	; (8011c <frame_dummy+0x3c>)
   800ea:	f3af 8000 	nop.w
   800ee:	480c      	ldr	r0, [pc, #48]	; (80120 <frame_dummy+0x40>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b923      	cbnz	r3, 800fe <frame_dummy+0x1e>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	480a      	ldr	r0, [pc, #40]	; (80120 <frame_dummy+0x40>)
   800f8:	6803      	ldr	r3, [r0, #0]
   800fa:	b933      	cbnz	r3, 8010a <frame_dummy+0x2a>
   800fc:	4770      	bx	lr
   800fe:	4b09      	ldr	r3, [pc, #36]	; (80124 <frame_dummy+0x44>)
   80100:	2b00      	cmp	r3, #0
   80102:	d0f7      	beq.n	800f4 <frame_dummy+0x14>
   80104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80108:	4718      	bx	r3
   8010a:	4b06      	ldr	r3, [pc, #24]	; (80124 <frame_dummy+0x44>)
   8010c:	2b00      	cmp	r3, #0
   8010e:	d0f5      	beq.n	800fc <frame_dummy+0x1c>
   80110:	4718      	bx	r3
   80112:	bf00      	nop
   80114:	00000000 	.word	0x00000000
   80118:	0008b37c 	.word	0x0008b37c
   8011c:	20000fe4 	.word	0x20000fe4
   80120:	0008b37c 	.word	0x0008b37c
   80124:	00000000 	.word	0x00000000

00080128 <Appli>:




uint32_t Appli(uint32_t sc, ...)
{
   80128:	b40f      	push	{r0, r1, r2, r3}
   8012a:	b538      	push	{r3, r4, r5, lr}
   8012c:	9904      	ldr	r1, [sp, #16]
	switch(sc)
   8012e:	2964      	cmp	r1, #100	; 0x64
   80130:	d005      	beq.n	8013e <Appli+0x16>
   80132:	2966      	cmp	r1, #102	; 0x66
   80134:	d05b      	beq.n	801ee <Appli+0xc6>
//#endif
		break;


	default:
		Error(ERROR_APPLI_SWITCH_BAD_SC,sc);
   80136:	2010      	movs	r0, #16
   80138:	4b2f      	ldr	r3, [pc, #188]	; (801f8 <Appli+0xd0>)
   8013a:	4798      	blx	r3
   8013c:	e057      	b.n	801ee <Appli+0xc6>
		gpio_configure_pin(CMD_MOSFET,			CMD_MOSFET_FLAGS);
   8013e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80142:	2020      	movs	r0, #32
   80144:	4c2d      	ldr	r4, [pc, #180]	; (801fc <Appli+0xd4>)
   80146:	47a0      	blx	r4
		gpio_configure_pin(CMD_MOT_SERRURE,		CMD_MOT_SERRURE_FLAGS);
   80148:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8014c:	2021      	movs	r0, #33	; 0x21
   8014e:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS,			CMD_RELAIS_FLAGS);
   80150:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80154:	2022      	movs	r0, #34	; 0x22
   80156:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS_1,		CMD_RELAIS_1_FLAGS);
   80158:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8015c:	2023      	movs	r0, #35	; 0x23
   8015e:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS_2,		CMD_RELAIS_2_FLAGS);
   80160:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80164:	2024      	movs	r0, #36	; 0x24
   80166:	47a0      	blx	r4
		pmc_enable_periph_clk(ID_PIOA);
   80168:	200a      	movs	r0, #10
   8016a:	4d25      	ldr	r5, [pc, #148]	; (80200 <Appli+0xd8>)
   8016c:	47a8      	blx	r5
		pmc_enable_periph_clk(ID_PIOB);
   8016e:	200b      	movs	r0, #11
   80170:	47a8      	blx	r5
		gpio_configure_pin(PENE_OUVERT,			PENE_OUVERT_FLAGS);
   80172:	4d24      	ldr	r5, [pc, #144]	; (80204 <Appli+0xdc>)
   80174:	4629      	mov	r1, r5
   80176:	200e      	movs	r0, #14
   80178:	47a0      	blx	r4
		gpio_configure_pin(PENE_FERME,			PENE_FERME_FLAGS);
   8017a:	4629      	mov	r1, r5
   8017c:	200f      	movs	r0, #15
   8017e:	47a0      	blx	r4
		gpio_configure_pin(IN_ILS,				IN_ILS_FLAGS);
   80180:	4629      	mov	r1, r5
   80182:	2010      	movs	r0, #16
   80184:	47a0      	blx	r4
		gpio_configure_pin(IN_SV,				IN_SV_FLAGS);
   80186:	4629      	mov	r1, r5
   80188:	2011      	movs	r0, #17
   8018a:	47a0      	blx	r4
		gpio_configure_pin(IN_RADAR,			IN_RADAR_FLAGS);
   8018c:	4629      	mov	r1, r5
   8018e:	2018      	movs	r0, #24
   80190:	47a0      	blx	r4
		gpio_configure_pin(IN_DVU,				IN_DVU_FLAGS);
   80192:	4629      	mov	r1, r5
   80194:	2019      	movs	r0, #25
   80196:	47a0      	blx	r4
		gpio_configure_pin(IN_PREMIERE_ENTREE,	IN_PREMIERE_ENTREE_FLAGS);
   80198:	4629      	mov	r1, r5
   8019a:	201a      	movs	r0, #26
   8019c:	47a0      	blx	r4
		gpio_configure_pin(IN_DVU_GENERAL,		IN_DVU_GENERAL_FLAGS);
   8019e:	4629      	mov	r1, r5
   801a0:	201b      	movs	r0, #27
   801a2:	47a0      	blx	r4
		gpio_configure_pin(IN_ENTREE_LIBRE,		IN_ENTREE_OPTION_FLAGS);
   801a4:	4629      	mov	r1, r5
   801a6:	201c      	movs	r0, #28
   801a8:	47a0      	blx	r4
		gpio_configure_pin(IN_ENTREE_OPTION,	IN_ENTREE_OPTION_FLAGS);
   801aa:	4629      	mov	r1, r5
   801ac:	201d      	movs	r0, #29
   801ae:	47a0      	blx	r4
		gpio_configure_pin(SW1_PUSHBUTTON,		SWS_PUSHBUTTON_FLAGS);
   801b0:	4629      	mov	r1, r5
   801b2:	2036      	movs	r0, #54	; 0x36
   801b4:	47a0      	blx	r4
		gpio_configure_pin(SW2_PUSHBUTTON,		SWS_PUSHBUTTON_FLAGS);
   801b6:	4629      	mov	r1, r5
   801b8:	2037      	movs	r0, #55	; 0x37
   801ba:	47a0      	blx	r4
		gpio_configure_pin(SW3_PUSHBUTTON,		SWS_PUSHBUTTON_FLAGS);
   801bc:	4629      	mov	r1, r5
   801be:	2038      	movs	r0, #56	; 0x38
   801c0:	47a0      	blx	r4
		Putstr(WELCOME_MSG);
   801c2:	4911      	ldr	r1, [pc, #68]	; (80208 <Appli+0xe0>)
   801c4:	2067      	movs	r0, #103	; 0x67
   801c6:	4b11      	ldr	r3, [pc, #68]	; (8020c <Appli+0xe4>)
   801c8:	4798      	blx	r3
		LcdPutstr("CPU.ACX  ATSAM3U4C",2,1);
   801ca:	2301      	movs	r3, #1
   801cc:	2202      	movs	r2, #2
   801ce:	4910      	ldr	r1, [pc, #64]	; (80210 <Appli+0xe8>)
   801d0:	2068      	movs	r0, #104	; 0x68
   801d2:	4c10      	ldr	r4, [pc, #64]	; (80214 <Appli+0xec>)
   801d4:	47a0      	blx	r4
		Menu(MENU_NEW);
   801d6:	2064      	movs	r0, #100	; 0x64
   801d8:	4b0f      	ldr	r3, [pc, #60]	; (80218 <Appli+0xf0>)
   801da:	4798      	blx	r3
		ComRS485(COMRS485_NEW);
   801dc:	2064      	movs	r0, #100	; 0x64
   801de:	4b0f      	ldr	r3, [pc, #60]	; (8021c <Appli+0xf4>)
   801e0:	4798      	blx	r3
		Module(MODULE_NEW);
   801e2:	2064      	movs	r0, #100	; 0x64
   801e4:	4b0e      	ldr	r3, [pc, #56]	; (80220 <Appli+0xf8>)
   801e6:	4798      	blx	r3
		ModbusNew();
   801e8:	2064      	movs	r0, #100	; 0x64
   801ea:	4b0e      	ldr	r3, [pc, #56]	; (80224 <Appli+0xfc>)
   801ec:	4798      	blx	r3
	}
	return 0;
}
   801ee:	2000      	movs	r0, #0
   801f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   801f4:	b004      	add	sp, #16
   801f6:	4770      	bx	lr
   801f8:	00080f15 	.word	0x00080f15
   801fc:	000842b1 	.word	0x000842b1
   80200:	000844b1 	.word	0x000844b1
   80204:	28000001 	.word	0x28000001
   80208:	00089b78 	.word	0x00089b78
   8020c:	000834ed 	.word	0x000834ed
   80210:	00089bb8 	.word	0x00089bb8
   80214:	00081579 	.word	0x00081579
   80218:	00083cc9 	.word	0x00083cc9
   8021c:	00080b25 	.word	0x00080b25
   80220:	00083f29 	.word	0x00083f29
   80224:	000819d1 	.word	0x000819d1

00080228 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8022c:	4604      	mov	r4, r0
   8022e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80230:	4b0e      	ldr	r3, [pc, #56]	; (8026c <pio_handler_process+0x44>)
   80232:	4798      	blx	r3
   80234:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80236:	4620      	mov	r0, r4
   80238:	4b0d      	ldr	r3, [pc, #52]	; (80270 <pio_handler_process+0x48>)
   8023a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8023c:	4005      	ands	r5, r0
   8023e:	d013      	beq.n	80268 <pio_handler_process+0x40>
   80240:	4c0c      	ldr	r4, [pc, #48]	; (80274 <pio_handler_process+0x4c>)
   80242:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80246:	e003      	b.n	80250 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80248:	42b4      	cmp	r4, r6
   8024a:	d00d      	beq.n	80268 <pio_handler_process+0x40>
   8024c:	3410      	adds	r4, #16
		while (status != 0) {
   8024e:	b15d      	cbz	r5, 80268 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80250:	6820      	ldr	r0, [r4, #0]
   80252:	4540      	cmp	r0, r8
   80254:	d1f8      	bne.n	80248 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80256:	6861      	ldr	r1, [r4, #4]
   80258:	4229      	tst	r1, r5
   8025a:	d0f5      	beq.n	80248 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8025c:	68e3      	ldr	r3, [r4, #12]
   8025e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80260:	6863      	ldr	r3, [r4, #4]
   80262:	ea25 0503 	bic.w	r5, r5, r3
   80266:	e7ef      	b.n	80248 <pio_handler_process+0x20>
   80268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8026c:	00084237 	.word	0x00084237
   80270:	0008423b 	.word	0x0008423b
   80274:	20000ffc 	.word	0x20000ffc

00080278 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8027a:	4c18      	ldr	r4, [pc, #96]	; (802dc <pio_handler_set+0x64>)
   8027c:	6826      	ldr	r6, [r4, #0]
   8027e:	2e06      	cmp	r6, #6
   80280:	d829      	bhi.n	802d6 <pio_handler_set+0x5e>
   80282:	f04f 0c00 	mov.w	ip, #0
   80286:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80288:	4f15      	ldr	r7, [pc, #84]	; (802e0 <pio_handler_set+0x68>)
   8028a:	e004      	b.n	80296 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   8028c:	3401      	adds	r4, #1
   8028e:	b2e4      	uxtb	r4, r4
   80290:	46a4      	mov	ip, r4
   80292:	42a6      	cmp	r6, r4
   80294:	d309      	bcc.n	802aa <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   80296:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80298:	0125      	lsls	r5, r4, #4
   8029a:	597d      	ldr	r5, [r7, r5]
   8029c:	428d      	cmp	r5, r1
   8029e:	d1f5      	bne.n	8028c <pio_handler_set+0x14>
   802a0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   802a4:	686d      	ldr	r5, [r5, #4]
   802a6:	4295      	cmp	r5, r2
   802a8:	d1f0      	bne.n	8028c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   802aa:	4d0d      	ldr	r5, [pc, #52]	; (802e0 <pio_handler_set+0x68>)
   802ac:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   802b0:	eb05 040e 	add.w	r4, r5, lr
   802b4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   802b8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   802ba:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   802bc:	9906      	ldr	r1, [sp, #24]
   802be:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   802c0:	3601      	adds	r6, #1
   802c2:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   802c4:	bf04      	itt	eq
   802c6:	4905      	ldreq	r1, [pc, #20]	; (802dc <pio_handler_set+0x64>)
   802c8:	600e      	streq	r6, [r1, #0]
   802ca:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   802cc:	461a      	mov	r2, r3
   802ce:	4b05      	ldr	r3, [pc, #20]	; (802e4 <pio_handler_set+0x6c>)
   802d0:	4798      	blx	r3

	return 0;
   802d2:	2000      	movs	r0, #0
   802d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   802d6:	2001      	movs	r0, #1
}
   802d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   802da:	bf00      	nop
   802dc:	2000106c 	.word	0x2000106c
   802e0:	20000ffc 	.word	0x20000ffc
   802e4:	00084205 	.word	0x00084205

000802e8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   802e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   802ea:	210a      	movs	r1, #10
   802ec:	4801      	ldr	r0, [pc, #4]	; (802f4 <PIOA_Handler+0xc>)
   802ee:	4b02      	ldr	r3, [pc, #8]	; (802f8 <PIOA_Handler+0x10>)
   802f0:	4798      	blx	r3
   802f2:	bd08      	pop	{r3, pc}
   802f4:	400e0c00 	.word	0x400e0c00
   802f8:	00080229 	.word	0x00080229

000802fc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   802fc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   802fe:	210b      	movs	r1, #11
   80300:	4801      	ldr	r0, [pc, #4]	; (80308 <PIOB_Handler+0xc>)
   80302:	4b02      	ldr	r3, [pc, #8]	; (8030c <PIOB_Handler+0x10>)
   80304:	4798      	blx	r3
   80306:	bd08      	pop	{r3, pc}
   80308:	400e0e00 	.word	0x400e0e00
   8030c:	00080229 	.word	0x00080229

00080310 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   80310:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   80312:	010b      	lsls	r3, r1, #4
   80314:	4293      	cmp	r3, r2
   80316:	d914      	bls.n	80342 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80318:	00c9      	lsls	r1, r1, #3
   8031a:	084b      	lsrs	r3, r1, #1
   8031c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   80320:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   80324:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   80326:	1e5c      	subs	r4, r3, #1
   80328:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8032c:	428c      	cmp	r4, r1
   8032e:	d901      	bls.n	80334 <usart_set_async_baudrate+0x24>
		return 1;
   80330:	2001      	movs	r0, #1
   80332:	e017      	b.n	80364 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   80334:	6841      	ldr	r1, [r0, #4]
   80336:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   8033a:	6041      	str	r1, [r0, #4]
   8033c:	e00c      	b.n	80358 <usart_set_async_baudrate+0x48>
		return 1;
   8033e:	2001      	movs	r0, #1
   80340:	e010      	b.n	80364 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80342:	0859      	lsrs	r1, r3, #1
   80344:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   80348:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   8034c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8034e:	1e5c      	subs	r4, r3, #1
   80350:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   80354:	428c      	cmp	r4, r1
   80356:	d8f2      	bhi.n	8033e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   80358:	0412      	lsls	r2, r2, #16
   8035a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   8035e:	431a      	orrs	r2, r3
   80360:	6202      	str	r2, [r0, #32]

	return 0;
   80362:	2000      	movs	r0, #0
}
   80364:	bc10      	pop	{r4}
   80366:	4770      	bx	lr

00080368 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   80368:	4b0a      	ldr	r3, [pc, #40]	; (80394 <usart_reset+0x2c>)
   8036a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   8036e:	2300      	movs	r3, #0
   80370:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   80372:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80374:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   80376:	2388      	movs	r3, #136	; 0x88
   80378:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8037a:	2324      	movs	r3, #36	; 0x24
   8037c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   8037e:	f44f 7380 	mov.w	r3, #256	; 0x100
   80382:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   80384:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   80388:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   8038a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   8038e:	6003      	str	r3, [r0, #0]
   80390:	4770      	bx	lr
   80392:	bf00      	nop
   80394:	55534100 	.word	0x55534100

00080398 <usart_init_rs232>:
{
   80398:	b570      	push	{r4, r5, r6, lr}
   8039a:	4605      	mov	r5, r0
   8039c:	460c      	mov	r4, r1
   8039e:	4616      	mov	r6, r2
	usart_reset(p_usart);
   803a0:	4b0f      	ldr	r3, [pc, #60]	; (803e0 <usart_init_rs232+0x48>)
   803a2:	4798      	blx	r3
	ul_reg_val = 0;
   803a4:	2200      	movs	r2, #0
   803a6:	4b0f      	ldr	r3, [pc, #60]	; (803e4 <usart_init_rs232+0x4c>)
   803a8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   803aa:	b1a4      	cbz	r4, 803d6 <usart_init_rs232+0x3e>
   803ac:	4632      	mov	r2, r6
   803ae:	6821      	ldr	r1, [r4, #0]
   803b0:	4628      	mov	r0, r5
   803b2:	4b0d      	ldr	r3, [pc, #52]	; (803e8 <usart_init_rs232+0x50>)
   803b4:	4798      	blx	r3
   803b6:	4602      	mov	r2, r0
   803b8:	b978      	cbnz	r0, 803da <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   803ba:	6863      	ldr	r3, [r4, #4]
   803bc:	68a1      	ldr	r1, [r4, #8]
   803be:	430b      	orrs	r3, r1
   803c0:	6921      	ldr	r1, [r4, #16]
   803c2:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   803c4:	68e1      	ldr	r1, [r4, #12]
   803c6:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   803c8:	4906      	ldr	r1, [pc, #24]	; (803e4 <usart_init_rs232+0x4c>)
   803ca:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   803cc:	6869      	ldr	r1, [r5, #4]
   803ce:	430b      	orrs	r3, r1
   803d0:	606b      	str	r3, [r5, #4]
}
   803d2:	4610      	mov	r0, r2
   803d4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   803d6:	2201      	movs	r2, #1
   803d8:	e7fb      	b.n	803d2 <usart_init_rs232+0x3a>
   803da:	2201      	movs	r2, #1
   803dc:	e7f9      	b.n	803d2 <usart_init_rs232+0x3a>
   803de:	bf00      	nop
   803e0:	00080369 	.word	0x00080369
   803e4:	20001070 	.word	0x20001070
   803e8:	00080311 	.word	0x00080311

000803ec <usart_init_rs485>:
{
   803ec:	b510      	push	{r4, lr}
   803ee:	4604      	mov	r4, r0
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
   803f0:	4b06      	ldr	r3, [pc, #24]	; (8040c <usart_init_rs485+0x20>)
   803f2:	4798      	blx	r3
   803f4:	b940      	cbnz	r0, 80408 <usart_init_rs485+0x1c>
   803f6:	4602      	mov	r2, r0
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
   803f8:	6863      	ldr	r3, [r4, #4]
   803fa:	f023 030f 	bic.w	r3, r3, #15
   803fe:	f043 0301 	orr.w	r3, r3, #1
   80402:	6063      	str	r3, [r4, #4]
}
   80404:	4610      	mov	r0, r2
   80406:	bd10      	pop	{r4, pc}
		return 1;
   80408:	2201      	movs	r2, #1
   8040a:	e7fb      	b.n	80404 <usart_init_rs485+0x18>
   8040c:	00080399 	.word	0x00080399

00080410 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   80410:	2340      	movs	r3, #64	; 0x40
   80412:	6003      	str	r3, [r0, #0]
   80414:	4770      	bx	lr

00080416 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   80416:	2310      	movs	r3, #16
   80418:	6003      	str	r3, [r0, #0]
   8041a:	4770      	bx	lr

0008041c <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   8041c:	6081      	str	r1, [r0, #8]
   8041e:	4770      	bx	lr

00080420 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   80420:	60c1      	str	r1, [r0, #12]
   80422:	4770      	bx	lr

00080424 <usart_get_status>:
	return p_usart->US_CSR;
   80424:	6940      	ldr	r0, [r0, #20]
}
   80426:	4770      	bx	lr

00080428 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   80428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8042c:	6043      	str	r3, [r0, #4]
   8042e:	4770      	bx	lr

00080430 <Test>:
	PH_CMD_RELAIS_1,
	PH_CMD_RELAIS_2
};

void Test(uint32_t sc, uint32_t phase)
{
   80430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80434:	b084      	sub	sp, #16
   80436:	9103      	str	r1, [sp, #12]
	switch(sc)
   80438:	2864      	cmp	r0, #100	; 0x64
   8043a:	f000 80dd 	beq.w	805f8 <Test+0x1c8>
   8043e:	2866      	cmp	r0, #102	; 0x66
   80440:	f040 8127 	bne.w	80692 <Test+0x262>
		phase<<=8;
		phase&=0xFFFF00;
		phase|=PH_CMD_MOSFET;
		//no break;
	case TEST_RUN:
		sprintf(buf,"\r\nPH:%d--%d\r\n",*((uint16_t*)((uint8_t*)&phase+1)),*((char*)&phase));
   80444:	f8bd 700d 	ldrh.w	r7, [sp, #13]
   80448:	4c9e      	ldr	r4, [pc, #632]	; (806c4 <Test+0x294>)
   8044a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   8044e:	463a      	mov	r2, r7
   80450:	499d      	ldr	r1, [pc, #628]	; (806c8 <Test+0x298>)
   80452:	4620      	mov	r0, r4
   80454:	4d9d      	ldr	r5, [pc, #628]	; (806cc <Test+0x29c>)
   80456:	47a8      	blx	r5
		Putstr(buf);
   80458:	4621      	mov	r1, r4
   8045a:	2067      	movs	r0, #103	; 0x67
   8045c:	4c9c      	ldr	r4, [pc, #624]	; (806d0 <Test+0x2a0>)
   8045e:	47a0      	blx	r4

		Putstr(PENE_OUVERT_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_OUVERT)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   80460:	499c      	ldr	r1, [pc, #624]	; (806d4 <Test+0x2a4>)
   80462:	2067      	movs	r0, #103	; 0x67
   80464:	47a0      	blx	r4
   80466:	4d9c      	ldr	r5, [pc, #624]	; (806d8 <Test+0x2a8>)
   80468:	4629      	mov	r1, r5
   8046a:	2067      	movs	r0, #103	; 0x67
   8046c:	47a0      	blx	r4
   8046e:	200e      	movs	r0, #14
   80470:	4b9a      	ldr	r3, [pc, #616]	; (806dc <Test+0x2ac>)
   80472:	4798      	blx	r3
   80474:	2800      	cmp	r0, #0
   80476:	f040 80cd 	bne.w	80614 <Test+0x1e4>
   8047a:	4999      	ldr	r1, [pc, #612]	; (806e0 <Test+0x2b0>)
   8047c:	2067      	movs	r0, #103	; 0x67
   8047e:	47a0      	blx	r4
   80480:	4c98      	ldr	r4, [pc, #608]	; (806e4 <Test+0x2b4>)
   80482:	4621      	mov	r1, r4
   80484:	2067      	movs	r0, #103	; 0x67
   80486:	4e92      	ldr	r6, [pc, #584]	; (806d0 <Test+0x2a0>)
   80488:	47b0      	blx	r6
		Putstr(PENE_FERME_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_FERME)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   8048a:	4997      	ldr	r1, [pc, #604]	; (806e8 <Test+0x2b8>)
   8048c:	2067      	movs	r0, #103	; 0x67
   8048e:	47b0      	blx	r6
   80490:	4629      	mov	r1, r5
   80492:	2067      	movs	r0, #103	; 0x67
   80494:	47b0      	blx	r6
   80496:	200f      	movs	r0, #15
   80498:	4b90      	ldr	r3, [pc, #576]	; (806dc <Test+0x2ac>)
   8049a:	4798      	blx	r3
   8049c:	2800      	cmp	r0, #0
   8049e:	f040 80be 	bne.w	8061e <Test+0x1ee>
   804a2:	498f      	ldr	r1, [pc, #572]	; (806e0 <Test+0x2b0>)
   804a4:	2067      	movs	r0, #103	; 0x67
   804a6:	47b0      	blx	r6
   804a8:	4621      	mov	r1, r4
   804aa:	2067      	movs	r0, #103	; 0x67
   804ac:	f8df 8220 	ldr.w	r8, [pc, #544]	; 806d0 <Test+0x2a0>
   804b0:	47c0      	blx	r8
		Putstr(IN_ILS_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_ILS)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   804b2:	498e      	ldr	r1, [pc, #568]	; (806ec <Test+0x2bc>)
   804b4:	2067      	movs	r0, #103	; 0x67
   804b6:	47c0      	blx	r8
   804b8:	4e8d      	ldr	r6, [pc, #564]	; (806f0 <Test+0x2c0>)
   804ba:	4631      	mov	r1, r6
   804bc:	2067      	movs	r0, #103	; 0x67
   804be:	47c0      	blx	r8
   804c0:	2010      	movs	r0, #16
   804c2:	4b86      	ldr	r3, [pc, #536]	; (806dc <Test+0x2ac>)
   804c4:	4798      	blx	r3
   804c6:	2800      	cmp	r0, #0
   804c8:	f040 80ae 	bne.w	80628 <Test+0x1f8>
   804cc:	4984      	ldr	r1, [pc, #528]	; (806e0 <Test+0x2b0>)
   804ce:	2067      	movs	r0, #103	; 0x67
   804d0:	47c0      	blx	r8
   804d2:	4621      	mov	r1, r4
   804d4:	2067      	movs	r0, #103	; 0x67
   804d6:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 806d0 <Test+0x2a0>
   804da:	47c0      	blx	r8
		Putstr(IN_SV_NAME);					Putstr("\t\t: ");	gpio_pin_is_low(IN_SV)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   804dc:	4985      	ldr	r1, [pc, #532]	; (806f4 <Test+0x2c4>)
   804de:	2067      	movs	r0, #103	; 0x67
   804e0:	47c0      	blx	r8
   804e2:	4631      	mov	r1, r6
   804e4:	2067      	movs	r0, #103	; 0x67
   804e6:	47c0      	blx	r8
   804e8:	2011      	movs	r0, #17
   804ea:	4b7c      	ldr	r3, [pc, #496]	; (806dc <Test+0x2ac>)
   804ec:	4798      	blx	r3
   804ee:	2800      	cmp	r0, #0
   804f0:	f040 809f 	bne.w	80632 <Test+0x202>
   804f4:	497a      	ldr	r1, [pc, #488]	; (806e0 <Test+0x2b0>)
   804f6:	2067      	movs	r0, #103	; 0x67
   804f8:	47c0      	blx	r8
   804fa:	4621      	mov	r1, r4
   804fc:	2067      	movs	r0, #103	; 0x67
   804fe:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 806d0 <Test+0x2a0>
   80502:	47c0      	blx	r8
		Putstr(IN_RADAR_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_RADAR)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   80504:	497c      	ldr	r1, [pc, #496]	; (806f8 <Test+0x2c8>)
   80506:	2067      	movs	r0, #103	; 0x67
   80508:	47c0      	blx	r8
   8050a:	4631      	mov	r1, r6
   8050c:	2067      	movs	r0, #103	; 0x67
   8050e:	47c0      	blx	r8
   80510:	2018      	movs	r0, #24
   80512:	4b72      	ldr	r3, [pc, #456]	; (806dc <Test+0x2ac>)
   80514:	4798      	blx	r3
   80516:	2800      	cmp	r0, #0
   80518:	f040 8090 	bne.w	8063c <Test+0x20c>
   8051c:	4970      	ldr	r1, [pc, #448]	; (806e0 <Test+0x2b0>)
   8051e:	2067      	movs	r0, #103	; 0x67
   80520:	47c0      	blx	r8
   80522:	4621      	mov	r1, r4
   80524:	2067      	movs	r0, #103	; 0x67
   80526:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 806d0 <Test+0x2a0>
   8052a:	47c0      	blx	r8
		Putstr(IN_DVU_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_DVU)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   8052c:	4973      	ldr	r1, [pc, #460]	; (806fc <Test+0x2cc>)
   8052e:	2067      	movs	r0, #103	; 0x67
   80530:	47c0      	blx	r8
   80532:	4631      	mov	r1, r6
   80534:	2067      	movs	r0, #103	; 0x67
   80536:	47c0      	blx	r8
   80538:	2019      	movs	r0, #25
   8053a:	4b68      	ldr	r3, [pc, #416]	; (806dc <Test+0x2ac>)
   8053c:	4798      	blx	r3
   8053e:	2800      	cmp	r0, #0
   80540:	f040 8081 	bne.w	80646 <Test+0x216>
   80544:	4966      	ldr	r1, [pc, #408]	; (806e0 <Test+0x2b0>)
   80546:	2067      	movs	r0, #103	; 0x67
   80548:	47c0      	blx	r8
   8054a:	4621      	mov	r1, r4
   8054c:	2067      	movs	r0, #103	; 0x67
   8054e:	4e60      	ldr	r6, [pc, #384]	; (806d0 <Test+0x2a0>)
   80550:	47b0      	blx	r6
		Putstr(IN_PREMIERE_ENTREE_NAME);	Putstr("\t: ");		gpio_pin_is_low(IN_PREMIERE_ENTREE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   80552:	496b      	ldr	r1, [pc, #428]	; (80700 <Test+0x2d0>)
   80554:	2067      	movs	r0, #103	; 0x67
   80556:	47b0      	blx	r6
   80558:	4629      	mov	r1, r5
   8055a:	2067      	movs	r0, #103	; 0x67
   8055c:	47b0      	blx	r6
   8055e:	201a      	movs	r0, #26
   80560:	4b5e      	ldr	r3, [pc, #376]	; (806dc <Test+0x2ac>)
   80562:	4798      	blx	r3
   80564:	2800      	cmp	r0, #0
   80566:	d173      	bne.n	80650 <Test+0x220>
   80568:	495d      	ldr	r1, [pc, #372]	; (806e0 <Test+0x2b0>)
   8056a:	2067      	movs	r0, #103	; 0x67
   8056c:	47b0      	blx	r6
   8056e:	4621      	mov	r1, r4
   80570:	2067      	movs	r0, #103	; 0x67
   80572:	4e57      	ldr	r6, [pc, #348]	; (806d0 <Test+0x2a0>)
   80574:	47b0      	blx	r6
		Putstr(IN_DVU_GENERAL_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_DVU_GENERAL)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   80576:	4963      	ldr	r1, [pc, #396]	; (80704 <Test+0x2d4>)
   80578:	2067      	movs	r0, #103	; 0x67
   8057a:	47b0      	blx	r6
   8057c:	4629      	mov	r1, r5
   8057e:	2067      	movs	r0, #103	; 0x67
   80580:	47b0      	blx	r6
   80582:	201b      	movs	r0, #27
   80584:	4b55      	ldr	r3, [pc, #340]	; (806dc <Test+0x2ac>)
   80586:	4798      	blx	r3
   80588:	2800      	cmp	r0, #0
   8058a:	d166      	bne.n	8065a <Test+0x22a>
   8058c:	4954      	ldr	r1, [pc, #336]	; (806e0 <Test+0x2b0>)
   8058e:	2067      	movs	r0, #103	; 0x67
   80590:	47b0      	blx	r6
   80592:	4621      	mov	r1, r4
   80594:	2067      	movs	r0, #103	; 0x67
   80596:	4e4e      	ldr	r6, [pc, #312]	; (806d0 <Test+0x2a0>)
   80598:	47b0      	blx	r6
		Putstr(IN_ENTREE_LIBRE_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_LIBRE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   8059a:	495b      	ldr	r1, [pc, #364]	; (80708 <Test+0x2d8>)
   8059c:	2067      	movs	r0, #103	; 0x67
   8059e:	47b0      	blx	r6
   805a0:	4629      	mov	r1, r5
   805a2:	2067      	movs	r0, #103	; 0x67
   805a4:	47b0      	blx	r6
   805a6:	201c      	movs	r0, #28
   805a8:	4b4c      	ldr	r3, [pc, #304]	; (806dc <Test+0x2ac>)
   805aa:	4798      	blx	r3
   805ac:	2800      	cmp	r0, #0
   805ae:	d159      	bne.n	80664 <Test+0x234>
   805b0:	494b      	ldr	r1, [pc, #300]	; (806e0 <Test+0x2b0>)
   805b2:	2067      	movs	r0, #103	; 0x67
   805b4:	47b0      	blx	r6
   805b6:	4621      	mov	r1, r4
   805b8:	2067      	movs	r0, #103	; 0x67
   805ba:	4e45      	ldr	r6, [pc, #276]	; (806d0 <Test+0x2a0>)
   805bc:	47b0      	blx	r6
		Putstr(IN_ENTREE_OPTION_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_OPTION)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   805be:	4953      	ldr	r1, [pc, #332]	; (8070c <Test+0x2dc>)
   805c0:	2067      	movs	r0, #103	; 0x67
   805c2:	47b0      	blx	r6
   805c4:	4629      	mov	r1, r5
   805c6:	2067      	movs	r0, #103	; 0x67
   805c8:	47b0      	blx	r6
   805ca:	201d      	movs	r0, #29
   805cc:	4b43      	ldr	r3, [pc, #268]	; (806dc <Test+0x2ac>)
   805ce:	4798      	blx	r3
   805d0:	2800      	cmp	r0, #0
   805d2:	d14c      	bne.n	8066e <Test+0x23e>
   805d4:	4942      	ldr	r1, [pc, #264]	; (806e0 <Test+0x2b0>)
   805d6:	2067      	movs	r0, #103	; 0x67
   805d8:	47b0      	blx	r6
   805da:	4621      	mov	r1, r4
   805dc:	2067      	movs	r0, #103	; 0x67
   805de:	4b3c      	ldr	r3, [pc, #240]	; (806d0 <Test+0x2a0>)
   805e0:	4798      	blx	r3

		switch(mBitsMsk(phase,0xFF))
   805e2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   805e6:	3b01      	subs	r3, #1
   805e8:	2b04      	cmp	r3, #4
   805ea:	f200 80a4 	bhi.w	80736 <Test+0x306>
   805ee:	e8df f003 	tbb	[pc, r3]
   805f2:	5343      	.short	0x5343
   805f4:	615a      	.short	0x615a
   805f6:	9b          	.byte	0x9b
   805f7:	00          	.byte	0x00
		Putstr("\r\nTest started...\r\n");
   805f8:	4945      	ldr	r1, [pc, #276]	; (80710 <Test+0x2e0>)
   805fa:	2067      	movs	r0, #103	; 0x67
   805fc:	4b34      	ldr	r3, [pc, #208]	; (806d0 <Test+0x2a0>)
   805fe:	4798      	blx	r3
		phase<<=8;
   80600:	9b03      	ldr	r3, [sp, #12]
   80602:	021b      	lsls	r3, r3, #8
		phase&=0xFFFF00;
   80604:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   80608:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
		phase|=PH_CMD_MOSFET;
   8060c:	f043 0301 	orr.w	r3, r3, #1
   80610:	9303      	str	r3, [sp, #12]
   80612:	e717      	b.n	80444 <Test+0x14>
		Putstr(PENE_OUVERT_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_OUVERT)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   80614:	493f      	ldr	r1, [pc, #252]	; (80714 <Test+0x2e4>)
   80616:	2067      	movs	r0, #103	; 0x67
   80618:	4b2d      	ldr	r3, [pc, #180]	; (806d0 <Test+0x2a0>)
   8061a:	4798      	blx	r3
   8061c:	e730      	b.n	80480 <Test+0x50>
		Putstr(PENE_FERME_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_FERME)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   8061e:	493d      	ldr	r1, [pc, #244]	; (80714 <Test+0x2e4>)
   80620:	2067      	movs	r0, #103	; 0x67
   80622:	4b2b      	ldr	r3, [pc, #172]	; (806d0 <Test+0x2a0>)
   80624:	4798      	blx	r3
   80626:	e73f      	b.n	804a8 <Test+0x78>
		Putstr(IN_ILS_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_ILS)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   80628:	493a      	ldr	r1, [pc, #232]	; (80714 <Test+0x2e4>)
   8062a:	2067      	movs	r0, #103	; 0x67
   8062c:	4b28      	ldr	r3, [pc, #160]	; (806d0 <Test+0x2a0>)
   8062e:	4798      	blx	r3
   80630:	e74f      	b.n	804d2 <Test+0xa2>
		Putstr(IN_SV_NAME);					Putstr("\t\t: ");	gpio_pin_is_low(IN_SV)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   80632:	4938      	ldr	r1, [pc, #224]	; (80714 <Test+0x2e4>)
   80634:	2067      	movs	r0, #103	; 0x67
   80636:	4b26      	ldr	r3, [pc, #152]	; (806d0 <Test+0x2a0>)
   80638:	4798      	blx	r3
   8063a:	e75e      	b.n	804fa <Test+0xca>
		Putstr(IN_RADAR_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_RADAR)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   8063c:	4935      	ldr	r1, [pc, #212]	; (80714 <Test+0x2e4>)
   8063e:	2067      	movs	r0, #103	; 0x67
   80640:	4b23      	ldr	r3, [pc, #140]	; (806d0 <Test+0x2a0>)
   80642:	4798      	blx	r3
   80644:	e76d      	b.n	80522 <Test+0xf2>
		Putstr(IN_DVU_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_DVU)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   80646:	4933      	ldr	r1, [pc, #204]	; (80714 <Test+0x2e4>)
   80648:	2067      	movs	r0, #103	; 0x67
   8064a:	4b21      	ldr	r3, [pc, #132]	; (806d0 <Test+0x2a0>)
   8064c:	4798      	blx	r3
   8064e:	e77c      	b.n	8054a <Test+0x11a>
		Putstr(IN_PREMIERE_ENTREE_NAME);	Putstr("\t: ");		gpio_pin_is_low(IN_PREMIERE_ENTREE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   80650:	4930      	ldr	r1, [pc, #192]	; (80714 <Test+0x2e4>)
   80652:	2067      	movs	r0, #103	; 0x67
   80654:	4b1e      	ldr	r3, [pc, #120]	; (806d0 <Test+0x2a0>)
   80656:	4798      	blx	r3
   80658:	e789      	b.n	8056e <Test+0x13e>
		Putstr(IN_DVU_GENERAL_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_DVU_GENERAL)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   8065a:	492e      	ldr	r1, [pc, #184]	; (80714 <Test+0x2e4>)
   8065c:	2067      	movs	r0, #103	; 0x67
   8065e:	4b1c      	ldr	r3, [pc, #112]	; (806d0 <Test+0x2a0>)
   80660:	4798      	blx	r3
   80662:	e796      	b.n	80592 <Test+0x162>
		Putstr(IN_ENTREE_LIBRE_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_LIBRE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   80664:	492b      	ldr	r1, [pc, #172]	; (80714 <Test+0x2e4>)
   80666:	2067      	movs	r0, #103	; 0x67
   80668:	4b19      	ldr	r3, [pc, #100]	; (806d0 <Test+0x2a0>)
   8066a:	4798      	blx	r3
   8066c:	e7a3      	b.n	805b6 <Test+0x186>
		Putstr(IN_ENTREE_OPTION_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_OPTION)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   8066e:	4929      	ldr	r1, [pc, #164]	; (80714 <Test+0x2e4>)
   80670:	2067      	movs	r0, #103	; 0x67
   80672:	4b17      	ldr	r3, [pc, #92]	; (806d0 <Test+0x2a0>)
   80674:	4798      	blx	r3
   80676:	e7b0      	b.n	805da <Test+0x1aa>
		{
		case PH_CMD_MOSFET:
			gpio_set_pin_high(CMD_MOSFET);
   80678:	2020      	movs	r0, #32
   8067a:	4b27      	ldr	r3, [pc, #156]	; (80718 <Test+0x2e8>)
   8067c:	4798      	blx	r3
		}
		break;
	default:
		return;
	}
	PushTask(Test,TEST_RUN,++phase,1000);
   8067e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   80682:	9300      	str	r3, [sp, #0]
   80684:	9b03      	ldr	r3, [sp, #12]
   80686:	3301      	adds	r3, #1
   80688:	2266      	movs	r2, #102	; 0x66
   8068a:	4924      	ldr	r1, [pc, #144]	; (8071c <Test+0x2ec>)
   8068c:	4610      	mov	r0, r2
   8068e:	4c24      	ldr	r4, [pc, #144]	; (80720 <Test+0x2f0>)
   80690:	47a0      	blx	r4
}
   80692:	b004      	add	sp, #16
   80694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			gpio_set_pin_low(CMD_MOSFET);
   80698:	2020      	movs	r0, #32
   8069a:	4b22      	ldr	r3, [pc, #136]	; (80724 <Test+0x2f4>)
   8069c:	4798      	blx	r3
			gpio_set_pin_high(CMD_MOT_SERRURE);
   8069e:	2021      	movs	r0, #33	; 0x21
   806a0:	4b1d      	ldr	r3, [pc, #116]	; (80718 <Test+0x2e8>)
   806a2:	4798      	blx	r3
			break;
   806a4:	e7eb      	b.n	8067e <Test+0x24e>
			gpio_set_pin_low(CMD_MOT_SERRURE);
   806a6:	2021      	movs	r0, #33	; 0x21
   806a8:	4b1e      	ldr	r3, [pc, #120]	; (80724 <Test+0x2f4>)
   806aa:	4798      	blx	r3
			gpio_set_pin_high(CMD_RELAIS);
   806ac:	2022      	movs	r0, #34	; 0x22
   806ae:	4b1a      	ldr	r3, [pc, #104]	; (80718 <Test+0x2e8>)
   806b0:	4798      	blx	r3
			break;
   806b2:	e7e4      	b.n	8067e <Test+0x24e>
			gpio_set_pin_low(CMD_RELAIS);
   806b4:	2022      	movs	r0, #34	; 0x22
   806b6:	4b1b      	ldr	r3, [pc, #108]	; (80724 <Test+0x2f4>)
   806b8:	4798      	blx	r3
			gpio_set_pin_high(CMD_RELAIS_1);
   806ba:	2023      	movs	r0, #35	; 0x23
   806bc:	4b16      	ldr	r3, [pc, #88]	; (80718 <Test+0x2e8>)
   806be:	4798      	blx	r3
			break;
   806c0:	e7dd      	b.n	8067e <Test+0x24e>
   806c2:	bf00      	nop
   806c4:	20001a18 	.word	0x20001a18
   806c8:	00089bec 	.word	0x00089bec
   806cc:	000851f5 	.word	0x000851f5
   806d0:	000834ed 	.word	0x000834ed
   806d4:	00089bfc 	.word	0x00089bfc
   806d8:	00089c08 	.word	0x00089c08
   806dc:	0008423f 	.word	0x0008423f
   806e0:	00089c0c 	.word	0x00089c0c
   806e4:	0008a240 	.word	0x0008a240
   806e8:	00089c14 	.word	0x00089c14
   806ec:	00089c20 	.word	0x00089c20
   806f0:	00089c24 	.word	0x00089c24
   806f4:	00089c2c 	.word	0x00089c2c
   806f8:	00089c30 	.word	0x00089c30
   806fc:	00089c38 	.word	0x00089c38
   80700:	00089c3c 	.word	0x00089c3c
   80704:	00089c4c 	.word	0x00089c4c
   80708:	00089c58 	.word	0x00089c58
   8070c:	00089c68 	.word	0x00089c68
   80710:	00089bd8 	.word	0x00089bd8
   80714:	00089c10 	.word	0x00089c10
   80718:	0008425b 	.word	0x0008425b
   8071c:	00080431 	.word	0x00080431
   80720:	00083881 	.word	0x00083881
   80724:	00084275 	.word	0x00084275
			gpio_set_pin_low(CMD_RELAIS_1);
   80728:	2023      	movs	r0, #35	; 0x23
   8072a:	4b13      	ldr	r3, [pc, #76]	; (80778 <Test+0x348>)
   8072c:	4798      	blx	r3
			gpio_set_pin_high(CMD_RELAIS_2);
   8072e:	2024      	movs	r0, #36	; 0x24
   80730:	4b12      	ldr	r3, [pc, #72]	; (8077c <Test+0x34c>)
   80732:	4798      	blx	r3
			break;
   80734:	e7a3      	b.n	8067e <Test+0x24e>
			gpio_set_pin_low(CMD_MOSFET);
   80736:	2020      	movs	r0, #32
   80738:	4c0f      	ldr	r4, [pc, #60]	; (80778 <Test+0x348>)
   8073a:	47a0      	blx	r4
			gpio_set_pin_low(CMD_MOT_SERRURE);
   8073c:	2021      	movs	r0, #33	; 0x21
   8073e:	47a0      	blx	r4
			gpio_set_pin_low(CMD_RELAIS);
   80740:	2022      	movs	r0, #34	; 0x22
   80742:	47a0      	blx	r4
			gpio_set_pin_low(CMD_RELAIS_1);
   80744:	2023      	movs	r0, #35	; 0x23
   80746:	47a0      	blx	r4
			gpio_set_pin_low(CMD_RELAIS_2);
   80748:	2024      	movs	r0, #36	; 0x24
   8074a:	47a0      	blx	r4
			if(*((uint16_t*)((uint8_t*)&phase+1)))
   8074c:	b127      	cbz	r7, 80758 <Test+0x328>
				if(--(*((uint16_t*)((uint8_t*)&phase+1))))
   8074e:	3f01      	subs	r7, #1
   80750:	b2bf      	uxth	r7, r7
   80752:	f8ad 700d 	strh.w	r7, [sp, #13]
   80756:	b927      	cbnz	r7, 80762 <Test+0x332>
			Putstr("\r\nTest terminated...\r\n");
   80758:	4909      	ldr	r1, [pc, #36]	; (80780 <Test+0x350>)
   8075a:	2067      	movs	r0, #103	; 0x67
   8075c:	4b09      	ldr	r3, [pc, #36]	; (80784 <Test+0x354>)
   8075e:	4798      	blx	r3
			return;
   80760:	e797      	b.n	80692 <Test+0x262>
					PushTask(Test,TEST_NEW,phase>>8,0);
   80762:	2300      	movs	r3, #0
   80764:	9300      	str	r3, [sp, #0]
   80766:	9b03      	ldr	r3, [sp, #12]
   80768:	0a1b      	lsrs	r3, r3, #8
   8076a:	2264      	movs	r2, #100	; 0x64
   8076c:	4906      	ldr	r1, [pc, #24]	; (80788 <Test+0x358>)
   8076e:	2066      	movs	r0, #102	; 0x66
   80770:	4c06      	ldr	r4, [pc, #24]	; (8078c <Test+0x35c>)
   80772:	47a0      	blx	r4
   80774:	e7f0      	b.n	80758 <Test+0x328>
   80776:	bf00      	nop
   80778:	00084275 	.word	0x00084275
   8077c:	0008425b 	.word	0x0008425b
   80780:	00089c78 	.word	0x00089c78
   80784:	000834ed 	.word	0x000834ed
   80788:	00080431 	.word	0x00080431
   8078c:	00083881 	.word	0x00083881

00080790 <stop>:
	}
	mstrtokRestore();
}

void stop(uint32_t sc, void*pParam)
{
   80790:	b510      	push	{r4, lr}
	char *pToken;
	switch(sc)
   80792:	f242 6316 	movw	r3, #9750	; 0x2616
   80796:	4298      	cmp	r0, r3
   80798:	d022      	beq.n	807e0 <stop+0x50>
   8079a:	f245 13db 	movw	r3, #20955	; 0x51db
   8079e:	4298      	cmp	r0, r3
   807a0:	d01d      	beq.n	807de <stop+0x4e>
//#else
		//gpio_set_pin_high(BUZZER_PWR);
//#endif
		break;
	default:
		pToken = mstrtok(NULL," \r\n");
   807a2:	491c      	ldr	r1, [pc, #112]	; (80814 <stop+0x84>)
   807a4:	2000      	movs	r0, #0
   807a6:	4b1c      	ldr	r3, [pc, #112]	; (80818 <stop+0x88>)
   807a8:	4798      	blx	r3
		if(pToken)
   807aa:	4604      	mov	r4, r0
   807ac:	b1a8      	cbz	r0, 807da <stop+0x4a>
		{
			switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   807ae:	4b1b      	ldr	r3, [pc, #108]	; (8081c <stop+0x8c>)
   807b0:	4798      	blx	r3
   807b2:	4601      	mov	r1, r0
   807b4:	4620      	mov	r0, r4
   807b6:	4b1a      	ldr	r3, [pc, #104]	; (80820 <stop+0x90>)
   807b8:	4798      	blx	r3
   807ba:	f242 6316 	movw	r3, #9750	; 0x2616
   807be:	4298      	cmp	r0, r3
   807c0:	d020      	beq.n	80804 <stop+0x74>
   807c2:	d912      	bls.n	807ea <stop+0x5a>
   807c4:	f243 132b 	movw	r3, #12587	; 0x312b
   807c8:	4298      	cmp	r0, r3
   807ca:	d017      	beq.n	807fc <stop+0x6c>
   807cc:	f24c 6398 	movw	r3, #50840	; 0xc698
   807d0:	4298      	cmp	r0, r3
   807d2:	d102      	bne.n	807da <stop+0x4a>
			{
			case 0xC698:	//lcd
				Lcd(LCD_DEL);
   807d4:	2065      	movs	r0, #101	; 0x65
   807d6:	4b13      	ldr	r3, [pc, #76]	; (80824 <stop+0x94>)
   807d8:	4798      	blx	r3
				break;
			default:
				break;
			}
		}
		mstrtokRestore();
   807da:	4b13      	ldr	r3, [pc, #76]	; (80828 <stop+0x98>)
   807dc:	4798      	blx	r3
   807de:	bd10      	pop	{r4, pc}
		Putstr("\r\nBuzzer off...\r\n");
   807e0:	4912      	ldr	r1, [pc, #72]	; (8082c <stop+0x9c>)
   807e2:	2067      	movs	r0, #103	; 0x67
   807e4:	4b12      	ldr	r3, [pc, #72]	; (80830 <stop+0xa0>)
   807e6:	4798      	blx	r3
		break;
   807e8:	bd10      	pop	{r4, pc}
			switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   807ea:	f240 6334 	movw	r3, #1588	; 0x634
   807ee:	4298      	cmp	r0, r3
   807f0:	d1f3      	bne.n	807da <stop+0x4a>
				LcdBacklight(false);
   807f2:	2100      	movs	r1, #0
   807f4:	2066      	movs	r0, #102	; 0x66
   807f6:	4b0b      	ldr	r3, [pc, #44]	; (80824 <stop+0x94>)
   807f8:	4798      	blx	r3
				break;
   807fa:	e7ee      	b.n	807da <stop+0x4a>
				gpio_set_pin_high(BLUETOOTH_PWR);
   807fc:	2035      	movs	r0, #53	; 0x35
   807fe:	4b0d      	ldr	r3, [pc, #52]	; (80834 <stop+0xa4>)
   80800:	4798      	blx	r3
				break;
   80802:	e7ea      	b.n	807da <stop+0x4a>
				Putstr("\r\nBuzzer off...\r\n");
   80804:	4909      	ldr	r1, [pc, #36]	; (8082c <stop+0x9c>)
   80806:	2067      	movs	r0, #103	; 0x67
   80808:	4b09      	ldr	r3, [pc, #36]	; (80830 <stop+0xa0>)
   8080a:	4798      	blx	r3
				gpio_set_pin_low(BUZZER_PWR);
   8080c:	2030      	movs	r0, #48	; 0x30
   8080e:	4b0a      	ldr	r3, [pc, #40]	; (80838 <stop+0xa8>)
   80810:	4798      	blx	r3
				break;
   80812:	e7e2      	b.n	807da <stop+0x4a>
   80814:	00089f04 	.word	0x00089f04
   80818:	00083af9 	.word	0x00083af9
   8081c:	00085241 	.word	0x00085241
   80820:	00080ea9 	.word	0x00080ea9
   80824:	00081579 	.word	0x00081579
   80828:	00083ab5 	.word	0x00083ab5
   8082c:	00089d08 	.word	0x00089d08
   80830:	000834ed 	.word	0x000834ed
   80834:	0008425b 	.word	0x0008425b
   80838:	00084275 	.word	0x00084275

0008083c <start>:
{
   8083c:	b570      	push	{r4, r5, r6, lr}
   8083e:	b090      	sub	sp, #64	; 0x40
	pToken = mstrtok(NULL," \r\n");
   80840:	4951      	ldr	r1, [pc, #324]	; (80988 <start+0x14c>)
   80842:	2000      	movs	r0, #0
   80844:	4b51      	ldr	r3, [pc, #324]	; (8098c <start+0x150>)
   80846:	4798      	blx	r3
	if(pToken)
   80848:	2800      	cmp	r0, #0
   8084a:	f000 8088 	beq.w	8095e <start+0x122>
   8084e:	4604      	mov	r4, r0
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   80850:	4b4f      	ldr	r3, [pc, #316]	; (80990 <start+0x154>)
   80852:	4798      	blx	r3
   80854:	4601      	mov	r1, r0
   80856:	4620      	mov	r0, r4
   80858:	4b4e      	ldr	r3, [pc, #312]	; (80994 <start+0x158>)
   8085a:	4798      	blx	r3
   8085c:	f243 132b 	movw	r3, #12587	; 0x312b
   80860:	4298      	cmp	r0, r3
   80862:	f000 8087 	beq.w	80974 <start+0x138>
   80866:	d850      	bhi.n	8090a <start+0xce>
   80868:	f240 6334 	movw	r3, #1588	; 0x634
   8086c:	4298      	cmp	r0, r3
   8086e:	d07a      	beq.n	80966 <start+0x12a>
   80870:	f242 6316 	movw	r3, #9750	; 0x2616
   80874:	4298      	cmp	r0, r3
   80876:	d172      	bne.n	8095e <start+0x122>
			mstrtokRestore();
   80878:	4b47      	ldr	r3, [pc, #284]	; (80998 <start+0x15c>)
   8087a:	4798      	blx	r3
			pToken = mstrtok(NULL," \r\n");
   8087c:	4942      	ldr	r1, [pc, #264]	; (80988 <start+0x14c>)
   8087e:	2000      	movs	r0, #0
   80880:	4b42      	ldr	r3, [pc, #264]	; (8098c <start+0x150>)
   80882:	4798      	blx	r3
			pParam=atoi((char*)pToken);
   80884:	4b45      	ldr	r3, [pc, #276]	; (8099c <start+0x160>)
   80886:	4798      	blx	r3
			if(pParam)
   80888:	4606      	mov	r6, r0
   8088a:	2800      	cmp	r0, #0
   8088c:	d067      	beq.n	8095e <start+0x122>
				Putstr("\r\nBuzzer on for ");
   8088e:	4944      	ldr	r1, [pc, #272]	; (809a0 <start+0x164>)
   80890:	2067      	movs	r0, #103	; 0x67
   80892:	4c44      	ldr	r4, [pc, #272]	; (809a4 <start+0x168>)
   80894:	47a0      	blx	r4
				sprintf(buf,"%d ms...\r\n",(int)pParam);
   80896:	4d44      	ldr	r5, [pc, #272]	; (809a8 <start+0x16c>)
   80898:	4632      	mov	r2, r6
   8089a:	4944      	ldr	r1, [pc, #272]	; (809ac <start+0x170>)
   8089c:	4628      	mov	r0, r5
   8089e:	4b44      	ldr	r3, [pc, #272]	; (809b0 <start+0x174>)
   808a0:	4798      	blx	r3
				Putstr(buf);
   808a2:	4629      	mov	r1, r5
   808a4:	2067      	movs	r0, #103	; 0x67
   808a6:	47a0      	blx	r4
				gpio_configure_pin(BUZZER_PWR,BUZZER_FLAGS);
   808a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   808ac:	2030      	movs	r0, #48	; 0x30
   808ae:	4b41      	ldr	r3, [pc, #260]	; (809b4 <start+0x178>)
   808b0:	4798      	blx	r3
					const pwm_clock_t clockSetting ={
   808b2:	4b41      	ldr	r3, [pc, #260]	; (809b8 <start+0x17c>)
   808b4:	ad03      	add	r5, sp, #12
   808b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   808ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
					pmc_enable_periph_clk(ID_PWM);
   808be:	2019      	movs	r0, #25
   808c0:	4b3e      	ldr	r3, [pc, #248]	; (809bc <start+0x180>)
   808c2:	4798      	blx	r3
					pwm_channel_disable(PWM,PWM_CHANNEL_3);
   808c4:	4c3e      	ldr	r4, [pc, #248]	; (809c0 <start+0x184>)
   808c6:	2103      	movs	r1, #3
   808c8:	4620      	mov	r0, r4
   808ca:	4b3e      	ldr	r3, [pc, #248]	; (809c4 <start+0x188>)
   808cc:	4798      	blx	r3
					pwm_init(PWM,(pwm_clock_t*)&clockSetting);
   808ce:	4629      	mov	r1, r5
   808d0:	4620      	mov	r0, r4
   808d2:	4b3d      	ldr	r3, [pc, #244]	; (809c8 <start+0x18c>)
   808d4:	4798      	blx	r3
					pwmChannelInstance.ul_prescaler=PWM_CMR_CPRE_CLKB;
   808d6:	230c      	movs	r3, #12
   808d8:	9307      	str	r3, [sp, #28]
					pwmChannelInstance.ul_period=100;
   808da:	2364      	movs	r3, #100	; 0x64
   808dc:	930a      	str	r3, [sp, #40]	; 0x28
					pwmChannelInstance.ul_duty=50;
   808de:	2332      	movs	r3, #50	; 0x32
   808e0:	9309      	str	r3, [sp, #36]	; 0x24
					pwmChannelInstance.channel=PWM_CHANNEL_3;
   808e2:	2503      	movs	r5, #3
   808e4:	a910      	add	r1, sp, #64	; 0x40
   808e6:	f841 5d28 	str.w	r5, [r1, #-40]!
					pwm_channel_init(PWM,&pwmChannelInstance);
   808ea:	4620      	mov	r0, r4
   808ec:	4b37      	ldr	r3, [pc, #220]	; (809cc <start+0x190>)
   808ee:	4798      	blx	r3
					pwm_channel_enable(PWM,PWM_CHANNEL_3);
   808f0:	4629      	mov	r1, r5
   808f2:	4620      	mov	r0, r4
   808f4:	4b36      	ldr	r3, [pc, #216]	; (809d0 <start+0x194>)
   808f6:	4798      	blx	r3
				PushTask(stop,0x2616,0,(uint32_t)pParam);
   808f8:	9600      	str	r6, [sp, #0]
   808fa:	2300      	movs	r3, #0
   808fc:	f242 6216 	movw	r2, #9750	; 0x2616
   80900:	4934      	ldr	r1, [pc, #208]	; (809d4 <start+0x198>)
   80902:	2066      	movs	r0, #102	; 0x66
   80904:	4c34      	ldr	r4, [pc, #208]	; (809d8 <start+0x19c>)
   80906:	47a0      	blx	r4
   80908:	e029      	b.n	8095e <start+0x122>
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   8090a:	f24c 6398 	movw	r3, #50840	; 0xc698
   8090e:	4298      	cmp	r0, r3
   80910:	d020      	beq.n	80954 <start+0x118>
   80912:	f64d 432e 	movw	r3, #56366	; 0xdc2e
   80916:	4298      	cmp	r0, r3
   80918:	d121      	bne.n	8095e <start+0x122>
			mstrtokRestore();
   8091a:	4b1f      	ldr	r3, [pc, #124]	; (80998 <start+0x15c>)
   8091c:	4798      	blx	r3
			pToken = mstrtok(NULL," \r\n");
   8091e:	491a      	ldr	r1, [pc, #104]	; (80988 <start+0x14c>)
   80920:	2000      	movs	r0, #0
   80922:	4b1a      	ldr	r3, [pc, #104]	; (8098c <start+0x150>)
   80924:	4798      	blx	r3
			if(pToken)
   80926:	b318      	cbz	r0, 80970 <start+0x134>
				 sc=atoi((char*)pToken);
   80928:	4b1c      	ldr	r3, [pc, #112]	; (8099c <start+0x160>)
   8092a:	4798      	blx	r3
   8092c:	4604      	mov	r4, r0
				 sprintf(buf,"\r\nNbTest: %d\r\n",(int)sc);
   8092e:	4d1e      	ldr	r5, [pc, #120]	; (809a8 <start+0x16c>)
   80930:	4602      	mov	r2, r0
   80932:	492a      	ldr	r1, [pc, #168]	; (809dc <start+0x1a0>)
   80934:	4628      	mov	r0, r5
   80936:	4b1e      	ldr	r3, [pc, #120]	; (809b0 <start+0x174>)
   80938:	4798      	blx	r3
				 Putstr(buf);
   8093a:	4629      	mov	r1, r5
   8093c:	2067      	movs	r0, #103	; 0x67
   8093e:	4b19      	ldr	r3, [pc, #100]	; (809a4 <start+0x168>)
   80940:	4798      	blx	r3
			PushTask(Test,TEST_NEW,sc,0);
   80942:	2300      	movs	r3, #0
   80944:	9300      	str	r3, [sp, #0]
   80946:	4623      	mov	r3, r4
   80948:	2264      	movs	r2, #100	; 0x64
   8094a:	4925      	ldr	r1, [pc, #148]	; (809e0 <start+0x1a4>)
   8094c:	2066      	movs	r0, #102	; 0x66
   8094e:	4c22      	ldr	r4, [pc, #136]	; (809d8 <start+0x19c>)
   80950:	47a0      	blx	r4
			break;
   80952:	e004      	b.n	8095e <start+0x122>
			Lcd(LCD_DEL);
   80954:	2065      	movs	r0, #101	; 0x65
   80956:	4c23      	ldr	r4, [pc, #140]	; (809e4 <start+0x1a8>)
   80958:	47a0      	blx	r4
			Lcd(LCD_NEW);
   8095a:	2064      	movs	r0, #100	; 0x64
   8095c:	47a0      	blx	r4
	mstrtokRestore();
   8095e:	4b0e      	ldr	r3, [pc, #56]	; (80998 <start+0x15c>)
   80960:	4798      	blx	r3
}
   80962:	b010      	add	sp, #64	; 0x40
   80964:	bd70      	pop	{r4, r5, r6, pc}
			LcdBacklight(true);
   80966:	2101      	movs	r1, #1
   80968:	2066      	movs	r0, #102	; 0x66
   8096a:	4b1e      	ldr	r3, [pc, #120]	; (809e4 <start+0x1a8>)
   8096c:	4798      	blx	r3
			break;
   8096e:	e7f6      	b.n	8095e <start+0x122>
				sc=1;
   80970:	2401      	movs	r4, #1
   80972:	e7e6      	b.n	80942 <start+0x106>
			gpio_configure_pin(BLUETOOTH_PWR,BLUETOOTH_FLAGS);
   80974:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80978:	2035      	movs	r0, #53	; 0x35
   8097a:	4b0e      	ldr	r3, [pc, #56]	; (809b4 <start+0x178>)
   8097c:	4798      	blx	r3
			gpio_set_pin_low(BLUETOOTH_PWR);
   8097e:	2035      	movs	r0, #53	; 0x35
   80980:	4b19      	ldr	r3, [pc, #100]	; (809e8 <start+0x1ac>)
   80982:	4798      	blx	r3
			break;
   80984:	e7eb      	b.n	8095e <start+0x122>
   80986:	bf00      	nop
   80988:	00089f04 	.word	0x00089f04
   8098c:	00083af9 	.word	0x00083af9
   80990:	00085241 	.word	0x00085241
   80994:	00080ea9 	.word	0x00080ea9
   80998:	00083ab5 	.word	0x00083ab5
   8099c:	00085101 	.word	0x00085101
   809a0:	00089ce8 	.word	0x00089ce8
   809a4:	000834ed 	.word	0x000834ed
   809a8:	20001a18 	.word	0x20001a18
   809ac:	00089cfc 	.word	0x00089cfc
   809b0:	000851f5 	.word	0x000851f5
   809b4:	000842b1 	.word	0x000842b1
   809b8:	00089bcc 	.word	0x00089bcc
   809bc:	000844b1 	.word	0x000844b1
   809c0:	4008c000 	.word	0x4008c000
   809c4:	0008466d 	.word	0x0008466d
   809c8:	00084539 	.word	0x00084539
   809cc:	0008457d 	.word	0x0008457d
   809d0:	00084663 	.word	0x00084663
   809d4:	00080791 	.word	0x00080791
   809d8:	00083881 	.word	0x00083881
   809dc:	00089cd8 	.word	0x00089cd8
   809e0:	00080431 	.word	0x00080431
   809e4:	00081579 	.word	0x00081579
   809e8:	00084275 	.word	0x00084275

000809ec <send>:
	};
}t_RTC_TIMR;


void send(uint32_t sc, void*pParam)
{
   809ec:	b510      	push	{r4, lr}
   809ee:	b082      	sub	sp, #8
	char *pToken;
	pToken = mstrtok(NULL," \r\n");
   809f0:	4942      	ldr	r1, [pc, #264]	; (80afc <send+0x110>)
   809f2:	2000      	movs	r0, #0
   809f4:	4b42      	ldr	r3, [pc, #264]	; (80b00 <send+0x114>)
   809f6:	4798      	blx	r3
	if(pToken)
   809f8:	b338      	cbz	r0, 80a4a <send+0x5e>
   809fa:	4604      	mov	r4, r0
	{
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   809fc:	4b41      	ldr	r3, [pc, #260]	; (80b04 <send+0x118>)
   809fe:	4798      	blx	r3
   80a00:	4601      	mov	r1, r0
   80a02:	4620      	mov	r0, r4
   80a04:	4b40      	ldr	r3, [pc, #256]	; (80b08 <send+0x11c>)
   80a06:	4798      	blx	r3
   80a08:	f24b 3340 	movw	r3, #45888	; 0xb340
   80a0c:	4298      	cmp	r0, r3
   80a0e:	d11c      	bne.n	80a4a <send+0x5e>
		{
		case 0xB340:		//synchro
			Putstr("\r\n\tBroadcast synchronization token\r\n");
   80a10:	493e      	ldr	r1, [pc, #248]	; (80b0c <send+0x120>)
   80a12:	2067      	movs	r0, #103	; 0x67
   80a14:	4b3e      	ldr	r3, [pc, #248]	; (80b10 <send+0x124>)
   80a16:	4798      	blx	r3
			registerValue[0]=RTC->RTC_TIMR;
   80a18:	4b3e      	ldr	r3, [pc, #248]	; (80b14 <send+0x128>)
   80a1a:	689b      	ldr	r3, [r3, #8]
   80a1c:	4a3e      	ldr	r2, [pc, #248]	; (80b18 <send+0x12c>)
   80a1e:	6013      	str	r3, [r2, #0]
			if((((t_RTC_TIMR*)&registerValue[0])->SEC_QL+=2)>9)
   80a20:	3302      	adds	r3, #2
   80a22:	f003 030f 	and.w	r3, r3, #15
   80a26:	2b09      	cmp	r3, #9
   80a28:	dc13      	bgt.n	80a52 <send+0x66>
   80a2a:	7811      	ldrb	r1, [r2, #0]
   80a2c:	f363 0103 	bfi	r1, r3, #0, #4
   80a30:	7011      	strb	r1, [r2, #0]
							}
						}
					}
				}
			}
			registerValue[1]=RTC->RTC_CALR;
   80a32:	4b38      	ldr	r3, [pc, #224]	; (80b14 <send+0x128>)
   80a34:	68da      	ldr	r2, [r3, #12]
   80a36:	4b38      	ldr	r3, [pc, #224]	; (80b18 <send+0x12c>)
   80a38:	605a      	str	r2, [r3, #4]
			WriteMultipleRegisters(MODBUS_BROADCAST_ADDRESS,0x1000,4,registerValue); 
   80a3a:	9300      	str	r3, [sp, #0]
   80a3c:	2304      	movs	r3, #4
   80a3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80a42:	217f      	movs	r1, #127	; 0x7f
   80a44:	2066      	movs	r0, #102	; 0x66
   80a46:	4c35      	ldr	r4, [pc, #212]	; (80b1c <send+0x130>)
   80a48:	47a0      	blx	r4
				break;
		default:
			break;
		}
	}
	mstrtokRestore();
   80a4a:	4b35      	ldr	r3, [pc, #212]	; (80b20 <send+0x134>)
   80a4c:	4798      	blx	r3
}
   80a4e:	b002      	add	sp, #8
   80a50:	bd10      	pop	{r4, pc}
				((t_RTC_TIMR*)&registerValue[0])->SEC_QL=0;
   80a52:	4a31      	ldr	r2, [pc, #196]	; (80b18 <send+0x12c>)
   80a54:	7813      	ldrb	r3, [r2, #0]
   80a56:	f36f 0303 	bfc	r3, #0, #4
   80a5a:	7013      	strb	r3, [r2, #0]
				if((((t_RTC_TIMR*)&registerValue[0])->SEC_QH++)>5)
   80a5c:	f3c3 1302 	ubfx	r3, r3, #4, #3
   80a60:	2b05      	cmp	r3, #5
   80a62:	dc05      	bgt.n	80a70 <send+0x84>
   80a64:	3301      	adds	r3, #1
   80a66:	7811      	ldrb	r1, [r2, #0]
   80a68:	f363 1106 	bfi	r1, r3, #4, #3
   80a6c:	7011      	strb	r1, [r2, #0]
   80a6e:	e7e0      	b.n	80a32 <send+0x46>
					((t_RTC_TIMR*)&registerValue[0])->SEC_QH=0;
   80a70:	4b29      	ldr	r3, [pc, #164]	; (80b18 <send+0x12c>)
   80a72:	781a      	ldrb	r2, [r3, #0]
   80a74:	f36f 1206 	bfc	r2, #4, #3
   80a78:	701a      	strb	r2, [r3, #0]
					if((((t_RTC_TIMR*)&registerValue[0])->MIN_QL++)>9)
   80a7a:	785b      	ldrb	r3, [r3, #1]
   80a7c:	f003 030f 	and.w	r3, r3, #15
   80a80:	2b09      	cmp	r3, #9
   80a82:	dc06      	bgt.n	80a92 <send+0xa6>
   80a84:	4a24      	ldr	r2, [pc, #144]	; (80b18 <send+0x12c>)
   80a86:	3301      	adds	r3, #1
   80a88:	7851      	ldrb	r1, [r2, #1]
   80a8a:	f363 0103 	bfi	r1, r3, #0, #4
   80a8e:	7051      	strb	r1, [r2, #1]
   80a90:	e7cf      	b.n	80a32 <send+0x46>
						((t_RTC_TIMR*)&registerValue[0])->MIN_QL=0;
   80a92:	4a21      	ldr	r2, [pc, #132]	; (80b18 <send+0x12c>)
   80a94:	7853      	ldrb	r3, [r2, #1]
   80a96:	f36f 0303 	bfc	r3, #0, #4
   80a9a:	7053      	strb	r3, [r2, #1]
						if((((t_RTC_TIMR*)&registerValue[0])->MIN_QH++)>5)
   80a9c:	f3c3 1302 	ubfx	r3, r3, #4, #3
   80aa0:	2b05      	cmp	r3, #5
   80aa2:	dc05      	bgt.n	80ab0 <send+0xc4>
   80aa4:	3301      	adds	r3, #1
   80aa6:	7851      	ldrb	r1, [r2, #1]
   80aa8:	f363 1106 	bfi	r1, r3, #4, #3
   80aac:	7051      	strb	r1, [r2, #1]
   80aae:	e7c0      	b.n	80a32 <send+0x46>
							((t_RTC_TIMR*)&registerValue[0])->MIN_QH=0;
   80ab0:	4b19      	ldr	r3, [pc, #100]	; (80b18 <send+0x12c>)
   80ab2:	785a      	ldrb	r2, [r3, #1]
   80ab4:	f36f 1206 	bfc	r2, #4, #3
   80ab8:	705a      	strb	r2, [r3, #1]
							if((((t_RTC_TIMR*)&registerValue[0])->HOUR_QL++)>9)
   80aba:	789b      	ldrb	r3, [r3, #2]
   80abc:	f003 030f 	and.w	r3, r3, #15
   80ac0:	2b09      	cmp	r3, #9
   80ac2:	dc06      	bgt.n	80ad2 <send+0xe6>
   80ac4:	4a14      	ldr	r2, [pc, #80]	; (80b18 <send+0x12c>)
   80ac6:	3301      	adds	r3, #1
   80ac8:	7891      	ldrb	r1, [r2, #2]
   80aca:	f363 0103 	bfi	r1, r3, #0, #4
   80ace:	7091      	strb	r1, [r2, #2]
   80ad0:	e7af      	b.n	80a32 <send+0x46>
								((t_RTC_TIMR*)&registerValue[0])->HOUR_QL=0;
   80ad2:	4a11      	ldr	r2, [pc, #68]	; (80b18 <send+0x12c>)
   80ad4:	7893      	ldrb	r3, [r2, #2]
   80ad6:	f36f 0303 	bfc	r3, #0, #4
   80ada:	7093      	strb	r3, [r2, #2]
								if((((t_RTC_TIMR*)&registerValue[0])->HOUR_QH++)>2)
   80adc:	f3c3 1301 	ubfx	r3, r3, #4, #2
   80ae0:	2b02      	cmp	r3, #2
   80ae2:	dc05      	bgt.n	80af0 <send+0x104>
   80ae4:	3301      	adds	r3, #1
   80ae6:	7891      	ldrb	r1, [r2, #2]
   80ae8:	f363 1105 	bfi	r1, r3, #4, #2
   80aec:	7091      	strb	r1, [r2, #2]
   80aee:	e7a0      	b.n	80a32 <send+0x46>
									((t_RTC_TIMR*)&registerValue[0])->HOUR_QH=0;
   80af0:	4b09      	ldr	r3, [pc, #36]	; (80b18 <send+0x12c>)
   80af2:	789a      	ldrb	r2, [r3, #2]
   80af4:	f36f 1205 	bfc	r2, #4, #2
   80af8:	709a      	strb	r2, [r3, #2]
   80afa:	e79a      	b.n	80a32 <send+0x46>
   80afc:	00089f04 	.word	0x00089f04
   80b00:	00083af9 	.word	0x00083af9
   80b04:	00085241 	.word	0x00085241
   80b08:	00080ea9 	.word	0x00080ea9
   80b0c:	00089cb0 	.word	0x00089cb0
   80b10:	000834ed 	.word	0x000834ed
   80b14:	400e1260 	.word	0x400e1260
   80b18:	200011c0 	.word	0x200011c0
   80b1c:	000819d1 	.word	0x000819d1
   80b20:	00083ab5 	.word	0x00083ab5

00080b24 <ComRS485>:

#define _rs485_Flush()					ComRS485(_COMRS485_FLUSH)


uint32_t ComRS485(uint32_t sc, ...)
{
   80b24:	b40f      	push	{r0, r1, r2, r3}
   80b26:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b28:	b083      	sub	sp, #12
	switch(sc)
   80b2a:	9908      	ldr	r1, [sp, #32]
   80b2c:	2964      	cmp	r1, #100	; 0x64
   80b2e:	d016      	beq.n	80b5e <ComRS485+0x3a>
   80b30:	d80e      	bhi.n	80b50 <ComRS485+0x2c>
   80b32:	2901      	cmp	r1, #1
   80b34:	d07b      	beq.n	80c2e <ComRS485+0x10a>
   80b36:	2902      	cmp	r1, #2
   80b38:	f040 80fb 	bne.w	80d32 <ComRS485+0x20e>
		_MODBUS_SLAVE_NOT_ACK,
		_MODBUS_PROCESS_ACK_FRAME
	};

	case _COMRS485_FLUSH:
		comRS485.pRead=comRS485.pWrite=comRS485TxRxBuf;
   80b3c:	4b80      	ldr	r3, [pc, #512]	; (80d40 <ComRS485+0x21c>)
   80b3e:	4a81      	ldr	r2, [pc, #516]	; (80d44 <ComRS485+0x220>)
   80b40:	601a      	str	r2, [r3, #0]
   80b42:	605a      	str	r2, [r3, #4]
		comRS485.crcA=0xFFFF;
   80b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80b48:	811a      	strh	r2, [r3, #8]
		comRS485.nChar=0;
   80b4a:	2000      	movs	r0, #0
   80b4c:	8298      	strh	r0, [r3, #20]
		break;
   80b4e:	e03c      	b.n	80bca <ComRS485+0xa6>
	switch(sc)
   80b50:	2966      	cmp	r1, #102	; 0x66
   80b52:	d03f      	beq.n	80bd4 <ComRS485+0xb0>
   80b54:	2967      	cmp	r1, #103	; 0x67
   80b56:	f040 80ec 	bne.w	80d32 <ComRS485+0x20e>
		return comRS485TxRxBuf;
   80b5a:	487a      	ldr	r0, [pc, #488]	; (80d44 <ComRS485+0x220>)
   80b5c:	e035      	b.n	80bca <ComRS485+0xa6>
		comRS485.state = IDLE;
   80b5e:	4d78      	ldr	r5, [pc, #480]	; (80d40 <ComRS485+0x21c>)
   80b60:	2701      	movs	r7, #1
   80b62:	74af      	strb	r7, [r5, #18]
		_rs485_Flush();
   80b64:	2002      	movs	r0, #2
   80b66:	f7ff ffdd 	bl	80b24 <ComRS485>
		comRS485.timer = 0;
   80b6a:	2400      	movs	r4, #0
   80b6c:	822c      	strh	r4, [r5, #16]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80b6e:	200d      	movs	r0, #13
   80b70:	4b75      	ldr	r3, [pc, #468]	; (80d48 <ComRS485+0x224>)
   80b72:	4798      	blx	r3
		usart_init_rs485(COMRS485_USART, &usart_console_settings, sysclk_get_cpu_hz());
   80b74:	4d75      	ldr	r5, [pc, #468]	; (80d4c <ComRS485+0x228>)
   80b76:	4a76      	ldr	r2, [pc, #472]	; (80d50 <ComRS485+0x22c>)
   80b78:	4976      	ldr	r1, [pc, #472]	; (80d54 <ComRS485+0x230>)
   80b7a:	4628      	mov	r0, r5
   80b7c:	4b76      	ldr	r3, [pc, #472]	; (80d58 <ComRS485+0x234>)
   80b7e:	4798      	blx	r3
		gpio_configure_pin(COMRS485_TX,		COMRS485_TX_FLAGS);
   80b80:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b84:	2012      	movs	r0, #18
   80b86:	4e75      	ldr	r6, [pc, #468]	; (80d5c <ComRS485+0x238>)
   80b88:	47b0      	blx	r6
		gpio_configure_pin(COMRS485_RX,		COMRS485_RX_FLAGS);
   80b8a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b8e:	2013      	movs	r0, #19
   80b90:	47b0      	blx	r6
		gpio_configure_pin(COMRS485_TXEN,	COMRS485_TXEN_FLAGS);
   80b92:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b96:	2027      	movs	r0, #39	; 0x27
   80b98:	47b0      	blx	r6
		usart_disable_interrupt(COMRS485_USART,0xFFFFFFFF);
   80b9a:	f04f 31ff 	mov.w	r1, #4294967295
   80b9e:	4628      	mov	r0, r5
   80ba0:	4b6f      	ldr	r3, [pc, #444]	; (80d60 <ComRS485+0x23c>)
   80ba2:	4798      	blx	r3
		usart_enable_interrupt(COMRS485_USART, US_IER_RXRDY);
   80ba4:	4639      	mov	r1, r7
   80ba6:	4628      	mov	r0, r5
   80ba8:	4b6e      	ldr	r3, [pc, #440]	; (80d64 <ComRS485+0x240>)
   80baa:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80bac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80bb0:	4b6d      	ldr	r3, [pc, #436]	; (80d68 <ComRS485+0x244>)
   80bb2:	601a      	str	r2, [r3, #0]
		usart_enable_tx(COMRS485_USART);
   80bb4:	4628      	mov	r0, r5
   80bb6:	4b6d      	ldr	r3, [pc, #436]	; (80d6c <ComRS485+0x248>)
   80bb8:	4798      	blx	r3
		usart_enable_rx(COMRS485_USART);
   80bba:	4628      	mov	r0, r5
   80bbc:	4b6c      	ldr	r3, [pc, #432]	; (80d70 <ComRS485+0x24c>)
   80bbe:	4798      	blx	r3
		Putstr("\r\n\tCOMRS485_NEW:\r\n");
   80bc0:	496c      	ldr	r1, [pc, #432]	; (80d74 <ComRS485+0x250>)
   80bc2:	2067      	movs	r0, #103	; 0x67
   80bc4:	4b6c      	ldr	r3, [pc, #432]	; (80d78 <ComRS485+0x254>)
   80bc6:	4798      	blx	r3
	default:
		Error(ERROR_COMRS485_SWITCH_BAD_SC, sc);
	}


	return 0;
   80bc8:	4620      	mov	r0, r4
}
   80bca:	b003      	add	sp, #12
   80bcc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   80bd0:	b004      	add	sp, #16
   80bd2:	4770      	bx	lr
		sprintf(buf, "\r\nRS485 NEED ACK: %d\r\n", _needAck);
   80bd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   80bd6:	4c69      	ldr	r4, [pc, #420]	; (80d7c <ComRS485+0x258>)
   80bd8:	4632      	mov	r2, r6
   80bda:	4969      	ldr	r1, [pc, #420]	; (80d80 <ComRS485+0x25c>)
   80bdc:	4620      	mov	r0, r4
   80bde:	4b69      	ldr	r3, [pc, #420]	; (80d84 <ComRS485+0x260>)
   80be0:	4798      	blx	r3
		Putstr(buf);
   80be2:	4621      	mov	r1, r4
   80be4:	2067      	movs	r0, #103	; 0x67
   80be6:	4c64      	ldr	r4, [pc, #400]	; (80d78 <ComRS485+0x254>)
   80be8:	47a0      	blx	r4
		Putstr("\r\n========================================================\r\n");
   80bea:	4f67      	ldr	r7, [pc, #412]	; (80d88 <ComRS485+0x264>)
   80bec:	4639      	mov	r1, r7
   80bee:	2067      	movs	r0, #103	; 0x67
   80bf0:	47a0      	blx	r4
		Puthexacode(comRS485TxRxBuf,_frameLen);
   80bf2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   80bf4:	462a      	mov	r2, r5
   80bf6:	4953      	ldr	r1, [pc, #332]	; (80d44 <ComRS485+0x220>)
   80bf8:	2069      	movs	r0, #105	; 0x69
   80bfa:	47a0      	blx	r4
		Putstr("\r\n========================================================\r\n");	
   80bfc:	4639      	mov	r1, r7
   80bfe:	2067      	movs	r0, #103	; 0x67
   80c00:	47a0      	blx	r4
		_rs485_Flush();
   80c02:	2002      	movs	r0, #2
   80c04:	f7ff ff8e 	bl	80b24 <ComRS485>
		if(_needAck)
   80c08:	b13e      	cbz	r6, 80c1a <ComRS485+0xf6>
			comRS485.frameLen = _frameLen;
   80c0a:	4b4d      	ldr	r3, [pc, #308]	; (80d40 <ComRS485+0x21c>)
   80c0c:	831d      	strh	r5, [r3, #24]
			comRS485.nbTries = COMRS485_NB_TRIES;
   80c0e:	2203      	movs	r2, #3
   80c10:	759a      	strb	r2, [r3, #22]
			comRS485.state=	M_WAIT_ACK;
   80c12:	749a      	strb	r2, [r3, #18]
			comRS485.timer= COMRS485_TX_TRY_TIMEOUT_VAL;
   80c14:	f640 32b8 	movw	r2, #3000	; 0xbb8
   80c18:	821a      	strh	r2, [r3, #16]
		comRS485.pWrite=comRS485TxRxBuf + _frameLen;
   80c1a:	4a4a      	ldr	r2, [pc, #296]	; (80d44 <ComRS485+0x220>)
   80c1c:	442a      	add	r2, r5
   80c1e:	4b48      	ldr	r3, [pc, #288]	; (80d40 <ComRS485+0x21c>)
   80c20:	601a      	str	r2, [r3, #0]
		usart_enable_interrupt(COMRS485_USART,US_IER_TXRDY);
   80c22:	2102      	movs	r1, #2
   80c24:	4849      	ldr	r0, [pc, #292]	; (80d4c <ComRS485+0x228>)
   80c26:	4b4f      	ldr	r3, [pc, #316]	; (80d64 <ComRS485+0x240>)
   80c28:	4798      	blx	r3
	return 0;
   80c2a:	2000      	movs	r0, #0
		break;
   80c2c:	e7cd      	b.n	80bca <ComRS485+0xa6>
		if(comRS485.timer)
   80c2e:	4b44      	ldr	r3, [pc, #272]	; (80d40 <ComRS485+0x21c>)
   80c30:	8a1b      	ldrh	r3, [r3, #16]
   80c32:	2b00      	cmp	r3, #0
   80c34:	f000 8082 	beq.w	80d3c <ComRS485+0x218>
			if(--comRS485.timer==0)
   80c38:	3b01      	subs	r3, #1
   80c3a:	b29b      	uxth	r3, r3
   80c3c:	4a40      	ldr	r2, [pc, #256]	; (80d40 <ComRS485+0x21c>)
   80c3e:	8213      	strh	r3, [r2, #16]
   80c40:	b10b      	cbz	r3, 80c46 <ComRS485+0x122>
	return 0;
   80c42:	2000      	movs	r0, #0
   80c44:	e7c1      	b.n	80bca <ComRS485+0xa6>
				Putstr("\r\n=======================FRAME RECEIVED=================================\r\n");
   80c46:	4951      	ldr	r1, [pc, #324]	; (80d8c <ComRS485+0x268>)
   80c48:	2067      	movs	r0, #103	; 0x67
   80c4a:	4d4b      	ldr	r5, [pc, #300]	; (80d78 <ComRS485+0x254>)
   80c4c:	47a8      	blx	r5
				Puthexacode(comRS485TxRxBuf,comRS485.nChar);
   80c4e:	4c3c      	ldr	r4, [pc, #240]	; (80d40 <ComRS485+0x21c>)
   80c50:	8aa2      	ldrh	r2, [r4, #20]
   80c52:	493c      	ldr	r1, [pc, #240]	; (80d44 <ComRS485+0x220>)
   80c54:	2069      	movs	r0, #105	; 0x69
   80c56:	47a8      	blx	r5
				sprintf(buf,"\trecCrc:%04X crcC:%04X ",comRS485.recCrc,comRS485.crcC);
   80c58:	4e48      	ldr	r6, [pc, #288]	; (80d7c <ComRS485+0x258>)
   80c5a:	89a3      	ldrh	r3, [r4, #12]
   80c5c:	89e2      	ldrh	r2, [r4, #14]
   80c5e:	494c      	ldr	r1, [pc, #304]	; (80d90 <ComRS485+0x26c>)
   80c60:	4630      	mov	r0, r6
   80c62:	4f48      	ldr	r7, [pc, #288]	; (80d84 <ComRS485+0x260>)
   80c64:	47b8      	blx	r7
				Putstr(buf);
   80c66:	4631      	mov	r1, r6
   80c68:	2067      	movs	r0, #103	; 0x67
   80c6a:	47a8      	blx	r5
				Putstr("\r\n======================================================================\r\n");
   80c6c:	4949      	ldr	r1, [pc, #292]	; (80d94 <ComRS485+0x270>)
   80c6e:	2067      	movs	r0, #103	; 0x67
   80c70:	47a8      	blx	r5
				switch(comRS485.state)
   80c72:	7ca3      	ldrb	r3, [r4, #18]
   80c74:	2b04      	cmp	r3, #4
   80c76:	d00b      	beq.n	80c90 <ComRS485+0x16c>
   80c78:	2b07      	cmp	r3, #7
   80c7a:	d009      	beq.n	80c90 <ComRS485+0x16c>
   80c7c:	2b03      	cmp	r3, #3
   80c7e:	d021      	beq.n	80cc4 <ComRS485+0x1a0>
					comRS485.state = IDLE;
   80c80:	2201      	movs	r2, #1
   80c82:	4b2f      	ldr	r3, [pc, #188]	; (80d40 <ComRS485+0x21c>)
   80c84:	749a      	strb	r2, [r3, #18]
					_rs485_Flush();
   80c86:	2002      	movs	r0, #2
   80c88:	f7ff ff4c 	bl	80b24 <ComRS485>
	return 0;
   80c8c:	2000      	movs	r0, #0
					break;
   80c8e:	e79c      	b.n	80bca <ComRS485+0xa6>
					if(comRS485.recCrc==comRS485.crcC)
   80c90:	4b2b      	ldr	r3, [pc, #172]	; (80d40 <ComRS485+0x21c>)
   80c92:	89da      	ldrh	r2, [r3, #14]
   80c94:	899b      	ldrh	r3, [r3, #12]
   80c96:	429a      	cmp	r2, r3
   80c98:	d007      	beq.n	80caa <ComRS485+0x186>
						comRS485.state = IDLE;
   80c9a:	2201      	movs	r2, #1
   80c9c:	4b28      	ldr	r3, [pc, #160]	; (80d40 <ComRS485+0x21c>)
   80c9e:	749a      	strb	r2, [r3, #18]
						_rs485_Flush();
   80ca0:	2002      	movs	r0, #2
   80ca2:	f7ff ff3f 	bl	80b24 <ComRS485>
	return 0;
   80ca6:	2000      	movs	r0, #0
   80ca8:	e78f      	b.n	80bca <ComRS485+0xa6>
						PushTask(Modbus,_MODBUS_PROCESS_RECEIVED_FRAME,0,0);
   80caa:	2400      	movs	r4, #0
   80cac:	9400      	str	r4, [sp, #0]
   80cae:	4623      	mov	r3, r4
   80cb0:	2201      	movs	r2, #1
   80cb2:	4939      	ldr	r1, [pc, #228]	; (80d98 <ComRS485+0x274>)
   80cb4:	2066      	movs	r0, #102	; 0x66
   80cb6:	4d39      	ldr	r5, [pc, #228]	; (80d9c <ComRS485+0x278>)
   80cb8:	47a8      	blx	r5
						_rs485_Flush();
   80cba:	2002      	movs	r0, #2
   80cbc:	f7ff ff32 	bl	80b24 <ComRS485>
	return 0;
   80cc0:	4620      	mov	r0, r4
   80cc2:	e782      	b.n	80bca <ComRS485+0xa6>
					if(--comRS485.nbTries)
   80cc4:	4a1e      	ldr	r2, [pc, #120]	; (80d40 <ComRS485+0x21c>)
   80cc6:	7d93      	ldrb	r3, [r2, #22]
   80cc8:	3b01      	subs	r3, #1
   80cca:	b2db      	uxtb	r3, r3
   80ccc:	7593      	strb	r3, [r2, #22]
   80cce:	b193      	cbz	r3, 80cf6 <ComRS485+0x1d2>
						Putstr("\r\nm_WAIT_ACK\r\n");
   80cd0:	4933      	ldr	r1, [pc, #204]	; (80da0 <ComRS485+0x27c>)
   80cd2:	2067      	movs	r0, #103	; 0x67
   80cd4:	4b28      	ldr	r3, [pc, #160]	; (80d78 <ComRS485+0x254>)
   80cd6:	4798      	blx	r3
						comRS485.pRead = comRS485TxRxBuf;
   80cd8:	4b19      	ldr	r3, [pc, #100]	; (80d40 <ComRS485+0x21c>)
   80cda:	4a1a      	ldr	r2, [pc, #104]	; (80d44 <ComRS485+0x220>)
   80cdc:	605a      	str	r2, [r3, #4]
						comRS485.pWrite=comRS485TxRxBuf + comRS485.frameLen;
   80cde:	8b19      	ldrh	r1, [r3, #24]
   80ce0:	440a      	add	r2, r1
   80ce2:	601a      	str	r2, [r3, #0]
						comRS485.timer=COMRS485_TX_TRY_TIMEOUT_VAL;
   80ce4:	f640 32b8 	movw	r2, #3000	; 0xbb8
   80ce8:	821a      	strh	r2, [r3, #16]
						usart_enable_interrupt(COMRS485_USART,US_IER_TXRDY);
   80cea:	2102      	movs	r1, #2
   80cec:	4817      	ldr	r0, [pc, #92]	; (80d4c <ComRS485+0x228>)
   80cee:	4b1d      	ldr	r3, [pc, #116]	; (80d64 <ComRS485+0x240>)
   80cf0:	4798      	blx	r3
	return 0;
   80cf2:	2000      	movs	r0, #0
   80cf4:	e769      	b.n	80bca <ComRS485+0xa6>
						Putstr("\r\n\t***** COMRS485 NO ACK FROM SLAVE #");
   80cf6:	492b      	ldr	r1, [pc, #172]	; (80da4 <ComRS485+0x280>)
   80cf8:	2067      	movs	r0, #103	; 0x67
   80cfa:	4d1f      	ldr	r5, [pc, #124]	; (80d78 <ComRS485+0x254>)
   80cfc:	47a8      	blx	r5
						sprintf(buf, "%02X by %d tries *****\r\n", comRS485TxRxBuf[0], COMRS485_NB_TRIES);
   80cfe:	4c11      	ldr	r4, [pc, #68]	; (80d44 <ComRS485+0x220>)
   80d00:	2303      	movs	r3, #3
   80d02:	7822      	ldrb	r2, [r4, #0]
   80d04:	4928      	ldr	r1, [pc, #160]	; (80da8 <ComRS485+0x284>)
   80d06:	481d      	ldr	r0, [pc, #116]	; (80d7c <ComRS485+0x258>)
   80d08:	4f1e      	ldr	r7, [pc, #120]	; (80d84 <ComRS485+0x260>)
   80d0a:	47b8      	blx	r7
						Putstr(buf);
   80d0c:	4631      	mov	r1, r6
   80d0e:	2067      	movs	r0, #103	; 0x67
   80d10:	47a8      	blx	r5
						PushTask(Modbus, _MODBUS_SLAVE_NOT_ACK, comRS485TxRxBuf[0], 0);
   80d12:	7823      	ldrb	r3, [r4, #0]
   80d14:	2400      	movs	r4, #0
   80d16:	9400      	str	r4, [sp, #0]
   80d18:	2202      	movs	r2, #2
   80d1a:	491f      	ldr	r1, [pc, #124]	; (80d98 <ComRS485+0x274>)
   80d1c:	2066      	movs	r0, #102	; 0x66
   80d1e:	4d1f      	ldr	r5, [pc, #124]	; (80d9c <ComRS485+0x278>)
   80d20:	47a8      	blx	r5
						comRS485.state = IDLE;
   80d22:	2201      	movs	r2, #1
   80d24:	4b06      	ldr	r3, [pc, #24]	; (80d40 <ComRS485+0x21c>)
   80d26:	749a      	strb	r2, [r3, #18]
						_rs485_Flush();
   80d28:	2002      	movs	r0, #2
   80d2a:	f7ff fefb 	bl	80b24 <ComRS485>
	return 0;
   80d2e:	4620      	mov	r0, r4
   80d30:	e74b      	b.n	80bca <ComRS485+0xa6>
		Error(ERROR_COMRS485_SWITCH_BAD_SC, sc);
   80d32:	2020      	movs	r0, #32
   80d34:	4b1d      	ldr	r3, [pc, #116]	; (80dac <ComRS485+0x288>)
   80d36:	4798      	blx	r3
	return 0;
   80d38:	2000      	movs	r0, #0
   80d3a:	e746      	b.n	80bca <ComRS485+0xa6>
   80d3c:	2000      	movs	r0, #0
   80d3e:	e744      	b.n	80bca <ComRS485+0xa6>
   80d40:	200011d0 	.word	0x200011d0
   80d44:	20001074 	.word	0x20001074
   80d48:	000844b1 	.word	0x000844b1
   80d4c:	40090000 	.word	0x40090000
   80d50:	05b8d800 	.word	0x05b8d800
   80d54:	00089e8c 	.word	0x00089e8c
   80d58:	000803ed 	.word	0x000803ed
   80d5c:	000842b1 	.word	0x000842b1
   80d60:	00080421 	.word	0x00080421
   80d64:	0008041d 	.word	0x0008041d
   80d68:	e000e100 	.word	0xe000e100
   80d6c:	00080411 	.word	0x00080411
   80d70:	00080417 	.word	0x00080417
   80d74:	00089d1c 	.word	0x00089d1c
   80d78:	000834ed 	.word	0x000834ed
   80d7c:	20001a18 	.word	0x20001a18
   80d80:	00089d30 	.word	0x00089d30
   80d84:	000851f5 	.word	0x000851f5
   80d88:	00089d48 	.word	0x00089d48
   80d8c:	00089d88 	.word	0x00089d88
   80d90:	00089dd4 	.word	0x00089dd4
   80d94:	00089dec 	.word	0x00089dec
   80d98:	000819d1 	.word	0x000819d1
   80d9c:	00083881 	.word	0x00083881
   80da0:	00089e38 	.word	0x00089e38
   80da4:	00089e48 	.word	0x00089e48
   80da8:	00089e70 	.word	0x00089e70
   80dac:	00080f15 	.word	0x00080f15

00080db0 <USART0_Handler>:


void COMRS485_Handler()
{
   80db0:	b538      	push	{r3, r4, r5, lr}
	uint32_t dw_status = usart_get_status(COMRS485_USART);
   80db2:	4c35      	ldr	r4, [pc, #212]	; (80e88 <USART0_Handler+0xd8>)
   80db4:	4620      	mov	r0, r4
   80db6:	4b35      	ldr	r3, [pc, #212]	; (80e8c <USART0_Handler+0xdc>)
   80db8:	4798      	blx	r3
   80dba:	4605      	mov	r5, r0
	uint8_t dummy;
	
	if((mIsBitsSet(COMRS485_USART->US_IMR,US_IMR_RXRDY))&&(dw_status & US_CSR_RXRDY))
   80dbc:	6923      	ldr	r3, [r4, #16]
   80dbe:	f013 0f01 	tst.w	r3, #1
   80dc2:	d034      	beq.n	80e2e <USART0_Handler+0x7e>
   80dc4:	f010 0f01 	tst.w	r0, #1
   80dc8:	d031      	beq.n	80e2e <USART0_Handler+0x7e>
			break;
		}


#else //SLAVE ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		switch(comRS485.state)
   80dca:	4b31      	ldr	r3, [pc, #196]	; (80e90 <USART0_Handler+0xe0>)
   80dcc:	7c9b      	ldrb	r3, [r3, #18]
   80dce:	2b01      	cmp	r3, #1
   80dd0:	d00a      	beq.n	80de8 <USART0_Handler+0x38>
   80dd2:	2b07      	cmp	r3, #7
   80dd4:	d00b      	beq.n	80dee <USART0_Handler+0x3e>
			if(++comRS485.pWrite>=comRS485TxRxBuf+COMRS485_TXRX_BUFFER_LEN+COMRS485_BUFFER_GUARD) /*comRS485.pWrite=comRS485TxRxBuf;*/
			/*if(comRS485.pWrite==comRS485.pRead)*/ Error(ERROR_COMRS485_RX_BUFFER_FULL,0);
			break;

		default:
			dummy = COMRS485_USART->US_RHR & US_RHR_RXCHR_Msk;
   80dd6:	4b2c      	ldr	r3, [pc, #176]	; (80e88 <USART0_Handler+0xd8>)
   80dd8:	699b      	ldr	r3, [r3, #24]
			_rs485_Flush();
   80dda:	2002      	movs	r0, #2
   80ddc:	4b2d      	ldr	r3, [pc, #180]	; (80e94 <USART0_Handler+0xe4>)
   80dde:	4798      	blx	r3
			comRS485.state=IDLE;
   80de0:	2201      	movs	r2, #1
   80de2:	4b2b      	ldr	r3, [pc, #172]	; (80e90 <USART0_Handler+0xe0>)
   80de4:	749a      	strb	r2, [r3, #18]
			break;
   80de6:	e022      	b.n	80e2e <USART0_Handler+0x7e>
			comRS485.state=S_RECEIVE;
   80de8:	2207      	movs	r2, #7
   80dea:	4b29      	ldr	r3, [pc, #164]	; (80e90 <USART0_Handler+0xe0>)
   80dec:	749a      	strb	r2, [r3, #18]
			comRS485.timer=COMRS485_RX_TIMEOUT_VAL;
   80dee:	4c28      	ldr	r4, [pc, #160]	; (80e90 <USART0_Handler+0xe0>)
   80df0:	23c8      	movs	r3, #200	; 0xc8
   80df2:	8223      	strh	r3, [r4, #16]
			*comRS485.pWrite=COMRS485_USART->US_RHR & US_RHR_RXCHR_Msk;
   80df4:	6823      	ldr	r3, [r4, #0]
   80df6:	4a24      	ldr	r2, [pc, #144]	; (80e88 <USART0_Handler+0xd8>)
   80df8:	6992      	ldr	r2, [r2, #24]
   80dfa:	701a      	strb	r2, [r3, #0]
			comRS485.crcC=comRS485.crcB;
   80dfc:	8963      	ldrh	r3, [r4, #10]
   80dfe:	81a3      	strh	r3, [r4, #12]
			comRS485.crcB=comRS485.crcA;
   80e00:	8921      	ldrh	r1, [r4, #8]
   80e02:	8161      	strh	r1, [r4, #10]
			comRS485.crcA=CRC16MODBUSbyte(*comRS485.pWrite,comRS485.crcA);
   80e04:	6823      	ldr	r3, [r4, #0]
   80e06:	7818      	ldrb	r0, [r3, #0]
   80e08:	4b23      	ldr	r3, [pc, #140]	; (80e98 <USART0_Handler+0xe8>)
   80e0a:	4798      	blx	r3
   80e0c:	8120      	strh	r0, [r4, #8]
			comRS485.recCrc<<=8;
   80e0e:	89e3      	ldrh	r3, [r4, #14]
   80e10:	021b      	lsls	r3, r3, #8
   80e12:	b29b      	uxth	r3, r3
   80e14:	81e3      	strh	r3, [r4, #14]
			comRS485.recCrc|=*comRS485.pWrite;
   80e16:	6822      	ldr	r2, [r4, #0]
   80e18:	f812 1b01 	ldrb.w	r1, [r2], #1
   80e1c:	430b      	orrs	r3, r1
   80e1e:	81e3      	strh	r3, [r4, #14]
			comRS485.nChar++;
   80e20:	8aa3      	ldrh	r3, [r4, #20]
   80e22:	3301      	adds	r3, #1
   80e24:	82a3      	strh	r3, [r4, #20]
			if(++comRS485.pWrite>=comRS485TxRxBuf+COMRS485_TXRX_BUFFER_LEN+COMRS485_BUFFER_GUARD) /*comRS485.pWrite=comRS485TxRxBuf;*/
   80e26:	6022      	str	r2, [r4, #0]
   80e28:	4b1c      	ldr	r3, [pc, #112]	; (80e9c <USART0_Handler+0xec>)
   80e2a:	429a      	cmp	r2, r3
   80e2c:	d216      	bcs.n	80e5c <USART0_Handler+0xac>
		}
#endif	//MASTER
	}

	
	if((mIsBitsSet(COMRS485_USART->US_IMR,US_IMR_TXRDY))&&(dw_status & US_CSR_TXRDY))
   80e2e:	4b16      	ldr	r3, [pc, #88]	; (80e88 <USART0_Handler+0xd8>)
   80e30:	691b      	ldr	r3, [r3, #16]
   80e32:	f013 0f02 	tst.w	r3, #2
   80e36:	d010      	beq.n	80e5a <USART0_Handler+0xaa>
   80e38:	f015 0f02 	tst.w	r5, #2
   80e3c:	d00d      	beq.n	80e5a <USART0_Handler+0xaa>
	{
		if(comRS485.pRead!=comRS485.pWrite)
   80e3e:	4a14      	ldr	r2, [pc, #80]	; (80e90 <USART0_Handler+0xe0>)
   80e40:	6853      	ldr	r3, [r2, #4]
   80e42:	6812      	ldr	r2, [r2, #0]
   80e44:	4293      	cmp	r3, r2
   80e46:	d016      	beq.n	80e76 <USART0_Handler+0xc6>
		{
			COMRS485_USART->US_THR = US_THR_TXCHR(*comRS485.pRead++);
   80e48:	1c5a      	adds	r2, r3, #1
   80e4a:	4911      	ldr	r1, [pc, #68]	; (80e90 <USART0_Handler+0xe0>)
   80e4c:	604a      	str	r2, [r1, #4]
   80e4e:	7819      	ldrb	r1, [r3, #0]
   80e50:	4b0d      	ldr	r3, [pc, #52]	; (80e88 <USART0_Handler+0xd8>)
   80e52:	61d9      	str	r1, [r3, #28]
			if(comRS485.pRead>=comRS485TxRxBuf+COMRS485_TXRX_BUFFER_LEN+COMRS485_BUFFER_GUARD) /* comRS485.pRead=comRS485TxRxBuf;*/
   80e54:	4b11      	ldr	r3, [pc, #68]	; (80e9c <USART0_Handler+0xec>)
   80e56:	429a      	cmp	r2, r3
   80e58:	d205      	bcs.n	80e66 <USART0_Handler+0xb6>
   80e5a:	bd38      	pop	{r3, r4, r5, pc}
			/*if(comRS485.pWrite==comRS485.pRead)*/ Error(ERROR_COMRS485_RX_BUFFER_FULL,0);
   80e5c:	2100      	movs	r1, #0
   80e5e:	2023      	movs	r0, #35	; 0x23
   80e60:	4b0f      	ldr	r3, [pc, #60]	; (80ea0 <USART0_Handler+0xf0>)
   80e62:	4798      	blx	r3
   80e64:	e7e3      	b.n	80e2e <USART0_Handler+0x7e>
			{
				usart_disable_interrupt(COMRS485_USART,US_IER_TXRDY);
   80e66:	2102      	movs	r1, #2
   80e68:	4807      	ldr	r0, [pc, #28]	; (80e88 <USART0_Handler+0xd8>)
   80e6a:	4b0e      	ldr	r3, [pc, #56]	; (80ea4 <USART0_Handler+0xf4>)
   80e6c:	4798      	blx	r3
				_rs485_Flush();
   80e6e:	2002      	movs	r0, #2
   80e70:	4b08      	ldr	r3, [pc, #32]	; (80e94 <USART0_Handler+0xe4>)
   80e72:	4798      	blx	r3
   80e74:	bd38      	pop	{r3, r4, r5, pc}
			}
		}
		else
		{
			usart_disable_interrupt(COMRS485_USART,US_IER_TXRDY);
   80e76:	2102      	movs	r1, #2
   80e78:	4803      	ldr	r0, [pc, #12]	; (80e88 <USART0_Handler+0xd8>)
   80e7a:	4b0a      	ldr	r3, [pc, #40]	; (80ea4 <USART0_Handler+0xf4>)
   80e7c:	4798      	blx	r3
			_rs485_Flush();
   80e7e:	2002      	movs	r0, #2
   80e80:	4b04      	ldr	r3, [pc, #16]	; (80e94 <USART0_Handler+0xe4>)
   80e82:	4798      	blx	r3
		}
	}
   80e84:	e7e9      	b.n	80e5a <USART0_Handler+0xaa>
   80e86:	bf00      	nop
   80e88:	40090000 	.word	0x40090000
   80e8c:	00080425 	.word	0x00080425
   80e90:	200011d0 	.word	0x200011d0
   80e94:	00080b25 	.word	0x00080b25
   80e98:	00080edd 	.word	0x00080edd
   80e9c:	20001176 	.word	0x20001176
   80ea0:	00080f15 	.word	0x00080f15
   80ea4:	00080421 	.word	0x00080421

00080ea8 <CRC16MODBUSFRAME>:
unsigned int CRC16MODBUSFRAME (unsigned char *nData, unsigned int wLength)
{
    unsigned char  nTemp;
    unsigned int  wCRCWord = 0xFFFF;

    while (wLength--)
   80ea8:	b189      	cbz	r1, 80ece <CRC16MODBUSFRAME+0x26>
{
   80eaa:	b410      	push	{r4}
   80eac:	1841      	adds	r1, r0, r1
    while (wLength--)
   80eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
    {
        nTemp = *nData++ ^ wCRCWord;
        wCRCWord >>= 8;
        wCRCWord ^= wCRCTable[nTemp];
   80eb2:	4c09      	ldr	r4, [pc, #36]	; (80ed8 <CRC16MODBUSFRAME+0x30>)
        nTemp = *nData++ ^ wCRCWord;
   80eb4:	f810 3b01 	ldrb.w	r3, [r0], #1
   80eb8:	4053      	eors	r3, r2
        wCRCWord ^= wCRCTable[nTemp];
   80eba:	b2db      	uxtb	r3, r3
   80ebc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   80ec0:	ea83 2212 	eor.w	r2, r3, r2, lsr #8
    while (wLength--)
   80ec4:	4281      	cmp	r1, r0
   80ec6:	d1f5      	bne.n	80eb4 <CRC16MODBUSFRAME+0xc>
    }
    return wCRCWord;
}
   80ec8:	4610      	mov	r0, r2
   80eca:	bc10      	pop	{r4}
   80ecc:	4770      	bx	lr
    unsigned int  wCRCWord = 0xFFFF;
   80ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
   80ed2:	4610      	mov	r0, r2
   80ed4:	4770      	bx	lr
   80ed6:	bf00      	nop
   80ed8:	20000124 	.word	0x20000124

00080edc <CRC16MODBUSbyte>:

unsigned int CRC16MODBUSbyte (unsigned char nData, unsigned int wCRCWord)
{
    unsigned char  nTemp;

    nTemp = (((unsigned int)nData&0xFF) ^ wCRCWord)&0xFF;
   80edc:	4048      	eors	r0, r1
    wCRCWord >>= 8;
    wCRCWord ^= wCRCTable[nTemp];
   80ede:	b2c0      	uxtb	r0, r0
   80ee0:	4b02      	ldr	r3, [pc, #8]	; (80eec <CRC16MODBUSbyte+0x10>)
   80ee2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    return wCRCWord;
}
   80ee6:	ea80 2011 	eor.w	r0, r0, r1, lsr #8
   80eea:	4770      	bx	lr
   80eec:	20000124 	.word	0x20000124

00080ef0 <CRC16MODBUSword>:
    wCRCWord ^= wCRCTable[nTemp];
   80ef0:	4a07      	ldr	r2, [pc, #28]	; (80f10 <CRC16MODBUSword+0x20>)
    nTemp = (((unsigned int)nData&0xFF) ^ wCRCWord)&0xFF;
   80ef2:	ea80 0301 	eor.w	r3, r0, r1
    wCRCWord ^= wCRCTable[nTemp];
   80ef6:	b2db      	uxtb	r3, r3
   80ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   80efc:	ea83 2111 	eor.w	r1, r3, r1, lsr #8
    nTemp = (((unsigned int)nData&0xFF) ^ wCRCWord)&0xFF;
   80f00:	ea81 2310 	eor.w	r3, r1, r0, lsr #8
    wCRCWord ^= wCRCTable[nTemp];
   80f04:	b2db      	uxtb	r3, r3
   80f06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]

unsigned int CRC16MODBUSword(unsigned int wData, unsigned int wCRCWord)
{
	wCRCWord = CRC16MODBUSbyte (wData&0xFF, wCRCWord);
	return CRC16MODBUSbyte (wData>>8, wCRCWord);
}
   80f0a:	ea80 2011 	eor.w	r0, r0, r1, lsr #8
   80f0e:	4770      	bx	lr
   80f10:	20000124 	.word	0x20000124

00080f14 <Error>:



extern char buf[];
void Error(uint32_t sc, ...)
{
   80f14:	b40f      	push	{r0, r1, r2, r3}
   80f16:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i,k;
#define er sc
#define exEr	pa1
	sprintf(buf, "\r\n\t*****ERROR:%d\tSC:%d*****\r\n", (int)er, (int)exEr);
   80f1a:	4c6e      	ldr	r4, [pc, #440]	; (810d4 <Error+0x1c0>)
   80f1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80f1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80f20:	496d      	ldr	r1, [pc, #436]	; (810d8 <Error+0x1c4>)
   80f22:	4620      	mov	r0, r4
   80f24:	4d6d      	ldr	r5, [pc, #436]	; (810dc <Error+0x1c8>)
   80f26:	47a8      	blx	r5
	Putstr(buf);
   80f28:	4621      	mov	r1, r4
   80f2a:	2067      	movs	r0, #103	; 0x67
   80f2c:	4b6c      	ldr	r3, [pc, #432]	; (810e0 <Error+0x1cc>)
   80f2e:	4798      	blx	r3
	delay_ms(1000);
   80f30:	486c      	ldr	r0, [pc, #432]	; (810e4 <Error+0x1d0>)
   80f32:	4b6d      	ldr	r3, [pc, #436]	; (810e8 <Error+0x1d4>)
   80f34:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80f36:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80f38:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80f3c:	2200      	movs	r2, #0
   80f3e:	4b6b      	ldr	r3, [pc, #428]	; (810ec <Error+0x1d8>)
   80f40:	701a      	strb	r2, [r3, #0]
	gpio_configure_pin(ERROR_LED, ERROR_LED_FLAGS);
   80f42:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80f46:	2033      	movs	r0, #51	; 0x33
   80f48:	4b69      	ldr	r3, [pc, #420]	; (810f0 <Error+0x1dc>)
   80f4a:	4798      	blx	r3
   80f4c:	f04f 0805 	mov.w	r8, #5
//#if HEART_LED_ACTIVE_LEVEL==1	
	
	for(k=0;k<5;k++)
	{
		gpio_set_pin_high(ERROR_LED);
		delay_ms(3000);
   80f50:	4c65      	ldr	r4, [pc, #404]	; (810e8 <Error+0x1d4>)
			delay_ms(1500);
			gpio_set_pin_low(ERROR_LED);
		}
		else
		{
			for(i=0;i<(er/10)*2;i++)
   80f52:	4f68      	ldr	r7, [pc, #416]	; (810f4 <Error+0x1e0>)
   80f54:	e031      	b.n	80fba <Error+0xa6>
			gpio_set_pin_high(ERROR_LED);
   80f56:	2033      	movs	r0, #51	; 0x33
   80f58:	4b67      	ldr	r3, [pc, #412]	; (810f8 <Error+0x1e4>)
   80f5a:	4798      	blx	r3
			delay_ms(1500);
   80f5c:	4867      	ldr	r0, [pc, #412]	; (810fc <Error+0x1e8>)
   80f5e:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   80f60:	2033      	movs	r0, #51	; 0x33
   80f62:	4b67      	ldr	r3, [pc, #412]	; (81100 <Error+0x1ec>)
   80f64:	4798      	blx	r3
   80f66:	e048      	b.n	80ffa <Error+0xe6>
		}
		delay_ms(800);

		if((er%10)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   80f68:	2033      	movs	r0, #51	; 0x33
   80f6a:	4b63      	ldr	r3, [pc, #396]	; (810f8 <Error+0x1e4>)
   80f6c:	4798      	blx	r3
			delay_ms(1500);
   80f6e:	4863      	ldr	r0, [pc, #396]	; (810fc <Error+0x1e8>)
   80f70:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   80f72:	2033      	movs	r0, #51	; 0x33
   80f74:	4b62      	ldr	r3, [pc, #392]	; (81100 <Error+0x1ec>)
   80f76:	4798      	blx	r3
   80f78:	e057      	b.n	8102a <Error+0x116>
		delay_ms(1000);
#undef er
#define _param	pa1
		if((_param/100)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   80f7a:	2033      	movs	r0, #51	; 0x33
   80f7c:	4b5e      	ldr	r3, [pc, #376]	; (810f8 <Error+0x1e4>)
   80f7e:	4798      	blx	r3
			delay_ms(1500);
   80f80:	485e      	ldr	r0, [pc, #376]	; (810fc <Error+0x1e8>)
   80f82:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   80f84:	2033      	movs	r0, #51	; 0x33
   80f86:	4b5e      	ldr	r3, [pc, #376]	; (81100 <Error+0x1ec>)
   80f88:	4798      	blx	r3
   80f8a:	e067      	b.n	8105c <Error+0x148>
		}
		delay_ms(800);

		if(((_param/10)%10)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   80f8c:	2033      	movs	r0, #51	; 0x33
   80f8e:	4b5a      	ldr	r3, [pc, #360]	; (810f8 <Error+0x1e4>)
   80f90:	4798      	blx	r3
			delay_ms(1500);
   80f92:	485a      	ldr	r0, [pc, #360]	; (810fc <Error+0x1e8>)
   80f94:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   80f96:	2033      	movs	r0, #51	; 0x33
   80f98:	4b59      	ldr	r3, [pc, #356]	; (81100 <Error+0x1ec>)
   80f9a:	4798      	blx	r3
   80f9c:	e079      	b.n	81092 <Error+0x17e>
		delay_ms(800);


		if((_param%10)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   80f9e:	2033      	movs	r0, #51	; 0x33
   80fa0:	4b55      	ldr	r3, [pc, #340]	; (810f8 <Error+0x1e4>)
   80fa2:	4798      	blx	r3
			delay_ms(1500);
   80fa4:	4855      	ldr	r0, [pc, #340]	; (810fc <Error+0x1e8>)
   80fa6:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   80fa8:	2033      	movs	r0, #51	; 0x33
   80faa:	4b55      	ldr	r3, [pc, #340]	; (81100 <Error+0x1ec>)
   80fac:	4798      	blx	r3
				gpio_toggle_pin(ERROR_LED);
				delay_ms(200);
			}
		}
		
		delay_ms(1000);
   80fae:	484d      	ldr	r0, [pc, #308]	; (810e4 <Error+0x1d0>)
   80fb0:	47a0      	blx	r4
	for(k=0;k<5;k++)
   80fb2:	f1b8 0801 	subs.w	r8, r8, #1
   80fb6:	f000 8086 	beq.w	810c6 <Error+0x1b2>
		gpio_set_pin_high(ERROR_LED);
   80fba:	2033      	movs	r0, #51	; 0x33
   80fbc:	4b4e      	ldr	r3, [pc, #312]	; (810f8 <Error+0x1e4>)
   80fbe:	4798      	blx	r3
		delay_ms(3000);
   80fc0:	4850      	ldr	r0, [pc, #320]	; (81104 <Error+0x1f0>)
   80fc2:	47a0      	blx	r4
		gpio_set_pin_low(ERROR_LED);
   80fc4:	2033      	movs	r0, #51	; 0x33
   80fc6:	4b4e      	ldr	r3, [pc, #312]	; (81100 <Error+0x1ec>)
   80fc8:	4798      	blx	r3
		delay_ms(800);
   80fca:	484f      	ldr	r0, [pc, #316]	; (81108 <Error+0x1f4>)
   80fcc:	47a0      	blx	r4
		if((er/10)==0)
   80fce:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   80fd2:	f1b9 0f09 	cmp.w	r9, #9
   80fd6:	d9be      	bls.n	80f56 <Error+0x42>
			for(i=0;i<(er/10)*2;i++)
   80fd8:	fba7 2309 	umull	r2, r3, r7, r9
   80fdc:	08db      	lsrs	r3, r3, #3
   80fde:	005e      	lsls	r6, r3, #1
   80fe0:	b15b      	cbz	r3, 80ffa <Error+0xe6>
   80fe2:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   80fe4:	f8df b130 	ldr.w	fp, [pc, #304]	; 81118 <Error+0x204>
				delay_ms(200);
   80fe8:	f8df a130 	ldr.w	sl, [pc, #304]	; 8111c <Error+0x208>
				gpio_toggle_pin(ERROR_LED);
   80fec:	2033      	movs	r0, #51	; 0x33
   80fee:	47d8      	blx	fp
				delay_ms(200);
   80ff0:	4650      	mov	r0, sl
   80ff2:	47a0      	blx	r4
			for(i=0;i<(er/10)*2;i++)
   80ff4:	3501      	adds	r5, #1
   80ff6:	42b5      	cmp	r5, r6
   80ff8:	d1f8      	bne.n	80fec <Error+0xd8>
		delay_ms(800);
   80ffa:	4843      	ldr	r0, [pc, #268]	; (81108 <Error+0x1f4>)
   80ffc:	47a0      	blx	r4
		if((er%10)==0)
   80ffe:	fba7 3609 	umull	r3, r6, r7, r9
   81002:	08f6      	lsrs	r6, r6, #3
   81004:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   81008:	ebb9 0646 	subs.w	r6, r9, r6, lsl #1
   8100c:	d0ac      	beq.n	80f68 <Error+0x54>
			for(i=0;i<(er%10)*2;i++)
   8100e:	0076      	lsls	r6, r6, #1
   81010:	d00b      	beq.n	8102a <Error+0x116>
   81012:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   81014:	f8df a100 	ldr.w	sl, [pc, #256]	; 81118 <Error+0x204>
				delay_ms(200);
   81018:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8111c <Error+0x208>
				gpio_toggle_pin(ERROR_LED);
   8101c:	2033      	movs	r0, #51	; 0x33
   8101e:	47d0      	blx	sl
				delay_ms(200);
   81020:	4648      	mov	r0, r9
   81022:	47a0      	blx	r4
			for(i=0;i<(er%10)*2;i++)
   81024:	3501      	adds	r5, #1
   81026:	42b5      	cmp	r5, r6
   81028:	d1f8      	bne.n	8101c <Error+0x108>
		delay_ms(1000);
   8102a:	482e      	ldr	r0, [pc, #184]	; (810e4 <Error+0x1d0>)
   8102c:	47a0      	blx	r4
		if((_param/100)==0)
   8102e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   81032:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
   81036:	d9a0      	bls.n	80f7a <Error+0x66>
			for(i=0;i<(_param/100)*2;i++)
   81038:	4b34      	ldr	r3, [pc, #208]	; (8110c <Error+0x1f8>)
   8103a:	fba3 2309 	umull	r2, r3, r3, r9
   8103e:	095b      	lsrs	r3, r3, #5
   81040:	005e      	lsls	r6, r3, #1
   81042:	b15b      	cbz	r3, 8105c <Error+0x148>
   81044:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   81046:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 81118 <Error+0x204>
				delay_ms(200);
   8104a:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8111c <Error+0x208>
				gpio_toggle_pin(ERROR_LED);
   8104e:	2033      	movs	r0, #51	; 0x33
   81050:	47d8      	blx	fp
				delay_ms(200);
   81052:	4650      	mov	r0, sl
   81054:	47a0      	blx	r4
			for(i=0;i<(_param/100)*2;i++)
   81056:	3501      	adds	r5, #1
   81058:	42b5      	cmp	r5, r6
   8105a:	d1f8      	bne.n	8104e <Error+0x13a>
		delay_ms(800);
   8105c:	482a      	ldr	r0, [pc, #168]	; (81108 <Error+0x1f4>)
   8105e:	47a0      	blx	r4
		if(((_param/10)%10)==0)
   81060:	fba7 2309 	umull	r2, r3, r7, r9
   81064:	08db      	lsrs	r3, r3, #3
   81066:	fba7 2603 	umull	r2, r6, r7, r3
   8106a:	08f6      	lsrs	r6, r6, #3
   8106c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   81070:	ebb3 0646 	subs.w	r6, r3, r6, lsl #1
   81074:	d08a      	beq.n	80f8c <Error+0x78>
			for(i=0;i<((_param/10)%10)*2;i++)
   81076:	0076      	lsls	r6, r6, #1
   81078:	d00b      	beq.n	81092 <Error+0x17e>
   8107a:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   8107c:	f8df b098 	ldr.w	fp, [pc, #152]	; 81118 <Error+0x204>
				delay_ms(200);
   81080:	f8df a098 	ldr.w	sl, [pc, #152]	; 8111c <Error+0x208>
				gpio_toggle_pin(ERROR_LED);
   81084:	2033      	movs	r0, #51	; 0x33
   81086:	47d8      	blx	fp
				delay_ms(200);
   81088:	4650      	mov	r0, sl
   8108a:	47a0      	blx	r4
			for(i=0;i<((_param/10)%10)*2;i++)
   8108c:	3501      	adds	r5, #1
   8108e:	42b5      	cmp	r5, r6
   81090:	d1f8      	bne.n	81084 <Error+0x170>
		delay_ms(800);
   81092:	481d      	ldr	r0, [pc, #116]	; (81108 <Error+0x1f4>)
   81094:	47a0      	blx	r4
		if((_param%10)==0)
   81096:	fba7 3609 	umull	r3, r6, r7, r9
   8109a:	08f6      	lsrs	r6, r6, #3
   8109c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   810a0:	ebb9 0646 	subs.w	r6, r9, r6, lsl #1
   810a4:	f43f af7b 	beq.w	80f9e <Error+0x8a>
			for(i=0;i<(_param%10)*2;i++)
   810a8:	0076      	lsls	r6, r6, #1
   810aa:	d080      	beq.n	80fae <Error+0x9a>
   810ac:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   810ae:	f8df a068 	ldr.w	sl, [pc, #104]	; 81118 <Error+0x204>
				delay_ms(200);
   810b2:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8111c <Error+0x208>
				gpio_toggle_pin(ERROR_LED);
   810b6:	2033      	movs	r0, #51	; 0x33
   810b8:	47d0      	blx	sl
				delay_ms(200);
   810ba:	4648      	mov	r0, r9
   810bc:	47a0      	blx	r4
			for(i=0;i<(_param%10)*2;i++)
   810be:	3501      	adds	r5, #1
   810c0:	42b5      	cmp	r5, r6
   810c2:	d1f8      	bne.n	810b6 <Error+0x1a2>
   810c4:	e773      	b.n	80fae <Error+0x9a>

#undef _param
	}
	rstc_start_software_reset(RSTC);
   810c6:	4812      	ldr	r0, [pc, #72]	; (81110 <Error+0x1fc>)
   810c8:	4b12      	ldr	r3, [pc, #72]	; (81114 <Error+0x200>)
   810ca:	4798      	blx	r3
   810cc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   810d0:	b004      	add	sp, #16
   810d2:	4770      	bx	lr
   810d4:	20001a18 	.word	0x20001a18
   810d8:	00089ea4 	.word	0x00089ea4
   810dc:	000851f5 	.word	0x000851f5
   810e0:	000834ed 	.word	0x000834ed
   810e4:	0068a1b7 	.word	0x0068a1b7
   810e8:	20000001 	.word	0x20000001
   810ec:	20000628 	.word	0x20000628
   810f0:	000842b1 	.word	0x000842b1
   810f4:	cccccccd 	.word	0xcccccccd
   810f8:	0008425b 	.word	0x0008425b
   810fc:	009cf293 	.word	0x009cf293
   81100:	00084275 	.word	0x00084275
   81104:	0139e525 	.word	0x0139e525
   81108:	0053b493 	.word	0x0053b493
   8110c:	51eb851f 	.word	0x51eb851f
   81110:	400e1200 	.word	0x400e1200
   81114:	00084935 	.word	0x00084935
   81118:	0008428f 	.word	0x0008428f
   8111c:	0014ed25 	.word	0x0014ed25

00081120 <Framesbuf>:
 }requestsBuffer;
 
 extern char* buf[];
 
 uint32_t Framesbuf(uint32_t sc, ...)
 {
   81120:	b40f      	push	{r0, r1, r2, r3}
   81122:	b570      	push	{r4, r5, r6, lr}
	 switch(sc)
   81124:	9904      	ldr	r1, [sp, #16]
   81126:	2966      	cmp	r1, #102	; 0x66
   81128:	d014      	beq.n	81154 <Framesbuf+0x34>
   8112a:	2967      	cmp	r1, #103	; 0x67
   8112c:	d038      	beq.n	811a0 <Framesbuf+0x80>
   8112e:	2965      	cmp	r1, #101	; 0x65
   81130:	d003      	beq.n	8113a <Framesbuf+0x1a>
		return 0;
#undef _sc	

		break;
	default:
		Error(ERROR_FRAMESBUF_SWITCH_BAD_SC, sc);
   81132:	203d      	movs	r0, #61	; 0x3d
   81134:	4b33      	ldr	r3, [pc, #204]	; (81204 <Framesbuf+0xe4>)
   81136:	4798      	blx	r3

	 }
   81138:	e007      	b.n	8114a <Framesbuf+0x2a>
		requestsBuffer.pPop = requestsBuffer.pPush = requestsBufList;
   8113a:	4b33      	ldr	r3, [pc, #204]	; (81208 <Framesbuf+0xe8>)
   8113c:	4a33      	ldr	r2, [pc, #204]	; (8120c <Framesbuf+0xec>)
   8113e:	601a      	str	r2, [r3, #0]
   81140:	605a      	str	r2, [r3, #4]
		Putstr("\r\n\tFRAMEBUF_NEW\r\n");
   81142:	4933      	ldr	r1, [pc, #204]	; (81210 <Framesbuf+0xf0>)
   81144:	2067      	movs	r0, #103	; 0x67
   81146:	4b33      	ldr	r3, [pc, #204]	; (81214 <Framesbuf+0xf4>)
   81148:	4798      	blx	r3
   8114a:	4620      	mov	r0, r4
   8114c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   81150:	b004      	add	sp, #16
   81152:	4770      	bx	lr
		Putstr("\r\n\t FRME_PUSH \r\n");
   81154:	4930      	ldr	r1, [pc, #192]	; (81218 <Framesbuf+0xf8>)
   81156:	2067      	movs	r0, #103	; 0x67
   81158:	4d2e      	ldr	r5, [pc, #184]	; (81214 <Framesbuf+0xf4>)
   8115a:	47a8      	blx	r5
		sprintf(buf,"\r\n\tSC:%X\r\n", _sc);
   8115c:	9c05      	ldr	r4, [sp, #20]
   8115e:	4e2f      	ldr	r6, [pc, #188]	; (8121c <Framesbuf+0xfc>)
   81160:	4622      	mov	r2, r4
   81162:	492f      	ldr	r1, [pc, #188]	; (81220 <Framesbuf+0x100>)
   81164:	4630      	mov	r0, r6
   81166:	4b2f      	ldr	r3, [pc, #188]	; (81224 <Framesbuf+0x104>)
   81168:	4798      	blx	r3
		Putstr(buf);
   8116a:	4631      	mov	r1, r6
   8116c:	2067      	movs	r0, #103	; 0x67
   8116e:	47a8      	blx	r5
		*requestsBuffer.pPush = _sc;
   81170:	4b25      	ldr	r3, [pc, #148]	; (81208 <Framesbuf+0xe8>)
   81172:	681a      	ldr	r2, [r3, #0]
   81174:	6014      	str	r4, [r2, #0]
		requestsBuffer.pPush++;
   81176:	681b      	ldr	r3, [r3, #0]
   81178:	3304      	adds	r3, #4
		if(requestsBuffer.pPush >= requestsBufList + SERVICES_BUF_LIST_LEN) requestsBuffer.pPush = requestsBufList;
   8117a:	4a2b      	ldr	r2, [pc, #172]	; (81228 <Framesbuf+0x108>)
   8117c:	4293      	cmp	r3, r2
   8117e:	d20b      	bcs.n	81198 <Framesbuf+0x78>
		requestsBuffer.pPush++;
   81180:	4a21      	ldr	r2, [pc, #132]	; (81208 <Framesbuf+0xe8>)
   81182:	6013      	str	r3, [r2, #0]
		if(requestsBuffer.pPush == requestsBuffer.pPop) Error(ERROR_FRAMESBUF_LIST_FULL, 0);
   81184:	4b20      	ldr	r3, [pc, #128]	; (81208 <Framesbuf+0xe8>)
   81186:	681a      	ldr	r2, [r3, #0]
   81188:	685b      	ldr	r3, [r3, #4]
   8118a:	429a      	cmp	r2, r3
   8118c:	d1dd      	bne.n	8114a <Framesbuf+0x2a>
   8118e:	2100      	movs	r1, #0
   81190:	203e      	movs	r0, #62	; 0x3e
   81192:	4b1c      	ldr	r3, [pc, #112]	; (81204 <Framesbuf+0xe4>)
   81194:	4798      	blx	r3
   81196:	e7d8      	b.n	8114a <Framesbuf+0x2a>
		if(requestsBuffer.pPush >= requestsBufList + SERVICES_BUF_LIST_LEN) requestsBuffer.pPush = requestsBufList;
   81198:	4a1c      	ldr	r2, [pc, #112]	; (8120c <Framesbuf+0xec>)
   8119a:	4b1b      	ldr	r3, [pc, #108]	; (81208 <Framesbuf+0xe8>)
   8119c:	601a      	str	r2, [r3, #0]
   8119e:	e7f1      	b.n	81184 <Framesbuf+0x64>
		Putstr("\r\n\t FRME_POP \r\n"); 
   811a0:	4922      	ldr	r1, [pc, #136]	; (8122c <Framesbuf+0x10c>)
   811a2:	2067      	movs	r0, #103	; 0x67
   811a4:	4b1b      	ldr	r3, [pc, #108]	; (81214 <Framesbuf+0xf4>)
   811a6:	4798      	blx	r3
		if(requestsBuffer.pPop != requestsBuffer.pPush)
   811a8:	4b17      	ldr	r3, [pc, #92]	; (81208 <Framesbuf+0xe8>)
   811aa:	685a      	ldr	r2, [r3, #4]
   811ac:	681b      	ldr	r3, [r3, #0]
   811ae:	429a      	cmp	r2, r3
   811b0:	d021      	beq.n	811f6 <Framesbuf+0xd6>
			sprintf(buf, "\r\n\tpPOP: %X", *requestsBuffer.pPop);
   811b2:	4d1a      	ldr	r5, [pc, #104]	; (8121c <Framesbuf+0xfc>)
   811b4:	6812      	ldr	r2, [r2, #0]
   811b6:	491e      	ldr	r1, [pc, #120]	; (81230 <Framesbuf+0x110>)
   811b8:	4628      	mov	r0, r5
   811ba:	4b1a      	ldr	r3, [pc, #104]	; (81224 <Framesbuf+0x104>)
   811bc:	4798      	blx	r3
			Putstr(buf);
   811be:	4629      	mov	r1, r5
   811c0:	2067      	movs	r0, #103	; 0x67
   811c2:	4b14      	ldr	r3, [pc, #80]	; (81214 <Framesbuf+0xf4>)
   811c4:	4798      	blx	r3
			_sc = *requestsBuffer.pPop;
   811c6:	4b10      	ldr	r3, [pc, #64]	; (81208 <Framesbuf+0xe8>)
   811c8:	685b      	ldr	r3, [r3, #4]
   811ca:	f853 4b04 	ldr.w	r4, [r3], #4
   811ce:	9404      	str	r4, [sp, #16]
			if(requestsBuffer.pPop >= requestsBufList + SERVICES_BUF_LIST_LEN) requestsBuffer.pPop = requestsBufList;
   811d0:	4a15      	ldr	r2, [pc, #84]	; (81228 <Framesbuf+0x108>)
   811d2:	4293      	cmp	r3, r2
   811d4:	d30c      	bcc.n	811f0 <Framesbuf+0xd0>
   811d6:	4a0d      	ldr	r2, [pc, #52]	; (8120c <Framesbuf+0xec>)
   811d8:	4b0b      	ldr	r3, [pc, #44]	; (81208 <Framesbuf+0xe8>)
   811da:	605a      	str	r2, [r3, #4]
			sprintf(buf,"\r\n\tSC:%X\r\n", _sc);
   811dc:	4622      	mov	r2, r4
   811de:	4910      	ldr	r1, [pc, #64]	; (81220 <Framesbuf+0x100>)
   811e0:	480e      	ldr	r0, [pc, #56]	; (8121c <Framesbuf+0xfc>)
   811e2:	4b10      	ldr	r3, [pc, #64]	; (81224 <Framesbuf+0x104>)
   811e4:	4798      	blx	r3
			Putstr(buf);
   811e6:	4629      	mov	r1, r5
   811e8:	2067      	movs	r0, #103	; 0x67
   811ea:	4b0a      	ldr	r3, [pc, #40]	; (81214 <Framesbuf+0xf4>)
   811ec:	4798      	blx	r3
			return _sc;
   811ee:	e7ac      	b.n	8114a <Framesbuf+0x2a>
			requestsBuffer.pPop++;
   811f0:	4a05      	ldr	r2, [pc, #20]	; (81208 <Framesbuf+0xe8>)
   811f2:	6053      	str	r3, [r2, #4]
   811f4:	e7f2      	b.n	811dc <Framesbuf+0xbc>
		Putstr("\r\n\t FRME_POP EMPTY \r\n");
   811f6:	490f      	ldr	r1, [pc, #60]	; (81234 <Framesbuf+0x114>)
   811f8:	2067      	movs	r0, #103	; 0x67
   811fa:	4b06      	ldr	r3, [pc, #24]	; (81214 <Framesbuf+0xf4>)
   811fc:	4798      	blx	r3
		return 0;
   811fe:	2400      	movs	r4, #0
   81200:	e7a3      	b.n	8114a <Framesbuf+0x2a>
   81202:	bf00      	nop
   81204:	00080f15 	.word	0x00080f15
   81208:	200011ec 	.word	0x200011ec
   8120c:	200011f4 	.word	0x200011f4
   81210:	00089ec4 	.word	0x00089ec4
   81214:	000834ed 	.word	0x000834ed
   81218:	00089ed8 	.word	0x00089ed8
   8121c:	20001a18 	.word	0x20001a18
   81220:	00089eec 	.word	0x00089eec
   81224:	000851f5 	.word	0x000851f5
   81228:	200019f4 	.word	0x200019f4
   8122c:	00089ef8 	.word	0x00089ef8
   81230:	00089f08 	.word	0x00089f08
   81234:	00089f14 	.word	0x00089f14

00081238 <kRtc>:
#define _rtcCalr	((t_RTC_CALR*)&RTC->RTC_CALR)
#define _rtcTimr	((t_RTC_TIMR*)&RTC->RTC_TIMR)


uint32_t kRtc(uint32_t sc,...)
{
   81238:	b40f      	push	{r0, r1, r2, r3}
   8123a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8123c:	b087      	sub	sp, #28
	uint32_t u1,u2,u3,u4;
	
	switch(sc)
   8123e:	990c      	ldr	r1, [sp, #48]	; 0x30
   81240:	2964      	cmp	r1, #100	; 0x64
   81242:	d021      	beq.n	81288 <kRtc+0x50>
   81244:	d814      	bhi.n	81270 <kRtc+0x38>
   81246:	2901      	cmp	r1, #1
   81248:	f000 810e 	beq.w	81468 <kRtc+0x230>
   8124c:	2900      	cmp	r1, #0
   8124e:	f000 80bb 	beq.w	813c8 <kRtc+0x190>
   81252:	2902      	cmp	r1, #2
   81254:	d113      	bne.n	8127e <kRtc+0x46>
	case _KRTC_IS_SUMMER_TIME:
#define _day	pa1
#define _date	pa2
#define _month	pa3
#define _hour	pa4
		if((_month>MARCH)&&(_month<OCTOBER)) return 1;
   81256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81258:	1f1a      	subs	r2, r3, #4
   8125a:	2a05      	cmp	r2, #5
   8125c:	f240 8148 	bls.w	814f0 <kRtc+0x2b8>
		else
		{
			if(_month==MARCH)
   81260:	2b03      	cmp	r3, #3
   81262:	f000 811b 	beq.w	8149c <kRtc+0x264>
					{
						return (((int8_t)(_date-24)-(int8_t)_day)>0);
					}
				}
			}
			else if(_month==OCTOBER)
   81266:	2b0a      	cmp	r3, #10
   81268:	f000 812d 	beq.w	814c6 <kRtc+0x28e>
						return (((int8_t)(_date-24)-(int8_t)_day)<=0);
					}
				}
			}
		}
		return 0;
   8126c:	2400      	movs	r4, #0
   8126e:	e0d1      	b.n	81414 <kRtc+0x1dc>
	switch(sc)
   81270:	2967      	cmp	r1, #103	; 0x67
   81272:	d040      	beq.n	812f6 <kRtc+0xbe>
   81274:	2968      	cmp	r1, #104	; 0x68
   81276:	f000 808d 	beq.w	81394 <kRtc+0x15c>
   8127a:	2966      	cmp	r1, #102	; 0x66
   8127c:	d01a      	beq.n	812b4 <kRtc+0x7c>
		//no break;


	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_KRTC_SWITCH_BAD_SC,sc);
   8127e:	200e      	movs	r0, #14
   81280:	4b9e      	ldr	r3, [pc, #632]	; (814fc <kRtc+0x2c4>)
   81282:	4798      	blx	r3
}
	return 0;
   81284:	2400      	movs	r4, #0
   81286:	e0c5      	b.n	81414 <kRtc+0x1dc>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   81288:	2000      	movs	r0, #0
   8128a:	4b9d      	ldr	r3, [pc, #628]	; (81500 <kRtc+0x2c8>)
   8128c:	4798      	blx	r3
		while (!pmc_osc_is_ready_32kxtal());
   8128e:	4c9d      	ldr	r4, [pc, #628]	; (81504 <kRtc+0x2cc>)
   81290:	47a0      	blx	r4
   81292:	2800      	cmp	r0, #0
   81294:	d0fc      	beq.n	81290 <kRtc+0x58>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   81296:	4b9c      	ldr	r3, [pc, #624]	; (81508 <kRtc+0x2d0>)
   81298:	2104      	movs	r1, #4
   8129a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8129e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   812a2:	2210      	movs	r2, #16
   812a4:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   812a8:	6019      	str	r1, [r3, #0]
		rtc_enable_interrupt(RTC,RTC_IER_SECEN);	//Second IRQ enabled
   812aa:	4898      	ldr	r0, [pc, #608]	; (8150c <kRtc+0x2d4>)
   812ac:	4b98      	ldr	r3, [pc, #608]	; (81510 <kRtc+0x2d8>)
   812ae:	4798      	blx	r3
	return 0;
   812b0:	2400      	movs	r4, #0
		break;
   812b2:	e0af      	b.n	81414 <kRtc+0x1dc>
		_res = rtc_set_time(RTC,_hour,_minute,_second);
   812b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   812b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   812b8:	990d      	ldr	r1, [sp, #52]	; 0x34
   812ba:	4894      	ldr	r0, [pc, #592]	; (8150c <kRtc+0x2d4>)
   812bc:	4c95      	ldr	r4, [pc, #596]	; (81514 <kRtc+0x2dc>)
   812be:	47a0      	blx	r4
   812c0:	4604      	mov	r4, r0
   812c2:	900c      	str	r0, [sp, #48]	; 0x30
		if(_res	== 0)
   812c4:	2800      	cmp	r0, #0
   812c6:	f040 80a5 	bne.w	81414 <kRtc+0x1dc>
			rtc.summerTime = _kRtcIsSummerTime(_rtcCalr->DAY,_rtcCalr->DATE,_rtcCalr->MONTH,_rtcTimr->HOUR);
   812ca:	4b93      	ldr	r3, [pc, #588]	; (81518 <kRtc+0x2e0>)
   812cc:	7899      	ldrb	r1, [r3, #2]
   812ce:	78da      	ldrb	r2, [r3, #3]
   812d0:	3b04      	subs	r3, #4
   812d2:	789b      	ldrb	r3, [r3, #2]
   812d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   812d8:	9300      	str	r3, [sp, #0]
   812da:	f001 031f 	and.w	r3, r1, #31
   812de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   812e2:	0949      	lsrs	r1, r1, #5
   812e4:	2002      	movs	r0, #2
   812e6:	f7ff ffa7 	bl	81238 <kRtc>
   812ea:	4b8c      	ldr	r3, [pc, #560]	; (8151c <kRtc+0x2e4>)
   812ec:	781a      	ldrb	r2, [r3, #0]
   812ee:	f360 0282 	bfi	r2, r0, #2, #1
   812f2:	701a      	strb	r2, [r3, #0]
   812f4:	e08e      	b.n	81414 <kRtc+0x1dc>
		if((_month==0)||(_month)>12) return -1;
   812f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   812f8:	1e63      	subs	r3, r4, #1
   812fa:	2b0b      	cmp	r3, #11
   812fc:	d902      	bls.n	81304 <kRtc+0xcc>
   812fe:	f04f 34ff 	mov.w	r4, #4294967295
   81302:	e087      	b.n	81414 <kRtc+0x1dc>
		if(_date>nbDaysInMonth[_month-1]+_kRtcIsLeapYear(_centyear)?1:0) return -1;
   81304:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   81306:	4a86      	ldr	r2, [pc, #536]	; (81520 <kRtc+0x2e8>)
   81308:	5cd5      	ldrb	r5, [r2, r3]
   8130a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   8130c:	4631      	mov	r1, r6
   8130e:	2001      	movs	r0, #1
   81310:	f7ff ff92 	bl	81238 <kRtc>
   81314:	4428      	add	r0, r5
   81316:	4287      	cmp	r7, r0
   81318:	d902      	bls.n	81320 <kRtc+0xe8>
   8131a:	f04f 34ff 	mov.w	r4, #4294967295
   8131e:	e079      	b.n	81414 <kRtc+0x1dc>
		if((_centyear/100>20)||(_centyear/100<19)||(_centyear%100>99)) return -1;
   81320:	f2a6 736c 	subw	r3, r6, #1900	; 0x76c
   81324:	2bc7      	cmp	r3, #199	; 0xc7
   81326:	d902      	bls.n	8132e <kRtc+0xf6>
   81328:	f04f 34ff 	mov.w	r4, #4294967295
   8132c:	e072      	b.n	81414 <kRtc+0x1dc>
   8132e:	4d7d      	ldr	r5, [pc, #500]	; (81524 <kRtc+0x2ec>)
   81330:	fba5 3506 	umull	r3, r5, r5, r6
   81334:	096d      	lsrs	r5, r5, #5
   81336:	2364      	movs	r3, #100	; 0x64
   81338:	fb03 6515 	mls	r5, r3, r5, r6
   8133c:	2d63      	cmp	r5, #99	; 0x63
   8133e:	d902      	bls.n	81346 <kRtc+0x10e>
   81340:	f04f 34ff 	mov.w	r4, #4294967295
   81344:	e066      	b.n	81414 <kRtc+0x1dc>
		_day = _kRtcDayByDate(_date,_month,_centyear);
   81346:	4633      	mov	r3, r6
   81348:	4622      	mov	r2, r4
   8134a:	4639      	mov	r1, r7
   8134c:	2000      	movs	r0, #0
   8134e:	f7ff ff73 	bl	81238 <kRtc>
		_res = rtc_set_date(RTC,_centyear%100,_month,_date,_day);
   81352:	9000      	str	r0, [sp, #0]
   81354:	463b      	mov	r3, r7
   81356:	4622      	mov	r2, r4
   81358:	4629      	mov	r1, r5
   8135a:	486c      	ldr	r0, [pc, #432]	; (8150c <kRtc+0x2d4>)
   8135c:	4c72      	ldr	r4, [pc, #456]	; (81528 <kRtc+0x2f0>)
   8135e:	47a0      	blx	r4
   81360:	4604      	mov	r4, r0
   81362:	900c      	str	r0, [sp, #48]	; 0x30
		if(_res == 0)
   81364:	2800      	cmp	r0, #0
   81366:	d155      	bne.n	81414 <kRtc+0x1dc>
			rtc.summerTime = _kRtcIsSummerTime(_rtcCalr->DAY,_rtcCalr->DATE,_rtcCalr->MONTH,_rtcTimr->HOUR);
   81368:	4b6b      	ldr	r3, [pc, #428]	; (81518 <kRtc+0x2e0>)
   8136a:	7899      	ldrb	r1, [r3, #2]
   8136c:	78da      	ldrb	r2, [r3, #3]
   8136e:	3b04      	subs	r3, #4
   81370:	789b      	ldrb	r3, [r3, #2]
   81372:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   81376:	9300      	str	r3, [sp, #0]
   81378:	f001 031f 	and.w	r3, r1, #31
   8137c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   81380:	0949      	lsrs	r1, r1, #5
   81382:	2002      	movs	r0, #2
   81384:	f7ff ff58 	bl	81238 <kRtc>
   81388:	4b64      	ldr	r3, [pc, #400]	; (8151c <kRtc+0x2e4>)
   8138a:	781a      	ldrb	r2, [r3, #0]
   8138c:	f360 0282 	bfi	r2, r0, #2, #1
   81390:	701a      	strb	r2, [r3, #0]
   81392:	e03f      	b.n	81414 <kRtc+0x1dc>
		rtc_get_date(RTC,&_year,&_month,&_date,&_day);
   81394:	ab02      	add	r3, sp, #8
   81396:	9300      	str	r3, [sp, #0]
   81398:	ab03      	add	r3, sp, #12
   8139a:	aa04      	add	r2, sp, #16
   8139c:	a905      	add	r1, sp, #20
   8139e:	485b      	ldr	r0, [pc, #364]	; (8150c <kRtc+0x2d4>)
   813a0:	4c62      	ldr	r4, [pc, #392]	; (8152c <kRtc+0x2f4>)
   813a2:	47a0      	blx	r4
		sprintf((char*)_pStr,"%s %d %s %4d",daysOfWeek[_day-1],(int)_date,months[_month-1],(int)_year);
   813a4:	9b02      	ldr	r3, [sp, #8]
   813a6:	3b01      	subs	r3, #1
   813a8:	4a61      	ldr	r2, [pc, #388]	; (81530 <kRtc+0x2f8>)
   813aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   813ae:	9b05      	ldr	r3, [sp, #20]
   813b0:	9301      	str	r3, [sp, #4]
   813b2:	9b04      	ldr	r3, [sp, #16]
   813b4:	3b01      	subs	r3, #1
   813b6:	495f      	ldr	r1, [pc, #380]	; (81534 <kRtc+0x2fc>)
   813b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   813bc:	9300      	str	r3, [sp, #0]
   813be:	9b03      	ldr	r3, [sp, #12]
   813c0:	495d      	ldr	r1, [pc, #372]	; (81538 <kRtc+0x300>)
   813c2:	980d      	ldr	r0, [sp, #52]	; 0x34
   813c4:	4c5d      	ldr	r4, [pc, #372]	; (8153c <kRtc+0x304>)
   813c6:	47a0      	blx	r4
		if(_month>=3)
   813c8:	990e      	ldr	r1, [sp, #56]	; 0x38
   813ca:	2902      	cmp	r1, #2
   813cc:	d928      	bls.n	81420 <kRtc+0x1e8>
			_day = ((_month*23)/9 + _date + 4 + _centyear + _centyear/4 - _centyear/100 + _centyear/400 - 2 ) % 7 + 1;
   813ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
   813d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   813d2:	1883      	adds	r3, r0, r2
   813d4:	3302      	adds	r3, #2
   813d6:	eb03 0390 	add.w	r3, r3, r0, lsr #2
   813da:	4a52      	ldr	r2, [pc, #328]	; (81524 <kRtc+0x2ec>)
   813dc:	fba2 2000 	umull	r2, r0, r2, r0
   813e0:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
   813e4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   813e8:	ebc1 02c2 	rsb	r2, r1, r2, lsl #3
   813ec:	4954      	ldr	r1, [pc, #336]	; (81540 <kRtc+0x308>)
   813ee:	fba1 1202 	umull	r1, r2, r1, r2
   813f2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   813f6:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
   813fa:	4a52      	ldr	r2, [pc, #328]	; (81544 <kRtc+0x30c>)
   813fc:	fba2 1203 	umull	r1, r2, r2, r3
   81400:	1a99      	subs	r1, r3, r2
   81402:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   81406:	0892      	lsrs	r2, r2, #2
   81408:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   8140c:	1a9b      	subs	r3, r3, r2
   8140e:	3301      	adds	r3, #1
   81410:	930c      	str	r3, [sp, #48]	; 0x30
		return _day; //Normally 1 to 7 !!!!
   81412:	9c0c      	ldr	r4, [sp, #48]	; 0x30
}
   81414:	4620      	mov	r0, r4
   81416:	b007      	add	sp, #28
   81418:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   8141c:	b004      	add	sp, #16
   8141e:	4770      	bx	lr
			_day = ((_month*23)/9 + _date + 4 + _centyear + (_centyear-1)/4 - (_centyear-1)/100 + (_centyear-1)/400 ) % 7 + 1;
   81420:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81422:	1e50      	subs	r0, r2, #1
   81424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   81426:	4413      	add	r3, r2
   81428:	3304      	adds	r3, #4
   8142a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   8142e:	ebc1 02c2 	rsb	r2, r1, r2, lsl #3
   81432:	4943      	ldr	r1, [pc, #268]	; (81540 <kRtc+0x308>)
   81434:	fba1 1202 	umull	r1, r2, r1, r2
   81438:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   8143c:	eb03 0390 	add.w	r3, r3, r0, lsr #2
   81440:	4a38      	ldr	r2, [pc, #224]	; (81524 <kRtc+0x2ec>)
   81442:	fba2 1200 	umull	r1, r2, r2, r0
   81446:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
   8144a:	eba3 1352 	sub.w	r3, r3, r2, lsr #5
   8144e:	4a3d      	ldr	r2, [pc, #244]	; (81544 <kRtc+0x30c>)
   81450:	fba2 1203 	umull	r1, r2, r2, r3
   81454:	1a99      	subs	r1, r3, r2
   81456:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   8145a:	0892      	lsrs	r2, r2, #2
   8145c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   81460:	1a9b      	subs	r3, r3, r2
   81462:	3301      	adds	r3, #1
   81464:	930c      	str	r3, [sp, #48]	; 0x30
   81466:	e7d4      	b.n	81412 <kRtc+0x1da>
		return (((_centyear%4==0)&&(_centyear%100!=0)) || (_centyear%400==0));
   81468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8146a:	f013 0f03 	tst.w	r3, #3
   8146e:	d107      	bne.n	81480 <kRtc+0x248>
   81470:	4a2c      	ldr	r2, [pc, #176]	; (81524 <kRtc+0x2ec>)
   81472:	fba2 1203 	umull	r1, r2, r2, r3
   81476:	0952      	lsrs	r2, r2, #5
   81478:	2164      	movs	r1, #100	; 0x64
   8147a:	fb01 3212 	mls	r2, r1, r2, r3
   8147e:	b95a      	cbnz	r2, 81498 <kRtc+0x260>
   81480:	4c28      	ldr	r4, [pc, #160]	; (81524 <kRtc+0x2ec>)
   81482:	fba4 2403 	umull	r2, r4, r4, r3
   81486:	09e4      	lsrs	r4, r4, #7
   81488:	f44f 72c8 	mov.w	r2, #400	; 0x190
   8148c:	fb02 3414 	mls	r4, r2, r4, r3
   81490:	fab4 f484 	clz	r4, r4
   81494:	0964      	lsrs	r4, r4, #5
   81496:	e7bd      	b.n	81414 <kRtc+0x1dc>
   81498:	2401      	movs	r4, #1
   8149a:	e7bb      	b.n	81414 <kRtc+0x1dc>
				if(_date>=25)
   8149c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8149e:	2c18      	cmp	r4, #24
   814a0:	d928      	bls.n	814f4 <kRtc+0x2bc>
					if(_day==SUNDAY)
   814a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   814a4:	2a01      	cmp	r2, #1
   814a6:	d008      	beq.n	814ba <kRtc+0x282>
						return (((int8_t)(_date-24)-(int8_t)_day)>0);
   814a8:	3c18      	subs	r4, #24
   814aa:	b264      	sxtb	r4, r4
   814ac:	b252      	sxtb	r2, r2
   814ae:	1aa4      	subs	r4, r4, r2
   814b0:	2c00      	cmp	r4, #0
   814b2:	bfd4      	ite	le
   814b4:	2400      	movle	r4, #0
   814b6:	2401      	movgt	r4, #1
   814b8:	e7ac      	b.n	81414 <kRtc+0x1dc>
						if(_hour>=2) return 1;
   814ba:	9c10      	ldr	r4, [sp, #64]	; 0x40
   814bc:	2c01      	cmp	r4, #1
   814be:	bf94      	ite	ls
   814c0:	2400      	movls	r4, #0
   814c2:	2401      	movhi	r4, #1
   814c4:	e7a6      	b.n	81414 <kRtc+0x1dc>
				if(_date>=25)
   814c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   814c8:	2c18      	cmp	r4, #24
   814ca:	d915      	bls.n	814f8 <kRtc+0x2c0>
					if(_day==SUNDAY)
   814cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   814ce:	2a01      	cmp	r2, #1
   814d0:	d008      	beq.n	814e4 <kRtc+0x2ac>
						return (((int8_t)(_date-24)-(int8_t)_day)<=0);
   814d2:	3c18      	subs	r4, #24
   814d4:	b264      	sxtb	r4, r4
   814d6:	b252      	sxtb	r2, r2
   814d8:	1aa4      	subs	r4, r4, r2
   814da:	2c00      	cmp	r4, #0
   814dc:	bfcc      	ite	gt
   814de:	2400      	movgt	r4, #0
   814e0:	2401      	movle	r4, #1
   814e2:	e797      	b.n	81414 <kRtc+0x1dc>
						if(_hour<2) return 1;
   814e4:	9c10      	ldr	r4, [sp, #64]	; 0x40
   814e6:	2c01      	cmp	r4, #1
   814e8:	bf8c      	ite	hi
   814ea:	2400      	movhi	r4, #0
   814ec:	2401      	movls	r4, #1
   814ee:	e791      	b.n	81414 <kRtc+0x1dc>
		if((_month>MARCH)&&(_month<OCTOBER)) return 1;
   814f0:	2401      	movs	r4, #1
   814f2:	e78f      	b.n	81414 <kRtc+0x1dc>
		return 0;
   814f4:	2400      	movs	r4, #0
   814f6:	e78d      	b.n	81414 <kRtc+0x1dc>
   814f8:	2400      	movs	r4, #0
   814fa:	e78b      	b.n	81414 <kRtc+0x1dc>
   814fc:	00080f15 	.word	0x00080f15
   81500:	000843e5 	.word	0x000843e5
   81504:	00084409 	.word	0x00084409
   81508:	e000e100 	.word	0xe000e100
   8150c:	400e1260 	.word	0x400e1260
   81510:	00084677 	.word	0x00084677
   81514:	000846d5 	.word	0x000846d5
   81518:	400e126c 	.word	0x400e126c
   8151c:	200019f4 	.word	0x200019f4
   81520:	00089f3c 	.word	0x00089f3c
   81524:	51eb851f 	.word	0x51eb851f
   81528:	000847dd 	.word	0x000847dd
   8152c:	00084769 	.word	0x00084769
   81530:	20000524 	.word	0x20000524
   81534:	20000540 	.word	0x20000540
   81538:	00089f2c 	.word	0x00089f2c
   8153c:	000851f5 	.word	0x000851f5
   81540:	38e38e39 	.word	0x38e38e39
   81544:	24924925 	.word	0x24924925

00081548 <RTC_Handler>:
enum{
	_SHELL_PROMPT = 4
};

void RTC_Handler(void)
{
   81548:	b510      	push	{r4, lr}
   8154a:	b082      	sub	sp, #8
	rtc_clear_status(RTC,RTC_SCCR_SECCLR);
   8154c:	2104      	movs	r1, #4
   8154e:	4806      	ldr	r0, [pc, #24]	; (81568 <RTC_Handler+0x20>)
   81550:	4b06      	ldr	r3, [pc, #24]	; (8156c <RTC_Handler+0x24>)
   81552:	4798      	blx	r3
	PushTask(Shell,_SHELL_PROMPT,0,0);
   81554:	2300      	movs	r3, #0
   81556:	9300      	str	r3, [sp, #0]
   81558:	2204      	movs	r2, #4
   8155a:	4905      	ldr	r1, [pc, #20]	; (81570 <RTC_Handler+0x28>)
   8155c:	2066      	movs	r0, #102	; 0x66
   8155e:	4c05      	ldr	r4, [pc, #20]	; (81574 <RTC_Handler+0x2c>)
   81560:	47a0      	blx	r4
}
   81562:	b002      	add	sp, #8
   81564:	bd10      	pop	{r4, pc}
   81566:	bf00      	nop
   81568:	400e1260 	.word	0x400e1260
   8156c:	00084895 	.word	0x00084895
   81570:	000823cd 	.word	0x000823cd
   81574:	00083881 	.word	0x00083881

00081578 <Lcd>:

#define ST_LCD_ON		0x0000001


uint32_t Lcd(uint32_t sc, ...)
{
   81578:	b40f      	push	{r0, r1, r2, r3}
   8157a:	b538      	push	{r3, r4, r5, lr}
	switch(sc)
   8157c:	9904      	ldr	r1, [sp, #16]
   8157e:	1e4b      	subs	r3, r1, #1
   81580:	2b68      	cmp	r3, #104	; 0x68
   81582:	f200 8200 	bhi.w	81986 <Lcd+0x40e>
   81586:	e8df f013 	tbh	[pc, r3, lsl #1]
   8158a:	010d      	.short	0x010d
   8158c:	0167015d 	.word	0x0167015d
   81590:	01830171 	.word	0x01830171
   81594:	019b018f 	.word	0x019b018f
   81598:	01a90203 	.word	0x01a90203
   8159c:	01fe01db 	.word	0x01fe01db
   815a0:	01fe01fe 	.word	0x01fe01fe
   815a4:	01fe01fe 	.word	0x01fe01fe
   815a8:	01fe01fe 	.word	0x01fe01fe
   815ac:	01fe01fe 	.word	0x01fe01fe
   815b0:	01fe01fe 	.word	0x01fe01fe
   815b4:	01fe01fe 	.word	0x01fe01fe
   815b8:	01fe01fe 	.word	0x01fe01fe
   815bc:	01fe01fe 	.word	0x01fe01fe
   815c0:	01fe01fe 	.word	0x01fe01fe
   815c4:	01fe01fe 	.word	0x01fe01fe
   815c8:	01fe01fe 	.word	0x01fe01fe
   815cc:	01fe01fe 	.word	0x01fe01fe
   815d0:	01fe01fe 	.word	0x01fe01fe
   815d4:	01fe01fe 	.word	0x01fe01fe
   815d8:	01fe01fe 	.word	0x01fe01fe
   815dc:	01fe01fe 	.word	0x01fe01fe
   815e0:	01fe01fe 	.word	0x01fe01fe
   815e4:	01fe01fe 	.word	0x01fe01fe
   815e8:	01fe01fe 	.word	0x01fe01fe
   815ec:	01fe01fe 	.word	0x01fe01fe
   815f0:	01fe01fe 	.word	0x01fe01fe
   815f4:	01fe01fe 	.word	0x01fe01fe
   815f8:	01fe01fe 	.word	0x01fe01fe
   815fc:	01fe01fe 	.word	0x01fe01fe
   81600:	01fe01fe 	.word	0x01fe01fe
   81604:	01fe01fe 	.word	0x01fe01fe
   81608:	01fe01fe 	.word	0x01fe01fe
   8160c:	01fe01fe 	.word	0x01fe01fe
   81610:	01fe01fe 	.word	0x01fe01fe
   81614:	01fe01fe 	.word	0x01fe01fe
   81618:	01fe01fe 	.word	0x01fe01fe
   8161c:	01fe01fe 	.word	0x01fe01fe
   81620:	01fe01fe 	.word	0x01fe01fe
   81624:	01fe01fe 	.word	0x01fe01fe
   81628:	01fe01fe 	.word	0x01fe01fe
   8162c:	01fe01fe 	.word	0x01fe01fe
   81630:	01fe01fe 	.word	0x01fe01fe
   81634:	01fe01fe 	.word	0x01fe01fe
   81638:	01fe01fe 	.word	0x01fe01fe
   8163c:	01fe01fe 	.word	0x01fe01fe
   81640:	01fe01fe 	.word	0x01fe01fe
   81644:	01fe01fe 	.word	0x01fe01fe
   81648:	01fe01fe 	.word	0x01fe01fe
   8164c:	01fe01fe 	.word	0x01fe01fe
   81650:	00b80069 	.word	0x00b80069
   81654:	00e20102 	.word	0x00e20102
   81658:	00dd00ed 	.word	0x00dd00ed
	{
	case LCD_NEW:
		_LcdSetDataLineOut();
   8165c:	2009      	movs	r0, #9
   8165e:	f7ff ff8b 	bl	81578 <Lcd>
		gpio_configure_pin(LCD_E,			LCD_PIN_OUT_FLAGS);
   81662:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81666:	2004      	movs	r0, #4
   81668:	4cae      	ldr	r4, [pc, #696]	; (81924 <Lcd+0x3ac>)
   8166a:	47a0      	blx	r4
		gpio_configure_pin(LCD_RWB,			LCD_PIN_OUT_FLAGS);
   8166c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81670:	2005      	movs	r0, #5
   81672:	47a0      	blx	r4
		gpio_configure_pin(LCD_RS,			LCD_PIN_OUT_FLAGS);
   81674:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81678:	2006      	movs	r0, #6
   8167a:	47a0      	blx	r4
		gpio_configure_pin(LCD_BACKLIGHT,	LCD_PIN_OUT_FLAGS);
   8167c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81680:	2007      	movs	r0, #7
   81682:	47a0      	blx	r4

		gpio_set_pin_low(LCD_E);
   81684:	2004      	movs	r0, #4
   81686:	4ca8      	ldr	r4, [pc, #672]	; (81928 <Lcd+0x3b0>)
   81688:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RS);
   8168a:	2006      	movs	r0, #6
   8168c:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RWB);
   8168e:	2005      	movs	r0, #5
   81690:	47a0      	blx	r4
		gpio_set_pin_high(LCD_BACKLIGHT);
   81692:	2007      	movs	r0, #7
   81694:	4ba5      	ldr	r3, [pc, #660]	; (8192c <Lcd+0x3b4>)
   81696:	4798      	blx	r3

		delay_ms(500);
   81698:	48a5      	ldr	r0, [pc, #660]	; (81930 <Lcd+0x3b8>)
   8169a:	4ca6      	ldr	r4, [pc, #664]	; (81934 <Lcd+0x3bc>)
   8169c:	47a0      	blx	r4

#ifdef LCD_USE_8_BIT_INTERFACE
		//8 bit data interface/////////////////////////////
		_LcdWriteInst(0x30);
   8169e:	2130      	movs	r1, #48	; 0x30
   816a0:	2002      	movs	r0, #2
   816a2:	f7ff ff69 	bl	81578 <Lcd>
		delay_ms(6);
   816a6:	f24a 00b7 	movw	r0, #41143	; 0xa0b7
   816aa:	47a0      	blx	r4
		_LcdWriteInst(0x30);
   816ac:	2130      	movs	r1, #48	; 0x30
   816ae:	2002      	movs	r0, #2
   816b0:	f7ff ff62 	bl	81578 <Lcd>
		delay_ms(2);
   816b4:	f243 5093 	movw	r0, #13715	; 0x3593
   816b8:	47a0      	blx	r4
		_LcdWriteInst(0x30);
   816ba:	2130      	movs	r1, #48	; 0x30
   816bc:	2002      	movs	r0, #2
   816be:	f7ff ff5b 	bl	81578 <Lcd>
		delay_ms(2);
   816c2:	f243 5093 	movw	r0, #13715	; 0x3593
   816c6:	47a0      	blx	r4
		_LcdWriteInst(0x38);	//SET FUNCTION : 8 bits interface/2 line display/5x7 dots
   816c8:	2138      	movs	r1, #56	; 0x38
   816ca:	2002      	movs	r0, #2
   816cc:	f7ff ff54 	bl	81578 <Lcd>
		delay_ms(10);
		_LcdWriteByte(0x20);
		delay_ms(10);
		_LcdWriteInst(0x28);	//SET FUNCTION : 4 bits interface/2 line display/5x7 dots
#endif
		_LcdWriteInst(0x08);	//DISPLAY OFF
   816d0:	2108      	movs	r1, #8
   816d2:	2002      	movs	r0, #2
   816d4:	f7ff ff50 	bl	81578 <Lcd>
		_LcdWriteInst(0x01);	//DISPLAY CLEAR
   816d8:	2101      	movs	r1, #1
   816da:	2002      	movs	r0, #2
   816dc:	f7ff ff4c 	bl	81578 <Lcd>
		_LcdWriteInst(0x06);	//ENTRY MODE SET : Cursor Increase/Display is not shift
   816e0:	2106      	movs	r1, #6
   816e2:	2002      	movs	r0, #2
   816e4:	f7ff ff48 	bl	81578 <Lcd>
		_LcdWriteInst(0x0C);	//DISPLAY ON/CURSOR OFF
   816e8:	210c      	movs	r1, #12
   816ea:	2002      	movs	r0, #2
   816ec:	f7ff ff44 	bl	81578 <Lcd>

		lcd.status = ST_LCD_ON;
   816f0:	2201      	movs	r2, #1
   816f2:	4b91      	ldr	r3, [pc, #580]	; (81938 <Lcd+0x3c0>)
   816f4:	601a      	str	r2, [r3, #0]

	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_LCD_SWITCH_BAD_SC,sc);
	}
	return 0;
   816f6:	2400      	movs	r4, #0
		break;
   816f8:	e14b      	b.n	81992 <Lcd+0x41a>
		_LcdWriteInst(0x08);	//DISPLAY OFF
   816fa:	2108      	movs	r1, #8
   816fc:	2002      	movs	r0, #2
   816fe:	f7ff ff3b 	bl	81578 <Lcd>
		_LcdSetDataLineIn();
   81702:	200a      	movs	r0, #10
   81704:	f7ff ff38 	bl	81578 <Lcd>
		gpio_configure_pin(LCD_E,			LCD_PIN_OUT_FLAGS);
   81708:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8170c:	2004      	movs	r0, #4
   8170e:	4c85      	ldr	r4, [pc, #532]	; (81924 <Lcd+0x3ac>)
   81710:	47a0      	blx	r4
		gpio_configure_pin(LCD_RWB,			LCD_PIN_OUT_FLAGS);
   81712:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81716:	2005      	movs	r0, #5
   81718:	47a0      	blx	r4
		gpio_configure_pin(LCD_RS,			LCD_PIN_OUT_FLAGS);
   8171a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8171e:	2006      	movs	r0, #6
   81720:	47a0      	blx	r4
		gpio_configure_pin(LCD_BACKLIGHT,	LCD_PIN_OUT_FLAGS);
   81722:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81726:	2007      	movs	r0, #7
   81728:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   8172a:	2004      	movs	r0, #4
   8172c:	4c7e      	ldr	r4, [pc, #504]	; (81928 <Lcd+0x3b0>)
   8172e:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RS);
   81730:	2006      	movs	r0, #6
   81732:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RWB);
   81734:	2005      	movs	r0, #5
   81736:	47a0      	blx	r4
		gpio_set_pin_low(LCD_BACKLIGHT);
   81738:	2007      	movs	r0, #7
   8173a:	47a0      	blx	r4
		lcd.status=0;
   8173c:	2400      	movs	r4, #0
   8173e:	4b7e      	ldr	r3, [pc, #504]	; (81938 <Lcd+0x3c0>)
   81740:	601c      	str	r4, [r3, #0]
		break;
   81742:	e126      	b.n	81992 <Lcd+0x41a>
		return (uint32_t)(mIsBitsSet(lcd.status,ST_LCD_ON));
   81744:	4b7c      	ldr	r3, [pc, #496]	; (81938 <Lcd+0x3c0>)
   81746:	681c      	ldr	r4, [r3, #0]
   81748:	f004 0401 	and.w	r4, r4, #1
   8174c:	e121      	b.n	81992 <Lcd+0x41a>
		_LcdSetCursor(_line,_col);
   8174e:	9a07      	ldr	r2, [sp, #28]
   81750:	9906      	ldr	r1, [sp, #24]
   81752:	2007      	movs	r0, #7
   81754:	f7ff ff10 	bl	81578 <Lcd>
		_LcdWriteData(_ch);
   81758:	9905      	ldr	r1, [sp, #20]
   8175a:	2003      	movs	r0, #3
   8175c:	f7ff ff0c 	bl	81578 <Lcd>
	return 0;
   81760:	2400      	movs	r4, #0
break;
   81762:	e116      	b.n	81992 <Lcd+0x41a>
		_LcdSetCursor(_line,_col);
   81764:	9a07      	ldr	r2, [sp, #28]
   81766:	9906      	ldr	r1, [sp, #24]
   81768:	2007      	movs	r0, #7
   8176a:	f7ff ff05 	bl	81578 <Lcd>
		while(*(char*)_str)
   8176e:	9c05      	ldr	r4, [sp, #20]
   81770:	7821      	ldrb	r1, [r4, #0]
   81772:	2900      	cmp	r1, #0
   81774:	f000 8112 	beq.w	8199c <Lcd+0x424>
			_LcdWriteData(*(char*)_str++);
   81778:	2503      	movs	r5, #3
   8177a:	3401      	adds	r4, #1
   8177c:	9405      	str	r4, [sp, #20]
   8177e:	4628      	mov	r0, r5
   81780:	f7ff fefa 	bl	81578 <Lcd>
		while(*(char*)_str)
   81784:	7821      	ldrb	r1, [r4, #0]
   81786:	2900      	cmp	r1, #0
   81788:	d1f7      	bne.n	8177a <Lcd+0x202>
	return 0;
   8178a:	2400      	movs	r4, #0
   8178c:	e101      	b.n	81992 <Lcd+0x41a>
		if(_onOff)
   8178e:	9c05      	ldr	r4, [sp, #20]
   81790:	b124      	cbz	r4, 8179c <Lcd+0x224>
			gpio_set_pin_high(LCD_BACKLIGHT);
   81792:	2007      	movs	r0, #7
   81794:	4b65      	ldr	r3, [pc, #404]	; (8192c <Lcd+0x3b4>)
   81796:	4798      	blx	r3
	return 0;
   81798:	2400      	movs	r4, #0
   8179a:	e0fa      	b.n	81992 <Lcd+0x41a>
			gpio_set_pin_low(LCD_BACKLIGHT);
   8179c:	2007      	movs	r0, #7
   8179e:	4b62      	ldr	r3, [pc, #392]	; (81928 <Lcd+0x3b0>)
   817a0:	4798      	blx	r3
   817a2:	e0f6      	b.n	81992 <Lcd+0x41a>
		_LcdSetDataLineOut();
   817a4:	2009      	movs	r0, #9
   817a6:	f7ff fee7 	bl	81578 <Lcd>
		gpio_set_pin_low(LCD_RWB);
   817aa:	2005      	movs	r0, #5
   817ac:	4b5e      	ldr	r3, [pc, #376]	; (81928 <Lcd+0x3b0>)
   817ae:	4798      	blx	r3
		_LcdEup();
   817b0:	2005      	movs	r0, #5
   817b2:	f7ff fee1 	bl	81578 <Lcd>
		(_byte&0x80)?gpio_set_pin_high(LCD_DB7):gpio_set_pin_low(LCD_DB7);
   817b6:	9c05      	ldr	r4, [sp, #20]
   817b8:	f014 0f80 	tst.w	r4, #128	; 0x80
   817bc:	f04f 0003 	mov.w	r0, #3
   817c0:	bf14      	ite	ne
   817c2:	4b5a      	ldrne	r3, [pc, #360]	; (8192c <Lcd+0x3b4>)
   817c4:	4b58      	ldreq	r3, [pc, #352]	; (81928 <Lcd+0x3b0>)
   817c6:	4798      	blx	r3
		(_byte&0x40)?gpio_set_pin_high(LCD_DB6):gpio_set_pin_low(LCD_DB6);
   817c8:	b2e4      	uxtb	r4, r4
   817ca:	f014 0f40 	tst.w	r4, #64	; 0x40
   817ce:	f04f 0002 	mov.w	r0, #2
   817d2:	bf14      	ite	ne
   817d4:	4b55      	ldrne	r3, [pc, #340]	; (8192c <Lcd+0x3b4>)
   817d6:	4b54      	ldreq	r3, [pc, #336]	; (81928 <Lcd+0x3b0>)
   817d8:	4798      	blx	r3
		(_byte&0x20)?gpio_set_pin_high(LCD_DB5):gpio_set_pin_low(LCD_DB5);
   817da:	f014 0f20 	tst.w	r4, #32
   817de:	f04f 0001 	mov.w	r0, #1
   817e2:	bf14      	ite	ne
   817e4:	4b51      	ldrne	r3, [pc, #324]	; (8192c <Lcd+0x3b4>)
   817e6:	4b50      	ldreq	r3, [pc, #320]	; (81928 <Lcd+0x3b0>)
   817e8:	4798      	blx	r3
		(_byte&0x10)?gpio_set_pin_high(LCD_DB4):gpio_set_pin_low(LCD_DB4);
   817ea:	f014 0f10 	tst.w	r4, #16
   817ee:	f04f 0000 	mov.w	r0, #0
   817f2:	bf14      	ite	ne
   817f4:	4b4d      	ldrne	r3, [pc, #308]	; (8192c <Lcd+0x3b4>)
   817f6:	4b4c      	ldreq	r3, [pc, #304]	; (81928 <Lcd+0x3b0>)
   817f8:	4798      	blx	r3
		(_byte&0x08)?gpio_set_pin_high(LCD_DB3):gpio_set_pin_low(LCD_DB3);
   817fa:	f014 0f08 	tst.w	r4, #8
   817fe:	f04f 002b 	mov.w	r0, #43	; 0x2b
   81802:	bf14      	ite	ne
   81804:	4b49      	ldrne	r3, [pc, #292]	; (8192c <Lcd+0x3b4>)
   81806:	4b48      	ldreq	r3, [pc, #288]	; (81928 <Lcd+0x3b0>)
   81808:	4798      	blx	r3
		(_byte&0x04)?gpio_set_pin_high(LCD_DB2):gpio_set_pin_low(LCD_DB2);
   8180a:	f014 0f04 	tst.w	r4, #4
   8180e:	f04f 002a 	mov.w	r0, #42	; 0x2a
   81812:	bf14      	ite	ne
   81814:	4b45      	ldrne	r3, [pc, #276]	; (8192c <Lcd+0x3b4>)
   81816:	4b44      	ldreq	r3, [pc, #272]	; (81928 <Lcd+0x3b0>)
   81818:	4798      	blx	r3
		(_byte&0x02)?gpio_set_pin_high(LCD_DB1):gpio_set_pin_low(LCD_DB1);
   8181a:	f014 0f02 	tst.w	r4, #2
   8181e:	f04f 0029 	mov.w	r0, #41	; 0x29
   81822:	bf14      	ite	ne
   81824:	4b41      	ldrne	r3, [pc, #260]	; (8192c <Lcd+0x3b4>)
   81826:	4b40      	ldreq	r3, [pc, #256]	; (81928 <Lcd+0x3b0>)
   81828:	4798      	blx	r3
		(_byte&0x01)?gpio_set_pin_high(LCD_DB0):gpio_set_pin_low(LCD_DB0);
   8182a:	f014 0f01 	tst.w	r4, #1
   8182e:	f04f 0028 	mov.w	r0, #40	; 0x28
   81832:	bf14      	ite	ne
   81834:	4b3d      	ldrne	r3, [pc, #244]	; (8192c <Lcd+0x3b4>)
   81836:	4b3c      	ldreq	r3, [pc, #240]	; (81928 <Lcd+0x3b0>)
   81838:	4798      	blx	r3
		_LcdEdown();
   8183a:	2006      	movs	r0, #6
   8183c:	f7ff fe9c 	bl	81578 <Lcd>
	return 0;
   81840:	2400      	movs	r4, #0
		break;
   81842:	e0a6      	b.n	81992 <Lcd+0x41a>
		gpio_set_pin_low(LCD_RS);
   81844:	2006      	movs	r0, #6
   81846:	4b38      	ldr	r3, [pc, #224]	; (81928 <Lcd+0x3b0>)
   81848:	4798      	blx	r3
		_LcdWriteByte(_inst);
   8184a:	f89d 1014 	ldrb.w	r1, [sp, #20]
   8184e:	2001      	movs	r0, #1
   81850:	f7ff fe92 	bl	81578 <Lcd>
	return 0;
   81854:	2400      	movs	r4, #0
		break;
   81856:	e09c      	b.n	81992 <Lcd+0x41a>
		gpio_set_pin_high(LCD_RS);
   81858:	2006      	movs	r0, #6
   8185a:	4b34      	ldr	r3, [pc, #208]	; (8192c <Lcd+0x3b4>)
   8185c:	4798      	blx	r3
		_LcdWriteByte(_data);
   8185e:	f89d 1014 	ldrb.w	r1, [sp, #20]
   81862:	2001      	movs	r0, #1
   81864:	f7ff fe88 	bl	81578 <Lcd>
	return 0;
   81868:	2400      	movs	r4, #0
		break;
   8186a:	e092      	b.n	81992 <Lcd+0x41a>
		delay_us(500);
   8186c:	f640 5065 	movw	r0, #3429	; 0xd65
   81870:	4c30      	ldr	r4, [pc, #192]	; (81934 <Lcd+0x3bc>)
   81872:	47a0      	blx	r4
		gpio_set_pin_high(LCD_E);
   81874:	2004      	movs	r0, #4
   81876:	4b2d      	ldr	r3, [pc, #180]	; (8192c <Lcd+0x3b4>)
   81878:	4798      	blx	r3
		delay_us(100);
   8187a:	f240 20ae 	movw	r0, #686	; 0x2ae
   8187e:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   81880:	2004      	movs	r0, #4
   81882:	4b29      	ldr	r3, [pc, #164]	; (81928 <Lcd+0x3b0>)
   81884:	4798      	blx	r3
		delay_us(500);
   81886:	f640 5065 	movw	r0, #3429	; 0xd65
   8188a:	47a0      	blx	r4
	return 0;
   8188c:	2400      	movs	r4, #0
		break;
   8188e:	e080      	b.n	81992 <Lcd+0x41a>
		delay_us(500);
   81890:	f640 5065 	movw	r0, #3429	; 0xd65
   81894:	4c27      	ldr	r4, [pc, #156]	; (81934 <Lcd+0x3bc>)
   81896:	47a0      	blx	r4
		gpio_set_pin_high(LCD_E);
   81898:	2004      	movs	r0, #4
   8189a:	4b24      	ldr	r3, [pc, #144]	; (8192c <Lcd+0x3b4>)
   8189c:	4798      	blx	r3
		delay_us(50);
   8189e:	f240 1057 	movw	r0, #343	; 0x157
   818a2:	47a0      	blx	r4
	return 0;
   818a4:	2400      	movs	r4, #0
		break;
   818a6:	e074      	b.n	81992 <Lcd+0x41a>
		delay_us(50);
   818a8:	f240 1057 	movw	r0, #343	; 0x157
   818ac:	4c21      	ldr	r4, [pc, #132]	; (81934 <Lcd+0x3bc>)
   818ae:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   818b0:	2004      	movs	r0, #4
   818b2:	4b1d      	ldr	r3, [pc, #116]	; (81928 <Lcd+0x3b0>)
   818b4:	4798      	blx	r3
		delay_us(500);
   818b6:	f640 5065 	movw	r0, #3429	; 0xd65
   818ba:	47a0      	blx	r4
	return 0;
   818bc:	2400      	movs	r4, #0
		break;
   818be:	e068      	b.n	81992 <Lcd+0x41a>
		_LcdWriteInst((line2addr[_nLine&0x03]+_nCol)|0x80);
   818c0:	9b05      	ldr	r3, [sp, #20]
   818c2:	f003 0303 	and.w	r3, r3, #3
   818c6:	4a1d      	ldr	r2, [pc, #116]	; (8193c <Lcd+0x3c4>)
   818c8:	5cd1      	ldrb	r1, [r2, r3]
   818ca:	9b06      	ldr	r3, [sp, #24]
   818cc:	4419      	add	r1, r3
   818ce:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   818d2:	2002      	movs	r0, #2
   818d4:	f7ff fe50 	bl	81578 <Lcd>
	return 0;
   818d8:	2400      	movs	r4, #0
		break;
   818da:	e05a      	b.n	81992 <Lcd+0x41a>
		gpio_configure_pin(LCD_DB4,			LCD_PIN_OUT_FLAGS);
   818dc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   818e0:	2000      	movs	r0, #0
   818e2:	4c10      	ldr	r4, [pc, #64]	; (81924 <Lcd+0x3ac>)
   818e4:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB5,			LCD_PIN_OUT_FLAGS);
   818e6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   818ea:	2001      	movs	r0, #1
   818ec:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB6,			LCD_PIN_OUT_FLAGS);
   818ee:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   818f2:	2002      	movs	r0, #2
   818f4:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB7,			LCD_PIN_OUT_FLAGS);
   818f6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   818fa:	2003      	movs	r0, #3
   818fc:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB0,			LCD_PIN_OUT_FLAGS);
   818fe:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81902:	2028      	movs	r0, #40	; 0x28
   81904:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB1,			LCD_PIN_OUT_FLAGS);
   81906:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8190a:	2029      	movs	r0, #41	; 0x29
   8190c:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB2,			LCD_PIN_OUT_FLAGS);
   8190e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81912:	202a      	movs	r0, #42	; 0x2a
   81914:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB3,			LCD_PIN_OUT_FLAGS);
   81916:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8191a:	202b      	movs	r0, #43	; 0x2b
   8191c:	47a0      	blx	r4
	return 0;
   8191e:	2400      	movs	r4, #0
		break;
   81920:	e037      	b.n	81992 <Lcd+0x41a>
   81922:	bf00      	nop
   81924:	000842b1 	.word	0x000842b1
   81928:	00084275 	.word	0x00084275
   8192c:	0008425b 	.word	0x0008425b
   81930:	003450dc 	.word	0x003450dc
   81934:	20000001 	.word	0x20000001
   81938:	200019f8 	.word	0x200019f8
   8193c:	00089ff8 	.word	0x00089ff8
		gpio_configure_pin(LCD_DB4,			LCD_PIN_IN_FLAGS);
   81940:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81944:	2000      	movs	r0, #0
   81946:	4c16      	ldr	r4, [pc, #88]	; (819a0 <Lcd+0x428>)
   81948:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB5,			LCD_PIN_IN_FLAGS);
   8194a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8194e:	2001      	movs	r0, #1
   81950:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB6,			LCD_PIN_IN_FLAGS);
   81952:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81956:	2002      	movs	r0, #2
   81958:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB7,			LCD_PIN_IN_FLAGS);
   8195a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8195e:	2003      	movs	r0, #3
   81960:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB0,			LCD_PIN_IN_FLAGS);
   81962:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81966:	2028      	movs	r0, #40	; 0x28
   81968:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB1,			LCD_PIN_IN_FLAGS);
   8196a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8196e:	2029      	movs	r0, #41	; 0x29
   81970:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB2,			LCD_PIN_IN_FLAGS);
   81972:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81976:	202a      	movs	r0, #42	; 0x2a
   81978:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB3,			LCD_PIN_IN_FLAGS);
   8197a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8197e:	202b      	movs	r0, #43	; 0x2b
   81980:	47a0      	blx	r4
	return 0;
   81982:	2400      	movs	r4, #0
		break;
   81984:	e005      	b.n	81992 <Lcd+0x41a>
		Error(ERROR_LCD_SWITCH_BAD_SC,sc);
   81986:	200f      	movs	r0, #15
   81988:	4b06      	ldr	r3, [pc, #24]	; (819a4 <Lcd+0x42c>)
   8198a:	4798      	blx	r3
	return 0;
   8198c:	2400      	movs	r4, #0
   8198e:	e000      	b.n	81992 <Lcd+0x41a>
   81990:	2400      	movs	r4, #0
}
   81992:	4620      	mov	r0, r4
   81994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81998:	b004      	add	sp, #16
   8199a:	4770      	bx	lr
	return 0;
   8199c:	2400      	movs	r4, #0
   8199e:	e7f8      	b.n	81992 <Lcd+0x41a>
   819a0:	000842b1 	.word	0x000842b1
   819a4:	00080f15 	.word	0x00080f15

000819a8 <LcdFindHalf>:

uint8_t LcdFindHalf(uint32_t len)
{
   819a8:	b508      	push	{r3, lr}
	float col;
	col = 20 - len;
   819aa:	f1c0 0014 	rsb	r0, r0, #20
   819ae:	4b05      	ldr	r3, [pc, #20]	; (819c4 <LcdFindHalf+0x1c>)
   819b0:	4798      	blx	r3
	col = col/2;
   819b2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   819b6:	4b04      	ldr	r3, [pc, #16]	; (819c8 <LcdFindHalf+0x20>)
   819b8:	4798      	blx	r3
	return col;
   819ba:	4b04      	ldr	r3, [pc, #16]	; (819cc <LcdFindHalf+0x24>)
   819bc:	4798      	blx	r3
   819be:	b2c0      	uxtb	r0, r0
   819c0:	bd08      	pop	{r3, pc}
   819c2:	bf00      	nop
   819c4:	00084d71 	.word	0x00084d71
   819c8:	00084e21 	.word	0x00084e21
   819cc:	000850c1 	.word	0x000850c1

000819d0 <Modbus>:
	_COMRS485_FLUSH
};
int i;

uint32_t Modbus(uint32_t sc,...)
{
   819d0:	b40f      	push	{r0, r1, r2, r3}
   819d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   819d6:	b083      	sub	sp, #12
	switch(sc)
   819d8:	990c      	ldr	r1, [sp, #48]	; 0x30
   819da:	2908      	cmp	r1, #8
   819dc:	f000 849c 	beq.w	82318 <Modbus+0x948>
   819e0:	d834      	bhi.n	81a4c <Modbus+0x7c>
   819e2:	2904      	cmp	r1, #4
   819e4:	f000 8466 	beq.w	822b4 <Modbus+0x8e4>
   819e8:	d910      	bls.n	81a0c <Modbus+0x3c>
   819ea:	2906      	cmp	r1, #6
   819ec:	f000 80ea 	beq.w	81bc4 <Modbus+0x1f4>
   819f0:	f200 8486 	bhi.w	82300 <Modbus+0x930>
		break;
	case _MODBUS_COMMAND_ACKNOWNLEDGING_WRITE_MULTIPLE_REGISTER:
		//rs485_Send();
		break;
	case _MODBUS_COMMAND_ACKNOWNLEDGING_WRITE_SINGLE_COIL:
		Putstr("\r\n\nWRITE SINGLE COIL ACK!!\r\n");
   819f4:	49a0      	ldr	r1, [pc, #640]	; (81c78 <Modbus+0x2a8>)
   819f6:	2067      	movs	r0, #103	; 0x67
   819f8:	4ba0      	ldr	r3, [pc, #640]	; (81c7c <Modbus+0x2ac>)
   819fa:	4798      	blx	r3
		rs485_Send(modbus.frameLen = MODBUS_WRITE_SINGLE_COIL_FRAME_LEN, 0);
   819fc:	2108      	movs	r1, #8
   819fe:	4ba0      	ldr	r3, [pc, #640]	; (81c80 <Modbus+0x2b0>)
   81a00:	8259      	strh	r1, [r3, #18]
   81a02:	2200      	movs	r2, #0
   81a04:	2066      	movs	r0, #102	; 0x66
   81a06:	4b9f      	ldr	r3, [pc, #636]	; (81c84 <Modbus+0x2b4>)
   81a08:	4798      	blx	r3
		break;
   81a0a:	e0db      	b.n	81bc4 <Modbus+0x1f4>
	switch(sc)
   81a0c:	2901      	cmp	r1, #1
   81a0e:	f000 825e 	beq.w	81ece <Modbus+0x4fe>
   81a12:	2902      	cmp	r1, #2
   81a14:	d127      	bne.n	81a66 <Modbus+0x96>
		Putstr("\r\n\nREAD COILS ACK!!\r\n");
		rs485_Send(modbus.frameLen = MODBUS_READ_COILS_FRAME_LEN, 0);
		break;
	case _MODBUS_SLAVE_NOT_ACK:
#define _slaveAddr		pa1
		Putstr("\r\n\t***** MODBUS_SLAVE_NOT_ACK FROM SLAVE #");
   81a16:	499c      	ldr	r1, [pc, #624]	; (81c88 <Modbus+0x2b8>)
   81a18:	2067      	movs	r0, #103	; 0x67
   81a1a:	4c98      	ldr	r4, [pc, #608]	; (81c7c <Modbus+0x2ac>)
   81a1c:	47a0      	blx	r4
		sprintf(buf, "%02x *****\r\n", _slaveAddr);
   81a1e:	4d9b      	ldr	r5, [pc, #620]	; (81c8c <Modbus+0x2bc>)
   81a20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   81a22:	499b      	ldr	r1, [pc, #620]	; (81c90 <Modbus+0x2c0>)
   81a24:	4628      	mov	r0, r5
   81a26:	4b9b      	ldr	r3, [pc, #620]	; (81c94 <Modbus+0x2c4>)
   81a28:	4798      	blx	r3
		Putstr(buf);
   81a2a:	4629      	mov	r1, r5
   81a2c:	2067      	movs	r0, #103	; 0x67
   81a2e:	47a0      	blx	r4
		mBitsClr(modbus.status, ST_SLAVE_ASK);
   81a30:	4a93      	ldr	r2, [pc, #588]	; (81c80 <Modbus+0x2b0>)
   81a32:	8813      	ldrh	r3, [r2, #0]
   81a34:	f023 0308 	bic.w	r3, r3, #8
   81a38:	8013      	strh	r3, [r2, #0]
		PushTask(Modbus, MODBUS_SLAVE_SEND, 0, 100);
   81a3a:	2364      	movs	r3, #100	; 0x64
   81a3c:	9300      	str	r3, [sp, #0]
   81a3e:	2300      	movs	r3, #0
   81a40:	226e      	movs	r2, #110	; 0x6e
   81a42:	4995      	ldr	r1, [pc, #596]	; (81c98 <Modbus+0x2c8>)
   81a44:	2066      	movs	r0, #102	; 0x66
   81a46:	4c95      	ldr	r4, [pc, #596]	; (81c9c <Modbus+0x2cc>)
   81a48:	47a0      	blx	r4
		#undef _slaveAddr
		break;
   81a4a:	e0bb      	b.n	81bc4 <Modbus+0x1f4>
	switch(sc)
   81a4c:	2967      	cmp	r1, #103	; 0x67
   81a4e:	f000 81f8 	beq.w	81e42 <Modbus+0x472>
   81a52:	d90c      	bls.n	81a6e <Modbus+0x9e>
   81a54:	296e      	cmp	r1, #110	; 0x6e
   81a56:	f000 8137 	beq.w	81cc8 <Modbus+0x2f8>
   81a5a:	29c9      	cmp	r1, #201	; 0xc9
   81a5c:	f000 80c8 	beq.w	81bf0 <Modbus+0x220>
   81a60:	2968      	cmp	r1, #104	; 0x68
   81a62:	f000 81a8 	beq.w	81db6 <Modbus+0x3e6>
			PushTask(Modbus, _MODBUS_TIMER, 0, MODBUS_TIMER_VALUE);
		}
		break;
	///// DEFAULT SWITCH BAD SC ERROR TRAP ////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_MODBUS_SWITCH_BAD_SC,sc);
   81a66:	2021      	movs	r0, #33	; 0x21
   81a68:	4b8d      	ldr	r3, [pc, #564]	; (81ca0 <Modbus+0x2d0>)
   81a6a:	4798      	blx	r3
   81a6c:	e0aa      	b.n	81bc4 <Modbus+0x1f4>
	switch(sc)
   81a6e:	2964      	cmp	r1, #100	; 0x64
   81a70:	d07d      	beq.n	81b6e <Modbus+0x19e>
   81a72:	2966      	cmp	r1, #102	; 0x66
   81a74:	d1f7      	bne.n	81a66 <Modbus+0x96>
		sc=rs485_GetBufPtr();
   81a76:	2067      	movs	r0, #103	; 0x67
   81a78:	4b82      	ldr	r3, [pc, #520]	; (81c84 <Modbus+0x2b4>)
   81a7a:	4798      	blx	r3
   81a7c:	4680      	mov	r8, r0
   81a7e:	900c      	str	r0, [sp, #48]	; 0x30
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->moduleAddr=_slaveAddr),0xFFFF);
   81a80:	4606      	mov	r6, r0
   81a82:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
   81a86:	f880 a000 	strb.w	sl, [r0]
   81a8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81a8e:	4650      	mov	r0, sl
   81a90:	f8df b230 	ldr.w	fp, [pc, #560]	; 81cc4 <Modbus+0x2f4>
   81a94:	47d8      	blx	fp
   81a96:	4f7a      	ldr	r7, [pc, #488]	; (81c80 <Modbus+0x2b0>)
   81a98:	8138      	strh	r0, [r7, #8]
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->functionCode=_startingAddr),modbus.crc);
   81a9a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   81a9c:	b2e0      	uxtb	r0, r4
   81a9e:	f888 0001 	strb.w	r0, [r8, #1]
   81aa2:	8939      	ldrh	r1, [r7, #8]
   81aa4:	47d8      	blx	fp
   81aa6:	8138      	strh	r0, [r7, #8]
		modbus.crc=CRC16MODBUSword((_pModbusTxFramePtr->writeMultipleRegister_header.startingAddr=swap16(_startingAddr)),modbus.crc);
   81aa8:	f3c4 2007 	ubfx	r0, r4, #8, #8
   81aac:	f888 0002 	strb.w	r0, [r8, #2]
   81ab0:	8939      	ldrh	r1, [r7, #8]
   81ab2:	4b7c      	ldr	r3, [pc, #496]	; (81ca4 <Modbus+0x2d4>)
   81ab4:	4798      	blx	r3
   81ab6:	8138      	strh	r0, [r7, #8]
		modbus.crc=CRC16MODBUSword((_pModbusTxFramePtr->writeMultipleRegister_header.registerQty=swap16(_registerQty)),modbus.crc);
   81ab8:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   81abc:	fa1f f489 	uxth.w	r4, r9
   81ac0:	4625      	mov	r5, r4
   81ac2:	ea4f 2009 	mov.w	r0, r9, lsl #8
   81ac6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   81aca:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   81ace:	ea40 2014 	orr.w	r0, r0, r4, lsr #8
   81ad2:	b280      	uxth	r0, r0
   81ad4:	f8a8 0003 	strh.w	r0, [r8, #3]
   81ad8:	8939      	ldrh	r1, [r7, #8]
   81ada:	4b72      	ldr	r3, [pc, #456]	; (81ca4 <Modbus+0x2d4>)
   81adc:	4798      	blx	r3
   81ade:	8138      	strh	r0, [r7, #8]
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->writeMultipleRegister_header.byteCount=_registerQty*2),modbus.crc);
   81ae0:	ea4f 0049 	mov.w	r0, r9, lsl #1
   81ae4:	b2c0      	uxtb	r0, r0
   81ae6:	f888 0005 	strb.w	r0, [r8, #5]
   81aea:	8939      	ldrh	r1, [r7, #8]
   81aec:	47d8      	blx	fp
   81aee:	8138      	strh	r0, [r7, #8]
		for (_k=0;_k<_registerQty;_k++)
   81af0:	2300      	movs	r3, #0
   81af2:	930e      	str	r3, [sp, #56]	; 0x38
   81af4:	b1bc      	cbz	r4, 81b26 <Modbus+0x156>
   81af6:	461f      	mov	r7, r3
			modbus.crc=CRC16MODBUSword((_pModbusTxFramePtr->writeMultipleRegister_header.dataField[_k]=swap16(_dataPtr[_k])),modbus.crc);
   81af8:	f8df 9184 	ldr.w	r9, [pc, #388]	; 81c80 <Modbus+0x2b0>
   81afc:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 81ca4 <Modbus+0x2d4>
   81b00:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81b02:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
   81b06:	0218      	lsls	r0, r3, #8
   81b08:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   81b0c:	b280      	uxth	r0, r0
   81b0e:	eb06 0347 	add.w	r3, r6, r7, lsl #1
   81b12:	80d8      	strh	r0, [r3, #6]
   81b14:	f8b9 1008 	ldrh.w	r1, [r9, #8]
   81b18:	47d8      	blx	fp
   81b1a:	f8a9 0008 	strh.w	r0, [r9, #8]
		for (_k=0;_k<_registerQty;_k++)
   81b1e:	3701      	adds	r7, #1
   81b20:	970e      	str	r7, [sp, #56]	; 0x38
   81b22:	42bd      	cmp	r5, r7
   81b24:	d1ec      	bne.n	81b00 <Modbus+0x130>
		_pModbusTxFramePtr->writeMultipleRegister_header.dataField[_k]=swap16(modbus.crc);
   81b26:	4b56      	ldr	r3, [pc, #344]	; (81c80 <Modbus+0x2b0>)
   81b28:	8919      	ldrh	r1, [r3, #8]
   81b2a:	020a      	lsls	r2, r1, #8
   81b2c:	eb08 0344 	add.w	r3, r8, r4, lsl #1
   81b30:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   81b34:	80da      	strh	r2, [r3, #6]
		(_slaveAddr!=MODBUS_BROADCAST_ADDRESS)?	mBitsSet(modbus.status, ST_FRAME_ACK_REQ) : mBitsClr(modbus.status, ST_FRAME_ACK_REQ);
   81b36:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
   81b3a:	4a51      	ldr	r2, [pc, #324]	; (81c80 <Modbus+0x2b0>)
   81b3c:	8813      	ldrh	r3, [r2, #0]
   81b3e:	bf14      	ite	ne
   81b40:	f043 0302 	orrne.w	r3, r3, #2
   81b44:	f023 0302 	biceq.w	r3, r3, #2
   81b48:	8013      	strh	r3, [r2, #0]
		if(IsAckReq())
   81b4a:	4b4d      	ldr	r3, [pc, #308]	; (81c80 <Modbus+0x2b0>)
   81b4c:	881b      	ldrh	r3, [r3, #0]
   81b4e:	f013 0f02 	tst.w	r3, #2
   81b52:	f040 810e 	bne.w	81d72 <Modbus+0x3a2>
		rs485_Send((modbus.frameLen = _registerQty*2+9), IsAckReq());
   81b56:	0061      	lsls	r1, r4, #1
   81b58:	3109      	adds	r1, #9
   81b5a:	b289      	uxth	r1, r1
   81b5c:	4b48      	ldr	r3, [pc, #288]	; (81c80 <Modbus+0x2b0>)
   81b5e:	8259      	strh	r1, [r3, #18]
   81b60:	881a      	ldrh	r2, [r3, #0]
   81b62:	f3c2 0240 	ubfx	r2, r2, #1, #1
   81b66:	2066      	movs	r0, #102	; 0x66
   81b68:	4b46      	ldr	r3, [pc, #280]	; (81c84 <Modbus+0x2b4>)
   81b6a:	4798      	blx	r3
		break;
   81b6c:	e02a      	b.n	81bc4 <Modbus+0x1f4>
		ServicesBufferNew();
   81b6e:	2065      	movs	r0, #101	; 0x65
   81b70:	4b4d      	ldr	r3, [pc, #308]	; (81ca8 <Modbus+0x2d8>)
   81b72:	4798      	blx	r3
		i = 0;
   81b74:	2300      	movs	r3, #0
   81b76:	4a4d      	ldr	r2, [pc, #308]	; (81cac <Modbus+0x2dc>)
   81b78:	6013      	str	r3, [r2, #0]
		modbus.reg=0;
   81b7a:	4c41      	ldr	r4, [pc, #260]	; (81c80 <Modbus+0x2b0>)
   81b7c:	6023      	str	r3, [r4, #0]
		modbus.IDSlave = 1;
   81b7e:	2301      	movs	r3, #1
   81b80:	7523      	strb	r3, [r4, #20]
		if((modbus.moduleAddr=(uint8_t)GetModuleAddr())==0) 
   81b82:	2067      	movs	r0, #103	; 0x67
   81b84:	4b4a      	ldr	r3, [pc, #296]	; (81cb0 <Modbus+0x2e0>)
   81b86:	4798      	blx	r3
   81b88:	b2c0      	uxtb	r0, r0
   81b8a:	7320      	strb	r0, [r4, #12]
   81b8c:	bb00      	cbnz	r0, 81bd0 <Modbus+0x200>
			mBitsSet(modbus.status,ST_MODULE_IS_MASTER);
   81b8e:	8823      	ldrh	r3, [r4, #0]
   81b90:	f043 0301 	orr.w	r3, r3, #1
   81b94:	8023      	strh	r3, [r4, #0]
			LcdPutstr("MASTER", 3, 6);
   81b96:	2306      	movs	r3, #6
   81b98:	2203      	movs	r2, #3
   81b9a:	4946      	ldr	r1, [pc, #280]	; (81cb4 <Modbus+0x2e4>)
   81b9c:	2068      	movs	r0, #104	; 0x68
   81b9e:	4c46      	ldr	r4, [pc, #280]	; (81cb8 <Modbus+0x2e8>)
   81ba0:	47a0      	blx	r4
		if(IsMaster())
   81ba2:	4b37      	ldr	r3, [pc, #220]	; (81c80 <Modbus+0x2b0>)
		sprintf(buf, "\r\n\tATTACH READY: %d\r\n", mIsBitsSet(modbus.status, ST_ATTACH_READY));
   81ba4:	881a      	ldrh	r2, [r3, #0]
   81ba6:	f002 0232 	and.w	r2, r2, #50	; 0x32
   81baa:	4c38      	ldr	r4, [pc, #224]	; (81c8c <Modbus+0x2bc>)
   81bac:	2a32      	cmp	r2, #50	; 0x32
   81bae:	bf14      	ite	ne
   81bb0:	2200      	movne	r2, #0
   81bb2:	2201      	moveq	r2, #1
   81bb4:	4941      	ldr	r1, [pc, #260]	; (81cbc <Modbus+0x2ec>)
   81bb6:	4620      	mov	r0, r4
   81bb8:	4b36      	ldr	r3, [pc, #216]	; (81c94 <Modbus+0x2c4>)
   81bba:	4798      	blx	r3
		Putstr(buf);
   81bbc:	4621      	mov	r1, r4
   81bbe:	2067      	movs	r0, #103	; 0x67
   81bc0:	4b2e      	ldr	r3, [pc, #184]	; (81c7c <Modbus+0x2ac>)
   81bc2:	4798      	blx	r3
	}


	return 0;
}
   81bc4:	2000      	movs	r0, #0
   81bc6:	b003      	add	sp, #12
   81bc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81bcc:	b004      	add	sp, #16
   81bce:	4770      	bx	lr
			sprintf(buf,"Slave ADD:%x", (uint8_t)GetModuleAddr());
   81bd0:	2067      	movs	r0, #103	; 0x67
   81bd2:	4b37      	ldr	r3, [pc, #220]	; (81cb0 <Modbus+0x2e0>)
   81bd4:	4798      	blx	r3
   81bd6:	4c2d      	ldr	r4, [pc, #180]	; (81c8c <Modbus+0x2bc>)
   81bd8:	b2c2      	uxtb	r2, r0
   81bda:	4939      	ldr	r1, [pc, #228]	; (81cc0 <Modbus+0x2f0>)
   81bdc:	4620      	mov	r0, r4
   81bde:	4b2d      	ldr	r3, [pc, #180]	; (81c94 <Modbus+0x2c4>)
   81be0:	4798      	blx	r3
			LcdPutstr(buf, 3, 3);
   81be2:	2303      	movs	r3, #3
   81be4:	461a      	mov	r2, r3
   81be6:	4621      	mov	r1, r4
   81be8:	2068      	movs	r0, #104	; 0x68
   81bea:	4c33      	ldr	r4, [pc, #204]	; (81cb8 <Modbus+0x2e8>)
   81bec:	47a0      	blx	r4
   81bee:	e7d8      	b.n	81ba2 <Modbus+0x1d2>
		sc=rs485_GetBufPtr();
   81bf0:	2067      	movs	r0, #103	; 0x67
   81bf2:	4f24      	ldr	r7, [pc, #144]	; (81c84 <Modbus+0x2b4>)
   81bf4:	47b8      	blx	r7
   81bf6:	4605      	mov	r5, r0
   81bf8:	900c      	str	r0, [sp, #48]	; 0x30
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->moduleAddr=MODBUS_BROADCAST_ADDRESS),0xFFFF);
   81bfa:	207f      	movs	r0, #127	; 0x7f
   81bfc:	7028      	strb	r0, [r5, #0]
   81bfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81c02:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 81cc4 <Modbus+0x2f4>
   81c06:	47c0      	blx	r8
   81c08:	4c1d      	ldr	r4, [pc, #116]	; (81c80 <Modbus+0x2b0>)
   81c0a:	8120      	strh	r0, [r4, #8]
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->functionCode=NETWORK_ATTACH),modbus.crc);
   81c0c:	2064      	movs	r0, #100	; 0x64
   81c0e:	7068      	strb	r0, [r5, #1]
   81c10:	8921      	ldrh	r1, [r4, #8]
   81c12:	47c0      	blx	r8
   81c14:	8120      	strh	r0, [r4, #8]
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->attach_header.slaveID = 0),modbus.crc);
   81c16:	2600      	movs	r6, #0
   81c18:	70ae      	strb	r6, [r5, #2]
   81c1a:	8921      	ldrh	r1, [r4, #8]
   81c1c:	4630      	mov	r0, r6
   81c1e:	47c0      	blx	r8
   81c20:	8120      	strh	r0, [r4, #8]
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->attach_header.slaveSerialNumber=0),modbus.crc);
   81c22:	70ee      	strb	r6, [r5, #3]
   81c24:	8921      	ldrh	r1, [r4, #8]
   81c26:	4630      	mov	r0, r6
   81c28:	47c0      	blx	r8
   81c2a:	b283      	uxth	r3, r0
   81c2c:	8123      	strh	r3, [r4, #8]
		_pModbusTxFramePtr->attach_header.attach_crc = swap16(modbus.crc);
   81c2e:	0200      	lsls	r0, r0, #8
   81c30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   81c34:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   81c38:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   81c3c:	80a8      	strh	r0, [r5, #4]
		rs485_Send((modbus.frameLen = MODBUS_ATTACH_FRAME_LEN), 0);
   81c3e:	2106      	movs	r1, #6
   81c40:	8261      	strh	r1, [r4, #18]
   81c42:	4632      	mov	r2, r6
   81c44:	2066      	movs	r0, #102	; 0x66
   81c46:	47b8      	blx	r7
		if(!IsNetworkInit())
   81c48:	8823      	ldrh	r3, [r4, #0]
   81c4a:	f003 0316 	and.w	r3, r3, #22
   81c4e:	2b16      	cmp	r3, #22
   81c50:	d009      	beq.n	81c66 <Modbus+0x296>
			PushTask(Modbus, MODBUS_ATTACH, 0, 5000);
   81c52:	f241 3388 	movw	r3, #5000	; 0x1388
   81c56:	9300      	str	r3, [sp, #0]
   81c58:	4633      	mov	r3, r6
   81c5a:	22c9      	movs	r2, #201	; 0xc9
   81c5c:	490e      	ldr	r1, [pc, #56]	; (81c98 <Modbus+0x2c8>)
   81c5e:	2066      	movs	r0, #102	; 0x66
   81c60:	4c0e      	ldr	r4, [pc, #56]	; (81c9c <Modbus+0x2cc>)
   81c62:	47a0      	blx	r4
   81c64:	e7ae      	b.n	81bc4 <Modbus+0x1f4>
			PushTask(Modbus, SLAVE_SEND, 0, 0);
   81c66:	2300      	movs	r3, #0
   81c68:	9300      	str	r3, [sp, #0]
   81c6a:	2265      	movs	r2, #101	; 0x65
   81c6c:	490a      	ldr	r1, [pc, #40]	; (81c98 <Modbus+0x2c8>)
   81c6e:	2066      	movs	r0, #102	; 0x66
   81c70:	4c0a      	ldr	r4, [pc, #40]	; (81c9c <Modbus+0x2cc>)
   81c72:	47a0      	blx	r4
   81c74:	e7a6      	b.n	81bc4 <Modbus+0x1f4>
   81c76:	bf00      	nop
   81c78:	0008a1c8 	.word	0x0008a1c8
   81c7c:	000834ed 	.word	0x000834ed
   81c80:	20001a00 	.word	0x20001a00
   81c84:	00080b25 	.word	0x00080b25
   81c88:	0008a200 	.word	0x0008a200
   81c8c:	20001a18 	.word	0x20001a18
   81c90:	0008a22c 	.word	0x0008a22c
   81c94:	000851f5 	.word	0x000851f5
   81c98:	000819d1 	.word	0x000819d1
   81c9c:	00083881 	.word	0x00083881
   81ca0:	00080f15 	.word	0x00080f15
   81ca4:	00080ef1 	.word	0x00080ef1
   81ca8:	00081121 	.word	0x00081121
   81cac:	200019fc 	.word	0x200019fc
   81cb0:	00083f29 	.word	0x00083f29
   81cb4:	00089ffc 	.word	0x00089ffc
   81cb8:	00081579 	.word	0x00081579
   81cbc:	0008a014 	.word	0x0008a014
   81cc0:	0008a004 	.word	0x0008a004
   81cc4:	00080edd 	.word	0x00080edd
			if(IsRequestON() || IsMasterAsking())
   81cc8:	4bab      	ldr	r3, [pc, #684]	; (81f78 <Modbus+0x5a8>)
   81cca:	881b      	ldrh	r3, [r3, #0]
   81ccc:	f013 0f0c 	tst.w	r3, #12
   81cd0:	d144      	bne.n	81d5c <Modbus+0x38c>
				mBitsSet(modbus.status, ST_SLAVE_ASK);
   81cd2:	4ca9      	ldr	r4, [pc, #676]	; (81f78 <Modbus+0x5a8>)
   81cd4:	f043 0308 	orr.w	r3, r3, #8
   81cd8:	8023      	strh	r3, [r4, #0]
				sc=rs485_GetBufPtr();
   81cda:	2067      	movs	r0, #103	; 0x67
   81cdc:	4ba7      	ldr	r3, [pc, #668]	; (81f7c <Modbus+0x5ac>)
   81cde:	4798      	blx	r3
   81ce0:	4605      	mov	r5, r0
   81ce2:	900c      	str	r0, [sp, #48]	; 0x30
				modbus.crc=CRC16MODBUSbyte((modbus.destAddr = _pModbusTxFramePtr->moduleAddr=slaves[i]),0xFFFF);
   81ce4:	4ea6      	ldr	r6, [pc, #664]	; (81f80 <Modbus+0x5b0>)
   81ce6:	4fa7      	ldr	r7, [pc, #668]	; (81f84 <Modbus+0x5b4>)
   81ce8:	683b      	ldr	r3, [r7, #0]
   81cea:	f816 0023 	ldrb.w	r0, [r6, r3, lsl #2]
   81cee:	7028      	strb	r0, [r5, #0]
   81cf0:	7360      	strb	r0, [r4, #13]
   81cf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81cf6:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 81fc4 <Modbus+0x5f4>
   81cfa:	47c0      	blx	r8
   81cfc:	8120      	strh	r0, [r4, #8]
				modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->functionCode=SLAVE_SEND),modbus.crc);
   81cfe:	2065      	movs	r0, #101	; 0x65
   81d00:	7068      	strb	r0, [r5, #1]
   81d02:	8921      	ldrh	r1, [r4, #8]
   81d04:	47c0      	blx	r8
   81d06:	8120      	strh	r0, [r4, #8]
				modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->slaveSend_headers.slaveFunc=0x00),modbus.crc);
   81d08:	2000      	movs	r0, #0
   81d0a:	70a8      	strb	r0, [r5, #2]
   81d0c:	8921      	ldrh	r1, [r4, #8]
   81d0e:	47c0      	blx	r8
   81d10:	b282      	uxth	r2, r0
   81d12:	8122      	strh	r2, [r4, #8]
				_pModbusTxFramePtr->slaveSend_headers.slaveSend_crc = swap16(modbus.crc);
   81d14:	0200      	lsls	r0, r0, #8
   81d16:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   81d1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   81d1e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   81d22:	f8a5 3003 	strh.w	r3, [r5, #3]
				mBitsSet(modbus.status, ST_FRAME_ACK_REQ);
   81d26:	8823      	ldrh	r3, [r4, #0]
   81d28:	f043 0302 	orr.w	r3, r3, #2
   81d2c:	8023      	strh	r3, [r4, #0]
				if(slaves[i + 1] == NULL) 
   81d2e:	683b      	ldr	r3, [r7, #0]
   81d30:	3301      	adds	r3, #1
   81d32:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   81d36:	b1d2      	cbz	r2, 81d6e <Modbus+0x39e>
					i++;
   81d38:	4a92      	ldr	r2, [pc, #584]	; (81f84 <Modbus+0x5b4>)
   81d3a:	6013      	str	r3, [r2, #0]
				rs485_Send((modbus.frameLen = MODBUS_SLAVE_SEND_FRAME_LEN),IsAckReq());
   81d3c:	2105      	movs	r1, #5
   81d3e:	4b8e      	ldr	r3, [pc, #568]	; (81f78 <Modbus+0x5a8>)
   81d40:	8259      	strh	r1, [r3, #18]
   81d42:	2201      	movs	r2, #1
   81d44:	2066      	movs	r0, #102	; 0x66
   81d46:	4b8d      	ldr	r3, [pc, #564]	; (81f7c <Modbus+0x5ac>)
   81d48:	4798      	blx	r3
				PushTask(Modbus, MODBUS_SLAVE_SEND, 0, 100);
   81d4a:	2364      	movs	r3, #100	; 0x64
   81d4c:	9300      	str	r3, [sp, #0]
   81d4e:	2300      	movs	r3, #0
   81d50:	226e      	movs	r2, #110	; 0x6e
   81d52:	498d      	ldr	r1, [pc, #564]	; (81f88 <Modbus+0x5b8>)
   81d54:	2066      	movs	r0, #102	; 0x66
   81d56:	4c8d      	ldr	r4, [pc, #564]	; (81f8c <Modbus+0x5bc>)
   81d58:	47a0      	blx	r4
   81d5a:	e733      	b.n	81bc4 <Modbus+0x1f4>
				PushTask(Modbus, MODBUS_SLAVE_SEND, 0, 100);
   81d5c:	2364      	movs	r3, #100	; 0x64
   81d5e:	9300      	str	r3, [sp, #0]
   81d60:	2300      	movs	r3, #0
   81d62:	226e      	movs	r2, #110	; 0x6e
   81d64:	4988      	ldr	r1, [pc, #544]	; (81f88 <Modbus+0x5b8>)
   81d66:	2066      	movs	r0, #102	; 0x66
   81d68:	4c88      	ldr	r4, [pc, #544]	; (81f8c <Modbus+0x5bc>)
   81d6a:	47a0      	blx	r4
   81d6c:	e72a      	b.n	81bc4 <Modbus+0x1f4>
					i = 0;
   81d6e:	603a      	str	r2, [r7, #0]
   81d70:	e7e4      	b.n	81d3c <Modbus+0x36c>
			sprintf(buf, "\r\nSlave com: %x			Slave add:%x\r\n", _pModbusTxFramePtr->moduleAddr, modbus.moduleAddr);
   81d72:	f8df 9204 	ldr.w	r9, [pc, #516]	; 81f78 <Modbus+0x5a8>
   81d76:	4d86      	ldr	r5, [pc, #536]	; (81f90 <Modbus+0x5c0>)
   81d78:	f899 300c 	ldrb.w	r3, [r9, #12]
   81d7c:	f898 2000 	ldrb.w	r2, [r8]
   81d80:	4984      	ldr	r1, [pc, #528]	; (81f94 <Modbus+0x5c4>)
   81d82:	4628      	mov	r0, r5
   81d84:	4f84      	ldr	r7, [pc, #528]	; (81f98 <Modbus+0x5c8>)
   81d86:	47b8      	blx	r7
			Putstr(buf);
   81d88:	4629      	mov	r1, r5
   81d8a:	2067      	movs	r0, #103	; 0x67
   81d8c:	4e83      	ldr	r6, [pc, #524]	; (81f9c <Modbus+0x5cc>)
   81d8e:	47b0      	blx	r6
			sprintf(buf, "\r\nFunc: %x\r\n", _pModbusTxFramePtr->functionCode);
   81d90:	f898 2001 	ldrb.w	r2, [r8, #1]
   81d94:	4982      	ldr	r1, [pc, #520]	; (81fa0 <Modbus+0x5d0>)
   81d96:	4628      	mov	r0, r5
   81d98:	47b8      	blx	r7
			Putstr(buf);
   81d9a:	4629      	mov	r1, r5
   81d9c:	2067      	movs	r0, #103	; 0x67
   81d9e:	47b0      	blx	r6
			sprintf(buf, "\r\nIsAckReq: %d\r\n", IsAckReq());
   81da0:	f8b9 2000 	ldrh.w	r2, [r9]
   81da4:	f3c2 0240 	ubfx	r2, r2, #1, #1
   81da8:	497e      	ldr	r1, [pc, #504]	; (81fa4 <Modbus+0x5d4>)
   81daa:	4628      	mov	r0, r5
   81dac:	47b8      	blx	r7
			Putstr(buf);
   81dae:	4629      	mov	r1, r5
   81db0:	2067      	movs	r0, #103	; 0x67
   81db2:	47b0      	blx	r6
   81db4:	e6cf      	b.n	81b56 <Modbus+0x186>
		sc=rs485_GetBufPtr();
   81db6:	2067      	movs	r0, #103	; 0x67
   81db8:	4f70      	ldr	r7, [pc, #448]	; (81f7c <Modbus+0x5ac>)
   81dba:	47b8      	blx	r7
   81dbc:	4605      	mov	r5, r0
		modbus.crc = CRC16MODBUSbyte((modbus.destAddr = _pModbusTxFramePtr->moduleAddr = _slaveAddr), 0xFFFF);
   81dbe:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
   81dc2:	7006      	strb	r6, [r0, #0]
   81dc4:	4c6c      	ldr	r4, [pc, #432]	; (81f78 <Modbus+0x5a8>)
   81dc6:	7366      	strb	r6, [r4, #13]
   81dc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81dcc:	4630      	mov	r0, r6
   81dce:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 81fc4 <Modbus+0x5f4>
   81dd2:	47c0      	blx	r8
   81dd4:	8120      	strh	r0, [r4, #8]
		modbus.crc = CRC16MODBUSbyte((modbus.functionCode = _pModbusTxFramePtr->functionCode = READ_COILS), modbus.crc);
   81dd6:	2001      	movs	r0, #1
   81dd8:	7068      	strb	r0, [r5, #1]
   81dda:	72a0      	strb	r0, [r4, #10]
   81ddc:	8921      	ldrh	r1, [r4, #8]
   81dde:	47c0      	blx	r8
   81de0:	8120      	strh	r0, [r4, #8]
		modbus.crc = CRC16MODBUSword((modbus.startAddr = _pModbusTxFramePtr->readCoils_header.startingAddr = swap16(_startingAddr)), modbus.crc);
   81de2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   81de4:	0218      	lsls	r0, r3, #8
   81de6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   81dea:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   81dee:	4318      	orrs	r0, r3
   81df0:	8068      	strh	r0, [r5, #2]
   81df2:	81e0      	strh	r0, [r4, #14]
   81df4:	8921      	ldrh	r1, [r4, #8]
   81df6:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 81fc8 <Modbus+0x5f8>
   81dfa:	47c0      	blx	r8
   81dfc:	8120      	strh	r0, [r4, #8]
		modbus.crc = CRC16MODBUSword((modbus.regQty = _pModbusTxFramePtr->readCoils_header.coilsQty = swap16(_coilsQty)), modbus.crc);
   81dfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81e00:	0218      	lsls	r0, r3, #8
   81e02:	f3c3 2307 	ubfx	r3, r3, #8, #8
   81e06:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   81e0a:	4318      	orrs	r0, r3
   81e0c:	80a8      	strh	r0, [r5, #4]
   81e0e:	8220      	strh	r0, [r4, #16]
   81e10:	8921      	ldrh	r1, [r4, #8]
   81e12:	47c0      	blx	r8
   81e14:	b283      	uxth	r3, r0
   81e16:	8123      	strh	r3, [r4, #8]
		_pModbusTxFramePtr->readCoils_header.readCoils_crc = swap16(modbus.crc);
   81e18:	0200      	lsls	r0, r0, #8
   81e1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   81e1e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   81e22:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   81e26:	80e8      	strh	r0, [r5, #6]
		mBitsSet(modbus.status, ST_FRAME_ACK_REQ);
   81e28:	8823      	ldrh	r3, [r4, #0]
   81e2a:	f043 0302 	orr.w	r3, r3, #2
   81e2e:	8023      	strh	r3, [r4, #0]
		rs485_Send((modbus.frameLen = MODBUS_READ_COILS_FRAME_LEN),(_slaveAddr!=MODBUS_BROADCAST_ADDRESS));
   81e30:	2108      	movs	r1, #8
   81e32:	8261      	strh	r1, [r4, #18]
   81e34:	f1b6 027f 	subs.w	r2, r6, #127	; 0x7f
   81e38:	bf18      	it	ne
   81e3a:	2201      	movne	r2, #1
   81e3c:	2066      	movs	r0, #102	; 0x66
   81e3e:	47b8      	blx	r7
		break;
   81e40:	e6c0      	b.n	81bc4 <Modbus+0x1f4>
		sc=rs485_GetBufPtr();
   81e42:	2067      	movs	r0, #103	; 0x67
   81e44:	4f4d      	ldr	r7, [pc, #308]	; (81f7c <Modbus+0x5ac>)
   81e46:	47b8      	blx	r7
   81e48:	4605      	mov	r5, r0
		modbus.crc=CRC16MODBUSbyte((modbus.destAddr = _pModbusTxFramePtr->moduleAddr=_slaveAddr),0xFFFF);
   81e4a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
   81e4e:	7006      	strb	r6, [r0, #0]
   81e50:	4c49      	ldr	r4, [pc, #292]	; (81f78 <Modbus+0x5a8>)
   81e52:	7366      	strb	r6, [r4, #13]
   81e54:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81e58:	4630      	mov	r0, r6
   81e5a:	f8df 8168 	ldr.w	r8, [pc, #360]	; 81fc4 <Modbus+0x5f4>
   81e5e:	47c0      	blx	r8
   81e60:	8120      	strh	r0, [r4, #8]
		modbus.crc=CRC16MODBUSbyte((modbus.functionCode = _pModbusTxFramePtr->functionCode = WRITE_SINGLE_COIL), modbus.crc);
   81e62:	2005      	movs	r0, #5
   81e64:	7068      	strb	r0, [r5, #1]
   81e66:	72a0      	strb	r0, [r4, #10]
   81e68:	8921      	ldrh	r1, [r4, #8]
   81e6a:	47c0      	blx	r8
   81e6c:	8120      	strh	r0, [r4, #8]
		modbus.crc=CRC16MODBUSword((_modbusOutputAddr = _pModbusTxFramePtr->writeSingleCoil_header.outputAddr= swap16(_outputAddr)),modbus.crc);
   81e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   81e70:	0218      	lsls	r0, r3, #8
   81e72:	f3c3 2307 	ubfx	r3, r3, #8, #8
   81e76:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   81e7a:	4318      	orrs	r0, r3
   81e7c:	8068      	strh	r0, [r5, #2]
   81e7e:	81e0      	strh	r0, [r4, #14]
   81e80:	8921      	ldrh	r1, [r4, #8]
   81e82:	f8df 8144 	ldr.w	r8, [pc, #324]	; 81fc8 <Modbus+0x5f8>
   81e86:	47c0      	blx	r8
   81e88:	8120      	strh	r0, [r4, #8]
		modbus.crc=CRC16MODBUSword((_modbusOutputValue = _pModbusTxFramePtr->writeSingleCoil_header.outputValue=swap16(_outputValue)),modbus.crc);
   81e8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81e8c:	0218      	lsls	r0, r3, #8
   81e8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   81e92:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   81e96:	4318      	orrs	r0, r3
   81e98:	80a8      	strh	r0, [r5, #4]
   81e9a:	8220      	strh	r0, [r4, #16]
   81e9c:	8921      	ldrh	r1, [r4, #8]
   81e9e:	47c0      	blx	r8
   81ea0:	b283      	uxth	r3, r0
   81ea2:	8123      	strh	r3, [r4, #8]
		_pModbusTxFramePtr->writeSingleCoil_header.writeSingleCoil_crc=swap16(modbus.crc);
   81ea4:	0200      	lsls	r0, r0, #8
   81ea6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   81eaa:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   81eae:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   81eb2:	80e8      	strh	r0, [r5, #6]
		mBitsSet(modbus.status, ST_FRAME_ACK_REQ);
   81eb4:	8823      	ldrh	r3, [r4, #0]
   81eb6:	f043 0302 	orr.w	r3, r3, #2
   81eba:	8023      	strh	r3, [r4, #0]
		rs485_Send((modbus.frameLen = MODBUS_WRITE_SINGLE_COIL_FRAME_LEN),(_slaveAddr!=MODBUS_BROADCAST_ADDRESS));
   81ebc:	2108      	movs	r1, #8
   81ebe:	8261      	strh	r1, [r4, #18]
   81ec0:	f1b6 027f 	subs.w	r2, r6, #127	; 0x7f
   81ec4:	bf18      	it	ne
   81ec6:	2201      	movne	r2, #1
   81ec8:	2066      	movs	r0, #102	; 0x66
   81eca:	47b8      	blx	r7
		break;
   81ecc:	e67a      	b.n	81bc4 <Modbus+0x1f4>
	Putstr("\r\n\tPROCESS FRAME\r\n");
   81ece:	4936      	ldr	r1, [pc, #216]	; (81fa8 <Modbus+0x5d8>)
   81ed0:	2067      	movs	r0, #103	; 0x67
   81ed2:	4e32      	ldr	r6, [pc, #200]	; (81f9c <Modbus+0x5cc>)
   81ed4:	47b0      	blx	r6
		sprintf(buf, "\r\nIS MASTER: %d", IsMaster());
   81ed6:	4d28      	ldr	r5, [pc, #160]	; (81f78 <Modbus+0x5a8>)
   81ed8:	882a      	ldrh	r2, [r5, #0]
   81eda:	4c2d      	ldr	r4, [pc, #180]	; (81f90 <Modbus+0x5c0>)
   81edc:	f002 0201 	and.w	r2, r2, #1
   81ee0:	4932      	ldr	r1, [pc, #200]	; (81fac <Modbus+0x5dc>)
   81ee2:	4620      	mov	r0, r4
   81ee4:	4b2c      	ldr	r3, [pc, #176]	; (81f98 <Modbus+0x5c8>)
   81ee6:	4798      	blx	r3
		Putstr(buf);
   81ee8:	4621      	mov	r1, r4
   81eea:	2067      	movs	r0, #103	; 0x67
   81eec:	47b0      	blx	r6
		if(IsMaster())
   81eee:	882b      	ldrh	r3, [r5, #0]
   81ef0:	f013 0f01 	tst.w	r3, #1
   81ef4:	f000 80b4 	beq.w	82060 <Modbus+0x690>
			Putstr("\r\n\tIs MASTER\r\n");
   81ef8:	492d      	ldr	r1, [pc, #180]	; (81fb0 <Modbus+0x5e0>)
   81efa:	2067      	movs	r0, #103	; 0x67
   81efc:	47b0      	blx	r6
			sprintf(buf, "\r\n\tACK REQUIRED: %d\r\n", IsAckReq());
   81efe:	882a      	ldrh	r2, [r5, #0]
   81f00:	f3c2 0240 	ubfx	r2, r2, #1, #1
   81f04:	492b      	ldr	r1, [pc, #172]	; (81fb4 <Modbus+0x5e4>)
   81f06:	4620      	mov	r0, r4
   81f08:	4b23      	ldr	r3, [pc, #140]	; (81f98 <Modbus+0x5c8>)
   81f0a:	4798      	blx	r3
			Putstr(buf);
   81f0c:	4621      	mov	r1, r4
   81f0e:	2067      	movs	r0, #103	; 0x67
   81f10:	47b0      	blx	r6
			if(IsAckReq())
   81f12:	882b      	ldrh	r3, [r5, #0]
   81f14:	f013 0f02 	tst.w	r3, #2
   81f18:	f43f ae54 	beq.w	81bc4 <Modbus+0x1f4>
				sc=rs485_GetBufPtr();
   81f1c:	2067      	movs	r0, #103	; 0x67
   81f1e:	4b17      	ldr	r3, [pc, #92]	; (81f7c <Modbus+0x5ac>)
   81f20:	4798      	blx	r3
   81f22:	4605      	mov	r5, r0
   81f24:	900c      	str	r0, [sp, #48]	; 0x30
				switch(_pModbusRxFramePtr->functionCode)
   81f26:	7841      	ldrb	r1, [r0, #1]
   81f28:	2905      	cmp	r1, #5
   81f2a:	d04f      	beq.n	81fcc <Modbus+0x5fc>
   81f2c:	d918      	bls.n	81f60 <Modbus+0x590>
   81f2e:	2964      	cmp	r1, #100	; 0x64
   81f30:	d056      	beq.n	81fe0 <Modbus+0x610>
   81f32:	2965      	cmp	r1, #101	; 0x65
   81f34:	f040 8090 	bne.w	82058 <Modbus+0x688>
				sprintf(buf, "\r\nJE DEMANDE LA FONCTION: %X \r\n", _pModbusRxFramePtr->slaveSend_headers.slaveFunc);
   81f38:	7882      	ldrb	r2, [r0, #2]
   81f3a:	491f      	ldr	r1, [pc, #124]	; (81fb8 <Modbus+0x5e8>)
   81f3c:	4814      	ldr	r0, [pc, #80]	; (81f90 <Modbus+0x5c0>)
   81f3e:	4b16      	ldr	r3, [pc, #88]	; (81f98 <Modbus+0x5c8>)
   81f40:	4798      	blx	r3
				Putstr(buf);
   81f42:	4621      	mov	r1, r4
   81f44:	2067      	movs	r0, #103	; 0x67
   81f46:	4b15      	ldr	r3, [pc, #84]	; (81f9c <Modbus+0x5cc>)
   81f48:	4798      	blx	r3
					switch(_pModbusRxFramePtr->slaveSend_headers.slaveFunc)
   81f4a:	78a9      	ldrb	r1, [r5, #2]
   81f4c:	2901      	cmp	r1, #1
   81f4e:	d054      	beq.n	81ffa <Modbus+0x62a>
   81f50:	2900      	cmp	r1, #0
   81f52:	d077      	beq.n	82044 <Modbus+0x674>
   81f54:	2905      	cmp	r1, #5
   81f56:	d065      	beq.n	82024 <Modbus+0x654>
						Error(ERROR_MODBUS_PROCESS_ACK_FRAME_SLAVE_SEND_BAD_SC, _pModbusRxFramePtr->slaveSend_headers.slaveFunc);
   81f58:	2047      	movs	r0, #71	; 0x47
   81f5a:	4b18      	ldr	r3, [pc, #96]	; (81fbc <Modbus+0x5ec>)
   81f5c:	4798      	blx	r3
   81f5e:	e05b      	b.n	82018 <Modbus+0x648>
				switch(_pModbusRxFramePtr->functionCode)
   81f60:	2901      	cmp	r1, #1
   81f62:	d179      	bne.n	82058 <Modbus+0x688>
					mBitsClr(modbus.status, ST_REQEST);
   81f64:	4a04      	ldr	r2, [pc, #16]	; (81f78 <Modbus+0x5a8>)
   81f66:	8813      	ldrh	r3, [r2, #0]
   81f68:	f023 0304 	bic.w	r3, r3, #4
   81f6c:	8013      	strh	r3, [r2, #0]
					Putstr("\r\n\tREAD_COILS_ACK_OK\r\n");
   81f6e:	4914      	ldr	r1, [pc, #80]	; (81fc0 <Modbus+0x5f0>)
   81f70:	2067      	movs	r0, #103	; 0x67
   81f72:	4b0a      	ldr	r3, [pc, #40]	; (81f9c <Modbus+0x5cc>)
   81f74:	4798      	blx	r3
					break;
   81f76:	e625      	b.n	81bc4 <Modbus+0x1f4>
   81f78:	20001a00 	.word	0x20001a00
   81f7c:	00080b25 	.word	0x00080b25
   81f80:	0008a280 	.word	0x0008a280
   81f84:	200019fc 	.word	0x200019fc
   81f88:	000819d1 	.word	0x000819d1
   81f8c:	00083881 	.word	0x00083881
   81f90:	20001a18 	.word	0x20001a18
   81f94:	0008a02c 	.word	0x0008a02c
   81f98:	000851f5 	.word	0x000851f5
   81f9c:	000834ed 	.word	0x000834ed
   81fa0:	0008a050 	.word	0x0008a050
   81fa4:	0008a060 	.word	0x0008a060
   81fa8:	0008a074 	.word	0x0008a074
   81fac:	0008a088 	.word	0x0008a088
   81fb0:	0008a098 	.word	0x0008a098
   81fb4:	0008a0a8 	.word	0x0008a0a8
   81fb8:	0008a110 	.word	0x0008a110
   81fbc:	00080f15 	.word	0x00080f15
   81fc0:	0008a0e0 	.word	0x0008a0e0
   81fc4:	00080edd 	.word	0x00080edd
   81fc8:	00080ef1 	.word	0x00080ef1
					mBitsClr(modbus.status, ST_REQEST);
   81fcc:	4aa3      	ldr	r2, [pc, #652]	; (8225c <Modbus+0x88c>)
   81fce:	8813      	ldrh	r3, [r2, #0]
   81fd0:	f023 0304 	bic.w	r3, r3, #4
   81fd4:	8013      	strh	r3, [r2, #0]
					Putstr("\r\n\tWRITE_SINGLE_COIL_ACK_OK\r\n");
   81fd6:	49a2      	ldr	r1, [pc, #648]	; (82260 <Modbus+0x890>)
   81fd8:	2067      	movs	r0, #103	; 0x67
   81fda:	4ba2      	ldr	r3, [pc, #648]	; (82264 <Modbus+0x894>)
   81fdc:	4798      	blx	r3
					break;
   81fde:	e5f1      	b.n	81bc4 <Modbus+0x1f4>
					sprintf(buf, "\r\n\tNew slave ID: %X\r\n", _pModbusRxFramePtr->attach_header.slaveID);
   81fe0:	7882      	ldrb	r2, [r0, #2]
   81fe2:	49a1      	ldr	r1, [pc, #644]	; (82268 <Modbus+0x898>)
   81fe4:	48a1      	ldr	r0, [pc, #644]	; (8226c <Modbus+0x89c>)
   81fe6:	4ba2      	ldr	r3, [pc, #648]	; (82270 <Modbus+0x8a0>)
   81fe8:	4798      	blx	r3
					Putstr(buf);
   81fea:	4621      	mov	r1, r4
   81fec:	2067      	movs	r0, #103	; 0x67
   81fee:	4b9d      	ldr	r3, [pc, #628]	; (82264 <Modbus+0x894>)
   81ff0:	4798      	blx	r3
					ComRS485(_COMRS485_FLUSH);
   81ff2:	2002      	movs	r0, #2
   81ff4:	4b9f      	ldr	r3, [pc, #636]	; (82274 <Modbus+0x8a4>)
   81ff6:	4798      	blx	r3
					break;
   81ff8:	e5e4      	b.n	81bc4 <Modbus+0x1f4>
						Putstr("\r\n\tSLAVE REQ: READ COILS\r\n");
   81ffa:	499f      	ldr	r1, [pc, #636]	; (82278 <Modbus+0x8a8>)
   81ffc:	2067      	movs	r0, #103	; 0x67
   81ffe:	4b99      	ldr	r3, [pc, #612]	; (82264 <Modbus+0x894>)
   82000:	4798      	blx	r3
						mBitsSet(modbus.status, ST_REQEST);
   82002:	4996      	ldr	r1, [pc, #600]	; (8225c <Modbus+0x88c>)
   82004:	880b      	ldrh	r3, [r1, #0]
   82006:	f043 0304 	orr.w	r3, r3, #4
   8200a:	800b      	strh	r3, [r1, #0]
						ReadCoils(modbus.destAddr, 0x01, 1);
   8200c:	2301      	movs	r3, #1
   8200e:	461a      	mov	r2, r3
   82010:	7b49      	ldrb	r1, [r1, #13]
   82012:	2068      	movs	r0, #104	; 0x68
   82014:	f7ff fcdc 	bl	819d0 <Modbus>
					mBitsClr(modbus.status, ST_SLAVE_ASK);
   82018:	4a90      	ldr	r2, [pc, #576]	; (8225c <Modbus+0x88c>)
   8201a:	8813      	ldrh	r3, [r2, #0]
   8201c:	f023 0308 	bic.w	r3, r3, #8
   82020:	8013      	strh	r3, [r2, #0]
					break;
   82022:	e5cf      	b.n	81bc4 <Modbus+0x1f4>
						Putstr("\r\n\tSLAVE REQ: WRITE SINGLE COILS\r\n");
   82024:	4995      	ldr	r1, [pc, #596]	; (8227c <Modbus+0x8ac>)
   82026:	2067      	movs	r0, #103	; 0x67
   82028:	4b8e      	ldr	r3, [pc, #568]	; (82264 <Modbus+0x894>)
   8202a:	4798      	blx	r3
						mBitsSet(modbus.status, ST_REQEST);
   8202c:	498b      	ldr	r1, [pc, #556]	; (8225c <Modbus+0x88c>)
   8202e:	880b      	ldrh	r3, [r1, #0]
   82030:	f043 0304 	orr.w	r3, r3, #4
   82034:	800b      	strh	r3, [r1, #0]
						WriteSingleCoil(modbus.destAddr, 0x01, 0x01);
   82036:	2301      	movs	r3, #1
   82038:	461a      	mov	r2, r3
   8203a:	7b49      	ldrb	r1, [r1, #13]
   8203c:	2067      	movs	r0, #103	; 0x67
   8203e:	f7ff fcc7 	bl	819d0 <Modbus>
						break;
   82042:	e7e9      	b.n	82018 <Modbus+0x648>
						Putstr("\r\n\t NO REQUEST");
   82044:	498e      	ldr	r1, [pc, #568]	; (82280 <Modbus+0x8b0>)
   82046:	2067      	movs	r0, #103	; 0x67
   82048:	4b86      	ldr	r3, [pc, #536]	; (82264 <Modbus+0x894>)
   8204a:	4798      	blx	r3
						mBitsClr(modbus.status, ST_FRAME_ACK_REQ);	
   8204c:	4a83      	ldr	r2, [pc, #524]	; (8225c <Modbus+0x88c>)
   8204e:	8813      	ldrh	r3, [r2, #0]
   82050:	f023 0302 	bic.w	r3, r3, #2
   82054:	8013      	strh	r3, [r2, #0]
						break;
   82056:	e7df      	b.n	82018 <Modbus+0x648>
					Error(ERROR_MODBUS_PROCESS_ACK_FRAME_SWITCH_BAD_SC, _pModbusRxFramePtr->functionCode);
   82058:	2012      	movs	r0, #18
   8205a:	4b8a      	ldr	r3, [pc, #552]	; (82284 <Modbus+0x8b4>)
   8205c:	4798      	blx	r3
   8205e:	e5b1      	b.n	81bc4 <Modbus+0x1f4>
			sc=rs485_GetBufPtr();
   82060:	2067      	movs	r0, #103	; 0x67
   82062:	4b84      	ldr	r3, [pc, #528]	; (82274 <Modbus+0x8a4>)
   82064:	4798      	blx	r3
   82066:	4605      	mov	r5, r0
   82068:	900c      	str	r0, [sp, #48]	; 0x30
			if((_pModbusRxFramePtr->moduleAddr!=modbus.moduleAddr)&&(_pModbusRxFramePtr->moduleAddr!=MODBUS_BROADCAST_ADDRESS))
   8206a:	4607      	mov	r7, r0
   8206c:	7802      	ldrb	r2, [r0, #0]
   8206e:	4b7b      	ldr	r3, [pc, #492]	; (8225c <Modbus+0x88c>)
   82070:	7b1b      	ldrb	r3, [r3, #12]
   82072:	429a      	cmp	r2, r3
   82074:	d001      	beq.n	8207a <Modbus+0x6aa>
   82076:	2a7f      	cmp	r2, #127	; 0x7f
   82078:	d12d      	bne.n	820d6 <Modbus+0x706>
			sprintf(buf, "\r\nSlave com: %x			Slave add:%x\r\n", _pModbusRxFramePtr->moduleAddr, modbus.moduleAddr);
   8207a:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8226c <Modbus+0x89c>
   8207e:	4982      	ldr	r1, [pc, #520]	; (82288 <Modbus+0x8b8>)
   82080:	4648      	mov	r0, r9
   82082:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 82270 <Modbus+0x8a0>
   82086:	47c0      	blx	r8
			Putstr(buf);
   82088:	4621      	mov	r1, r4
   8208a:	2067      	movs	r0, #103	; 0x67
   8208c:	4e75      	ldr	r6, [pc, #468]	; (82264 <Modbus+0x894>)
   8208e:	47b0      	blx	r6
			sprintf(buf, "\r\nFunc: %x\r\n", _pModbusRxFramePtr->functionCode);
   82090:	786a      	ldrb	r2, [r5, #1]
   82092:	497e      	ldr	r1, [pc, #504]	; (8228c <Modbus+0x8bc>)
   82094:	4648      	mov	r0, r9
   82096:	47c0      	blx	r8
			Putstr(buf);
   82098:	4621      	mov	r1, r4
   8209a:	2067      	movs	r0, #103	; 0x67
   8209c:	47b0      	blx	r6
			if(_pModbusRxFramePtr->moduleAddr!=MODBUS_BROADCAST_ADDRESS) mBitsSet(modbus.status,ST_FRAME_ACK_REQ);
   8209e:	782b      	ldrb	r3, [r5, #0]
   820a0:	2b7f      	cmp	r3, #127	; 0x7f
   820a2:	d004      	beq.n	820ae <Modbus+0x6de>
   820a4:	4a6d      	ldr	r2, [pc, #436]	; (8225c <Modbus+0x88c>)
   820a6:	8813      	ldrh	r3, [r2, #0]
   820a8:	f043 0302 	orr.w	r3, r3, #2
   820ac:	8013      	strh	r3, [r2, #0]
			switch(_pModbusRxFramePtr->functionCode)
   820ae:	786b      	ldrb	r3, [r5, #1]
   820b0:	2b05      	cmp	r3, #5
   820b2:	f000 80a0 	beq.w	821f6 <Modbus+0x826>
   820b6:	d917      	bls.n	820e8 <Modbus+0x718>
   820b8:	2b64      	cmp	r3, #100	; 0x64
   820ba:	d071      	beq.n	821a0 <Modbus+0x7d0>
   820bc:	2b65      	cmp	r3, #101	; 0x65
   820be:	d073      	beq.n	821a8 <Modbus+0x7d8>
   820c0:	2b10      	cmp	r3, #16
   820c2:	d018      	beq.n	820f6 <Modbus+0x726>
				PushTask(Modbus,_MODBUS_RETURN_ERROR_CODE,1,0);
   820c4:	2300      	movs	r3, #0
   820c6:	9300      	str	r3, [sp, #0]
   820c8:	2301      	movs	r3, #1
   820ca:	2204      	movs	r2, #4
   820cc:	4970      	ldr	r1, [pc, #448]	; (82290 <Modbus+0x8c0>)
   820ce:	2066      	movs	r0, #102	; 0x66
   820d0:	4c70      	ldr	r4, [pc, #448]	; (82294 <Modbus+0x8c4>)
   820d2:	47a0      	blx	r4
				break;
   820d4:	e576      	b.n	81bc4 <Modbus+0x1f4>
				sprintf(buf, "\r\nSlave com: %x			Slave add:%x\r\n", _pModbusRxFramePtr->moduleAddr, modbus.moduleAddr);
   820d6:	496c      	ldr	r1, [pc, #432]	; (82288 <Modbus+0x8b8>)
   820d8:	4864      	ldr	r0, [pc, #400]	; (8226c <Modbus+0x89c>)
   820da:	4d65      	ldr	r5, [pc, #404]	; (82270 <Modbus+0x8a0>)
   820dc:	47a8      	blx	r5
				Putstr(buf);
   820de:	4621      	mov	r1, r4
   820e0:	2067      	movs	r0, #103	; 0x67
   820e2:	4b60      	ldr	r3, [pc, #384]	; (82264 <Modbus+0x894>)
   820e4:	4798      	blx	r3
				return 0;
   820e6:	e56d      	b.n	81bc4 <Modbus+0x1f4>
			switch(_pModbusRxFramePtr->functionCode)
   820e8:	2b01      	cmp	r3, #1
   820ea:	f000 80aa 	beq.w	82242 <Modbus+0x872>
   820ee:	2b03      	cmp	r3, #3
   820f0:	f43f ad68 	beq.w	81bc4 <Modbus+0x1f4>
   820f4:	e7e6      	b.n	820c4 <Modbus+0x6f4>
				switch(swap16(_pModbusRxFramePtr->writeMultipleRegister_header.startingAddr))
   820f6:	78ab      	ldrb	r3, [r5, #2]
   820f8:	2b10      	cmp	r3, #16
   820fa:	d148      	bne.n	8218e <Modbus+0x7be>
					if((_pModbusRxFramePtr->writeMultipleRegister_header.startingAddr == modbus.startAddr) &&
   820fc:	4a57      	ldr	r2, [pc, #348]	; (8225c <Modbus+0x88c>)
   820fe:	89d2      	ldrh	r2, [r2, #14]
   82100:	429a      	cmp	r2, r3
   82102:	d033      	beq.n	8216c <Modbus+0x79c>
					while ((RTC->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   82104:	4a64      	ldr	r2, [pc, #400]	; (82298 <Modbus+0x8c8>)
   82106:	6993      	ldr	r3, [r2, #24]
   82108:	f013 0f04 	tst.w	r3, #4
   8210c:	d0fb      	beq.n	82106 <Modbus+0x736>
					RTC->RTC_CR |= (RTC_CR_UPDTIM | RTC_CR_UPDCAL) ;
   8210e:	4a62      	ldr	r2, [pc, #392]	; (82298 <Modbus+0x8c8>)
   82110:	6813      	ldr	r3, [r2, #0]
   82112:	f043 0303 	orr.w	r3, r3, #3
   82116:	6013      	str	r3, [r2, #0]
					while ((RTC->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   82118:	6993      	ldr	r3, [r2, #24]
   8211a:	f013 0f01 	tst.w	r3, #1
   8211e:	d0fb      	beq.n	82118 <Modbus+0x748>
					RTC->RTC_SCCR = RTC_SCCR_ACKCLR;
   82120:	4a5d      	ldr	r2, [pc, #372]	; (82298 <Modbus+0x8c8>)
   82122:	2301      	movs	r3, #1
   82124:	61d3      	str	r3, [r2, #28]
					_pModbusRxFramePtr->writeMultipleRegister_header.dataField[0]=swap16(_pModbusRxFramePtr->writeMultipleRegister_header.dataField[0]);
   82126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   82128:	88d8      	ldrh	r0, [r3, #6]
   8212a:	0201      	lsls	r1, r0, #8
   8212c:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
   82130:	80d9      	strh	r1, [r3, #6]
					_pModbusRxFramePtr->writeMultipleRegister_header.dataField[1]=swap16(_pModbusRxFramePtr->writeMultipleRegister_header.dataField[1]);
   82132:	8918      	ldrh	r0, [r3, #8]
   82134:	0201      	lsls	r1, r0, #8
   82136:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
   8213a:	8119      	strh	r1, [r3, #8]
					_pModbusRxFramePtr->writeMultipleRegister_header.dataField[2]=swap16(_pModbusRxFramePtr->writeMultipleRegister_header.dataField[2]);
   8213c:	8958      	ldrh	r0, [r3, #10]
   8213e:	0201      	lsls	r1, r0, #8
   82140:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
   82144:	8159      	strh	r1, [r3, #10]
					_pModbusRxFramePtr->writeMultipleRegister_header.dataField[3]=swap16(_pModbusRxFramePtr->writeMultipleRegister_header.dataField[3]);
   82146:	8998      	ldrh	r0, [r3, #12]
   82148:	0201      	lsls	r1, r0, #8
   8214a:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
   8214e:	8199      	strh	r1, [r3, #12]
					*registerMap[0]=*(uint32_t*)&_pModbusRxFramePtr->writeMultipleRegister_header.dataField[0];
   82150:	f8d3 1006 	ldr.w	r1, [r3, #6]
   82154:	4b51      	ldr	r3, [pc, #324]	; (8229c <Modbus+0x8cc>)
   82156:	6019      	str	r1, [r3, #0]
					*registerMap[1]=*(uint32_t*)&_pModbusRxFramePtr->writeMultipleRegister_header.dataField[2];
   82158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8215a:	f8d3 100a 	ldr.w	r1, [r3, #10]
   8215e:	4b50      	ldr	r3, [pc, #320]	; (822a0 <Modbus+0x8d0>)
   82160:	6019      	str	r1, [r3, #0]
					RTC->RTC_CR &= ((~RTC_CR_UPDTIM)&(~RTC_CR_UPDCAL));
   82162:	6813      	ldr	r3, [r2, #0]
   82164:	f023 0303 	bic.w	r3, r3, #3
   82168:	6013      	str	r3, [r2, #0]
   8216a:	e52b      	b.n	81bc4 <Modbus+0x1f4>
						((_pModbusRxFramePtr->writeMultipleRegister_header.startingAddr + _pModbusRxFramePtr->writeMultipleRegister_header.registerQty) >= modbus.startAddr + modbus.regQty))
   8216c:	f8b7 1003 	ldrh.w	r1, [r7, #3]
   82170:	4419      	add	r1, r3
   82172:	4a3a      	ldr	r2, [pc, #232]	; (8225c <Modbus+0x88c>)
   82174:	8a12      	ldrh	r2, [r2, #16]
   82176:	4413      	add	r3, r2
					if((_pModbusRxFramePtr->writeMultipleRegister_header.startingAddr == modbus.startAddr) &&
   82178:	4299      	cmp	r1, r3
   8217a:	dbc3      	blt.n	82104 <Modbus+0x734>
						PushTask(Modbus,_MODBUS_RETURN_ERROR_CODE,2,0);
   8217c:	2300      	movs	r3, #0
   8217e:	9300      	str	r3, [sp, #0]
   82180:	2302      	movs	r3, #2
   82182:	2204      	movs	r2, #4
   82184:	4942      	ldr	r1, [pc, #264]	; (82290 <Modbus+0x8c0>)
   82186:	2066      	movs	r0, #102	; 0x66
   82188:	4c42      	ldr	r4, [pc, #264]	; (82294 <Modbus+0x8c4>)
   8218a:	47a0      	blx	r4
						return 0;
   8218c:	e51a      	b.n	81bc4 <Modbus+0x1f4>
					PushTask(Modbus,_MODBUS_RETURN_ERROR_CODE,2,0);
   8218e:	2300      	movs	r3, #0
   82190:	9300      	str	r3, [sp, #0]
   82192:	2302      	movs	r3, #2
   82194:	2204      	movs	r2, #4
   82196:	493e      	ldr	r1, [pc, #248]	; (82290 <Modbus+0x8c0>)
   82198:	2066      	movs	r0, #102	; 0x66
   8219a:	4c3e      	ldr	r4, [pc, #248]	; (82294 <Modbus+0x8c4>)
   8219c:	47a0      	blx	r4
					break;
   8219e:	e511      	b.n	81bc4 <Modbus+0x1f4>
				Modbus(_MODBUS_TIMER);
   821a0:	2008      	movs	r0, #8
   821a2:	f7ff fc15 	bl	819d0 <Modbus>
				break;
   821a6:	e50d      	b.n	81bc4 <Modbus+0x1f4>
				modbus.crc=CRC16MODBUSbyte((_pModbusRxFramePtr->moduleAddr=0x00),0xFFFF);
   821a8:	2600      	movs	r6, #0
   821aa:	702e      	strb	r6, [r5, #0]
   821ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
   821b0:	4630      	mov	r0, r6
   821b2:	4f3c      	ldr	r7, [pc, #240]	; (822a4 <Modbus+0x8d4>)
   821b4:	47b8      	blx	r7
   821b6:	4c29      	ldr	r4, [pc, #164]	; (8225c <Modbus+0x88c>)
   821b8:	8120      	strh	r0, [r4, #8]
				modbus.crc=CRC16MODBUSbyte((_pModbusRxFramePtr->functionCode=SLAVE_SEND),modbus.crc);
   821ba:	2065      	movs	r0, #101	; 0x65
   821bc:	7068      	strb	r0, [r5, #1]
   821be:	8921      	ldrh	r1, [r4, #8]
   821c0:	47b8      	blx	r7
   821c2:	8120      	strh	r0, [r4, #8]
				modbus.crc=CRC16MODBUSbyte((_pModbusRxFramePtr->slaveSend_headers.slaveFunc=ServicesBufferPop()),modbus.crc);
   821c4:	2067      	movs	r0, #103	; 0x67
   821c6:	4b38      	ldr	r3, [pc, #224]	; (822a8 <Modbus+0x8d8>)
   821c8:	4798      	blx	r3
   821ca:	b2c0      	uxtb	r0, r0
   821cc:	70a8      	strb	r0, [r5, #2]
   821ce:	8921      	ldrh	r1, [r4, #8]
   821d0:	47b8      	blx	r7
   821d2:	b282      	uxth	r2, r0
   821d4:	8122      	strh	r2, [r4, #8]
				_pModbusRxFramePtr->slaveSend_headers.slaveSend_crc = swap16(modbus.crc);
   821d6:	0203      	lsls	r3, r0, #8
   821d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   821dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   821e0:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   821e4:	f8a5 3003 	strh.w	r3, [r5, #3]
				rs485_Send((modbus.frameLen = MODBUS_SLAVE_SEND_FRAME_LEN), 0);
   821e8:	2105      	movs	r1, #5
   821ea:	8261      	strh	r1, [r4, #18]
   821ec:	4632      	mov	r2, r6
   821ee:	2066      	movs	r0, #102	; 0x66
   821f0:	4b20      	ldr	r3, [pc, #128]	; (82274 <Modbus+0x8a4>)
   821f2:	4798      	blx	r3
				break;
   821f4:	e4e6      	b.n	81bc4 <Modbus+0x1f4>
				gpio_toggle_pin(CMD_MOT_SERRURE);
   821f6:	2021      	movs	r0, #33	; 0x21
   821f8:	4b2c      	ldr	r3, [pc, #176]	; (822ac <Modbus+0x8dc>)
   821fa:	4798      	blx	r3
				swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputAddr), swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputValue));
   821fc:	887a      	ldrh	r2, [r7, #2]
   821fe:	88b8      	ldrh	r0, [r7, #4]
   82200:	0213      	lsls	r3, r2, #8
   82202:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
				sprintf(buf, "\r\nWRITE SINGLE COIL\r\nFunctionCode: %X\r\nOUTPUT ADDR: %X OUTPUT VALUE: %X",_pModbusRxFramePtr->functionCode, 
   82206:	786a      	ldrb	r2, [r5, #1]
				swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputAddr), swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputValue));
   82208:	0201      	lsls	r1, r0, #8
   8220a:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
				sprintf(buf, "\r\nWRITE SINGLE COIL\r\nFunctionCode: %X\r\nOUTPUT ADDR: %X OUTPUT VALUE: %X",_pModbusRxFramePtr->functionCode, 
   8220e:	b289      	uxth	r1, r1
   82210:	9100      	str	r1, [sp, #0]
   82212:	b29b      	uxth	r3, r3
   82214:	4926      	ldr	r1, [pc, #152]	; (822b0 <Modbus+0x8e0>)
   82216:	4815      	ldr	r0, [pc, #84]	; (8226c <Modbus+0x89c>)
   82218:	4e15      	ldr	r6, [pc, #84]	; (82270 <Modbus+0x8a0>)
   8221a:	47b0      	blx	r6
				Putstr(buf);
   8221c:	4621      	mov	r1, r4
   8221e:	2067      	movs	r0, #103	; 0x67
   82220:	4b10      	ldr	r3, [pc, #64]	; (82264 <Modbus+0x894>)
   82222:	4798      	blx	r3
				WriteSingleCoilAck(_pModbusRxFramePtr->functionCode, swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputAddr), swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputValue));
   82224:	8879      	ldrh	r1, [r7, #2]
   82226:	88ba      	ldrh	r2, [r7, #4]
   82228:	0213      	lsls	r3, r2, #8
   8222a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   8222e:	020a      	lsls	r2, r1, #8
   82230:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   82234:	b29b      	uxth	r3, r3
   82236:	b292      	uxth	r2, r2
   82238:	7869      	ldrb	r1, [r5, #1]
   8223a:	2005      	movs	r0, #5
   8223c:	f7ff fbc8 	bl	819d0 <Modbus>
				break;
   82240:	e4c0      	b.n	81bc4 <Modbus+0x1f4>
				gpio_toggle_pin(CMD_MOSFET);
   82242:	2020      	movs	r0, #32
   82244:	4b19      	ldr	r3, [pc, #100]	; (822ac <Modbus+0x8dc>)
   82246:	4798      	blx	r3
				Putstr(buf);
   82248:	4621      	mov	r1, r4
   8224a:	2067      	movs	r0, #103	; 0x67
   8224c:	4b05      	ldr	r3, [pc, #20]	; (82264 <Modbus+0x894>)
   8224e:	4798      	blx	r3
				ReadCoilsAck(1,1);
   82250:	2201      	movs	r2, #1
   82252:	4611      	mov	r1, r2
   82254:	2007      	movs	r0, #7
   82256:	f7ff fbbb 	bl	819d0 <Modbus>
				break;
   8225a:	e4b3      	b.n	81bc4 <Modbus+0x1f4>
   8225c:	20001a00 	.word	0x20001a00
   82260:	0008a0c0 	.word	0x0008a0c0
   82264:	000834ed 	.word	0x000834ed
   82268:	0008a0f8 	.word	0x0008a0f8
   8226c:	20001a18 	.word	0x20001a18
   82270:	000851f5 	.word	0x000851f5
   82274:	00080b25 	.word	0x00080b25
   82278:	0008a130 	.word	0x0008a130
   8227c:	0008a14c 	.word	0x0008a14c
   82280:	0008a170 	.word	0x0008a170
   82284:	00080f15 	.word	0x00080f15
   82288:	0008a02c 	.word	0x0008a02c
   8228c:	0008a050 	.word	0x0008a050
   82290:	000819d1 	.word	0x000819d1
   82294:	00083881 	.word	0x00083881
   82298:	400e1260 	.word	0x400e1260
   8229c:	400e1268 	.word	0x400e1268
   822a0:	400e126c 	.word	0x400e126c
   822a4:	00080edd 	.word	0x00080edd
   822a8:	00081121 	.word	0x00081121
   822ac:	0008428f 	.word	0x0008428f
   822b0:	0008a180 	.word	0x0008a180
		sc=rs485_GetBufPtr();
   822b4:	2067      	movs	r0, #103	; 0x67
   822b6:	4f37      	ldr	r7, [pc, #220]	; (82394 <Modbus+0x9c4>)
   822b8:	47b8      	blx	r7
   822ba:	4604      	mov	r4, r0
		modbus.crc=CRC16MODBUSbyte(_pModbusTxFramePtr->moduleAddr,0xFFFF);
   822bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   822c0:	7800      	ldrb	r0, [r0, #0]
   822c2:	4e35      	ldr	r6, [pc, #212]	; (82398 <Modbus+0x9c8>)
   822c4:	47b0      	blx	r6
   822c6:	4d35      	ldr	r5, [pc, #212]	; (8239c <Modbus+0x9cc>)
   822c8:	8128      	strh	r0, [r5, #8]
		modbus.crc=CRC16MODBUSbyte(_pModbusTxFramePtr->functionCode|0x80,modbus.crc);
   822ca:	7863      	ldrb	r3, [r4, #1]
   822cc:	b281      	uxth	r1, r0
   822ce:	f043 0080 	orr.w	r0, r3, #128	; 0x80
   822d2:	47b0      	blx	r6
   822d4:	8128      	strh	r0, [r5, #8]
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->errorFrame.exceptionCode=_exceptionCode),modbus.crc);
   822d6:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
   822da:	70a0      	strb	r0, [r4, #2]
   822dc:	8929      	ldrh	r1, [r5, #8]
   822de:	47b0      	blx	r6
   822e0:	b283      	uxth	r3, r0
   822e2:	812b      	strh	r3, [r5, #8]
		_pModbusTxFramePtr->errorFrame.exceptionCode_crc=swap16(modbus.crc);
   822e4:	0200      	lsls	r0, r0, #8
   822e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   822ea:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   822ee:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   822f2:	f8a4 0003 	strh.w	r0, [r4, #3]
		rs485_Send(MODBUS_EXCEPTION_ERROR_FRAME_LEN, MODBUS_NEED_NO_ACK);
   822f6:	2200      	movs	r2, #0
   822f8:	2105      	movs	r1, #5
   822fa:	2066      	movs	r0, #102	; 0x66
   822fc:	47b8      	blx	r7
		break;
   822fe:	e461      	b.n	81bc4 <Modbus+0x1f4>
		Putstr("\r\n\nREAD COILS ACK!!\r\n");
   82300:	4927      	ldr	r1, [pc, #156]	; (823a0 <Modbus+0x9d0>)
   82302:	2067      	movs	r0, #103	; 0x67
   82304:	4b27      	ldr	r3, [pc, #156]	; (823a4 <Modbus+0x9d4>)
   82306:	4798      	blx	r3
		rs485_Send(modbus.frameLen = MODBUS_READ_COILS_FRAME_LEN, 0);
   82308:	2108      	movs	r1, #8
   8230a:	4b24      	ldr	r3, [pc, #144]	; (8239c <Modbus+0x9cc>)
   8230c:	8259      	strh	r1, [r3, #18]
   8230e:	2200      	movs	r2, #0
   82310:	2066      	movs	r0, #102	; 0x66
   82312:	4b20      	ldr	r3, [pc, #128]	; (82394 <Modbus+0x9c4>)
   82314:	4798      	blx	r3
		break;
   82316:	e455      	b.n	81bc4 <Modbus+0x1f4>
		Putstr("\r\n\t!\r\n");
   82318:	4923      	ldr	r1, [pc, #140]	; (823a8 <Modbus+0x9d8>)
   8231a:	2067      	movs	r0, #103	; 0x67
   8231c:	4b21      	ldr	r3, [pc, #132]	; (823a4 <Modbus+0x9d4>)
   8231e:	4798      	blx	r3
		if(IsModuleIdentified() || modbus.timer)
   82320:	2066      	movs	r0, #102	; 0x66
   82322:	4b22      	ldr	r3, [pc, #136]	; (823ac <Modbus+0x9dc>)
   82324:	4798      	blx	r3
   82326:	b910      	cbnz	r0, 8232e <Modbus+0x95e>
   82328:	4b1c      	ldr	r3, [pc, #112]	; (8239c <Modbus+0x9cc>)
   8232a:	885b      	ldrh	r3, [r3, #2]
   8232c:	b1a3      	cbz	r3, 82358 <Modbus+0x988>
			gpio_toggle_pin(POWER_LED);
   8232e:	2033      	movs	r0, #51	; 0x33
   82330:	4b1f      	ldr	r3, [pc, #124]	; (823b0 <Modbus+0x9e0>)
   82332:	4798      	blx	r3
			mBitsClr(modbus.status, ST_ATTACH_READY);
   82334:	4c19      	ldr	r4, [pc, #100]	; (8239c <Modbus+0x9cc>)
   82336:	8823      	ldrh	r3, [r4, #0]
   82338:	f023 0332 	bic.w	r3, r3, #50	; 0x32
   8233c:	8023      	strh	r3, [r4, #0]
			sprintf(buf, "\r\n\tATTACH READY SECOND: %d\r\n", mIsBitsSet(modbus.status, ST_ATTACH_READY));
   8233e:	4d1d      	ldr	r5, [pc, #116]	; (823b4 <Modbus+0x9e4>)
   82340:	2200      	movs	r2, #0
   82342:	491d      	ldr	r1, [pc, #116]	; (823b8 <Modbus+0x9e8>)
   82344:	4628      	mov	r0, r5
   82346:	4b1d      	ldr	r3, [pc, #116]	; (823bc <Modbus+0x9ec>)
   82348:	4798      	blx	r3
			Putstr(buf);
   8234a:	4629      	mov	r1, r5
   8234c:	2067      	movs	r0, #103	; 0x67
   8234e:	4b15      	ldr	r3, [pc, #84]	; (823a4 <Modbus+0x9d4>)
   82350:	4798      	blx	r3
			modbus.timer = 0;
   82352:	2300      	movs	r3, #0
   82354:	8063      	strh	r3, [r4, #2]
   82356:	e435      	b.n	81bc4 <Modbus+0x1f4>
			gpio_toggle_pin(POWER_LED);
   82358:	2033      	movs	r0, #51	; 0x33
   8235a:	4b15      	ldr	r3, [pc, #84]	; (823b0 <Modbus+0x9e0>)
   8235c:	4798      	blx	r3
			mBitsSet(modbus.status, ST_ATTACH_READY);
   8235e:	4c0f      	ldr	r4, [pc, #60]	; (8239c <Modbus+0x9cc>)
   82360:	8823      	ldrh	r3, [r4, #0]
   82362:	f043 0332 	orr.w	r3, r3, #50	; 0x32
   82366:	8023      	strh	r3, [r4, #0]
			sprintf(buf, "\r\n\tATTACH READY FIRST: %d\r\n", mIsBitsSet(modbus.status, ST_ATTACH_READY));
   82368:	4d12      	ldr	r5, [pc, #72]	; (823b4 <Modbus+0x9e4>)
   8236a:	2201      	movs	r2, #1
   8236c:	4914      	ldr	r1, [pc, #80]	; (823c0 <Modbus+0x9f0>)
   8236e:	4628      	mov	r0, r5
   82370:	4b12      	ldr	r3, [pc, #72]	; (823bc <Modbus+0x9ec>)
   82372:	4798      	blx	r3
			Putstr(buf);
   82374:	4629      	mov	r1, r5
   82376:	2067      	movs	r0, #103	; 0x67
   82378:	4b0a      	ldr	r3, [pc, #40]	; (823a4 <Modbus+0x9d4>)
   8237a:	4798      	blx	r3
			modbus.timer = MODBUS_TIMER_VALUE;
   8237c:	f640 13c4 	movw	r3, #2500	; 0x9c4
   82380:	8063      	strh	r3, [r4, #2]
			PushTask(Modbus, _MODBUS_TIMER, 0, MODBUS_TIMER_VALUE);
   82382:	9300      	str	r3, [sp, #0]
   82384:	2300      	movs	r3, #0
   82386:	2208      	movs	r2, #8
   82388:	490e      	ldr	r1, [pc, #56]	; (823c4 <Modbus+0x9f4>)
   8238a:	2066      	movs	r0, #102	; 0x66
   8238c:	4c0e      	ldr	r4, [pc, #56]	; (823c8 <Modbus+0x9f8>)
   8238e:	47a0      	blx	r4
   82390:	e418      	b.n	81bc4 <Modbus+0x1f4>
   82392:	bf00      	nop
   82394:	00080b25 	.word	0x00080b25
   82398:	00080edd 	.word	0x00080edd
   8239c:	20001a00 	.word	0x20001a00
   823a0:	0008a1e8 	.word	0x0008a1e8
   823a4:	000834ed 	.word	0x000834ed
   823a8:	0008a23c 	.word	0x0008a23c
   823ac:	00083f29 	.word	0x00083f29
   823b0:	0008428f 	.word	0x0008428f
   823b4:	20001a18 	.word	0x20001a18
   823b8:	0008a244 	.word	0x0008a244
   823bc:	000851f5 	.word	0x000851f5
   823c0:	0008a264 	.word	0x0008a264
   823c4:	000819d1 	.word	0x000819d1
   823c8:	00083881 	.word	0x00083881

000823cc <Shell>:

#define EnterEditMode()					mBitsSet(shell.status,ST_SHELL_PROMPT_DISABLED)
#define ExitEditMode()					mBitsClr(shell.status,ST_SHELL_PROMPT_DISABLED)

uint32_t Shell(uint32_t sc, ...)
{
   823cc:	b40f      	push	{r0, r1, r2, r3}
   823ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   823d2:	b087      	sub	sp, #28
	uint32_t u1,u2;
	char*pSt;

	switch(sc)
   823d4:	990e      	ldr	r1, [sp, #56]	; 0x38
   823d6:	2905      	cmp	r1, #5
   823d8:	d03c      	beq.n	82454 <Shell+0x88>
   823da:	d916      	bls.n	8240a <Shell+0x3e>
   823dc:	2907      	cmp	r1, #7
   823de:	f000 85e9 	beq.w	82fb4 <Shell+0xbe8>
   823e2:	d328      	bcc.n	82436 <Shell+0x6a>
   823e4:	2964      	cmp	r1, #100	; 0x64
   823e6:	d05c      	beq.n	824a2 <Shell+0xd6>
   823e8:	2966      	cmp	r1, #102	; 0x66
   823ea:	f040 8663 	bne.w	830b4 <Shell+0xce8>
		
		break;

	case SHELL_HEART_BEAT:
#define k pa1
		if(heartBeatRhythm[++k]==0) k=0;
   823ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   823f0:	3301      	adds	r3, #1
   823f2:	930f      	str	r3, [sp, #60]	; 0x3c
   823f4:	4a94      	ldr	r2, [pc, #592]	; (82648 <Shell+0x27c>)
   823f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   823fa:	2a00      	cmp	r2, #0
   823fc:	d17a      	bne.n	824f4 <Shell+0x128>
   823fe:	2300      	movs	r3, #0
   82400:	930f      	str	r3, [sp, #60]	; 0x3c
		if((k%2==0)^(!HEART_LED_ACTIVE_LEVEL)) gpio_set_pin_high(HEART_LED);
		else gpio_set_pin_low(HEART_LED);
   82402:	2034      	movs	r0, #52	; 0x34
   82404:	4b91      	ldr	r3, [pc, #580]	; (8264c <Shell+0x280>)
   82406:	4798      	blx	r3
   82408:	e07a      	b.n	82500 <Shell+0x134>
	switch(sc)
   8240a:	2903      	cmp	r1, #3
   8240c:	f000 835b 	beq.w	82ac6 <Shell+0x6fa>
   82410:	f200 8083 	bhi.w	8251a <Shell+0x14e>
   82414:	2902      	cmp	r1, #2
   82416:	f040 864d 	bne.w	830b4 <Shell+0xce8>
		}
		break;

	case _SHELL_KBHIT:
#define _kbhitchar	((char)pa1)
		switch(shell.state)
   8241a:	4b8d      	ldr	r3, [pc, #564]	; (82650 <Shell+0x284>)
   8241c:	7f1b      	ldrb	r3, [r3, #28]
   8241e:	2b06      	cmp	r3, #6
   82420:	f200 8343 	bhi.w	82aaa <Shell+0x6de>
   82424:	e8df f013 	tbh	[pc, r3, lsl #1]
   82428:	014200c3 	.word	0x014200c3
   8242c:	01590145 	.word	0x01590145
   82430:	032d032a 	.word	0x032d032a
   82434:	027a      	.short	0x027a
		break;

	case _SHELL_CHECK_SEPARATORS:
#define _ch     ((char)pa1)
#define _pSep   pa2
	    while((*(char*)_pSep)&&(*(char*)_pSep!=_ch)) _pSep++;
   82436:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82438:	781a      	ldrb	r2, [r3, #0]
   8243a:	b14a      	cbz	r2, 82450 <Shell+0x84>
   8243c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   82440:	428a      	cmp	r2, r1
   82442:	d005      	beq.n	82450 <Shell+0x84>
   82444:	3301      	adds	r3, #1
   82446:	9310      	str	r3, [sp, #64]	; 0x40
   82448:	781a      	ldrb	r2, [r3, #0]
   8244a:	b10a      	cbz	r2, 82450 <Shell+0x84>
   8244c:	428a      	cmp	r2, r1
   8244e:	d1f9      	bne.n	82444 <Shell+0x78>
	    return (uint32_t)*(char*)_pSep;
   82450:	4690      	mov	r8, r2
   82452:	e049      	b.n	824e8 <Shell+0x11c>
		while(len--)
   82454:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   82458:	f108 33ff 	add.w	r3, r8, #4294967295
   8245c:	9310      	str	r3, [sp, #64]	; 0x40
   8245e:	f1b8 0f00 	cmp.w	r8, #0
   82462:	d041      	beq.n	824e8 <Shell+0x11c>
			Putch(hexDigits[*(char*)str>>4]);
   82464:	4e7b      	ldr	r6, [pc, #492]	; (82654 <Shell+0x288>)
   82466:	2566      	movs	r5, #102	; 0x66
   82468:	4c7b      	ldr	r4, [pc, #492]	; (82658 <Shell+0x28c>)
   8246a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8246c:	781b      	ldrb	r3, [r3, #0]
   8246e:	091b      	lsrs	r3, r3, #4
   82470:	5cf1      	ldrb	r1, [r6, r3]
   82472:	4628      	mov	r0, r5
   82474:	47a0      	blx	r4
			Putch(hexDigits[*(char*)str&0x0F]);
   82476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82478:	781b      	ldrb	r3, [r3, #0]
   8247a:	f003 030f 	and.w	r3, r3, #15
   8247e:	5cf1      	ldrb	r1, [r6, r3]
   82480:	4628      	mov	r0, r5
   82482:	47a0      	blx	r4
			Putch(' ');
   82484:	2120      	movs	r1, #32
   82486:	4628      	mov	r0, r5
   82488:	47a0      	blx	r4
			str++;
   8248a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8248c:	3301      	adds	r3, #1
   8248e:	930f      	str	r3, [sp, #60]	; 0x3c
		while(len--)
   82490:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   82494:	f108 33ff 	add.w	r3, r8, #4294967295
   82498:	9310      	str	r3, [sp, #64]	; 0x40
   8249a:	f1b8 0f00 	cmp.w	r8, #0
   8249e:	d1e4      	bne.n	8246a <Shell+0x9e>
   824a0:	e022      	b.n	824e8 <Shell+0x11c>
		Putstr("\r\n\t SHELL NEW\r\n");
   824a2:	496e      	ldr	r1, [pc, #440]	; (8265c <Shell+0x290>)
   824a4:	2067      	movs	r0, #103	; 0x67
   824a6:	4d6c      	ldr	r5, [pc, #432]	; (82658 <Shell+0x28c>)
   824a8:	47a8      	blx	r5
		shell.editTimer=shell.escapeTimer=0;
   824aa:	4b69      	ldr	r3, [pc, #420]	; (82650 <Shell+0x284>)
   824ac:	2400      	movs	r4, #0
   824ae:	619c      	str	r4, [r3, #24]
   824b0:	615c      	str	r4, [r3, #20]
		shell.state=IDLE;
   824b2:	771c      	strb	r4, [r3, #28]
		shell.status=ST_SHELL_SHOW_UNKNOW_CRC;
   824b4:	2202      	movs	r2, #2
   824b6:	801a      	strh	r2, [r3, #0]
		Lcd(LCD_NEW);
   824b8:	2064      	movs	r0, #100	; 0x64
   824ba:	4b69      	ldr	r3, [pc, #420]	; (82660 <Shell+0x294>)
   824bc:	4798      	blx	r3
		gpio_configure_pin(HEART_LED, HEART_LED_FLAGS);
   824be:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   824c2:	2034      	movs	r0, #52	; 0x34
   824c4:	4e67      	ldr	r6, [pc, #412]	; (82664 <Shell+0x298>)
   824c6:	47b0      	blx	r6
		gpio_configure_pin(POWER_LED, POWER_LED_FLAGS);
   824c8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   824cc:	2033      	movs	r0, #51	; 0x33
   824ce:	47b0      	blx	r6
		gpio_set_pin_low(POWER_LED);
   824d0:	2033      	movs	r0, #51	; 0x33
   824d2:	4b5e      	ldr	r3, [pc, #376]	; (8264c <Shell+0x280>)
   824d4:	4798      	blx	r3
		kRtc(KRTC_NEW);
   824d6:	2064      	movs	r0, #100	; 0x64
   824d8:	4b63      	ldr	r3, [pc, #396]	; (82668 <Shell+0x29c>)
   824da:	4798      	blx	r3
		Shellcom(SHELLCOM_NEW);
   824dc:	2064      	movs	r0, #100	; 0x64
   824de:	47a8      	blx	r5
		Putstr("\r\n\tSHELLPROMPT\r\n");
   824e0:	4962      	ldr	r1, [pc, #392]	; (8266c <Shell+0x2a0>)
   824e2:	2067      	movs	r0, #103	; 0x67
   824e4:	47a8      	blx	r5

	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_SHELL_SWITCH_BAD_SC,sc);
	}
	return 0;
   824e6:	46a0      	mov	r8, r4
}
   824e8:	4640      	mov	r0, r8
   824ea:	b007      	add	sp, #28
   824ec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   824f0:	b004      	add	sp, #16
   824f2:	4770      	bx	lr
		if((k%2==0)^(!HEART_LED_ACTIVE_LEVEL)) gpio_set_pin_high(HEART_LED);
   824f4:	f013 0f01 	tst.w	r3, #1
   824f8:	d083      	beq.n	82402 <Shell+0x36>
   824fa:	2034      	movs	r0, #52	; 0x34
   824fc:	4b5c      	ldr	r3, [pc, #368]	; (82670 <Shell+0x2a4>)
   824fe:	4798      	blx	r3
		PushTask(Shell,SHELL_HEART_BEAT,k,heartBeatRhythm[k]);
   82500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82502:	4a51      	ldr	r2, [pc, #324]	; (82648 <Shell+0x27c>)
   82504:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   82508:	9200      	str	r2, [sp, #0]
   8250a:	2266      	movs	r2, #102	; 0x66
   8250c:	4959      	ldr	r1, [pc, #356]	; (82674 <Shell+0x2a8>)
   8250e:	4610      	mov	r0, r2
   82510:	4c59      	ldr	r4, [pc, #356]	; (82678 <Shell+0x2ac>)
   82512:	47a0      	blx	r4
	return 0;
   82514:	f04f 0800 	mov.w	r8, #0
		break;
   82518:	e7e6      	b.n	824e8 <Shell+0x11c>
		rtc_get_time(RTC,&_hour,&_minute,&_second);
   8251a:	ab05      	add	r3, sp, #20
   8251c:	aa0f      	add	r2, sp, #60	; 0x3c
   8251e:	a90e      	add	r1, sp, #56	; 0x38
   82520:	4856      	ldr	r0, [pc, #344]	; (8267c <Shell+0x2b0>)
   82522:	4c57      	ldr	r4, [pc, #348]	; (82680 <Shell+0x2b4>)
   82524:	47a0      	blx	r4
		if(mIsBitsClr(shell.status,ST_SHELL_PROMPT_DISABLED))
   82526:	4b4a      	ldr	r3, [pc, #296]	; (82650 <Shell+0x284>)
   82528:	881b      	ldrh	r3, [r3, #0]
   8252a:	f013 0f04 	tst.w	r3, #4
   8252e:	d030      	beq.n	82592 <Shell+0x1c6>
		if(IsLcdOn())
   82530:	2069      	movs	r0, #105	; 0x69
   82532:	4b4b      	ldr	r3, [pc, #300]	; (82660 <Shell+0x294>)
   82534:	4798      	blx	r3
   82536:	4680      	mov	r8, r0
   82538:	2800      	cmp	r0, #0
   8253a:	d0d5      	beq.n	824e8 <Shell+0x11c>
			sprintf(shellTmpBuf,"%02d:%02d:%02d",(int)_hour,(int)_minute,(int)_second);
   8253c:	ad0e      	add	r5, sp, #56	; 0x38
   8253e:	f855 2b04 	ldr.w	r2, [r5], #4
   82542:	4c50      	ldr	r4, [pc, #320]	; (82684 <Shell+0x2b8>)
   82544:	ae06      	add	r6, sp, #24
   82546:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8254a:	9300      	str	r3, [sp, #0]
   8254c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8254e:	494e      	ldr	r1, [pc, #312]	; (82688 <Shell+0x2bc>)
   82550:	4620      	mov	r0, r4
   82552:	f8df 8144 	ldr.w	r8, [pc, #324]	; 82698 <Shell+0x2cc>
   82556:	47c0      	blx	r8
			LcdPutstr(shellTmpBuf,1,6);
   82558:	2306      	movs	r3, #6
   8255a:	2201      	movs	r2, #1
   8255c:	4621      	mov	r1, r4
   8255e:	2068      	movs	r0, #104	; 0x68
   82560:	4f3f      	ldr	r7, [pc, #252]	; (82660 <Shell+0x294>)
   82562:	47b8      	blx	r7
			rtc_get_date(RTC,&_year,&_month,&_date,&_day);
   82564:	ab04      	add	r3, sp, #16
   82566:	9300      	str	r3, [sp, #0]
   82568:	4633      	mov	r3, r6
   8256a:	462a      	mov	r2, r5
   8256c:	a90e      	add	r1, sp, #56	; 0x38
   8256e:	4843      	ldr	r0, [pc, #268]	; (8267c <Shell+0x2b0>)
   82570:	4d46      	ldr	r5, [pc, #280]	; (8268c <Shell+0x2c0>)
   82572:	47a8      	blx	r5
			sprintf(shellTmpBuf,"%02d/%02d/%04d",(int)_date,(int)_month,(int)_year);
   82574:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82576:	9300      	str	r3, [sp, #0]
   82578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8257a:	9a05      	ldr	r2, [sp, #20]
   8257c:	4944      	ldr	r1, [pc, #272]	; (82690 <Shell+0x2c4>)
   8257e:	4620      	mov	r0, r4
   82580:	47c0      	blx	r8
			LcdPutstr(shellTmpBuf,0,5);
   82582:	2305      	movs	r3, #5
   82584:	2200      	movs	r2, #0
   82586:	4621      	mov	r1, r4
   82588:	2068      	movs	r0, #104	; 0x68
   8258a:	47b8      	blx	r7
	return 0;
   8258c:	f04f 0800 	mov.w	r8, #0
   82590:	e7aa      	b.n	824e8 <Shell+0x11c>
			sprintf(shellTmpBuf,"\r%02d:%02d:%02d",(int)_hour,(int)_minute,(int)_second);
   82592:	4c3c      	ldr	r4, [pc, #240]	; (82684 <Shell+0x2b8>)
   82594:	9b05      	ldr	r3, [sp, #20]
   82596:	9300      	str	r3, [sp, #0]
   82598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8259a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8259c:	493d      	ldr	r1, [pc, #244]	; (82694 <Shell+0x2c8>)
   8259e:	4620      	mov	r0, r4
   825a0:	4d3d      	ldr	r5, [pc, #244]	; (82698 <Shell+0x2cc>)
   825a2:	47a8      	blx	r5
			Putstr(shellTmpBuf);
   825a4:	4621      	mov	r1, r4
   825a6:	2067      	movs	r0, #103	; 0x67
   825a8:	4b2b      	ldr	r3, [pc, #172]	; (82658 <Shell+0x28c>)
   825aa:	4798      	blx	r3
   825ac:	e7c0      	b.n	82530 <Shell+0x164>
			switch(_kbhitchar)
   825ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   825b0:	b2d3      	uxtb	r3, r2
   825b2:	3b08      	subs	r3, #8
   825b4:	2b18      	cmp	r3, #24
   825b6:	d82d      	bhi.n	82614 <Shell+0x248>
   825b8:	e8df f013 	tbh	[pc, r3, lsl #1]
   825bc:	05830583 	.word	0x05830583
   825c0:	002c0583 	.word	0x002c0583
   825c4:	0583002c 	.word	0x0583002c
   825c8:	002c002c 	.word	0x002c002c
   825cc:	002c002c 	.word	0x002c002c
   825d0:	002c002c 	.word	0x002c002c
   825d4:	002c002c 	.word	0x002c002c
   825d8:	002c002c 	.word	0x002c002c
   825dc:	002c002c 	.word	0x002c002c
   825e0:	0019002c 	.word	0x0019002c
   825e4:	002c002c 	.word	0x002c002c
   825e8:	002c002c 	.word	0x002c002c
   825ec:	0583      	.short	0x0583
				shell.escapeTimer=SHELL_ESC_TIMEOUT;
   825ee:	4c18      	ldr	r4, [pc, #96]	; (82650 <Shell+0x284>)
   825f0:	2314      	movs	r3, #20
   825f2:	61a3      	str	r3, [r4, #24]
				*shell.pEscbuf++='\e';
   825f4:	4b29      	ldr	r3, [pc, #164]	; (8269c <Shell+0x2d0>)
   825f6:	60a3      	str	r3, [r4, #8]
   825f8:	201b      	movs	r0, #27
   825fa:	f803 0c01 	strb.w	r0, [r3, #-1]
				shell.nEscChar=1;
   825fe:	2501      	movs	r5, #1
   82600:	81e5      	strh	r5, [r4, #14]
				shell.crc=CRC16MODBUSbyte('\e',0xFFFF);
   82602:	f64f 71ff 	movw	r1, #65535	; 0xffff
   82606:	4b26      	ldr	r3, [pc, #152]	; (826a0 <Shell+0x2d4>)
   82608:	4798      	blx	r3
   8260a:	8220      	strh	r0, [r4, #16]
				shell.state=ESCAPE;
   8260c:	7725      	strb	r5, [r4, #28]
	return 0;
   8260e:	f04f 0800 	mov.w	r8, #0
				break;
   82612:	e769      	b.n	824e8 <Shell+0x11c>
				EnterEditMode();
   82614:	4c0e      	ldr	r4, [pc, #56]	; (82650 <Shell+0x284>)
   82616:	8823      	ldrh	r3, [r4, #0]
   82618:	f043 0304 	orr.w	r3, r3, #4
   8261c:	8023      	strh	r3, [r4, #0]
				shell.editTimer=SHELL_EDIT_TIMEOUT;
   8261e:	2500      	movs	r5, #0
   82620:	6165      	str	r5, [r4, #20]
				*shell.pEdit++=_kbhitchar;
   82622:	4b20      	ldr	r3, [pc, #128]	; (826a4 <Shell+0x2d8>)
   82624:	6063      	str	r3, [r4, #4]
			switch(_kbhitchar)
   82626:	f803 2c01 	strb.w	r2, [r3, #-1]
				shell.nChar=1;
   8262a:	2301      	movs	r3, #1
   8262c:	81a3      	strh	r3, [r4, #12]
				Putstr("\r\n>"); Putch(_kbhitchar);
   8262e:	491e      	ldr	r1, [pc, #120]	; (826a8 <Shell+0x2dc>)
   82630:	2067      	movs	r0, #103	; 0x67
   82632:	4e09      	ldr	r6, [pc, #36]	; (82658 <Shell+0x28c>)
   82634:	47b0      	blx	r6
   82636:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   8263a:	2066      	movs	r0, #102	; 0x66
   8263c:	47b0      	blx	r6
				shell.state=EDITION;
   8263e:	2303      	movs	r3, #3
   82640:	7723      	strb	r3, [r4, #28]
	return 0;
   82642:	46a8      	mov	r8, r5
				break;
   82644:	e750      	b.n	824e8 <Shell+0x11c>
   82646:	bf00      	nop
   82648:	0008a368 	.word	0x0008a368
   8264c:	00084275 	.word	0x00084275
   82650:	20001d1c 	.word	0x20001d1c
   82654:	0008a37c 	.word	0x0008a37c
   82658:	000834ed 	.word	0x000834ed
   8265c:	0008a28c 	.word	0x0008a28c
   82660:	00081579 	.word	0x00081579
   82664:	000842b1 	.word	0x000842b1
   82668:	00081239 	.word	0x00081239
   8266c:	0008a29c 	.word	0x0008a29c
   82670:	0008425b 	.word	0x0008425b
   82674:	000823cd 	.word	0x000823cd
   82678:	00083881 	.word	0x00083881
   8267c:	400e1260 	.word	0x400e1260
   82680:	0008467b 	.word	0x0008467b
   82684:	20001dbc 	.word	0x20001dbc
   82688:	0008a2c0 	.word	0x0008a2c0
   8268c:	00084769 	.word	0x00084769
   82690:	0008a2d0 	.word	0x0008a2d0
   82694:	0008a2b0 	.word	0x0008a2b0
   82698:	000851f5 	.word	0x000851f5
   8269c:	20001d3d 	.word	0x20001d3d
   826a0:	00080edd 	.word	0x00080edd
   826a4:	20001c19 	.word	0x20001c19
   826a8:	0008a2e0 	.word	0x0008a2e0
				shell.state=ESCAPE_SEQ;
   826ac:	2202      	movs	r2, #2
   826ae:	4b91      	ldr	r3, [pc, #580]	; (828f4 <Shell+0x528>)
   826b0:	771a      	strb	r2, [r3, #28]
				shell.escapeTimer=SHELL_ESC_TIMEOUT;
   826b2:	4c90      	ldr	r4, [pc, #576]	; (828f4 <Shell+0x528>)
   826b4:	2314      	movs	r3, #20
   826b6:	61a3      	str	r3, [r4, #24]
				*shell.pEscbuf++=_kbhitchar;
   826b8:	68a3      	ldr	r3, [r4, #8]
   826ba:	1c5a      	adds	r2, r3, #1
   826bc:	60a2      	str	r2, [r4, #8]
   826be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   826c0:	701a      	strb	r2, [r3, #0]
				shell.nEscChar++;
   826c2:	89e3      	ldrh	r3, [r4, #14]
   826c4:	3301      	adds	r3, #1
   826c6:	81e3      	strh	r3, [r4, #14]
				shell.crc=CRC16MODBUSbyte(_kbhitchar,shell.crc);
   826c8:	8a21      	ldrh	r1, [r4, #16]
   826ca:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   826ce:	4b8a      	ldr	r3, [pc, #552]	; (828f8 <Shell+0x52c>)
   826d0:	4798      	blx	r3
   826d2:	8220      	strh	r0, [r4, #16]
	return 0;
   826d4:	f04f 0800 	mov.w	r8, #0
			break;
   826d8:	e706      	b.n	824e8 <Shell+0x11c>
			shell.editTimer=SHELL_EDIT_TIMEOUT;
   826da:	2200      	movs	r2, #0
   826dc:	4b85      	ldr	r3, [pc, #532]	; (828f4 <Shell+0x528>)
   826de:	615a      	str	r2, [r3, #20]
			switch(_kbhitchar)
   826e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   826e2:	b2d1      	uxtb	r1, r2
   826e4:	f1a1 0308 	sub.w	r3, r1, #8
   826e8:	2b13      	cmp	r3, #19
   826ea:	f200 8094 	bhi.w	82816 <Shell+0x44a>
   826ee:	e8df f003 	tbb	[pc, r3]
   826f2:	1e36      	.short	0x1e36
   826f4:	74929274 	.word	0x74929274
   826f8:	92929292 	.word	0x92929292
   826fc:	92929292 	.word	0x92929292
   82700:	92929292 	.word	0x92929292
   82704:	0a92      	.short	0x0a92
				shell.escapeTimer=SHELL_ESC_TIMEOUT;
   82706:	4c7b      	ldr	r4, [pc, #492]	; (828f4 <Shell+0x528>)
   82708:	2314      	movs	r3, #20
   8270a:	61a3      	str	r3, [r4, #24]
				*shell.pEscbuf++='\e';
   8270c:	4b7b      	ldr	r3, [pc, #492]	; (828fc <Shell+0x530>)
   8270e:	60a3      	str	r3, [r4, #8]
   82710:	201b      	movs	r0, #27
   82712:	f803 0c01 	strb.w	r0, [r3, #-1]
				shell.nEscChar=1;
   82716:	2301      	movs	r3, #1
   82718:	81e3      	strh	r3, [r4, #14]
				shell.crc=CRC16MODBUSbyte('\e',0xFFFF);
   8271a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8271e:	4b76      	ldr	r3, [pc, #472]	; (828f8 <Shell+0x52c>)
   82720:	4798      	blx	r3
   82722:	8220      	strh	r0, [r4, #16]
				shell.state=ED_ESCAPE;
   82724:	2304      	movs	r3, #4
   82726:	7723      	strb	r3, [r4, #28]
	return 0;
   82728:	f04f 0800 	mov.w	r8, #0
				break;
   8272c:	e6dc      	b.n	824e8 <Shell+0x11c>
				const char ctrl_right_arrow[]="\e[1;5C";
   8272e:	4b74      	ldr	r3, [pc, #464]	; (82900 <Shell+0x534>)
   82730:	e893 0003 	ldmia.w	r3, {r0, r1}
   82734:	9002      	str	r0, [sp, #8]
   82736:	f8ad 100c 	strh.w	r1, [sp, #12]
   8273a:	0c09      	lsrs	r1, r1, #16
   8273c:	f88d 100e 	strb.w	r1, [sp, #14]
				memcpy(shellEscapeBuf,ctrl_right_arrow,6);
   82740:	4b70      	ldr	r3, [pc, #448]	; (82904 <Shell+0x538>)
   82742:	6018      	str	r0, [r3, #0]
   82744:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   82748:	809a      	strh	r2, [r3, #4]
				shell.nEscChar=6;
   8274a:	4b6a      	ldr	r3, [pc, #424]	; (828f4 <Shell+0x528>)
   8274c:	2206      	movs	r2, #6
   8274e:	81da      	strh	r2, [r3, #14]
				shell.state=ED_ESCAPE_SEQ;
   82750:	2205      	movs	r2, #5
   82752:	771a      	strb	r2, [r3, #28]
				shell.escapeTimer=1;	//Ask a ESC SEQUENCE timeout : treat as a "ctrl+right_arrow" key
   82754:	2201      	movs	r2, #1
   82756:	619a      	str	r2, [r3, #24]
	return 0;
   82758:	f04f 0800 	mov.w	r8, #0
				break;
   8275c:	e6c4      	b.n	824e8 <Shell+0x11c>
                if(shell.nChar)
   8275e:	4b65      	ldr	r3, [pc, #404]	; (828f4 <Shell+0x528>)
   82760:	899a      	ldrh	r2, [r3, #12]
   82762:	2a00      	cmp	r2, #0
   82764:	f000 84b1 	beq.w	830ca <Shell+0xcfe>
	                pEnd = (uint32_t)shellEditBuf+shell.nChar;
   82768:	4c67      	ldr	r4, [pc, #412]	; (82908 <Shell+0x53c>)
   8276a:	4422      	add	r2, r4
   8276c:	920e      	str	r2, [sp, #56]	; 0x38
	                pSrc = (uint32_t)shell.pEdit;
   8276e:	685b      	ldr	r3, [r3, #4]
   82770:	9305      	str	r3, [sp, #20]
	                while(pSrc<pEnd)
   82772:	429a      	cmp	r2, r3
   82774:	d908      	bls.n	82788 <Shell+0x3bc>
		                *(char*)(pSrc-1)=*(char*)pSrc; pSrc++;
   82776:	781a      	ldrb	r2, [r3, #0]
   82778:	f803 2c01 	strb.w	r2, [r3, #-1]
   8277c:	9b05      	ldr	r3, [sp, #20]
   8277e:	3301      	adds	r3, #1
   82780:	9305      	str	r3, [sp, #20]
	                while(pSrc<pEnd)
   82782:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82784:	429a      	cmp	r2, r3
   82786:	d8f6      	bhi.n	82776 <Shell+0x3aa>
	                *(char*)pSrc++=' ';
   82788:	2220      	movs	r2, #32
   8278a:	f803 2c01 	strb.w	r2, [r3, #-1]
	                Putstr("\e[D");
   8278e:	4d5f      	ldr	r5, [pc, #380]	; (8290c <Shell+0x540>)
   82790:	4629      	mov	r1, r5
   82792:	2067      	movs	r0, #103	; 0x67
   82794:	4e5e      	ldr	r6, [pc, #376]	; (82910 <Shell+0x544>)
   82796:	47b0      	blx	r6
	                shell.pEdit--; shell.nChar--;
   82798:	4a56      	ldr	r2, [pc, #344]	; (828f4 <Shell+0x528>)
   8279a:	6851      	ldr	r1, [r2, #4]
   8279c:	3901      	subs	r1, #1
   8279e:	6051      	str	r1, [r2, #4]
   827a0:	8993      	ldrh	r3, [r2, #12]
   827a2:	3b01      	subs	r3, #1
   827a4:	b29b      	uxth	r3, r3
   827a6:	8193      	strh	r3, [r2, #12]
	                k=Putstrlen(shell.pEdit,shell.nChar-(shell.pEdit-shellEditBuf)+1);
   827a8:	1c62      	adds	r2, r4, #1
   827aa:	441a      	add	r2, r3
   827ac:	1a52      	subs	r2, r2, r1
   827ae:	2068      	movs	r0, #104	; 0x68
   827b0:	47b0      	blx	r6
   827b2:	4680      	mov	r8, r0
	                while(k--) Putstr("\e[D");
   827b4:	1e43      	subs	r3, r0, #1
   827b6:	9305      	str	r3, [sp, #20]
   827b8:	2800      	cmp	r0, #0
   827ba:	f43f ae95 	beq.w	824e8 <Shell+0x11c>
   827be:	2667      	movs	r6, #103	; 0x67
   827c0:	4c53      	ldr	r4, [pc, #332]	; (82910 <Shell+0x544>)
   827c2:	4629      	mov	r1, r5
   827c4:	4630      	mov	r0, r6
   827c6:	47a0      	blx	r4
   827c8:	f8dd 8014 	ldr.w	r8, [sp, #20]
   827cc:	f108 33ff 	add.w	r3, r8, #4294967295
   827d0:	9305      	str	r3, [sp, #20]
   827d2:	f1b8 0f00 	cmp.w	r8, #0
   827d6:	d1f4      	bne.n	827c2 <Shell+0x3f6>
   827d8:	e686      	b.n	824e8 <Shell+0x11c>
				if(shell.nChar==0)
   827da:	4b46      	ldr	r3, [pc, #280]	; (828f4 <Shell+0x528>)
   827dc:	899b      	ldrh	r3, [r3, #12]
   827de:	b96b      	cbnz	r3, 827fc <Shell+0x430>
					ExitEditMode();
   827e0:	4b44      	ldr	r3, [pc, #272]	; (828f4 <Shell+0x528>)
   827e2:	881a      	ldrh	r2, [r3, #0]
   827e4:	f022 0204 	bic.w	r2, r2, #4
   827e8:	801a      	strh	r2, [r3, #0]
					shell.state=IDLE;
   827ea:	f04f 0800 	mov.w	r8, #0
   827ee:	f883 801c 	strb.w	r8, [r3, #28]
					Putch('\r');
   827f2:	210d      	movs	r1, #13
   827f4:	2066      	movs	r0, #102	; 0x66
   827f6:	4b46      	ldr	r3, [pc, #280]	; (82910 <Shell+0x544>)
   827f8:	4798      	blx	r3
   827fa:	e675      	b.n	824e8 <Shell+0x11c>
					shell.state=EXECUTION;
   827fc:	2206      	movs	r2, #6
   827fe:	4b3d      	ldr	r3, [pc, #244]	; (828f4 <Shell+0x528>)
   82800:	771a      	strb	r2, [r3, #28]
					PushTask(Shell,_SHELL_KBHIT,'\r',0);
   82802:	2400      	movs	r4, #0
   82804:	9400      	str	r4, [sp, #0]
   82806:	230d      	movs	r3, #13
   82808:	2202      	movs	r2, #2
   8280a:	4942      	ldr	r1, [pc, #264]	; (82914 <Shell+0x548>)
   8280c:	2066      	movs	r0, #102	; 0x66
   8280e:	4d42      	ldr	r5, [pc, #264]	; (82918 <Shell+0x54c>)
   82810:	47a8      	blx	r5
	return 0;
   82812:	46a0      	mov	r8, r4
   82814:	e668      	b.n	824e8 <Shell+0x11c>
			switch(_kbhitchar)
   82816:	b2d2      	uxtb	r2, r2
				if(shell.nChar==0)
   82818:	4b36      	ldr	r3, [pc, #216]	; (828f4 <Shell+0x528>)
   8281a:	899b      	ldrh	r3, [r3, #12]
   8281c:	b983      	cbnz	r3, 82840 <Shell+0x474>
					if(_kbhitchar!=0x20) //Excluding space char
   8281e:	2a20      	cmp	r2, #32
   82820:	f000 8457 	beq.w	830d2 <Shell+0xd06>
						Putch((*shell.pEdit++=_kbhitchar)); shell.nChar++;
   82824:	4c33      	ldr	r4, [pc, #204]	; (828f4 <Shell+0x528>)
   82826:	6863      	ldr	r3, [r4, #4]
   82828:	1c58      	adds	r0, r3, #1
   8282a:	6060      	str	r0, [r4, #4]
   8282c:	701a      	strb	r2, [r3, #0]
   8282e:	2066      	movs	r0, #102	; 0x66
   82830:	4b37      	ldr	r3, [pc, #220]	; (82910 <Shell+0x544>)
   82832:	4798      	blx	r3
   82834:	89a3      	ldrh	r3, [r4, #12]
   82836:	3301      	adds	r3, #1
   82838:	81a3      	strh	r3, [r4, #12]
	return 0;
   8283a:	f04f 0800 	mov.w	r8, #0
   8283e:	e653      	b.n	824e8 <Shell+0x11c>
				else if(shell.nChar<(SHELL_EDITBUF_LEN))
   82840:	2bff      	cmp	r3, #255	; 0xff
   82842:	f200 8459 	bhi.w	830f8 <Shell+0xd2c>
					if(mIsBitsClr(shell.status,ST_SHELL_INSERT_MODE))
   82846:	482b      	ldr	r0, [pc, #172]	; (828f4 <Shell+0x528>)
   82848:	8800      	ldrh	r0, [r0, #0]
   8284a:	f010 0f01 	tst.w	r0, #1
   8284e:	d112      	bne.n	82876 <Shell+0x4aa>
						if(shell.pEdit==shellEditBuf+shell.nChar)	shell.nChar++;
   82850:	4828      	ldr	r0, [pc, #160]	; (828f4 <Shell+0x528>)
   82852:	6840      	ldr	r0, [r0, #4]
   82854:	4c2c      	ldr	r4, [pc, #176]	; (82908 <Shell+0x53c>)
   82856:	441c      	add	r4, r3
   82858:	42a0      	cmp	r0, r4
   8285a:	d102      	bne.n	82862 <Shell+0x496>
   8285c:	3301      	adds	r3, #1
   8285e:	4c25      	ldr	r4, [pc, #148]	; (828f4 <Shell+0x528>)
   82860:	81a3      	strh	r3, [r4, #12]
						Putch((*shell.pEdit++=_kbhitchar));
   82862:	1c44      	adds	r4, r0, #1
   82864:	4b23      	ldr	r3, [pc, #140]	; (828f4 <Shell+0x528>)
   82866:	605c      	str	r4, [r3, #4]
   82868:	7002      	strb	r2, [r0, #0]
   8286a:	2066      	movs	r0, #102	; 0x66
   8286c:	4b28      	ldr	r3, [pc, #160]	; (82910 <Shell+0x544>)
   8286e:	4798      	blx	r3
	return 0;
   82870:	f04f 0800 	mov.w	r8, #0
   82874:	e638      	b.n	824e8 <Shell+0x11c>
						if(shell.pEdit!=shellEditBuf+shell.nChar)
   82876:	4a1f      	ldr	r2, [pc, #124]	; (828f4 <Shell+0x528>)
   82878:	6851      	ldr	r1, [r2, #4]
   8287a:	4a23      	ldr	r2, [pc, #140]	; (82908 <Shell+0x53c>)
   8287c:	441a      	add	r2, r3
   8287e:	4291      	cmp	r1, r2
   82880:	d00f      	beq.n	828a2 <Shell+0x4d6>
							pDst=(uint32_t)shellEditBuf+shell.nChar;
   82882:	4a21      	ldr	r2, [pc, #132]	; (82908 <Shell+0x53c>)
   82884:	4413      	add	r3, r2
   82886:	930e      	str	r3, [sp, #56]	; 0x38
							while(pDst-1>=(uint32_t)shell.pEdit)
   82888:	1e5a      	subs	r2, r3, #1
   8288a:	4291      	cmp	r1, r2
   8288c:	d809      	bhi.n	828a2 <Shell+0x4d6>
   8288e:	4919      	ldr	r1, [pc, #100]	; (828f4 <Shell+0x528>)
								*(char*)pDst=*(char*)(pDst-1); pDst--;
   82890:	7812      	ldrb	r2, [r2, #0]
   82892:	701a      	strb	r2, [r3, #0]
   82894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82896:	1e53      	subs	r3, r2, #1
   82898:	930e      	str	r3, [sp, #56]	; 0x38
							while(pDst-1>=(uint32_t)shell.pEdit)
   8289a:	3a02      	subs	r2, #2
   8289c:	6848      	ldr	r0, [r1, #4]
   8289e:	4290      	cmp	r0, r2
   828a0:	d9f6      	bls.n	82890 <Shell+0x4c4>
						Putch((*shell.pEdit++=_kbhitchar)); shell.nChar++;
   828a2:	4c14      	ldr	r4, [pc, #80]	; (828f4 <Shell+0x528>)
   828a4:	6863      	ldr	r3, [r4, #4]
   828a6:	1c5a      	adds	r2, r3, #1
   828a8:	6062      	str	r2, [r4, #4]
   828aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
   828ac:	7019      	strb	r1, [r3, #0]
   828ae:	b2c9      	uxtb	r1, r1
   828b0:	2066      	movs	r0, #102	; 0x66
   828b2:	4d17      	ldr	r5, [pc, #92]	; (82910 <Shell+0x544>)
   828b4:	47a8      	blx	r5
   828b6:	89a3      	ldrh	r3, [r4, #12]
   828b8:	3301      	adds	r3, #1
   828ba:	b29b      	uxth	r3, r3
   828bc:	81a3      	strh	r3, [r4, #12]
						k=Putstrlen(shell.pEdit,(shellEditBuf+shell.nChar-shell.pEdit));
   828be:	6861      	ldr	r1, [r4, #4]
   828c0:	4a11      	ldr	r2, [pc, #68]	; (82908 <Shell+0x53c>)
   828c2:	441a      	add	r2, r3
   828c4:	1a52      	subs	r2, r2, r1
   828c6:	2068      	movs	r0, #104	; 0x68
   828c8:	47a8      	blx	r5
   828ca:	4680      	mov	r8, r0
						while(k--) Putstr("\e[D");
   828cc:	1e43      	subs	r3, r0, #1
   828ce:	930e      	str	r3, [sp, #56]	; 0x38
   828d0:	2800      	cmp	r0, #0
   828d2:	f43f ae09 	beq.w	824e8 <Shell+0x11c>
   828d6:	4e0d      	ldr	r6, [pc, #52]	; (8290c <Shell+0x540>)
   828d8:	2567      	movs	r5, #103	; 0x67
   828da:	4c0d      	ldr	r4, [pc, #52]	; (82910 <Shell+0x544>)
   828dc:	4631      	mov	r1, r6
   828de:	4628      	mov	r0, r5
   828e0:	47a0      	blx	r4
   828e2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   828e6:	f108 33ff 	add.w	r3, r8, #4294967295
   828ea:	930e      	str	r3, [sp, #56]	; 0x38
   828ec:	f1b8 0f00 	cmp.w	r8, #0
   828f0:	d1f4      	bne.n	828dc <Shell+0x510>
   828f2:	e5f9      	b.n	824e8 <Shell+0x11c>
   828f4:	20001d1c 	.word	0x20001d1c
   828f8:	00080edd 	.word	0x00080edd
   828fc:	20001d3d 	.word	0x20001d3d
   82900:	0008a360 	.word	0x0008a360
   82904:	20001d3c 	.word	0x20001d3c
   82908:	20001c18 	.word	0x20001c18
   8290c:	0008a2e4 	.word	0x0008a2e4
   82910:	000834ed 	.word	0x000834ed
   82914:	000823cd 	.word	0x000823cd
   82918:	00083881 	.word	0x00083881
			k=shell.nChar-(shell.pEdit-shellEditBuf);
   8291c:	4a91      	ldr	r2, [pc, #580]	; (82b64 <Shell+0x798>)
   8291e:	8993      	ldrh	r3, [r2, #12]
   82920:	6852      	ldr	r2, [r2, #4]
   82922:	4991      	ldr	r1, [pc, #580]	; (82b68 <Shell+0x79c>)
   82924:	1a52      	subs	r2, r2, r1
   82926:	1a9b      	subs	r3, r3, r2
			while(k--) Putstr("\e[C");
   82928:	1e5a      	subs	r2, r3, #1
   8292a:	9205      	str	r2, [sp, #20]
   8292c:	b153      	cbz	r3, 82944 <Shell+0x578>
   8292e:	4e8f      	ldr	r6, [pc, #572]	; (82b6c <Shell+0x7a0>)
   82930:	2567      	movs	r5, #103	; 0x67
   82932:	4c8f      	ldr	r4, [pc, #572]	; (82b70 <Shell+0x7a4>)
   82934:	4631      	mov	r1, r6
   82936:	4628      	mov	r0, r5
   82938:	47a0      	blx	r4
   8293a:	9b05      	ldr	r3, [sp, #20]
   8293c:	1e5a      	subs	r2, r3, #1
   8293e:	9205      	str	r2, [sp, #20]
   82940:	2b00      	cmp	r3, #0
   82942:	d1f7      	bne.n	82934 <Shell+0x568>
			shell.pEdit=shellEditBuf+shell.nChar;
   82944:	4d87      	ldr	r5, [pc, #540]	; (82b64 <Shell+0x798>)
   82946:	89aa      	ldrh	r2, [r5, #12]
   82948:	4c87      	ldr	r4, [pc, #540]	; (82b68 <Shell+0x79c>)
   8294a:	1913      	adds	r3, r2, r4
			*shell.pEdit++='\0';
   8294c:	3301      	adds	r3, #1
   8294e:	606b      	str	r3, [r5, #4]
   82950:	2600      	movs	r6, #0
   82952:	5516      	strb	r6, [r2, r4]
			_CleanUp_cmd_Line();
   82954:	2007      	movs	r0, #7
   82956:	f7ff fd39 	bl	823cc <Shell>
			shell.pEdit=shellEditBuf+shell.nChar;
   8295a:	89aa      	ldrh	r2, [r5, #12]
   8295c:	1913      	adds	r3, r2, r4
			*shell.pEdit++='\0';
   8295e:	3301      	adds	r3, #1
   82960:	606b      	str	r3, [r5, #4]
   82962:	5516      	strb	r6, [r2, r4]
			Putstr("\r\n/>");
   82964:	4983      	ldr	r1, [pc, #524]	; (82b74 <Shell+0x7a8>)
   82966:	2067      	movs	r0, #103	; 0x67
   82968:	4d81      	ldr	r5, [pc, #516]	; (82b70 <Shell+0x7a4>)
   8296a:	47a8      	blx	r5
			Putstr(shellEditBuf);
   8296c:	4621      	mov	r1, r4
   8296e:	2067      	movs	r0, #103	; 0x67
   82970:	47a8      	blx	r5
			mstrtokReset();
   82972:	4b81      	ldr	r3, [pc, #516]	; (82b78 <Shell+0x7ac>)
   82974:	4798      	blx	r3
			pToken=mstrtok(shellEditBuf,(char*)" \r\n");
   82976:	4981      	ldr	r1, [pc, #516]	; (82b7c <Shell+0x7b0>)
   82978:	4620      	mov	r0, r4
   8297a:	4b81      	ldr	r3, [pc, #516]	; (82b80 <Shell+0x7b4>)
   8297c:	4798      	blx	r3
   8297e:	4604      	mov	r4, r0
   82980:	900e      	str	r0, [sp, #56]	; 0x38
			if(pToken)
   82982:	b968      	cbnz	r0, 829a0 <Shell+0x5d4>
			Putstr("\r\n");
   82984:	497f      	ldr	r1, [pc, #508]	; (82b84 <Shell+0x7b8>)
   82986:	2067      	movs	r0, #103	; 0x67
   82988:	4b79      	ldr	r3, [pc, #484]	; (82b70 <Shell+0x7a4>)
   8298a:	4798      	blx	r3
			shell.state=IDLE;
   8298c:	4b75      	ldr	r3, [pc, #468]	; (82b64 <Shell+0x798>)
   8298e:	f04f 0800 	mov.w	r8, #0
   82992:	f883 801c 	strb.w	r8, [r3, #28]
			ExitEditMode();
   82996:	881a      	ldrh	r2, [r3, #0]
   82998:	f022 0204 	bic.w	r2, r2, #4
   8299c:	801a      	strh	r2, [r3, #0]
			break;
   8299e:	e5a3      	b.n	824e8 <Shell+0x11c>
				shell.crc=CRC16MODBUSFRAME((unsigned char*)pToken,strlen((char*)pToken));
   829a0:	4b79      	ldr	r3, [pc, #484]	; (82b88 <Shell+0x7bc>)
   829a2:	4798      	blx	r3
   829a4:	4601      	mov	r1, r0
   829a6:	4620      	mov	r0, r4
   829a8:	4b78      	ldr	r3, [pc, #480]	; (82b8c <Shell+0x7c0>)
   829aa:	4798      	blx	r3
   829ac:	b281      	uxth	r1, r0
   829ae:	4b6d      	ldr	r3, [pc, #436]	; (82b64 <Shell+0x798>)
   829b0:	8219      	strh	r1, [r3, #16]
				k=0;
   829b2:	9605      	str	r6, [sp, #20]
				while((commands[k].cmdCode)&&(commands[k].cmdCode!=shell.crc)) k++;
   829b4:	4b76      	ldr	r3, [pc, #472]	; (82b90 <Shell+0x7c4>)
   829b6:	881b      	ldrh	r3, [r3, #0]
   829b8:	b1f3      	cbz	r3, 829f8 <Shell+0x62c>
   829ba:	4299      	cmp	r1, r3
   829bc:	d01e      	beq.n	829fc <Shell+0x630>
   829be:	2301      	movs	r3, #1
   829c0:	4a73      	ldr	r2, [pc, #460]	; (82b90 <Shell+0x7c4>)
   829c2:	e000      	b.n	829c6 <Shell+0x5fa>
   829c4:	462b      	mov	r3, r5
   829c6:	f832 4033 	ldrh.w	r4, [r2, r3, lsl #3]
   829ca:	b124      	cbz	r4, 829d6 <Shell+0x60a>
   829cc:	1c5d      	adds	r5, r3, #1
   829ce:	42a1      	cmp	r1, r4
   829d0:	d1f8      	bne.n	829c4 <Shell+0x5f8>
   829d2:	9305      	str	r3, [sp, #20]
   829d4:	e000      	b.n	829d8 <Shell+0x60c>
   829d6:	9305      	str	r3, [sp, #20]
				if(commands[k].pCmdFunc)
   829d8:	4c6d      	ldr	r4, [pc, #436]	; (82b90 <Shell+0x7c4>)
   829da:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   829de:	685d      	ldr	r5, [r3, #4]
   829e0:	b175      	cbz	r5, 82a00 <Shell+0x634>
					commands[k].pCmdFunc((uint32_t)&shell,(void*)(pToken+strlen((char*)pToken)+1));
   829e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   829e4:	4620      	mov	r0, r4
   829e6:	4b68      	ldr	r3, [pc, #416]	; (82b88 <Shell+0x7bc>)
   829e8:	4798      	blx	r3
   829ea:	1c61      	adds	r1, r4, #1
   829ec:	4401      	add	r1, r0
   829ee:	485d      	ldr	r0, [pc, #372]	; (82b64 <Shell+0x798>)
   829f0:	47a8      	blx	r5
					mstrtokRestore();
   829f2:	4b68      	ldr	r3, [pc, #416]	; (82b94 <Shell+0x7c8>)
   829f4:	4798      	blx	r3
   829f6:	e7c5      	b.n	82984 <Shell+0x5b8>
				while((commands[k].cmdCode)&&(commands[k].cmdCode!=shell.crc)) k++;
   829f8:	2300      	movs	r3, #0
   829fa:	e7ed      	b.n	829d8 <Shell+0x60c>
   829fc:	2300      	movs	r3, #0
   829fe:	e7eb      	b.n	829d8 <Shell+0x60c>
					k=0;
   82a00:	2300      	movs	r3, #0
   82a02:	9305      	str	r3, [sp, #20]
                    while((cmdEntries[k].cmdCode)&&(cmdEntries[k].cmdCode!=shell.crc)) k++;
   82a04:	4b64      	ldr	r3, [pc, #400]	; (82b98 <Shell+0x7cc>)
   82a06:	881b      	ldrh	r3, [r3, #0]
   82a08:	b313      	cbz	r3, 82a50 <Shell+0x684>
   82a0a:	4299      	cmp	r1, r3
   82a0c:	d022      	beq.n	82a54 <Shell+0x688>
   82a0e:	2301      	movs	r3, #1
   82a10:	4c61      	ldr	r4, [pc, #388]	; (82b98 <Shell+0x7cc>)
   82a12:	e000      	b.n	82a16 <Shell+0x64a>
   82a14:	462b      	mov	r3, r5
   82a16:	f834 2033 	ldrh.w	r2, [r4, r3, lsl #3]
   82a1a:	b122      	cbz	r2, 82a26 <Shell+0x65a>
   82a1c:	1c5d      	adds	r5, r3, #1
   82a1e:	4291      	cmp	r1, r2
   82a20:	d1f8      	bne.n	82a14 <Shell+0x648>
   82a22:	9305      	str	r3, [sp, #20]
   82a24:	e000      	b.n	82a28 <Shell+0x65c>
   82a26:	9305      	str	r3, [sp, #20]
                    if(cmdEntries[k].pCmdFunc)
   82a28:	495b      	ldr	r1, [pc, #364]	; (82b98 <Shell+0x7cc>)
   82a2a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   82a2e:	685d      	ldr	r5, [r3, #4]
   82a30:	b195      	cbz	r5, 82a58 <Shell+0x68c>
	                    cmdEntries[k].pCmdFunc((uint32_t)&shell,(void*)(pToken+strlen((char*)pToken)+1));
   82a32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   82a34:	4620      	mov	r0, r4
   82a36:	4b54      	ldr	r3, [pc, #336]	; (82b88 <Shell+0x7bc>)
   82a38:	4798      	blx	r3
   82a3a:	1c61      	adds	r1, r4, #1
   82a3c:	4401      	add	r1, r0
   82a3e:	4849      	ldr	r0, [pc, #292]	; (82b64 <Shell+0x798>)
   82a40:	47a8      	blx	r5
						mstrtokRestore();
   82a42:	4b54      	ldr	r3, [pc, #336]	; (82b94 <Shell+0x7c8>)
   82a44:	4798      	blx	r3
						Putstr("\r\n");
   82a46:	494f      	ldr	r1, [pc, #316]	; (82b84 <Shell+0x7b8>)
   82a48:	2067      	movs	r0, #103	; 0x67
   82a4a:	4b49      	ldr	r3, [pc, #292]	; (82b70 <Shell+0x7a4>)
   82a4c:	4798      	blx	r3
   82a4e:	e799      	b.n	82984 <Shell+0x5b8>
                    while((cmdEntries[k].cmdCode)&&(cmdEntries[k].cmdCode!=shell.crc)) k++;
   82a50:	2300      	movs	r3, #0
   82a52:	e7e9      	b.n	82a28 <Shell+0x65c>
   82a54:	2300      	movs	r3, #0
   82a56:	e7e7      	b.n	82a28 <Shell+0x65c>
                    else if(mIsBitsSet(shell.status,ST_SHELL_SHOW_UNKNOW_CRC))
   82a58:	4b42      	ldr	r3, [pc, #264]	; (82b64 <Shell+0x798>)
   82a5a:	881b      	ldrh	r3, [r3, #0]
   82a5c:	f013 0f02 	tst.w	r3, #2
   82a60:	d090      	beq.n	82984 <Shell+0x5b8>
	                    sprintf(shellTmpBuf,"\tunknown cmd: %04X\r\n",shell.crc);
   82a62:	4c4e      	ldr	r4, [pc, #312]	; (82b9c <Shell+0x7d0>)
   82a64:	b282      	uxth	r2, r0
   82a66:	494e      	ldr	r1, [pc, #312]	; (82ba0 <Shell+0x7d4>)
   82a68:	4620      	mov	r0, r4
   82a6a:	4b4e      	ldr	r3, [pc, #312]	; (82ba4 <Shell+0x7d8>)
   82a6c:	4798      	blx	r3
	                    Putstr(shellTmpBuf);
   82a6e:	4621      	mov	r1, r4
   82a70:	2067      	movs	r0, #103	; 0x67
   82a72:	4b3f      	ldr	r3, [pc, #252]	; (82b70 <Shell+0x7a4>)
   82a74:	4798      	blx	r3
						mstrtokRestore();
   82a76:	4b47      	ldr	r3, [pc, #284]	; (82b94 <Shell+0x7c8>)
   82a78:	4798      	blx	r3
   82a7a:	e783      	b.n	82984 <Shell+0x5b8>
			shell.state=ED_ESCAPE_SEQ;
   82a7c:	2205      	movs	r2, #5
   82a7e:	4b39      	ldr	r3, [pc, #228]	; (82b64 <Shell+0x798>)
   82a80:	771a      	strb	r2, [r3, #28]
			shell.escapeTimer=SHELL_ESC_TIMEOUT;
   82a82:	4c38      	ldr	r4, [pc, #224]	; (82b64 <Shell+0x798>)
   82a84:	2314      	movs	r3, #20
   82a86:	61a3      	str	r3, [r4, #24]
			*shell.pEscbuf++=_kbhitchar;
   82a88:	68a3      	ldr	r3, [r4, #8]
   82a8a:	1c5a      	adds	r2, r3, #1
   82a8c:	60a2      	str	r2, [r4, #8]
   82a8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82a90:	701a      	strb	r2, [r3, #0]
			shell.nEscChar++;
   82a92:	89e3      	ldrh	r3, [r4, #14]
   82a94:	3301      	adds	r3, #1
   82a96:	81e3      	strh	r3, [r4, #14]
			shell.crc=CRC16MODBUSbyte(_kbhitchar,shell.crc);
   82a98:	8a21      	ldrh	r1, [r4, #16]
   82a9a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   82a9e:	4b42      	ldr	r3, [pc, #264]	; (82ba8 <Shell+0x7dc>)
   82aa0:	4798      	blx	r3
   82aa2:	8220      	strh	r0, [r4, #16]
	return 0;
   82aa4:	f04f 0800 	mov.w	r8, #0
			break;
   82aa8:	e51e      	b.n	824e8 <Shell+0x11c>
			Putstr("\r\n\t***** case _SHELL_KBHIT: BAD case! ******\r\n");
   82aaa:	4940      	ldr	r1, [pc, #256]	; (82bac <Shell+0x7e0>)
   82aac:	2067      	movs	r0, #103	; 0x67
   82aae:	4b30      	ldr	r3, [pc, #192]	; (82b70 <Shell+0x7a4>)
   82ab0:	4798      	blx	r3
			shell.state=IDLE;
   82ab2:	4b2c      	ldr	r3, [pc, #176]	; (82b64 <Shell+0x798>)
   82ab4:	f04f 0800 	mov.w	r8, #0
   82ab8:	f883 801c 	strb.w	r8, [r3, #28]
			ExitEditMode();
   82abc:	881a      	ldrh	r2, [r3, #0]
   82abe:	f022 0204 	bic.w	r2, r2, #4
   82ac2:	801a      	strh	r2, [r3, #0]
			break;
   82ac4:	e510      	b.n	824e8 <Shell+0x11c>
		if(shell.escapeTimer)
   82ac6:	4b27      	ldr	r3, [pc, #156]	; (82b64 <Shell+0x798>)
   82ac8:	699b      	ldr	r3, [r3, #24]
   82aca:	b1b3      	cbz	r3, 82afa <Shell+0x72e>
			if(--shell.escapeTimer==0)
   82acc:	f103 38ff 	add.w	r8, r3, #4294967295
   82ad0:	4b24      	ldr	r3, [pc, #144]	; (82b64 <Shell+0x798>)
   82ad2:	f8c3 8018 	str.w	r8, [r3, #24]
   82ad6:	f1b8 0f00 	cmp.w	r8, #0
   82ada:	d10e      	bne.n	82afa <Shell+0x72e>
				switch(shell.state)
   82adc:	7f19      	ldrb	r1, [r3, #28]
   82ade:	2905      	cmp	r1, #5
   82ae0:	f200 8264 	bhi.w	82fac <Shell+0xbe0>
   82ae4:	e8df f011 	tbh	[pc, r1, lsl #1]
   82ae8:	00060009 	.word	0x00060009
   82aec:	02620016 	.word	0x02620016
   82af0:	00a10095 	.word	0x00a10095
					shell.state=IDLE;
   82af4:	2200      	movs	r2, #0
   82af6:	4b1b      	ldr	r3, [pc, #108]	; (82b64 <Shell+0x798>)
   82af8:	771a      	strb	r2, [r3, #28]
        if(shell.editTimer)
   82afa:	4b1a      	ldr	r3, [pc, #104]	; (82b64 <Shell+0x798>)
   82afc:	f8d3 8014 	ldr.w	r8, [r3, #20]
   82b00:	f1b8 0f00 	cmp.w	r8, #0
   82b04:	f43f acf0 	beq.w	824e8 <Shell+0x11c>
	        if(--shell.editTimer==0)
   82b08:	f108 32ff 	add.w	r2, r8, #4294967295
   82b0c:	615a      	str	r2, [r3, #20]
	return 0;
   82b0e:	f04f 0800 	mov.w	r8, #0
   82b12:	e4e9      	b.n	824e8 <Shell+0x11c>
					shell.crc=CRC16MODBUSFRAME((unsigned char*)shellEscapeBuf,shell.nEscChar);
   82b14:	4c13      	ldr	r4, [pc, #76]	; (82b64 <Shell+0x798>)
   82b16:	89e1      	ldrh	r1, [r4, #14]
   82b18:	4825      	ldr	r0, [pc, #148]	; (82bb0 <Shell+0x7e4>)
   82b1a:	4b1c      	ldr	r3, [pc, #112]	; (82b8c <Shell+0x7c0>)
   82b1c:	4798      	blx	r3
   82b1e:	b280      	uxth	r0, r0
   82b20:	8220      	strh	r0, [r4, #16]
					switch(shell.crc)
   82b22:	f24c 73f5 	movw	r3, #51189	; 0xc7f5
   82b26:	4298      	cmp	r0, r3
   82b28:	d00c      	beq.n	82b44 <Shell+0x778>
   82b2a:	f24c 73fa 	movw	r3, #51194	; 0xc7fa
   82b2e:	4298      	cmp	r0, r3
   82b30:	d011      	beq.n	82b56 <Shell+0x78a>
						if(mIsBitsSet(shell.status,ST_SHELL_SHOW_UNKNOW_CRC))
   82b32:	4b0c      	ldr	r3, [pc, #48]	; (82b64 <Shell+0x798>)
   82b34:	881b      	ldrh	r3, [r3, #0]
   82b36:	f013 0f02 	tst.w	r3, #2
   82b3a:	d156      	bne.n	82bea <Shell+0x81e>
						shell.state=IDLE;
   82b3c:	2200      	movs	r2, #0
   82b3e:	4b09      	ldr	r3, [pc, #36]	; (82b64 <Shell+0x798>)
   82b40:	771a      	strb	r2, [r3, #28]
						break;
   82b42:	e7da      	b.n	82afa <Shell+0x72e>
						PushTask(_cmd_restart,&shell,restartTimeOut,0);
   82b44:	2300      	movs	r3, #0
   82b46:	9300      	str	r3, [sp, #0]
   82b48:	4b1a      	ldr	r3, [pc, #104]	; (82bb4 <Shell+0x7e8>)
   82b4a:	4a06      	ldr	r2, [pc, #24]	; (82b64 <Shell+0x798>)
   82b4c:	491a      	ldr	r1, [pc, #104]	; (82bb8 <Shell+0x7ec>)
   82b4e:	2066      	movs	r0, #102	; 0x66
   82b50:	4c1a      	ldr	r4, [pc, #104]	; (82bbc <Shell+0x7f0>)
   82b52:	47a0      	blx	r4
						break;
   82b54:	e7d1      	b.n	82afa <Shell+0x72e>
						if(shell.nChar)
   82b56:	4b03      	ldr	r3, [pc, #12]	; (82b64 <Shell+0x798>)
   82b58:	899b      	ldrh	r3, [r3, #12]
   82b5a:	bb8b      	cbnz	r3, 82bc0 <Shell+0x7f4>
							shell.state=IDLE;
   82b5c:	2200      	movs	r2, #0
   82b5e:	4b01      	ldr	r3, [pc, #4]	; (82b64 <Shell+0x798>)
   82b60:	771a      	strb	r2, [r3, #28]
   82b62:	e7ca      	b.n	82afa <Shell+0x72e>
   82b64:	20001d1c 	.word	0x20001d1c
   82b68:	20001c18 	.word	0x20001c18
   82b6c:	0008a2e8 	.word	0x0008a2e8
   82b70:	000834ed 	.word	0x000834ed
   82b74:	0008a2ec 	.word	0x0008a2ec
   82b78:	00083acd 	.word	0x00083acd
   82b7c:	00089f04 	.word	0x00089f04
   82b80:	00083af9 	.word	0x00083af9
   82b84:	0008a240 	.word	0x0008a240
   82b88:	00085241 	.word	0x00085241
   82b8c:	00080ea9 	.word	0x00080ea9
   82b90:	00089c90 	.word	0x00089c90
   82b94:	00083ab5 	.word	0x00083ab5
   82b98:	0008a68c 	.word	0x0008a68c
   82b9c:	20001dbc 	.word	0x20001dbc
   82ba0:	0008a2f4 	.word	0x0008a2f4
   82ba4:	000851f5 	.word	0x000851f5
   82ba8:	00080edd 	.word	0x00080edd
   82bac:	0008a30c 	.word	0x0008a30c
   82bb0:	20001d3c 	.word	0x20001d3c
   82bb4:	0008a390 	.word	0x0008a390
   82bb8:	00083345 	.word	0x00083345
   82bbc:	00083881 	.word	0x00083881
							EnterEditMode();
   82bc0:	4c98      	ldr	r4, [pc, #608]	; (82e24 <Shell+0xa58>)
   82bc2:	8822      	ldrh	r2, [r4, #0]
   82bc4:	f042 0204 	orr.w	r2, r2, #4
   82bc8:	8022      	strh	r2, [r4, #0]
							shell.editTimer=SHELL_EDIT_TIMEOUT;
   82bca:	2200      	movs	r2, #0
   82bcc:	6162      	str	r2, [r4, #20]
							shell.pEdit=shellEditBuf+shell.nChar;
   82bce:	4e96      	ldr	r6, [pc, #600]	; (82e28 <Shell+0xa5c>)
   82bd0:	4433      	add	r3, r6
   82bd2:	6063      	str	r3, [r4, #4]
							Putstr("\r\n");
   82bd4:	4995      	ldr	r1, [pc, #596]	; (82e2c <Shell+0xa60>)
   82bd6:	2067      	movs	r0, #103	; 0x67
   82bd8:	4d95      	ldr	r5, [pc, #596]	; (82e30 <Shell+0xa64>)
   82bda:	47a8      	blx	r5
							Putstrlen(shellEditBuf,shell.nChar);
   82bdc:	89a2      	ldrh	r2, [r4, #12]
   82bde:	4631      	mov	r1, r6
   82be0:	2068      	movs	r0, #104	; 0x68
   82be2:	47a8      	blx	r5
							shell.state=EDITION;
   82be4:	2303      	movs	r3, #3
   82be6:	7723      	strb	r3, [r4, #28]
   82be8:	e787      	b.n	82afa <Shell+0x72e>
							Putstr("\r\n   ESC_SEQ: ");
   82bea:	4992      	ldr	r1, [pc, #584]	; (82e34 <Shell+0xa68>)
   82bec:	2067      	movs	r0, #103	; 0x67
   82bee:	4c90      	ldr	r4, [pc, #576]	; (82e30 <Shell+0xa64>)
   82bf0:	47a0      	blx	r4
							_PutAscii2Hex(shellEscapeBuf,shell.nEscChar);
   82bf2:	4e8c      	ldr	r6, [pc, #560]	; (82e24 <Shell+0xa58>)
   82bf4:	89f2      	ldrh	r2, [r6, #14]
   82bf6:	4990      	ldr	r1, [pc, #576]	; (82e38 <Shell+0xa6c>)
   82bf8:	2005      	movs	r0, #5
   82bfa:	f7ff fbe7 	bl	823cc <Shell>
							sprintf(shellTmpBuf," <%04X>\r\n",shell.crc);
   82bfe:	4d8f      	ldr	r5, [pc, #572]	; (82e3c <Shell+0xa70>)
   82c00:	8a32      	ldrh	r2, [r6, #16]
   82c02:	498f      	ldr	r1, [pc, #572]	; (82e40 <Shell+0xa74>)
   82c04:	4628      	mov	r0, r5
   82c06:	4b8f      	ldr	r3, [pc, #572]	; (82e44 <Shell+0xa78>)
   82c08:	4798      	blx	r3
							Putstr(shellTmpBuf);
   82c0a:	4629      	mov	r1, r5
   82c0c:	2067      	movs	r0, #103	; 0x67
   82c0e:	47a0      	blx	r4
   82c10:	e794      	b.n	82b3c <Shell+0x770>
					Putstr("\e[2K\r");
   82c12:	498d      	ldr	r1, [pc, #564]	; (82e48 <Shell+0xa7c>)
   82c14:	2067      	movs	r0, #103	; 0x67
   82c16:	4b86      	ldr	r3, [pc, #536]	; (82e30 <Shell+0xa64>)
   82c18:	4798      	blx	r3
					shell.state=IDLE;
   82c1a:	4b82      	ldr	r3, [pc, #520]	; (82e24 <Shell+0xa58>)
   82c1c:	2200      	movs	r2, #0
   82c1e:	771a      	strb	r2, [r3, #28]
					ExitEditMode();
   82c20:	881a      	ldrh	r2, [r3, #0]
   82c22:	f022 0204 	bic.w	r2, r2, #4
   82c26:	801a      	strh	r2, [r3, #0]
					break;
   82c28:	e767      	b.n	82afa <Shell+0x72e>
					shell.crc=CRC16MODBUSFRAME((unsigned char*)shellEscapeBuf,shell.nEscChar);
   82c2a:	4c7e      	ldr	r4, [pc, #504]	; (82e24 <Shell+0xa58>)
   82c2c:	89e1      	ldrh	r1, [r4, #14]
   82c2e:	4882      	ldr	r0, [pc, #520]	; (82e38 <Shell+0xa6c>)
   82c30:	4b86      	ldr	r3, [pc, #536]	; (82e4c <Shell+0xa80>)
   82c32:	4798      	blx	r3
   82c34:	b280      	uxth	r0, r0
   82c36:	8220      	strh	r0, [r4, #16]
					switch(shell.crc)
   82c38:	f24c 133a 	movw	r3, #49466	; 0xc13a
   82c3c:	4298      	cmp	r0, r3
   82c3e:	f000 810d 	beq.w	82e5c <Shell+0xa90>
   82c42:	d832      	bhi.n	82caa <Shell+0x8de>
   82c44:	f245 33e2 	movw	r3, #21474	; 0x53e2
   82c48:	4298      	cmp	r0, r3
   82c4a:	f000 80e0 	beq.w	82e0e <Shell+0xa42>
   82c4e:	d81d      	bhi.n	82c8c <Shell+0x8c0>
   82c50:	f240 53bb 	movw	r3, #1467	; 0x5bb
   82c54:	4298      	cmp	r0, r3
   82c56:	f000 811c 	beq.w	82e92 <Shell+0xac6>
   82c5a:	f240 637b 	movw	r3, #1659	; 0x67b
   82c5e:	4298      	cmp	r0, r3
   82c60:	d11d      	bne.n	82c9e <Shell+0x8d2>
						if(shell.pEdit<(shellEditBuf+shell.nChar))
   82c62:	4a70      	ldr	r2, [pc, #448]	; (82e24 <Shell+0xa58>)
   82c64:	8993      	ldrh	r3, [r2, #12]
   82c66:	4970      	ldr	r1, [pc, #448]	; (82e28 <Shell+0xa5c>)
   82c68:	440b      	add	r3, r1
   82c6a:	6852      	ldr	r2, [r2, #4]
   82c6c:	429a      	cmp	r2, r3
   82c6e:	d207      	bcs.n	82c80 <Shell+0x8b4>
							Putstr("\e[C");
   82c70:	4977      	ldr	r1, [pc, #476]	; (82e50 <Shell+0xa84>)
   82c72:	2067      	movs	r0, #103	; 0x67
   82c74:	4b6e      	ldr	r3, [pc, #440]	; (82e30 <Shell+0xa64>)
   82c76:	4798      	blx	r3
							shell.pEdit++;
   82c78:	4a6a      	ldr	r2, [pc, #424]	; (82e24 <Shell+0xa58>)
   82c7a:	6853      	ldr	r3, [r2, #4]
   82c7c:	3301      	adds	r3, #1
   82c7e:	6053      	str	r3, [r2, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82c80:	4b68      	ldr	r3, [pc, #416]	; (82e24 <Shell+0xa58>)
   82c82:	2200      	movs	r2, #0
   82c84:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82c86:	2203      	movs	r2, #3
   82c88:	771a      	strb	r2, [r3, #28]
						break;
   82c8a:	e42d      	b.n	824e8 <Shell+0x11c>
					switch(shell.crc)
   82c8c:	f646 730e 	movw	r3, #28430	; 0x6f0e
   82c90:	4298      	cmp	r0, r3
   82c92:	d033      	beq.n	82cfc <Shell+0x930>
   82c94:	f64a 534f 	movw	r3, #44367	; 0xad4f
   82c98:	4298      	cmp	r0, r3
   82c9a:	f000 8149 	beq.w	82f30 <Shell+0xb64>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82c9e:	4b61      	ldr	r3, [pc, #388]	; (82e24 <Shell+0xa58>)
   82ca0:	2200      	movs	r2, #0
   82ca2:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82ca4:	2203      	movs	r2, #3
   82ca6:	771a      	strb	r2, [r3, #28]
						break;
   82ca8:	e41e      	b.n	824e8 <Shell+0x11c>
					switch(shell.crc)
   82caa:	f24c 63ba 	movw	r3, #50874	; 0xc6ba
   82cae:	4298      	cmp	r0, r3
   82cb0:	d064      	beq.n	82d7c <Shell+0x9b0>
   82cb2:	d81b      	bhi.n	82cec <Shell+0x920>
   82cb4:	f24c 33e3 	movw	r3, #50147	; 0xc3e3
   82cb8:	4298      	cmp	r0, r3
   82cba:	d072      	beq.n	82da2 <Shell+0x9d6>
   82cbc:	f24c 433a 	movw	r3, #50234	; 0xc43a
   82cc0:	4298      	cmp	r0, r3
   82cc2:	d1ec      	bne.n	82c9e <Shell+0x8d2>
						if(shell.pEdit>shellEditBuf)
   82cc4:	4b57      	ldr	r3, [pc, #348]	; (82e24 <Shell+0xa58>)
   82cc6:	685a      	ldr	r2, [r3, #4]
   82cc8:	4b57      	ldr	r3, [pc, #348]	; (82e28 <Shell+0xa5c>)
   82cca:	429a      	cmp	r2, r3
   82ccc:	d907      	bls.n	82cde <Shell+0x912>
							Putstr("\e[D");
   82cce:	4961      	ldr	r1, [pc, #388]	; (82e54 <Shell+0xa88>)
   82cd0:	2067      	movs	r0, #103	; 0x67
   82cd2:	4b57      	ldr	r3, [pc, #348]	; (82e30 <Shell+0xa64>)
   82cd4:	4798      	blx	r3
							shell.pEdit--;
   82cd6:	4a53      	ldr	r2, [pc, #332]	; (82e24 <Shell+0xa58>)
   82cd8:	6853      	ldr	r3, [r2, #4]
   82cda:	3b01      	subs	r3, #1
   82cdc:	6053      	str	r3, [r2, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82cde:	4b51      	ldr	r3, [pc, #324]	; (82e24 <Shell+0xa58>)
   82ce0:	2200      	movs	r2, #0
   82ce2:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82ce4:	2203      	movs	r2, #3
   82ce6:	771a      	strb	r2, [r3, #28]
						break;
   82ce8:	f7ff bbfe 	b.w	824e8 <Shell+0x11c>
					switch(shell.crc)
   82cec:	f24c 73f5 	movw	r3, #51189	; 0xc7f5
   82cf0:	4298      	cmp	r0, r3
   82cf2:	d04f      	beq.n	82d94 <Shell+0x9c8>
   82cf4:	f64c 43ba 	movw	r3, #52410	; 0xccba
   82cf8:	4298      	cmp	r0, r3
   82cfa:	d1d0      	bne.n	82c9e <Shell+0x8d2>
						if((shell.nChar&&(shell.pEdit==shellEditBuf+shell.nChar)) ||
   82cfc:	4b49      	ldr	r3, [pc, #292]	; (82e24 <Shell+0xa58>)
   82cfe:	899b      	ldrh	r3, [r3, #12]
   82d00:	b12b      	cbz	r3, 82d0e <Shell+0x942>
   82d02:	4a49      	ldr	r2, [pc, #292]	; (82e28 <Shell+0xa5c>)
   82d04:	4413      	add	r3, r2
   82d06:	4a47      	ldr	r2, [pc, #284]	; (82e24 <Shell+0xa58>)
   82d08:	6852      	ldr	r2, [r2, #4]
   82d0a:	429a      	cmp	r2, r3
   82d0c:	d015      	beq.n	82d3a <Shell+0x96e>
						(((shell.pEdit-1)>=shellEditBuf)&&(_IsSeparator(*(shell.pEdit-1),separators))&&(!_IsSeparator(*shell.pEdit,separators))))
   82d0e:	4b45      	ldr	r3, [pc, #276]	; (82e24 <Shell+0xa58>)
   82d10:	685b      	ldr	r3, [r3, #4]
   82d12:	1e59      	subs	r1, r3, #1
						if((shell.nChar&&(shell.pEdit==shellEditBuf+shell.nChar)) ||
   82d14:	4a44      	ldr	r2, [pc, #272]	; (82e28 <Shell+0xa5c>)
   82d16:	4291      	cmp	r1, r2
   82d18:	d317      	bcc.n	82d4a <Shell+0x97e>
						(((shell.pEdit-1)>=shellEditBuf)&&(_IsSeparator(*(shell.pEdit-1),separators))&&(!_IsSeparator(*shell.pEdit,separators))))
   82d1a:	4c4f      	ldr	r4, [pc, #316]	; (82e58 <Shell+0xa8c>)
   82d1c:	4622      	mov	r2, r4
   82d1e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   82d22:	2006      	movs	r0, #6
   82d24:	f7ff fb52 	bl	823cc <Shell>
   82d28:	b178      	cbz	r0, 82d4a <Shell+0x97e>
   82d2a:	4b3e      	ldr	r3, [pc, #248]	; (82e24 <Shell+0xa58>)
   82d2c:	685b      	ldr	r3, [r3, #4]
   82d2e:	4622      	mov	r2, r4
   82d30:	7819      	ldrb	r1, [r3, #0]
   82d32:	2006      	movs	r0, #6
   82d34:	f7ff fb4a 	bl	823cc <Shell>
   82d38:	b938      	cbnz	r0, 82d4a <Shell+0x97e>
							shell.pEdit--; Putstr("\e[D");
   82d3a:	4a3a      	ldr	r2, [pc, #232]	; (82e24 <Shell+0xa58>)
   82d3c:	6853      	ldr	r3, [r2, #4]
   82d3e:	3b01      	subs	r3, #1
   82d40:	6053      	str	r3, [r2, #4]
   82d42:	4944      	ldr	r1, [pc, #272]	; (82e54 <Shell+0xa88>)
   82d44:	2067      	movs	r0, #103	; 0x67
   82d46:	4b3a      	ldr	r3, [pc, #232]	; (82e30 <Shell+0xa64>)
   82d48:	4798      	blx	r3
						if(_IsSeparator(*shell.pEdit,separators))
   82d4a:	4d43      	ldr	r5, [pc, #268]	; (82e58 <Shell+0xa8c>)
   82d4c:	4b35      	ldr	r3, [pc, #212]	; (82e24 <Shell+0xa58>)
   82d4e:	685b      	ldr	r3, [r3, #4]
   82d50:	462a      	mov	r2, r5
   82d52:	7819      	ldrb	r1, [r3, #0]
   82d54:	2006      	movs	r0, #6
   82d56:	f7ff fb39 	bl	823cc <Shell>
   82d5a:	2800      	cmp	r0, #0
   82d5c:	f040 80cb 	bne.w	82ef6 <Shell+0xb2a>
						while(((shell.pEdit-1)>=shellEditBuf)&&(!_IsSeparator(*(shell.pEdit-1),separators)))
   82d60:	4b30      	ldr	r3, [pc, #192]	; (82e24 <Shell+0xa58>)
   82d62:	685b      	ldr	r3, [r3, #4]
   82d64:	1e59      	subs	r1, r3, #1
   82d66:	4a30      	ldr	r2, [pc, #192]	; (82e28 <Shell+0xa5c>)
   82d68:	4291      	cmp	r1, r2
   82d6a:	f080 80dd 	bcs.w	82f28 <Shell+0xb5c>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82d6e:	4b2d      	ldr	r3, [pc, #180]	; (82e24 <Shell+0xa58>)
   82d70:	2200      	movs	r2, #0
   82d72:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82d74:	2203      	movs	r2, #3
   82d76:	771a      	strb	r2, [r3, #28]
						break;
   82d78:	f7ff bbb6 	b.w	824e8 <Shell+0x11c>
						Putstr("\e[2K\r");
   82d7c:	4932      	ldr	r1, [pc, #200]	; (82e48 <Shell+0xa7c>)
   82d7e:	2067      	movs	r0, #103	; 0x67
   82d80:	4b2b      	ldr	r3, [pc, #172]	; (82e30 <Shell+0xa64>)
   82d82:	4798      	blx	r3
						ExitEditMode();
   82d84:	4b27      	ldr	r3, [pc, #156]	; (82e24 <Shell+0xa58>)
   82d86:	881a      	ldrh	r2, [r3, #0]
   82d88:	f022 0204 	bic.w	r2, r2, #4
   82d8c:	801a      	strh	r2, [r3, #0]
						shell.state=IDLE;
   82d8e:	2200      	movs	r2, #0
   82d90:	771a      	strb	r2, [r3, #28]
						break;
   82d92:	e6b2      	b.n	82afa <Shell+0x72e>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82d94:	4b23      	ldr	r3, [pc, #140]	; (82e24 <Shell+0xa58>)
   82d96:	2200      	movs	r2, #0
   82d98:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82d9a:	2203      	movs	r2, #3
   82d9c:	771a      	strb	r2, [r3, #28]
						break;
   82d9e:	f7ff bba3 	b.w	824e8 <Shell+0x11c>
						pSrc=(uint32_t)shell.pEdit+1;
   82da2:	4a20      	ldr	r2, [pc, #128]	; (82e24 <Shell+0xa58>)
   82da4:	6853      	ldr	r3, [r2, #4]
   82da6:	3301      	adds	r3, #1
   82da8:	930e      	str	r3, [sp, #56]	; 0x38
						while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82daa:	491f      	ldr	r1, [pc, #124]	; (82e28 <Shell+0xa5c>)
   82dac:	8992      	ldrh	r2, [r2, #12]
   82dae:	440a      	add	r2, r1
   82db0:	4293      	cmp	r3, r2
   82db2:	d20a      	bcs.n	82dca <Shell+0x9fe>
   82db4:	481b      	ldr	r0, [pc, #108]	; (82e24 <Shell+0xa58>)
							*(char*)(pSrc-1)=*(char*)pSrc; pSrc++;
   82db6:	781a      	ldrb	r2, [r3, #0]
   82db8:	f803 2c01 	strb.w	r2, [r3, #-1]
   82dbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82dbe:	3301      	adds	r3, #1
   82dc0:	930e      	str	r3, [sp, #56]	; 0x38
						while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82dc2:	8982      	ldrh	r2, [r0, #12]
   82dc4:	440a      	add	r2, r1
   82dc6:	429a      	cmp	r2, r3
   82dc8:	d8f5      	bhi.n	82db6 <Shell+0x9ea>
						*(char*)(pSrc-1)=' ';
   82dca:	2220      	movs	r2, #32
   82dcc:	f803 2c01 	strb.w	r2, [r3, #-1]
	                    k=Putstrlen(shell.pEdit,pSrc-(uint32_t)shell.pEdit);
   82dd0:	4b14      	ldr	r3, [pc, #80]	; (82e24 <Shell+0xa58>)
   82dd2:	6859      	ldr	r1, [r3, #4]
   82dd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82dd6:	1a52      	subs	r2, r2, r1
   82dd8:	2068      	movs	r0, #104	; 0x68
   82dda:	4b15      	ldr	r3, [pc, #84]	; (82e30 <Shell+0xa64>)
   82ddc:	4798      	blx	r3
		                while(k--) Putstr("\e[D");
   82dde:	1e43      	subs	r3, r0, #1
   82de0:	930e      	str	r3, [sp, #56]	; 0x38
   82de2:	b150      	cbz	r0, 82dfa <Shell+0xa2e>
   82de4:	4e1b      	ldr	r6, [pc, #108]	; (82e54 <Shell+0xa88>)
   82de6:	2567      	movs	r5, #103	; 0x67
   82de8:	4c11      	ldr	r4, [pc, #68]	; (82e30 <Shell+0xa64>)
   82dea:	4631      	mov	r1, r6
   82dec:	4628      	mov	r0, r5
   82dee:	47a0      	blx	r4
   82df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82df2:	1e5a      	subs	r2, r3, #1
   82df4:	920e      	str	r2, [sp, #56]	; 0x38
   82df6:	2b00      	cmp	r3, #0
   82df8:	d1f7      	bne.n	82dea <Shell+0xa1e>
			            shell.nChar--;
   82dfa:	4b0a      	ldr	r3, [pc, #40]	; (82e24 <Shell+0xa58>)
   82dfc:	899a      	ldrh	r2, [r3, #12]
   82dfe:	3a01      	subs	r2, #1
   82e00:	819a      	strh	r2, [r3, #12]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82e02:	2200      	movs	r2, #0
   82e04:	615a      	str	r2, [r3, #20]
				        shell.state=EDITION;
   82e06:	2203      	movs	r2, #3
   82e08:	771a      	strb	r2, [r3, #28]
					    break;
   82e0a:	f7ff bb6d 	b.w	824e8 <Shell+0x11c>
						mBitsTgl(shell.status,ST_SHELL_INSERT_MODE);
   82e0e:	4b05      	ldr	r3, [pc, #20]	; (82e24 <Shell+0xa58>)
   82e10:	881a      	ldrh	r2, [r3, #0]
   82e12:	f082 0201 	eor.w	r2, r2, #1
   82e16:	801a      	strh	r2, [r3, #0]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82e18:	2200      	movs	r2, #0
   82e1a:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82e1c:	2203      	movs	r2, #3
   82e1e:	771a      	strb	r2, [r3, #28]
						break;
   82e20:	f7ff bb62 	b.w	824e8 <Shell+0x11c>
   82e24:	20001d1c 	.word	0x20001d1c
   82e28:	20001c18 	.word	0x20001c18
   82e2c:	0008a240 	.word	0x0008a240
   82e30:	000834ed 	.word	0x000834ed
   82e34:	0008a33c 	.word	0x0008a33c
   82e38:	20001d3c 	.word	0x20001d3c
   82e3c:	20001dbc 	.word	0x20001dbc
   82e40:	0008a34c 	.word	0x0008a34c
   82e44:	000851f5 	.word	0x000851f5
   82e48:	0008a358 	.word	0x0008a358
   82e4c:	00080ea9 	.word	0x00080ea9
   82e50:	0008a2e8 	.word	0x0008a2e8
   82e54:	0008a2e4 	.word	0x0008a2e4
   82e58:	0008a394 	.word	0x0008a394
						k=(shell.pEdit-shellEditBuf);
   82e5c:	4b9f      	ldr	r3, [pc, #636]	; (830dc <Shell+0xd10>)
   82e5e:	685b      	ldr	r3, [r3, #4]
   82e60:	4a9f      	ldr	r2, [pc, #636]	; (830e0 <Shell+0xd14>)
   82e62:	1a9b      	subs	r3, r3, r2
						while(k--) Putstr("\e[D");
   82e64:	1e5a      	subs	r2, r3, #1
   82e66:	920e      	str	r2, [sp, #56]	; 0x38
   82e68:	b153      	cbz	r3, 82e80 <Shell+0xab4>
   82e6a:	4e9e      	ldr	r6, [pc, #632]	; (830e4 <Shell+0xd18>)
   82e6c:	2567      	movs	r5, #103	; 0x67
   82e6e:	4c9e      	ldr	r4, [pc, #632]	; (830e8 <Shell+0xd1c>)
   82e70:	4631      	mov	r1, r6
   82e72:	4628      	mov	r0, r5
   82e74:	47a0      	blx	r4
   82e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82e78:	1e5a      	subs	r2, r3, #1
   82e7a:	920e      	str	r2, [sp, #56]	; 0x38
   82e7c:	2b00      	cmp	r3, #0
   82e7e:	d1f7      	bne.n	82e70 <Shell+0xaa4>
						shell.pEdit=shellEditBuf;
   82e80:	4b96      	ldr	r3, [pc, #600]	; (830dc <Shell+0xd10>)
   82e82:	4a97      	ldr	r2, [pc, #604]	; (830e0 <Shell+0xd14>)
   82e84:	605a      	str	r2, [r3, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82e86:	2200      	movs	r2, #0
   82e88:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82e8a:	2203      	movs	r2, #3
   82e8c:	771a      	strb	r2, [r3, #28]
						break;
   82e8e:	f7ff bb2b 	b.w	824e8 <Shell+0x11c>
						k=((shellEditBuf+shell.nChar)-shell.pEdit);
   82e92:	4a92      	ldr	r2, [pc, #584]	; (830dc <Shell+0xd10>)
   82e94:	8993      	ldrh	r3, [r2, #12]
   82e96:	4992      	ldr	r1, [pc, #584]	; (830e0 <Shell+0xd14>)
   82e98:	440b      	add	r3, r1
   82e9a:	6852      	ldr	r2, [r2, #4]
   82e9c:	1a9b      	subs	r3, r3, r2
						while(k--) Putstr("\e[C");
   82e9e:	1e5a      	subs	r2, r3, #1
   82ea0:	920e      	str	r2, [sp, #56]	; 0x38
   82ea2:	b153      	cbz	r3, 82eba <Shell+0xaee>
   82ea4:	4e91      	ldr	r6, [pc, #580]	; (830ec <Shell+0xd20>)
   82ea6:	2567      	movs	r5, #103	; 0x67
   82ea8:	4c8f      	ldr	r4, [pc, #572]	; (830e8 <Shell+0xd1c>)
   82eaa:	4631      	mov	r1, r6
   82eac:	4628      	mov	r0, r5
   82eae:	47a0      	blx	r4
   82eb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82eb2:	1e5a      	subs	r2, r3, #1
   82eb4:	920e      	str	r2, [sp, #56]	; 0x38
   82eb6:	2b00      	cmp	r3, #0
   82eb8:	d1f7      	bne.n	82eaa <Shell+0xade>
						shell.pEdit=shellEditBuf+shell.nChar;
   82eba:	4b88      	ldr	r3, [pc, #544]	; (830dc <Shell+0xd10>)
   82ebc:	899a      	ldrh	r2, [r3, #12]
   82ebe:	4988      	ldr	r1, [pc, #544]	; (830e0 <Shell+0xd14>)
   82ec0:	440a      	add	r2, r1
   82ec2:	605a      	str	r2, [r3, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82ec4:	2200      	movs	r2, #0
   82ec6:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82ec8:	2203      	movs	r2, #3
   82eca:	771a      	strb	r2, [r3, #28]
						break;
   82ecc:	f7ff bb0c 	b.w	824e8 <Shell+0x11c>
								shell.pEdit--;
   82ed0:	3b01      	subs	r3, #1
   82ed2:	6063      	str	r3, [r4, #4]
								Putstr("\e[D");
   82ed4:	4631      	mov	r1, r6
   82ed6:	2067      	movs	r0, #103	; 0x67
   82ed8:	4b83      	ldr	r3, [pc, #524]	; (830e8 <Shell+0xd1c>)
   82eda:	4798      	blx	r3
							while((_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit>shellEditBuf))
   82edc:	6863      	ldr	r3, [r4, #4]
   82ede:	462a      	mov	r2, r5
   82ee0:	7819      	ldrb	r1, [r3, #0]
   82ee2:	2006      	movs	r0, #6
   82ee4:	f7ff fa72 	bl	823cc <Shell>
   82ee8:	2800      	cmp	r0, #0
   82eea:	f43f af39 	beq.w	82d60 <Shell+0x994>
   82eee:	6863      	ldr	r3, [r4, #4]
   82ef0:	42bb      	cmp	r3, r7
   82ef2:	d8ed      	bhi.n	82ed0 <Shell+0xb04>
   82ef4:	e734      	b.n	82d60 <Shell+0x994>
   82ef6:	4c79      	ldr	r4, [pc, #484]	; (830dc <Shell+0xd10>)
   82ef8:	4f79      	ldr	r7, [pc, #484]	; (830e0 <Shell+0xd14>)
								Putstr("\e[D");
   82efa:	4e7a      	ldr	r6, [pc, #488]	; (830e4 <Shell+0xd18>)
   82efc:	e7ee      	b.n	82edc <Shell+0xb10>
							shell.pEdit--;
   82efe:	6863      	ldr	r3, [r4, #4]
   82f00:	3b01      	subs	r3, #1
   82f02:	6063      	str	r3, [r4, #4]
							Putstr("\e[D");
   82f04:	4639      	mov	r1, r7
   82f06:	2067      	movs	r0, #103	; 0x67
   82f08:	47b0      	blx	r6
						while(((shell.pEdit-1)>=shellEditBuf)&&(!_IsSeparator(*(shell.pEdit-1),separators)))
   82f0a:	6863      	ldr	r3, [r4, #4]
   82f0c:	1e59      	subs	r1, r3, #1
   82f0e:	4a74      	ldr	r2, [pc, #464]	; (830e0 <Shell+0xd14>)
   82f10:	4291      	cmp	r1, r2
   82f12:	f4ff af2c 	bcc.w	82d6e <Shell+0x9a2>
   82f16:	462a      	mov	r2, r5
   82f18:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   82f1c:	2006      	movs	r0, #6
   82f1e:	f7ff fa55 	bl	823cc <Shell>
   82f22:	2800      	cmp	r0, #0
   82f24:	d0eb      	beq.n	82efe <Shell+0xb32>
   82f26:	e722      	b.n	82d6e <Shell+0x9a2>
							shell.pEdit--;
   82f28:	4c6c      	ldr	r4, [pc, #432]	; (830dc <Shell+0xd10>)
							Putstr("\e[D");
   82f2a:	4f6e      	ldr	r7, [pc, #440]	; (830e4 <Shell+0xd18>)
   82f2c:	4e6e      	ldr	r6, [pc, #440]	; (830e8 <Shell+0xd1c>)
   82f2e:	e7f2      	b.n	82f16 <Shell+0xb4a>
						if(!_IsSeparator(*shell.pEdit,separators))
   82f30:	4d6f      	ldr	r5, [pc, #444]	; (830f0 <Shell+0xd24>)
   82f32:	4b6a      	ldr	r3, [pc, #424]	; (830dc <Shell+0xd10>)
   82f34:	685b      	ldr	r3, [r3, #4]
   82f36:	462a      	mov	r2, r5
   82f38:	7819      	ldrb	r1, [r3, #0]
   82f3a:	2006      	movs	r0, #6
   82f3c:	f7ff fa46 	bl	823cc <Shell>
   82f40:	b1b8      	cbz	r0, 82f72 <Shell+0xba6>
						while((_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit<shellEditBuf+shell.nChar))
   82f42:	4c66      	ldr	r4, [pc, #408]	; (830dc <Shell+0xd10>)
   82f44:	4f66      	ldr	r7, [pc, #408]	; (830e0 <Shell+0xd14>)
							Putstr("\e[C");
   82f46:	4e69      	ldr	r6, [pc, #420]	; (830ec <Shell+0xd20>)
   82f48:	e01d      	b.n	82f86 <Shell+0xbba>
								shell.pEdit++;
   82f4a:	3301      	adds	r3, #1
   82f4c:	6063      	str	r3, [r4, #4]
								Putstr("\e[C");
   82f4e:	4631      	mov	r1, r6
   82f50:	2067      	movs	r0, #103	; 0x67
   82f52:	4b65      	ldr	r3, [pc, #404]	; (830e8 <Shell+0xd1c>)
   82f54:	4798      	blx	r3
							while((!_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit<shellEditBuf+shell.nChar))
   82f56:	6863      	ldr	r3, [r4, #4]
   82f58:	462a      	mov	r2, r5
   82f5a:	7819      	ldrb	r1, [r3, #0]
   82f5c:	2006      	movs	r0, #6
   82f5e:	f7ff fa35 	bl	823cc <Shell>
   82f62:	2800      	cmp	r0, #0
   82f64:	d1ed      	bne.n	82f42 <Shell+0xb76>
   82f66:	6863      	ldr	r3, [r4, #4]
   82f68:	89a2      	ldrh	r2, [r4, #12]
   82f6a:	443a      	add	r2, r7
   82f6c:	4293      	cmp	r3, r2
   82f6e:	d3ec      	bcc.n	82f4a <Shell+0xb7e>
   82f70:	e7e7      	b.n	82f42 <Shell+0xb76>
   82f72:	4c5a      	ldr	r4, [pc, #360]	; (830dc <Shell+0xd10>)
   82f74:	4f5a      	ldr	r7, [pc, #360]	; (830e0 <Shell+0xd14>)
								Putstr("\e[C");
   82f76:	4e5d      	ldr	r6, [pc, #372]	; (830ec <Shell+0xd20>)
   82f78:	e7ed      	b.n	82f56 <Shell+0xb8a>
							shell.pEdit++;
   82f7a:	3301      	adds	r3, #1
   82f7c:	6063      	str	r3, [r4, #4]
							Putstr("\e[C");
   82f7e:	4631      	mov	r1, r6
   82f80:	2067      	movs	r0, #103	; 0x67
   82f82:	4b59      	ldr	r3, [pc, #356]	; (830e8 <Shell+0xd1c>)
   82f84:	4798      	blx	r3
						while((_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit<shellEditBuf+shell.nChar))
   82f86:	6863      	ldr	r3, [r4, #4]
   82f88:	462a      	mov	r2, r5
   82f8a:	7819      	ldrb	r1, [r3, #0]
   82f8c:	2006      	movs	r0, #6
   82f8e:	f7ff fa1d 	bl	823cc <Shell>
   82f92:	b120      	cbz	r0, 82f9e <Shell+0xbd2>
   82f94:	6863      	ldr	r3, [r4, #4]
   82f96:	89a2      	ldrh	r2, [r4, #12]
   82f98:	443a      	add	r2, r7
   82f9a:	4293      	cmp	r3, r2
   82f9c:	d3ed      	bcc.n	82f7a <Shell+0xbae>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   82f9e:	4b4f      	ldr	r3, [pc, #316]	; (830dc <Shell+0xd10>)
   82fa0:	2200      	movs	r2, #0
   82fa2:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   82fa4:	2203      	movs	r2, #3
   82fa6:	771a      	strb	r2, [r3, #28]
						break;
   82fa8:	f7ff ba9e 	b.w	824e8 <Shell+0x11c>
					Error(ERROR_SHELL_TIMER_ESC_BAD_SATE,shell.state);
   82fac:	2029      	movs	r0, #41	; 0x29
   82fae:	4b51      	ldr	r3, [pc, #324]	; (830f4 <Shell+0xd28>)
   82fb0:	4798      	blx	r3
   82fb2:	e5a2      	b.n	82afa <Shell+0x72e>
		pSrc=(uint32_t)shellEditBuf;
   82fb4:	4d4a      	ldr	r5, [pc, #296]	; (830e0 <Shell+0xd14>)
   82fb6:	950e      	str	r5, [sp, #56]	; 0x38
		while(_IsSeparator(*(char*)pSrc,separators)) pSrc++;
   82fb8:	4e4d      	ldr	r6, [pc, #308]	; (830f0 <Shell+0xd24>)
   82fba:	2406      	movs	r4, #6
   82fbc:	4632      	mov	r2, r6
   82fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82fc0:	7819      	ldrb	r1, [r3, #0]
   82fc2:	4620      	mov	r0, r4
   82fc4:	f7ff fa02 	bl	823cc <Shell>
   82fc8:	4680      	mov	r8, r0
   82fca:	b118      	cbz	r0, 82fd4 <Shell+0xc08>
   82fcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82fce:	3301      	adds	r3, #1
   82fd0:	930e      	str	r3, [sp, #56]	; 0x38
   82fd2:	e7f3      	b.n	82fbc <Shell+0xbf0>
		k=pSrc-(uint32_t)shellEditBuf;
   82fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82fd6:	1b5a      	subs	r2, r3, r5
   82fd8:	9205      	str	r2, [sp, #20]
		if(k)
   82fda:	b19a      	cbz	r2, 83004 <Shell+0xc38>
			shell.pEdit=shellEditBuf;
   82fdc:	4a3f      	ldr	r2, [pc, #252]	; (830dc <Shell+0xd10>)
   82fde:	4940      	ldr	r1, [pc, #256]	; (830e0 <Shell+0xd14>)
   82fe0:	6051      	str	r1, [r2, #4]
			while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82fe2:	8992      	ldrh	r2, [r2, #12]
   82fe4:	442a      	add	r2, r5
   82fe6:	4293      	cmp	r3, r2
   82fe8:	d20c      	bcs.n	83004 <Shell+0xc38>
				*shell.pEdit++=*(char*)pSrc++;
   82fea:	493c      	ldr	r1, [pc, #240]	; (830dc <Shell+0xd10>)
   82fec:	684a      	ldr	r2, [r1, #4]
   82fee:	1c50      	adds	r0, r2, #1
   82ff0:	6048      	str	r0, [r1, #4]
   82ff2:	1c58      	adds	r0, r3, #1
   82ff4:	900e      	str	r0, [sp, #56]	; 0x38
   82ff6:	781b      	ldrb	r3, [r3, #0]
   82ff8:	7013      	strb	r3, [r2, #0]
			while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   82ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82ffc:	898a      	ldrh	r2, [r1, #12]
   82ffe:	442a      	add	r2, r5
   83000:	429a      	cmp	r2, r3
   83002:	d8f3      	bhi.n	82fec <Shell+0xc20>
		pSrc=(uint32_t)shellEditBuf+k;
   83004:	9905      	ldr	r1, [sp, #20]
   83006:	186b      	adds	r3, r5, r1
   83008:	930e      	str	r3, [sp, #56]	; 0x38
		shell.nChar-=k;
   8300a:	4a34      	ldr	r2, [pc, #208]	; (830dc <Shell+0xd10>)
   8300c:	8993      	ldrh	r3, [r2, #12]
   8300e:	1a5b      	subs	r3, r3, r1
   83010:	8193      	strh	r3, [r2, #12]
		while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   83012:	4614      	mov	r4, r2
			while((pSrc<(uint32_t)shellEditBuf+shell.nChar)&&(!_IsSeparator(*(char*)pSrc,separators))) pSrc++;
   83014:	2706      	movs	r7, #6
		while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   83016:	e004      	b.n	83022 <Shell+0xc56>
			if(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   83018:	89a3      	ldrh	r3, [r4, #12]
   8301a:	442b      	add	r3, r5
   8301c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8301e:	4293      	cmp	r3, r2
   83020:	d814      	bhi.n	8304c <Shell+0xc80>
		while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   83022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83024:	89a2      	ldrh	r2, [r4, #12]
   83026:	442a      	add	r2, r5
   83028:	429a      	cmp	r2, r3
   8302a:	f67f aa5d 	bls.w	824e8 <Shell+0x11c>
			while((pSrc<(uint32_t)shellEditBuf+shell.nChar)&&(!_IsSeparator(*(char*)pSrc,separators))) pSrc++;
   8302e:	4632      	mov	r2, r6
   83030:	7819      	ldrb	r1, [r3, #0]
   83032:	4638      	mov	r0, r7
   83034:	f7ff f9ca 	bl	823cc <Shell>
   83038:	2800      	cmp	r0, #0
   8303a:	d1ed      	bne.n	83018 <Shell+0xc4c>
   8303c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8303e:	3301      	adds	r3, #1
   83040:	930e      	str	r3, [sp, #56]	; 0x38
   83042:	89a2      	ldrh	r2, [r4, #12]
   83044:	442a      	add	r2, r5
   83046:	429a      	cmp	r2, r3
   83048:	d8f1      	bhi.n	8302e <Shell+0xc62>
   8304a:	e7ea      	b.n	83022 <Shell+0xc56>
				pSrc++; pSt=shell.pEdit=(char*)pSrc;
   8304c:	f102 0901 	add.w	r9, r2, #1
   83050:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   83054:	f8c4 9004 	str.w	r9, [r4, #4]
				while((pSrc<(uint32_t)shellEditBuf+shell.nChar)&&(_IsSeparator(*(char*)pSrc,separators))) pSrc++;
   83058:	454b      	cmp	r3, r9
   8305a:	bf88      	it	hi
   8305c:	464b      	movhi	r3, r9
   8305e:	d90c      	bls.n	8307a <Shell+0xcae>
   83060:	4632      	mov	r2, r6
   83062:	7819      	ldrb	r1, [r3, #0]
   83064:	4638      	mov	r0, r7
   83066:	f7ff f9b1 	bl	823cc <Shell>
   8306a:	b130      	cbz	r0, 8307a <Shell+0xcae>
   8306c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8306e:	3301      	adds	r3, #1
   83070:	930e      	str	r3, [sp, #56]	; 0x38
   83072:	89a2      	ldrh	r2, [r4, #12]
   83074:	442a      	add	r2, r5
   83076:	429a      	cmp	r2, r3
   83078:	d8f2      	bhi.n	83060 <Shell+0xc94>
				k=pSrc-(uint32_t)shell.pEdit;
   8307a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8307c:	6861      	ldr	r1, [r4, #4]
   8307e:	1a59      	subs	r1, r3, r1
   83080:	9105      	str	r1, [sp, #20]
				while(k && pSrc<(uint32_t)shellEditBuf+shell.nChar)
   83082:	b189      	cbz	r1, 830a8 <Shell+0xcdc>
   83084:	89a2      	ldrh	r2, [r4, #12]
   83086:	442a      	add	r2, r5
   83088:	4293      	cmp	r3, r2
   8308a:	d20d      	bcs.n	830a8 <Shell+0xcdc>
					*shell.pEdit++=*(char*)pSrc++;
   8308c:	6862      	ldr	r2, [r4, #4]
   8308e:	1c51      	adds	r1, r2, #1
   83090:	6061      	str	r1, [r4, #4]
   83092:	1c59      	adds	r1, r3, #1
   83094:	910e      	str	r1, [sp, #56]	; 0x38
   83096:	781b      	ldrb	r3, [r3, #0]
   83098:	7013      	strb	r3, [r2, #0]
				while(k && pSrc<(uint32_t)shellEditBuf+shell.nChar)
   8309a:	9905      	ldr	r1, [sp, #20]
   8309c:	b121      	cbz	r1, 830a8 <Shell+0xcdc>
   8309e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   830a0:	89a2      	ldrh	r2, [r4, #12]
   830a2:	442a      	add	r2, r5
   830a4:	429a      	cmp	r2, r3
   830a6:	d8f1      	bhi.n	8308c <Shell+0xcc0>
				shell.nChar-=k;
   830a8:	89a3      	ldrh	r3, [r4, #12]
   830aa:	1a59      	subs	r1, r3, r1
   830ac:	81a1      	strh	r1, [r4, #12]
				pSrc=(uint32_t)pSt;
   830ae:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   830b2:	e7b6      	b.n	83022 <Shell+0xc56>
		Error(ERROR_SHELL_SWITCH_BAD_SC,sc);
   830b4:	200d      	movs	r0, #13
   830b6:	4b0f      	ldr	r3, [pc, #60]	; (830f4 <Shell+0xd28>)
   830b8:	4798      	blx	r3
	return 0;
   830ba:	f04f 0800 	mov.w	r8, #0
   830be:	f7ff ba13 	b.w	824e8 <Shell+0x11c>
   830c2:	f04f 0800 	mov.w	r8, #0
   830c6:	f7ff ba0f 	b.w	824e8 <Shell+0x11c>
   830ca:	f04f 0800 	mov.w	r8, #0
   830ce:	f7ff ba0b 	b.w	824e8 <Shell+0x11c>
   830d2:	f04f 0800 	mov.w	r8, #0
   830d6:	f7ff ba07 	b.w	824e8 <Shell+0x11c>
   830da:	bf00      	nop
   830dc:	20001d1c 	.word	0x20001d1c
   830e0:	20001c18 	.word	0x20001c18
   830e4:	0008a2e4 	.word	0x0008a2e4
   830e8:	000834ed 	.word	0x000834ed
   830ec:	0008a2e8 	.word	0x0008a2e8
   830f0:	0008a394 	.word	0x0008a394
   830f4:	00080f15 	.word	0x00080f15
   830f8:	f04f 0800 	mov.w	r8, #0
   830fc:	f7ff b9f4 	b.w	824e8 <Shell+0x11c>

00083100 <_cmd_show>:
#define ST_SHELL_PROMPT_DISABLED        0x000004

char buf[256];

void _cmd_show(uint32_t sc, void*pParam)
{
   83100:	b538      	push	{r3, r4, r5, lr}
   83102:	4605      	mov	r5, r0
   83104:	4608      	mov	r0, r1
	char *pToken;
	pToken = strtok(pParam," \r\n");
   83106:	490a      	ldr	r1, [pc, #40]	; (83130 <_cmd_show+0x30>)
   83108:	4b0a      	ldr	r3, [pc, #40]	; (83134 <_cmd_show+0x34>)
   8310a:	4798      	blx	r3
	if(pToken)
   8310c:	b170      	cbz	r0, 8312c <_cmd_show+0x2c>
   8310e:	4604      	mov	r4, r0
	{
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   83110:	4b09      	ldr	r3, [pc, #36]	; (83138 <_cmd_show+0x38>)
   83112:	4798      	blx	r3
   83114:	4601      	mov	r1, r0
   83116:	4620      	mov	r0, r4
   83118:	4b08      	ldr	r3, [pc, #32]	; (8313c <_cmd_show+0x3c>)
   8311a:	4798      	blx	r3
   8311c:	f245 73e5 	movw	r3, #22501	; 0x57e5
   83120:	4298      	cmp	r0, r3
   83122:	d103      	bne.n	8312c <_cmd_show+0x2c>
		{
		case 0x57E5:    //crc
			mBitsSet(*(uint16_t*)sc,ST_SHELL_SHOW_UNKNOW_CRC);
   83124:	882b      	ldrh	r3, [r5, #0]
   83126:	f043 0302 	orr.w	r3, r3, #2
   8312a:	802b      	strh	r3, [r5, #0]
   8312c:	bd38      	pop	{r3, r4, r5, pc}
   8312e:	bf00      	nop
   83130:	00089f04 	.word	0x00089f04
   83134:	0008529d 	.word	0x0008529d
   83138:	00085241 	.word	0x00085241
   8313c:	00080ea9 	.word	0x00080ea9

00083140 <_cmd_hide>:
		}
	}
}

void _cmd_hide(uint32_t sc, void*pParam)
{
   83140:	b538      	push	{r3, r4, r5, lr}
   83142:	4605      	mov	r5, r0
   83144:	4608      	mov	r0, r1
	char *pToken;
	pToken = strtok(pParam," \r\n");
   83146:	490a      	ldr	r1, [pc, #40]	; (83170 <_cmd_hide+0x30>)
   83148:	4b0a      	ldr	r3, [pc, #40]	; (83174 <_cmd_hide+0x34>)
   8314a:	4798      	blx	r3
	if(pToken)
   8314c:	b170      	cbz	r0, 8316c <_cmd_hide+0x2c>
   8314e:	4604      	mov	r4, r0
	{
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   83150:	4b09      	ldr	r3, [pc, #36]	; (83178 <_cmd_hide+0x38>)
   83152:	4798      	blx	r3
   83154:	4601      	mov	r1, r0
   83156:	4620      	mov	r0, r4
   83158:	4b08      	ldr	r3, [pc, #32]	; (8317c <_cmd_hide+0x3c>)
   8315a:	4798      	blx	r3
   8315c:	f245 73e5 	movw	r3, #22501	; 0x57e5
   83160:	4298      	cmp	r0, r3
   83162:	d103      	bne.n	8316c <_cmd_hide+0x2c>
		{
		case 0x57E5:    //crc
			mBitsClr(*(uint16_t*)sc,ST_SHELL_SHOW_UNKNOW_CRC);
   83164:	882b      	ldrh	r3, [r5, #0]
   83166:	f023 0302 	bic.w	r3, r3, #2
   8316a:	802b      	strh	r3, [r5, #0]
   8316c:	bd38      	pop	{r3, r4, r5, pc}
   8316e:	bf00      	nop
   83170:	00089f04 	.word	0x00089f04
   83174:	0008529d 	.word	0x0008529d
   83178:	00085241 	.word	0x00085241
   8317c:	00080ea9 	.word	0x00080ea9

00083180 <_cmd_start>:
		}
	}
}

void _cmd_start(uint32_t sc, void*pParam)
{
   83180:	b538      	push	{r3, r4, r5, lr}
   83182:	460d      	mov	r5, r1
	Putstr(" cmd start : ");
   83184:	4903      	ldr	r1, [pc, #12]	; (83194 <_cmd_start+0x14>)
   83186:	2067      	movs	r0, #103	; 0x67
   83188:	4c03      	ldr	r4, [pc, #12]	; (83198 <_cmd_start+0x18>)
   8318a:	47a0      	blx	r4
	Putstr(pParam);
   8318c:	4629      	mov	r1, r5
   8318e:	2067      	movs	r0, #103	; 0x67
   83190:	47a0      	blx	r4
   83192:	bd38      	pop	{r3, r4, r5, pc}
   83194:	0008a4cc 	.word	0x0008a4cc
   83198:	000834ed 	.word	0x000834ed

0008319c <_cmd_cls>:
	pParam=atoi((char*)pParam);
	PushTask(_cmd_restart_proc,sc,pParam,0);
}

void _cmd_cls(uint32_t sc, void*pParam)
{
   8319c:	b508      	push	{r3, lr}
	Putstr("\e[2J");
   8319e:	4902      	ldr	r1, [pc, #8]	; (831a8 <_cmd_cls+0xc>)
   831a0:	2067      	movs	r0, #103	; 0x67
   831a2:	4b02      	ldr	r3, [pc, #8]	; (831ac <_cmd_cls+0x10>)
   831a4:	4798      	blx	r3
   831a6:	bd08      	pop	{r3, pc}
   831a8:	0008a3a0 	.word	0x0008a3a0
   831ac:	000834ed 	.word	0x000834ed

000831b0 <_cmd_set>:
{
   831b0:	b570      	push	{r4, r5, r6, lr}
	pToken = mstrtok(NULL," \r\n");
   831b2:	493a      	ldr	r1, [pc, #232]	; (8329c <_cmd_set+0xec>)
   831b4:	2000      	movs	r0, #0
   831b6:	4b3a      	ldr	r3, [pc, #232]	; (832a0 <_cmd_set+0xf0>)
   831b8:	4798      	blx	r3
	if(pToken)
   831ba:	2800      	cmp	r0, #0
   831bc:	d056      	beq.n	8326c <_cmd_set+0xbc>
   831be:	4604      	mov	r4, r0
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   831c0:	4b38      	ldr	r3, [pc, #224]	; (832a4 <_cmd_set+0xf4>)
   831c2:	4798      	blx	r3
   831c4:	4601      	mov	r1, r0
   831c6:	4620      	mov	r0, r4
   831c8:	4b37      	ldr	r3, [pc, #220]	; (832a8 <_cmd_set+0xf8>)
   831ca:	4798      	blx	r3
   831cc:	f247 3327 	movw	r3, #29479	; 0x7327
   831d0:	4298      	cmp	r0, r3
   831d2:	d004      	beq.n	831de <_cmd_set+0x2e>
   831d4:	f24e 13a9 	movw	r3, #57769	; 0xe1a9
   831d8:	4298      	cmp	r0, r3
   831da:	d024      	beq.n	83226 <_cmd_set+0x76>
   831dc:	bd70      	pop	{r4, r5, r6, pc}
			pToken=mstrtok(NULL," :./\r\n");
   831de:	4933      	ldr	r1, [pc, #204]	; (832ac <_cmd_set+0xfc>)
   831e0:	2000      	movs	r0, #0
   831e2:	4b2f      	ldr	r3, [pc, #188]	; (832a0 <_cmd_set+0xf0>)
   831e4:	4798      	blx	r3
			if(pToken) hour=atoi((char*)pToken);
   831e6:	b1c0      	cbz	r0, 8321a <_cmd_set+0x6a>
   831e8:	4b31      	ldr	r3, [pc, #196]	; (832b0 <_cmd_set+0x100>)
   831ea:	4798      	blx	r3
   831ec:	b2c4      	uxtb	r4, r0
			pToken=mstrtok(NULL," :./\r\n");
   831ee:	492f      	ldr	r1, [pc, #188]	; (832ac <_cmd_set+0xfc>)
   831f0:	2000      	movs	r0, #0
   831f2:	4b2b      	ldr	r3, [pc, #172]	; (832a0 <_cmd_set+0xf0>)
   831f4:	4798      	blx	r3
			if(pToken) minute=atoi((char*)pToken);
   831f6:	b190      	cbz	r0, 8321e <_cmd_set+0x6e>
   831f8:	4b2d      	ldr	r3, [pc, #180]	; (832b0 <_cmd_set+0x100>)
   831fa:	4798      	blx	r3
   831fc:	b2c5      	uxtb	r5, r0
			pToken=mstrtok(NULL," :./\r\n");
   831fe:	492b      	ldr	r1, [pc, #172]	; (832ac <_cmd_set+0xfc>)
   83200:	2000      	movs	r0, #0
   83202:	4b27      	ldr	r3, [pc, #156]	; (832a0 <_cmd_set+0xf0>)
   83204:	4798      	blx	r3
			if(pToken) second=atoi((char*)pToken);
   83206:	b160      	cbz	r0, 83222 <_cmd_set+0x72>
   83208:	4b29      	ldr	r3, [pc, #164]	; (832b0 <_cmd_set+0x100>)
   8320a:	4798      	blx	r3
   8320c:	b2c3      	uxtb	r3, r0
			kRtc(KRTC_SET_TIME,(uint32_t)hour,(uint32_t)minute,(uint32_t)second);
   8320e:	462a      	mov	r2, r5
   83210:	4621      	mov	r1, r4
   83212:	2066      	movs	r0, #102	; 0x66
   83214:	4c27      	ldr	r4, [pc, #156]	; (832b4 <_cmd_set+0x104>)
   83216:	47a0      	blx	r4
			break;
   83218:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t u1=0,u2=0,u3=0;
   8321a:	2400      	movs	r4, #0
   8321c:	e7e7      	b.n	831ee <_cmd_set+0x3e>
   8321e:	2500      	movs	r5, #0
   83220:	e7ed      	b.n	831fe <_cmd_set+0x4e>
   83222:	2300      	movs	r3, #0
   83224:	e7f3      	b.n	8320e <_cmd_set+0x5e>
			pToken=mstrtok(NULL," :./\r\n");
   83226:	4921      	ldr	r1, [pc, #132]	; (832ac <_cmd_set+0xfc>)
   83228:	2000      	movs	r0, #0
   8322a:	4b1d      	ldr	r3, [pc, #116]	; (832a0 <_cmd_set+0xf0>)
   8322c:	4798      	blx	r3
			if(pToken) date=atoi((char*)pToken);
   8322e:	b1f0      	cbz	r0, 8326e <_cmd_set+0xbe>
   83230:	4b1f      	ldr	r3, [pc, #124]	; (832b0 <_cmd_set+0x100>)
   83232:	4798      	blx	r3
   83234:	b2c4      	uxtb	r4, r0
			pToken=mstrtok(NULL," :./\r\n");
   83236:	491d      	ldr	r1, [pc, #116]	; (832ac <_cmd_set+0xfc>)
   83238:	2000      	movs	r0, #0
   8323a:	4b19      	ldr	r3, [pc, #100]	; (832a0 <_cmd_set+0xf0>)
   8323c:	4798      	blx	r3
			if(pToken) month=atoi((char*)pToken);
   8323e:	b1c0      	cbz	r0, 83272 <_cmd_set+0xc2>
   83240:	4b1b      	ldr	r3, [pc, #108]	; (832b0 <_cmd_set+0x100>)
   83242:	4798      	blx	r3
   83244:	b2c5      	uxtb	r5, r0
			pToken=mstrtok(NULL," :./\r\n");
   83246:	4919      	ldr	r1, [pc, #100]	; (832ac <_cmd_set+0xfc>)
   83248:	2000      	movs	r0, #0
   8324a:	4b15      	ldr	r3, [pc, #84]	; (832a0 <_cmd_set+0xf0>)
   8324c:	4798      	blx	r3
			if(pToken) centYear=atoi((char*)pToken);
   8324e:	b190      	cbz	r0, 83276 <_cmd_set+0xc6>
   83250:	4b17      	ldr	r3, [pc, #92]	; (832b0 <_cmd_set+0x100>)
   83252:	4798      	blx	r3
   83254:	b286      	uxth	r6, r0
			Putstr("\e[2K"); //Erase current line on terminal screen
   83256:	4918      	ldr	r1, [pc, #96]	; (832b8 <_cmd_set+0x108>)
   83258:	2067      	movs	r0, #103	; 0x67
   8325a:	4b18      	ldr	r3, [pc, #96]	; (832bc <_cmd_set+0x10c>)
   8325c:	4798      	blx	r3
			if(kRtc(KRTC_SET_DATE,(uint32_t)date,(uint32_t)month,(uint32_t)centYear)==0)
   8325e:	4633      	mov	r3, r6
   83260:	462a      	mov	r2, r5
   83262:	4621      	mov	r1, r4
   83264:	2067      	movs	r0, #103	; 0x67
   83266:	4c13      	ldr	r4, [pc, #76]	; (832b4 <_cmd_set+0x104>)
   83268:	47a0      	blx	r4
   8326a:	b130      	cbz	r0, 8327a <_cmd_set+0xca>
   8326c:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t u1=0,u2=0,u3=0;
   8326e:	2400      	movs	r4, #0
   83270:	e7e1      	b.n	83236 <_cmd_set+0x86>
   83272:	2500      	movs	r5, #0
   83274:	e7e7      	b.n	83246 <_cmd_set+0x96>
	uint16_t u4=0;
   83276:	2600      	movs	r6, #0
   83278:	e7ed      	b.n	83256 <_cmd_set+0xa6>
				Putstr("\r\n");
   8327a:	4d11      	ldr	r5, [pc, #68]	; (832c0 <_cmd_set+0x110>)
   8327c:	4629      	mov	r1, r5
   8327e:	2067      	movs	r0, #103	; 0x67
   83280:	4c0e      	ldr	r4, [pc, #56]	; (832bc <_cmd_set+0x10c>)
   83282:	47a0      	blx	r4
				kRtc(KRTC_GETF_DATE,(uint32_t)buf);
   83284:	4e0f      	ldr	r6, [pc, #60]	; (832c4 <_cmd_set+0x114>)
   83286:	4631      	mov	r1, r6
   83288:	2068      	movs	r0, #104	; 0x68
   8328a:	4b0a      	ldr	r3, [pc, #40]	; (832b4 <_cmd_set+0x104>)
   8328c:	4798      	blx	r3
				Putstr(buf);
   8328e:	4631      	mov	r1, r6
   83290:	2067      	movs	r0, #103	; 0x67
   83292:	47a0      	blx	r4
				Putstr("\r\n");
   83294:	4629      	mov	r1, r5
   83296:	2067      	movs	r0, #103	; 0x67
   83298:	47a0      	blx	r4
}
   8329a:	e7e7      	b.n	8326c <_cmd_set+0xbc>
   8329c:	00089f04 	.word	0x00089f04
   832a0:	00083af9 	.word	0x00083af9
   832a4:	00085241 	.word	0x00085241
   832a8:	00080ea9 	.word	0x00080ea9
   832ac:	0008a4bc 	.word	0x0008a4bc
   832b0:	00085101 	.word	0x00085101
   832b4:	00081239 	.word	0x00081239
   832b8:	0008a4c4 	.word	0x0008a4c4
   832bc:	000834ed 	.word	0x000834ed
   832c0:	0008a240 	.word	0x0008a240
   832c4:	20001a18 	.word	0x20001a18

000832c8 <_cmd_restart_proc>:
{
   832c8:	b570      	push	{r4, r5, r6, lr}
   832ca:	b082      	sub	sp, #8
   832cc:	4604      	mov	r4, r0
   832ce:	460d      	mov	r5, r1
	mBitsSet(*(uint16_t*)sc,ST_SHELL_PROMPT_DISABLED);
   832d0:	8803      	ldrh	r3, [r0, #0]
   832d2:	f043 0304 	orr.w	r3, r3, #4
   832d6:	8003      	strh	r3, [r0, #0]
	sprintf(buf,"\rSystem will restart in %i second...",(int)timeout); Putstr(buf);
   832d8:	4e10      	ldr	r6, [pc, #64]	; (8331c <_cmd_restart_proc+0x54>)
   832da:	460a      	mov	r2, r1
   832dc:	4910      	ldr	r1, [pc, #64]	; (83320 <_cmd_restart_proc+0x58>)
   832de:	4630      	mov	r0, r6
   832e0:	4b10      	ldr	r3, [pc, #64]	; (83324 <_cmd_restart_proc+0x5c>)
   832e2:	4798      	blx	r3
   832e4:	4631      	mov	r1, r6
   832e6:	2067      	movs	r0, #103	; 0x67
   832e8:	4b0f      	ldr	r3, [pc, #60]	; (83328 <_cmd_restart_proc+0x60>)
   832ea:	4798      	blx	r3
	if(timeout==0)
   832ec:	b955      	cbnz	r5, 83304 <_cmd_restart_proc+0x3c>
		Putstr("\r\n\n");
   832ee:	490f      	ldr	r1, [pc, #60]	; (8332c <_cmd_restart_proc+0x64>)
   832f0:	2067      	movs	r0, #103	; 0x67
   832f2:	4b0d      	ldr	r3, [pc, #52]	; (83328 <_cmd_restart_proc+0x60>)
   832f4:	4798      	blx	r3
   832f6:	4b0e      	ldr	r3, [pc, #56]	; (83330 <_cmd_restart_proc+0x68>)
		for(sc=500000;sc;sc--);
   832f8:	3b01      	subs	r3, #1
   832fa:	d1fd      	bne.n	832f8 <_cmd_restart_proc+0x30>
		rstc_start_software_reset(RSTC);
   832fc:	480d      	ldr	r0, [pc, #52]	; (83334 <_cmd_restart_proc+0x6c>)
   832fe:	4b0e      	ldr	r3, [pc, #56]	; (83338 <_cmd_restart_proc+0x70>)
   83300:	4798      	blx	r3
   83302:	e7fe      	b.n	83302 <_cmd_restart_proc+0x3a>
		PushTask(_cmd_restart_proc,sc,--timeout,1000);	
   83304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   83308:	9300      	str	r3, [sp, #0]
   8330a:	1e6b      	subs	r3, r5, #1
   8330c:	4622      	mov	r2, r4
   8330e:	490b      	ldr	r1, [pc, #44]	; (8333c <_cmd_restart_proc+0x74>)
   83310:	2066      	movs	r0, #102	; 0x66
   83312:	4c0b      	ldr	r4, [pc, #44]	; (83340 <_cmd_restart_proc+0x78>)
   83314:	47a0      	blx	r4
}
   83316:	b002      	add	sp, #8
   83318:	bd70      	pop	{r4, r5, r6, pc}
   8331a:	bf00      	nop
   8331c:	20001a18 	.word	0x20001a18
   83320:	0008a494 	.word	0x0008a494
   83324:	000851f5 	.word	0x000851f5
   83328:	000834ed 	.word	0x000834ed
   8332c:	0008a3e0 	.word	0x0008a3e0
   83330:	0007a120 	.word	0x0007a120
   83334:	400e1200 	.word	0x400e1200
   83338:	00084935 	.word	0x00084935
   8333c:	000832c9 	.word	0x000832c9
   83340:	00083881 	.word	0x00083881

00083344 <_cmd_restart>:
{
   83344:	b510      	push	{r4, lr}
   83346:	b082      	sub	sp, #8
   83348:	4604      	mov	r4, r0
	mBitsSet(*(uint16_t*)sc,ST_SHELL_PROMPT_DISABLED);
   8334a:	8803      	ldrh	r3, [r0, #0]
   8334c:	f043 0304 	orr.w	r3, r3, #4
   83350:	8003      	strh	r3, [r0, #0]
	pParam=atoi((char*)pParam);
   83352:	4608      	mov	r0, r1
   83354:	4b05      	ldr	r3, [pc, #20]	; (8336c <_cmd_restart+0x28>)
   83356:	4798      	blx	r3
	PushTask(_cmd_restart_proc,sc,pParam,0);
   83358:	2300      	movs	r3, #0
   8335a:	9300      	str	r3, [sp, #0]
   8335c:	4603      	mov	r3, r0
   8335e:	4622      	mov	r2, r4
   83360:	4903      	ldr	r1, [pc, #12]	; (83370 <_cmd_restart+0x2c>)
   83362:	2066      	movs	r0, #102	; 0x66
   83364:	4c03      	ldr	r4, [pc, #12]	; (83374 <_cmd_restart+0x30>)
   83366:	47a0      	blx	r4
}
   83368:	b002      	add	sp, #8
   8336a:	bd10      	pop	{r4, pc}
   8336c:	00085101 	.word	0x00085101
   83370:	000832c9 	.word	0x000832c9
   83374:	00083881 	.word	0x00083881

00083378 <_cmd_infos>:
	"ROM_FLASH --- ROM and Embedded Flash Memory [NVPSIZ is ROM size / NVPSIZ2 is Flash size]",
	"SRAM --- SRAM emulating ROM"
};

void _cmd_infos(uint32_t sc, void*pParam)
{
   83378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8337c:	b08b      	sub	sp, #44	; 0x2c
	chipid_data_t chipData;

	chipid_read(CHIPID,&chipData);
   8337e:	a901      	add	r1, sp, #4
   83380:	4844      	ldr	r0, [pc, #272]	; (83494 <_cmd_infos+0x11c>)
   83382:	4b45      	ldr	r3, [pc, #276]	; (83498 <_cmd_infos+0x120>)
   83384:	4798      	blx	r3
	Putstr("\r\n\t=============== CHIP IDENTIFIER INFOS ===============\r\n\n");
   83386:	4945      	ldr	r1, [pc, #276]	; (8349c <_cmd_infos+0x124>)
   83388:	2067      	movs	r0, #103	; 0x67
   8338a:	4c45      	ldr	r4, [pc, #276]	; (834a0 <_cmd_infos+0x128>)
   8338c:	47a0      	blx	r4
	sprintf(buf,"\tVERSION: %c\r\n",(char)(chipData.ul_version-1)+'A');	Putstr(buf);
   8338e:	9a01      	ldr	r2, [sp, #4]
   83390:	3a01      	subs	r2, #1
   83392:	b2d2      	uxtb	r2, r2
   83394:	4f43      	ldr	r7, [pc, #268]	; (834a4 <_cmd_infos+0x12c>)
   83396:	3241      	adds	r2, #65	; 0x41
   83398:	4943      	ldr	r1, [pc, #268]	; (834a8 <_cmd_infos+0x130>)
   8339a:	4638      	mov	r0, r7
   8339c:	4b43      	ldr	r3, [pc, #268]	; (834ac <_cmd_infos+0x134>)
   8339e:	4798      	blx	r3
   833a0:	4639      	mov	r1, r7
   833a2:	2067      	movs	r0, #103	; 0x67
   833a4:	47a0      	blx	r4
		Putstr("\t  EPROC: "),Putstr(eprocs[chipData.ul_eproc]);	Putstr("\r\n");
   833a6:	4942      	ldr	r1, [pc, #264]	; (834b0 <_cmd_infos+0x138>)
   833a8:	2067      	movs	r0, #103	; 0x67
   833aa:	47a0      	blx	r4
   833ac:	9a02      	ldr	r2, [sp, #8]
   833ae:	4b41      	ldr	r3, [pc, #260]	; (834b4 <_cmd_infos+0x13c>)
   833b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   833b4:	2067      	movs	r0, #103	; 0x67
   833b6:	47a0      	blx	r4
   833b8:	4e3f      	ldr	r6, [pc, #252]	; (834b8 <_cmd_infos+0x140>)
   833ba:	4631      	mov	r1, r6
   833bc:	2067      	movs	r0, #103	; 0x67
   833be:	47a0      	blx	r4
		Putstr("\t NVPSIZ: "),Putstr(nvpsiz[chipData.ul_nvpsiz]);	Putstr("\r\n");
   833c0:	493e      	ldr	r1, [pc, #248]	; (834bc <_cmd_infos+0x144>)
   833c2:	2067      	movs	r0, #103	; 0x67
   833c4:	47a0      	blx	r4
   833c6:	4d3e      	ldr	r5, [pc, #248]	; (834c0 <_cmd_infos+0x148>)
   833c8:	9b03      	ldr	r3, [sp, #12]
   833ca:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   833ce:	2067      	movs	r0, #103	; 0x67
   833d0:	47a0      	blx	r4
   833d2:	4631      	mov	r1, r6
   833d4:	2067      	movs	r0, #103	; 0x67
   833d6:	47a0      	blx	r4
		Putstr("\tNVPSIZ2: "),Putstr(nvpsiz[chipData.ul_nvpsiz2]);	Putstr("\r\n");
   833d8:	493a      	ldr	r1, [pc, #232]	; (834c4 <_cmd_infos+0x14c>)
   833da:	2067      	movs	r0, #103	; 0x67
   833dc:	47a0      	blx	r4
   833de:	9b04      	ldr	r3, [sp, #16]
   833e0:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   833e4:	2067      	movs	r0, #103	; 0x67
   833e6:	47a0      	blx	r4
   833e8:	4631      	mov	r1, r6
   833ea:	2067      	movs	r0, #103	; 0x67
   833ec:	47a0      	blx	r4
		Putstr("\tSRAMSIZ: "),Putstr(sramsiz[chipData.ul_sramsiz]);	Putstr("\r\n");
   833ee:	4936      	ldr	r1, [pc, #216]	; (834c8 <_cmd_infos+0x150>)
   833f0:	2067      	movs	r0, #103	; 0x67
   833f2:	47a0      	blx	r4
   833f4:	9a05      	ldr	r2, [sp, #20]
   833f6:	4b35      	ldr	r3, [pc, #212]	; (834cc <_cmd_infos+0x154>)
   833f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   833fc:	2067      	movs	r0, #103	; 0x67
   833fe:	47a0      	blx	r4
   83400:	4631      	mov	r1, r6
   83402:	2067      	movs	r0, #103	; 0x67
   83404:	47a0      	blx	r4
#define k sc
		k=0;
		while(arch[k].value && (arch[k].value!=chipData.ul_arch)) k++;
   83406:	9906      	ldr	r1, [sp, #24]
   83408:	2919      	cmp	r1, #25
   8340a:	d038      	beq.n	8347e <_cmd_infos+0x106>
   8340c:	4b30      	ldr	r3, [pc, #192]	; (834d0 <_cmd_infos+0x158>)
   8340e:	2400      	movs	r4, #0
   83410:	3401      	adds	r4, #1
   83412:	7b1a      	ldrb	r2, [r3, #12]
   83414:	b112      	cbz	r2, 8341c <_cmd_infos+0xa4>
   83416:	330c      	adds	r3, #12
   83418:	428a      	cmp	r2, r1
   8341a:	d1f9      	bne.n	83410 <_cmd_infos+0x98>
		Putstr("\t   ARCH: "),Putstr(arch[k].name); Putstr(" --- "); Putstr(arch[k].description); Putstr("\r\n");
   8341c:	492d      	ldr	r1, [pc, #180]	; (834d4 <_cmd_infos+0x15c>)
   8341e:	2067      	movs	r0, #103	; 0x67
   83420:	4d1f      	ldr	r5, [pc, #124]	; (834a0 <_cmd_infos+0x128>)
   83422:	47a8      	blx	r5
   83424:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 834d0 <_cmd_infos+0x158>
   83428:	ea4f 0944 	mov.w	r9, r4, lsl #1
   8342c:	eb09 0304 	add.w	r3, r9, r4
   83430:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   83434:	6859      	ldr	r1, [r3, #4]
   83436:	2067      	movs	r0, #103	; 0x67
   83438:	47a8      	blx	r5
   8343a:	4927      	ldr	r1, [pc, #156]	; (834d8 <_cmd_infos+0x160>)
   8343c:	2067      	movs	r0, #103	; 0x67
   8343e:	47a8      	blx	r5
   83440:	444c      	add	r4, r9
   83442:	eb08 0884 	add.w	r8, r8, r4, lsl #2
   83446:	f8d8 1008 	ldr.w	r1, [r8, #8]
   8344a:	2067      	movs	r0, #103	; 0x67
   8344c:	47a8      	blx	r5
   8344e:	4631      	mov	r1, r6
   83450:	2067      	movs	r0, #103	; 0x67
   83452:	47a8      	blx	r5
#undef k
		Putstr("\t NVPTYP: "),Putstr(nvptyp[chipData.ul_nvptyp]);	Putstr("\r\n");
   83454:	4921      	ldr	r1, [pc, #132]	; (834dc <_cmd_infos+0x164>)
   83456:	2067      	movs	r0, #103	; 0x67
   83458:	47a8      	blx	r5
   8345a:	9a07      	ldr	r2, [sp, #28]
   8345c:	4b20      	ldr	r3, [pc, #128]	; (834e0 <_cmd_infos+0x168>)
   8345e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   83462:	2067      	movs	r0, #103	; 0x67
   83464:	47a8      	blx	r5
   83466:	4631      	mov	r1, r6
   83468:	2067      	movs	r0, #103	; 0x67
   8346a:	47a8      	blx	r5
	if(chipData.ul_extflag)
   8346c:	9b08      	ldr	r3, [sp, #32]
   8346e:	b943      	cbnz	r3, 83482 <_cmd_infos+0x10a>
	{
		sprintf(buf,"\t   EXID: %08X\r\n",(unsigned int)chipData.ul_extid); Putstr(buf);
	}
	Putstr("\r\n\t=====================================================\r\n\n");
   83470:	491c      	ldr	r1, [pc, #112]	; (834e4 <_cmd_infos+0x16c>)
   83472:	2067      	movs	r0, #103	; 0x67
   83474:	4b0a      	ldr	r3, [pc, #40]	; (834a0 <_cmd_infos+0x128>)
   83476:	4798      	blx	r3
}
   83478:	b00b      	add	sp, #44	; 0x2c
   8347a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		k=0;
   8347e:	2400      	movs	r4, #0
   83480:	e7cc      	b.n	8341c <_cmd_infos+0xa4>
		sprintf(buf,"\t   EXID: %08X\r\n",(unsigned int)chipData.ul_extid); Putstr(buf);
   83482:	9a09      	ldr	r2, [sp, #36]	; 0x24
   83484:	4918      	ldr	r1, [pc, #96]	; (834e8 <_cmd_infos+0x170>)
   83486:	4807      	ldr	r0, [pc, #28]	; (834a4 <_cmd_infos+0x12c>)
   83488:	4b08      	ldr	r3, [pc, #32]	; (834ac <_cmd_infos+0x134>)
   8348a:	4798      	blx	r3
   8348c:	4639      	mov	r1, r7
   8348e:	2067      	movs	r0, #103	; 0x67
   83490:	47a8      	blx	r5
   83492:	e7ed      	b.n	83470 <_cmd_infos+0xf8>
   83494:	400e0740 	.word	0x400e0740
   83498:	0008411d 	.word	0x0008411d
   8349c:	0008a3a8 	.word	0x0008a3a8
   834a0:	000834ed 	.word	0x000834ed
   834a4:	20001a18 	.word	0x20001a18
   834a8:	0008a3e4 	.word	0x0008a3e4
   834ac:	000851f5 	.word	0x000851f5
   834b0:	0008a3f4 	.word	0x0008a3f4
   834b4:	20000570 	.word	0x20000570
   834b8:	0008a240 	.word	0x0008a240
   834bc:	0008a400 	.word	0x0008a400
   834c0:	20000590 	.word	0x20000590
   834c4:	0008a40c 	.word	0x0008a40c
   834c8:	0008a418 	.word	0x0008a418
   834cc:	200005e4 	.word	0x200005e4
   834d0:	0008a4dc 	.word	0x0008a4dc
   834d4:	0008a424 	.word	0x0008a424
   834d8:	0008a430 	.word	0x0008a430
   834dc:	0008a438 	.word	0x0008a438
   834e0:	200005d0 	.word	0x200005d0
   834e4:	0008a458 	.word	0x0008a458
   834e8:	0008a444 	.word	0x0008a444

000834ec <Shellcom>:
	char	*pTxRead;
}shellcom;


uint32_t Shellcom(uint32_t sc, ...)
{
   834ec:	b40f      	push	{r0, r1, r2, r3}
   834ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	switch(sc)
   834f0:	9906      	ldr	r1, [sp, #24]
   834f2:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   834f6:	2b05      	cmp	r3, #5
   834f8:	f200 80dd 	bhi.w	836b6 <Shellcom+0x1ca>
   834fc:	e8df f013 	tbh	[pc, r3, lsl #1]
   83500:	00db0006 	.word	0x00db0006
   83504:	005a003b 	.word	0x005a003b
   83508:	00b40087 	.word	0x00b40087
	{
	case SHELLCOM_NEW:
		shellcom.pTxRead=shellcom.pTxWrite=shellcomTxBuf;
   8350c:	4b6c      	ldr	r3, [pc, #432]	; (836c0 <Shellcom+0x1d4>)
   8350e:	4a6d      	ldr	r2, [pc, #436]	; (836c4 <Shellcom+0x1d8>)
   83510:	601a      	str	r2, [r3, #0]
   83512:	605a      	str	r2, [r3, #4]
		pmc_enable_periph_clk(ID_UART);
   83514:	2008      	movs	r0, #8
   83516:	4b6c      	ldr	r3, [pc, #432]	; (836c8 <Shellcom+0x1dc>)
   83518:	4798      	blx	r3
		pio_configure_pin(UART_TX_PIN,UART_TX_PIN_FLAGS);
   8351a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8351e:	200c      	movs	r0, #12
   83520:	4c6a      	ldr	r4, [pc, #424]	; (836cc <Shellcom+0x1e0>)
   83522:	47a0      	blx	r4
		pio_configure_pin(UART_RX_PIN,UART_RX_PIN_FLAGS);
   83524:	496a      	ldr	r1, [pc, #424]	; (836d0 <Shellcom+0x1e4>)
   83526:	200b      	movs	r0, #11
   83528:	47a0      	blx	r4
		if(uart_init(UART,&uart_opt)) Error(ERROR_SHELLCOM_UART_INIT_FAILED);
   8352a:	496a      	ldr	r1, [pc, #424]	; (836d4 <Shellcom+0x1e8>)
   8352c:	486a      	ldr	r0, [pc, #424]	; (836d8 <Shellcom+0x1ec>)
   8352e:	4b6b      	ldr	r3, [pc, #428]	; (836dc <Shellcom+0x1f0>)
   83530:	4798      	blx	r3
   83532:	b938      	cbnz	r0, 83544 <Shellcom+0x58>
   83534:	f44f 7280 	mov.w	r2, #256	; 0x100
   83538:	4b69      	ldr	r3, [pc, #420]	; (836e0 <Shellcom+0x1f4>)
   8353a:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(ID_UART);
		while(uart_is_rx_ready(UART)) uart_read(UART,(uint8_t*)&sc);
   8353c:	4c66      	ldr	r4, [pc, #408]	; (836d8 <Shellcom+0x1ec>)
   8353e:	4e69      	ldr	r6, [pc, #420]	; (836e4 <Shellcom+0x1f8>)
   83540:	4f69      	ldr	r7, [pc, #420]	; (836e8 <Shellcom+0x1fc>)
   83542:	e006      	b.n	83552 <Shellcom+0x66>
		if(uart_init(UART,&uart_opt)) Error(ERROR_SHELLCOM_UART_INIT_FAILED);
   83544:	2018      	movs	r0, #24
   83546:	4b69      	ldr	r3, [pc, #420]	; (836ec <Shellcom+0x200>)
   83548:	4798      	blx	r3
   8354a:	e7f3      	b.n	83534 <Shellcom+0x48>
		while(uart_is_rx_ready(UART)) uart_read(UART,(uint8_t*)&sc);
   8354c:	a906      	add	r1, sp, #24
   8354e:	4620      	mov	r0, r4
   83550:	47b8      	blx	r7
   83552:	4620      	mov	r0, r4
   83554:	47b0      	blx	r6
   83556:	4605      	mov	r5, r0
   83558:	2800      	cmp	r0, #0
   8355a:	d1f7      	bne.n	8354c <Shellcom+0x60>
		uart_get_status(UART);	
   8355c:	4c5e      	ldr	r4, [pc, #376]	; (836d8 <Shellcom+0x1ec>)
   8355e:	4620      	mov	r0, r4
   83560:	4b63      	ldr	r3, [pc, #396]	; (836f0 <Shellcom+0x204>)
   83562:	4798      	blx	r3
		uart_enable_interrupt(UART,US_IER_RXRDY);
   83564:	2101      	movs	r1, #1
   83566:	4620      	mov	r0, r4
   83568:	4b62      	ldr	r3, [pc, #392]	; (836f4 <Shellcom+0x208>)
   8356a:	4798      	blx	r3
	default:
		Error(ERROR_SHELLCOM_SWITCH_BAD_SC, (uint32_t)sc);
	}

	return 0;
}
   8356c:	4628      	mov	r0, r5
   8356e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   83572:	b004      	add	sp, #16
   83574:	4770      	bx	lr
		*shellcom.pTxWrite++=_charData;
   83576:	4b52      	ldr	r3, [pc, #328]	; (836c0 <Shellcom+0x1d4>)
   83578:	681a      	ldr	r2, [r3, #0]
   8357a:	1c51      	adds	r1, r2, #1
   8357c:	6019      	str	r1, [r3, #0]
   8357e:	9907      	ldr	r1, [sp, #28]
   83580:	7011      	strb	r1, [r2, #0]
		if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   83582:	681a      	ldr	r2, [r3, #0]
   83584:	4b5c      	ldr	r3, [pc, #368]	; (836f8 <Shellcom+0x20c>)
   83586:	429a      	cmp	r2, r3
   83588:	d303      	bcc.n	83592 <Shellcom+0xa6>
   8358a:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
   8358e:	4b4c      	ldr	r3, [pc, #304]	; (836c0 <Shellcom+0x1d4>)
   83590:	601a      	str	r2, [r3, #0]
		if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   83592:	4b4b      	ldr	r3, [pc, #300]	; (836c0 <Shellcom+0x1d4>)
   83594:	681a      	ldr	r2, [r3, #0]
   83596:	685b      	ldr	r3, [r3, #4]
   83598:	429a      	cmp	r2, r3
   8359a:	d006      	beq.n	835aa <Shellcom+0xbe>
		uart_enable_interrupt(UART,US_IER_TXEMPTY);
   8359c:	f44f 7100 	mov.w	r1, #512	; 0x200
   835a0:	484d      	ldr	r0, [pc, #308]	; (836d8 <Shellcom+0x1ec>)
   835a2:	4b54      	ldr	r3, [pc, #336]	; (836f4 <Shellcom+0x208>)
   835a4:	4798      	blx	r3
		return 1;
   835a6:	2501      	movs	r5, #1
   835a8:	e7e0      	b.n	8356c <Shellcom+0x80>
		if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   835aa:	2100      	movs	r1, #0
   835ac:	2017      	movs	r0, #23
   835ae:	4b4f      	ldr	r3, [pc, #316]	; (836ec <Shellcom+0x200>)
   835b0:	4798      	blx	r3
   835b2:	e7f3      	b.n	8359c <Shellcom+0xb0>
		_nChar=0;
   835b4:	2300      	movs	r3, #0
   835b6:	9306      	str	r3, [sp, #24]
		while(*(char*)_pStr)
   835b8:	9b07      	ldr	r3, [sp, #28]
   835ba:	4619      	mov	r1, r3
   835bc:	781a      	ldrb	r2, [r3, #0]
   835be:	b1fa      	cbz	r2, 83600 <Shellcom+0x114>
			*shellcom.pTxWrite++=*(char*)_pStr++; _nChar++;
   835c0:	4c3f      	ldr	r4, [pc, #252]	; (836c0 <Shellcom+0x1d4>)
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   835c2:	4e4d      	ldr	r6, [pc, #308]	; (836f8 <Shellcom+0x20c>)
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   835c4:	4d44      	ldr	r5, [pc, #272]	; (836d8 <Shellcom+0x1ec>)
			*shellcom.pTxWrite++=*(char*)_pStr++; _nChar++;
   835c6:	6822      	ldr	r2, [r4, #0]
   835c8:	1c50      	adds	r0, r2, #1
   835ca:	6020      	str	r0, [r4, #0]
   835cc:	3301      	adds	r3, #1
   835ce:	9307      	str	r3, [sp, #28]
   835d0:	780b      	ldrb	r3, [r1, #0]
   835d2:	7013      	strb	r3, [r2, #0]
   835d4:	9b06      	ldr	r3, [sp, #24]
   835d6:	3301      	adds	r3, #1
   835d8:	9306      	str	r3, [sp, #24]
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   835da:	6823      	ldr	r3, [r4, #0]
   835dc:	42b3      	cmp	r3, r6
   835de:	bf24      	itt	cs
   835e0:	4b38      	ldrcs	r3, [pc, #224]	; (836c4 <Shellcom+0x1d8>)
   835e2:	6023      	strcs	r3, [r4, #0]
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   835e4:	6822      	ldr	r2, [r4, #0]
   835e6:	6863      	ldr	r3, [r4, #4]
   835e8:	429a      	cmp	r2, r3
   835ea:	d00b      	beq.n	83604 <Shellcom+0x118>
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   835ec:	f44f 7100 	mov.w	r1, #512	; 0x200
   835f0:	4628      	mov	r0, r5
   835f2:	4b40      	ldr	r3, [pc, #256]	; (836f4 <Shellcom+0x208>)
   835f4:	4798      	blx	r3
		while(*(char*)_pStr)
   835f6:	9b07      	ldr	r3, [sp, #28]
   835f8:	4619      	mov	r1, r3
   835fa:	781a      	ldrb	r2, [r3, #0]
   835fc:	2a00      	cmp	r2, #0
   835fe:	d1e2      	bne.n	835c6 <Shellcom+0xda>
		return _nChar;
   83600:	9d06      	ldr	r5, [sp, #24]
   83602:	e7b3      	b.n	8356c <Shellcom+0x80>
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   83604:	2100      	movs	r1, #0
   83606:	2017      	movs	r0, #23
   83608:	4b38      	ldr	r3, [pc, #224]	; (836ec <Shellcom+0x200>)
   8360a:	4798      	blx	r3
   8360c:	e7ee      	b.n	835ec <Shellcom+0x100>
		_nChar=0;
   8360e:	2300      	movs	r3, #0
   83610:	9306      	str	r3, [sp, #24]
		while(_strLen)
   83612:	9b08      	ldr	r3, [sp, #32]
   83614:	b30b      	cbz	r3, 8365a <Shellcom+0x16e>
			*shellcom.pTxWrite++=*(char*)_pStr++; _strLen--; _nChar++;
   83616:	4c2a      	ldr	r4, [pc, #168]	; (836c0 <Shellcom+0x1d4>)
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   83618:	4e37      	ldr	r6, [pc, #220]	; (836f8 <Shellcom+0x20c>)
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   8361a:	4d2f      	ldr	r5, [pc, #188]	; (836d8 <Shellcom+0x1ec>)
			*shellcom.pTxWrite++=*(char*)_pStr++; _strLen--; _nChar++;
   8361c:	6823      	ldr	r3, [r4, #0]
   8361e:	1c5a      	adds	r2, r3, #1
   83620:	6022      	str	r2, [r4, #0]
   83622:	9a07      	ldr	r2, [sp, #28]
   83624:	1c51      	adds	r1, r2, #1
   83626:	9107      	str	r1, [sp, #28]
   83628:	7812      	ldrb	r2, [r2, #0]
   8362a:	701a      	strb	r2, [r3, #0]
   8362c:	9b08      	ldr	r3, [sp, #32]
   8362e:	3b01      	subs	r3, #1
   83630:	9308      	str	r3, [sp, #32]
   83632:	9b06      	ldr	r3, [sp, #24]
   83634:	3301      	adds	r3, #1
   83636:	9306      	str	r3, [sp, #24]
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   83638:	6823      	ldr	r3, [r4, #0]
   8363a:	42b3      	cmp	r3, r6
   8363c:	bf24      	itt	cs
   8363e:	4b21      	ldrcs	r3, [pc, #132]	; (836c4 <Shellcom+0x1d8>)
   83640:	6023      	strcs	r3, [r4, #0]
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   83642:	6822      	ldr	r2, [r4, #0]
   83644:	6863      	ldr	r3, [r4, #4]
   83646:	429a      	cmp	r2, r3
   83648:	d009      	beq.n	8365e <Shellcom+0x172>
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   8364a:	f44f 7100 	mov.w	r1, #512	; 0x200
   8364e:	4628      	mov	r0, r5
   83650:	4b28      	ldr	r3, [pc, #160]	; (836f4 <Shellcom+0x208>)
   83652:	4798      	blx	r3
		while(_strLen)
   83654:	9b08      	ldr	r3, [sp, #32]
   83656:	2b00      	cmp	r3, #0
   83658:	d1e0      	bne.n	8361c <Shellcom+0x130>
		return _nChar;
   8365a:	9d06      	ldr	r5, [sp, #24]
   8365c:	e786      	b.n	8356c <Shellcom+0x80>
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   8365e:	2100      	movs	r1, #0
   83660:	2017      	movs	r0, #23
   83662:	4b22      	ldr	r3, [pc, #136]	; (836ec <Shellcom+0x200>)
   83664:	4798      	blx	r3
   83666:	e7f0      	b.n	8364a <Shellcom+0x15e>
		_nChar=0;
   83668:	2300      	movs	r3, #0
   8366a:	9306      	str	r3, [sp, #24]
		while(_strLen)
   8366c:	9b08      	ldr	r3, [sp, #32]
   8366e:	b303      	cbz	r3, 836b2 <Shellcom+0x1c6>
			Putch(hexDigits[(*(char*)_pStr)>>4]);
   83670:	4d22      	ldr	r5, [pc, #136]	; (836fc <Shellcom+0x210>)
   83672:	2466      	movs	r4, #102	; 0x66
			Putch(' ');
   83674:	2620      	movs	r6, #32
			Putch(hexDigits[(*(char*)_pStr)>>4]);
   83676:	9b07      	ldr	r3, [sp, #28]
   83678:	781b      	ldrb	r3, [r3, #0]
   8367a:	091b      	lsrs	r3, r3, #4
   8367c:	5ce9      	ldrb	r1, [r5, r3]
   8367e:	4620      	mov	r0, r4
   83680:	f7ff ff34 	bl	834ec <Shellcom>
			Putch(hexDigits[(*(char*)_pStr)&0x0F]);
   83684:	9b07      	ldr	r3, [sp, #28]
   83686:	781b      	ldrb	r3, [r3, #0]
   83688:	f003 030f 	and.w	r3, r3, #15
   8368c:	5ce9      	ldrb	r1, [r5, r3]
   8368e:	4620      	mov	r0, r4
   83690:	f7ff ff2c 	bl	834ec <Shellcom>
			Putch(' ');
   83694:	4631      	mov	r1, r6
   83696:	4620      	mov	r0, r4
   83698:	f7ff ff28 	bl	834ec <Shellcom>
			 _pStr++; _strLen--; _nChar++;
   8369c:	9b07      	ldr	r3, [sp, #28]
   8369e:	3301      	adds	r3, #1
   836a0:	9307      	str	r3, [sp, #28]
   836a2:	9b08      	ldr	r3, [sp, #32]
   836a4:	3b01      	subs	r3, #1
   836a6:	9308      	str	r3, [sp, #32]
   836a8:	9a06      	ldr	r2, [sp, #24]
   836aa:	3201      	adds	r2, #1
   836ac:	9206      	str	r2, [sp, #24]
		while(_strLen)
   836ae:	2b00      	cmp	r3, #0
   836b0:	d1e1      	bne.n	83676 <Shellcom+0x18a>
		return _nChar;
   836b2:	9d06      	ldr	r5, [sp, #24]
   836b4:	e75a      	b.n	8356c <Shellcom+0x80>
		Error(ERROR_SHELLCOM_SWITCH_BAD_SC, (uint32_t)sc);
   836b6:	200c      	movs	r0, #12
   836b8:	4b0c      	ldr	r3, [pc, #48]	; (836ec <Shellcom+0x200>)
   836ba:	4798      	blx	r3
	return 0;
   836bc:	2500      	movs	r5, #0
   836be:	e755      	b.n	8356c <Shellcom+0x80>
   836c0:	20001dfc 	.word	0x20001dfc
   836c4:	20001e04 	.word	0x20001e04
   836c8:	000844b1 	.word	0x000844b1
   836cc:	000842b1 	.word	0x000842b1
   836d0:	08000001 	.word	0x08000001
   836d4:	0008adfc 	.word	0x0008adfc
   836d8:	400e0600 	.word	0x400e0600
   836dc:	000848d9 	.word	0x000848d9
   836e0:	e000e100 	.word	0xe000e100
   836e4:	0008491b 	.word	0x0008491b
   836e8:	00084923 	.word	0x00084923
   836ec:	00080f15 	.word	0x00080f15
   836f0:	00084917 	.word	0x00084917
   836f4:	0008490f 	.word	0x0008490f
   836f8:	20002204 	.word	0x20002204
   836fc:	0008a37c 	.word	0x0008a37c

00083700 <UART_Handler>:
enum{
	_SHELL_KBHIT = 2
};

void UART_Handler()
{
   83700:	b510      	push	{r4, lr}
   83702:	b082      	sub	sp, #8
	uint32_t dw_status = uart_get_status(UART);
   83704:	4816      	ldr	r0, [pc, #88]	; (83760 <UART_Handler+0x60>)
   83706:	4b17      	ldr	r3, [pc, #92]	; (83764 <UART_Handler+0x64>)
   83708:	4798      	blx	r3
   8370a:	4604      	mov	r4, r0
	//TX section //////////////////////////////////////////////////////////////////////////////////
	if(mIsBitsSet(dw_status,US_CSR_TXEMPTY))
   8370c:	f410 7f00 	tst.w	r0, #512	; 0x200
   83710:	d011      	beq.n	83736 <UART_Handler+0x36>
	{
		if(shellcom.pTxRead!=shellcom.pTxWrite)
   83712:	4a15      	ldr	r2, [pc, #84]	; (83768 <UART_Handler+0x68>)
   83714:	6853      	ldr	r3, [r2, #4]
   83716:	6812      	ldr	r2, [r2, #0]
   83718:	4293      	cmp	r3, r2
   8371a:	d011      	beq.n	83740 <UART_Handler+0x40>
		{
			UART->UART_THR = *shellcom.pTxRead++;
   8371c:	1c5a      	adds	r2, r3, #1
   8371e:	4912      	ldr	r1, [pc, #72]	; (83768 <UART_Handler+0x68>)
   83720:	604a      	str	r2, [r1, #4]
   83722:	7819      	ldrb	r1, [r3, #0]
   83724:	4b0e      	ldr	r3, [pc, #56]	; (83760 <UART_Handler+0x60>)
   83726:	61d9      	str	r1, [r3, #28]
			if(shellcom.pTxRead>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxRead=shellcomTxBuf;
   83728:	4b10      	ldr	r3, [pc, #64]	; (8376c <UART_Handler+0x6c>)
   8372a:	429a      	cmp	r2, r3
   8372c:	d303      	bcc.n	83736 <UART_Handler+0x36>
   8372e:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
   83732:	4b0d      	ldr	r3, [pc, #52]	; (83768 <UART_Handler+0x68>)
   83734:	605a      	str	r2, [r3, #4]
			uart_disable_interrupt(UART,US_IER_TXEMPTY);
		}
	}

	//RX section //////////////////////////////////////////////////////////////////////////////////
	if(mIsBitsSet(dw_status,US_CSR_RXRDY))
   83736:	f014 0f01 	tst.w	r4, #1
   8373a:	d107      	bne.n	8374c <UART_Handler+0x4c>
	{
		PushTask(Shell,_SHELL_KBHIT,UART->UART_RHR,0);
	}
}
   8373c:	b002      	add	sp, #8
   8373e:	bd10      	pop	{r4, pc}
			uart_disable_interrupt(UART,US_IER_TXEMPTY);
   83740:	f44f 7100 	mov.w	r1, #512	; 0x200
   83744:	4806      	ldr	r0, [pc, #24]	; (83760 <UART_Handler+0x60>)
   83746:	4b0a      	ldr	r3, [pc, #40]	; (83770 <UART_Handler+0x70>)
   83748:	4798      	blx	r3
   8374a:	e7f4      	b.n	83736 <UART_Handler+0x36>
		PushTask(Shell,_SHELL_KBHIT,UART->UART_RHR,0);
   8374c:	4b04      	ldr	r3, [pc, #16]	; (83760 <UART_Handler+0x60>)
   8374e:	699b      	ldr	r3, [r3, #24]
   83750:	2200      	movs	r2, #0
   83752:	9200      	str	r2, [sp, #0]
   83754:	2202      	movs	r2, #2
   83756:	4907      	ldr	r1, [pc, #28]	; (83774 <UART_Handler+0x74>)
   83758:	2066      	movs	r0, #102	; 0x66
   8375a:	4c07      	ldr	r4, [pc, #28]	; (83778 <UART_Handler+0x78>)
   8375c:	47a0      	blx	r4
}
   8375e:	e7ed      	b.n	8373c <UART_Handler+0x3c>
   83760:	400e0600 	.word	0x400e0600
   83764:	00084917 	.word	0x00084917
   83768:	20001dfc 	.word	0x20001dfc
   8376c:	20002204 	.word	0x20002204
   83770:	00084913 	.word	0x00084913
   83774:	000823cd 	.word	0x000823cd
   83778:	00083881 	.word	0x00083881

0008377c <Stack>:
 */ 

 #include "kernel.h"
 #define STACK_SIGNATURE		0xabcd
 uint32_t Stack(uint32_t sc, ...)
 {
   8377c:	b40f      	push	{r0, r1, r2, r3}
   8377e:	b510      	push	{r4, lr}
	switch(sc)
   83780:	9902      	ldr	r1, [sp, #8]
   83782:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   83786:	2b04      	cmp	r3, #4
   83788:	d873      	bhi.n	83872 <Stack+0xf6>
   8378a:	e8df f003 	tbb	[pc, r3]
   8378e:	7203      	.short	0x7203
   83790:	3f13      	.short	0x3f13
   83792:	65          	.byte	0x65
   83793:	00          	.byte	0x00
#define _org		((char*)pa2)
#define _size		((uint16_t)pa3)
#define _elemSize	((uint8_t)pa4)

	case STACK_NEW:
		_stack->size = _size;
   83794:	9b03      	ldr	r3, [sp, #12]
   83796:	9a05      	ldr	r2, [sp, #20]
   83798:	811a      	strh	r2, [r3, #8]
		_stack->org = _org;
   8379a:	9a04      	ldr	r2, [sp, #16]
   8379c:	605a      	str	r2, [r3, #4]
		_stack->sp = _org;
   8379e:	601a      	str	r2, [r3, #0]
		_stack->elemSize = _elemSize;
   837a0:	9a06      	ldr	r2, [sp, #24]
   837a2:	729a      	strb	r2, [r3, #10]
		_stack->status = STACK_SIGNATURE; 
   837a4:	f64a 32cd 	movw	r2, #43981	; 0xabcd
   837a8:	819a      	strh	r2, [r3, #12]
	default:
		Error(ERROR_STACK_SWITCH_BAD_SC, sc);
		
	}
	return 0;
   837aa:	2000      	movs	r0, #0
   837ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   837b0:	b004      	add	sp, #16
   837b2:	4770      	bx	lr
		if(_stack->status != STACK_SIGNATURE) Error(ERROR_STACK_NOT_INIT, sc);
   837b4:	9c03      	ldr	r4, [sp, #12]
   837b6:	89a2      	ldrh	r2, [r4, #12]
   837b8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   837bc:	429a      	cmp	r2, r3
   837be:	d003      	beq.n	837c8 <Stack+0x4c>
   837c0:	2166      	movs	r1, #102	; 0x66
   837c2:	2033      	movs	r0, #51	; 0x33
   837c4:	4b2d      	ldr	r3, [pc, #180]	; (8387c <Stack+0x100>)
   837c6:	4798      	blx	r3
		if(_stack->sp == (_stack->org + (_stack->size * _stack->elemSize))) Error(ERROR_STACK_PUSH_FULL, sc);
   837c8:	8923      	ldrh	r3, [r4, #8]
   837ca:	7aa1      	ldrb	r1, [r4, #10]
   837cc:	6862      	ldr	r2, [r4, #4]
   837ce:	fb01 2303 	mla	r3, r1, r3, r2
   837d2:	6822      	ldr	r2, [r4, #0]
   837d4:	429a      	cmp	r2, r3
   837d6:	d012      	beq.n	837fe <Stack+0x82>
		for(_k = 0; _k < _stack->elemSize; _k++)
   837d8:	2300      	movs	r3, #0
   837da:	9302      	str	r3, [sp, #8]
   837dc:	7aa3      	ldrb	r3, [r4, #10]
   837de:	b19b      	cbz	r3, 83808 <Stack+0x8c>
   837e0:	9a04      	ldr	r2, [sp, #16]
   837e2:	3a01      	subs	r2, #1
			_stack->sp[_k] = ((char*)_elem)[_k];
   837e4:	2300      	movs	r3, #0
   837e6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   837ea:	6821      	ldr	r1, [r4, #0]
   837ec:	54c8      	strb	r0, [r1, r3]
		for(_k = 0; _k < _stack->elemSize; _k++)
   837ee:	3301      	adds	r3, #1
   837f0:	7aa1      	ldrb	r1, [r4, #10]
   837f2:	4299      	cmp	r1, r3
   837f4:	d8f7      	bhi.n	837e6 <Stack+0x6a>
		_stack->sp+=_stack->elemSize;
   837f6:	6823      	ldr	r3, [r4, #0]
   837f8:	4419      	add	r1, r3
   837fa:	6021      	str	r1, [r4, #0]
		break;
   837fc:	e7d5      	b.n	837aa <Stack+0x2e>
		if(_stack->sp == (_stack->org + (_stack->size * _stack->elemSize))) Error(ERROR_STACK_PUSH_FULL, sc);
   837fe:	2166      	movs	r1, #102	; 0x66
   83800:	2034      	movs	r0, #52	; 0x34
   83802:	4b1e      	ldr	r3, [pc, #120]	; (8387c <Stack+0x100>)
   83804:	4798      	blx	r3
   83806:	e7e7      	b.n	837d8 <Stack+0x5c>
		for(_k = 0; _k < _stack->elemSize; _k++)
   83808:	2100      	movs	r1, #0
   8380a:	e7f4      	b.n	837f6 <Stack+0x7a>
		if(_stack->status != STACK_SIGNATURE) Error(ERROR_STACK_NOT_INIT, sc);
   8380c:	9c03      	ldr	r4, [sp, #12]
   8380e:	89a2      	ldrh	r2, [r4, #12]
   83810:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   83814:	429a      	cmp	r2, r3
   83816:	d003      	beq.n	83820 <Stack+0xa4>
   83818:	2167      	movs	r1, #103	; 0x67
   8381a:	2033      	movs	r0, #51	; 0x33
   8381c:	4b17      	ldr	r3, [pc, #92]	; (8387c <Stack+0x100>)
   8381e:	4798      	blx	r3
		if(_stack->sp == _stack->org) Error(ERROR_STACK_UNDERFLOW, sc);
   83820:	6822      	ldr	r2, [r4, #0]
   83822:	6863      	ldr	r3, [r4, #4]
   83824:	429a      	cmp	r2, r3
   83826:	d012      	beq.n	8384e <Stack+0xd2>
		_stack->sp-=_stack->elemSize;
   83828:	7aa2      	ldrb	r2, [r4, #10]
   8382a:	6823      	ldr	r3, [r4, #0]
   8382c:	1a9b      	subs	r3, r3, r2
   8382e:	6023      	str	r3, [r4, #0]
		for(_k = 0; _k < _stack->elemSize; _k++)
   83830:	2300      	movs	r3, #0
   83832:	9302      	str	r3, [sp, #8]
   83834:	2a00      	cmp	r2, #0
   83836:	d0b8      	beq.n	837aa <Stack+0x2e>
   83838:	9a04      	ldr	r2, [sp, #16]
   8383a:	3a01      	subs	r2, #1
			((char*)_elem)[_k] = _stack->sp[_k];
   8383c:	6821      	ldr	r1, [r4, #0]
   8383e:	5cc9      	ldrb	r1, [r1, r3]
   83840:	f802 1f01 	strb.w	r1, [r2, #1]!
		for(_k = 0; _k < _stack->elemSize; _k++)
   83844:	3301      	adds	r3, #1
   83846:	7aa1      	ldrb	r1, [r4, #10]
   83848:	4299      	cmp	r1, r3
   8384a:	d8f7      	bhi.n	8383c <Stack+0xc0>
   8384c:	e7ad      	b.n	837aa <Stack+0x2e>
		if(_stack->sp == _stack->org) Error(ERROR_STACK_UNDERFLOW, sc);
   8384e:	2167      	movs	r1, #103	; 0x67
   83850:	2035      	movs	r0, #53	; 0x35
   83852:	4b0a      	ldr	r3, [pc, #40]	; (8387c <Stack+0x100>)
   83854:	4798      	blx	r3
   83856:	e7e7      	b.n	83828 <Stack+0xac>
		if(_stack->status != STACK_SIGNATURE) Error(ERROR_STACK_NOT_INIT, sc);
   83858:	9c03      	ldr	r4, [sp, #12]
   8385a:	89a2      	ldrh	r2, [r4, #12]
   8385c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   83860:	429a      	cmp	r2, r3
   83862:	d003      	beq.n	8386c <Stack+0xf0>
   83864:	2168      	movs	r1, #104	; 0x68
   83866:	2033      	movs	r0, #51	; 0x33
   83868:	4b04      	ldr	r3, [pc, #16]	; (8387c <Stack+0x100>)
   8386a:	4798      	blx	r3
		_stack->sp = _stack->org;
   8386c:	6863      	ldr	r3, [r4, #4]
   8386e:	6023      	str	r3, [r4, #0]
		break;
   83870:	e79b      	b.n	837aa <Stack+0x2e>
		Error(ERROR_STACK_SWITCH_BAD_SC, sc);
   83872:	201f      	movs	r0, #31
   83874:	4b01      	ldr	r3, [pc, #4]	; (8387c <Stack+0x100>)
   83876:	4798      	blx	r3
   83878:	e797      	b.n	837aa <Stack+0x2e>
   8387a:	bf00      	nop
   8387c:	00080f15 	.word	0x00080f15

00083880 <Taskman>:
	_TASKMAN_DELAYED_TASK_PROC	= 1
};


uint32_t Taskman(uint32_t sc, ...)
{
   83880:	b40f      	push	{r0, r1, r2, r3}
   83882:	b5f0      	push	{r4, r5, r6, r7, lr}
   83884:	b083      	sub	sp, #12
	switch(sc)
   83886:	9908      	ldr	r1, [sp, #32]
   83888:	2964      	cmp	r1, #100	; 0x64
   8388a:	d028      	beq.n	838de <Taskman+0x5e>
   8388c:	d91e      	bls.n	838cc <Taskman+0x4c>
   8388e:	2966      	cmp	r1, #102	; 0x66
   83890:	d06b      	beq.n	8396a <Taskman+0xea>
   83892:	2967      	cmp	r1, #103	; 0x67
   83894:	f040 80cd 	bne.w	83a32 <Taskman+0x1b2>
#undef _delay
#undef k
		break;

	case TASKMAN_POP:
		cpu_irq_enter_critical();
   83898:	4b68      	ldr	r3, [pc, #416]	; (83a3c <Taskman+0x1bc>)
   8389a:	4798      	blx	r3
		if(taskman.pPop!=taskman.pPush)
   8389c:	4a68      	ldr	r2, [pc, #416]	; (83a40 <Taskman+0x1c0>)
   8389e:	6853      	ldr	r3, [r2, #4]
   838a0:	6812      	ldr	r2, [r2, #0]
   838a2:	4293      	cmp	r3, r2
   838a4:	f000 80ae 	beq.w	83a04 <Taskman+0x184>
		{
			
			t_pTaskFunc	 func;
			uint32_t pa;
			func = taskman.pPop->pFunc;
   838a8:	681d      	ldr	r5, [r3, #0]
			sc = taskman.pPop->sc;
   838aa:	685c      	ldr	r4, [r3, #4]
   838ac:	9408      	str	r4, [sp, #32]
			pa = taskman.pPop->param;
   838ae:	689e      	ldr	r6, [r3, #8]
			taskman.pPop++;
   838b0:	3310      	adds	r3, #16
			if(taskman.pPop>=tasks+TASKMAN_TASK_LIST_LEN) taskman.pPop=tasks;
   838b2:	4a64      	ldr	r2, [pc, #400]	; (83a44 <Taskman+0x1c4>)
   838b4:	4293      	cmp	r3, r2
   838b6:	f0c0 80a2 	bcc.w	839fe <Taskman+0x17e>
   838ba:	4a63      	ldr	r2, [pc, #396]	; (83a48 <Taskman+0x1c8>)
   838bc:	4b60      	ldr	r3, [pc, #384]	; (83a40 <Taskman+0x1c0>)
   838be:	605a      	str	r2, [r3, #4]
			cpu_irq_leave_critical();
   838c0:	4b62      	ldr	r3, [pc, #392]	; (83a4c <Taskman+0x1cc>)
   838c2:	4798      	blx	r3
		
			func(sc,pa);
   838c4:	4631      	mov	r1, r6
   838c6:	4620      	mov	r0, r4
   838c8:	47a8      	blx	r5

			return 0; //Must return here because of "cpu_irq_leave_critical()"
   838ca:	e048      	b.n	8395e <Taskman+0xde>
	switch(sc)
   838cc:	2901      	cmp	r1, #1
   838ce:	f040 80b0 	bne.w	83a32 <Taskman+0x1b2>


	////////// PRIVATE SERVICES IMPLEMENTATION ///////////////////////////////////////////
	case _TASKMAN_DELAYED_TASK_PROC:
#define k sc
		for(k=0;k<TASKMAN_DELAYED_TASK_LIST_LEN;k++)
   838d2:	2500      	movs	r5, #0
   838d4:	9508      	str	r5, [sp, #32]
   838d6:	4c5e      	ldr	r4, [pc, #376]	; (83a50 <Taskman+0x1d0>)
		{
			if(dTasks[k].delay)
			{
				if(--dTasks[k].delay==0)
				{
					PushTask(
   838d8:	462f      	mov	r7, r5
   838da:	2666      	movs	r6, #102	; 0x66
   838dc:	e09a      	b.n	83a14 <Taskman+0x194>
		taskman.pPop=taskman.pPush=tasks;
   838de:	4b58      	ldr	r3, [pc, #352]	; (83a40 <Taskman+0x1c0>)
   838e0:	4a59      	ldr	r2, [pc, #356]	; (83a48 <Taskman+0x1c8>)
   838e2:	601a      	str	r2, [r3, #0]
   838e4:	605a      	str	r2, [r3, #4]
   838e6:	4b5a      	ldr	r3, [pc, #360]	; (83a50 <Taskman+0x1d0>)
   838e8:	f503 61c8 	add.w	r1, r3, #1600	; 0x640
			dTasks[k].delay=0;
   838ec:	2200      	movs	r2, #0
   838ee:	60da      	str	r2, [r3, #12]
   838f0:	3310      	adds	r3, #16
		for(k=0;k<TASKMAN_DELAYED_TASK_LIST_LEN;k++)
   838f2:	428b      	cmp	r3, r1
   838f4:	d1fb      	bne.n	838ee <Taskman+0x6e>
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   838f6:	4b57      	ldr	r3, [pc, #348]	; (83a54 <Taskman+0x1d4>)
   838f8:	2202      	movs	r2, #2
   838fa:	661a      	str	r2, [r3, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   838fc:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   838fe:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   83900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   83904:	6f19      	ldr	r1, [r3, #112]	; 0x70
   83906:	f021 0102 	bic.w	r1, r1, #2
   8390a:	6719      	str	r1, [r3, #112]	; 0x70
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   8390c:	605a      	str	r2, [r3, #4]
   8390e:	2016      	movs	r0, #22
   83910:	4b51      	ldr	r3, [pc, #324]	; (83a58 <Taskman+0x1d8>)
   83912:	4798      	blx	r3

	//Configure the PMC to enable the TC module.
	sysclk_enable_peripheral_clock(ID_TC_WAVEFORM);

	//Init TC to waveform mode.
	tc_init(
   83914:	4c51      	ldr	r4, [pc, #324]	; (83a5c <Taskman+0x1dc>)
   83916:	4a52      	ldr	r2, [pc, #328]	; (83a60 <Taskman+0x1e0>)
   83918:	2100      	movs	r1, #0
   8391a:	4620      	mov	r0, r4
   8391c:	4b51      	ldr	r3, [pc, #324]	; (83a64 <Taskman+0x1e4>)
   8391e:	4798      	blx	r3

	//Configure waveform frequency and duty cycle.
	rc =	(sysclk_get_peripheral_bus_hz(TC) /
	TC_WAVEFORM_DIVISOR) /
	TC_WAVEFORM_FREQUENCY;
	tc_write_rc(TC, TC_CHANNEL_WAVEFORM, rc);
   83920:	f240 22ee 	movw	r2, #750	; 0x2ee
   83924:	2100      	movs	r1, #0
   83926:	4620      	mov	r0, r4
   83928:	4b4f      	ldr	r3, [pc, #316]	; (83a68 <Taskman+0x1e8>)
   8392a:	4798      	blx	r3

	ra = (100 - TC_WAVEFORM_DUTY_CYCLE) * rc / 100;
	tc_write_ra(TC, TC_CHANNEL_WAVEFORM, ra);
   8392c:	f240 220d 	movw	r2, #525	; 0x20d
   83930:	2100      	movs	r1, #0
   83932:	4620      	mov	r0, r4
   83934:	4b4d      	ldr	r3, [pc, #308]	; (83a6c <Taskman+0x1ec>)
   83936:	4798      	blx	r3

	//Enable TC TC_CHANNEL_WAVEFORM
	tc_start(TC, TC_CHANNEL_WAVEFORM);
   83938:	2100      	movs	r1, #0
   8393a:	4620      	mov	r0, r4
   8393c:	4b4c      	ldr	r3, [pc, #304]	; (83a70 <Taskman+0x1f0>)
   8393e:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   83940:	4b4c      	ldr	r3, [pc, #304]	; (83a74 <Taskman+0x1f4>)
   83942:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   83946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8394a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8394e:	2100      	movs	r1, #0
   83950:	f883 1316 	strb.w	r1, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83954:	601a      	str	r2, [r3, #0]
		tc_enable_interrupt(TC, TC_CHANNEL_WAVEFORM, TC_IER_CPAS);
   83956:	2204      	movs	r2, #4
   83958:	4620      	mov	r0, r4
   8395a:	4b47      	ldr	r3, [pc, #284]	; (83a78 <Taskman+0x1f8>)
   8395c:	4798      	blx	r3
}
   8395e:	2000      	movs	r0, #0
   83960:	b003      	add	sp, #12
   83962:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   83966:	b004      	add	sp, #16
   83968:	4770      	bx	lr
		cpu_irq_enter_critical();
   8396a:	4b34      	ldr	r3, [pc, #208]	; (83a3c <Taskman+0x1bc>)
   8396c:	4798      	blx	r3
		if(_delay)
   8396e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   83970:	b345      	cbz	r5, 839c4 <Taskman+0x144>
			for(k=0;(k<TASKMAN_DELAYED_TASK_LIST_LEN)&&(dTasks[k].delay);k++);
   83972:	2300      	movs	r3, #0
   83974:	9308      	str	r3, [sp, #32]
   83976:	4b36      	ldr	r3, [pc, #216]	; (83a50 <Taskman+0x1d0>)
   83978:	68db      	ldr	r3, [r3, #12]
   8397a:	b1a3      	cbz	r3, 839a6 <Taskman+0x126>
   8397c:	2301      	movs	r3, #1
   8397e:	9308      	str	r3, [sp, #32]
   83980:	4a33      	ldr	r2, [pc, #204]	; (83a50 <Taskman+0x1d0>)
   83982:	2000      	movs	r0, #0
   83984:	461c      	mov	r4, r3
   83986:	69d1      	ldr	r1, [r2, #28]
   83988:	b151      	cbz	r1, 839a0 <Taskman+0x120>
   8398a:	3301      	adds	r3, #1
   8398c:	3210      	adds	r2, #16
   8398e:	4620      	mov	r0, r4
   83990:	2b64      	cmp	r3, #100	; 0x64
   83992:	d1f8      	bne.n	83986 <Taskman+0x106>
			if(k==TASKMAN_DELAYED_TASK_LIST_LEN) Error(ERROR_TASKMAN_DELAYED_TASKLIST_FULL, (uint32_t)0);
   83994:	2100      	movs	r1, #0
   83996:	2016      	movs	r0, #22
   83998:	4b38      	ldr	r3, [pc, #224]	; (83a7c <Taskman+0x1fc>)
   8399a:	4798      	blx	r3
   8399c:	2364      	movs	r3, #100	; 0x64
   8399e:	e002      	b.n	839a6 <Taskman+0x126>
   839a0:	b970      	cbnz	r0, 839c0 <Taskman+0x140>
   839a2:	2b64      	cmp	r3, #100	; 0x64
   839a4:	d0f6      	beq.n	83994 <Taskman+0x114>
			dTasks[k].pFunc=_func;
   839a6:	492a      	ldr	r1, [pc, #168]	; (83a50 <Taskman+0x1d0>)
   839a8:	011b      	lsls	r3, r3, #4
   839aa:	18ca      	adds	r2, r1, r3
   839ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   839ae:	50c8      	str	r0, [r1, r3]
			dTasks[k].sc=_sc;
   839b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   839b2:	6053      	str	r3, [r2, #4]
			dTasks[k].param=_param;
   839b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   839b6:	6093      	str	r3, [r2, #8]
			dTasks[k].delay=_delay;
   839b8:	60d5      	str	r5, [r2, #12]
		cpu_irq_leave_critical();
   839ba:	4b24      	ldr	r3, [pc, #144]	; (83a4c <Taskman+0x1cc>)
   839bc:	4798      	blx	r3
		break;
   839be:	e7ce      	b.n	8395e <Taskman+0xde>
   839c0:	9308      	str	r3, [sp, #32]
   839c2:	e7ee      	b.n	839a2 <Taskman+0x122>
			taskman.pPush->pFunc=_func;
   839c4:	4b1e      	ldr	r3, [pc, #120]	; (83a40 <Taskman+0x1c0>)
   839c6:	681a      	ldr	r2, [r3, #0]
   839c8:	9909      	ldr	r1, [sp, #36]	; 0x24
   839ca:	6011      	str	r1, [r2, #0]
			taskman.pPush->sc=_sc;
   839cc:	681b      	ldr	r3, [r3, #0]
   839ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   839d0:	605a      	str	r2, [r3, #4]
			taskman.pPush->param=_param;
   839d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   839d4:	609a      	str	r2, [r3, #8]
			taskman.pPush++;
   839d6:	3310      	adds	r3, #16
			if(taskman.pPush>=tasks+TASKMAN_TASK_LIST_LEN) taskman.pPush=tasks;
   839d8:	4a1a      	ldr	r2, [pc, #104]	; (83a44 <Taskman+0x1c4>)
   839da:	4293      	cmp	r3, r2
   839dc:	d20b      	bcs.n	839f6 <Taskman+0x176>
			taskman.pPush++;
   839de:	4a18      	ldr	r2, [pc, #96]	; (83a40 <Taskman+0x1c0>)
   839e0:	6013      	str	r3, [r2, #0]
			if(taskman.pPush==taskman.pPop) Error(ERROR_TASKMAN_TASKLIST_FULL, (uint32_t)0);
   839e2:	4b17      	ldr	r3, [pc, #92]	; (83a40 <Taskman+0x1c0>)
   839e4:	681a      	ldr	r2, [r3, #0]
   839e6:	685b      	ldr	r3, [r3, #4]
   839e8:	429a      	cmp	r2, r3
   839ea:	d1e6      	bne.n	839ba <Taskman+0x13a>
   839ec:	2100      	movs	r1, #0
   839ee:	2015      	movs	r0, #21
   839f0:	4b22      	ldr	r3, [pc, #136]	; (83a7c <Taskman+0x1fc>)
   839f2:	4798      	blx	r3
   839f4:	e7e1      	b.n	839ba <Taskman+0x13a>
			if(taskman.pPush>=tasks+TASKMAN_TASK_LIST_LEN) taskman.pPush=tasks;
   839f6:	4a14      	ldr	r2, [pc, #80]	; (83a48 <Taskman+0x1c8>)
   839f8:	4b11      	ldr	r3, [pc, #68]	; (83a40 <Taskman+0x1c0>)
   839fa:	601a      	str	r2, [r3, #0]
   839fc:	e7f1      	b.n	839e2 <Taskman+0x162>
			taskman.pPop++;
   839fe:	4a10      	ldr	r2, [pc, #64]	; (83a40 <Taskman+0x1c0>)
   83a00:	6053      	str	r3, [r2, #4]
   83a02:	e75d      	b.n	838c0 <Taskman+0x40>
		cpu_irq_leave_critical();
   83a04:	4b11      	ldr	r3, [pc, #68]	; (83a4c <Taskman+0x1cc>)
   83a06:	4798      	blx	r3
		break;
   83a08:	e7a9      	b.n	8395e <Taskman+0xde>
		for(k=0;k<TASKMAN_DELAYED_TASK_LIST_LEN;k++)
   83a0a:	3501      	adds	r5, #1
   83a0c:	9508      	str	r5, [sp, #32]
   83a0e:	3410      	adds	r4, #16
   83a10:	2d64      	cmp	r5, #100	; 0x64
   83a12:	d0a4      	beq.n	8395e <Taskman+0xde>
			if(dTasks[k].delay)
   83a14:	68e3      	ldr	r3, [r4, #12]
   83a16:	2b00      	cmp	r3, #0
   83a18:	d0f7      	beq.n	83a0a <Taskman+0x18a>
				if(--dTasks[k].delay==0)
   83a1a:	3b01      	subs	r3, #1
   83a1c:	60e3      	str	r3, [r4, #12]
   83a1e:	2b00      	cmp	r3, #0
   83a20:	d1f3      	bne.n	83a0a <Taskman+0x18a>
					PushTask(
   83a22:	68a3      	ldr	r3, [r4, #8]
   83a24:	6862      	ldr	r2, [r4, #4]
   83a26:	6821      	ldr	r1, [r4, #0]
   83a28:	9700      	str	r7, [sp, #0]
   83a2a:	4630      	mov	r0, r6
   83a2c:	f7ff ff28 	bl	83880 <Taskman>
   83a30:	e7eb      	b.n	83a0a <Taskman+0x18a>
		Error(ERROR_TASKMAN_SWITCH_BAD_SC,  (uint32_t)sc);
   83a32:	200b      	movs	r0, #11
   83a34:	4b11      	ldr	r3, [pc, #68]	; (83a7c <Taskman+0x1fc>)
   83a36:	4798      	blx	r3
   83a38:	e791      	b.n	8395e <Taskman+0xde>
   83a3a:	bf00      	nop
   83a3c:	00084945 	.word	0x00084945
   83a40:	20002344 	.word	0x20002344
   83a44:	20002344 	.word	0x20002344
   83a48:	20002204 	.word	0x20002204
   83a4c:	00084981 	.word	0x00084981
   83a50:	2000234c 	.word	0x2000234c
   83a54:	400e0c00 	.word	0x400e0c00
   83a58:	000844b1 	.word	0x000844b1
   83a5c:	40080000 	.word	0x40080000
   83a60:	0009c003 	.word	0x0009c003
   83a64:	00084899 	.word	0x00084899
   83a68:	000848c1 	.word	0x000848c1
   83a6c:	000848b9 	.word	0x000848b9
   83a70:	000848b1 	.word	0x000848b1
   83a74:	e000e100 	.word	0xe000e100
   83a78:	000848c9 	.word	0x000848c9
   83a7c:	00080f15 	.word	0x00080f15

00083a80 <TC0_Handler>:
{
   83a80:	b508      	push	{r3, lr}
	tc_get_status(TC, TC_CHANNEL_WAVEFORM);
   83a82:	2100      	movs	r1, #0
   83a84:	4806      	ldr	r0, [pc, #24]	; (83aa0 <TC0_Handler+0x20>)
   83a86:	4b07      	ldr	r3, [pc, #28]	; (83aa4 <TC0_Handler+0x24>)
   83a88:	4798      	blx	r3
	Taskman(_TASKMAN_DELAYED_TASK_PROC);
   83a8a:	2001      	movs	r0, #1
   83a8c:	4b06      	ldr	r3, [pc, #24]	; (83aa8 <TC0_Handler+0x28>)
   83a8e:	4798      	blx	r3
	Shell(_SHELL_TIMER);
   83a90:	2003      	movs	r0, #3
   83a92:	4b06      	ldr	r3, [pc, #24]	; (83aac <TC0_Handler+0x2c>)
   83a94:	4798      	blx	r3
	ComRS485(_COMRS485_TIMER);
   83a96:	2001      	movs	r0, #1
   83a98:	4b05      	ldr	r3, [pc, #20]	; (83ab0 <TC0_Handler+0x30>)
   83a9a:	4798      	blx	r3
   83a9c:	bd08      	pop	{r3, pc}
   83a9e:	bf00      	nop
   83aa0:	40080000 	.word	0x40080000
   83aa4:	000848d1 	.word	0x000848d1
   83aa8:	00083881 	.word	0x00083881
   83aac:	000823cd 	.word	0x000823cd
   83ab0:	00080b25 	.word	0x00080b25

00083ab4 <mstrtokRestore>:
    return pToken;
}

void  mstrtokRestore(void)
{
    if(_pEndToken) *_pEndToken=_chEndToken;
   83ab4:	4b03      	ldr	r3, [pc, #12]	; (83ac4 <mstrtokRestore+0x10>)
   83ab6:	681b      	ldr	r3, [r3, #0]
   83ab8:	b113      	cbz	r3, 83ac0 <mstrtokRestore+0xc>
   83aba:	4a03      	ldr	r2, [pc, #12]	; (83ac8 <mstrtokRestore+0x14>)
   83abc:	7812      	ldrb	r2, [r2, #0]
   83abe:	701a      	strb	r2, [r3, #0]
   83ac0:	4770      	bx	lr
   83ac2:	bf00      	nop
   83ac4:	20001178 	.word	0x20001178
   83ac8:	20001176 	.word	0x20001176

00083acc <mstrtokReset>:
}

void  mstrtokReset(void)
{
    _chEndToken  = '\0';
   83acc:	2300      	movs	r3, #0
   83ace:	4a02      	ldr	r2, [pc, #8]	; (83ad8 <mstrtokReset+0xc>)
   83ad0:	7013      	strb	r3, [r2, #0]
    _pEndToken = NULL;
   83ad2:	4a02      	ldr	r2, [pc, #8]	; (83adc <mstrtokReset+0x10>)
   83ad4:	6013      	str	r3, [r2, #0]
   83ad6:	4770      	bx	lr
   83ad8:	20001176 	.word	0x20001176
   83adc:	20001178 	.word	0x20001178

00083ae0 <_IsSeparator>:
}


char _IsSeparator(char ch, const char*pSep)
{
    while(*pSep && (*pSep!=ch)) pSep++;
   83ae0:	780b      	ldrb	r3, [r1, #0]
   83ae2:	b13b      	cbz	r3, 83af4 <_IsSeparator+0x14>
   83ae4:	4298      	cmp	r0, r3
   83ae6:	d005      	beq.n	83af4 <_IsSeparator+0x14>
   83ae8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   83aec:	b113      	cbz	r3, 83af4 <_IsSeparator+0x14>
   83aee:	4283      	cmp	r3, r0
   83af0:	d1fa      	bne.n	83ae8 <_IsSeparator+0x8>
   83af2:	4603      	mov	r3, r0
    return *pSep;
}
   83af4:	4618      	mov	r0, r3
   83af6:	4770      	bx	lr

00083af8 <mstrtok>:
{
   83af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(pStr) 
   83afc:	2800      	cmp	r0, #0
   83afe:	d02b      	beq.n	83b58 <mstrtok+0x60>
        pToken=pStr;
   83b00:	4a1d      	ldr	r2, [pc, #116]	; (83b78 <mstrtok+0x80>)
   83b02:	6010      	str	r0, [r2, #0]
    while(*pToken && _IsSeparator(*pToken,pSep)) { pToken++; }
   83b04:	4b1c      	ldr	r3, [pc, #112]	; (83b78 <mstrtok+0x80>)
   83b06:	681d      	ldr	r5, [r3, #0]
   83b08:	782c      	ldrb	r4, [r5, #0]
   83b0a:	2c00      	cmp	r4, #0
   83b0c:	d030      	beq.n	83b70 <mstrtok+0x78>
   83b0e:	4688      	mov	r8, r1
   83b10:	4e1a      	ldr	r6, [pc, #104]	; (83b7c <mstrtok+0x84>)
   83b12:	4f19      	ldr	r7, [pc, #100]	; (83b78 <mstrtok+0x80>)
   83b14:	4641      	mov	r1, r8
   83b16:	4620      	mov	r0, r4
   83b18:	47b0      	blx	r6
   83b1a:	b120      	cbz	r0, 83b26 <mstrtok+0x2e>
   83b1c:	3501      	adds	r5, #1
   83b1e:	603d      	str	r5, [r7, #0]
   83b20:	782c      	ldrb	r4, [r5, #0]
   83b22:	2c00      	cmp	r4, #0
   83b24:	d1f6      	bne.n	83b14 <mstrtok+0x1c>
    _pEndToken=pToken;
   83b26:	4b16      	ldr	r3, [pc, #88]	; (83b80 <mstrtok+0x88>)
   83b28:	601d      	str	r5, [r3, #0]
    while(*_pEndToken && !_IsSeparator(*_pEndToken,pSep)) { _pEndToken++; }
   83b2a:	782c      	ldrb	r4, [r5, #0]
   83b2c:	b1f4      	cbz	r4, 83b6c <mstrtok+0x74>
   83b2e:	462e      	mov	r6, r5
   83b30:	4f12      	ldr	r7, [pc, #72]	; (83b7c <mstrtok+0x84>)
   83b32:	f8df 904c 	ldr.w	r9, [pc, #76]	; 83b80 <mstrtok+0x88>
   83b36:	4641      	mov	r1, r8
   83b38:	4620      	mov	r0, r4
   83b3a:	47b8      	blx	r7
   83b3c:	b928      	cbnz	r0, 83b4a <mstrtok+0x52>
   83b3e:	3601      	adds	r6, #1
   83b40:	f8c9 6000 	str.w	r6, [r9]
   83b44:	7834      	ldrb	r4, [r6, #0]
   83b46:	2c00      	cmp	r4, #0
   83b48:	d1f5      	bne.n	83b36 <mstrtok+0x3e>
    _chEndToken=*_pEndToken;
   83b4a:	4b0e      	ldr	r3, [pc, #56]	; (83b84 <mstrtok+0x8c>)
   83b4c:	701c      	strb	r4, [r3, #0]
    *_pEndToken='\0';
   83b4e:	2300      	movs	r3, #0
   83b50:	7033      	strb	r3, [r6, #0]
}
   83b52:	4628      	mov	r0, r5
   83b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if(_pEndToken)
   83b58:	4b09      	ldr	r3, [pc, #36]	; (83b80 <mstrtok+0x88>)
   83b5a:	681d      	ldr	r5, [r3, #0]
   83b5c:	2d00      	cmp	r5, #0
   83b5e:	d0f8      	beq.n	83b52 <mstrtok+0x5a>
        *_pEndToken=_chEndToken;
   83b60:	4b08      	ldr	r3, [pc, #32]	; (83b84 <mstrtok+0x8c>)
   83b62:	781b      	ldrb	r3, [r3, #0]
   83b64:	702b      	strb	r3, [r5, #0]
        pToken=_pEndToken;
   83b66:	4b04      	ldr	r3, [pc, #16]	; (83b78 <mstrtok+0x80>)
   83b68:	601d      	str	r5, [r3, #0]
   83b6a:	e7cb      	b.n	83b04 <mstrtok+0xc>
    while(*_pEndToken && !_IsSeparator(*_pEndToken,pSep)) { _pEndToken++; }
   83b6c:	462e      	mov	r6, r5
   83b6e:	e7ec      	b.n	83b4a <mstrtok+0x52>
    _pEndToken=pToken;
   83b70:	4b03      	ldr	r3, [pc, #12]	; (83b80 <mstrtok+0x88>)
   83b72:	601d      	str	r5, [r3, #0]
    while(*pToken && _IsSeparator(*pToken,pSep)) { pToken++; }
   83b74:	462e      	mov	r6, r5
   83b76:	e7e8      	b.n	83b4a <mstrtok+0x52>
   83b78:	2000117c 	.word	0x2000117c
   83b7c:	00083ae1 	.word	0x00083ae1
   83b80:	20001178 	.word	0x20001178
   83b84:	20001176 	.word	0x20001176

00083b88 <_menuPorteFermer1>:

	return 0;
 }

uint32_t _menuPorteFermer1(uint32_t sc, ...)
{
   83b88:	b40f      	push	{r0, r1, r2, r3}
   83b8a:	b508      	push	{r3, lr}
	switch(sc)
	{
		default:
		Putstr("_menuPorteFermer1: BAD SC");
   83b8c:	4904      	ldr	r1, [pc, #16]	; (83ba0 <_menuPorteFermer1+0x18>)
   83b8e:	2067      	movs	r0, #103	; 0x67
   83b90:	4b04      	ldr	r3, [pc, #16]	; (83ba4 <_menuPorteFermer1+0x1c>)
   83b92:	4798      	blx	r3
		break;
	}

	return 0;
}
   83b94:	2000      	movs	r0, #0
   83b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   83b9a:	b004      	add	sp, #16
   83b9c:	4770      	bx	lr
   83b9e:	bf00      	nop
   83ba0:	0008af20 	.word	0x0008af20
   83ba4:	000834ed 	.word	0x000834ed

00083ba8 <_menuPorteFermer2>:

uint32_t _menuPorteFermer2(uint32_t sc, ...)
{
   83ba8:	b40f      	push	{r0, r1, r2, r3}
   83baa:	b508      	push	{r3, lr}
	switch(sc)
	{
		default:
		Putstr("_menuPorteFermer2: BAD SC");
   83bac:	4904      	ldr	r1, [pc, #16]	; (83bc0 <_menuPorteFermer2+0x18>)
   83bae:	2067      	movs	r0, #103	; 0x67
   83bb0:	4b04      	ldr	r3, [pc, #16]	; (83bc4 <_menuPorteFermer2+0x1c>)
   83bb2:	4798      	blx	r3
		break;
	}

	return 0;
}
   83bb4:	2000      	movs	r0, #0
   83bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   83bba:	b004      	add	sp, #16
   83bbc:	4770      	bx	lr
   83bbe:	bf00      	nop
   83bc0:	0008af3c 	.word	0x0008af3c
   83bc4:	000834ed 	.word	0x000834ed

00083bc8 <_menuOptionSasFunc>:
 {
   83bc8:	b40f      	push	{r0, r1, r2, r3}
   83bca:	b510      	push	{r4, lr}
		Putstr("_menuOptionSasFunc: BAD SC");
   83bcc:	4909      	ldr	r1, [pc, #36]	; (83bf4 <_menuOptionSasFunc+0x2c>)
   83bce:	2067      	movs	r0, #103	; 0x67
   83bd0:	4b09      	ldr	r3, [pc, #36]	; (83bf8 <_menuOptionSasFunc+0x30>)
   83bd2:	4798      	blx	r3
		LcdPutstr("                     ", 3, 0);
   83bd4:	2300      	movs	r3, #0
   83bd6:	2203      	movs	r2, #3
   83bd8:	4908      	ldr	r1, [pc, #32]	; (83bfc <_menuOptionSasFunc+0x34>)
   83bda:	2068      	movs	r0, #104	; 0x68
   83bdc:	4c08      	ldr	r4, [pc, #32]	; (83c00 <_menuOptionSasFunc+0x38>)
   83bde:	47a0      	blx	r4
		LcdPutstr("FERMETURE SAS",3,0);
   83be0:	2300      	movs	r3, #0
   83be2:	2203      	movs	r2, #3
   83be4:	4907      	ldr	r1, [pc, #28]	; (83c04 <_menuOptionSasFunc+0x3c>)
   83be6:	2068      	movs	r0, #104	; 0x68
   83be8:	47a0      	blx	r4
 }
   83bea:	2000      	movs	r0, #0
   83bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83bf0:	b004      	add	sp, #16
   83bf2:	4770      	bx	lr
   83bf4:	0008aedc 	.word	0x0008aedc
   83bf8:	000834ed 	.word	0x000834ed
   83bfc:	0008aef8 	.word	0x0008aef8
   83c00:	00081579 	.word	0x00081579
   83c04:	0008af10 	.word	0x0008af10

00083c08 <_menuEtatPorte1>:

uint32_t _menuEtatPorte1(uint32_t sc, ...)
{
   83c08:	b40f      	push	{r0, r1, r2, r3}
   83c0a:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuOptionSasFunc: BAD SC");
   83c0c:	4909      	ldr	r1, [pc, #36]	; (83c34 <_menuEtatPorte1+0x2c>)
   83c0e:	2067      	movs	r0, #103	; 0x67
   83c10:	4b09      	ldr	r3, [pc, #36]	; (83c38 <_menuEtatPorte1+0x30>)
   83c12:	4798      	blx	r3
		LcdPutstr("                     ", 3, 0);
   83c14:	2300      	movs	r3, #0
   83c16:	2203      	movs	r2, #3
   83c18:	4908      	ldr	r1, [pc, #32]	; (83c3c <_menuEtatPorte1+0x34>)
   83c1a:	2068      	movs	r0, #104	; 0x68
   83c1c:	4c08      	ldr	r4, [pc, #32]	; (83c40 <_menuEtatPorte1+0x38>)
   83c1e:	47a0      	blx	r4
		LcdPutstr("ETAT PORTE 1",3,0);
   83c20:	2300      	movs	r3, #0
   83c22:	2203      	movs	r2, #3
   83c24:	4907      	ldr	r1, [pc, #28]	; (83c44 <_menuEtatPorte1+0x3c>)
   83c26:	2068      	movs	r0, #104	; 0x68
   83c28:	47a0      	blx	r4
		break;
	}

	return 0;
}
   83c2a:	2000      	movs	r0, #0
   83c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83c30:	b004      	add	sp, #16
   83c32:	4770      	bx	lr
   83c34:	0008aedc 	.word	0x0008aedc
   83c38:	000834ed 	.word	0x000834ed
   83c3c:	0008aef8 	.word	0x0008aef8
   83c40:	00081579 	.word	0x00081579
   83c44:	0008aec0 	.word	0x0008aec0

00083c48 <_menuEtatPorte2>:

uint32_t _menuEtatPorte2(uint32_t sc, ...)
{
   83c48:	b40f      	push	{r0, r1, r2, r3}
   83c4a:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuOptionSasFunc: BAD SC");
   83c4c:	4909      	ldr	r1, [pc, #36]	; (83c74 <_menuEtatPorte2+0x2c>)
   83c4e:	2067      	movs	r0, #103	; 0x67
   83c50:	4b09      	ldr	r3, [pc, #36]	; (83c78 <_menuEtatPorte2+0x30>)
   83c52:	4798      	blx	r3
		LcdPutstr("                     ", 3, 0);
   83c54:	2300      	movs	r3, #0
   83c56:	2203      	movs	r2, #3
   83c58:	4908      	ldr	r1, [pc, #32]	; (83c7c <_menuEtatPorte2+0x34>)
   83c5a:	2068      	movs	r0, #104	; 0x68
   83c5c:	4c08      	ldr	r4, [pc, #32]	; (83c80 <_menuEtatPorte2+0x38>)
   83c5e:	47a0      	blx	r4
		LcdPutstr("ETAT PORTE 1",3,0);
   83c60:	2300      	movs	r3, #0
   83c62:	2203      	movs	r2, #3
   83c64:	4907      	ldr	r1, [pc, #28]	; (83c84 <_menuEtatPorte2+0x3c>)
   83c66:	2068      	movs	r0, #104	; 0x68
   83c68:	47a0      	blx	r4
		break;
	}

	return 0;
}
   83c6a:	2000      	movs	r0, #0
   83c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83c70:	b004      	add	sp, #16
   83c72:	4770      	bx	lr
   83c74:	0008aedc 	.word	0x0008aedc
   83c78:	000834ed 	.word	0x000834ed
   83c7c:	0008aef8 	.word	0x0008aef8
   83c80:	00081579 	.word	0x00081579
   83c84:	0008aec0 	.word	0x0008aec0

00083c88 <_menuEtatPortes>:

uint32_t _menuEtatPortes(uint32_t sc, ...)
{
   83c88:	b40f      	push	{r0, r1, r2, r3}
   83c8a:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuOptionSasFunc: BAD SC");
   83c8c:	4909      	ldr	r1, [pc, #36]	; (83cb4 <_menuEtatPortes+0x2c>)
   83c8e:	2067      	movs	r0, #103	; 0x67
   83c90:	4b09      	ldr	r3, [pc, #36]	; (83cb8 <_menuEtatPortes+0x30>)
   83c92:	4798      	blx	r3
		LcdPutstr("                     ", 3, 0);
   83c94:	2300      	movs	r3, #0
   83c96:	2203      	movs	r2, #3
   83c98:	4908      	ldr	r1, [pc, #32]	; (83cbc <_menuEtatPortes+0x34>)
   83c9a:	2068      	movs	r0, #104	; 0x68
   83c9c:	4c08      	ldr	r4, [pc, #32]	; (83cc0 <_menuEtatPortes+0x38>)
   83c9e:	47a0      	blx	r4
		LcdPutstr("ETAT PORTES",3,0);
   83ca0:	2300      	movs	r3, #0
   83ca2:	2203      	movs	r2, #3
   83ca4:	4907      	ldr	r1, [pc, #28]	; (83cc4 <_menuEtatPortes+0x3c>)
   83ca6:	2068      	movs	r0, #104	; 0x68
   83ca8:	47a0      	blx	r4
		break;
	}

	return 0;
   83caa:	2000      	movs	r0, #0
   83cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83cb0:	b004      	add	sp, #16
   83cb2:	4770      	bx	lr
   83cb4:	0008aedc 	.word	0x0008aedc
   83cb8:	000834ed 	.word	0x000834ed
   83cbc:	0008aef8 	.word	0x0008aef8
   83cc0:	00081579 	.word	0x00081579
   83cc4:	0008aed0 	.word	0x0008aed0

00083cc8 <Menu>:
{
   83cc8:	b40f      	push	{r0, r1, r2, r3}
   83cca:	b570      	push	{r4, r5, r6, lr}
   83ccc:	b082      	sub	sp, #8
   83cce:	9906      	ldr	r1, [sp, #24]
	switch(sc)
   83cd0:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   83cd4:	2b07      	cmp	r3, #7
   83cd6:	f200 80c2 	bhi.w	83e5e <Menu+0x196>
   83cda:	e8df f013 	tbh	[pc, r3, lsl #1]
   83cde:	0008      	.short	0x0008
   83ce0:	0075005e 	.word	0x0075005e
   83ce4:	00c00098 	.word	0x00c00098
   83ce8:	00c000aa 	.word	0x00c000aa
   83cec:	0058      	.short	0x0058
			Putstr("\r\nMENU_NEW\r\n");
   83cee:	495e      	ldr	r1, [pc, #376]	; (83e68 <Menu+0x1a0>)
   83cf0:	2067      	movs	r0, #103	; 0x67
   83cf2:	4b5e      	ldr	r3, [pc, #376]	; (83e6c <Menu+0x1a4>)
   83cf4:	4798      	blx	r3
			pio_set_input(PIOA, PIN_BUTTON_SWITCH, PIO_PULLUP); //A0 (Bouton Gauche)
   83cf6:	4c5e      	ldr	r4, [pc, #376]	; (83e70 <Menu+0x1a8>)
   83cf8:	2201      	movs	r2, #1
   83cfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
   83cfe:	4620      	mov	r0, r4
   83d00:	4e5c      	ldr	r6, [pc, #368]	; (83e74 <Menu+0x1ac>)
   83d02:	47b0      	blx	r6
			pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_SWITCH, PIO_IT_FALL_EDGE, ButtonSwitch_ISR_Handler);
   83d04:	4b5c      	ldr	r3, [pc, #368]	; (83e78 <Menu+0x1b0>)
   83d06:	9300      	str	r3, [sp, #0]
   83d08:	2350      	movs	r3, #80	; 0x50
   83d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83d0e:	210a      	movs	r1, #10
   83d10:	4620      	mov	r0, r4
   83d12:	4d5a      	ldr	r5, [pc, #360]	; (83e7c <Menu+0x1b4>)
   83d14:	47a8      	blx	r5
			pio_set_input(PIOA, PIN_BUTTON_SELECT, PIO_PULLUP); //A1 (Bouton Milieu)
   83d16:	2201      	movs	r2, #1
   83d18:	f44f 7100 	mov.w	r1, #512	; 0x200
   83d1c:	4620      	mov	r0, r4
   83d1e:	47b0      	blx	r6
			pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_SELECT, PIO_IT_FALL_EDGE, ButtonSelect_ISR_Handler);
   83d20:	4b57      	ldr	r3, [pc, #348]	; (83e80 <Menu+0x1b8>)
   83d22:	9300      	str	r3, [sp, #0]
   83d24:	2350      	movs	r3, #80	; 0x50
   83d26:	f44f 7200 	mov.w	r2, #512	; 0x200
   83d2a:	210a      	movs	r1, #10
   83d2c:	4620      	mov	r0, r4
   83d2e:	47a8      	blx	r5
			pio_set_input(PIOA, PIN_BUTTON_CLEAR, PIO_PULLUP); //A1 (Bouton Droite)
   83d30:	2201      	movs	r2, #1
   83d32:	f44f 7180 	mov.w	r1, #256	; 0x100
   83d36:	4620      	mov	r0, r4
   83d38:	47b0      	blx	r6
			pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_CLEAR, PIO_IT_FALL_EDGE, ButtonClear_ISR_Handler);
   83d3a:	4b52      	ldr	r3, [pc, #328]	; (83e84 <Menu+0x1bc>)
   83d3c:	9300      	str	r3, [sp, #0]
   83d3e:	2350      	movs	r3, #80	; 0x50
   83d40:	f44f 7280 	mov.w	r2, #256	; 0x100
   83d44:	210a      	movs	r1, #10
   83d46:	4620      	mov	r0, r4
   83d48:	47a8      	blx	r5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83d4a:	4b4f      	ldr	r3, [pc, #316]	; (83e88 <Menu+0x1c0>)
   83d4c:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83d50:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83d54:	601d      	str	r5, [r3, #0]
			pio_get_interrupt_status(PIOA);
   83d56:	4620      	mov	r0, r4
   83d58:	4b4c      	ldr	r3, [pc, #304]	; (83e8c <Menu+0x1c4>)
   83d5a:	4798      	blx	r3
			pio_enable_interrupt(PIOA, PIN_BUTTON_SWITCH);
   83d5c:	4629      	mov	r1, r5
   83d5e:	4620      	mov	r0, r4
   83d60:	4d4b      	ldr	r5, [pc, #300]	; (83e90 <Menu+0x1c8>)
   83d62:	47a8      	blx	r5
			pio_enable_interrupt(PIOA, PIN_BUTTON_SELECT);
   83d64:	f44f 7100 	mov.w	r1, #512	; 0x200
   83d68:	4620      	mov	r0, r4
   83d6a:	47a8      	blx	r5
			pio_enable_interrupt(PIOA, PIN_BUTTON_CLEAR);
   83d6c:	f44f 7180 	mov.w	r1, #256	; 0x100
   83d70:	4620      	mov	r0, r4
   83d72:	47a8      	blx	r5
			stackNew(&menuStack, menus, MENU_DEPTH_VALUE, MENU_ELEM_SIZE);
   83d74:	2308      	movs	r3, #8
   83d76:	9300      	str	r3, [sp, #0]
   83d78:	230a      	movs	r3, #10
   83d7a:	4a46      	ldr	r2, [pc, #280]	; (83e94 <Menu+0x1cc>)
   83d7c:	4946      	ldr	r1, [pc, #280]	; (83e98 <Menu+0x1d0>)
   83d7e:	2064      	movs	r0, #100	; 0x64
   83d80:	4c46      	ldr	r4, [pc, #280]	; (83e9c <Menu+0x1d4>)
   83d82:	47a0      	blx	r4
			menuElem.iIndexMenu = 0;
   83d84:	4b46      	ldr	r3, [pc, #280]	; (83ea0 <Menu+0x1d8>)
   83d86:	2200      	movs	r2, #0
   83d88:	601a      	str	r2, [r3, #0]
			menuElem.pCurrentMenu = _mainMenu;
   83d8a:	4a46      	ldr	r2, [pc, #280]	; (83ea4 <Menu+0x1dc>)
   83d8c:	605a      	str	r2, [r3, #4]
}
   83d8e:	2000      	movs	r0, #0
   83d90:	b002      	add	sp, #8
   83d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   83d96:	b004      	add	sp, #16
   83d98:	4770      	bx	lr
			if(!IsModuleIdentified() && IsAttachReady())
   83d9a:	2066      	movs	r0, #102	; 0x66
   83d9c:	4b42      	ldr	r3, [pc, #264]	; (83ea8 <Menu+0x1e0>)
   83d9e:	4798      	blx	r3
			ServicesBufferPush(WRITE_SINGLE_COIL);
   83da0:	2105      	movs	r1, #5
   83da2:	2066      	movs	r0, #102	; 0x66
   83da4:	4b41      	ldr	r3, [pc, #260]	; (83eac <Menu+0x1e4>)
   83da6:	4798      	blx	r3
			menuElem.iIndexMenu++;
   83da8:	4a3d      	ldr	r2, [pc, #244]	; (83ea0 <Menu+0x1d8>)
   83daa:	6813      	ldr	r3, [r2, #0]
   83dac:	3301      	adds	r3, #1
   83dae:	6013      	str	r3, [r2, #0]
			if(menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuLabel == NULL) menuElem.iIndexMenu = 0;
   83db0:	6852      	ldr	r2, [r2, #4]
   83db2:	011b      	lsls	r3, r3, #4
   83db4:	58d3      	ldr	r3, [r2, r3]
   83db6:	b11b      	cbz	r3, 83dc0 <Menu+0xf8>
			Menu(MENU_PROMPT);
   83db8:	2069      	movs	r0, #105	; 0x69
   83dba:	f7ff ff85 	bl	83cc8 <Menu>
			break;
   83dbe:	e7e6      	b.n	83d8e <Menu+0xc6>
			if(menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuLabel == NULL) menuElem.iIndexMenu = 0;
   83dc0:	2200      	movs	r2, #0
   83dc2:	4b37      	ldr	r3, [pc, #220]	; (83ea0 <Menu+0x1d8>)
   83dc4:	601a      	str	r2, [r3, #0]
   83dc6:	e7f7      	b.n	83db8 <Menu+0xf0>
			ServicesBufferPush(READ_COILS);
   83dc8:	2101      	movs	r1, #1
   83dca:	2066      	movs	r0, #102	; 0x66
   83dcc:	4b37      	ldr	r3, [pc, #220]	; (83eac <Menu+0x1e4>)
   83dce:	4798      	blx	r3
			if(menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuFunc)
   83dd0:	4a33      	ldr	r2, [pc, #204]	; (83ea0 <Menu+0x1d8>)
   83dd2:	6811      	ldr	r1, [r2, #0]
   83dd4:	6853      	ldr	r3, [r2, #4]
   83dd6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   83dda:	68da      	ldr	r2, [r3, #12]
   83ddc:	b112      	cbz	r2, 83de4 <Menu+0x11c>
				menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuFunc(0);
   83dde:	2000      	movs	r0, #0
   83de0:	4790      	blx	r2
   83de2:	e7d4      	b.n	83d8e <Menu+0xc6>
			else if(menuElem.pCurrentMenu[menuElem.iIndexMenu].pSubMenu)
   83de4:	689b      	ldr	r3, [r3, #8]
   83de6:	2b00      	cmp	r3, #0
   83de8:	d0d1      	beq.n	83d8e <Menu+0xc6>
				stackPush(&menuStack, &menuElem);
   83dea:	4c2d      	ldr	r4, [pc, #180]	; (83ea0 <Menu+0x1d8>)
   83dec:	4622      	mov	r2, r4
   83dee:	492a      	ldr	r1, [pc, #168]	; (83e98 <Menu+0x1d0>)
   83df0:	2066      	movs	r0, #102	; 0x66
   83df2:	4b2a      	ldr	r3, [pc, #168]	; (83e9c <Menu+0x1d4>)
   83df4:	4798      	blx	r3
				menuElem.pCurrentMenu = menuElem.pCurrentMenu[menuElem.iIndexMenu].pSubMenu;
   83df6:	6822      	ldr	r2, [r4, #0]
   83df8:	6863      	ldr	r3, [r4, #4]
   83dfa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   83dfe:	689b      	ldr	r3, [r3, #8]
   83e00:	6063      	str	r3, [r4, #4]
				menuElem.iIndexMenu = 0;
   83e02:	2300      	movs	r3, #0
   83e04:	6023      	str	r3, [r4, #0]
				Menu(MENU_PROMPT);
   83e06:	2069      	movs	r0, #105	; 0x69
   83e08:	f7ff ff5e 	bl	83cc8 <Menu>
   83e0c:	e7bf      	b.n	83d8e <Menu+0xc6>
			if(menuElem.pCurrentMenu[menuElem.iIndexMenu].pParentMenu)
   83e0e:	4a24      	ldr	r2, [pc, #144]	; (83ea0 <Menu+0x1d8>)
   83e10:	6811      	ldr	r1, [r2, #0]
   83e12:	6853      	ldr	r3, [r2, #4]
   83e14:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   83e18:	685b      	ldr	r3, [r3, #4]
   83e1a:	b133      	cbz	r3, 83e2a <Menu+0x162>
				stackPop(&menuStack, &menuElem);
   83e1c:	491e      	ldr	r1, [pc, #120]	; (83e98 <Menu+0x1d0>)
   83e1e:	2067      	movs	r0, #103	; 0x67
   83e20:	4b1e      	ldr	r3, [pc, #120]	; (83e9c <Menu+0x1d4>)
   83e22:	4798      	blx	r3
				Menu(MENU_PROMPT);
   83e24:	2069      	movs	r0, #105	; 0x69
   83e26:	f7ff ff4f 	bl	83cc8 <Menu>
			Modbus(MODBUS_SLAVE_SEND);
   83e2a:	206e      	movs	r0, #110	; 0x6e
   83e2c:	4b20      	ldr	r3, [pc, #128]	; (83eb0 <Menu+0x1e8>)
   83e2e:	4798      	blx	r3
			break;
   83e30:	e7ad      	b.n	83d8e <Menu+0xc6>
			LcdPutstr("                    ", 2, 0);
   83e32:	2300      	movs	r3, #0
   83e34:	2202      	movs	r2, #2
   83e36:	491f      	ldr	r1, [pc, #124]	; (83eb4 <Menu+0x1ec>)
   83e38:	2068      	movs	r0, #104	; 0x68
   83e3a:	4c1f      	ldr	r4, [pc, #124]	; (83eb8 <Menu+0x1f0>)
   83e3c:	47a0      	blx	r4
			LcdPutstr((menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuLabel),2,LcdFindHalf(strlen(menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuLabel)));
   83e3e:	4a18      	ldr	r2, [pc, #96]	; (83ea0 <Menu+0x1d8>)
   83e40:	6813      	ldr	r3, [r2, #0]
   83e42:	6852      	ldr	r2, [r2, #4]
   83e44:	011b      	lsls	r3, r3, #4
   83e46:	58d5      	ldr	r5, [r2, r3]
   83e48:	4628      	mov	r0, r5
   83e4a:	4b1c      	ldr	r3, [pc, #112]	; (83ebc <Menu+0x1f4>)
   83e4c:	4798      	blx	r3
   83e4e:	4b1c      	ldr	r3, [pc, #112]	; (83ec0 <Menu+0x1f8>)
   83e50:	4798      	blx	r3
   83e52:	4603      	mov	r3, r0
   83e54:	2202      	movs	r2, #2
   83e56:	4629      	mov	r1, r5
   83e58:	2068      	movs	r0, #104	; 0x68
   83e5a:	47a0      	blx	r4
			break;
   83e5c:	e797      	b.n	83d8e <Menu+0xc6>
			Error(ERROR_MENU_SWITCH_BAD_SC, sc);
   83e5e:	2011      	movs	r0, #17
   83e60:	4b18      	ldr	r3, [pc, #96]	; (83ec4 <Menu+0x1fc>)
   83e62:	4798      	blx	r3
   83e64:	e793      	b.n	83d8e <Menu+0xc6>
   83e66:	bf00      	nop
   83e68:	0008ae08 	.word	0x0008ae08
   83e6c:	000834ed 	.word	0x000834ed
   83e70:	400e0c00 	.word	0x400e0c00
   83e74:	000841ad 	.word	0x000841ad
   83e78:	00083ec9 	.word	0x00083ec9
   83e7c:	00080279 	.word	0x00080279
   83e80:	00083ee9 	.word	0x00083ee9
   83e84:	00083f09 	.word	0x00083f09
   83e88:	e000e100 	.word	0xe000e100
   83e8c:	00084237 	.word	0x00084237
   83e90:	00084233 	.word	0x00084233
   83e94:	2000298c 	.word	0x2000298c
   83e98:	200029dc 	.word	0x200029dc
   83e9c:	0008377d 	.word	0x0008377d
   83ea0:	200029ec 	.word	0x200029ec
   83ea4:	0008ae70 	.word	0x0008ae70
   83ea8:	00083f29 	.word	0x00083f29
   83eac:	00081121 	.word	0x00081121
   83eb0:	000819d1 	.word	0x000819d1
   83eb4:	0008ae18 	.word	0x0008ae18
   83eb8:	00081579 	.word	0x00081579
   83ebc:	00085241 	.word	0x00085241
   83ec0:	000819a9 	.word	0x000819a9
   83ec4:	00080f15 	.word	0x00080f15

00083ec8 <ButtonSwitch_ISR_Handler>:
{
   83ec8:	b510      	push	{r4, lr}
   83eca:	b082      	sub	sp, #8
	PushTask(Menu, MENU_SWITCH_BUTTON,0,0);
   83ecc:	2300      	movs	r3, #0
   83ece:	9300      	str	r3, [sp, #0]
   83ed0:	2265      	movs	r2, #101	; 0x65
   83ed2:	4903      	ldr	r1, [pc, #12]	; (83ee0 <ButtonSwitch_ISR_Handler+0x18>)
   83ed4:	2066      	movs	r0, #102	; 0x66
   83ed6:	4c03      	ldr	r4, [pc, #12]	; (83ee4 <ButtonSwitch_ISR_Handler+0x1c>)
   83ed8:	47a0      	blx	r4
}
   83eda:	b002      	add	sp, #8
   83edc:	bd10      	pop	{r4, pc}
   83ede:	bf00      	nop
   83ee0:	00083cc9 	.word	0x00083cc9
   83ee4:	00083881 	.word	0x00083881

00083ee8 <ButtonSelect_ISR_Handler>:
{
   83ee8:	b510      	push	{r4, lr}
   83eea:	b082      	sub	sp, #8
	PushTask(Menu, MENU_SELECT_BUTTON,0,0);
   83eec:	2300      	movs	r3, #0
   83eee:	9300      	str	r3, [sp, #0]
   83ef0:	2266      	movs	r2, #102	; 0x66
   83ef2:	4903      	ldr	r1, [pc, #12]	; (83f00 <ButtonSelect_ISR_Handler+0x18>)
   83ef4:	4610      	mov	r0, r2
   83ef6:	4c03      	ldr	r4, [pc, #12]	; (83f04 <ButtonSelect_ISR_Handler+0x1c>)
   83ef8:	47a0      	blx	r4
}
   83efa:	b002      	add	sp, #8
   83efc:	bd10      	pop	{r4, pc}
   83efe:	bf00      	nop
   83f00:	00083cc9 	.word	0x00083cc9
   83f04:	00083881 	.word	0x00083881

00083f08 <ButtonClear_ISR_Handler>:
{
   83f08:	b510      	push	{r4, lr}
   83f0a:	b082      	sub	sp, #8
	PushTask(Menu, MENU_CLEAR_BUTTON,0,0);
   83f0c:	2300      	movs	r3, #0
   83f0e:	9300      	str	r3, [sp, #0]
   83f10:	2267      	movs	r2, #103	; 0x67
   83f12:	4903      	ldr	r1, [pc, #12]	; (83f20 <ButtonClear_ISR_Handler+0x18>)
   83f14:	2066      	movs	r0, #102	; 0x66
   83f16:	4c03      	ldr	r4, [pc, #12]	; (83f24 <ButtonClear_ISR_Handler+0x1c>)
   83f18:	47a0      	blx	r4
}
   83f1a:	b002      	add	sp, #8
   83f1c:	bd10      	pop	{r4, pc}
   83f1e:	bf00      	nop
   83f20:	00083cc9 	.word	0x00083cc9
   83f24:	00083881 	.word	0x00083881

00083f28 <Module>:
	0xFF,
	0xFFFF
};

uint32_t Module(uint32_t sc,...)
{
   83f28:	b40f      	push	{r0, r1, r2, r3}
   83f2a:	b570      	push	{r4, r5, r6, lr}
   83f2c:	b082      	sub	sp, #8
	switch(sc)
   83f2e:	9906      	ldr	r1, [sp, #24]
   83f30:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   83f34:	2b07      	cmp	r3, #7
   83f36:	f200 8086 	bhi.w	84046 <Module+0x11e>
   83f3a:	e8df f003 	tbb	[pc, r3]
   83f3e:	8404      	.short	0x8404
   83f40:	49827f79 	.word	0x49827f79
   83f44:	2684      	.short	0x2684
	{
	case MODULE_NEW:
		Putstr("\r\n\t MODULE NEW!!!\r\n");
   83f46:	4942      	ldr	r1, [pc, #264]	; (84050 <Module+0x128>)
   83f48:	2067      	movs	r0, #103	; 0x67
   83f4a:	4c42      	ldr	r4, [pc, #264]	; (84054 <Module+0x12c>)
   83f4c:	47a0      	blx	r4
		//defaultList[0].moduleCRC			= NULL;
		//moduleRegister.listModule = defaultList;
		//sprintf(buf, "\r\n\t MODULE REGISTER.LIST MODULE->ID: %X", moduleRegister.listModule[moduleRegister.nbModule]);
		//Putstr(buf);
#else
		Putstr("\r\n\t ELSE!!!\r\n");
   83f4e:	4942      	ldr	r1, [pc, #264]	; (84058 <Module+0x130>)
   83f50:	2067      	movs	r0, #103	; 0x67
   83f52:	47a0      	blx	r4
		_crc = CRC16MODBUSbyte((moduleIdentification.modbusModuleAddr = 0xFF), 0xFFFF);
   83f54:	4d41      	ldr	r5, [pc, #260]	; (8405c <Module+0x134>)
   83f56:	24ff      	movs	r4, #255	; 0xff
   83f58:	702c      	strb	r4, [r5, #0]
   83f5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   83f5e:	4620      	mov	r0, r4
   83f60:	4e3f      	ldr	r6, [pc, #252]	; (84060 <Module+0x138>)
   83f62:	47b0      	blx	r6
#endif
		_crc = CRC16MODBUSbyte((moduleIdentification.moduleSerialNumber =  0xFF), _crc);
   83f64:	706c      	strb	r4, [r5, #1]
   83f66:	4601      	mov	r1, r0
   83f68:	4620      	mov	r0, r4
   83f6a:	47b0      	blx	r6
		
		moduleIdentification.moduleCRC = _crc;
   83f6c:	8068      	strh	r0, [r5, #2]
		PushTask(Module,MODULE_INIT,0,0);
   83f6e:	2400      	movs	r4, #0
   83f70:	9400      	str	r4, [sp, #0]
   83f72:	4623      	mov	r3, r4
   83f74:	226b      	movs	r2, #107	; 0x6b
   83f76:	493b      	ldr	r1, [pc, #236]	; (84064 <Module+0x13c>)
   83f78:	2066      	movs	r0, #102	; 0x66
   83f7a:	4d3b      	ldr	r5, [pc, #236]	; (84068 <Module+0x140>)
   83f7c:	47a8      	blx	r5

	default:
		Error(ERROR_MODULE_SWITCH_BAD_SC, sc);
	}

	return 0;
   83f7e:	4620      	mov	r0, r4
   83f80:	b002      	add	sp, #8
   83f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   83f86:	b004      	add	sp, #16
   83f88:	4770      	bx	lr
		gpio_toggle_pin(HEART_LED);
   83f8a:	2034      	movs	r0, #52	; 0x34
   83f8c:	4b37      	ldr	r3, [pc, #220]	; (8406c <Module+0x144>)
   83f8e:	4798      	blx	r3
		if((!IsModuleIdentified()) || (moduleIdentification.modbusModuleAddr == 0x00))
   83f90:	2066      	movs	r0, #102	; 0x66
   83f92:	f7ff ffc9 	bl	83f28 <Module>
   83f96:	b110      	cbz	r0, 83f9e <Module+0x76>
   83f98:	4b30      	ldr	r3, [pc, #192]	; (8405c <Module+0x134>)
   83f9a:	781b      	ldrb	r3, [r3, #0]
   83f9c:	b953      	cbnz	r3, 83fb4 <Module+0x8c>
			PushTask(Module, MODULE_INIT, 0, MODULE_INIT_DELAY);
   83f9e:	f241 3388 	movw	r3, #5000	; 0x1388
   83fa2:	9300      	str	r3, [sp, #0]
   83fa4:	2300      	movs	r3, #0
   83fa6:	226b      	movs	r2, #107	; 0x6b
   83fa8:	492e      	ldr	r1, [pc, #184]	; (84064 <Module+0x13c>)
   83faa:	2066      	movs	r0, #102	; 0x66
   83fac:	4c2e      	ldr	r4, [pc, #184]	; (84068 <Module+0x140>)
   83fae:	47a0      	blx	r4
	return 0;
   83fb0:	2000      	movs	r0, #0
			PushTask(Module, MODULE_INIT, 0, MODULE_INIT_DELAY);
   83fb2:	e7e5      	b.n	83f80 <Module+0x58>
			Putstr("\r\nMODULE_INIT INIT!!!!\r\n");
   83fb4:	492e      	ldr	r1, [pc, #184]	; (84070 <Module+0x148>)
   83fb6:	2067      	movs	r0, #103	; 0x67
   83fb8:	4b26      	ldr	r3, [pc, #152]	; (84054 <Module+0x12c>)
   83fba:	4798      	blx	r3
			PushTask(Shell, SHELL_HEART_BEAT,0 ,0);
   83fbc:	2400      	movs	r4, #0
   83fbe:	9400      	str	r4, [sp, #0]
   83fc0:	4623      	mov	r3, r4
   83fc2:	2266      	movs	r2, #102	; 0x66
   83fc4:	492b      	ldr	r1, [pc, #172]	; (84074 <Module+0x14c>)
   83fc6:	4610      	mov	r0, r2
   83fc8:	4d27      	ldr	r5, [pc, #156]	; (84068 <Module+0x140>)
   83fca:	47a8      	blx	r5
	return 0;
   83fcc:	4620      	mov	r0, r4
   83fce:	e7d7      	b.n	83f80 <Module+0x58>
		_crc = CRC16MODBUSbyte((moduleIdentification.modbusModuleAddr = _modbusModuleAddr), 0xFFFF);
   83fd0:	f89d 001c 	ldrb.w	r0, [sp, #28]
   83fd4:	4c21      	ldr	r4, [pc, #132]	; (8405c <Module+0x134>)
   83fd6:	7020      	strb	r0, [r4, #0]
   83fd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   83fdc:	4d20      	ldr	r5, [pc, #128]	; (84060 <Module+0x138>)
   83fde:	47a8      	blx	r5
		_crc = CRC16MODBUSbyte((moduleIdentification.moduleSerialNumber =  _pModuleSerialNumber), _crc);
   83fe0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   83fe4:	7063      	strb	r3, [r4, #1]
   83fe6:	4601      	mov	r1, r0
   83fe8:	4618      	mov	r0, r3
   83fea:	47a8      	blx	r5
		moduleIdentification.moduleCRC = _crc;
   83fec:	8060      	strh	r0, [r4, #2]
		sprintf(buf, "\r\n\tMODULE ADRESSE: %X\tSERIAL NUMBER: %X", moduleIdentification.modbusModuleAddr, moduleIdentification.moduleSerialNumber);
   83fee:	4d22      	ldr	r5, [pc, #136]	; (84078 <Module+0x150>)
   83ff0:	7863      	ldrb	r3, [r4, #1]
   83ff2:	7822      	ldrb	r2, [r4, #0]
   83ff4:	4921      	ldr	r1, [pc, #132]	; (8407c <Module+0x154>)
   83ff6:	4628      	mov	r0, r5
   83ff8:	4e21      	ldr	r6, [pc, #132]	; (84080 <Module+0x158>)
   83ffa:	47b0      	blx	r6
		Putstr(buf);
   83ffc:	4629      	mov	r1, r5
   83ffe:	2067      	movs	r0, #103	; 0x67
   84000:	4b14      	ldr	r3, [pc, #80]	; (84054 <Module+0x12c>)
   84002:	4798      	blx	r3
		sprintf(buf, "MODULE ADRESSE: %X", moduleIdentification.modbusModuleAddr);
   84004:	7822      	ldrb	r2, [r4, #0]
   84006:	491f      	ldr	r1, [pc, #124]	; (84084 <Module+0x15c>)
   84008:	4628      	mov	r0, r5
   8400a:	47b0      	blx	r6
		LcdPutstr("                    ", 3, 0);
   8400c:	2300      	movs	r3, #0
   8400e:	2203      	movs	r2, #3
   84010:	491d      	ldr	r1, [pc, #116]	; (84088 <Module+0x160>)
   84012:	2068      	movs	r0, #104	; 0x68
   84014:	4c1d      	ldr	r4, [pc, #116]	; (8408c <Module+0x164>)
   84016:	47a0      	blx	r4
		LcdPutstr(buf, 3, LcdFindHalf(strlen(buf)));
   84018:	4628      	mov	r0, r5
   8401a:	4b1d      	ldr	r3, [pc, #116]	; (84090 <Module+0x168>)
   8401c:	4798      	blx	r3
   8401e:	4b1d      	ldr	r3, [pc, #116]	; (84094 <Module+0x16c>)
   84020:	4798      	blx	r3
   84022:	4603      	mov	r3, r0
   84024:	2203      	movs	r2, #3
   84026:	4629      	mov	r1, r5
   84028:	2068      	movs	r0, #104	; 0x68
   8402a:	47a0      	blx	r4
	return 0;
   8402c:	2000      	movs	r0, #0
		break;
   8402e:	e7a7      	b.n	83f80 <Module+0x58>
		return (moduleIdentification.modbusModuleAddr != 0xFF);
   84030:	4b0a      	ldr	r3, [pc, #40]	; (8405c <Module+0x134>)
   84032:	7818      	ldrb	r0, [r3, #0]
   84034:	38ff      	subs	r0, #255	; 0xff
   84036:	bf18      	it	ne
   84038:	2001      	movne	r0, #1
   8403a:	e7a1      	b.n	83f80 <Module+0x58>
		return (uint32_t)moduleIdentification.modbusModuleAddr;
   8403c:	4b07      	ldr	r3, [pc, #28]	; (8405c <Module+0x134>)
   8403e:	7818      	ldrb	r0, [r3, #0]
   84040:	e79e      	b.n	83f80 <Module+0x58>
		return (uint32_t)&moduleIdentification.moduleSerialNumber;
   84042:	4815      	ldr	r0, [pc, #84]	; (84098 <Module+0x170>)
   84044:	e79c      	b.n	83f80 <Module+0x58>
		Error(ERROR_MODULE_SWITCH_BAD_SC, sc);
   84046:	2013      	movs	r0, #19
   84048:	4b14      	ldr	r3, [pc, #80]	; (8409c <Module+0x174>)
   8404a:	4798      	blx	r3
	return 0;
   8404c:	2000      	movs	r0, #0
   8404e:	e797      	b.n	83f80 <Module+0x58>
   84050:	0008b020 	.word	0x0008b020
   84054:	000834ed 	.word	0x000834ed
   84058:	0008b034 	.word	0x0008b034
   8405c:	20000624 	.word	0x20000624
   84060:	00080edd 	.word	0x00080edd
   84064:	00083f29 	.word	0x00083f29
   84068:	00083881 	.word	0x00083881
   8406c:	0008428f 	.word	0x0008428f
   84070:	0008b044 	.word	0x0008b044
   84074:	000823cd 	.word	0x000823cd
   84078:	20001a18 	.word	0x20001a18
   8407c:	0008b060 	.word	0x0008b060
   84080:	000851f5 	.word	0x000851f5
   84084:	0008b088 	.word	0x0008b088
   84088:	0008ae18 	.word	0x0008ae18
   8408c:	00081579 	.word	0x00081579
   84090:	00085241 	.word	0x00085241
   84094:	000819a9 	.word	0x000819a9
   84098:	20000625 	.word	0x20000625
   8409c:	00080f15 	.word	0x00080f15

000840a0 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   840a0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   840a2:	4812      	ldr	r0, [pc, #72]	; (840ec <sysclk_init+0x4c>)
   840a4:	4b12      	ldr	r3, [pc, #72]	; (840f0 <sysclk_init+0x50>)
   840a6:	4798      	blx	r3
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   840a8:	203e      	movs	r0, #62	; 0x3e
   840aa:	4b12      	ldr	r3, [pc, #72]	; (840f4 <sysclk_init+0x54>)
   840ac:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   840ae:	4c12      	ldr	r4, [pc, #72]	; (840f8 <sysclk_init+0x58>)
   840b0:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   840b2:	2800      	cmp	r0, #0
   840b4:	d0fc      	beq.n	840b0 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   840b6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   840ba:	4b10      	ldr	r3, [pc, #64]	; (840fc <sysclk_init+0x5c>)
   840bc:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   840be:	4c10      	ldr	r4, [pc, #64]	; (84100 <sysclk_init+0x60>)
   840c0:	47a0      	blx	r4
   840c2:	2800      	cmp	r0, #0
   840c4:	d0fc      	beq.n	840c0 <sysclk_init+0x20>
		uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   840c6:	4b0f      	ldr	r3, [pc, #60]	; (84104 <sysclk_init+0x64>)
   840c8:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   840ca:	4a0f      	ldr	r2, [pc, #60]	; (84108 <sysclk_init+0x68>)
   840cc:	4b0f      	ldr	r3, [pc, #60]	; (8410c <sysclk_init+0x6c>)
   840ce:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   840d0:	4c0f      	ldr	r4, [pc, #60]	; (84110 <sysclk_init+0x70>)
   840d2:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   840d4:	2800      	cmp	r0, #0
   840d6:	d0fc      	beq.n	840d2 <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   840d8:	2010      	movs	r0, #16
   840da:	4b0e      	ldr	r3, [pc, #56]	; (84114 <sysclk_init+0x74>)
   840dc:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   840de:	4b0e      	ldr	r3, [pc, #56]	; (84118 <sysclk_init+0x78>)
   840e0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   840e2:	4802      	ldr	r0, [pc, #8]	; (840ec <sysclk_init+0x4c>)
   840e4:	4b02      	ldr	r3, [pc, #8]	; (840f0 <sysclk_init+0x50>)
   840e6:	4798      	blx	r3
   840e8:	bd10      	pop	{r4, pc}
   840ea:	bf00      	nop
   840ec:	05b8d800 	.word	0x05b8d800
   840f0:	200000b5 	.word	0x200000b5
   840f4:	00084429 	.word	0x00084429
   840f8:	00084451 	.word	0x00084451
   840fc:	00084471 	.word	0x00084471
   84100:	00084461 	.word	0x00084461
   84104:	00084491 	.word	0x00084491
   84108:	200f3f01 	.word	0x200f3f01
   8410c:	400e0400 	.word	0x400e0400
   84110:	000844a1 	.word	0x000844a1
   84114:	00084381 	.word	0x00084381
   84118:	00084a49 	.word	0x00084a49

0008411c <chipid_read>:
 *
 * \return 0 on success.
 */
uint32_t chipid_read(Chipid *p_chipid, chipid_data_t *p_chipid_data)
{
	if (NULL == p_chipid_data) {
   8411c:	b311      	cbz	r1, 84164 <chipid_read+0x48>
		return 0xFFFFFFFF;
	}
	
	p_chipid_data->ul_version =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_VERSION_Msk) >>
   8411e:	6802      	ldr	r2, [r0, #0]
   84120:	f002 021f 	and.w	r2, r2, #31
	p_chipid_data->ul_version =
   84124:	600a      	str	r2, [r1, #0]
			CHIPID_CIDR_VERSION_Pos;
	p_chipid_data->ul_eproc =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_EPROC_Msk) >>
   84126:	6802      	ldr	r2, [r0, #0]
   84128:	f3c2 1242 	ubfx	r2, r2, #5, #3
	p_chipid_data->ul_eproc =
   8412c:	604a      	str	r2, [r1, #4]
			CHIPID_CIDR_EPROC_Pos;
	p_chipid_data->ul_nvpsiz =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_NVPSIZ_Msk) >>
   8412e:	6802      	ldr	r2, [r0, #0]
   84130:	f3c2 2203 	ubfx	r2, r2, #8, #4
	p_chipid_data->ul_nvpsiz =
   84134:	608a      	str	r2, [r1, #8]
			CHIPID_CIDR_NVPSIZ_Pos;
	p_chipid_data->ul_nvpsiz2 =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_NVPSIZ2_Pos) >>
   84136:	6802      	ldr	r2, [r0, #0]
	p_chipid_data->ul_nvpsiz2 =
   84138:	2200      	movs	r2, #0
   8413a:	60ca      	str	r2, [r1, #12]
			CHIPID_CIDR_NVPSIZ2_Pos;
	p_chipid_data->ul_sramsiz =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_SRAMSIZ_Msk) >>
   8413c:	6802      	ldr	r2, [r0, #0]
   8413e:	f3c2 4203 	ubfx	r2, r2, #16, #4
	p_chipid_data->ul_sramsiz =
   84142:	610a      	str	r2, [r1, #16]
			CHIPID_CIDR_SRAMSIZ_Pos;
	p_chipid_data->ul_arch =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_ARCH_Msk) >>
   84144:	6802      	ldr	r2, [r0, #0]
   84146:	f3c2 5207 	ubfx	r2, r2, #20, #8
	p_chipid_data->ul_arch =
   8414a:	614a      	str	r2, [r1, #20]
			CHIPID_CIDR_ARCH_Pos;
	p_chipid_data->ul_nvptyp =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_NVPTYP_Msk) >>
   8414c:	6802      	ldr	r2, [r0, #0]
   8414e:	f3c2 7202 	ubfx	r2, r2, #28, #3
	p_chipid_data->ul_nvptyp =
   84152:	618a      	str	r2, [r1, #24]
			CHIPID_CIDR_NVPTYP_Pos;
	p_chipid_data->ul_extflag =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_EXT) >> 31;
   84154:	6802      	ldr	r2, [r0, #0]
   84156:	0fd2      	lsrs	r2, r2, #31
	p_chipid_data->ul_extflag =
   84158:	61ca      	str	r2, [r1, #28]
		
	if (p_chipid_data->ul_extflag) {
   8415a:	b132      	cbz	r2, 8416a <chipid_read+0x4e>
		p_chipid_data->ul_extid =
			p_chipid->CHIPID_EXID & CHIPID_EXID_EXID_Msk;
   8415c:	6842      	ldr	r2, [r0, #4]
		p_chipid_data->ul_extid =
   8415e:	620a      	str	r2, [r1, #32]
	}
	return 0;
   84160:	2000      	movs	r0, #0
   84162:	4770      	bx	lr
		return 0xFFFFFFFF;
   84164:	f04f 30ff 	mov.w	r0, #4294967295
   84168:	4770      	bx	lr
	return 0;
   8416a:	2000      	movs	r0, #0
}
   8416c:	4770      	bx	lr

0008416e <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8416e:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   84170:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   84174:	d016      	beq.n	841a4 <pio_set_peripheral+0x36>
   84176:	d80b      	bhi.n	84190 <pio_set_peripheral+0x22>
   84178:	b149      	cbz	r1, 8418e <pio_set_peripheral+0x20>
   8417a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8417e:	d105      	bne.n	8418c <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   84180:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   84182:	6f01      	ldr	r1, [r0, #112]	; 0x70
   84184:	400b      	ands	r3, r1
   84186:	ea23 0302 	bic.w	r3, r3, r2
   8418a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8418c:	6042      	str	r2, [r0, #4]
   8418e:	4770      	bx	lr
	switch (ul_type) {
   84190:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   84194:	d0fb      	beq.n	8418e <pio_set_peripheral+0x20>
   84196:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8419a:	d0f8      	beq.n	8418e <pio_set_peripheral+0x20>
   8419c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   841a0:	d1f4      	bne.n	8418c <pio_set_peripheral+0x1e>
   841a2:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   841a4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   841a6:	4313      	orrs	r3, r2
   841a8:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   841aa:	e7ef      	b.n	8418c <pio_set_peripheral+0x1e>

000841ac <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   841ac:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   841ae:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   841b2:	bf14      	ite	ne
   841b4:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   841b6:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   841b8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   841bc:	bf14      	ite	ne
   841be:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   841c0:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   841c2:	f012 0f02 	tst.w	r2, #2
   841c6:	d107      	bne.n	841d8 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   841c8:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   841cc:	bf18      	it	ne
   841ce:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   841d2:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   841d4:	6001      	str	r1, [r0, #0]
   841d6:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   841d8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   841dc:	e7f9      	b.n	841d2 <pio_set_input+0x26>

000841de <pio_set_output>:
{
   841de:	b410      	push	{r4}
   841e0:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   841e2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   841e4:	b944      	cbnz	r4, 841f8 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   841e6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   841e8:	b143      	cbz	r3, 841fc <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   841ea:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   841ec:	b942      	cbnz	r2, 84200 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   841ee:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   841f0:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   841f2:	6001      	str	r1, [r0, #0]
}
   841f4:	bc10      	pop	{r4}
   841f6:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   841f8:	6641      	str	r1, [r0, #100]	; 0x64
   841fa:	e7f5      	b.n	841e8 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   841fc:	6541      	str	r1, [r0, #84]	; 0x54
   841fe:	e7f5      	b.n	841ec <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   84200:	6301      	str	r1, [r0, #48]	; 0x30
   84202:	e7f5      	b.n	841f0 <pio_set_output+0x12>

00084204 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   84204:	f012 0f10 	tst.w	r2, #16
   84208:	d010      	beq.n	8422c <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   8420a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   8420e:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   84212:	bf14      	ite	ne
   84214:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   84218:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   8421c:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   84220:	bf14      	ite	ne
   84222:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   84226:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   8422a:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   8422c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   84230:	4770      	bx	lr

00084232 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   84232:	6401      	str	r1, [r0, #64]	; 0x40
   84234:	4770      	bx	lr

00084236 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   84236:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   84238:	4770      	bx	lr

0008423a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8423a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8423c:	4770      	bx	lr

0008423e <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8423e:	0943      	lsrs	r3, r0, #5
   84240:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84244:	f203 7306 	addw	r3, r3, #1798	; 0x706
   84248:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   8424a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8424c:	f000 001f 	and.w	r0, r0, #31
   84250:	fa23 f000 	lsr.w	r0, r3, r0
}
   84254:	f000 0001 	and.w	r0, r0, #1
   84258:	4770      	bx	lr

0008425a <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8425a:	0943      	lsrs	r3, r0, #5
   8425c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84260:	f203 7306 	addw	r3, r3, #1798	; 0x706
   84264:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   84266:	f000 001f 	and.w	r0, r0, #31
   8426a:	2201      	movs	r2, #1
   8426c:	fa02 f000 	lsl.w	r0, r2, r0
   84270:	6318      	str	r0, [r3, #48]	; 0x30
   84272:	4770      	bx	lr

00084274 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84274:	0943      	lsrs	r3, r0, #5
   84276:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8427a:	f203 7306 	addw	r3, r3, #1798	; 0x706
   8427e:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   84280:	f000 001f 	and.w	r0, r0, #31
   84284:	2201      	movs	r2, #1
   84286:	fa02 f000 	lsl.w	r0, r2, r0
   8428a:	6358      	str	r0, [r3, #52]	; 0x34
   8428c:	4770      	bx	lr

0008428e <pio_toggle_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8428e:	0943      	lsrs	r3, r0, #5
   84290:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84294:	f203 7306 	addw	r3, r3, #1798	; 0x706
   84298:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   8429a:	6b99      	ldr	r1, [r3, #56]	; 0x38
   8429c:	f000 021f 	and.w	r2, r0, #31
   842a0:	2001      	movs	r0, #1
   842a2:	4090      	lsls	r0, r2
   842a4:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   842a6:	bf14      	ite	ne
   842a8:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   842aa:	6318      	streq	r0, [r3, #48]	; 0x30
   842ac:	4770      	bx	lr
	...

000842b0 <pio_configure_pin>:
{
   842b0:	b570      	push	{r4, r5, r6, lr}
   842b2:	b082      	sub	sp, #8
   842b4:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   842b6:	0943      	lsrs	r3, r0, #5
   842b8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   842bc:	f203 7306 	addw	r3, r3, #1798	; 0x706
   842c0:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   842c2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   842c6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   842ca:	d031      	beq.n	84330 <pio_configure_pin+0x80>
   842cc:	d816      	bhi.n	842fc <pio_configure_pin+0x4c>
   842ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   842d2:	d01b      	beq.n	8430c <pio_configure_pin+0x5c>
   842d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   842d8:	d116      	bne.n	84308 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   842da:	f000 001f 	and.w	r0, r0, #31
   842de:	2601      	movs	r6, #1
   842e0:	4086      	lsls	r6, r0
   842e2:	4632      	mov	r2, r6
   842e4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   842e8:	4620      	mov	r0, r4
   842ea:	4b22      	ldr	r3, [pc, #136]	; (84374 <pio_configure_pin+0xc4>)
   842ec:	4798      	blx	r3
	if (ul_pull_up_enable) {
   842ee:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   842f2:	bf14      	ite	ne
   842f4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   842f6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   842f8:	2001      	movs	r0, #1
   842fa:	e017      	b.n	8432c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   842fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84300:	d021      	beq.n	84346 <pio_configure_pin+0x96>
   84302:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84306:	d01e      	beq.n	84346 <pio_configure_pin+0x96>
		return 0;
   84308:	2000      	movs	r0, #0
   8430a:	e00f      	b.n	8432c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8430c:	f000 001f 	and.w	r0, r0, #31
   84310:	2601      	movs	r6, #1
   84312:	4086      	lsls	r6, r0
   84314:	4632      	mov	r2, r6
   84316:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8431a:	4620      	mov	r0, r4
   8431c:	4b15      	ldr	r3, [pc, #84]	; (84374 <pio_configure_pin+0xc4>)
   8431e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   84320:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   84324:	bf14      	ite	ne
   84326:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   84328:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8432a:	2001      	movs	r0, #1
}
   8432c:	b002      	add	sp, #8
   8432e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   84330:	f000 011f 	and.w	r1, r0, #31
   84334:	2601      	movs	r6, #1
   84336:	462a      	mov	r2, r5
   84338:	fa06 f101 	lsl.w	r1, r6, r1
   8433c:	4620      	mov	r0, r4
   8433e:	4b0e      	ldr	r3, [pc, #56]	; (84378 <pio_configure_pin+0xc8>)
   84340:	4798      	blx	r3
	return 1;
   84342:	4630      	mov	r0, r6
		break;
   84344:	e7f2      	b.n	8432c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   84346:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8434a:	f000 011f 	and.w	r1, r0, #31
   8434e:	2601      	movs	r6, #1
   84350:	ea05 0306 	and.w	r3, r5, r6
   84354:	9300      	str	r3, [sp, #0]
   84356:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8435a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8435e:	bf14      	ite	ne
   84360:	2200      	movne	r2, #0
   84362:	2201      	moveq	r2, #1
   84364:	fa06 f101 	lsl.w	r1, r6, r1
   84368:	4620      	mov	r0, r4
   8436a:	4c04      	ldr	r4, [pc, #16]	; (8437c <pio_configure_pin+0xcc>)
   8436c:	47a0      	blx	r4
	return 1;
   8436e:	4630      	mov	r0, r6
		break;
   84370:	e7dc      	b.n	8432c <pio_configure_pin+0x7c>
   84372:	bf00      	nop
   84374:	0008416f 	.word	0x0008416f
   84378:	000841ad 	.word	0x000841ad
   8437c:	000841df 	.word	0x000841df

00084380 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   84380:	4a17      	ldr	r2, [pc, #92]	; (843e0 <pmc_switch_mck_to_pllack+0x60>)
   84382:	6b13      	ldr	r3, [r2, #48]	; 0x30
   84384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   84388:	4318      	orrs	r0, r3
   8438a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8438c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8438e:	f013 0f08 	tst.w	r3, #8
   84392:	d10a      	bne.n	843aa <pmc_switch_mck_to_pllack+0x2a>
   84394:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84398:	4911      	ldr	r1, [pc, #68]	; (843e0 <pmc_switch_mck_to_pllack+0x60>)
   8439a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8439c:	f012 0f08 	tst.w	r2, #8
   843a0:	d103      	bne.n	843aa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   843a2:	3b01      	subs	r3, #1
   843a4:	d1f9      	bne.n	8439a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   843a6:	2001      	movs	r0, #1
   843a8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   843aa:	4a0d      	ldr	r2, [pc, #52]	; (843e0 <pmc_switch_mck_to_pllack+0x60>)
   843ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
   843ae:	f023 0303 	bic.w	r3, r3, #3
   843b2:	f043 0302 	orr.w	r3, r3, #2
   843b6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   843b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   843ba:	f013 0f08 	tst.w	r3, #8
   843be:	d10a      	bne.n	843d6 <pmc_switch_mck_to_pllack+0x56>
   843c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   843c4:	4906      	ldr	r1, [pc, #24]	; (843e0 <pmc_switch_mck_to_pllack+0x60>)
   843c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   843c8:	f012 0f08 	tst.w	r2, #8
   843cc:	d105      	bne.n	843da <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   843ce:	3b01      	subs	r3, #1
   843d0:	d1f9      	bne.n	843c6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   843d2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   843d4:	4770      	bx	lr
	return 0;
   843d6:	2000      	movs	r0, #0
   843d8:	4770      	bx	lr
   843da:	2000      	movs	r0, #0
   843dc:	4770      	bx	lr
   843de:	bf00      	nop
   843e0:	400e0400 	.word	0x400e0400

000843e4 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   843e4:	2801      	cmp	r0, #1
   843e6:	d003      	beq.n	843f0 <pmc_switch_sclk_to_32kxtal+0xc>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   843e8:	4a05      	ldr	r2, [pc, #20]	; (84400 <pmc_switch_sclk_to_32kxtal+0x1c>)
   843ea:	4b06      	ldr	r3, [pc, #24]	; (84404 <pmc_switch_sclk_to_32kxtal+0x20>)
   843ec:	601a      	str	r2, [r3, #0]
   843ee:	4770      	bx	lr
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   843f0:	4a04      	ldr	r2, [pc, #16]	; (84404 <pmc_switch_sclk_to_32kxtal+0x20>)
   843f2:	6893      	ldr	r3, [r2, #8]
   843f4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   843f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   843fc:	6093      	str	r3, [r2, #8]
   843fe:	e7f3      	b.n	843e8 <pmc_switch_sclk_to_32kxtal+0x4>
   84400:	a5000008 	.word	0xa5000008
   84404:	400e1210 	.word	0x400e1210

00084408 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   84408:	4b05      	ldr	r3, [pc, #20]	; (84420 <pmc_osc_is_ready_32kxtal+0x18>)
   8440a:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   8440c:	f013 0f80 	tst.w	r3, #128	; 0x80
   84410:	bf1d      	ittte	ne
   84412:	4b04      	ldrne	r3, [pc, #16]	; (84424 <pmc_osc_is_ready_32kxtal+0x1c>)
   84414:	6e98      	ldrne	r0, [r3, #104]	; 0x68
   84416:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
   8441a:	2000      	moveq	r0, #0
}
   8441c:	4770      	bx	lr
   8441e:	bf00      	nop
   84420:	400e1210 	.word	0x400e1210
   84424:	400e0400 	.word	0x400e0400

00084428 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   84428:	4a08      	ldr	r2, [pc, #32]	; (8444c <pmc_osc_enable_main_xtal+0x24>)
   8442a:	6a13      	ldr	r3, [r2, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   8442c:	f023 0303 	bic.w	r3, r3, #3
   84430:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84434:	f043 0301 	orr.w	r3, r3, #1
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   84438:	0200      	lsls	r0, r0, #8
   8443a:	b280      	uxth	r0, r0
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8443c:	4303      	orrs	r3, r0
	PMC->CKGR_MOR = mor;
   8443e:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   84440:	6e93      	ldr	r3, [r2, #104]	; 0x68
   84442:	f013 0f01 	tst.w	r3, #1
   84446:	d0fb      	beq.n	84440 <pmc_osc_enable_main_xtal+0x18>
}
   84448:	4770      	bx	lr
   8444a:	bf00      	nop
   8444c:	400e0400 	.word	0x400e0400

00084450 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   84450:	4b02      	ldr	r3, [pc, #8]	; (8445c <pmc_osc_is_ready_main_xtal+0xc>)
   84452:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84454:	f000 0001 	and.w	r0, r0, #1
   84458:	4770      	bx	lr
   8445a:	bf00      	nop
   8445c:	400e0400 	.word	0x400e0400

00084460 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   84460:	4b02      	ldr	r3, [pc, #8]	; (8446c <pmc_osc_is_ready_mainck+0xc>)
   84462:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84464:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   84468:	4770      	bx	lr
   8446a:	bf00      	nop
   8446c:	400e0400 	.word	0x400e0400

00084470 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   84470:	4b06      	ldr	r3, [pc, #24]	; (8448c <pmc_mainck_osc_select+0x1c>)
   84472:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   84474:	b930      	cbnz	r0, 84484 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   84476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   8447a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8447e:	4a03      	ldr	r2, [pc, #12]	; (8448c <pmc_mainck_osc_select+0x1c>)
   84480:	6213      	str	r3, [r2, #32]
   84482:	4770      	bx	lr
		mor |=  CKGR_MOR_MOSCSEL;
   84484:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   84488:	e7f7      	b.n	8447a <pmc_mainck_osc_select+0xa>
   8448a:	bf00      	nop
   8448c:	400e0400 	.word	0x400e0400

00084490 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   84490:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   84494:	4b01      	ldr	r3, [pc, #4]	; (8449c <pmc_disable_pllack+0xc>)
   84496:	629a      	str	r2, [r3, #40]	; 0x28
   84498:	4770      	bx	lr
   8449a:	bf00      	nop
   8449c:	400e0400 	.word	0x400e0400

000844a0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   844a0:	4b02      	ldr	r3, [pc, #8]	; (844ac <pmc_is_locked_pllack+0xc>)
   844a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   844a4:	f000 0002 	and.w	r0, r0, #2
   844a8:	4770      	bx	lr
   844aa:	bf00      	nop
   844ac:	400e0400 	.word	0x400e0400

000844b0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   844b0:	281d      	cmp	r0, #29
   844b2:	d80e      	bhi.n	844d2 <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   844b4:	281f      	cmp	r0, #31
   844b6:	d80e      	bhi.n	844d6 <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   844b8:	4b09      	ldr	r3, [pc, #36]	; (844e0 <pmc_enable_periph_clk+0x30>)
   844ba:	699a      	ldr	r2, [r3, #24]
   844bc:	2301      	movs	r3, #1
   844be:	4083      	lsls	r3, r0
   844c0:	4393      	bics	r3, r2
   844c2:	d00a      	beq.n	844da <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   844c4:	2301      	movs	r3, #1
   844c6:	fa03 f000 	lsl.w	r0, r3, r0
   844ca:	4b05      	ldr	r3, [pc, #20]	; (844e0 <pmc_enable_periph_clk+0x30>)
   844cc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   844ce:	2000      	movs	r0, #0
   844d0:	4770      	bx	lr
		return 1;
   844d2:	2001      	movs	r0, #1
   844d4:	4770      	bx	lr
	return 0;
   844d6:	2000      	movs	r0, #0
   844d8:	4770      	bx	lr
   844da:	2000      	movs	r0, #0
}
   844dc:	4770      	bx	lr
   844de:	bf00      	nop
   844e0:	400e0400 	.word	0x400e0400

000844e4 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   844e4:	b4f0      	push	{r4, r5, r6, r7}
   844e6:	b08c      	sub	sp, #48	; 0x30
   844e8:	4607      	mov	r7, r0
   844ea:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   844ec:	ac01      	add	r4, sp, #4
   844ee:	4d11      	ldr	r5, [pc, #68]	; (84534 <pwm_clocks_generate+0x50>)
   844f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   844f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   844f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   844f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   844f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   844fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   84500:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   84502:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   84504:	f852 0b04 	ldr.w	r0, [r2], #4
   84508:	fbb6 f0f0 	udiv	r0, r6, r0
   8450c:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   84510:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   84514:	d907      	bls.n	84526 <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
   84516:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   84518:	2b0b      	cmp	r3, #11
   8451a:	d1f3      	bne.n	84504 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   8451c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   84520:	b00c      	add	sp, #48	; 0x30
   84522:	bcf0      	pop	{r4, r5, r6, r7}
   84524:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   84526:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
   84528:	bf94      	ite	ls
   8452a:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
   8452e:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
   84532:	e7f5      	b.n	84520 <pwm_clocks_generate+0x3c>
   84534:	0008b09c 	.word	0x0008b09c

00084538 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   84538:	b570      	push	{r4, r5, r6, lr}
   8453a:	4606      	mov	r6, r0
   8453c:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8453e:	680c      	ldr	r4, [r1, #0]
   84540:	b144      	cbz	r4, 84554 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   84542:	6889      	ldr	r1, [r1, #8]
   84544:	4620      	mov	r0, r4
   84546:	4b0c      	ldr	r3, [pc, #48]	; (84578 <pwm_init+0x40>)
   84548:	4798      	blx	r3
   8454a:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
   8454c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   84550:	4298      	cmp	r0, r3
   84552:	d00c      	beq.n	8456e <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   84554:	6868      	ldr	r0, [r5, #4]
   84556:	b140      	cbz	r0, 8456a <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   84558:	68a9      	ldr	r1, [r5, #8]
   8455a:	4b07      	ldr	r3, [pc, #28]	; (84578 <pwm_init+0x40>)
   8455c:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   8455e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   84562:	4298      	cmp	r0, r3
   84564:	d005      	beq.n	84572 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   84566:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   8456a:	6034      	str	r4, [r6, #0]
#endif
	return 0;
   8456c:	2400      	movs	r4, #0
}
   8456e:	4620      	mov	r0, r4
   84570:	bd70      	pop	{r4, r5, r6, pc}
			return result;
   84572:	4604      	mov	r4, r0
   84574:	e7fb      	b.n	8456e <pwm_init+0x36>
   84576:	bf00      	nop
   84578:	000844e5 	.word	0x000844e5

0008457c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   8457c:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8457e:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   84580:	684b      	ldr	r3, [r1, #4]
   84582:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   84586:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   84588:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
   8458a:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8458c:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
   8458e:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   84590:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   84594:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   84596:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   8459a:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8459c:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   845a0:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   845a2:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
   845a6:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   845aa:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   845ae:	68cb      	ldr	r3, [r1, #12]
   845b0:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   845b4:	690b      	ldr	r3, [r1, #16]
   845b6:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   845ba:	7d8b      	ldrb	r3, [r1, #22]
   845bc:	b13b      	cbz	r3, 845ce <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   845be:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   845c0:	8b4b      	ldrh	r3, [r1, #26]
   845c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   845c6:	eb00 1442 	add.w	r4, r0, r2, lsl #5
   845ca:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   845ce:	6c85      	ldr	r5, [r0, #72]	; 0x48
   845d0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   845d4:	4093      	lsls	r3, r2
   845d6:	43db      	mvns	r3, r3
   845d8:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   845da:	7fcc      	ldrb	r4, [r1, #31]
   845dc:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   845e0:	7f8c      	ldrb	r4, [r1, #30]
   845e2:	4094      	lsls	r4, r2
   845e4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   845e8:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   845ea:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   845ec:	6c44      	ldr	r4, [r0, #68]	; 0x44
   845ee:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   845f0:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
   845f4:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   845f8:	f891 4020 	ldrb.w	r4, [r1, #32]
   845fc:	4094      	lsls	r4, r2
   845fe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   84602:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   84604:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   84606:	2301      	movs	r3, #1
   84608:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
   8460a:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   8460e:	b31c      	cbz	r4, 84658 <pwm_channel_init+0xdc>
		p_pwm->PWM_SCM |= channel;
   84610:	6a04      	ldr	r4, [r0, #32]
   84612:	431c      	orrs	r4, r3
   84614:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   84616:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8461a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   8461c:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8461e:	bf0c      	ite	eq
   84620:	431c      	orreq	r4, r3
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   84622:	439c      	bicne	r4, r3
   84624:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   84626:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   8462a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8462c:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8462e:	bf0c      	ite	eq
   84630:	ea44 4303 	orreq.w	r3, r4, r3, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   84634:	ea24 4303 	bicne.w	r3, r4, r3, lsl #16
   84638:	6683      	str	r3, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
   8463a:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
   8463c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
   8463e:	23ff      	movs	r3, #255	; 0xff
   84640:	4093      	lsls	r3, r2
   84642:	ea24 0403 	bic.w	r4, r4, r3
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   84646:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   8464a:	fa03 f202 	lsl.w	r2, r3, r2
   8464e:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
   84650:	66c2      	str	r2, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   84652:	2000      	movs	r0, #0
   84654:	bc70      	pop	{r4, r5, r6}
   84656:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   84658:	6a04      	ldr	r4, [r0, #32]
   8465a:	ea24 0403 	bic.w	r4, r4, r3
   8465e:	6204      	str	r4, [r0, #32]
   84660:	e7d9      	b.n	84616 <pwm_channel_init+0x9a>

00084662 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   84662:	2301      	movs	r3, #1
   84664:	fa03 f101 	lsl.w	r1, r3, r1
   84668:	6041      	str	r1, [r0, #4]
   8466a:	4770      	bx	lr

0008466c <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   8466c:	2301      	movs	r3, #1
   8466e:	fa03 f101 	lsl.w	r1, r3, r1
   84672:	6081      	str	r1, [r0, #8]
   84674:	4770      	bx	lr

00084676 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
   84676:	6201      	str	r1, [r0, #32]
   84678:	4770      	bx	lr

0008467a <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
   8467a:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
   8467c:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   8467e:	6884      	ldr	r4, [r0, #8]
   84680:	42a5      	cmp	r5, r4
   84682:	d003      	beq.n	8468c <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
   84684:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   84686:	6884      	ldr	r4, [r0, #8]
   84688:	42ac      	cmp	r4, r5
   8468a:	d1fb      	bne.n	84684 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
   8468c:	b161      	cbz	r1, 846a8 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8468e:	f3c4 5001 	ubfx	r0, r4, #20, #2
   84692:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   84696:	f3c4 4003 	ubfx	r0, r4, #16, #4
   8469a:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
   8469e:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
   846a2:	bf18      	it	ne
   846a4:	300c      	addne	r0, #12
   846a6:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
   846a8:	b142      	cbz	r2, 846bc <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
   846aa:	f3c4 3102 	ubfx	r1, r4, #12, #3
   846ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   846b2:	f3c4 2003 	ubfx	r0, r4, #8, #4
   846b6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
   846ba:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
   846bc:	b143      	cbz	r3, 846d0 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   846be:	f3c4 1202 	ubfx	r2, r4, #4, #3
   846c2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   846c6:	f004 040f 	and.w	r4, r4, #15
   846ca:	eb04 0442 	add.w	r4, r4, r2, lsl #1
   846ce:	601c      	str	r4, [r3, #0]
	}
}
   846d0:	bc30      	pop	{r4, r5}
   846d2:	4770      	bx	lr

000846d4 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
   846d4:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
   846d6:	6844      	ldr	r4, [r0, #4]
   846d8:	f014 0f01 	tst.w	r4, #1
   846dc:	d005      	beq.n	846ea <rtc_set_time+0x16>
		if (ul_hour > 12) {
   846de:	290c      	cmp	r1, #12
   846e0:	d93d      	bls.n	8475e <rtc_set_time+0x8a>
			ul_hour -= 12;
   846e2:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
   846e4:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   846e8:	e000      	b.n	846ec <rtc_set_time+0x18>
	uint32_t ul_time = 0;
   846ea:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   846ec:	4c1d      	ldr	r4, [pc, #116]	; (84764 <rtc_set_time+0x90>)
   846ee:	fba4 5603 	umull	r5, r6, r4, r3
   846f2:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
   846f4:	eb06 0586 	add.w	r5, r6, r6, lsl #2
   846f8:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
   846fc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
   84700:	fba4 6502 	umull	r6, r5, r4, r2
   84704:	08ed      	lsrs	r5, r5, #3
   84706:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
   8470a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8470e:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
   84712:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   84716:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
   84718:	fba4 4201 	umull	r4, r2, r4, r1
   8471c:	08d2      	lsrs	r2, r2, #3
   8471e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
   84722:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   84726:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   8472a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   8472e:	6983      	ldr	r3, [r0, #24]
   84730:	f013 0f04 	tst.w	r3, #4
   84734:	d0fb      	beq.n	8472e <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
   84736:	6803      	ldr	r3, [r0, #0]
   84738:	f043 0301 	orr.w	r3, r3, #1
   8473c:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   8473e:	6983      	ldr	r3, [r0, #24]
   84740:	f013 0f01 	tst.w	r3, #1
   84744:	d0fb      	beq.n	8473e <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
   84746:	2301      	movs	r3, #1
   84748:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
   8474a:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
   8474c:	6803      	ldr	r3, [r0, #0]
   8474e:	f023 0301 	bic.w	r3, r3, #1
   84752:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
   84754:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   84756:	f000 0001 	and.w	r0, r0, #1
   8475a:	bcf0      	pop	{r4, r5, r6, r7}
   8475c:	4770      	bx	lr
	uint32_t ul_time = 0;
   8475e:	2700      	movs	r7, #0
   84760:	e7c4      	b.n	846ec <rtc_set_time+0x18>
   84762:	bf00      	nop
   84764:	cccccccd 	.word	0xcccccccd

00084768 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
   84768:	b4f0      	push	{r4, r5, r6, r7}
   8476a:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
   8476c:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   8476e:	68c4      	ldr	r4, [r0, #12]
   84770:	42a5      	cmp	r5, r4
   84772:	d003      	beq.n	8477c <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
   84774:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   84776:	68c4      	ldr	r4, [r0, #12]
   84778:	42ac      	cmp	r4, r5
   8477a:	d1fb      	bne.n	84774 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
   8477c:	b199      	cbz	r1, 847a6 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8477e:	f3c4 3003 	ubfx	r0, r4, #12, #4
   84782:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   84786:	f3c4 2703 	ubfx	r7, r4, #8, #4
   8478a:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8478e:	f3c4 1002 	ubfx	r0, r4, #4, #3
   84792:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   84796:	f004 000f 	and.w	r0, r4, #15
   8479a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8479e:	2564      	movs	r5, #100	; 0x64
   847a0:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
   847a4:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
   847a6:	b142      	cbz	r2, 847ba <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   847a8:	f3c4 5000 	ubfx	r0, r4, #20, #1
   847ac:	0081      	lsls	r1, r0, #2
   847ae:	4408      	add	r0, r1
   847b0:	f3c4 4103 	ubfx	r1, r4, #16, #4
   847b4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
   847b8:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
   847ba:	b143      	cbz	r3, 847ce <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   847bc:	f3c4 7201 	ubfx	r2, r4, #28, #2
   847c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   847c4:	f3c4 6103 	ubfx	r1, r4, #24, #4
   847c8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   847cc:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
   847ce:	b116      	cbz	r6, 847d6 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
   847d0:	f3c4 5442 	ubfx	r4, r4, #21, #3
   847d4:	6034      	str	r4, [r6, #0]
	}
}
   847d6:	bcf0      	pop	{r4, r5, r6, r7}
   847d8:	4770      	bx	lr
	...

000847dc <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
   847dc:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   847de:	4d2a      	ldr	r5, [pc, #168]	; (84888 <rtc_set_date+0xac>)
   847e0:	fba5 4603 	umull	r4, r6, r5, r3
   847e4:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
   847e6:	9c03      	ldr	r4, [sp, #12]
   847e8:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   847ea:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
   847ee:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   847f2:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   847f6:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
   847fa:	fba5 6402 	umull	r6, r4, r5, r2
   847fe:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   84800:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
   84804:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84808:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   8480c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
   84810:	4b1e      	ldr	r3, [pc, #120]	; (8488c <rtc_set_date+0xb0>)
   84812:	fba3 4301 	umull	r4, r3, r3, r1
   84816:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   84818:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
   8481c:	4b1c      	ldr	r3, [pc, #112]	; (84890 <rtc_set_date+0xb4>)
   8481e:	fba3 4301 	umull	r4, r3, r3, r1
   84822:	095b      	lsrs	r3, r3, #5
   84824:	fba5 6403 	umull	r6, r4, r5, r3
   84828:	08e4      	lsrs	r4, r4, #3
   8482a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   8482e:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   84832:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
   84834:	fba5 4301 	umull	r4, r3, r5, r1
   84838:	08db      	lsrs	r3, r3, #3
   8483a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   8483e:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   84842:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
   84846:	fba5 1503 	umull	r1, r5, r5, r3
   8484a:	08ed      	lsrs	r5, r5, #3
   8484c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   84850:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   84854:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   84858:	6983      	ldr	r3, [r0, #24]
   8485a:	f013 0f04 	tst.w	r3, #4
   8485e:	d0fb      	beq.n	84858 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
   84860:	6803      	ldr	r3, [r0, #0]
   84862:	f043 0302 	orr.w	r3, r3, #2
   84866:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   84868:	6983      	ldr	r3, [r0, #24]
   8486a:	f013 0f01 	tst.w	r3, #1
   8486e:	d0fb      	beq.n	84868 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
   84870:	2301      	movs	r3, #1
   84872:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
   84874:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
   84876:	6803      	ldr	r3, [r0, #0]
   84878:	f023 0302 	bic.w	r3, r3, #2
   8487c:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
   8487e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   84880:	f000 0002 	and.w	r0, r0, #2
   84884:	bc70      	pop	{r4, r5, r6}
   84886:	4770      	bx	lr
   84888:	cccccccd 	.word	0xcccccccd
   8488c:	10624dd3 	.word	0x10624dd3
   84890:	51eb851f 	.word	0x51eb851f

00084894 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
   84894:	61c1      	str	r1, [r0, #28]
   84896:	4770      	bx	lr

00084898 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   84898:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8489a:	0189      	lsls	r1, r1, #6
   8489c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8489e:	2402      	movs	r4, #2
   848a0:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   848a2:	f04f 31ff 	mov.w	r1, #4294967295
   848a6:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   848a8:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   848aa:	605a      	str	r2, [r3, #4]
}
   848ac:	bc10      	pop	{r4}
   848ae:	4770      	bx	lr

000848b0 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   848b0:	0189      	lsls	r1, r1, #6
   848b2:	2305      	movs	r3, #5
   848b4:	5043      	str	r3, [r0, r1]
   848b6:	4770      	bx	lr

000848b8 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
   848b8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   848bc:	614a      	str	r2, [r1, #20]
   848be:	4770      	bx	lr

000848c0 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   848c0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   848c4:	61ca      	str	r2, [r1, #28]
   848c6:	4770      	bx	lr

000848c8 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   848c8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   848cc:	624a      	str	r2, [r1, #36]	; 0x24
   848ce:	4770      	bx	lr

000848d0 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   848d0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   848d4:	6a08      	ldr	r0, [r1, #32]
}
   848d6:	4770      	bx	lr

000848d8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   848d8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   848da:	23ac      	movs	r3, #172	; 0xac
   848dc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   848de:	680b      	ldr	r3, [r1, #0]
   848e0:	684a      	ldr	r2, [r1, #4]
   848e2:	fbb3 f3f2 	udiv	r3, r3, r2
   848e6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   848e8:	1e5c      	subs	r4, r3, #1
   848ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   848ee:	4294      	cmp	r4, r2
   848f0:	d80b      	bhi.n	8490a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   848f2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   848f4:	688b      	ldr	r3, [r1, #8]
   848f6:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   848f8:	f240 2302 	movw	r3, #514	; 0x202
   848fc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   84900:	2350      	movs	r3, #80	; 0x50
   84902:	6003      	str	r3, [r0, #0]

	return 0;
   84904:	2000      	movs	r0, #0
}
   84906:	bc10      	pop	{r4}
   84908:	4770      	bx	lr
		return 1;
   8490a:	2001      	movs	r0, #1
   8490c:	e7fb      	b.n	84906 <uart_init+0x2e>

0008490e <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
   8490e:	6081      	str	r1, [r0, #8]
   84910:	4770      	bx	lr

00084912 <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
   84912:	60c1      	str	r1, [r0, #12]
   84914:	4770      	bx	lr

00084916 <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
   84916:	6940      	ldr	r0, [r0, #20]
}
   84918:	4770      	bx	lr

0008491a <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
   8491a:	6940      	ldr	r0, [r0, #20]
}
   8491c:	f000 0001 	and.w	r0, r0, #1
   84920:	4770      	bx	lr

00084922 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   84922:	6943      	ldr	r3, [r0, #20]
   84924:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   84928:	bf1d      	ittte	ne
   8492a:	6983      	ldrne	r3, [r0, #24]
   8492c:	700b      	strbne	r3, [r1, #0]
	return 0;
   8492e:	2000      	movne	r0, #0
		return 1;
   84930:	2001      	moveq	r0, #1
}
   84932:	4770      	bx	lr

00084934 <rstc_start_software_reset>:
		Rstc *p_rstc)
{
#if (SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST;
#else
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST | RSTC_CR_PERRST;
   84934:	4b01      	ldr	r3, [pc, #4]	; (8493c <rstc_start_software_reset+0x8>)
   84936:	6003      	str	r3, [r0, #0]
   84938:	4770      	bx	lr
   8493a:	bf00      	nop
   8493c:	a5000005 	.word	0xa5000005

00084940 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
   84940:	4770      	bx	lr
	...

00084944 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   84944:	4b0b      	ldr	r3, [pc, #44]	; (84974 <cpu_irq_enter_critical+0x30>)
   84946:	681b      	ldr	r3, [r3, #0]
   84948:	b92b      	cbnz	r3, 84956 <cpu_irq_enter_critical+0x12>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8494a:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   8494e:	b13b      	cbz	r3, 84960 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   84950:	2200      	movs	r2, #0
   84952:	4b09      	ldr	r3, [pc, #36]	; (84978 <cpu_irq_enter_critical+0x34>)
   84954:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   84956:	4a07      	ldr	r2, [pc, #28]	; (84974 <cpu_irq_enter_critical+0x30>)
   84958:	6813      	ldr	r3, [r2, #0]
   8495a:	3301      	adds	r3, #1
   8495c:	6013      	str	r3, [r2, #0]
   8495e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
   84960:	b672      	cpsid	i
   84962:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   84966:	2200      	movs	r2, #0
   84968:	4b04      	ldr	r3, [pc, #16]	; (8497c <cpu_irq_enter_critical+0x38>)
   8496a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   8496c:	2201      	movs	r2, #1
   8496e:	4b02      	ldr	r3, [pc, #8]	; (84978 <cpu_irq_enter_critical+0x34>)
   84970:	701a      	strb	r2, [r3, #0]
   84972:	e7f0      	b.n	84956 <cpu_irq_enter_critical+0x12>
   84974:	20001180 	.word	0x20001180
   84978:	20001184 	.word	0x20001184
   8497c:	20000628 	.word	0x20000628

00084980 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   84980:	4b07      	ldr	r3, [pc, #28]	; (849a0 <cpu_irq_leave_critical+0x20>)
   84982:	681a      	ldr	r2, [r3, #0]
   84984:	3a01      	subs	r2, #1
   84986:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   84988:	681b      	ldr	r3, [r3, #0]
   8498a:	b943      	cbnz	r3, 8499e <cpu_irq_leave_critical+0x1e>
   8498c:	4b05      	ldr	r3, [pc, #20]	; (849a4 <cpu_irq_leave_critical+0x24>)
   8498e:	781b      	ldrb	r3, [r3, #0]
   84990:	b12b      	cbz	r3, 8499e <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   84992:	2201      	movs	r2, #1
   84994:	4b04      	ldr	r3, [pc, #16]	; (849a8 <cpu_irq_leave_critical+0x28>)
   84996:	701a      	strb	r2, [r3, #0]
   84998:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8499c:	b662      	cpsie	i
   8499e:	4770      	bx	lr
   849a0:	20001180 	.word	0x20001180
   849a4:	20001184 	.word	0x20001184
   849a8:	20000628 	.word	0x20000628

000849ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   849ac:	e7fe      	b.n	849ac <Dummy_Handler>
	...

000849b0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   849b0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   849b2:	4b1c      	ldr	r3, [pc, #112]	; (84a24 <Reset_Handler+0x74>)
   849b4:	4a1c      	ldr	r2, [pc, #112]	; (84a28 <Reset_Handler+0x78>)
   849b6:	429a      	cmp	r2, r3
   849b8:	d010      	beq.n	849dc <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   849ba:	4b1c      	ldr	r3, [pc, #112]	; (84a2c <Reset_Handler+0x7c>)
   849bc:	4a19      	ldr	r2, [pc, #100]	; (84a24 <Reset_Handler+0x74>)
   849be:	429a      	cmp	r2, r3
   849c0:	d20c      	bcs.n	849dc <Reset_Handler+0x2c>
   849c2:	3b01      	subs	r3, #1
   849c4:	1a9b      	subs	r3, r3, r2
   849c6:	f023 0303 	bic.w	r3, r3, #3
   849ca:	3304      	adds	r3, #4
   849cc:	4413      	add	r3, r2
   849ce:	4916      	ldr	r1, [pc, #88]	; (84a28 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   849d0:	f851 0b04 	ldr.w	r0, [r1], #4
   849d4:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   849d8:	429a      	cmp	r2, r3
   849da:	d1f9      	bne.n	849d0 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   849dc:	4b14      	ldr	r3, [pc, #80]	; (84a30 <Reset_Handler+0x80>)
   849de:	4a15      	ldr	r2, [pc, #84]	; (84a34 <Reset_Handler+0x84>)
   849e0:	429a      	cmp	r2, r3
   849e2:	d20a      	bcs.n	849fa <Reset_Handler+0x4a>
   849e4:	3b01      	subs	r3, #1
   849e6:	1a9b      	subs	r3, r3, r2
   849e8:	f023 0303 	bic.w	r3, r3, #3
   849ec:	3304      	adds	r3, #4
   849ee:	4413      	add	r3, r2
		*pDest++ = 0;
   849f0:	2100      	movs	r1, #0
   849f2:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   849f6:	4293      	cmp	r3, r2
   849f8:	d1fb      	bne.n	849f2 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   849fa:	4b0f      	ldr	r3, [pc, #60]	; (84a38 <Reset_Handler+0x88>)
   849fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   84a00:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84a04:	490d      	ldr	r1, [pc, #52]	; (84a3c <Reset_Handler+0x8c>)
   84a06:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   84a08:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   84a0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
   84a10:	d203      	bcs.n	84a1a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   84a12:	688b      	ldr	r3, [r1, #8]
   84a14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   84a18:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   84a1a:	4b09      	ldr	r3, [pc, #36]	; (84a40 <Reset_Handler+0x90>)
   84a1c:	4798      	blx	r3

	/* Branch to main function */
	main();
   84a1e:	4b09      	ldr	r3, [pc, #36]	; (84a44 <Reset_Handler+0x94>)
   84a20:	4798      	blx	r3
   84a22:	e7fe      	b.n	84a22 <Reset_Handler+0x72>
   84a24:	20000000 	.word	0x20000000
   84a28:	0008b37c 	.word	0x0008b37c
   84a2c:	20000fe0 	.word	0x20000fe0
   84a30:	20002a1c 	.word	0x20002a1c
   84a34:	20000fe0 	.word	0x20000fe0
   84a38:	00080000 	.word	0x00080000
   84a3c:	e000ed00 	.word	0xe000ed00
   84a40:	00085109 	.word	0x00085109
   84a44:	00084b99 	.word	0x00084b99

00084a48 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   84a48:	4b3d      	ldr	r3, [pc, #244]	; (84b40 <SystemCoreClockUpdate+0xf8>)
   84a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84a4c:	f003 0303 	and.w	r3, r3, #3
   84a50:	2b03      	cmp	r3, #3
   84a52:	d80e      	bhi.n	84a72 <SystemCoreClockUpdate+0x2a>
   84a54:	e8df f003 	tbb	[pc, r3]
   84a58:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   84a5c:	4b39      	ldr	r3, [pc, #228]	; (84b44 <SystemCoreClockUpdate+0xfc>)
   84a5e:	695b      	ldr	r3, [r3, #20]
   84a60:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   84a64:	bf14      	ite	ne
   84a66:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   84a6a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   84a6e:	4b36      	ldr	r3, [pc, #216]	; (84b48 <SystemCoreClockUpdate+0x100>)
   84a70:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   84a72:	4b33      	ldr	r3, [pc, #204]	; (84b40 <SystemCoreClockUpdate+0xf8>)
   84a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84a76:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84a7a:	2b70      	cmp	r3, #112	; 0x70
   84a7c:	d057      	beq.n	84b2e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   84a7e:	4b30      	ldr	r3, [pc, #192]	; (84b40 <SystemCoreClockUpdate+0xf8>)
   84a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   84a82:	4931      	ldr	r1, [pc, #196]	; (84b48 <SystemCoreClockUpdate+0x100>)
   84a84:	f3c2 1202 	ubfx	r2, r2, #4, #3
   84a88:	680b      	ldr	r3, [r1, #0]
   84a8a:	40d3      	lsrs	r3, r2
   84a8c:	600b      	str	r3, [r1, #0]
   84a8e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84a90:	4b2b      	ldr	r3, [pc, #172]	; (84b40 <SystemCoreClockUpdate+0xf8>)
   84a92:	6a1b      	ldr	r3, [r3, #32]
   84a94:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   84a98:	d003      	beq.n	84aa2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84a9a:	4a2c      	ldr	r2, [pc, #176]	; (84b4c <SystemCoreClockUpdate+0x104>)
   84a9c:	4b2a      	ldr	r3, [pc, #168]	; (84b48 <SystemCoreClockUpdate+0x100>)
   84a9e:	601a      	str	r2, [r3, #0]
   84aa0:	e7e7      	b.n	84a72 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84aa2:	4a2b      	ldr	r2, [pc, #172]	; (84b50 <SystemCoreClockUpdate+0x108>)
   84aa4:	4b28      	ldr	r3, [pc, #160]	; (84b48 <SystemCoreClockUpdate+0x100>)
   84aa6:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84aa8:	4b25      	ldr	r3, [pc, #148]	; (84b40 <SystemCoreClockUpdate+0xf8>)
   84aaa:	6a1b      	ldr	r3, [r3, #32]
   84aac:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84ab0:	2b10      	cmp	r3, #16
   84ab2:	d005      	beq.n	84ac0 <SystemCoreClockUpdate+0x78>
   84ab4:	2b20      	cmp	r3, #32
   84ab6:	d1dc      	bne.n	84a72 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   84ab8:	4a24      	ldr	r2, [pc, #144]	; (84b4c <SystemCoreClockUpdate+0x104>)
   84aba:	4b23      	ldr	r3, [pc, #140]	; (84b48 <SystemCoreClockUpdate+0x100>)
   84abc:	601a      	str	r2, [r3, #0]
				break;
   84abe:	e7d8      	b.n	84a72 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   84ac0:	4a24      	ldr	r2, [pc, #144]	; (84b54 <SystemCoreClockUpdate+0x10c>)
   84ac2:	4b21      	ldr	r3, [pc, #132]	; (84b48 <SystemCoreClockUpdate+0x100>)
   84ac4:	601a      	str	r2, [r3, #0]
				break;
   84ac6:	e7d4      	b.n	84a72 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84ac8:	4b1d      	ldr	r3, [pc, #116]	; (84b40 <SystemCoreClockUpdate+0xf8>)
   84aca:	6a1b      	ldr	r3, [r3, #32]
   84acc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   84ad0:	d00c      	beq.n	84aec <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84ad2:	4a1e      	ldr	r2, [pc, #120]	; (84b4c <SystemCoreClockUpdate+0x104>)
   84ad4:	4b1c      	ldr	r3, [pc, #112]	; (84b48 <SystemCoreClockUpdate+0x100>)
   84ad6:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   84ad8:	4b19      	ldr	r3, [pc, #100]	; (84b40 <SystemCoreClockUpdate+0xf8>)
   84ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84adc:	f003 0303 	and.w	r3, r3, #3
   84ae0:	2b02      	cmp	r3, #2
   84ae2:	d016      	beq.n	84b12 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   84ae4:	4a1c      	ldr	r2, [pc, #112]	; (84b58 <SystemCoreClockUpdate+0x110>)
   84ae6:	4b18      	ldr	r3, [pc, #96]	; (84b48 <SystemCoreClockUpdate+0x100>)
   84ae8:	601a      	str	r2, [r3, #0]
   84aea:	e7c2      	b.n	84a72 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84aec:	4a18      	ldr	r2, [pc, #96]	; (84b50 <SystemCoreClockUpdate+0x108>)
   84aee:	4b16      	ldr	r3, [pc, #88]	; (84b48 <SystemCoreClockUpdate+0x100>)
   84af0:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84af2:	4b13      	ldr	r3, [pc, #76]	; (84b40 <SystemCoreClockUpdate+0xf8>)
   84af4:	6a1b      	ldr	r3, [r3, #32]
   84af6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84afa:	2b10      	cmp	r3, #16
   84afc:	d005      	beq.n	84b0a <SystemCoreClockUpdate+0xc2>
   84afe:	2b20      	cmp	r3, #32
   84b00:	d1ea      	bne.n	84ad8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   84b02:	4a12      	ldr	r2, [pc, #72]	; (84b4c <SystemCoreClockUpdate+0x104>)
   84b04:	4b10      	ldr	r3, [pc, #64]	; (84b48 <SystemCoreClockUpdate+0x100>)
   84b06:	601a      	str	r2, [r3, #0]
				break;
   84b08:	e7e6      	b.n	84ad8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   84b0a:	4a12      	ldr	r2, [pc, #72]	; (84b54 <SystemCoreClockUpdate+0x10c>)
   84b0c:	4b0e      	ldr	r3, [pc, #56]	; (84b48 <SystemCoreClockUpdate+0x100>)
   84b0e:	601a      	str	r2, [r3, #0]
				break;
   84b10:	e7e2      	b.n	84ad8 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   84b12:	4a0b      	ldr	r2, [pc, #44]	; (84b40 <SystemCoreClockUpdate+0xf8>)
   84b14:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   84b16:	6a92      	ldr	r2, [r2, #40]	; 0x28
   84b18:	480b      	ldr	r0, [pc, #44]	; (84b48 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   84b1a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   84b1e:	6803      	ldr	r3, [r0, #0]
   84b20:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   84b24:	b2d2      	uxtb	r2, r2
   84b26:	fbb3 f3f2 	udiv	r3, r3, r2
   84b2a:	6003      	str	r3, [r0, #0]
   84b2c:	e7a1      	b.n	84a72 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   84b2e:	4a06      	ldr	r2, [pc, #24]	; (84b48 <SystemCoreClockUpdate+0x100>)
   84b30:	6813      	ldr	r3, [r2, #0]
   84b32:	490a      	ldr	r1, [pc, #40]	; (84b5c <SystemCoreClockUpdate+0x114>)
   84b34:	fba1 1303 	umull	r1, r3, r1, r3
   84b38:	085b      	lsrs	r3, r3, #1
   84b3a:	6013      	str	r3, [r2, #0]
   84b3c:	4770      	bx	lr
   84b3e:	bf00      	nop
   84b40:	400e0400 	.word	0x400e0400
   84b44:	400e1210 	.word	0x400e1210
   84b48:	2000062c 	.word	0x2000062c
   84b4c:	00b71b00 	.word	0x00b71b00
   84b50:	003d0900 	.word	0x003d0900
   84b54:	007a1200 	.word	0x007a1200
   84b58:	0e4e1c00 	.word	0x0e4e1c00
   84b5c:	aaaaaaab 	.word	0xaaaaaaab

00084b60 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   84b60:	4b0a      	ldr	r3, [pc, #40]	; (84b8c <_sbrk+0x2c>)
   84b62:	681b      	ldr	r3, [r3, #0]
   84b64:	b153      	cbz	r3, 84b7c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   84b66:	4b09      	ldr	r3, [pc, #36]	; (84b8c <_sbrk+0x2c>)
   84b68:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   84b6a:	181a      	adds	r2, r3, r0
   84b6c:	4908      	ldr	r1, [pc, #32]	; (84b90 <_sbrk+0x30>)
   84b6e:	4291      	cmp	r1, r2
   84b70:	db08      	blt.n	84b84 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   84b72:	4610      	mov	r0, r2
   84b74:	4a05      	ldr	r2, [pc, #20]	; (84b8c <_sbrk+0x2c>)
   84b76:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   84b78:	4618      	mov	r0, r3
   84b7a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   84b7c:	4a05      	ldr	r2, [pc, #20]	; (84b94 <_sbrk+0x34>)
   84b7e:	4b03      	ldr	r3, [pc, #12]	; (84b8c <_sbrk+0x2c>)
   84b80:	601a      	str	r2, [r3, #0]
   84b82:	e7f0      	b.n	84b66 <_sbrk+0x6>
		return (caddr_t) -1;	
   84b84:	f04f 30ff 	mov.w	r0, #4294967295
}
   84b88:	4770      	bx	lr
   84b8a:	bf00      	nop
   84b8c:	20001188 	.word	0x20001188
   84b90:	20083ffc 	.word	0x20083ffc
   84b94:	20084000 	.word	0x20084000

00084b98 <main>:
#define SABLIER_NEW			100



int main (void)
{
   84b98:	b500      	push	{lr}
   84b9a:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
   84b9c:	b672      	cpsid	i
   84b9e:	f3bf 8f5f 	dmb	sy
	//osc_enable(OSC_MAINCK_XTAL);
	/* Insert system clock initialization code here (sysclk_init()). */
	cpu_irq_disable();
   84ba2:	4e10      	ldr	r6, [pc, #64]	; (84be4 <main+0x4c>)
   84ba4:	2400      	movs	r4, #0
   84ba6:	7034      	strb	r4, [r6, #0]
	//rstc_enable_user_reset(RSTC);
	wdt_disable(WDT);
   84ba8:	480f      	ldr	r0, [pc, #60]	; (84be8 <main+0x50>)
   84baa:	4b10      	ldr	r3, [pc, #64]	; (84bec <main+0x54>)
   84bac:	4798      	blx	r3
	sysclk_init();
   84bae:	4b10      	ldr	r3, [pc, #64]	; (84bf0 <main+0x58>)
   84bb0:	4798      	blx	r3
	board_init();
   84bb2:	4b10      	ldr	r3, [pc, #64]	; (84bf4 <main+0x5c>)
   84bb4:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());

	/* Insert application code here, after the board has been initialized. */
	KernelNew();
   84bb6:	2064      	movs	r0, #100	; 0x64
   84bb8:	4d0f      	ldr	r5, [pc, #60]	; (84bf8 <main+0x60>)
   84bba:	47a8      	blx	r5
   84bbc:	2064      	movs	r0, #100	; 0x64
   84bbe:	4b0f      	ldr	r3, [pc, #60]	; (84bfc <main+0x64>)
   84bc0:	4798      	blx	r3
	cpu_irq_enable();
   84bc2:	2301      	movs	r3, #1
   84bc4:	7033      	strb	r3, [r6, #0]
   84bc6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84bca:	b662      	cpsie	i

	PushTask(Appli,APPLI_NEW,0,0);
   84bcc:	9400      	str	r4, [sp, #0]
   84bce:	4623      	mov	r3, r4
   84bd0:	2264      	movs	r2, #100	; 0x64
   84bd2:	490b      	ldr	r1, [pc, #44]	; (84c00 <main+0x68>)
   84bd4:	2066      	movs	r0, #102	; 0x66
   84bd6:	47a8      	blx	r5
	KernelRun();
   84bd8:	2567      	movs	r5, #103	; 0x67
   84bda:	4c07      	ldr	r4, [pc, #28]	; (84bf8 <main+0x60>)
   84bdc:	4628      	mov	r0, r5
   84bde:	47a0      	blx	r4
   84be0:	e7fc      	b.n	84bdc <main+0x44>
   84be2:	bf00      	nop
   84be4:	20000628 	.word	0x20000628
   84be8:	400e1250 	.word	0x400e1250
   84bec:	00080429 	.word	0x00080429
   84bf0:	000840a1 	.word	0x000840a1
   84bf4:	00084941 	.word	0x00084941
   84bf8:	00083881 	.word	0x00083881
   84bfc:	000823cd 	.word	0x000823cd
   84c00:	00080129 	.word	0x00080129

00084c04 <__aeabi_frsub>:
   84c04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   84c08:	e002      	b.n	84c10 <__addsf3>
   84c0a:	bf00      	nop

00084c0c <__aeabi_fsub>:
   84c0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00084c10 <__addsf3>:
   84c10:	0042      	lsls	r2, r0, #1
   84c12:	bf1f      	itttt	ne
   84c14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   84c18:	ea92 0f03 	teqne	r2, r3
   84c1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   84c20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   84c24:	d06a      	beq.n	84cfc <__addsf3+0xec>
   84c26:	ea4f 6212 	mov.w	r2, r2, lsr #24
   84c2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   84c2e:	bfc1      	itttt	gt
   84c30:	18d2      	addgt	r2, r2, r3
   84c32:	4041      	eorgt	r1, r0
   84c34:	4048      	eorgt	r0, r1
   84c36:	4041      	eorgt	r1, r0
   84c38:	bfb8      	it	lt
   84c3a:	425b      	neglt	r3, r3
   84c3c:	2b19      	cmp	r3, #25
   84c3e:	bf88      	it	hi
   84c40:	4770      	bxhi	lr
   84c42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   84c46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84c4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   84c4e:	bf18      	it	ne
   84c50:	4240      	negne	r0, r0
   84c52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   84c56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   84c5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   84c5e:	bf18      	it	ne
   84c60:	4249      	negne	r1, r1
   84c62:	ea92 0f03 	teq	r2, r3
   84c66:	d03f      	beq.n	84ce8 <__addsf3+0xd8>
   84c68:	f1a2 0201 	sub.w	r2, r2, #1
   84c6c:	fa41 fc03 	asr.w	ip, r1, r3
   84c70:	eb10 000c 	adds.w	r0, r0, ip
   84c74:	f1c3 0320 	rsb	r3, r3, #32
   84c78:	fa01 f103 	lsl.w	r1, r1, r3
   84c7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   84c80:	d502      	bpl.n	84c88 <__addsf3+0x78>
   84c82:	4249      	negs	r1, r1
   84c84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   84c88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   84c8c:	d313      	bcc.n	84cb6 <__addsf3+0xa6>
   84c8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   84c92:	d306      	bcc.n	84ca2 <__addsf3+0x92>
   84c94:	0840      	lsrs	r0, r0, #1
   84c96:	ea4f 0131 	mov.w	r1, r1, rrx
   84c9a:	f102 0201 	add.w	r2, r2, #1
   84c9e:	2afe      	cmp	r2, #254	; 0xfe
   84ca0:	d251      	bcs.n	84d46 <__addsf3+0x136>
   84ca2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   84ca6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   84caa:	bf08      	it	eq
   84cac:	f020 0001 	biceq.w	r0, r0, #1
   84cb0:	ea40 0003 	orr.w	r0, r0, r3
   84cb4:	4770      	bx	lr
   84cb6:	0049      	lsls	r1, r1, #1
   84cb8:	eb40 0000 	adc.w	r0, r0, r0
   84cbc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   84cc0:	f1a2 0201 	sub.w	r2, r2, #1
   84cc4:	d1ed      	bne.n	84ca2 <__addsf3+0x92>
   84cc6:	fab0 fc80 	clz	ip, r0
   84cca:	f1ac 0c08 	sub.w	ip, ip, #8
   84cce:	ebb2 020c 	subs.w	r2, r2, ip
   84cd2:	fa00 f00c 	lsl.w	r0, r0, ip
   84cd6:	bfaa      	itet	ge
   84cd8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   84cdc:	4252      	neglt	r2, r2
   84cde:	4318      	orrge	r0, r3
   84ce0:	bfbc      	itt	lt
   84ce2:	40d0      	lsrlt	r0, r2
   84ce4:	4318      	orrlt	r0, r3
   84ce6:	4770      	bx	lr
   84ce8:	f092 0f00 	teq	r2, #0
   84cec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   84cf0:	bf06      	itte	eq
   84cf2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   84cf6:	3201      	addeq	r2, #1
   84cf8:	3b01      	subne	r3, #1
   84cfa:	e7b5      	b.n	84c68 <__addsf3+0x58>
   84cfc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   84d00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   84d04:	bf18      	it	ne
   84d06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   84d0a:	d021      	beq.n	84d50 <__addsf3+0x140>
   84d0c:	ea92 0f03 	teq	r2, r3
   84d10:	d004      	beq.n	84d1c <__addsf3+0x10c>
   84d12:	f092 0f00 	teq	r2, #0
   84d16:	bf08      	it	eq
   84d18:	4608      	moveq	r0, r1
   84d1a:	4770      	bx	lr
   84d1c:	ea90 0f01 	teq	r0, r1
   84d20:	bf1c      	itt	ne
   84d22:	2000      	movne	r0, #0
   84d24:	4770      	bxne	lr
   84d26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   84d2a:	d104      	bne.n	84d36 <__addsf3+0x126>
   84d2c:	0040      	lsls	r0, r0, #1
   84d2e:	bf28      	it	cs
   84d30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   84d34:	4770      	bx	lr
   84d36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   84d3a:	bf3c      	itt	cc
   84d3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   84d40:	4770      	bxcc	lr
   84d42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   84d46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   84d4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84d4e:	4770      	bx	lr
   84d50:	ea7f 6222 	mvns.w	r2, r2, asr #24
   84d54:	bf16      	itet	ne
   84d56:	4608      	movne	r0, r1
   84d58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   84d5c:	4601      	movne	r1, r0
   84d5e:	0242      	lsls	r2, r0, #9
   84d60:	bf06      	itte	eq
   84d62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   84d66:	ea90 0f01 	teqeq	r0, r1
   84d6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   84d6e:	4770      	bx	lr

00084d70 <__aeabi_ui2f>:
   84d70:	f04f 0300 	mov.w	r3, #0
   84d74:	e004      	b.n	84d80 <__aeabi_i2f+0x8>
   84d76:	bf00      	nop

00084d78 <__aeabi_i2f>:
   84d78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   84d7c:	bf48      	it	mi
   84d7e:	4240      	negmi	r0, r0
   84d80:	ea5f 0c00 	movs.w	ip, r0
   84d84:	bf08      	it	eq
   84d86:	4770      	bxeq	lr
   84d88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   84d8c:	4601      	mov	r1, r0
   84d8e:	f04f 0000 	mov.w	r0, #0
   84d92:	e01c      	b.n	84dce <__aeabi_l2f+0x2a>

00084d94 <__aeabi_ul2f>:
   84d94:	ea50 0201 	orrs.w	r2, r0, r1
   84d98:	bf08      	it	eq
   84d9a:	4770      	bxeq	lr
   84d9c:	f04f 0300 	mov.w	r3, #0
   84da0:	e00a      	b.n	84db8 <__aeabi_l2f+0x14>
   84da2:	bf00      	nop

00084da4 <__aeabi_l2f>:
   84da4:	ea50 0201 	orrs.w	r2, r0, r1
   84da8:	bf08      	it	eq
   84daa:	4770      	bxeq	lr
   84dac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   84db0:	d502      	bpl.n	84db8 <__aeabi_l2f+0x14>
   84db2:	4240      	negs	r0, r0
   84db4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84db8:	ea5f 0c01 	movs.w	ip, r1
   84dbc:	bf02      	ittt	eq
   84dbe:	4684      	moveq	ip, r0
   84dc0:	4601      	moveq	r1, r0
   84dc2:	2000      	moveq	r0, #0
   84dc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   84dc8:	bf08      	it	eq
   84dca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   84dce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   84dd2:	fabc f28c 	clz	r2, ip
   84dd6:	3a08      	subs	r2, #8
   84dd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   84ddc:	db10      	blt.n	84e00 <__aeabi_l2f+0x5c>
   84dde:	fa01 fc02 	lsl.w	ip, r1, r2
   84de2:	4463      	add	r3, ip
   84de4:	fa00 fc02 	lsl.w	ip, r0, r2
   84de8:	f1c2 0220 	rsb	r2, r2, #32
   84dec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   84df0:	fa20 f202 	lsr.w	r2, r0, r2
   84df4:	eb43 0002 	adc.w	r0, r3, r2
   84df8:	bf08      	it	eq
   84dfa:	f020 0001 	biceq.w	r0, r0, #1
   84dfe:	4770      	bx	lr
   84e00:	f102 0220 	add.w	r2, r2, #32
   84e04:	fa01 fc02 	lsl.w	ip, r1, r2
   84e08:	f1c2 0220 	rsb	r2, r2, #32
   84e0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   84e10:	fa21 f202 	lsr.w	r2, r1, r2
   84e14:	eb43 0002 	adc.w	r0, r3, r2
   84e18:	bf08      	it	eq
   84e1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   84e1e:	4770      	bx	lr

00084e20 <__aeabi_fmul>:
   84e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   84e28:	bf1e      	ittt	ne
   84e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   84e2e:	ea92 0f0c 	teqne	r2, ip
   84e32:	ea93 0f0c 	teqne	r3, ip
   84e36:	d06f      	beq.n	84f18 <__aeabi_fmul+0xf8>
   84e38:	441a      	add	r2, r3
   84e3a:	ea80 0c01 	eor.w	ip, r0, r1
   84e3e:	0240      	lsls	r0, r0, #9
   84e40:	bf18      	it	ne
   84e42:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   84e46:	d01e      	beq.n	84e86 <__aeabi_fmul+0x66>
   84e48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   84e4c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   84e50:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   84e54:	fba0 3101 	umull	r3, r1, r0, r1
   84e58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   84e5c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   84e60:	bf3e      	ittt	cc
   84e62:	0049      	lslcc	r1, r1, #1
   84e64:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   84e68:	005b      	lslcc	r3, r3, #1
   84e6a:	ea40 0001 	orr.w	r0, r0, r1
   84e6e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   84e72:	2afd      	cmp	r2, #253	; 0xfd
   84e74:	d81d      	bhi.n	84eb2 <__aeabi_fmul+0x92>
   84e76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   84e7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   84e7e:	bf08      	it	eq
   84e80:	f020 0001 	biceq.w	r0, r0, #1
   84e84:	4770      	bx	lr
   84e86:	f090 0f00 	teq	r0, #0
   84e8a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   84e8e:	bf08      	it	eq
   84e90:	0249      	lsleq	r1, r1, #9
   84e92:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   84e96:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   84e9a:	3a7f      	subs	r2, #127	; 0x7f
   84e9c:	bfc2      	ittt	gt
   84e9e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   84ea2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   84ea6:	4770      	bxgt	lr
   84ea8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84eac:	f04f 0300 	mov.w	r3, #0
   84eb0:	3a01      	subs	r2, #1
   84eb2:	dc5d      	bgt.n	84f70 <__aeabi_fmul+0x150>
   84eb4:	f112 0f19 	cmn.w	r2, #25
   84eb8:	bfdc      	itt	le
   84eba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   84ebe:	4770      	bxle	lr
   84ec0:	f1c2 0200 	rsb	r2, r2, #0
   84ec4:	0041      	lsls	r1, r0, #1
   84ec6:	fa21 f102 	lsr.w	r1, r1, r2
   84eca:	f1c2 0220 	rsb	r2, r2, #32
   84ece:	fa00 fc02 	lsl.w	ip, r0, r2
   84ed2:	ea5f 0031 	movs.w	r0, r1, rrx
   84ed6:	f140 0000 	adc.w	r0, r0, #0
   84eda:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   84ede:	bf08      	it	eq
   84ee0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   84ee4:	4770      	bx	lr
   84ee6:	f092 0f00 	teq	r2, #0
   84eea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   84eee:	bf02      	ittt	eq
   84ef0:	0040      	lsleq	r0, r0, #1
   84ef2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   84ef6:	3a01      	subeq	r2, #1
   84ef8:	d0f9      	beq.n	84eee <__aeabi_fmul+0xce>
   84efa:	ea40 000c 	orr.w	r0, r0, ip
   84efe:	f093 0f00 	teq	r3, #0
   84f02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   84f06:	bf02      	ittt	eq
   84f08:	0049      	lsleq	r1, r1, #1
   84f0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   84f0e:	3b01      	subeq	r3, #1
   84f10:	d0f9      	beq.n	84f06 <__aeabi_fmul+0xe6>
   84f12:	ea41 010c 	orr.w	r1, r1, ip
   84f16:	e78f      	b.n	84e38 <__aeabi_fmul+0x18>
   84f18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   84f1c:	ea92 0f0c 	teq	r2, ip
   84f20:	bf18      	it	ne
   84f22:	ea93 0f0c 	teqne	r3, ip
   84f26:	d00a      	beq.n	84f3e <__aeabi_fmul+0x11e>
   84f28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   84f2c:	bf18      	it	ne
   84f2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   84f32:	d1d8      	bne.n	84ee6 <__aeabi_fmul+0xc6>
   84f34:	ea80 0001 	eor.w	r0, r0, r1
   84f38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   84f3c:	4770      	bx	lr
   84f3e:	f090 0f00 	teq	r0, #0
   84f42:	bf17      	itett	ne
   84f44:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   84f48:	4608      	moveq	r0, r1
   84f4a:	f091 0f00 	teqne	r1, #0
   84f4e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   84f52:	d014      	beq.n	84f7e <__aeabi_fmul+0x15e>
   84f54:	ea92 0f0c 	teq	r2, ip
   84f58:	d101      	bne.n	84f5e <__aeabi_fmul+0x13e>
   84f5a:	0242      	lsls	r2, r0, #9
   84f5c:	d10f      	bne.n	84f7e <__aeabi_fmul+0x15e>
   84f5e:	ea93 0f0c 	teq	r3, ip
   84f62:	d103      	bne.n	84f6c <__aeabi_fmul+0x14c>
   84f64:	024b      	lsls	r3, r1, #9
   84f66:	bf18      	it	ne
   84f68:	4608      	movne	r0, r1
   84f6a:	d108      	bne.n	84f7e <__aeabi_fmul+0x15e>
   84f6c:	ea80 0001 	eor.w	r0, r0, r1
   84f70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   84f74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   84f78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84f7c:	4770      	bx	lr
   84f7e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   84f82:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   84f86:	4770      	bx	lr

00084f88 <__aeabi_fdiv>:
   84f88:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84f8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   84f90:	bf1e      	ittt	ne
   84f92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   84f96:	ea92 0f0c 	teqne	r2, ip
   84f9a:	ea93 0f0c 	teqne	r3, ip
   84f9e:	d069      	beq.n	85074 <__aeabi_fdiv+0xec>
   84fa0:	eba2 0203 	sub.w	r2, r2, r3
   84fa4:	ea80 0c01 	eor.w	ip, r0, r1
   84fa8:	0249      	lsls	r1, r1, #9
   84faa:	ea4f 2040 	mov.w	r0, r0, lsl #9
   84fae:	d037      	beq.n	85020 <__aeabi_fdiv+0x98>
   84fb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   84fb4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   84fb8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   84fbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   84fc0:	428b      	cmp	r3, r1
   84fc2:	bf38      	it	cc
   84fc4:	005b      	lslcc	r3, r3, #1
   84fc6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   84fca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   84fce:	428b      	cmp	r3, r1
   84fd0:	bf24      	itt	cs
   84fd2:	1a5b      	subcs	r3, r3, r1
   84fd4:	ea40 000c 	orrcs.w	r0, r0, ip
   84fd8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   84fdc:	bf24      	itt	cs
   84fde:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   84fe2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   84fe6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   84fea:	bf24      	itt	cs
   84fec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   84ff0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   84ff4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   84ff8:	bf24      	itt	cs
   84ffa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   84ffe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   85002:	011b      	lsls	r3, r3, #4
   85004:	bf18      	it	ne
   85006:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   8500a:	d1e0      	bne.n	84fce <__aeabi_fdiv+0x46>
   8500c:	2afd      	cmp	r2, #253	; 0xfd
   8500e:	f63f af50 	bhi.w	84eb2 <__aeabi_fmul+0x92>
   85012:	428b      	cmp	r3, r1
   85014:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   85018:	bf08      	it	eq
   8501a:	f020 0001 	biceq.w	r0, r0, #1
   8501e:	4770      	bx	lr
   85020:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   85024:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   85028:	327f      	adds	r2, #127	; 0x7f
   8502a:	bfc2      	ittt	gt
   8502c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   85030:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   85034:	4770      	bxgt	lr
   85036:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8503a:	f04f 0300 	mov.w	r3, #0
   8503e:	3a01      	subs	r2, #1
   85040:	e737      	b.n	84eb2 <__aeabi_fmul+0x92>
   85042:	f092 0f00 	teq	r2, #0
   85046:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8504a:	bf02      	ittt	eq
   8504c:	0040      	lsleq	r0, r0, #1
   8504e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   85052:	3a01      	subeq	r2, #1
   85054:	d0f9      	beq.n	8504a <__aeabi_fdiv+0xc2>
   85056:	ea40 000c 	orr.w	r0, r0, ip
   8505a:	f093 0f00 	teq	r3, #0
   8505e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   85062:	bf02      	ittt	eq
   85064:	0049      	lsleq	r1, r1, #1
   85066:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8506a:	3b01      	subeq	r3, #1
   8506c:	d0f9      	beq.n	85062 <__aeabi_fdiv+0xda>
   8506e:	ea41 010c 	orr.w	r1, r1, ip
   85072:	e795      	b.n	84fa0 <__aeabi_fdiv+0x18>
   85074:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   85078:	ea92 0f0c 	teq	r2, ip
   8507c:	d108      	bne.n	85090 <__aeabi_fdiv+0x108>
   8507e:	0242      	lsls	r2, r0, #9
   85080:	f47f af7d 	bne.w	84f7e <__aeabi_fmul+0x15e>
   85084:	ea93 0f0c 	teq	r3, ip
   85088:	f47f af70 	bne.w	84f6c <__aeabi_fmul+0x14c>
   8508c:	4608      	mov	r0, r1
   8508e:	e776      	b.n	84f7e <__aeabi_fmul+0x15e>
   85090:	ea93 0f0c 	teq	r3, ip
   85094:	d104      	bne.n	850a0 <__aeabi_fdiv+0x118>
   85096:	024b      	lsls	r3, r1, #9
   85098:	f43f af4c 	beq.w	84f34 <__aeabi_fmul+0x114>
   8509c:	4608      	mov	r0, r1
   8509e:	e76e      	b.n	84f7e <__aeabi_fmul+0x15e>
   850a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   850a4:	bf18      	it	ne
   850a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   850aa:	d1ca      	bne.n	85042 <__aeabi_fdiv+0xba>
   850ac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   850b0:	f47f af5c 	bne.w	84f6c <__aeabi_fmul+0x14c>
   850b4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   850b8:	f47f af3c 	bne.w	84f34 <__aeabi_fmul+0x114>
   850bc:	e75f      	b.n	84f7e <__aeabi_fmul+0x15e>
   850be:	bf00      	nop

000850c0 <__aeabi_f2uiz>:
   850c0:	0042      	lsls	r2, r0, #1
   850c2:	d20e      	bcs.n	850e2 <__aeabi_f2uiz+0x22>
   850c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   850c8:	d30b      	bcc.n	850e2 <__aeabi_f2uiz+0x22>
   850ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
   850ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   850d2:	d409      	bmi.n	850e8 <__aeabi_f2uiz+0x28>
   850d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
   850d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   850dc:	fa23 f002 	lsr.w	r0, r3, r2
   850e0:	4770      	bx	lr
   850e2:	f04f 0000 	mov.w	r0, #0
   850e6:	4770      	bx	lr
   850e8:	f112 0f61 	cmn.w	r2, #97	; 0x61
   850ec:	d101      	bne.n	850f2 <__aeabi_f2uiz+0x32>
   850ee:	0242      	lsls	r2, r0, #9
   850f0:	d102      	bne.n	850f8 <__aeabi_f2uiz+0x38>
   850f2:	f04f 30ff 	mov.w	r0, #4294967295
   850f6:	4770      	bx	lr
   850f8:	f04f 0000 	mov.w	r0, #0
   850fc:	4770      	bx	lr
   850fe:	bf00      	nop

00085100 <atoi>:
   85100:	220a      	movs	r2, #10
   85102:	2100      	movs	r1, #0
   85104:	f000 b998 	b.w	85438 <strtol>

00085108 <__libc_init_array>:
   85108:	b570      	push	{r4, r5, r6, lr}
   8510a:	4e0f      	ldr	r6, [pc, #60]	; (85148 <__libc_init_array+0x40>)
   8510c:	4d0f      	ldr	r5, [pc, #60]	; (8514c <__libc_init_array+0x44>)
   8510e:	1b76      	subs	r6, r6, r5
   85110:	10b6      	asrs	r6, r6, #2
   85112:	bf18      	it	ne
   85114:	2400      	movne	r4, #0
   85116:	d005      	beq.n	85124 <__libc_init_array+0x1c>
   85118:	3401      	adds	r4, #1
   8511a:	f855 3b04 	ldr.w	r3, [r5], #4
   8511e:	4798      	blx	r3
   85120:	42a6      	cmp	r6, r4
   85122:	d1f9      	bne.n	85118 <__libc_init_array+0x10>
   85124:	4e0a      	ldr	r6, [pc, #40]	; (85150 <__libc_init_array+0x48>)
   85126:	4d0b      	ldr	r5, [pc, #44]	; (85154 <__libc_init_array+0x4c>)
   85128:	f006 f912 	bl	8b350 <_init>
   8512c:	1b76      	subs	r6, r6, r5
   8512e:	10b6      	asrs	r6, r6, #2
   85130:	bf18      	it	ne
   85132:	2400      	movne	r4, #0
   85134:	d006      	beq.n	85144 <__libc_init_array+0x3c>
   85136:	3401      	adds	r4, #1
   85138:	f855 3b04 	ldr.w	r3, [r5], #4
   8513c:	4798      	blx	r3
   8513e:	42a6      	cmp	r6, r4
   85140:	d1f9      	bne.n	85136 <__libc_init_array+0x2e>
   85142:	bd70      	pop	{r4, r5, r6, pc}
   85144:	bd70      	pop	{r4, r5, r6, pc}
   85146:	bf00      	nop
   85148:	0008b35c 	.word	0x0008b35c
   8514c:	0008b35c 	.word	0x0008b35c
   85150:	0008b364 	.word	0x0008b364
   85154:	0008b35c 	.word	0x0008b35c

00085158 <memset>:
   85158:	b470      	push	{r4, r5, r6}
   8515a:	0786      	lsls	r6, r0, #30
   8515c:	d046      	beq.n	851ec <memset+0x94>
   8515e:	1e54      	subs	r4, r2, #1
   85160:	2a00      	cmp	r2, #0
   85162:	d041      	beq.n	851e8 <memset+0x90>
   85164:	b2ca      	uxtb	r2, r1
   85166:	4603      	mov	r3, r0
   85168:	e002      	b.n	85170 <memset+0x18>
   8516a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8516e:	d33b      	bcc.n	851e8 <memset+0x90>
   85170:	f803 2b01 	strb.w	r2, [r3], #1
   85174:	079d      	lsls	r5, r3, #30
   85176:	d1f8      	bne.n	8516a <memset+0x12>
   85178:	2c03      	cmp	r4, #3
   8517a:	d92e      	bls.n	851da <memset+0x82>
   8517c:	b2cd      	uxtb	r5, r1
   8517e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   85182:	2c0f      	cmp	r4, #15
   85184:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   85188:	d919      	bls.n	851be <memset+0x66>
   8518a:	4626      	mov	r6, r4
   8518c:	f103 0210 	add.w	r2, r3, #16
   85190:	3e10      	subs	r6, #16
   85192:	2e0f      	cmp	r6, #15
   85194:	f842 5c10 	str.w	r5, [r2, #-16]
   85198:	f842 5c0c 	str.w	r5, [r2, #-12]
   8519c:	f842 5c08 	str.w	r5, [r2, #-8]
   851a0:	f842 5c04 	str.w	r5, [r2, #-4]
   851a4:	f102 0210 	add.w	r2, r2, #16
   851a8:	d8f2      	bhi.n	85190 <memset+0x38>
   851aa:	f1a4 0210 	sub.w	r2, r4, #16
   851ae:	f022 020f 	bic.w	r2, r2, #15
   851b2:	f004 040f 	and.w	r4, r4, #15
   851b6:	3210      	adds	r2, #16
   851b8:	2c03      	cmp	r4, #3
   851ba:	4413      	add	r3, r2
   851bc:	d90d      	bls.n	851da <memset+0x82>
   851be:	461e      	mov	r6, r3
   851c0:	4622      	mov	r2, r4
   851c2:	3a04      	subs	r2, #4
   851c4:	2a03      	cmp	r2, #3
   851c6:	f846 5b04 	str.w	r5, [r6], #4
   851ca:	d8fa      	bhi.n	851c2 <memset+0x6a>
   851cc:	1f22      	subs	r2, r4, #4
   851ce:	f022 0203 	bic.w	r2, r2, #3
   851d2:	3204      	adds	r2, #4
   851d4:	4413      	add	r3, r2
   851d6:	f004 0403 	and.w	r4, r4, #3
   851da:	b12c      	cbz	r4, 851e8 <memset+0x90>
   851dc:	b2c9      	uxtb	r1, r1
   851de:	441c      	add	r4, r3
   851e0:	f803 1b01 	strb.w	r1, [r3], #1
   851e4:	429c      	cmp	r4, r3
   851e6:	d1fb      	bne.n	851e0 <memset+0x88>
   851e8:	bc70      	pop	{r4, r5, r6}
   851ea:	4770      	bx	lr
   851ec:	4614      	mov	r4, r2
   851ee:	4603      	mov	r3, r0
   851f0:	e7c2      	b.n	85178 <memset+0x20>
   851f2:	bf00      	nop

000851f4 <sprintf>:
   851f4:	b40e      	push	{r1, r2, r3}
   851f6:	4601      	mov	r1, r0
   851f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   851fa:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   851fe:	f44f 7702 	mov.w	r7, #520	; 0x208
   85202:	f64f 76ff 	movw	r6, #65535	; 0xffff
   85206:	b09c      	sub	sp, #112	; 0x70
   85208:	ac21      	add	r4, sp, #132	; 0x84
   8520a:	f854 2b04 	ldr.w	r2, [r4], #4
   8520e:	4b0b      	ldr	r3, [pc, #44]	; (8523c <sprintf+0x48>)
   85210:	9102      	str	r1, [sp, #8]
   85212:	9106      	str	r1, [sp, #24]
   85214:	6818      	ldr	r0, [r3, #0]
   85216:	a902      	add	r1, sp, #8
   85218:	4623      	mov	r3, r4
   8521a:	9401      	str	r4, [sp, #4]
   8521c:	f8ad 7014 	strh.w	r7, [sp, #20]
   85220:	9504      	str	r5, [sp, #16]
   85222:	9507      	str	r5, [sp, #28]
   85224:	f8ad 6016 	strh.w	r6, [sp, #22]
   85228:	f000 f91c 	bl	85464 <_svfprintf_r>
   8522c:	2200      	movs	r2, #0
   8522e:	9b02      	ldr	r3, [sp, #8]
   85230:	701a      	strb	r2, [r3, #0]
   85232:	b01c      	add	sp, #112	; 0x70
   85234:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   85238:	b003      	add	sp, #12
   8523a:	4770      	bx	lr
   8523c:	20000630 	.word	0x20000630

00085240 <strlen>:
   85240:	f020 0103 	bic.w	r1, r0, #3
   85244:	f010 0003 	ands.w	r0, r0, #3
   85248:	f1c0 0000 	rsb	r0, r0, #0
   8524c:	f851 3b04 	ldr.w	r3, [r1], #4
   85250:	f100 0c04 	add.w	ip, r0, #4
   85254:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   85258:	f06f 0200 	mvn.w	r2, #0
   8525c:	bf1c      	itt	ne
   8525e:	fa22 f20c 	lsrne.w	r2, r2, ip
   85262:	4313      	orrne	r3, r2
   85264:	f04f 0c01 	mov.w	ip, #1
   85268:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8526c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   85270:	eba3 020c 	sub.w	r2, r3, ip
   85274:	ea22 0203 	bic.w	r2, r2, r3
   85278:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8527c:	bf04      	itt	eq
   8527e:	f851 3b04 	ldreq.w	r3, [r1], #4
   85282:	3004      	addeq	r0, #4
   85284:	d0f4      	beq.n	85270 <strlen+0x30>
   85286:	f1c2 0100 	rsb	r1, r2, #0
   8528a:	ea02 0201 	and.w	r2, r2, r1
   8528e:	fab2 f282 	clz	r2, r2
   85292:	f1c2 021f 	rsb	r2, r2, #31
   85296:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8529a:	4770      	bx	lr

0008529c <strtok>:
   8529c:	4a02      	ldr	r2, [pc, #8]	; (852a8 <strtok+0xc>)
   8529e:	2301      	movs	r3, #1
   852a0:	6812      	ldr	r2, [r2, #0]
   852a2:	325c      	adds	r2, #92	; 0x5c
   852a4:	f000 b802 	b.w	852ac <__strtok_r>
   852a8:	20000630 	.word	0x20000630

000852ac <__strtok_r>:
   852ac:	b4f0      	push	{r4, r5, r6, r7}
   852ae:	b318      	cbz	r0, 852f8 <__strtok_r+0x4c>
   852b0:	4607      	mov	r7, r0
   852b2:	460d      	mov	r5, r1
   852b4:	f817 6b01 	ldrb.w	r6, [r7], #1
   852b8:	e001      	b.n	852be <__strtok_r+0x12>
   852ba:	42a6      	cmp	r6, r4
   852bc:	d017      	beq.n	852ee <__strtok_r+0x42>
   852be:	f815 4b01 	ldrb.w	r4, [r5], #1
   852c2:	2c00      	cmp	r4, #0
   852c4:	d1f9      	bne.n	852ba <__strtok_r+0xe>
   852c6:	b1e6      	cbz	r6, 85302 <__strtok_r+0x56>
   852c8:	460c      	mov	r4, r1
   852ca:	f817 5b01 	ldrb.w	r5, [r7], #1
   852ce:	e001      	b.n	852d4 <__strtok_r+0x28>
   852d0:	2b00      	cmp	r3, #0
   852d2:	d0f9      	beq.n	852c8 <__strtok_r+0x1c>
   852d4:	f814 3b01 	ldrb.w	r3, [r4], #1
   852d8:	429d      	cmp	r5, r3
   852da:	d1f9      	bne.n	852d0 <__strtok_r+0x24>
   852dc:	b155      	cbz	r5, 852f4 <__strtok_r+0x48>
   852de:	2300      	movs	r3, #0
   852e0:	f807 3c01 	strb.w	r3, [r7, #-1]
   852e4:	4606      	mov	r6, r0
   852e6:	6017      	str	r7, [r2, #0]
   852e8:	4630      	mov	r0, r6
   852ea:	bcf0      	pop	{r4, r5, r6, r7}
   852ec:	4770      	bx	lr
   852ee:	b153      	cbz	r3, 85306 <__strtok_r+0x5a>
   852f0:	4638      	mov	r0, r7
   852f2:	e7dd      	b.n	852b0 <__strtok_r+0x4>
   852f4:	462f      	mov	r7, r5
   852f6:	e7f5      	b.n	852e4 <__strtok_r+0x38>
   852f8:	6810      	ldr	r0, [r2, #0]
   852fa:	2800      	cmp	r0, #0
   852fc:	d1d8      	bne.n	852b0 <__strtok_r+0x4>
   852fe:	4606      	mov	r6, r0
   85300:	e7f2      	b.n	852e8 <__strtok_r+0x3c>
   85302:	6016      	str	r6, [r2, #0]
   85304:	e7f0      	b.n	852e8 <__strtok_r+0x3c>
   85306:	6017      	str	r7, [r2, #0]
   85308:	4606      	mov	r6, r0
   8530a:	7003      	strb	r3, [r0, #0]
   8530c:	e7ec      	b.n	852e8 <__strtok_r+0x3c>
   8530e:	bf00      	nop

00085310 <_strtol_l.isra.0>:
   85310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85314:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85318:	460f      	mov	r7, r1
   8531a:	4680      	mov	r8, r0
   8531c:	4616      	mov	r6, r2
   8531e:	461d      	mov	r5, r3
   85320:	468a      	mov	sl, r1
   85322:	e000      	b.n	85326 <_strtol_l.isra.0+0x16>
   85324:	46a2      	mov	sl, r4
   85326:	4654      	mov	r4, sl
   85328:	4648      	mov	r0, r9
   8532a:	f814 bb01 	ldrb.w	fp, [r4], #1
   8532e:	f002 fafb 	bl	87928 <__locale_ctype_ptr_l>
   85332:	4458      	add	r0, fp
   85334:	7842      	ldrb	r2, [r0, #1]
   85336:	f012 0208 	ands.w	r2, r2, #8
   8533a:	d1f3      	bne.n	85324 <_strtol_l.isra.0+0x14>
   8533c:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   85340:	d04f      	beq.n	853e2 <_strtol_l.isra.0+0xd2>
   85342:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   85346:	bf04      	itt	eq
   85348:	f894 b000 	ldrbeq.w	fp, [r4]
   8534c:	f10a 0402 	addeq.w	r4, sl, #2
   85350:	b11d      	cbz	r5, 8535a <_strtol_l.isra.0+0x4a>
   85352:	2d10      	cmp	r5, #16
   85354:	d056      	beq.n	85404 <_strtol_l.isra.0+0xf4>
   85356:	46ac      	mov	ip, r5
   85358:	e004      	b.n	85364 <_strtol_l.isra.0+0x54>
   8535a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   8535e:	d060      	beq.n	85422 <_strtol_l.isra.0+0x112>
   85360:	250a      	movs	r5, #10
   85362:	46ac      	mov	ip, r5
   85364:	2a00      	cmp	r2, #0
   85366:	bf0c      	ite	eq
   85368:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   8536c:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   85370:	2100      	movs	r1, #0
   85372:	fbb9 fefc 	udiv	lr, r9, ip
   85376:	4608      	mov	r0, r1
   85378:	fb0c 9a1e 	mls	sl, ip, lr, r9
   8537c:	e005      	b.n	8538a <_strtol_l.isra.0+0x7a>
   8537e:	d029      	beq.n	853d4 <_strtol_l.isra.0+0xc4>
   85380:	2101      	movs	r1, #1
   85382:	fb0c 3000 	mla	r0, ip, r0, r3
   85386:	f814 bb01 	ldrb.w	fp, [r4], #1
   8538a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   8538e:	2b09      	cmp	r3, #9
   85390:	d905      	bls.n	8539e <_strtol_l.isra.0+0x8e>
   85392:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   85396:	2b19      	cmp	r3, #25
   85398:	d80b      	bhi.n	853b2 <_strtol_l.isra.0+0xa2>
   8539a:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   8539e:	429d      	cmp	r5, r3
   853a0:	dd0f      	ble.n	853c2 <_strtol_l.isra.0+0xb2>
   853a2:	f1b1 3fff 	cmp.w	r1, #4294967295
   853a6:	d0ee      	beq.n	85386 <_strtol_l.isra.0+0x76>
   853a8:	4586      	cmp	lr, r0
   853aa:	d2e8      	bcs.n	8537e <_strtol_l.isra.0+0x6e>
   853ac:	f04f 31ff 	mov.w	r1, #4294967295
   853b0:	e7e9      	b.n	85386 <_strtol_l.isra.0+0x76>
   853b2:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   853b6:	2b19      	cmp	r3, #25
   853b8:	d803      	bhi.n	853c2 <_strtol_l.isra.0+0xb2>
   853ba:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   853be:	429d      	cmp	r5, r3
   853c0:	dcef      	bgt.n	853a2 <_strtol_l.isra.0+0x92>
   853c2:	1c4b      	adds	r3, r1, #1
   853c4:	d013      	beq.n	853ee <_strtol_l.isra.0+0xde>
   853c6:	b102      	cbz	r2, 853ca <_strtol_l.isra.0+0xba>
   853c8:	4240      	negs	r0, r0
   853ca:	b146      	cbz	r6, 853de <_strtol_l.isra.0+0xce>
   853cc:	b9c1      	cbnz	r1, 85400 <_strtol_l.isra.0+0xf0>
   853ce:	6037      	str	r7, [r6, #0]
   853d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   853d4:	459a      	cmp	sl, r3
   853d6:	dad3      	bge.n	85380 <_strtol_l.isra.0+0x70>
   853d8:	f04f 31ff 	mov.w	r1, #4294967295
   853dc:	e7d3      	b.n	85386 <_strtol_l.isra.0+0x76>
   853de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   853e2:	f894 b000 	ldrb.w	fp, [r4]
   853e6:	2201      	movs	r2, #1
   853e8:	f10a 0402 	add.w	r4, sl, #2
   853ec:	e7b0      	b.n	85350 <_strtol_l.isra.0+0x40>
   853ee:	2322      	movs	r3, #34	; 0x22
   853f0:	f8c8 3000 	str.w	r3, [r8]
   853f4:	b1ee      	cbz	r6, 85432 <_strtol_l.isra.0+0x122>
   853f6:	1e67      	subs	r7, r4, #1
   853f8:	4648      	mov	r0, r9
   853fa:	6037      	str	r7, [r6, #0]
   853fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85400:	4681      	mov	r9, r0
   85402:	e7f8      	b.n	853f6 <_strtol_l.isra.0+0xe6>
   85404:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   85408:	d1a5      	bne.n	85356 <_strtol_l.isra.0+0x46>
   8540a:	7823      	ldrb	r3, [r4, #0]
   8540c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   85410:	2b58      	cmp	r3, #88	; 0x58
   85412:	d1a0      	bne.n	85356 <_strtol_l.isra.0+0x46>
   85414:	f04f 0c10 	mov.w	ip, #16
   85418:	f894 b001 	ldrb.w	fp, [r4, #1]
   8541c:	4665      	mov	r5, ip
   8541e:	3402      	adds	r4, #2
   85420:	e7a0      	b.n	85364 <_strtol_l.isra.0+0x54>
   85422:	7823      	ldrb	r3, [r4, #0]
   85424:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   85428:	2b58      	cmp	r3, #88	; 0x58
   8542a:	d0f3      	beq.n	85414 <_strtol_l.isra.0+0x104>
   8542c:	2508      	movs	r5, #8
   8542e:	46ac      	mov	ip, r5
   85430:	e798      	b.n	85364 <_strtol_l.isra.0+0x54>
   85432:	4648      	mov	r0, r9
   85434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085438 <strtol>:
   85438:	4b08      	ldr	r3, [pc, #32]	; (8545c <strtol+0x24>)
   8543a:	b570      	push	{r4, r5, r6, lr}
   8543c:	681d      	ldr	r5, [r3, #0]
   8543e:	4e08      	ldr	r6, [pc, #32]	; (85460 <strtol+0x28>)
   85440:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   85442:	b082      	sub	sp, #8
   85444:	2c00      	cmp	r4, #0
   85446:	bf08      	it	eq
   85448:	4634      	moveq	r4, r6
   8544a:	4613      	mov	r3, r2
   8544c:	9400      	str	r4, [sp, #0]
   8544e:	460a      	mov	r2, r1
   85450:	4601      	mov	r1, r0
   85452:	4628      	mov	r0, r5
   85454:	f7ff ff5c 	bl	85310 <_strtol_l.isra.0>
   85458:	b002      	add	sp, #8
   8545a:	bd70      	pop	{r4, r5, r6, pc}
   8545c:	20000630 	.word	0x20000630
   85460:	20000a64 	.word	0x20000a64

00085464 <_svfprintf_r>:
   85464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85468:	b0c3      	sub	sp, #268	; 0x10c
   8546a:	460c      	mov	r4, r1
   8546c:	910b      	str	r1, [sp, #44]	; 0x2c
   8546e:	4692      	mov	sl, r2
   85470:	930f      	str	r3, [sp, #60]	; 0x3c
   85472:	900c      	str	r0, [sp, #48]	; 0x30
   85474:	f002 fa5c 	bl	87930 <_localeconv_r>
   85478:	6803      	ldr	r3, [r0, #0]
   8547a:	4618      	mov	r0, r3
   8547c:	931a      	str	r3, [sp, #104]	; 0x68
   8547e:	f7ff fedf 	bl	85240 <strlen>
   85482:	89a3      	ldrh	r3, [r4, #12]
   85484:	9019      	str	r0, [sp, #100]	; 0x64
   85486:	0619      	lsls	r1, r3, #24
   85488:	d503      	bpl.n	85492 <_svfprintf_r+0x2e>
   8548a:	6923      	ldr	r3, [r4, #16]
   8548c:	2b00      	cmp	r3, #0
   8548e:	f001 8035 	beq.w	864fc <_svfprintf_r+0x1098>
   85492:	2300      	movs	r3, #0
   85494:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   85498:	46c8      	mov	r8, r9
   8549a:	9315      	str	r3, [sp, #84]	; 0x54
   8549c:	9313      	str	r3, [sp, #76]	; 0x4c
   8549e:	9314      	str	r3, [sp, #80]	; 0x50
   854a0:	9318      	str	r3, [sp, #96]	; 0x60
   854a2:	931b      	str	r3, [sp, #108]	; 0x6c
   854a4:	9309      	str	r3, [sp, #36]	; 0x24
   854a6:	9316      	str	r3, [sp, #88]	; 0x58
   854a8:	9317      	str	r3, [sp, #92]	; 0x5c
   854aa:	9327      	str	r3, [sp, #156]	; 0x9c
   854ac:	9326      	str	r3, [sp, #152]	; 0x98
   854ae:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   854b2:	f89a 3000 	ldrb.w	r3, [sl]
   854b6:	4654      	mov	r4, sl
   854b8:	b1eb      	cbz	r3, 854f6 <_svfprintf_r+0x92>
   854ba:	2b25      	cmp	r3, #37	; 0x25
   854bc:	d102      	bne.n	854c4 <_svfprintf_r+0x60>
   854be:	e01a      	b.n	854f6 <_svfprintf_r+0x92>
   854c0:	2b25      	cmp	r3, #37	; 0x25
   854c2:	d003      	beq.n	854cc <_svfprintf_r+0x68>
   854c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   854c8:	2b00      	cmp	r3, #0
   854ca:	d1f9      	bne.n	854c0 <_svfprintf_r+0x5c>
   854cc:	eba4 050a 	sub.w	r5, r4, sl
   854d0:	b18d      	cbz	r5, 854f6 <_svfprintf_r+0x92>
   854d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   854d4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   854d6:	3301      	adds	r3, #1
   854d8:	442a      	add	r2, r5
   854da:	2b07      	cmp	r3, #7
   854dc:	f8c8 a000 	str.w	sl, [r8]
   854e0:	f8c8 5004 	str.w	r5, [r8, #4]
   854e4:	9227      	str	r2, [sp, #156]	; 0x9c
   854e6:	9326      	str	r3, [sp, #152]	; 0x98
   854e8:	f300 808a 	bgt.w	85600 <_svfprintf_r+0x19c>
   854ec:	f108 0808 	add.w	r8, r8, #8
   854f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   854f2:	442b      	add	r3, r5
   854f4:	9309      	str	r3, [sp, #36]	; 0x24
   854f6:	7823      	ldrb	r3, [r4, #0]
   854f8:	2b00      	cmp	r3, #0
   854fa:	f000 8089 	beq.w	85610 <_svfprintf_r+0x1ac>
   854fe:	2300      	movs	r3, #0
   85500:	f04f 30ff 	mov.w	r0, #4294967295
   85504:	461a      	mov	r2, r3
   85506:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8550a:	4619      	mov	r1, r3
   8550c:	930d      	str	r3, [sp, #52]	; 0x34
   8550e:	469b      	mov	fp, r3
   85510:	7863      	ldrb	r3, [r4, #1]
   85512:	f104 0a01 	add.w	sl, r4, #1
   85516:	900a      	str	r0, [sp, #40]	; 0x28
   85518:	f10a 0a01 	add.w	sl, sl, #1
   8551c:	f1a3 0020 	sub.w	r0, r3, #32
   85520:	2858      	cmp	r0, #88	; 0x58
   85522:	f200 83b7 	bhi.w	85c94 <_svfprintf_r+0x830>
   85526:	e8df f010 	tbh	[pc, r0, lsl #1]
   8552a:	034c      	.short	0x034c
   8552c:	03b503b5 	.word	0x03b503b5
   85530:	03b50354 	.word	0x03b50354
   85534:	03b503b5 	.word	0x03b503b5
   85538:	03b503b5 	.word	0x03b503b5
   8553c:	005903b5 	.word	0x005903b5
   85540:	03b50359 	.word	0x03b50359
   85544:	02140066 	.word	0x02140066
   85548:	022f03b5 	.word	0x022f03b5
   8554c:	03a503a5 	.word	0x03a503a5
   85550:	03a503a5 	.word	0x03a503a5
   85554:	03a503a5 	.word	0x03a503a5
   85558:	03a503a5 	.word	0x03a503a5
   8555c:	03b503a5 	.word	0x03b503a5
   85560:	03b503b5 	.word	0x03b503b5
   85564:	03b503b5 	.word	0x03b503b5
   85568:	03b503b5 	.word	0x03b503b5
   8556c:	03b503b5 	.word	0x03b503b5
   85570:	028b03b5 	.word	0x028b03b5
   85574:	03b502d3 	.word	0x03b502d3
   85578:	03b502d3 	.word	0x03b502d3
   8557c:	03b503b5 	.word	0x03b503b5
   85580:	031b03b5 	.word	0x031b03b5
   85584:	03b503b5 	.word	0x03b503b5
   85588:	03b50320 	.word	0x03b50320
   8558c:	03b503b5 	.word	0x03b503b5
   85590:	03b503b5 	.word	0x03b503b5
   85594:	03b50234 	.word	0x03b50234
   85598:	024b03b5 	.word	0x024b03b5
   8559c:	03b503b5 	.word	0x03b503b5
   855a0:	03b503b5 	.word	0x03b503b5
   855a4:	03b503b5 	.word	0x03b503b5
   855a8:	03b503b5 	.word	0x03b503b5
   855ac:	03b503b5 	.word	0x03b503b5
   855b0:	039e0276 	.word	0x039e0276
   855b4:	02d302d3 	.word	0x02d302d3
   855b8:	036302d3 	.word	0x036302d3
   855bc:	03b5039e 	.word	0x03b5039e
   855c0:	036803b5 	.word	0x036803b5
   855c4:	037503b5 	.word	0x037503b5
   855c8:	038c01dd 	.word	0x038c01dd
   855cc:	03b5035e 	.word	0x03b5035e
   855d0:	03b501f2 	.word	0x03b501f2
   855d4:	03b50087 	.word	0x03b50087
   855d8:	033203b5 	.word	0x033203b5
   855dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   855de:	6823      	ldr	r3, [r4, #0]
   855e0:	4618      	mov	r0, r3
   855e2:	930d      	str	r3, [sp, #52]	; 0x34
   855e4:	4623      	mov	r3, r4
   855e6:	2800      	cmp	r0, #0
   855e8:	f103 0304 	add.w	r3, r3, #4
   855ec:	930f      	str	r3, [sp, #60]	; 0x3c
   855ee:	da04      	bge.n	855fa <_svfprintf_r+0x196>
   855f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   855f2:	425b      	negs	r3, r3
   855f4:	930d      	str	r3, [sp, #52]	; 0x34
   855f6:	f04b 0b04 	orr.w	fp, fp, #4
   855fa:	f89a 3000 	ldrb.w	r3, [sl]
   855fe:	e78b      	b.n	85518 <_svfprintf_r+0xb4>
   85600:	aa25      	add	r2, sp, #148	; 0x94
   85602:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85604:	980c      	ldr	r0, [sp, #48]	; 0x30
   85606:	f003 f833 	bl	88670 <__ssprint_r>
   8560a:	b940      	cbnz	r0, 8561e <_svfprintf_r+0x1ba>
   8560c:	46c8      	mov	r8, r9
   8560e:	e76f      	b.n	854f0 <_svfprintf_r+0x8c>
   85610:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   85612:	b123      	cbz	r3, 8561e <_svfprintf_r+0x1ba>
   85614:	980c      	ldr	r0, [sp, #48]	; 0x30
   85616:	aa25      	add	r2, sp, #148	; 0x94
   85618:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8561a:	f003 f829 	bl	88670 <__ssprint_r>
   8561e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85620:	899b      	ldrh	r3, [r3, #12]
   85622:	f013 0f40 	tst.w	r3, #64	; 0x40
   85626:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85628:	bf18      	it	ne
   8562a:	f04f 33ff 	movne.w	r3, #4294967295
   8562e:	9309      	str	r3, [sp, #36]	; 0x24
   85630:	9809      	ldr	r0, [sp, #36]	; 0x24
   85632:	b043      	add	sp, #268	; 0x10c
   85634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85638:	f01b 0f20 	tst.w	fp, #32
   8563c:	9311      	str	r3, [sp, #68]	; 0x44
   8563e:	f040 81af 	bne.w	859a0 <_svfprintf_r+0x53c>
   85642:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85644:	f01b 0f10 	tst.w	fp, #16
   85648:	4613      	mov	r3, r2
   8564a:	f040 859a 	bne.w	86182 <_svfprintf_r+0xd1e>
   8564e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85652:	f000 8596 	beq.w	86182 <_svfprintf_r+0xd1e>
   85656:	2500      	movs	r5, #0
   85658:	2301      	movs	r3, #1
   8565a:	8814      	ldrh	r4, [r2, #0]
   8565c:	3204      	adds	r2, #4
   8565e:	920f      	str	r2, [sp, #60]	; 0x3c
   85660:	2200      	movs	r2, #0
   85662:	4617      	mov	r7, r2
   85664:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   85668:	990a      	ldr	r1, [sp, #40]	; 0x28
   8566a:	1c4a      	adds	r2, r1, #1
   8566c:	f000 8210 	beq.w	85a90 <_svfprintf_r+0x62c>
   85670:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   85674:	9207      	str	r2, [sp, #28]
   85676:	ea54 0205 	orrs.w	r2, r4, r5
   8567a:	f040 820f 	bne.w	85a9c <_svfprintf_r+0x638>
   8567e:	2900      	cmp	r1, #0
   85680:	f040 8431 	bne.w	85ee6 <_svfprintf_r+0xa82>
   85684:	2b00      	cmp	r3, #0
   85686:	f040 8539 	bne.w	860fc <_svfprintf_r+0xc98>
   8568a:	f01b 0301 	ands.w	r3, fp, #1
   8568e:	930e      	str	r3, [sp, #56]	; 0x38
   85690:	f000 8662 	beq.w	86358 <_svfprintf_r+0xef4>
   85694:	2330      	movs	r3, #48	; 0x30
   85696:	ae42      	add	r6, sp, #264	; 0x108
   85698:	f806 3d41 	strb.w	r3, [r6, #-65]!
   8569c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8569e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   856a0:	4293      	cmp	r3, r2
   856a2:	bfb8      	it	lt
   856a4:	4613      	movlt	r3, r2
   856a6:	9308      	str	r3, [sp, #32]
   856a8:	2300      	movs	r3, #0
   856aa:	9312      	str	r3, [sp, #72]	; 0x48
   856ac:	b117      	cbz	r7, 856b4 <_svfprintf_r+0x250>
   856ae:	9b08      	ldr	r3, [sp, #32]
   856b0:	3301      	adds	r3, #1
   856b2:	9308      	str	r3, [sp, #32]
   856b4:	9b07      	ldr	r3, [sp, #28]
   856b6:	f013 0302 	ands.w	r3, r3, #2
   856ba:	9310      	str	r3, [sp, #64]	; 0x40
   856bc:	d002      	beq.n	856c4 <_svfprintf_r+0x260>
   856be:	9b08      	ldr	r3, [sp, #32]
   856c0:	3302      	adds	r3, #2
   856c2:	9308      	str	r3, [sp, #32]
   856c4:	9b07      	ldr	r3, [sp, #28]
   856c6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   856ca:	f040 8310 	bne.w	85cee <_svfprintf_r+0x88a>
   856ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   856d0:	9a08      	ldr	r2, [sp, #32]
   856d2:	eba3 0b02 	sub.w	fp, r3, r2
   856d6:	f1bb 0f00 	cmp.w	fp, #0
   856da:	f340 8308 	ble.w	85cee <_svfprintf_r+0x88a>
   856de:	f1bb 0f10 	cmp.w	fp, #16
   856e2:	f340 87b2 	ble.w	8664a <_svfprintf_r+0x11e6>
   856e6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   856e8:	4643      	mov	r3, r8
   856ea:	4621      	mov	r1, r4
   856ec:	46a8      	mov	r8, r5
   856ee:	2710      	movs	r7, #16
   856f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   856f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   856f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   856f6:	e006      	b.n	85706 <_svfprintf_r+0x2a2>
   856f8:	f1ab 0b10 	sub.w	fp, fp, #16
   856fc:	f1bb 0f10 	cmp.w	fp, #16
   85700:	f103 0308 	add.w	r3, r3, #8
   85704:	dd18      	ble.n	85738 <_svfprintf_r+0x2d4>
   85706:	3201      	adds	r2, #1
   85708:	48ab      	ldr	r0, [pc, #684]	; (859b8 <_svfprintf_r+0x554>)
   8570a:	3110      	adds	r1, #16
   8570c:	2a07      	cmp	r2, #7
   8570e:	9127      	str	r1, [sp, #156]	; 0x9c
   85710:	9226      	str	r2, [sp, #152]	; 0x98
   85712:	e883 0081 	stmia.w	r3, {r0, r7}
   85716:	ddef      	ble.n	856f8 <_svfprintf_r+0x294>
   85718:	aa25      	add	r2, sp, #148	; 0x94
   8571a:	4629      	mov	r1, r5
   8571c:	4620      	mov	r0, r4
   8571e:	f002 ffa7 	bl	88670 <__ssprint_r>
   85722:	2800      	cmp	r0, #0
   85724:	f47f af7b 	bne.w	8561e <_svfprintf_r+0x1ba>
   85728:	f1ab 0b10 	sub.w	fp, fp, #16
   8572c:	f1bb 0f10 	cmp.w	fp, #16
   85730:	464b      	mov	r3, r9
   85732:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85734:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85736:	dce6      	bgt.n	85706 <_svfprintf_r+0x2a2>
   85738:	4645      	mov	r5, r8
   8573a:	460c      	mov	r4, r1
   8573c:	4698      	mov	r8, r3
   8573e:	3201      	adds	r2, #1
   85740:	4b9d      	ldr	r3, [pc, #628]	; (859b8 <_svfprintf_r+0x554>)
   85742:	445c      	add	r4, fp
   85744:	2a07      	cmp	r2, #7
   85746:	9427      	str	r4, [sp, #156]	; 0x9c
   85748:	9226      	str	r2, [sp, #152]	; 0x98
   8574a:	e888 0808 	stmia.w	r8, {r3, fp}
   8574e:	f300 82c3 	bgt.w	85cd8 <_svfprintf_r+0x874>
   85752:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85756:	f108 0808 	add.w	r8, r8, #8
   8575a:	b187      	cbz	r7, 8577e <_svfprintf_r+0x31a>
   8575c:	2101      	movs	r1, #1
   8575e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85760:	440c      	add	r4, r1
   85762:	440b      	add	r3, r1
   85764:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   85768:	2b07      	cmp	r3, #7
   8576a:	9427      	str	r4, [sp, #156]	; 0x9c
   8576c:	9326      	str	r3, [sp, #152]	; 0x98
   8576e:	f8c8 1004 	str.w	r1, [r8, #4]
   85772:	f8c8 2000 	str.w	r2, [r8]
   85776:	f300 83cd 	bgt.w	85f14 <_svfprintf_r+0xab0>
   8577a:	f108 0808 	add.w	r8, r8, #8
   8577e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85780:	b17b      	cbz	r3, 857a2 <_svfprintf_r+0x33e>
   85782:	2102      	movs	r1, #2
   85784:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85786:	440c      	add	r4, r1
   85788:	3301      	adds	r3, #1
   8578a:	aa1e      	add	r2, sp, #120	; 0x78
   8578c:	2b07      	cmp	r3, #7
   8578e:	9427      	str	r4, [sp, #156]	; 0x9c
   85790:	9326      	str	r3, [sp, #152]	; 0x98
   85792:	f8c8 1004 	str.w	r1, [r8, #4]
   85796:	f8c8 2000 	str.w	r2, [r8]
   8579a:	f300 8411 	bgt.w	85fc0 <_svfprintf_r+0xb5c>
   8579e:	f108 0808 	add.w	r8, r8, #8
   857a2:	2d80      	cmp	r5, #128	; 0x80
   857a4:	f000 8304 	beq.w	85db0 <_svfprintf_r+0x94c>
   857a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   857aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   857ac:	1a9f      	subs	r7, r3, r2
   857ae:	2f00      	cmp	r7, #0
   857b0:	dd37      	ble.n	85822 <_svfprintf_r+0x3be>
   857b2:	2f10      	cmp	r7, #16
   857b4:	f340 8679 	ble.w	864aa <_svfprintf_r+0x1046>
   857b8:	4d80      	ldr	r5, [pc, #512]	; (859bc <_svfprintf_r+0x558>)
   857ba:	4642      	mov	r2, r8
   857bc:	4621      	mov	r1, r4
   857be:	46b0      	mov	r8, r6
   857c0:	f04f 0b10 	mov.w	fp, #16
   857c4:	462e      	mov	r6, r5
   857c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   857c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   857ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   857cc:	e004      	b.n	857d8 <_svfprintf_r+0x374>
   857ce:	3f10      	subs	r7, #16
   857d0:	2f10      	cmp	r7, #16
   857d2:	f102 0208 	add.w	r2, r2, #8
   857d6:	dd15      	ble.n	85804 <_svfprintf_r+0x3a0>
   857d8:	3301      	adds	r3, #1
   857da:	3110      	adds	r1, #16
   857dc:	2b07      	cmp	r3, #7
   857de:	9127      	str	r1, [sp, #156]	; 0x9c
   857e0:	9326      	str	r3, [sp, #152]	; 0x98
   857e2:	e882 0840 	stmia.w	r2, {r6, fp}
   857e6:	ddf2      	ble.n	857ce <_svfprintf_r+0x36a>
   857e8:	aa25      	add	r2, sp, #148	; 0x94
   857ea:	4629      	mov	r1, r5
   857ec:	4620      	mov	r0, r4
   857ee:	f002 ff3f 	bl	88670 <__ssprint_r>
   857f2:	2800      	cmp	r0, #0
   857f4:	f47f af13 	bne.w	8561e <_svfprintf_r+0x1ba>
   857f8:	3f10      	subs	r7, #16
   857fa:	2f10      	cmp	r7, #16
   857fc:	464a      	mov	r2, r9
   857fe:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85800:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85802:	dce9      	bgt.n	857d8 <_svfprintf_r+0x374>
   85804:	4635      	mov	r5, r6
   85806:	460c      	mov	r4, r1
   85808:	4646      	mov	r6, r8
   8580a:	4690      	mov	r8, r2
   8580c:	3301      	adds	r3, #1
   8580e:	443c      	add	r4, r7
   85810:	2b07      	cmp	r3, #7
   85812:	9427      	str	r4, [sp, #156]	; 0x9c
   85814:	9326      	str	r3, [sp, #152]	; 0x98
   85816:	e888 00a0 	stmia.w	r8, {r5, r7}
   8581a:	f300 8370 	bgt.w	85efe <_svfprintf_r+0xa9a>
   8581e:	f108 0808 	add.w	r8, r8, #8
   85822:	9b07      	ldr	r3, [sp, #28]
   85824:	05df      	lsls	r7, r3, #23
   85826:	f100 8264 	bmi.w	85cf2 <_svfprintf_r+0x88e>
   8582a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8582c:	990e      	ldr	r1, [sp, #56]	; 0x38
   8582e:	3301      	adds	r3, #1
   85830:	440c      	add	r4, r1
   85832:	2b07      	cmp	r3, #7
   85834:	9427      	str	r4, [sp, #156]	; 0x9c
   85836:	f8c8 6000 	str.w	r6, [r8]
   8583a:	f8c8 1004 	str.w	r1, [r8, #4]
   8583e:	9326      	str	r3, [sp, #152]	; 0x98
   85840:	f300 83b3 	bgt.w	85faa <_svfprintf_r+0xb46>
   85844:	f108 0808 	add.w	r8, r8, #8
   85848:	9b07      	ldr	r3, [sp, #28]
   8584a:	075b      	lsls	r3, r3, #29
   8584c:	d53b      	bpl.n	858c6 <_svfprintf_r+0x462>
   8584e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85850:	9a08      	ldr	r2, [sp, #32]
   85852:	1a9d      	subs	r5, r3, r2
   85854:	2d00      	cmp	r5, #0
   85856:	dd36      	ble.n	858c6 <_svfprintf_r+0x462>
   85858:	2d10      	cmp	r5, #16
   8585a:	f340 8721 	ble.w	866a0 <_svfprintf_r+0x123c>
   8585e:	2610      	movs	r6, #16
   85860:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85862:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85864:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   85868:	e004      	b.n	85874 <_svfprintf_r+0x410>
   8586a:	3d10      	subs	r5, #16
   8586c:	2d10      	cmp	r5, #16
   8586e:	f108 0808 	add.w	r8, r8, #8
   85872:	dd16      	ble.n	858a2 <_svfprintf_r+0x43e>
   85874:	3301      	adds	r3, #1
   85876:	4a50      	ldr	r2, [pc, #320]	; (859b8 <_svfprintf_r+0x554>)
   85878:	3410      	adds	r4, #16
   8587a:	2b07      	cmp	r3, #7
   8587c:	9427      	str	r4, [sp, #156]	; 0x9c
   8587e:	9326      	str	r3, [sp, #152]	; 0x98
   85880:	e888 0044 	stmia.w	r8, {r2, r6}
   85884:	ddf1      	ble.n	8586a <_svfprintf_r+0x406>
   85886:	aa25      	add	r2, sp, #148	; 0x94
   85888:	4659      	mov	r1, fp
   8588a:	4638      	mov	r0, r7
   8588c:	f002 fef0 	bl	88670 <__ssprint_r>
   85890:	2800      	cmp	r0, #0
   85892:	f47f aec4 	bne.w	8561e <_svfprintf_r+0x1ba>
   85896:	3d10      	subs	r5, #16
   85898:	2d10      	cmp	r5, #16
   8589a:	46c8      	mov	r8, r9
   8589c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8589e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   858a0:	dce8      	bgt.n	85874 <_svfprintf_r+0x410>
   858a2:	3301      	adds	r3, #1
   858a4:	4a44      	ldr	r2, [pc, #272]	; (859b8 <_svfprintf_r+0x554>)
   858a6:	442c      	add	r4, r5
   858a8:	2b07      	cmp	r3, #7
   858aa:	9427      	str	r4, [sp, #156]	; 0x9c
   858ac:	9326      	str	r3, [sp, #152]	; 0x98
   858ae:	e888 0024 	stmia.w	r8, {r2, r5}
   858b2:	dd08      	ble.n	858c6 <_svfprintf_r+0x462>
   858b4:	aa25      	add	r2, sp, #148	; 0x94
   858b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   858b8:	980c      	ldr	r0, [sp, #48]	; 0x30
   858ba:	f002 fed9 	bl	88670 <__ssprint_r>
   858be:	2800      	cmp	r0, #0
   858c0:	f47f aead 	bne.w	8561e <_svfprintf_r+0x1ba>
   858c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   858c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   858c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   858ca:	9908      	ldr	r1, [sp, #32]
   858cc:	428a      	cmp	r2, r1
   858ce:	bfac      	ite	ge
   858d0:	189b      	addge	r3, r3, r2
   858d2:	185b      	addlt	r3, r3, r1
   858d4:	9309      	str	r3, [sp, #36]	; 0x24
   858d6:	2c00      	cmp	r4, #0
   858d8:	f040 82fb 	bne.w	85ed2 <_svfprintf_r+0xa6e>
   858dc:	2300      	movs	r3, #0
   858de:	46c8      	mov	r8, r9
   858e0:	9326      	str	r3, [sp, #152]	; 0x98
   858e2:	e5e6      	b.n	854b2 <_svfprintf_r+0x4e>
   858e4:	9311      	str	r3, [sp, #68]	; 0x44
   858e6:	f01b 0320 	ands.w	r3, fp, #32
   858ea:	f040 8145 	bne.w	85b78 <_svfprintf_r+0x714>
   858ee:	f01b 0210 	ands.w	r2, fp, #16
   858f2:	f040 8466 	bne.w	861c2 <_svfprintf_r+0xd5e>
   858f6:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   858fa:	f000 8462 	beq.w	861c2 <_svfprintf_r+0xd5e>
   858fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
   85900:	4613      	mov	r3, r2
   85902:	460a      	mov	r2, r1
   85904:	3204      	adds	r2, #4
   85906:	880c      	ldrh	r4, [r1, #0]
   85908:	2500      	movs	r5, #0
   8590a:	920f      	str	r2, [sp, #60]	; 0x3c
   8590c:	e6a8      	b.n	85660 <_svfprintf_r+0x1fc>
   8590e:	2500      	movs	r5, #0
   85910:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85912:	9311      	str	r3, [sp, #68]	; 0x44
   85914:	6816      	ldr	r6, [r2, #0]
   85916:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   8591a:	1d14      	adds	r4, r2, #4
   8591c:	2e00      	cmp	r6, #0
   8591e:	f000 86cd 	beq.w	866bc <_svfprintf_r+0x1258>
   85922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85924:	1c53      	adds	r3, r2, #1
   85926:	f000 861b 	beq.w	86560 <_svfprintf_r+0x10fc>
   8592a:	4629      	mov	r1, r5
   8592c:	4630      	mov	r0, r6
   8592e:	f002 fac9 	bl	87ec4 <memchr>
   85932:	2800      	cmp	r0, #0
   85934:	f000 870d 	beq.w	86752 <_svfprintf_r+0x12ee>
   85938:	1b83      	subs	r3, r0, r6
   8593a:	950a      	str	r5, [sp, #40]	; 0x28
   8593c:	930e      	str	r3, [sp, #56]	; 0x38
   8593e:	940f      	str	r4, [sp, #60]	; 0x3c
   85940:	f8cd b01c 	str.w	fp, [sp, #28]
   85944:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85948:	9308      	str	r3, [sp, #32]
   8594a:	9512      	str	r5, [sp, #72]	; 0x48
   8594c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85950:	e6ac      	b.n	856ac <_svfprintf_r+0x248>
   85952:	f89a 3000 	ldrb.w	r3, [sl]
   85956:	f10a 0401 	add.w	r4, sl, #1
   8595a:	2b2a      	cmp	r3, #42	; 0x2a
   8595c:	f000 87c2 	beq.w	868e4 <_svfprintf_r+0x1480>
   85960:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85964:	2809      	cmp	r0, #9
   85966:	46a2      	mov	sl, r4
   85968:	f200 8718 	bhi.w	8679c <_svfprintf_r+0x1338>
   8596c:	2300      	movs	r3, #0
   8596e:	461c      	mov	r4, r3
   85970:	f81a 3b01 	ldrb.w	r3, [sl], #1
   85974:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   85978:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   8597c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85980:	2809      	cmp	r0, #9
   85982:	d9f5      	bls.n	85970 <_svfprintf_r+0x50c>
   85984:	940a      	str	r4, [sp, #40]	; 0x28
   85986:	e5c9      	b.n	8551c <_svfprintf_r+0xb8>
   85988:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   8598c:	f89a 3000 	ldrb.w	r3, [sl]
   85990:	e5c2      	b.n	85518 <_svfprintf_r+0xb4>
   85992:	f04b 0b10 	orr.w	fp, fp, #16
   85996:	f01b 0f20 	tst.w	fp, #32
   8599a:	9311      	str	r3, [sp, #68]	; 0x44
   8599c:	f43f ae51 	beq.w	85642 <_svfprintf_r+0x1de>
   859a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   859a2:	3407      	adds	r4, #7
   859a4:	f024 0307 	bic.w	r3, r4, #7
   859a8:	f103 0208 	add.w	r2, r3, #8
   859ac:	e9d3 4500 	ldrd	r4, r5, [r3]
   859b0:	920f      	str	r2, [sp, #60]	; 0x3c
   859b2:	2301      	movs	r3, #1
   859b4:	e654      	b.n	85660 <_svfprintf_r+0x1fc>
   859b6:	bf00      	nop
   859b8:	0008b110 	.word	0x0008b110
   859bc:	0008b120 	.word	0x0008b120
   859c0:	9311      	str	r3, [sp, #68]	; 0x44
   859c2:	2a00      	cmp	r2, #0
   859c4:	f040 87ad 	bne.w	86922 <_svfprintf_r+0x14be>
   859c8:	4bbe      	ldr	r3, [pc, #760]	; (85cc4 <_svfprintf_r+0x860>)
   859ca:	f01b 0f20 	tst.w	fp, #32
   859ce:	9318      	str	r3, [sp, #96]	; 0x60
   859d0:	f040 80e7 	bne.w	85ba2 <_svfprintf_r+0x73e>
   859d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   859d6:	f01b 0f10 	tst.w	fp, #16
   859da:	4613      	mov	r3, r2
   859dc:	f040 83d8 	bne.w	86190 <_svfprintf_r+0xd2c>
   859e0:	f01b 0f40 	tst.w	fp, #64	; 0x40
   859e4:	f000 83d4 	beq.w	86190 <_svfprintf_r+0xd2c>
   859e8:	2500      	movs	r5, #0
   859ea:	3304      	adds	r3, #4
   859ec:	8814      	ldrh	r4, [r2, #0]
   859ee:	930f      	str	r3, [sp, #60]	; 0x3c
   859f0:	f01b 0f01 	tst.w	fp, #1
   859f4:	f000 80e3 	beq.w	85bbe <_svfprintf_r+0x75a>
   859f8:	ea54 0305 	orrs.w	r3, r4, r5
   859fc:	f000 80df 	beq.w	85bbe <_svfprintf_r+0x75a>
   85a00:	2330      	movs	r3, #48	; 0x30
   85a02:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   85a06:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   85a0a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   85a0e:	f04b 0b02 	orr.w	fp, fp, #2
   85a12:	2302      	movs	r3, #2
   85a14:	e624      	b.n	85660 <_svfprintf_r+0x1fc>
   85a16:	2201      	movs	r2, #1
   85a18:	9311      	str	r3, [sp, #68]	; 0x44
   85a1a:	2300      	movs	r3, #0
   85a1c:	4611      	mov	r1, r2
   85a1e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   85a20:	9208      	str	r2, [sp, #32]
   85a22:	6802      	ldr	r2, [r0, #0]
   85a24:	461f      	mov	r7, r3
   85a26:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   85a2a:	930a      	str	r3, [sp, #40]	; 0x28
   85a2c:	9312      	str	r3, [sp, #72]	; 0x48
   85a2e:	1d03      	adds	r3, r0, #4
   85a30:	f8cd b01c 	str.w	fp, [sp, #28]
   85a34:	910e      	str	r1, [sp, #56]	; 0x38
   85a36:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   85a3a:	930f      	str	r3, [sp, #60]	; 0x3c
   85a3c:	ae28      	add	r6, sp, #160	; 0xa0
   85a3e:	e639      	b.n	856b4 <_svfprintf_r+0x250>
   85a40:	9311      	str	r3, [sp, #68]	; 0x44
   85a42:	2a00      	cmp	r2, #0
   85a44:	f040 8784 	bne.w	86950 <_svfprintf_r+0x14ec>
   85a48:	f04b 0b10 	orr.w	fp, fp, #16
   85a4c:	f01b 0f20 	tst.w	fp, #32
   85a50:	f040 8475 	bne.w	8633e <_svfprintf_r+0xeda>
   85a54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85a56:	f01b 0f10 	tst.w	fp, #16
   85a5a:	4613      	mov	r3, r2
   85a5c:	f040 839d 	bne.w	8619a <_svfprintf_r+0xd36>
   85a60:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85a64:	f000 8399 	beq.w	8619a <_svfprintf_r+0xd36>
   85a68:	f9b2 4000 	ldrsh.w	r4, [r2]
   85a6c:	3304      	adds	r3, #4
   85a6e:	17e5      	asrs	r5, r4, #31
   85a70:	930f      	str	r3, [sp, #60]	; 0x3c
   85a72:	4622      	mov	r2, r4
   85a74:	462b      	mov	r3, r5
   85a76:	2a00      	cmp	r2, #0
   85a78:	f173 0300 	sbcs.w	r3, r3, #0
   85a7c:	f2c0 8398 	blt.w	861b0 <_svfprintf_r+0xd4c>
   85a80:	990a      	ldr	r1, [sp, #40]	; 0x28
   85a82:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85a86:	1c4a      	adds	r2, r1, #1
   85a88:	f04f 0301 	mov.w	r3, #1
   85a8c:	f47f adf0 	bne.w	85670 <_svfprintf_r+0x20c>
   85a90:	ea54 0205 	orrs.w	r2, r4, r5
   85a94:	f000 8229 	beq.w	85eea <_svfprintf_r+0xa86>
   85a98:	f8cd b01c 	str.w	fp, [sp, #28]
   85a9c:	2b01      	cmp	r3, #1
   85a9e:	f000 830e 	beq.w	860be <_svfprintf_r+0xc5a>
   85aa2:	2b02      	cmp	r3, #2
   85aa4:	f040 829c 	bne.w	85fe0 <_svfprintf_r+0xb7c>
   85aa8:	464e      	mov	r6, r9
   85aaa:	9818      	ldr	r0, [sp, #96]	; 0x60
   85aac:	0923      	lsrs	r3, r4, #4
   85aae:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   85ab2:	0929      	lsrs	r1, r5, #4
   85ab4:	f004 020f 	and.w	r2, r4, #15
   85ab8:	460d      	mov	r5, r1
   85aba:	461c      	mov	r4, r3
   85abc:	5c83      	ldrb	r3, [r0, r2]
   85abe:	f806 3d01 	strb.w	r3, [r6, #-1]!
   85ac2:	ea54 0305 	orrs.w	r3, r4, r5
   85ac6:	d1f1      	bne.n	85aac <_svfprintf_r+0x648>
   85ac8:	eba9 0306 	sub.w	r3, r9, r6
   85acc:	930e      	str	r3, [sp, #56]	; 0x38
   85ace:	e5e5      	b.n	8569c <_svfprintf_r+0x238>
   85ad0:	9311      	str	r3, [sp, #68]	; 0x44
   85ad2:	2a00      	cmp	r2, #0
   85ad4:	f040 8738 	bne.w	86948 <_svfprintf_r+0x14e4>
   85ad8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85ada:	f01b 0f08 	tst.w	fp, #8
   85ade:	f104 0407 	add.w	r4, r4, #7
   85ae2:	f000 84cf 	beq.w	86484 <_svfprintf_r+0x1020>
   85ae6:	f024 0307 	bic.w	r3, r4, #7
   85aea:	f103 0208 	add.w	r2, r3, #8
   85aee:	920f      	str	r2, [sp, #60]	; 0x3c
   85af0:	681a      	ldr	r2, [r3, #0]
   85af2:	685b      	ldr	r3, [r3, #4]
   85af4:	9215      	str	r2, [sp, #84]	; 0x54
   85af6:	9314      	str	r3, [sp, #80]	; 0x50
   85af8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   85afa:	9d15      	ldr	r5, [sp, #84]	; 0x54
   85afc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   85b00:	4628      	mov	r0, r5
   85b02:	4621      	mov	r1, r4
   85b04:	f04f 32ff 	mov.w	r2, #4294967295
   85b08:	4b6f      	ldr	r3, [pc, #444]	; (85cc8 <_svfprintf_r+0x864>)
   85b0a:	f003 fe6f 	bl	897ec <__aeabi_dcmpun>
   85b0e:	2800      	cmp	r0, #0
   85b10:	f040 8434 	bne.w	8637c <_svfprintf_r+0xf18>
   85b14:	4628      	mov	r0, r5
   85b16:	4621      	mov	r1, r4
   85b18:	f04f 32ff 	mov.w	r2, #4294967295
   85b1c:	4b6a      	ldr	r3, [pc, #424]	; (85cc8 <_svfprintf_r+0x864>)
   85b1e:	f003 fe47 	bl	897b0 <__aeabi_dcmple>
   85b22:	2800      	cmp	r0, #0
   85b24:	f040 842a 	bne.w	8637c <_svfprintf_r+0xf18>
   85b28:	a815      	add	r0, sp, #84	; 0x54
   85b2a:	c80d      	ldmia	r0, {r0, r2, r3}
   85b2c:	9914      	ldr	r1, [sp, #80]	; 0x50
   85b2e:	f003 fe35 	bl	8979c <__aeabi_dcmplt>
   85b32:	2800      	cmp	r0, #0
   85b34:	f040 85d4 	bne.w	866e0 <_svfprintf_r+0x127c>
   85b38:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85b3c:	2303      	movs	r3, #3
   85b3e:	461a      	mov	r2, r3
   85b40:	9308      	str	r3, [sp, #32]
   85b42:	2300      	movs	r3, #0
   85b44:	4e61      	ldr	r6, [pc, #388]	; (85ccc <_svfprintf_r+0x868>)
   85b46:	4619      	mov	r1, r3
   85b48:	930a      	str	r3, [sp, #40]	; 0x28
   85b4a:	4b61      	ldr	r3, [pc, #388]	; (85cd0 <_svfprintf_r+0x86c>)
   85b4c:	920e      	str	r2, [sp, #56]	; 0x38
   85b4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   85b50:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   85b54:	9007      	str	r0, [sp, #28]
   85b56:	9112      	str	r1, [sp, #72]	; 0x48
   85b58:	2a47      	cmp	r2, #71	; 0x47
   85b5a:	bfd8      	it	le
   85b5c:	461e      	movle	r6, r3
   85b5e:	e5a5      	b.n	856ac <_svfprintf_r+0x248>
   85b60:	f04b 0b08 	orr.w	fp, fp, #8
   85b64:	f89a 3000 	ldrb.w	r3, [sl]
   85b68:	e4d6      	b.n	85518 <_svfprintf_r+0xb4>
   85b6a:	f04b 0b10 	orr.w	fp, fp, #16
   85b6e:	9311      	str	r3, [sp, #68]	; 0x44
   85b70:	f01b 0320 	ands.w	r3, fp, #32
   85b74:	f43f aebb 	beq.w	858ee <_svfprintf_r+0x48a>
   85b78:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85b7a:	3407      	adds	r4, #7
   85b7c:	f024 0307 	bic.w	r3, r4, #7
   85b80:	f103 0208 	add.w	r2, r3, #8
   85b84:	e9d3 4500 	ldrd	r4, r5, [r3]
   85b88:	920f      	str	r2, [sp, #60]	; 0x3c
   85b8a:	2300      	movs	r3, #0
   85b8c:	e568      	b.n	85660 <_svfprintf_r+0x1fc>
   85b8e:	9311      	str	r3, [sp, #68]	; 0x44
   85b90:	2a00      	cmp	r2, #0
   85b92:	f040 86c2 	bne.w	8691a <_svfprintf_r+0x14b6>
   85b96:	4b4f      	ldr	r3, [pc, #316]	; (85cd4 <_svfprintf_r+0x870>)
   85b98:	f01b 0f20 	tst.w	fp, #32
   85b9c:	9318      	str	r3, [sp, #96]	; 0x60
   85b9e:	f43f af19 	beq.w	859d4 <_svfprintf_r+0x570>
   85ba2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85ba4:	f01b 0f01 	tst.w	fp, #1
   85ba8:	f104 0407 	add.w	r4, r4, #7
   85bac:	f024 0307 	bic.w	r3, r4, #7
   85bb0:	f103 0208 	add.w	r2, r3, #8
   85bb4:	920f      	str	r2, [sp, #60]	; 0x3c
   85bb6:	e9d3 4500 	ldrd	r4, r5, [r3]
   85bba:	f47f af1d 	bne.w	859f8 <_svfprintf_r+0x594>
   85bbe:	2302      	movs	r3, #2
   85bc0:	e54e      	b.n	85660 <_svfprintf_r+0x1fc>
   85bc2:	f89a 3000 	ldrb.w	r3, [sl]
   85bc6:	2900      	cmp	r1, #0
   85bc8:	f47f aca6 	bne.w	85518 <_svfprintf_r+0xb4>
   85bcc:	2201      	movs	r2, #1
   85bce:	2120      	movs	r1, #32
   85bd0:	e4a2      	b.n	85518 <_svfprintf_r+0xb4>
   85bd2:	f04b 0b01 	orr.w	fp, fp, #1
   85bd6:	f89a 3000 	ldrb.w	r3, [sl]
   85bda:	e49d      	b.n	85518 <_svfprintf_r+0xb4>
   85bdc:	f89a 3000 	ldrb.w	r3, [sl]
   85be0:	2201      	movs	r2, #1
   85be2:	212b      	movs	r1, #43	; 0x2b
   85be4:	e498      	b.n	85518 <_svfprintf_r+0xb4>
   85be6:	f04b 0b20 	orr.w	fp, fp, #32
   85bea:	f89a 3000 	ldrb.w	r3, [sl]
   85bee:	e493      	b.n	85518 <_svfprintf_r+0xb4>
   85bf0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   85bf4:	f89a 3000 	ldrb.w	r3, [sl]
   85bf8:	e48e      	b.n	85518 <_svfprintf_r+0xb4>
   85bfa:	f89a 3000 	ldrb.w	r3, [sl]
   85bfe:	2b6c      	cmp	r3, #108	; 0x6c
   85c00:	bf03      	ittte	eq
   85c02:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   85c06:	f04b 0b20 	orreq.w	fp, fp, #32
   85c0a:	f10a 0a01 	addeq.w	sl, sl, #1
   85c0e:	f04b 0b10 	orrne.w	fp, fp, #16
   85c12:	e481      	b.n	85518 <_svfprintf_r+0xb4>
   85c14:	2a00      	cmp	r2, #0
   85c16:	f040 867c 	bne.w	86912 <_svfprintf_r+0x14ae>
   85c1a:	f01b 0f20 	tst.w	fp, #32
   85c1e:	f040 8452 	bne.w	864c6 <_svfprintf_r+0x1062>
   85c22:	f01b 0f10 	tst.w	fp, #16
   85c26:	f040 8438 	bne.w	8649a <_svfprintf_r+0x1036>
   85c2a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85c2e:	f000 8434 	beq.w	8649a <_svfprintf_r+0x1036>
   85c32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85c34:	6813      	ldr	r3, [r2, #0]
   85c36:	3204      	adds	r2, #4
   85c38:	920f      	str	r2, [sp, #60]	; 0x3c
   85c3a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   85c3e:	801a      	strh	r2, [r3, #0]
   85c40:	e437      	b.n	854b2 <_svfprintf_r+0x4e>
   85c42:	2378      	movs	r3, #120	; 0x78
   85c44:	2230      	movs	r2, #48	; 0x30
   85c46:	980f      	ldr	r0, [sp, #60]	; 0x3c
   85c48:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   85c4c:	9311      	str	r3, [sp, #68]	; 0x44
   85c4e:	1d03      	adds	r3, r0, #4
   85c50:	930f      	str	r3, [sp, #60]	; 0x3c
   85c52:	4b20      	ldr	r3, [pc, #128]	; (85cd4 <_svfprintf_r+0x870>)
   85c54:	6804      	ldr	r4, [r0, #0]
   85c56:	9318      	str	r3, [sp, #96]	; 0x60
   85c58:	f04b 0b02 	orr.w	fp, fp, #2
   85c5c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   85c60:	2500      	movs	r5, #0
   85c62:	2302      	movs	r3, #2
   85c64:	e4fc      	b.n	85660 <_svfprintf_r+0x1fc>
   85c66:	9311      	str	r3, [sp, #68]	; 0x44
   85c68:	2a00      	cmp	r2, #0
   85c6a:	f43f aeef 	beq.w	85a4c <_svfprintf_r+0x5e8>
   85c6e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   85c72:	e6eb      	b.n	85a4c <_svfprintf_r+0x5e8>
   85c74:	2000      	movs	r0, #0
   85c76:	4604      	mov	r4, r0
   85c78:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85c7c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   85c80:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   85c84:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   85c88:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   85c8c:	2809      	cmp	r0, #9
   85c8e:	d9f5      	bls.n	85c7c <_svfprintf_r+0x818>
   85c90:	940d      	str	r4, [sp, #52]	; 0x34
   85c92:	e443      	b.n	8551c <_svfprintf_r+0xb8>
   85c94:	9311      	str	r3, [sp, #68]	; 0x44
   85c96:	2a00      	cmp	r2, #0
   85c98:	f040 864a 	bne.w	86930 <_svfprintf_r+0x14cc>
   85c9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   85c9e:	2a00      	cmp	r2, #0
   85ca0:	f43f acb6 	beq.w	85610 <_svfprintf_r+0x1ac>
   85ca4:	2300      	movs	r3, #0
   85ca6:	2101      	movs	r1, #1
   85ca8:	461f      	mov	r7, r3
   85caa:	9108      	str	r1, [sp, #32]
   85cac:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   85cb0:	f8cd b01c 	str.w	fp, [sp, #28]
   85cb4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   85cb8:	930a      	str	r3, [sp, #40]	; 0x28
   85cba:	9312      	str	r3, [sp, #72]	; 0x48
   85cbc:	910e      	str	r1, [sp, #56]	; 0x38
   85cbe:	ae28      	add	r6, sp, #160	; 0xa0
   85cc0:	e4f8      	b.n	856b4 <_svfprintf_r+0x250>
   85cc2:	bf00      	nop
   85cc4:	0008b0dc 	.word	0x0008b0dc
   85cc8:	7fefffff 	.word	0x7fefffff
   85ccc:	0008b0d0 	.word	0x0008b0d0
   85cd0:	0008b0cc 	.word	0x0008b0cc
   85cd4:	0008b0f0 	.word	0x0008b0f0
   85cd8:	aa25      	add	r2, sp, #148	; 0x94
   85cda:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85cdc:	980c      	ldr	r0, [sp, #48]	; 0x30
   85cde:	f002 fcc7 	bl	88670 <__ssprint_r>
   85ce2:	2800      	cmp	r0, #0
   85ce4:	f47f ac9b 	bne.w	8561e <_svfprintf_r+0x1ba>
   85ce8:	46c8      	mov	r8, r9
   85cea:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85cee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85cf0:	e533      	b.n	8575a <_svfprintf_r+0x2f6>
   85cf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85cf4:	2b65      	cmp	r3, #101	; 0x65
   85cf6:	f340 809a 	ble.w	85e2e <_svfprintf_r+0x9ca>
   85cfa:	a815      	add	r0, sp, #84	; 0x54
   85cfc:	c80d      	ldmia	r0, {r0, r2, r3}
   85cfe:	9914      	ldr	r1, [sp, #80]	; 0x50
   85d00:	f003 fd42 	bl	89788 <__aeabi_dcmpeq>
   85d04:	2800      	cmp	r0, #0
   85d06:	f000 8193 	beq.w	86030 <_svfprintf_r+0xbcc>
   85d0a:	2101      	movs	r1, #1
   85d0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85d0e:	4ab5      	ldr	r2, [pc, #724]	; (85fe4 <_svfprintf_r+0xb80>)
   85d10:	440b      	add	r3, r1
   85d12:	440c      	add	r4, r1
   85d14:	2b07      	cmp	r3, #7
   85d16:	9427      	str	r4, [sp, #156]	; 0x9c
   85d18:	9326      	str	r3, [sp, #152]	; 0x98
   85d1a:	f8c8 1004 	str.w	r1, [r8, #4]
   85d1e:	f8c8 2000 	str.w	r2, [r8]
   85d22:	f300 83c6 	bgt.w	864b2 <_svfprintf_r+0x104e>
   85d26:	f108 0808 	add.w	r8, r8, #8
   85d2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   85d2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85d2e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85d30:	4293      	cmp	r3, r2
   85d32:	db03      	blt.n	85d3c <_svfprintf_r+0x8d8>
   85d34:	9b07      	ldr	r3, [sp, #28]
   85d36:	07dd      	lsls	r5, r3, #31
   85d38:	f57f ad86 	bpl.w	85848 <_svfprintf_r+0x3e4>
   85d3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85d3e:	9919      	ldr	r1, [sp, #100]	; 0x64
   85d40:	3301      	adds	r3, #1
   85d42:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   85d44:	440c      	add	r4, r1
   85d46:	2b07      	cmp	r3, #7
   85d48:	f8c8 2000 	str.w	r2, [r8]
   85d4c:	f8c8 1004 	str.w	r1, [r8, #4]
   85d50:	9427      	str	r4, [sp, #156]	; 0x9c
   85d52:	9326      	str	r3, [sp, #152]	; 0x98
   85d54:	f300 83c4 	bgt.w	864e0 <_svfprintf_r+0x107c>
   85d58:	f108 0808 	add.w	r8, r8, #8
   85d5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85d5e:	1e5e      	subs	r6, r3, #1
   85d60:	2e00      	cmp	r6, #0
   85d62:	f77f ad71 	ble.w	85848 <_svfprintf_r+0x3e4>
   85d66:	2e10      	cmp	r6, #16
   85d68:	f340 8575 	ble.w	86856 <_svfprintf_r+0x13f2>
   85d6c:	4622      	mov	r2, r4
   85d6e:	2710      	movs	r7, #16
   85d70:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85d72:	4d9d      	ldr	r5, [pc, #628]	; (85fe8 <_svfprintf_r+0xb84>)
   85d74:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   85d78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85d7a:	e005      	b.n	85d88 <_svfprintf_r+0x924>
   85d7c:	f108 0808 	add.w	r8, r8, #8
   85d80:	3e10      	subs	r6, #16
   85d82:	2e10      	cmp	r6, #16
   85d84:	f340 8225 	ble.w	861d2 <_svfprintf_r+0xd6e>
   85d88:	3301      	adds	r3, #1
   85d8a:	3210      	adds	r2, #16
   85d8c:	2b07      	cmp	r3, #7
   85d8e:	9227      	str	r2, [sp, #156]	; 0x9c
   85d90:	9326      	str	r3, [sp, #152]	; 0x98
   85d92:	e888 00a0 	stmia.w	r8, {r5, r7}
   85d96:	ddf1      	ble.n	85d7c <_svfprintf_r+0x918>
   85d98:	aa25      	add	r2, sp, #148	; 0x94
   85d9a:	4621      	mov	r1, r4
   85d9c:	4658      	mov	r0, fp
   85d9e:	f002 fc67 	bl	88670 <__ssprint_r>
   85da2:	2800      	cmp	r0, #0
   85da4:	f47f ac3b 	bne.w	8561e <_svfprintf_r+0x1ba>
   85da8:	46c8      	mov	r8, r9
   85daa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85dac:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85dae:	e7e7      	b.n	85d80 <_svfprintf_r+0x91c>
   85db0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85db2:	9a08      	ldr	r2, [sp, #32]
   85db4:	1a9f      	subs	r7, r3, r2
   85db6:	2f00      	cmp	r7, #0
   85db8:	f77f acf6 	ble.w	857a8 <_svfprintf_r+0x344>
   85dbc:	2f10      	cmp	r7, #16
   85dbe:	f340 84a8 	ble.w	86712 <_svfprintf_r+0x12ae>
   85dc2:	4d89      	ldr	r5, [pc, #548]	; (85fe8 <_svfprintf_r+0xb84>)
   85dc4:	4642      	mov	r2, r8
   85dc6:	4621      	mov	r1, r4
   85dc8:	46b0      	mov	r8, r6
   85dca:	f04f 0b10 	mov.w	fp, #16
   85dce:	462e      	mov	r6, r5
   85dd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85dd2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85dd4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85dd6:	e004      	b.n	85de2 <_svfprintf_r+0x97e>
   85dd8:	3f10      	subs	r7, #16
   85dda:	2f10      	cmp	r7, #16
   85ddc:	f102 0208 	add.w	r2, r2, #8
   85de0:	dd15      	ble.n	85e0e <_svfprintf_r+0x9aa>
   85de2:	3301      	adds	r3, #1
   85de4:	3110      	adds	r1, #16
   85de6:	2b07      	cmp	r3, #7
   85de8:	9127      	str	r1, [sp, #156]	; 0x9c
   85dea:	9326      	str	r3, [sp, #152]	; 0x98
   85dec:	e882 0840 	stmia.w	r2, {r6, fp}
   85df0:	ddf2      	ble.n	85dd8 <_svfprintf_r+0x974>
   85df2:	aa25      	add	r2, sp, #148	; 0x94
   85df4:	4629      	mov	r1, r5
   85df6:	4620      	mov	r0, r4
   85df8:	f002 fc3a 	bl	88670 <__ssprint_r>
   85dfc:	2800      	cmp	r0, #0
   85dfe:	f47f ac0e 	bne.w	8561e <_svfprintf_r+0x1ba>
   85e02:	3f10      	subs	r7, #16
   85e04:	2f10      	cmp	r7, #16
   85e06:	464a      	mov	r2, r9
   85e08:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85e0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85e0c:	dce9      	bgt.n	85de2 <_svfprintf_r+0x97e>
   85e0e:	4635      	mov	r5, r6
   85e10:	460c      	mov	r4, r1
   85e12:	4646      	mov	r6, r8
   85e14:	4690      	mov	r8, r2
   85e16:	3301      	adds	r3, #1
   85e18:	443c      	add	r4, r7
   85e1a:	2b07      	cmp	r3, #7
   85e1c:	9427      	str	r4, [sp, #156]	; 0x9c
   85e1e:	9326      	str	r3, [sp, #152]	; 0x98
   85e20:	e888 00a0 	stmia.w	r8, {r5, r7}
   85e24:	f300 829e 	bgt.w	86364 <_svfprintf_r+0xf00>
   85e28:	f108 0808 	add.w	r8, r8, #8
   85e2c:	e4bc      	b.n	857a8 <_svfprintf_r+0x344>
   85e2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85e30:	2b01      	cmp	r3, #1
   85e32:	f340 824f 	ble.w	862d4 <_svfprintf_r+0xe70>
   85e36:	2301      	movs	r3, #1
   85e38:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85e3a:	441c      	add	r4, r3
   85e3c:	441f      	add	r7, r3
   85e3e:	2f07      	cmp	r7, #7
   85e40:	9427      	str	r4, [sp, #156]	; 0x9c
   85e42:	f8c8 6000 	str.w	r6, [r8]
   85e46:	9726      	str	r7, [sp, #152]	; 0x98
   85e48:	f8c8 3004 	str.w	r3, [r8, #4]
   85e4c:	f300 825f 	bgt.w	8630e <_svfprintf_r+0xeaa>
   85e50:	f108 0808 	add.w	r8, r8, #8
   85e54:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85e56:	3701      	adds	r7, #1
   85e58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   85e5a:	4414      	add	r4, r2
   85e5c:	2f07      	cmp	r7, #7
   85e5e:	9427      	str	r4, [sp, #156]	; 0x9c
   85e60:	9726      	str	r7, [sp, #152]	; 0x98
   85e62:	f8c8 3000 	str.w	r3, [r8]
   85e66:	f8c8 2004 	str.w	r2, [r8, #4]
   85e6a:	f300 825c 	bgt.w	86326 <_svfprintf_r+0xec2>
   85e6e:	f108 0808 	add.w	r8, r8, #8
   85e72:	a815      	add	r0, sp, #84	; 0x54
   85e74:	c80d      	ldmia	r0, {r0, r2, r3}
   85e76:	9914      	ldr	r1, [sp, #80]	; 0x50
   85e78:	f003 fc86 	bl	89788 <__aeabi_dcmpeq>
   85e7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85e7e:	2800      	cmp	r0, #0
   85e80:	f040 8141 	bne.w	86106 <_svfprintf_r+0xca2>
   85e84:	3b01      	subs	r3, #1
   85e86:	3701      	adds	r7, #1
   85e88:	3601      	adds	r6, #1
   85e8a:	441c      	add	r4, r3
   85e8c:	2f07      	cmp	r7, #7
   85e8e:	f8c8 6000 	str.w	r6, [r8]
   85e92:	9726      	str	r7, [sp, #152]	; 0x98
   85e94:	9427      	str	r4, [sp, #156]	; 0x9c
   85e96:	f8c8 3004 	str.w	r3, [r8, #4]
   85e9a:	f300 8166 	bgt.w	8616a <_svfprintf_r+0xd06>
   85e9e:	f108 0808 	add.w	r8, r8, #8
   85ea2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   85ea4:	3701      	adds	r7, #1
   85ea6:	4414      	add	r4, r2
   85ea8:	ab21      	add	r3, sp, #132	; 0x84
   85eaa:	2f07      	cmp	r7, #7
   85eac:	9427      	str	r4, [sp, #156]	; 0x9c
   85eae:	9726      	str	r7, [sp, #152]	; 0x98
   85eb0:	f8c8 2004 	str.w	r2, [r8, #4]
   85eb4:	f8c8 3000 	str.w	r3, [r8]
   85eb8:	f77f acc4 	ble.w	85844 <_svfprintf_r+0x3e0>
   85ebc:	aa25      	add	r2, sp, #148	; 0x94
   85ebe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85ec0:	980c      	ldr	r0, [sp, #48]	; 0x30
   85ec2:	f002 fbd5 	bl	88670 <__ssprint_r>
   85ec6:	2800      	cmp	r0, #0
   85ec8:	f47f aba9 	bne.w	8561e <_svfprintf_r+0x1ba>
   85ecc:	46c8      	mov	r8, r9
   85ece:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85ed0:	e4ba      	b.n	85848 <_svfprintf_r+0x3e4>
   85ed2:	aa25      	add	r2, sp, #148	; 0x94
   85ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85ed6:	980c      	ldr	r0, [sp, #48]	; 0x30
   85ed8:	f002 fbca 	bl	88670 <__ssprint_r>
   85edc:	2800      	cmp	r0, #0
   85ede:	f43f acfd 	beq.w	858dc <_svfprintf_r+0x478>
   85ee2:	f7ff bb9c 	b.w	8561e <_svfprintf_r+0x1ba>
   85ee6:	f8dd b01c 	ldr.w	fp, [sp, #28]
   85eea:	2b01      	cmp	r3, #1
   85eec:	f000 817e 	beq.w	861ec <_svfprintf_r+0xd88>
   85ef0:	2b02      	cmp	r3, #2
   85ef2:	d171      	bne.n	85fd8 <_svfprintf_r+0xb74>
   85ef4:	f8cd b01c 	str.w	fp, [sp, #28]
   85ef8:	2400      	movs	r4, #0
   85efa:	2500      	movs	r5, #0
   85efc:	e5d4      	b.n	85aa8 <_svfprintf_r+0x644>
   85efe:	aa25      	add	r2, sp, #148	; 0x94
   85f00:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85f02:	980c      	ldr	r0, [sp, #48]	; 0x30
   85f04:	f002 fbb4 	bl	88670 <__ssprint_r>
   85f08:	2800      	cmp	r0, #0
   85f0a:	f47f ab88 	bne.w	8561e <_svfprintf_r+0x1ba>
   85f0e:	46c8      	mov	r8, r9
   85f10:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85f12:	e486      	b.n	85822 <_svfprintf_r+0x3be>
   85f14:	aa25      	add	r2, sp, #148	; 0x94
   85f16:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85f18:	980c      	ldr	r0, [sp, #48]	; 0x30
   85f1a:	f002 fba9 	bl	88670 <__ssprint_r>
   85f1e:	2800      	cmp	r0, #0
   85f20:	f47f ab7d 	bne.w	8561e <_svfprintf_r+0x1ba>
   85f24:	46c8      	mov	r8, r9
   85f26:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85f28:	e429      	b.n	8577e <_svfprintf_r+0x31a>
   85f2a:	2001      	movs	r0, #1
   85f2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85f2e:	4a2d      	ldr	r2, [pc, #180]	; (85fe4 <_svfprintf_r+0xb80>)
   85f30:	4403      	add	r3, r0
   85f32:	4404      	add	r4, r0
   85f34:	2b07      	cmp	r3, #7
   85f36:	9427      	str	r4, [sp, #156]	; 0x9c
   85f38:	9326      	str	r3, [sp, #152]	; 0x98
   85f3a:	f8c8 0004 	str.w	r0, [r8, #4]
   85f3e:	f8c8 2000 	str.w	r2, [r8]
   85f42:	f340 82d8 	ble.w	864f6 <_svfprintf_r+0x1092>
   85f46:	aa25      	add	r2, sp, #148	; 0x94
   85f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85f4a:	980c      	ldr	r0, [sp, #48]	; 0x30
   85f4c:	f002 fb90 	bl	88670 <__ssprint_r>
   85f50:	2800      	cmp	r0, #0
   85f52:	f47f ab64 	bne.w	8561e <_svfprintf_r+0x1ba>
   85f56:	46c8      	mov	r8, r9
   85f58:	991f      	ldr	r1, [sp, #124]	; 0x7c
   85f5a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85f5c:	b929      	cbnz	r1, 85f6a <_svfprintf_r+0xb06>
   85f5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85f60:	b91b      	cbnz	r3, 85f6a <_svfprintf_r+0xb06>
   85f62:	9b07      	ldr	r3, [sp, #28]
   85f64:	07d8      	lsls	r0, r3, #31
   85f66:	f57f ac6f 	bpl.w	85848 <_svfprintf_r+0x3e4>
   85f6a:	9819      	ldr	r0, [sp, #100]	; 0x64
   85f6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85f6e:	4602      	mov	r2, r0
   85f70:	3301      	adds	r3, #1
   85f72:	4422      	add	r2, r4
   85f74:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   85f76:	2b07      	cmp	r3, #7
   85f78:	9227      	str	r2, [sp, #156]	; 0x9c
   85f7a:	f8c8 4000 	str.w	r4, [r8]
   85f7e:	f8c8 0004 	str.w	r0, [r8, #4]
   85f82:	9326      	str	r3, [sp, #152]	; 0x98
   85f84:	f300 8431 	bgt.w	867ea <_svfprintf_r+0x1386>
   85f88:	f108 0808 	add.w	r8, r8, #8
   85f8c:	2900      	cmp	r1, #0
   85f8e:	f2c0 8409 	blt.w	867a4 <_svfprintf_r+0x1340>
   85f92:	9913      	ldr	r1, [sp, #76]	; 0x4c
   85f94:	3301      	adds	r3, #1
   85f96:	188c      	adds	r4, r1, r2
   85f98:	2b07      	cmp	r3, #7
   85f9a:	9427      	str	r4, [sp, #156]	; 0x9c
   85f9c:	9326      	str	r3, [sp, #152]	; 0x98
   85f9e:	f8c8 6000 	str.w	r6, [r8]
   85fa2:	f8c8 1004 	str.w	r1, [r8, #4]
   85fa6:	f77f ac4d 	ble.w	85844 <_svfprintf_r+0x3e0>
   85faa:	aa25      	add	r2, sp, #148	; 0x94
   85fac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85fae:	980c      	ldr	r0, [sp, #48]	; 0x30
   85fb0:	f002 fb5e 	bl	88670 <__ssprint_r>
   85fb4:	2800      	cmp	r0, #0
   85fb6:	f47f ab32 	bne.w	8561e <_svfprintf_r+0x1ba>
   85fba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85fbc:	46c8      	mov	r8, r9
   85fbe:	e443      	b.n	85848 <_svfprintf_r+0x3e4>
   85fc0:	aa25      	add	r2, sp, #148	; 0x94
   85fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85fc4:	980c      	ldr	r0, [sp, #48]	; 0x30
   85fc6:	f002 fb53 	bl	88670 <__ssprint_r>
   85fca:	2800      	cmp	r0, #0
   85fcc:	f47f ab27 	bne.w	8561e <_svfprintf_r+0x1ba>
   85fd0:	46c8      	mov	r8, r9
   85fd2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85fd4:	f7ff bbe5 	b.w	857a2 <_svfprintf_r+0x33e>
   85fd8:	2400      	movs	r4, #0
   85fda:	2500      	movs	r5, #0
   85fdc:	f8cd b01c 	str.w	fp, [sp, #28]
   85fe0:	4649      	mov	r1, r9
   85fe2:	e004      	b.n	85fee <_svfprintf_r+0xb8a>
   85fe4:	0008b10c 	.word	0x0008b10c
   85fe8:	0008b120 	.word	0x0008b120
   85fec:	4631      	mov	r1, r6
   85fee:	08e2      	lsrs	r2, r4, #3
   85ff0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   85ff4:	08e8      	lsrs	r0, r5, #3
   85ff6:	f004 0307 	and.w	r3, r4, #7
   85ffa:	4605      	mov	r5, r0
   85ffc:	4614      	mov	r4, r2
   85ffe:	3330      	adds	r3, #48	; 0x30
   86000:	ea54 0205 	orrs.w	r2, r4, r5
   86004:	f801 3c01 	strb.w	r3, [r1, #-1]
   86008:	f101 36ff 	add.w	r6, r1, #4294967295
   8600c:	d1ee      	bne.n	85fec <_svfprintf_r+0xb88>
   8600e:	9a07      	ldr	r2, [sp, #28]
   86010:	07d2      	lsls	r2, r2, #31
   86012:	f57f ad59 	bpl.w	85ac8 <_svfprintf_r+0x664>
   86016:	2b30      	cmp	r3, #48	; 0x30
   86018:	f43f ad56 	beq.w	85ac8 <_svfprintf_r+0x664>
   8601c:	2330      	movs	r3, #48	; 0x30
   8601e:	3902      	subs	r1, #2
   86020:	f806 3c01 	strb.w	r3, [r6, #-1]
   86024:	eba9 0301 	sub.w	r3, r9, r1
   86028:	930e      	str	r3, [sp, #56]	; 0x38
   8602a:	460e      	mov	r6, r1
   8602c:	f7ff bb36 	b.w	8569c <_svfprintf_r+0x238>
   86030:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86032:	2900      	cmp	r1, #0
   86034:	f77f af79 	ble.w	85f2a <_svfprintf_r+0xac6>
   86038:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8603a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8603c:	4293      	cmp	r3, r2
   8603e:	bfa8      	it	ge
   86040:	4613      	movge	r3, r2
   86042:	2b00      	cmp	r3, #0
   86044:	461f      	mov	r7, r3
   86046:	dd0b      	ble.n	86060 <_svfprintf_r+0xbfc>
   86048:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8604a:	443c      	add	r4, r7
   8604c:	3301      	adds	r3, #1
   8604e:	2b07      	cmp	r3, #7
   86050:	9427      	str	r4, [sp, #156]	; 0x9c
   86052:	e888 00c0 	stmia.w	r8, {r6, r7}
   86056:	9326      	str	r3, [sp, #152]	; 0x98
   86058:	f300 82fb 	bgt.w	86652 <_svfprintf_r+0x11ee>
   8605c:	f108 0808 	add.w	r8, r8, #8
   86060:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86062:	2f00      	cmp	r7, #0
   86064:	bfa8      	it	ge
   86066:	1bdb      	subge	r3, r3, r7
   86068:	2b00      	cmp	r3, #0
   8606a:	461f      	mov	r7, r3
   8606c:	f340 80d7 	ble.w	8621e <_svfprintf_r+0xdba>
   86070:	2b10      	cmp	r3, #16
   86072:	f340 8434 	ble.w	868de <_svfprintf_r+0x147a>
   86076:	4dba      	ldr	r5, [pc, #744]	; (86360 <_svfprintf_r+0xefc>)
   86078:	4642      	mov	r2, r8
   8607a:	4621      	mov	r1, r4
   8607c:	46b0      	mov	r8, r6
   8607e:	f04f 0b10 	mov.w	fp, #16
   86082:	462e      	mov	r6, r5
   86084:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86086:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86088:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8608a:	e004      	b.n	86096 <_svfprintf_r+0xc32>
   8608c:	3208      	adds	r2, #8
   8608e:	3f10      	subs	r7, #16
   86090:	2f10      	cmp	r7, #16
   86092:	f340 80b5 	ble.w	86200 <_svfprintf_r+0xd9c>
   86096:	3301      	adds	r3, #1
   86098:	3110      	adds	r1, #16
   8609a:	2b07      	cmp	r3, #7
   8609c:	9127      	str	r1, [sp, #156]	; 0x9c
   8609e:	9326      	str	r3, [sp, #152]	; 0x98
   860a0:	e882 0840 	stmia.w	r2, {r6, fp}
   860a4:	ddf2      	ble.n	8608c <_svfprintf_r+0xc28>
   860a6:	aa25      	add	r2, sp, #148	; 0x94
   860a8:	4629      	mov	r1, r5
   860aa:	4620      	mov	r0, r4
   860ac:	f002 fae0 	bl	88670 <__ssprint_r>
   860b0:	2800      	cmp	r0, #0
   860b2:	f47f aab4 	bne.w	8561e <_svfprintf_r+0x1ba>
   860b6:	464a      	mov	r2, r9
   860b8:	9927      	ldr	r1, [sp, #156]	; 0x9c
   860ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
   860bc:	e7e7      	b.n	8608e <_svfprintf_r+0xc2a>
   860be:	2d00      	cmp	r5, #0
   860c0:	bf08      	it	eq
   860c2:	2c0a      	cmpeq	r4, #10
   860c4:	f0c0 8090 	bcc.w	861e8 <_svfprintf_r+0xd84>
   860c8:	464e      	mov	r6, r9
   860ca:	4620      	mov	r0, r4
   860cc:	4629      	mov	r1, r5
   860ce:	220a      	movs	r2, #10
   860d0:	2300      	movs	r3, #0
   860d2:	f003 fbc9 	bl	89868 <__aeabi_uldivmod>
   860d6:	3230      	adds	r2, #48	; 0x30
   860d8:	f806 2d01 	strb.w	r2, [r6, #-1]!
   860dc:	4620      	mov	r0, r4
   860de:	4629      	mov	r1, r5
   860e0:	2300      	movs	r3, #0
   860e2:	220a      	movs	r2, #10
   860e4:	f003 fbc0 	bl	89868 <__aeabi_uldivmod>
   860e8:	4604      	mov	r4, r0
   860ea:	460d      	mov	r5, r1
   860ec:	ea54 0305 	orrs.w	r3, r4, r5
   860f0:	d1eb      	bne.n	860ca <_svfprintf_r+0xc66>
   860f2:	eba9 0306 	sub.w	r3, r9, r6
   860f6:	930e      	str	r3, [sp, #56]	; 0x38
   860f8:	f7ff bad0 	b.w	8569c <_svfprintf_r+0x238>
   860fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   860fe:	464e      	mov	r6, r9
   86100:	930e      	str	r3, [sp, #56]	; 0x38
   86102:	f7ff bacb 	b.w	8569c <_svfprintf_r+0x238>
   86106:	1e5e      	subs	r6, r3, #1
   86108:	2e00      	cmp	r6, #0
   8610a:	f77f aeca 	ble.w	85ea2 <_svfprintf_r+0xa3e>
   8610e:	2e10      	cmp	r6, #16
   86110:	f340 83e3 	ble.w	868da <_svfprintf_r+0x1476>
   86114:	4622      	mov	r2, r4
   86116:	f04f 0b10 	mov.w	fp, #16
   8611a:	4d91      	ldr	r5, [pc, #580]	; (86360 <_svfprintf_r+0xefc>)
   8611c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8611e:	e004      	b.n	8612a <_svfprintf_r+0xcc6>
   86120:	3e10      	subs	r6, #16
   86122:	2e10      	cmp	r6, #16
   86124:	f108 0808 	add.w	r8, r8, #8
   86128:	dd15      	ble.n	86156 <_svfprintf_r+0xcf2>
   8612a:	3701      	adds	r7, #1
   8612c:	3210      	adds	r2, #16
   8612e:	2f07      	cmp	r7, #7
   86130:	9227      	str	r2, [sp, #156]	; 0x9c
   86132:	9726      	str	r7, [sp, #152]	; 0x98
   86134:	e888 0820 	stmia.w	r8, {r5, fp}
   86138:	ddf2      	ble.n	86120 <_svfprintf_r+0xcbc>
   8613a:	aa25      	add	r2, sp, #148	; 0x94
   8613c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8613e:	4620      	mov	r0, r4
   86140:	f002 fa96 	bl	88670 <__ssprint_r>
   86144:	2800      	cmp	r0, #0
   86146:	f47f aa6a 	bne.w	8561e <_svfprintf_r+0x1ba>
   8614a:	3e10      	subs	r6, #16
   8614c:	2e10      	cmp	r6, #16
   8614e:	46c8      	mov	r8, r9
   86150:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86152:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86154:	dce9      	bgt.n	8612a <_svfprintf_r+0xcc6>
   86156:	4614      	mov	r4, r2
   86158:	3701      	adds	r7, #1
   8615a:	4434      	add	r4, r6
   8615c:	2f07      	cmp	r7, #7
   8615e:	9427      	str	r4, [sp, #156]	; 0x9c
   86160:	9726      	str	r7, [sp, #152]	; 0x98
   86162:	e888 0060 	stmia.w	r8, {r5, r6}
   86166:	f77f ae9a 	ble.w	85e9e <_svfprintf_r+0xa3a>
   8616a:	aa25      	add	r2, sp, #148	; 0x94
   8616c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8616e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86170:	f002 fa7e 	bl	88670 <__ssprint_r>
   86174:	2800      	cmp	r0, #0
   86176:	f47f aa52 	bne.w	8561e <_svfprintf_r+0x1ba>
   8617a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8617c:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8617e:	46c8      	mov	r8, r9
   86180:	e68f      	b.n	85ea2 <_svfprintf_r+0xa3e>
   86182:	3204      	adds	r2, #4
   86184:	681c      	ldr	r4, [r3, #0]
   86186:	2500      	movs	r5, #0
   86188:	2301      	movs	r3, #1
   8618a:	920f      	str	r2, [sp, #60]	; 0x3c
   8618c:	f7ff ba68 	b.w	85660 <_svfprintf_r+0x1fc>
   86190:	681c      	ldr	r4, [r3, #0]
   86192:	3304      	adds	r3, #4
   86194:	930f      	str	r3, [sp, #60]	; 0x3c
   86196:	2500      	movs	r5, #0
   86198:	e42a      	b.n	859f0 <_svfprintf_r+0x58c>
   8619a:	681c      	ldr	r4, [r3, #0]
   8619c:	3304      	adds	r3, #4
   8619e:	17e5      	asrs	r5, r4, #31
   861a0:	4622      	mov	r2, r4
   861a2:	930f      	str	r3, [sp, #60]	; 0x3c
   861a4:	462b      	mov	r3, r5
   861a6:	2a00      	cmp	r2, #0
   861a8:	f173 0300 	sbcs.w	r3, r3, #0
   861ac:	f6bf ac68 	bge.w	85a80 <_svfprintf_r+0x61c>
   861b0:	272d      	movs	r7, #45	; 0x2d
   861b2:	4264      	negs	r4, r4
   861b4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   861b8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   861bc:	2301      	movs	r3, #1
   861be:	f7ff ba53 	b.w	85668 <_svfprintf_r+0x204>
   861c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   861c4:	2500      	movs	r5, #0
   861c6:	460a      	mov	r2, r1
   861c8:	3204      	adds	r2, #4
   861ca:	680c      	ldr	r4, [r1, #0]
   861cc:	920f      	str	r2, [sp, #60]	; 0x3c
   861ce:	f7ff ba47 	b.w	85660 <_svfprintf_r+0x1fc>
   861d2:	4614      	mov	r4, r2
   861d4:	3301      	adds	r3, #1
   861d6:	4434      	add	r4, r6
   861d8:	2b07      	cmp	r3, #7
   861da:	9427      	str	r4, [sp, #156]	; 0x9c
   861dc:	9326      	str	r3, [sp, #152]	; 0x98
   861de:	e888 0060 	stmia.w	r8, {r5, r6}
   861e2:	f77f ab2f 	ble.w	85844 <_svfprintf_r+0x3e0>
   861e6:	e6e0      	b.n	85faa <_svfprintf_r+0xb46>
   861e8:	f8dd b01c 	ldr.w	fp, [sp, #28]
   861ec:	2301      	movs	r3, #1
   861ee:	ae42      	add	r6, sp, #264	; 0x108
   861f0:	3430      	adds	r4, #48	; 0x30
   861f2:	f8cd b01c 	str.w	fp, [sp, #28]
   861f6:	f806 4d41 	strb.w	r4, [r6, #-65]!
   861fa:	930e      	str	r3, [sp, #56]	; 0x38
   861fc:	f7ff ba4e 	b.w	8569c <_svfprintf_r+0x238>
   86200:	4635      	mov	r5, r6
   86202:	460c      	mov	r4, r1
   86204:	4646      	mov	r6, r8
   86206:	4690      	mov	r8, r2
   86208:	3301      	adds	r3, #1
   8620a:	443c      	add	r4, r7
   8620c:	2b07      	cmp	r3, #7
   8620e:	9427      	str	r4, [sp, #156]	; 0x9c
   86210:	9326      	str	r3, [sp, #152]	; 0x98
   86212:	e888 00a0 	stmia.w	r8, {r5, r7}
   86216:	f300 8246 	bgt.w	866a6 <_svfprintf_r+0x1242>
   8621a:	f108 0808 	add.w	r8, r8, #8
   8621e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86220:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86222:	429a      	cmp	r2, r3
   86224:	db45      	blt.n	862b2 <_svfprintf_r+0xe4e>
   86226:	9b07      	ldr	r3, [sp, #28]
   86228:	07d9      	lsls	r1, r3, #31
   8622a:	d442      	bmi.n	862b2 <_svfprintf_r+0xe4e>
   8622c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8622e:	9812      	ldr	r0, [sp, #72]	; 0x48
   86230:	1a9a      	subs	r2, r3, r2
   86232:	1a1d      	subs	r5, r3, r0
   86234:	4295      	cmp	r5, r2
   86236:	bfa8      	it	ge
   86238:	4615      	movge	r5, r2
   8623a:	2d00      	cmp	r5, #0
   8623c:	dd0e      	ble.n	8625c <_svfprintf_r+0xdf8>
   8623e:	9926      	ldr	r1, [sp, #152]	; 0x98
   86240:	4406      	add	r6, r0
   86242:	3101      	adds	r1, #1
   86244:	442c      	add	r4, r5
   86246:	2907      	cmp	r1, #7
   86248:	f8c8 6000 	str.w	r6, [r8]
   8624c:	9427      	str	r4, [sp, #156]	; 0x9c
   8624e:	f8c8 5004 	str.w	r5, [r8, #4]
   86252:	9126      	str	r1, [sp, #152]	; 0x98
   86254:	f300 8216 	bgt.w	86684 <_svfprintf_r+0x1220>
   86258:	f108 0808 	add.w	r8, r8, #8
   8625c:	2d00      	cmp	r5, #0
   8625e:	bfb4      	ite	lt
   86260:	4616      	movlt	r6, r2
   86262:	1b56      	subge	r6, r2, r5
   86264:	2e00      	cmp	r6, #0
   86266:	f77f aaef 	ble.w	85848 <_svfprintf_r+0x3e4>
   8626a:	2e10      	cmp	r6, #16
   8626c:	f340 82f3 	ble.w	86856 <_svfprintf_r+0x13f2>
   86270:	4622      	mov	r2, r4
   86272:	2710      	movs	r7, #16
   86274:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86276:	4d3a      	ldr	r5, [pc, #232]	; (86360 <_svfprintf_r+0xefc>)
   86278:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8627c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8627e:	e004      	b.n	8628a <_svfprintf_r+0xe26>
   86280:	f108 0808 	add.w	r8, r8, #8
   86284:	3e10      	subs	r6, #16
   86286:	2e10      	cmp	r6, #16
   86288:	dda3      	ble.n	861d2 <_svfprintf_r+0xd6e>
   8628a:	3301      	adds	r3, #1
   8628c:	3210      	adds	r2, #16
   8628e:	2b07      	cmp	r3, #7
   86290:	9227      	str	r2, [sp, #156]	; 0x9c
   86292:	9326      	str	r3, [sp, #152]	; 0x98
   86294:	e888 00a0 	stmia.w	r8, {r5, r7}
   86298:	ddf2      	ble.n	86280 <_svfprintf_r+0xe1c>
   8629a:	aa25      	add	r2, sp, #148	; 0x94
   8629c:	4621      	mov	r1, r4
   8629e:	4658      	mov	r0, fp
   862a0:	f002 f9e6 	bl	88670 <__ssprint_r>
   862a4:	2800      	cmp	r0, #0
   862a6:	f47f a9ba 	bne.w	8561e <_svfprintf_r+0x1ba>
   862aa:	46c8      	mov	r8, r9
   862ac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   862ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   862b0:	e7e8      	b.n	86284 <_svfprintf_r+0xe20>
   862b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   862b4:	9819      	ldr	r0, [sp, #100]	; 0x64
   862b6:	3301      	adds	r3, #1
   862b8:	991a      	ldr	r1, [sp, #104]	; 0x68
   862ba:	4404      	add	r4, r0
   862bc:	2b07      	cmp	r3, #7
   862be:	9427      	str	r4, [sp, #156]	; 0x9c
   862c0:	f8c8 1000 	str.w	r1, [r8]
   862c4:	f8c8 0004 	str.w	r0, [r8, #4]
   862c8:	9326      	str	r3, [sp, #152]	; 0x98
   862ca:	f300 81cf 	bgt.w	8666c <_svfprintf_r+0x1208>
   862ce:	f108 0808 	add.w	r8, r8, #8
   862d2:	e7ab      	b.n	8622c <_svfprintf_r+0xdc8>
   862d4:	9b07      	ldr	r3, [sp, #28]
   862d6:	07da      	lsls	r2, r3, #31
   862d8:	f53f adad 	bmi.w	85e36 <_svfprintf_r+0x9d2>
   862dc:	2301      	movs	r3, #1
   862de:	9f26      	ldr	r7, [sp, #152]	; 0x98
   862e0:	441c      	add	r4, r3
   862e2:	441f      	add	r7, r3
   862e4:	2f07      	cmp	r7, #7
   862e6:	9427      	str	r4, [sp, #156]	; 0x9c
   862e8:	f8c8 6000 	str.w	r6, [r8]
   862ec:	9726      	str	r7, [sp, #152]	; 0x98
   862ee:	f8c8 3004 	str.w	r3, [r8, #4]
   862f2:	f77f add4 	ble.w	85e9e <_svfprintf_r+0xa3a>
   862f6:	aa25      	add	r2, sp, #148	; 0x94
   862f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   862fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   862fc:	f002 f9b8 	bl	88670 <__ssprint_r>
   86300:	2800      	cmp	r0, #0
   86302:	f47f a98c 	bne.w	8561e <_svfprintf_r+0x1ba>
   86306:	46c8      	mov	r8, r9
   86308:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8630a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8630c:	e5c9      	b.n	85ea2 <_svfprintf_r+0xa3e>
   8630e:	aa25      	add	r2, sp, #148	; 0x94
   86310:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86312:	980c      	ldr	r0, [sp, #48]	; 0x30
   86314:	f002 f9ac 	bl	88670 <__ssprint_r>
   86318:	2800      	cmp	r0, #0
   8631a:	f47f a980 	bne.w	8561e <_svfprintf_r+0x1ba>
   8631e:	46c8      	mov	r8, r9
   86320:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86322:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86324:	e596      	b.n	85e54 <_svfprintf_r+0x9f0>
   86326:	aa25      	add	r2, sp, #148	; 0x94
   86328:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8632a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8632c:	f002 f9a0 	bl	88670 <__ssprint_r>
   86330:	2800      	cmp	r0, #0
   86332:	f47f a974 	bne.w	8561e <_svfprintf_r+0x1ba>
   86336:	46c8      	mov	r8, r9
   86338:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8633a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8633c:	e599      	b.n	85e72 <_svfprintf_r+0xa0e>
   8633e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86340:	3407      	adds	r4, #7
   86342:	f024 0407 	bic.w	r4, r4, #7
   86346:	f104 0108 	add.w	r1, r4, #8
   8634a:	e9d4 2300 	ldrd	r2, r3, [r4]
   8634e:	910f      	str	r1, [sp, #60]	; 0x3c
   86350:	4614      	mov	r4, r2
   86352:	461d      	mov	r5, r3
   86354:	f7ff bb8f 	b.w	85a76 <_svfprintf_r+0x612>
   86358:	464e      	mov	r6, r9
   8635a:	f7ff b99f 	b.w	8569c <_svfprintf_r+0x238>
   8635e:	bf00      	nop
   86360:	0008b120 	.word	0x0008b120
   86364:	aa25      	add	r2, sp, #148	; 0x94
   86366:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86368:	980c      	ldr	r0, [sp, #48]	; 0x30
   8636a:	f002 f981 	bl	88670 <__ssprint_r>
   8636e:	2800      	cmp	r0, #0
   86370:	f47f a955 	bne.w	8561e <_svfprintf_r+0x1ba>
   86374:	46c8      	mov	r8, r9
   86376:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86378:	f7ff ba16 	b.w	857a8 <_svfprintf_r+0x344>
   8637c:	9c15      	ldr	r4, [sp, #84]	; 0x54
   8637e:	4622      	mov	r2, r4
   86380:	4620      	mov	r0, r4
   86382:	9c14      	ldr	r4, [sp, #80]	; 0x50
   86384:	4623      	mov	r3, r4
   86386:	4621      	mov	r1, r4
   86388:	f003 fa30 	bl	897ec <__aeabi_dcmpun>
   8638c:	2800      	cmp	r0, #0
   8638e:	f040 8273 	bne.w	86878 <_svfprintf_r+0x1414>
   86392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86394:	3301      	adds	r3, #1
   86396:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86398:	f023 0320 	bic.w	r3, r3, #32
   8639c:	930e      	str	r3, [sp, #56]	; 0x38
   8639e:	f000 819c 	beq.w	866da <_svfprintf_r+0x1276>
   863a2:	2b47      	cmp	r3, #71	; 0x47
   863a4:	f000 80d6 	beq.w	86554 <_svfprintf_r+0x10f0>
   863a8:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   863ac:	9307      	str	r3, [sp, #28]
   863ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
   863b0:	1e1f      	subs	r7, r3, #0
   863b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   863b4:	9308      	str	r3, [sp, #32]
   863b6:	bfb7      	itett	lt
   863b8:	463b      	movlt	r3, r7
   863ba:	2300      	movge	r3, #0
   863bc:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   863c0:	232d      	movlt	r3, #45	; 0x2d
   863c2:	9310      	str	r3, [sp, #64]	; 0x40
   863c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   863c6:	2b66      	cmp	r3, #102	; 0x66
   863c8:	f000 8190 	beq.w	866ec <_svfprintf_r+0x1288>
   863cc:	2b46      	cmp	r3, #70	; 0x46
   863ce:	f000 80a4 	beq.w	8651a <_svfprintf_r+0x10b6>
   863d2:	2002      	movs	r0, #2
   863d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   863d6:	a923      	add	r1, sp, #140	; 0x8c
   863d8:	2b45      	cmp	r3, #69	; 0x45
   863da:	bf0a      	itet	eq
   863dc:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   863de:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   863e0:	1c5d      	addeq	r5, r3, #1
   863e2:	e88d 0021 	stmia.w	sp, {r0, r5}
   863e6:	9104      	str	r1, [sp, #16]
   863e8:	a820      	add	r0, sp, #128	; 0x80
   863ea:	a91f      	add	r1, sp, #124	; 0x7c
   863ec:	463b      	mov	r3, r7
   863ee:	9003      	str	r0, [sp, #12]
   863f0:	9a08      	ldr	r2, [sp, #32]
   863f2:	9102      	str	r1, [sp, #8]
   863f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   863f6:	f000 fb5b 	bl	86ab0 <_dtoa_r>
   863fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   863fc:	4606      	mov	r6, r0
   863fe:	2b67      	cmp	r3, #103	; 0x67
   86400:	f040 81ba 	bne.w	86778 <_svfprintf_r+0x1314>
   86404:	f01b 0f01 	tst.w	fp, #1
   86408:	f000 8223 	beq.w	86852 <_svfprintf_r+0x13ee>
   8640c:	1974      	adds	r4, r6, r5
   8640e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86410:	9808      	ldr	r0, [sp, #32]
   86412:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86414:	4639      	mov	r1, r7
   86416:	f003 f9b7 	bl	89788 <__aeabi_dcmpeq>
   8641a:	2800      	cmp	r0, #0
   8641c:	f040 8124 	bne.w	86668 <_svfprintf_r+0x1204>
   86420:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86422:	42a3      	cmp	r3, r4
   86424:	d206      	bcs.n	86434 <_svfprintf_r+0xfd0>
   86426:	2130      	movs	r1, #48	; 0x30
   86428:	1c5a      	adds	r2, r3, #1
   8642a:	9223      	str	r2, [sp, #140]	; 0x8c
   8642c:	7019      	strb	r1, [r3, #0]
   8642e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86430:	429c      	cmp	r4, r3
   86432:	d8f9      	bhi.n	86428 <_svfprintf_r+0xfc4>
   86434:	1b9b      	subs	r3, r3, r6
   86436:	9313      	str	r3, [sp, #76]	; 0x4c
   86438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8643a:	2b47      	cmp	r3, #71	; 0x47
   8643c:	f000 80a2 	beq.w	86584 <_svfprintf_r+0x1120>
   86440:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86442:	2b65      	cmp	r3, #101	; 0x65
   86444:	f340 81a7 	ble.w	86796 <_svfprintf_r+0x1332>
   86448:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8644a:	2b66      	cmp	r3, #102	; 0x66
   8644c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8644e:	9312      	str	r3, [sp, #72]	; 0x48
   86450:	f000 8171 	beq.w	86736 <_svfprintf_r+0x12d2>
   86454:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86456:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86458:	4619      	mov	r1, r3
   8645a:	4291      	cmp	r1, r2
   8645c:	f300 815d 	bgt.w	8671a <_svfprintf_r+0x12b6>
   86460:	f01b 0f01 	tst.w	fp, #1
   86464:	f040 81f0 	bne.w	86848 <_svfprintf_r+0x13e4>
   86468:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8646c:	9308      	str	r3, [sp, #32]
   8646e:	2367      	movs	r3, #103	; 0x67
   86470:	920e      	str	r2, [sp, #56]	; 0x38
   86472:	9311      	str	r3, [sp, #68]	; 0x44
   86474:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86476:	2b00      	cmp	r3, #0
   86478:	d17d      	bne.n	86576 <_svfprintf_r+0x1112>
   8647a:	930a      	str	r3, [sp, #40]	; 0x28
   8647c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86480:	f7ff b914 	b.w	856ac <_svfprintf_r+0x248>
   86484:	f024 0407 	bic.w	r4, r4, #7
   86488:	6823      	ldr	r3, [r4, #0]
   8648a:	9315      	str	r3, [sp, #84]	; 0x54
   8648c:	6863      	ldr	r3, [r4, #4]
   8648e:	9314      	str	r3, [sp, #80]	; 0x50
   86490:	f104 0308 	add.w	r3, r4, #8
   86494:	930f      	str	r3, [sp, #60]	; 0x3c
   86496:	f7ff bb2f 	b.w	85af8 <_svfprintf_r+0x694>
   8649a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8649c:	6813      	ldr	r3, [r2, #0]
   8649e:	3204      	adds	r2, #4
   864a0:	920f      	str	r2, [sp, #60]	; 0x3c
   864a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   864a4:	601a      	str	r2, [r3, #0]
   864a6:	f7ff b804 	b.w	854b2 <_svfprintf_r+0x4e>
   864aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   864ac:	4daf      	ldr	r5, [pc, #700]	; (8676c <_svfprintf_r+0x1308>)
   864ae:	f7ff b9ad 	b.w	8580c <_svfprintf_r+0x3a8>
   864b2:	aa25      	add	r2, sp, #148	; 0x94
   864b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   864b6:	980c      	ldr	r0, [sp, #48]	; 0x30
   864b8:	f002 f8da 	bl	88670 <__ssprint_r>
   864bc:	2800      	cmp	r0, #0
   864be:	f47f a8ae 	bne.w	8561e <_svfprintf_r+0x1ba>
   864c2:	46c8      	mov	r8, r9
   864c4:	e431      	b.n	85d2a <_svfprintf_r+0x8c6>
   864c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   864c8:	4613      	mov	r3, r2
   864ca:	3304      	adds	r3, #4
   864cc:	930f      	str	r3, [sp, #60]	; 0x3c
   864ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   864d0:	6811      	ldr	r1, [r2, #0]
   864d2:	17dd      	asrs	r5, r3, #31
   864d4:	461a      	mov	r2, r3
   864d6:	462b      	mov	r3, r5
   864d8:	e9c1 2300 	strd	r2, r3, [r1]
   864dc:	f7fe bfe9 	b.w	854b2 <_svfprintf_r+0x4e>
   864e0:	aa25      	add	r2, sp, #148	; 0x94
   864e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   864e4:	980c      	ldr	r0, [sp, #48]	; 0x30
   864e6:	f002 f8c3 	bl	88670 <__ssprint_r>
   864ea:	2800      	cmp	r0, #0
   864ec:	f47f a897 	bne.w	8561e <_svfprintf_r+0x1ba>
   864f0:	46c8      	mov	r8, r9
   864f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   864f4:	e432      	b.n	85d5c <_svfprintf_r+0x8f8>
   864f6:	f108 0808 	add.w	r8, r8, #8
   864fa:	e52f      	b.n	85f5c <_svfprintf_r+0xaf8>
   864fc:	2140      	movs	r1, #64	; 0x40
   864fe:	980c      	ldr	r0, [sp, #48]	; 0x30
   86500:	f001 fa28 	bl	87954 <_malloc_r>
   86504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86506:	6010      	str	r0, [r2, #0]
   86508:	6110      	str	r0, [r2, #16]
   8650a:	2800      	cmp	r0, #0
   8650c:	f000 8214 	beq.w	86938 <_svfprintf_r+0x14d4>
   86510:	2340      	movs	r3, #64	; 0x40
   86512:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86514:	6153      	str	r3, [r2, #20]
   86516:	f7fe bfbc 	b.w	85492 <_svfprintf_r+0x2e>
   8651a:	2003      	movs	r0, #3
   8651c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8651e:	a923      	add	r1, sp, #140	; 0x8c
   86520:	e88d 0011 	stmia.w	sp, {r0, r4}
   86524:	9104      	str	r1, [sp, #16]
   86526:	a820      	add	r0, sp, #128	; 0x80
   86528:	a91f      	add	r1, sp, #124	; 0x7c
   8652a:	9003      	str	r0, [sp, #12]
   8652c:	9a08      	ldr	r2, [sp, #32]
   8652e:	463b      	mov	r3, r7
   86530:	9102      	str	r1, [sp, #8]
   86532:	980c      	ldr	r0, [sp, #48]	; 0x30
   86534:	f000 fabc 	bl	86ab0 <_dtoa_r>
   86538:	4625      	mov	r5, r4
   8653a:	4606      	mov	r6, r0
   8653c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8653e:	1974      	adds	r4, r6, r5
   86540:	2b46      	cmp	r3, #70	; 0x46
   86542:	f47f af64 	bne.w	8640e <_svfprintf_r+0xfaa>
   86546:	7833      	ldrb	r3, [r6, #0]
   86548:	2b30      	cmp	r3, #48	; 0x30
   8654a:	f000 8187 	beq.w	8685c <_svfprintf_r+0x13f8>
   8654e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   86550:	442c      	add	r4, r5
   86552:	e75c      	b.n	8640e <_svfprintf_r+0xfaa>
   86554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86556:	2b00      	cmp	r3, #0
   86558:	bf08      	it	eq
   8655a:	2301      	moveq	r3, #1
   8655c:	930a      	str	r3, [sp, #40]	; 0x28
   8655e:	e723      	b.n	863a8 <_svfprintf_r+0xf44>
   86560:	4630      	mov	r0, r6
   86562:	950a      	str	r5, [sp, #40]	; 0x28
   86564:	f7fe fe6c 	bl	85240 <strlen>
   86568:	940f      	str	r4, [sp, #60]	; 0x3c
   8656a:	900e      	str	r0, [sp, #56]	; 0x38
   8656c:	f8cd b01c 	str.w	fp, [sp, #28]
   86570:	4603      	mov	r3, r0
   86572:	f7ff b9e7 	b.w	85944 <_svfprintf_r+0x4e0>
   86576:	272d      	movs	r7, #45	; 0x2d
   86578:	2300      	movs	r3, #0
   8657a:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   8657e:	930a      	str	r3, [sp, #40]	; 0x28
   86580:	f7ff b895 	b.w	856ae <_svfprintf_r+0x24a>
   86584:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86586:	461a      	mov	r2, r3
   86588:	9312      	str	r3, [sp, #72]	; 0x48
   8658a:	3303      	adds	r3, #3
   8658c:	db04      	blt.n	86598 <_svfprintf_r+0x1134>
   8658e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86590:	4619      	mov	r1, r3
   86592:	4291      	cmp	r1, r2
   86594:	f6bf af5e 	bge.w	86454 <_svfprintf_r+0xff0>
   86598:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8659a:	3b02      	subs	r3, #2
   8659c:	9311      	str	r3, [sp, #68]	; 0x44
   8659e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   865a0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   865a4:	3b01      	subs	r3, #1
   865a6:	2b00      	cmp	r3, #0
   865a8:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   865ac:	bfb4      	ite	lt
   865ae:	222d      	movlt	r2, #45	; 0x2d
   865b0:	222b      	movge	r2, #43	; 0x2b
   865b2:	931f      	str	r3, [sp, #124]	; 0x7c
   865b4:	bfb8      	it	lt
   865b6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   865b8:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   865bc:	bfb8      	it	lt
   865be:	f1c3 0301 	rsblt	r3, r3, #1
   865c2:	2b09      	cmp	r3, #9
   865c4:	f340 811f 	ble.w	86806 <_svfprintf_r+0x13a2>
   865c8:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   865cc:	4601      	mov	r1, r0
   865ce:	4c68      	ldr	r4, [pc, #416]	; (86770 <_svfprintf_r+0x130c>)
   865d0:	e000      	b.n	865d4 <_svfprintf_r+0x1170>
   865d2:	4611      	mov	r1, r2
   865d4:	fb84 5203 	smull	r5, r2, r4, r3
   865d8:	17dd      	asrs	r5, r3, #31
   865da:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   865de:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   865e2:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   865e6:	3230      	adds	r2, #48	; 0x30
   865e8:	2d09      	cmp	r5, #9
   865ea:	f801 2c01 	strb.w	r2, [r1, #-1]
   865ee:	462b      	mov	r3, r5
   865f0:	f101 32ff 	add.w	r2, r1, #4294967295
   865f4:	dced      	bgt.n	865d2 <_svfprintf_r+0x116e>
   865f6:	3330      	adds	r3, #48	; 0x30
   865f8:	3902      	subs	r1, #2
   865fa:	b2dc      	uxtb	r4, r3
   865fc:	4288      	cmp	r0, r1
   865fe:	f802 4c01 	strb.w	r4, [r2, #-1]
   86602:	f240 8192 	bls.w	8692a <_svfprintf_r+0x14c6>
   86606:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   8660a:	4613      	mov	r3, r2
   8660c:	e001      	b.n	86612 <_svfprintf_r+0x11ae>
   8660e:	f813 4b01 	ldrb.w	r4, [r3], #1
   86612:	4283      	cmp	r3, r0
   86614:	f801 4b01 	strb.w	r4, [r1], #1
   86618:	d1f9      	bne.n	8660e <_svfprintf_r+0x11aa>
   8661a:	3301      	adds	r3, #1
   8661c:	1a9b      	subs	r3, r3, r2
   8661e:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   86622:	4413      	add	r3, r2
   86624:	aa21      	add	r2, sp, #132	; 0x84
   86626:	1a9b      	subs	r3, r3, r2
   86628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8662a:	931b      	str	r3, [sp, #108]	; 0x6c
   8662c:	2a01      	cmp	r2, #1
   8662e:	4413      	add	r3, r2
   86630:	930e      	str	r3, [sp, #56]	; 0x38
   86632:	f340 8148 	ble.w	868c6 <_svfprintf_r+0x1462>
   86636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86638:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8663a:	4413      	add	r3, r2
   8663c:	930e      	str	r3, [sp, #56]	; 0x38
   8663e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86642:	9308      	str	r3, [sp, #32]
   86644:	2300      	movs	r3, #0
   86646:	9312      	str	r3, [sp, #72]	; 0x48
   86648:	e714      	b.n	86474 <_svfprintf_r+0x1010>
   8664a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8664c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8664e:	f7ff b876 	b.w	8573e <_svfprintf_r+0x2da>
   86652:	aa25      	add	r2, sp, #148	; 0x94
   86654:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86656:	980c      	ldr	r0, [sp, #48]	; 0x30
   86658:	f002 f80a 	bl	88670 <__ssprint_r>
   8665c:	2800      	cmp	r0, #0
   8665e:	f47e afde 	bne.w	8561e <_svfprintf_r+0x1ba>
   86662:	46c8      	mov	r8, r9
   86664:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86666:	e4fb      	b.n	86060 <_svfprintf_r+0xbfc>
   86668:	4623      	mov	r3, r4
   8666a:	e6e3      	b.n	86434 <_svfprintf_r+0xfd0>
   8666c:	aa25      	add	r2, sp, #148	; 0x94
   8666e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86670:	980c      	ldr	r0, [sp, #48]	; 0x30
   86672:	f001 fffd 	bl	88670 <__ssprint_r>
   86676:	2800      	cmp	r0, #0
   86678:	f47e afd1 	bne.w	8561e <_svfprintf_r+0x1ba>
   8667c:	46c8      	mov	r8, r9
   8667e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86680:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86682:	e5d3      	b.n	8622c <_svfprintf_r+0xdc8>
   86684:	aa25      	add	r2, sp, #148	; 0x94
   86686:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86688:	980c      	ldr	r0, [sp, #48]	; 0x30
   8668a:	f001 fff1 	bl	88670 <__ssprint_r>
   8668e:	2800      	cmp	r0, #0
   86690:	f47e afc5 	bne.w	8561e <_svfprintf_r+0x1ba>
   86694:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86696:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86698:	46c8      	mov	r8, r9
   8669a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8669c:	1a9a      	subs	r2, r3, r2
   8669e:	e5dd      	b.n	8625c <_svfprintf_r+0xdf8>
   866a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   866a2:	f7ff b8fe 	b.w	858a2 <_svfprintf_r+0x43e>
   866a6:	aa25      	add	r2, sp, #148	; 0x94
   866a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   866aa:	980c      	ldr	r0, [sp, #48]	; 0x30
   866ac:	f001 ffe0 	bl	88670 <__ssprint_r>
   866b0:	2800      	cmp	r0, #0
   866b2:	f47e afb4 	bne.w	8561e <_svfprintf_r+0x1ba>
   866b6:	46c8      	mov	r8, r9
   866b8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   866ba:	e5b0      	b.n	8621e <_svfprintf_r+0xdba>
   866bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   866be:	4637      	mov	r7, r6
   866c0:	2b06      	cmp	r3, #6
   866c2:	bf28      	it	cs
   866c4:	2306      	movcs	r3, #6
   866c6:	960a      	str	r6, [sp, #40]	; 0x28
   866c8:	9612      	str	r6, [sp, #72]	; 0x48
   866ca:	9308      	str	r3, [sp, #32]
   866cc:	940f      	str	r4, [sp, #60]	; 0x3c
   866ce:	f8cd b01c 	str.w	fp, [sp, #28]
   866d2:	930e      	str	r3, [sp, #56]	; 0x38
   866d4:	4e27      	ldr	r6, [pc, #156]	; (86774 <_svfprintf_r+0x1310>)
   866d6:	f7fe bfe9 	b.w	856ac <_svfprintf_r+0x248>
   866da:	2306      	movs	r3, #6
   866dc:	930a      	str	r3, [sp, #40]	; 0x28
   866de:	e663      	b.n	863a8 <_svfprintf_r+0xf44>
   866e0:	232d      	movs	r3, #45	; 0x2d
   866e2:	461f      	mov	r7, r3
   866e4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   866e8:	f7ff ba28 	b.w	85b3c <_svfprintf_r+0x6d8>
   866ec:	2003      	movs	r0, #3
   866ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   866f0:	a923      	add	r1, sp, #140	; 0x8c
   866f2:	e88d 0011 	stmia.w	sp, {r0, r4}
   866f6:	9104      	str	r1, [sp, #16]
   866f8:	a820      	add	r0, sp, #128	; 0x80
   866fa:	a91f      	add	r1, sp, #124	; 0x7c
   866fc:	9003      	str	r0, [sp, #12]
   866fe:	9a08      	ldr	r2, [sp, #32]
   86700:	463b      	mov	r3, r7
   86702:	9102      	str	r1, [sp, #8]
   86704:	980c      	ldr	r0, [sp, #48]	; 0x30
   86706:	f000 f9d3 	bl	86ab0 <_dtoa_r>
   8670a:	4625      	mov	r5, r4
   8670c:	4606      	mov	r6, r0
   8670e:	1904      	adds	r4, r0, r4
   86710:	e719      	b.n	86546 <_svfprintf_r+0x10e2>
   86712:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86714:	4d15      	ldr	r5, [pc, #84]	; (8676c <_svfprintf_r+0x1308>)
   86716:	f7ff bb7e 	b.w	85e16 <_svfprintf_r+0x9b2>
   8671a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8671c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8671e:	4413      	add	r3, r2
   86720:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86722:	930e      	str	r3, [sp, #56]	; 0x38
   86724:	2a00      	cmp	r2, #0
   86726:	f340 80c7 	ble.w	868b8 <_svfprintf_r+0x1454>
   8672a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8672e:	9308      	str	r3, [sp, #32]
   86730:	2367      	movs	r3, #103	; 0x67
   86732:	9311      	str	r3, [sp, #68]	; 0x44
   86734:	e69e      	b.n	86474 <_svfprintf_r+0x1010>
   86736:	2b00      	cmp	r3, #0
   86738:	f340 80e1 	ble.w	868fe <_svfprintf_r+0x149a>
   8673c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8673e:	2a00      	cmp	r2, #0
   86740:	f040 80b0 	bne.w	868a4 <_svfprintf_r+0x1440>
   86744:	f01b 0f01 	tst.w	fp, #1
   86748:	f040 80ac 	bne.w	868a4 <_svfprintf_r+0x1440>
   8674c:	9308      	str	r3, [sp, #32]
   8674e:	930e      	str	r3, [sp, #56]	; 0x38
   86750:	e690      	b.n	86474 <_svfprintf_r+0x1010>
   86752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86754:	940f      	str	r4, [sp, #60]	; 0x3c
   86756:	9308      	str	r3, [sp, #32]
   86758:	930e      	str	r3, [sp, #56]	; 0x38
   8675a:	900a      	str	r0, [sp, #40]	; 0x28
   8675c:	f8cd b01c 	str.w	fp, [sp, #28]
   86760:	9012      	str	r0, [sp, #72]	; 0x48
   86762:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86766:	f7fe bfa1 	b.w	856ac <_svfprintf_r+0x248>
   8676a:	bf00      	nop
   8676c:	0008b120 	.word	0x0008b120
   86770:	66666667 	.word	0x66666667
   86774:	0008b104 	.word	0x0008b104
   86778:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8677a:	2b47      	cmp	r3, #71	; 0x47
   8677c:	f47f ae46 	bne.w	8640c <_svfprintf_r+0xfa8>
   86780:	f01b 0f01 	tst.w	fp, #1
   86784:	f47f aeda 	bne.w	8653c <_svfprintf_r+0x10d8>
   86788:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8678a:	1b9b      	subs	r3, r3, r6
   8678c:	9313      	str	r3, [sp, #76]	; 0x4c
   8678e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86790:	2b47      	cmp	r3, #71	; 0x47
   86792:	f43f aef7 	beq.w	86584 <_svfprintf_r+0x1120>
   86796:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86798:	9312      	str	r3, [sp, #72]	; 0x48
   8679a:	e700      	b.n	8659e <_svfprintf_r+0x113a>
   8679c:	2000      	movs	r0, #0
   8679e:	900a      	str	r0, [sp, #40]	; 0x28
   867a0:	f7fe bebc 	b.w	8551c <_svfprintf_r+0xb8>
   867a4:	424f      	negs	r7, r1
   867a6:	3110      	adds	r1, #16
   867a8:	da35      	bge.n	86816 <_svfprintf_r+0x13b2>
   867aa:	2410      	movs	r4, #16
   867ac:	4d6a      	ldr	r5, [pc, #424]	; (86958 <_svfprintf_r+0x14f4>)
   867ae:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   867b2:	e004      	b.n	867be <_svfprintf_r+0x135a>
   867b4:	f108 0808 	add.w	r8, r8, #8
   867b8:	3f10      	subs	r7, #16
   867ba:	2f10      	cmp	r7, #16
   867bc:	dd2c      	ble.n	86818 <_svfprintf_r+0x13b4>
   867be:	3301      	adds	r3, #1
   867c0:	3210      	adds	r2, #16
   867c2:	2b07      	cmp	r3, #7
   867c4:	9227      	str	r2, [sp, #156]	; 0x9c
   867c6:	9326      	str	r3, [sp, #152]	; 0x98
   867c8:	f8c8 5000 	str.w	r5, [r8]
   867cc:	f8c8 4004 	str.w	r4, [r8, #4]
   867d0:	ddf0      	ble.n	867b4 <_svfprintf_r+0x1350>
   867d2:	aa25      	add	r2, sp, #148	; 0x94
   867d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   867d6:	4658      	mov	r0, fp
   867d8:	f001 ff4a 	bl	88670 <__ssprint_r>
   867dc:	2800      	cmp	r0, #0
   867de:	f47e af1e 	bne.w	8561e <_svfprintf_r+0x1ba>
   867e2:	46c8      	mov	r8, r9
   867e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   867e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   867e8:	e7e6      	b.n	867b8 <_svfprintf_r+0x1354>
   867ea:	aa25      	add	r2, sp, #148	; 0x94
   867ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   867ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   867f0:	f001 ff3e 	bl	88670 <__ssprint_r>
   867f4:	2800      	cmp	r0, #0
   867f6:	f47e af12 	bne.w	8561e <_svfprintf_r+0x1ba>
   867fa:	46c8      	mov	r8, r9
   867fc:	991f      	ldr	r1, [sp, #124]	; 0x7c
   867fe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86800:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86802:	f7ff bbc3 	b.w	85f8c <_svfprintf_r+0xb28>
   86806:	2230      	movs	r2, #48	; 0x30
   86808:	4413      	add	r3, r2
   8680a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   8680e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   86812:	ab22      	add	r3, sp, #136	; 0x88
   86814:	e706      	b.n	86624 <_svfprintf_r+0x11c0>
   86816:	4d50      	ldr	r5, [pc, #320]	; (86958 <_svfprintf_r+0x14f4>)
   86818:	3301      	adds	r3, #1
   8681a:	443a      	add	r2, r7
   8681c:	2b07      	cmp	r3, #7
   8681e:	e888 00a0 	stmia.w	r8, {r5, r7}
   86822:	9227      	str	r2, [sp, #156]	; 0x9c
   86824:	9326      	str	r3, [sp, #152]	; 0x98
   86826:	f108 0808 	add.w	r8, r8, #8
   8682a:	f77f abb2 	ble.w	85f92 <_svfprintf_r+0xb2e>
   8682e:	aa25      	add	r2, sp, #148	; 0x94
   86830:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86832:	980c      	ldr	r0, [sp, #48]	; 0x30
   86834:	f001 ff1c 	bl	88670 <__ssprint_r>
   86838:	2800      	cmp	r0, #0
   8683a:	f47e aef0 	bne.w	8561e <_svfprintf_r+0x1ba>
   8683e:	46c8      	mov	r8, r9
   86840:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86842:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86844:	f7ff bba5 	b.w	85f92 <_svfprintf_r+0xb2e>
   86848:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8684a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8684c:	4413      	add	r3, r2
   8684e:	930e      	str	r3, [sp, #56]	; 0x38
   86850:	e76b      	b.n	8672a <_svfprintf_r+0x12c6>
   86852:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86854:	e5ee      	b.n	86434 <_svfprintf_r+0xfd0>
   86856:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86858:	4d3f      	ldr	r5, [pc, #252]	; (86958 <_svfprintf_r+0x14f4>)
   8685a:	e4bb      	b.n	861d4 <_svfprintf_r+0xd70>
   8685c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8685e:	9808      	ldr	r0, [sp, #32]
   86860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86862:	4639      	mov	r1, r7
   86864:	f002 ff90 	bl	89788 <__aeabi_dcmpeq>
   86868:	2800      	cmp	r0, #0
   8686a:	f47f ae70 	bne.w	8654e <_svfprintf_r+0x10ea>
   8686e:	f1c5 0501 	rsb	r5, r5, #1
   86872:	951f      	str	r5, [sp, #124]	; 0x7c
   86874:	442c      	add	r4, r5
   86876:	e5ca      	b.n	8640e <_svfprintf_r+0xfaa>
   86878:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8687a:	4e38      	ldr	r6, [pc, #224]	; (8695c <_svfprintf_r+0x14f8>)
   8687c:	2b00      	cmp	r3, #0
   8687e:	bfbe      	ittt	lt
   86880:	232d      	movlt	r3, #45	; 0x2d
   86882:	461f      	movlt	r7, r3
   86884:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   86888:	f04f 0303 	mov.w	r3, #3
   8688c:	461a      	mov	r2, r3
   8688e:	9308      	str	r3, [sp, #32]
   86890:	f04f 0300 	mov.w	r3, #0
   86894:	bfa8      	it	ge
   86896:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   8689a:	4619      	mov	r1, r3
   8689c:	930a      	str	r3, [sp, #40]	; 0x28
   8689e:	4b30      	ldr	r3, [pc, #192]	; (86960 <_svfprintf_r+0x14fc>)
   868a0:	f7ff b954 	b.w	85b4c <_svfprintf_r+0x6e8>
   868a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   868a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   868a8:	4413      	add	r3, r2
   868aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   868ac:	441a      	add	r2, r3
   868ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   868b2:	920e      	str	r2, [sp, #56]	; 0x38
   868b4:	9308      	str	r3, [sp, #32]
   868b6:	e5dd      	b.n	86474 <_svfprintf_r+0x1010>
   868b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   868ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   868bc:	f1c3 0301 	rsb	r3, r3, #1
   868c0:	441a      	add	r2, r3
   868c2:	4613      	mov	r3, r2
   868c4:	e7c3      	b.n	8684e <_svfprintf_r+0x13ea>
   868c6:	f01b 0301 	ands.w	r3, fp, #1
   868ca:	9312      	str	r3, [sp, #72]	; 0x48
   868cc:	f47f aeb3 	bne.w	86636 <_svfprintf_r+0x11d2>
   868d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   868d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   868d6:	9308      	str	r3, [sp, #32]
   868d8:	e5cc      	b.n	86474 <_svfprintf_r+0x1010>
   868da:	4d1f      	ldr	r5, [pc, #124]	; (86958 <_svfprintf_r+0x14f4>)
   868dc:	e43c      	b.n	86158 <_svfprintf_r+0xcf4>
   868de:	9b26      	ldr	r3, [sp, #152]	; 0x98
   868e0:	4d1d      	ldr	r5, [pc, #116]	; (86958 <_svfprintf_r+0x14f4>)
   868e2:	e491      	b.n	86208 <_svfprintf_r+0xda4>
   868e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   868e6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   868ea:	6828      	ldr	r0, [r5, #0]
   868ec:	46a2      	mov	sl, r4
   868ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   868f2:	900a      	str	r0, [sp, #40]	; 0x28
   868f4:	4628      	mov	r0, r5
   868f6:	3004      	adds	r0, #4
   868f8:	900f      	str	r0, [sp, #60]	; 0x3c
   868fa:	f7fe be0d 	b.w	85518 <_svfprintf_r+0xb4>
   868fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86900:	b913      	cbnz	r3, 86908 <_svfprintf_r+0x14a4>
   86902:	f01b 0f01 	tst.w	fp, #1
   86906:	d002      	beq.n	8690e <_svfprintf_r+0x14aa>
   86908:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8690a:	3301      	adds	r3, #1
   8690c:	e7cd      	b.n	868aa <_svfprintf_r+0x1446>
   8690e:	2301      	movs	r3, #1
   86910:	e71c      	b.n	8674c <_svfprintf_r+0x12e8>
   86912:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86916:	f7ff b980 	b.w	85c1a <_svfprintf_r+0x7b6>
   8691a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8691e:	f7ff b93a 	b.w	85b96 <_svfprintf_r+0x732>
   86922:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86926:	f7ff b84f 	b.w	859c8 <_svfprintf_r+0x564>
   8692a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   8692e:	e679      	b.n	86624 <_svfprintf_r+0x11c0>
   86930:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86934:	f7ff b9b2 	b.w	85c9c <_svfprintf_r+0x838>
   86938:	f04f 32ff 	mov.w	r2, #4294967295
   8693c:	230c      	movs	r3, #12
   8693e:	9209      	str	r2, [sp, #36]	; 0x24
   86940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86942:	6013      	str	r3, [r2, #0]
   86944:	f7fe be74 	b.w	85630 <_svfprintf_r+0x1cc>
   86948:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8694c:	f7ff b8c4 	b.w	85ad8 <_svfprintf_r+0x674>
   86950:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86954:	f7ff b878 	b.w	85a48 <_svfprintf_r+0x5e4>
   86958:	0008b120 	.word	0x0008b120
   8695c:	0008b0d8 	.word	0x0008b0d8
   86960:	0008b0d4 	.word	0x0008b0d4

00086964 <register_fini>:
   86964:	4b02      	ldr	r3, [pc, #8]	; (86970 <register_fini+0xc>)
   86966:	b113      	cbz	r3, 8696e <register_fini+0xa>
   86968:	4802      	ldr	r0, [pc, #8]	; (86974 <register_fini+0x10>)
   8696a:	f000 b805 	b.w	86978 <atexit>
   8696e:	4770      	bx	lr
   86970:	00000000 	.word	0x00000000
   86974:	000878f5 	.word	0x000878f5

00086978 <atexit>:
   86978:	2300      	movs	r3, #0
   8697a:	4601      	mov	r1, r0
   8697c:	461a      	mov	r2, r3
   8697e:	4618      	mov	r0, r3
   86980:	f001 bf00 	b.w	88784 <__register_exitproc>

00086984 <quorem>:
   86984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86988:	6903      	ldr	r3, [r0, #16]
   8698a:	690f      	ldr	r7, [r1, #16]
   8698c:	b083      	sub	sp, #12
   8698e:	429f      	cmp	r7, r3
   86990:	f300 8088 	bgt.w	86aa4 <quorem+0x120>
   86994:	3f01      	subs	r7, #1
   86996:	f101 0614 	add.w	r6, r1, #20
   8699a:	f100 0a14 	add.w	sl, r0, #20
   8699e:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   869a2:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   869a6:	3301      	adds	r3, #1
   869a8:	fbb2 f8f3 	udiv	r8, r2, r3
   869ac:	00bb      	lsls	r3, r7, #2
   869ae:	9300      	str	r3, [sp, #0]
   869b0:	eb06 0903 	add.w	r9, r6, r3
   869b4:	4453      	add	r3, sl
   869b6:	9301      	str	r3, [sp, #4]
   869b8:	f1b8 0f00 	cmp.w	r8, #0
   869bc:	d03b      	beq.n	86a36 <quorem+0xb2>
   869be:	2300      	movs	r3, #0
   869c0:	46b4      	mov	ip, r6
   869c2:	461c      	mov	r4, r3
   869c4:	46d6      	mov	lr, sl
   869c6:	f85c 2b04 	ldr.w	r2, [ip], #4
   869ca:	f8de 5000 	ldr.w	r5, [lr]
   869ce:	fa1f fb82 	uxth.w	fp, r2
   869d2:	fb08 330b 	mla	r3, r8, fp, r3
   869d6:	0c12      	lsrs	r2, r2, #16
   869d8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   869dc:	fb08 bb02 	mla	fp, r8, r2, fp
   869e0:	b29a      	uxth	r2, r3
   869e2:	1aa2      	subs	r2, r4, r2
   869e4:	b2ab      	uxth	r3, r5
   869e6:	fa1f f48b 	uxth.w	r4, fp
   869ea:	441a      	add	r2, r3
   869ec:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   869f0:	eb04 4422 	add.w	r4, r4, r2, asr #16
   869f4:	b292      	uxth	r2, r2
   869f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   869fa:	45e1      	cmp	r9, ip
   869fc:	f84e 2b04 	str.w	r2, [lr], #4
   86a00:	ea4f 4424 	mov.w	r4, r4, asr #16
   86a04:	ea4f 431b 	mov.w	r3, fp, lsr #16
   86a08:	d2dd      	bcs.n	869c6 <quorem+0x42>
   86a0a:	9b00      	ldr	r3, [sp, #0]
   86a0c:	f85a 3003 	ldr.w	r3, [sl, r3]
   86a10:	b98b      	cbnz	r3, 86a36 <quorem+0xb2>
   86a12:	9c01      	ldr	r4, [sp, #4]
   86a14:	1f23      	subs	r3, r4, #4
   86a16:	459a      	cmp	sl, r3
   86a18:	d20c      	bcs.n	86a34 <quorem+0xb0>
   86a1a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86a1e:	b94b      	cbnz	r3, 86a34 <quorem+0xb0>
   86a20:	f1a4 0308 	sub.w	r3, r4, #8
   86a24:	e002      	b.n	86a2c <quorem+0xa8>
   86a26:	681a      	ldr	r2, [r3, #0]
   86a28:	3b04      	subs	r3, #4
   86a2a:	b91a      	cbnz	r2, 86a34 <quorem+0xb0>
   86a2c:	459a      	cmp	sl, r3
   86a2e:	f107 37ff 	add.w	r7, r7, #4294967295
   86a32:	d3f8      	bcc.n	86a26 <quorem+0xa2>
   86a34:	6107      	str	r7, [r0, #16]
   86a36:	4604      	mov	r4, r0
   86a38:	f001 fd0a 	bl	88450 <__mcmp>
   86a3c:	2800      	cmp	r0, #0
   86a3e:	db2d      	blt.n	86a9c <quorem+0x118>
   86a40:	4655      	mov	r5, sl
   86a42:	2300      	movs	r3, #0
   86a44:	f108 0801 	add.w	r8, r8, #1
   86a48:	f856 1b04 	ldr.w	r1, [r6], #4
   86a4c:	6828      	ldr	r0, [r5, #0]
   86a4e:	b28a      	uxth	r2, r1
   86a50:	1a9a      	subs	r2, r3, r2
   86a52:	0c0b      	lsrs	r3, r1, #16
   86a54:	b281      	uxth	r1, r0
   86a56:	440a      	add	r2, r1
   86a58:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   86a5c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   86a60:	b292      	uxth	r2, r2
   86a62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   86a66:	45b1      	cmp	r9, r6
   86a68:	f845 2b04 	str.w	r2, [r5], #4
   86a6c:	ea4f 4323 	mov.w	r3, r3, asr #16
   86a70:	d2ea      	bcs.n	86a48 <quorem+0xc4>
   86a72:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   86a76:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   86a7a:	b97a      	cbnz	r2, 86a9c <quorem+0x118>
   86a7c:	1f1a      	subs	r2, r3, #4
   86a7e:	4592      	cmp	sl, r2
   86a80:	d20b      	bcs.n	86a9a <quorem+0x116>
   86a82:	f853 2c04 	ldr.w	r2, [r3, #-4]
   86a86:	b942      	cbnz	r2, 86a9a <quorem+0x116>
   86a88:	3b08      	subs	r3, #8
   86a8a:	e002      	b.n	86a92 <quorem+0x10e>
   86a8c:	681a      	ldr	r2, [r3, #0]
   86a8e:	3b04      	subs	r3, #4
   86a90:	b91a      	cbnz	r2, 86a9a <quorem+0x116>
   86a92:	459a      	cmp	sl, r3
   86a94:	f107 37ff 	add.w	r7, r7, #4294967295
   86a98:	d3f8      	bcc.n	86a8c <quorem+0x108>
   86a9a:	6127      	str	r7, [r4, #16]
   86a9c:	4640      	mov	r0, r8
   86a9e:	b003      	add	sp, #12
   86aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86aa4:	2000      	movs	r0, #0
   86aa6:	b003      	add	sp, #12
   86aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86aac:	0000      	movs	r0, r0
	...

00086ab0 <_dtoa_r>:
   86ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86ab4:	6c05      	ldr	r5, [r0, #64]	; 0x40
   86ab6:	b09b      	sub	sp, #108	; 0x6c
   86ab8:	4604      	mov	r4, r0
   86aba:	4692      	mov	sl, r2
   86abc:	469b      	mov	fp, r3
   86abe:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   86ac0:	b14d      	cbz	r5, 86ad6 <_dtoa_r+0x26>
   86ac2:	2301      	movs	r3, #1
   86ac4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   86ac6:	4629      	mov	r1, r5
   86ac8:	4093      	lsls	r3, r2
   86aca:	60ab      	str	r3, [r5, #8]
   86acc:	606a      	str	r2, [r5, #4]
   86ace:	f001 fae7 	bl	880a0 <_Bfree>
   86ad2:	2300      	movs	r3, #0
   86ad4:	6423      	str	r3, [r4, #64]	; 0x40
   86ad6:	f1bb 0f00 	cmp.w	fp, #0
   86ada:	465d      	mov	r5, fp
   86adc:	db35      	blt.n	86b4a <_dtoa_r+0x9a>
   86ade:	2300      	movs	r3, #0
   86ae0:	6033      	str	r3, [r6, #0]
   86ae2:	4b9d      	ldr	r3, [pc, #628]	; (86d58 <_dtoa_r+0x2a8>)
   86ae4:	43ab      	bics	r3, r5
   86ae6:	d015      	beq.n	86b14 <_dtoa_r+0x64>
   86ae8:	2200      	movs	r2, #0
   86aea:	2300      	movs	r3, #0
   86aec:	4650      	mov	r0, sl
   86aee:	4659      	mov	r1, fp
   86af0:	f002 fe4a 	bl	89788 <__aeabi_dcmpeq>
   86af4:	4680      	mov	r8, r0
   86af6:	2800      	cmp	r0, #0
   86af8:	d02d      	beq.n	86b56 <_dtoa_r+0xa6>
   86afa:	2301      	movs	r3, #1
   86afc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86afe:	6013      	str	r3, [r2, #0]
   86b00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86b02:	2b00      	cmp	r3, #0
   86b04:	f000 80bd 	beq.w	86c82 <_dtoa_r+0x1d2>
   86b08:	4894      	ldr	r0, [pc, #592]	; (86d5c <_dtoa_r+0x2ac>)
   86b0a:	6018      	str	r0, [r3, #0]
   86b0c:	3801      	subs	r0, #1
   86b0e:	b01b      	add	sp, #108	; 0x6c
   86b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86b14:	f242 730f 	movw	r3, #9999	; 0x270f
   86b18:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86b1a:	6013      	str	r3, [r2, #0]
   86b1c:	f1ba 0f00 	cmp.w	sl, #0
   86b20:	d10d      	bne.n	86b3e <_dtoa_r+0x8e>
   86b22:	f3c5 0513 	ubfx	r5, r5, #0, #20
   86b26:	b955      	cbnz	r5, 86b3e <_dtoa_r+0x8e>
   86b28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86b2a:	488d      	ldr	r0, [pc, #564]	; (86d60 <_dtoa_r+0x2b0>)
   86b2c:	2b00      	cmp	r3, #0
   86b2e:	d0ee      	beq.n	86b0e <_dtoa_r+0x5e>
   86b30:	f100 0308 	add.w	r3, r0, #8
   86b34:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   86b36:	6013      	str	r3, [r2, #0]
   86b38:	b01b      	add	sp, #108	; 0x6c
   86b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86b3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86b40:	4888      	ldr	r0, [pc, #544]	; (86d64 <_dtoa_r+0x2b4>)
   86b42:	2b00      	cmp	r3, #0
   86b44:	d0e3      	beq.n	86b0e <_dtoa_r+0x5e>
   86b46:	1cc3      	adds	r3, r0, #3
   86b48:	e7f4      	b.n	86b34 <_dtoa_r+0x84>
   86b4a:	2301      	movs	r3, #1
   86b4c:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   86b50:	6033      	str	r3, [r6, #0]
   86b52:	46ab      	mov	fp, r5
   86b54:	e7c5      	b.n	86ae2 <_dtoa_r+0x32>
   86b56:	aa18      	add	r2, sp, #96	; 0x60
   86b58:	ab19      	add	r3, sp, #100	; 0x64
   86b5a:	9201      	str	r2, [sp, #4]
   86b5c:	9300      	str	r3, [sp, #0]
   86b5e:	4652      	mov	r2, sl
   86b60:	465b      	mov	r3, fp
   86b62:	4620      	mov	r0, r4
   86b64:	f001 fd1e 	bl	885a4 <__d2b>
   86b68:	0d2b      	lsrs	r3, r5, #20
   86b6a:	4681      	mov	r9, r0
   86b6c:	d071      	beq.n	86c52 <_dtoa_r+0x1a2>
   86b6e:	4650      	mov	r0, sl
   86b70:	f3cb 0213 	ubfx	r2, fp, #0, #20
   86b74:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   86b78:	9f18      	ldr	r7, [sp, #96]	; 0x60
   86b7a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   86b7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   86b82:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   86b86:	2200      	movs	r2, #0
   86b88:	4b77      	ldr	r3, [pc, #476]	; (86d68 <_dtoa_r+0x2b8>)
   86b8a:	f002 f9e1 	bl	88f50 <__aeabi_dsub>
   86b8e:	a36c      	add	r3, pc, #432	; (adr r3, 86d40 <_dtoa_r+0x290>)
   86b90:	e9d3 2300 	ldrd	r2, r3, [r3]
   86b94:	f002 fb90 	bl	892b8 <__aeabi_dmul>
   86b98:	a36b      	add	r3, pc, #428	; (adr r3, 86d48 <_dtoa_r+0x298>)
   86b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   86b9e:	f002 f9d9 	bl	88f54 <__adddf3>
   86ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   86ba6:	4630      	mov	r0, r6
   86ba8:	f002 fb20 	bl	891ec <__aeabi_i2d>
   86bac:	a368      	add	r3, pc, #416	; (adr r3, 86d50 <_dtoa_r+0x2a0>)
   86bae:	e9d3 2300 	ldrd	r2, r3, [r3]
   86bb2:	f002 fb81 	bl	892b8 <__aeabi_dmul>
   86bb6:	4602      	mov	r2, r0
   86bb8:	460b      	mov	r3, r1
   86bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   86bbe:	f002 f9c9 	bl	88f54 <__adddf3>
   86bc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   86bc6:	f002 fe27 	bl	89818 <__aeabi_d2iz>
   86bca:	2200      	movs	r2, #0
   86bcc:	9002      	str	r0, [sp, #8]
   86bce:	2300      	movs	r3, #0
   86bd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   86bd4:	f002 fde2 	bl	8979c <__aeabi_dcmplt>
   86bd8:	2800      	cmp	r0, #0
   86bda:	f040 816d 	bne.w	86eb8 <_dtoa_r+0x408>
   86bde:	9d02      	ldr	r5, [sp, #8]
   86be0:	2d16      	cmp	r5, #22
   86be2:	f200 8157 	bhi.w	86e94 <_dtoa_r+0x3e4>
   86be6:	4961      	ldr	r1, [pc, #388]	; (86d6c <_dtoa_r+0x2bc>)
   86be8:	4652      	mov	r2, sl
   86bea:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   86bee:	465b      	mov	r3, fp
   86bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
   86bf4:	f002 fdf0 	bl	897d8 <__aeabi_dcmpgt>
   86bf8:	2800      	cmp	r0, #0
   86bfa:	f000 81be 	beq.w	86f7a <_dtoa_r+0x4ca>
   86bfe:	1e6b      	subs	r3, r5, #1
   86c00:	9302      	str	r3, [sp, #8]
   86c02:	2300      	movs	r3, #0
   86c04:	930e      	str	r3, [sp, #56]	; 0x38
   86c06:	1bbf      	subs	r7, r7, r6
   86c08:	1e7b      	subs	r3, r7, #1
   86c0a:	9308      	str	r3, [sp, #32]
   86c0c:	f100 814e 	bmi.w	86eac <_dtoa_r+0x3fc>
   86c10:	2300      	movs	r3, #0
   86c12:	930a      	str	r3, [sp, #40]	; 0x28
   86c14:	9b02      	ldr	r3, [sp, #8]
   86c16:	2b00      	cmp	r3, #0
   86c18:	f2c0 813f 	blt.w	86e9a <_dtoa_r+0x3ea>
   86c1c:	9a08      	ldr	r2, [sp, #32]
   86c1e:	930d      	str	r3, [sp, #52]	; 0x34
   86c20:	4611      	mov	r1, r2
   86c22:	4419      	add	r1, r3
   86c24:	2300      	movs	r3, #0
   86c26:	9108      	str	r1, [sp, #32]
   86c28:	930c      	str	r3, [sp, #48]	; 0x30
   86c2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86c2c:	2b09      	cmp	r3, #9
   86c2e:	d82a      	bhi.n	86c86 <_dtoa_r+0x1d6>
   86c30:	2b05      	cmp	r3, #5
   86c32:	f340 8658 	ble.w	878e6 <_dtoa_r+0xe36>
   86c36:	2500      	movs	r5, #0
   86c38:	3b04      	subs	r3, #4
   86c3a:	9324      	str	r3, [sp, #144]	; 0x90
   86c3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86c3e:	3b02      	subs	r3, #2
   86c40:	2b03      	cmp	r3, #3
   86c42:	f200 863f 	bhi.w	878c4 <_dtoa_r+0xe14>
   86c46:	e8df f013 	tbh	[pc, r3, lsl #1]
   86c4a:	03ce      	.short	0x03ce
   86c4c:	03d902c3 	.word	0x03d902c3
   86c50:	045b      	.short	0x045b
   86c52:	9f18      	ldr	r7, [sp, #96]	; 0x60
   86c54:	9e19      	ldr	r6, [sp, #100]	; 0x64
   86c56:	443e      	add	r6, r7
   86c58:	f206 4332 	addw	r3, r6, #1074	; 0x432
   86c5c:	2b20      	cmp	r3, #32
   86c5e:	f340 8187 	ble.w	86f70 <_dtoa_r+0x4c0>
   86c62:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   86c66:	f206 4012 	addw	r0, r6, #1042	; 0x412
   86c6a:	409d      	lsls	r5, r3
   86c6c:	fa2a f000 	lsr.w	r0, sl, r0
   86c70:	4328      	orrs	r0, r5
   86c72:	f002 faab 	bl	891cc <__aeabi_ui2d>
   86c76:	2301      	movs	r3, #1
   86c78:	3e01      	subs	r6, #1
   86c7a:	9314      	str	r3, [sp, #80]	; 0x50
   86c7c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   86c80:	e781      	b.n	86b86 <_dtoa_r+0xd6>
   86c82:	483b      	ldr	r0, [pc, #236]	; (86d70 <_dtoa_r+0x2c0>)
   86c84:	e743      	b.n	86b0e <_dtoa_r+0x5e>
   86c86:	2100      	movs	r1, #0
   86c88:	4620      	mov	r0, r4
   86c8a:	6461      	str	r1, [r4, #68]	; 0x44
   86c8c:	9125      	str	r1, [sp, #148]	; 0x94
   86c8e:	f001 f9e1 	bl	88054 <_Balloc>
   86c92:	f04f 33ff 	mov.w	r3, #4294967295
   86c96:	9307      	str	r3, [sp, #28]
   86c98:	930f      	str	r3, [sp, #60]	; 0x3c
   86c9a:	2301      	movs	r3, #1
   86c9c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   86c9e:	9004      	str	r0, [sp, #16]
   86ca0:	6420      	str	r0, [r4, #64]	; 0x40
   86ca2:	9224      	str	r2, [sp, #144]	; 0x90
   86ca4:	930b      	str	r3, [sp, #44]	; 0x2c
   86ca6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86ca8:	2b00      	cmp	r3, #0
   86caa:	f2c0 80d3 	blt.w	86e54 <_dtoa_r+0x3a4>
   86cae:	9a02      	ldr	r2, [sp, #8]
   86cb0:	2a0e      	cmp	r2, #14
   86cb2:	f300 80cf 	bgt.w	86e54 <_dtoa_r+0x3a4>
   86cb6:	4b2d      	ldr	r3, [pc, #180]	; (86d6c <_dtoa_r+0x2bc>)
   86cb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   86cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   86cc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   86cc4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86cc6:	2b00      	cmp	r3, #0
   86cc8:	f2c0 83b4 	blt.w	87434 <_dtoa_r+0x984>
   86ccc:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   86cd0:	4650      	mov	r0, sl
   86cd2:	462a      	mov	r2, r5
   86cd4:	4633      	mov	r3, r6
   86cd6:	4659      	mov	r1, fp
   86cd8:	f002 fc18 	bl	8950c <__aeabi_ddiv>
   86cdc:	f002 fd9c 	bl	89818 <__aeabi_d2iz>
   86ce0:	4680      	mov	r8, r0
   86ce2:	f002 fa83 	bl	891ec <__aeabi_i2d>
   86ce6:	462a      	mov	r2, r5
   86ce8:	4633      	mov	r3, r6
   86cea:	f002 fae5 	bl	892b8 <__aeabi_dmul>
   86cee:	4602      	mov	r2, r0
   86cf0:	460b      	mov	r3, r1
   86cf2:	4650      	mov	r0, sl
   86cf4:	4659      	mov	r1, fp
   86cf6:	f002 f92b 	bl	88f50 <__aeabi_dsub>
   86cfa:	9e07      	ldr	r6, [sp, #28]
   86cfc:	9f04      	ldr	r7, [sp, #16]
   86cfe:	f108 0530 	add.w	r5, r8, #48	; 0x30
   86d02:	2e01      	cmp	r6, #1
   86d04:	703d      	strb	r5, [r7, #0]
   86d06:	4602      	mov	r2, r0
   86d08:	460b      	mov	r3, r1
   86d0a:	f107 0501 	add.w	r5, r7, #1
   86d0e:	d064      	beq.n	86dda <_dtoa_r+0x32a>
   86d10:	2200      	movs	r2, #0
   86d12:	4b18      	ldr	r3, [pc, #96]	; (86d74 <_dtoa_r+0x2c4>)
   86d14:	f002 fad0 	bl	892b8 <__aeabi_dmul>
   86d18:	2200      	movs	r2, #0
   86d1a:	2300      	movs	r3, #0
   86d1c:	4606      	mov	r6, r0
   86d1e:	460f      	mov	r7, r1
   86d20:	f002 fd32 	bl	89788 <__aeabi_dcmpeq>
   86d24:	2800      	cmp	r0, #0
   86d26:	f040 8082 	bne.w	86e2e <_dtoa_r+0x37e>
   86d2a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   86d2e:	f04f 0a00 	mov.w	sl, #0
   86d32:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   86d36:	f04f 0b00 	mov.w	fp, #0
   86d3a:	940b      	str	r4, [sp, #44]	; 0x2c
   86d3c:	e029      	b.n	86d92 <_dtoa_r+0x2e2>
   86d3e:	bf00      	nop
   86d40:	636f4361 	.word	0x636f4361
   86d44:	3fd287a7 	.word	0x3fd287a7
   86d48:	8b60c8b3 	.word	0x8b60c8b3
   86d4c:	3fc68a28 	.word	0x3fc68a28
   86d50:	509f79fb 	.word	0x509f79fb
   86d54:	3fd34413 	.word	0x3fd34413
   86d58:	7ff00000 	.word	0x7ff00000
   86d5c:	0008b10d 	.word	0x0008b10d
   86d60:	0008b130 	.word	0x0008b130
   86d64:	0008b13c 	.word	0x0008b13c
   86d68:	3ff80000 	.word	0x3ff80000
   86d6c:	0008b178 	.word	0x0008b178
   86d70:	0008b10c 	.word	0x0008b10c
   86d74:	40240000 	.word	0x40240000
   86d78:	2200      	movs	r2, #0
   86d7a:	4b81      	ldr	r3, [pc, #516]	; (86f80 <_dtoa_r+0x4d0>)
   86d7c:	f002 fa9c 	bl	892b8 <__aeabi_dmul>
   86d80:	4652      	mov	r2, sl
   86d82:	465b      	mov	r3, fp
   86d84:	4606      	mov	r6, r0
   86d86:	460f      	mov	r7, r1
   86d88:	f002 fcfe 	bl	89788 <__aeabi_dcmpeq>
   86d8c:	2800      	cmp	r0, #0
   86d8e:	f040 83ba 	bne.w	87506 <_dtoa_r+0xa56>
   86d92:	4642      	mov	r2, r8
   86d94:	464b      	mov	r3, r9
   86d96:	4630      	mov	r0, r6
   86d98:	4639      	mov	r1, r7
   86d9a:	f002 fbb7 	bl	8950c <__aeabi_ddiv>
   86d9e:	f002 fd3b 	bl	89818 <__aeabi_d2iz>
   86da2:	4604      	mov	r4, r0
   86da4:	f002 fa22 	bl	891ec <__aeabi_i2d>
   86da8:	4642      	mov	r2, r8
   86daa:	464b      	mov	r3, r9
   86dac:	f002 fa84 	bl	892b8 <__aeabi_dmul>
   86db0:	4602      	mov	r2, r0
   86db2:	460b      	mov	r3, r1
   86db4:	4630      	mov	r0, r6
   86db6:	4639      	mov	r1, r7
   86db8:	f002 f8ca 	bl	88f50 <__aeabi_dsub>
   86dbc:	f104 0630 	add.w	r6, r4, #48	; 0x30
   86dc0:	f805 6b01 	strb.w	r6, [r5], #1
   86dc4:	9e04      	ldr	r6, [sp, #16]
   86dc6:	9f07      	ldr	r7, [sp, #28]
   86dc8:	1bae      	subs	r6, r5, r6
   86dca:	42be      	cmp	r6, r7
   86dcc:	4602      	mov	r2, r0
   86dce:	460b      	mov	r3, r1
   86dd0:	d1d2      	bne.n	86d78 <_dtoa_r+0x2c8>
   86dd2:	46a0      	mov	r8, r4
   86dd4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   86dd8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86dda:	4610      	mov	r0, r2
   86ddc:	4619      	mov	r1, r3
   86dde:	f002 f8b9 	bl	88f54 <__adddf3>
   86de2:	4606      	mov	r6, r0
   86de4:	460f      	mov	r7, r1
   86de6:	4602      	mov	r2, r0
   86de8:	460b      	mov	r3, r1
   86dea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   86dee:	f002 fcd5 	bl	8979c <__aeabi_dcmplt>
   86df2:	b948      	cbnz	r0, 86e08 <_dtoa_r+0x358>
   86df4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   86df8:	4632      	mov	r2, r6
   86dfa:	463b      	mov	r3, r7
   86dfc:	f002 fcc4 	bl	89788 <__aeabi_dcmpeq>
   86e00:	b1a8      	cbz	r0, 86e2e <_dtoa_r+0x37e>
   86e02:	f018 0f01 	tst.w	r8, #1
   86e06:	d012      	beq.n	86e2e <_dtoa_r+0x37e>
   86e08:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   86e0c:	1e6b      	subs	r3, r5, #1
   86e0e:	9a04      	ldr	r2, [sp, #16]
   86e10:	e004      	b.n	86e1c <_dtoa_r+0x36c>
   86e12:	429a      	cmp	r2, r3
   86e14:	f000 8402 	beq.w	8761c <_dtoa_r+0xb6c>
   86e18:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   86e1c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   86e20:	f103 0501 	add.w	r5, r3, #1
   86e24:	d0f5      	beq.n	86e12 <_dtoa_r+0x362>
   86e26:	f108 0801 	add.w	r8, r8, #1
   86e2a:	f883 8000 	strb.w	r8, [r3]
   86e2e:	4649      	mov	r1, r9
   86e30:	4620      	mov	r0, r4
   86e32:	f001 f935 	bl	880a0 <_Bfree>
   86e36:	2200      	movs	r2, #0
   86e38:	9b02      	ldr	r3, [sp, #8]
   86e3a:	702a      	strb	r2, [r5, #0]
   86e3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86e3e:	3301      	adds	r3, #1
   86e40:	6013      	str	r3, [r2, #0]
   86e42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86e44:	2b00      	cmp	r3, #0
   86e46:	f000 839f 	beq.w	87588 <_dtoa_r+0xad8>
   86e4a:	9804      	ldr	r0, [sp, #16]
   86e4c:	601d      	str	r5, [r3, #0]
   86e4e:	b01b      	add	sp, #108	; 0x6c
   86e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86e54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86e56:	2a00      	cmp	r2, #0
   86e58:	d03e      	beq.n	86ed8 <_dtoa_r+0x428>
   86e5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86e5c:	2a01      	cmp	r2, #1
   86e5e:	f340 8311 	ble.w	87484 <_dtoa_r+0x9d4>
   86e62:	9b07      	ldr	r3, [sp, #28]
   86e64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86e66:	1e5f      	subs	r7, r3, #1
   86e68:	42ba      	cmp	r2, r7
   86e6a:	f2c0 8390 	blt.w	8758e <_dtoa_r+0xade>
   86e6e:	1bd7      	subs	r7, r2, r7
   86e70:	9b07      	ldr	r3, [sp, #28]
   86e72:	2b00      	cmp	r3, #0
   86e74:	f2c0 848c 	blt.w	87790 <_dtoa_r+0xce0>
   86e78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   86e7a:	9b07      	ldr	r3, [sp, #28]
   86e7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86e7e:	2101      	movs	r1, #1
   86e80:	441a      	add	r2, r3
   86e82:	920a      	str	r2, [sp, #40]	; 0x28
   86e84:	9a08      	ldr	r2, [sp, #32]
   86e86:	4620      	mov	r0, r4
   86e88:	441a      	add	r2, r3
   86e8a:	9208      	str	r2, [sp, #32]
   86e8c:	f001 f9a4 	bl	881d8 <__i2b>
   86e90:	4606      	mov	r6, r0
   86e92:	e023      	b.n	86edc <_dtoa_r+0x42c>
   86e94:	2301      	movs	r3, #1
   86e96:	930e      	str	r3, [sp, #56]	; 0x38
   86e98:	e6b5      	b.n	86c06 <_dtoa_r+0x156>
   86e9a:	2300      	movs	r3, #0
   86e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86e9e:	930d      	str	r3, [sp, #52]	; 0x34
   86ea0:	9b02      	ldr	r3, [sp, #8]
   86ea2:	1ad2      	subs	r2, r2, r3
   86ea4:	425b      	negs	r3, r3
   86ea6:	920a      	str	r2, [sp, #40]	; 0x28
   86ea8:	930c      	str	r3, [sp, #48]	; 0x30
   86eaa:	e6be      	b.n	86c2a <_dtoa_r+0x17a>
   86eac:	f1c7 0301 	rsb	r3, r7, #1
   86eb0:	930a      	str	r3, [sp, #40]	; 0x28
   86eb2:	2300      	movs	r3, #0
   86eb4:	9308      	str	r3, [sp, #32]
   86eb6:	e6ad      	b.n	86c14 <_dtoa_r+0x164>
   86eb8:	9d02      	ldr	r5, [sp, #8]
   86eba:	4628      	mov	r0, r5
   86ebc:	f002 f996 	bl	891ec <__aeabi_i2d>
   86ec0:	4602      	mov	r2, r0
   86ec2:	460b      	mov	r3, r1
   86ec4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   86ec8:	f002 fc5e 	bl	89788 <__aeabi_dcmpeq>
   86ecc:	2800      	cmp	r0, #0
   86ece:	f47f ae86 	bne.w	86bde <_dtoa_r+0x12e>
   86ed2:	1e6b      	subs	r3, r5, #1
   86ed4:	9302      	str	r3, [sp, #8]
   86ed6:	e682      	b.n	86bde <_dtoa_r+0x12e>
   86ed8:	ad0a      	add	r5, sp, #40	; 0x28
   86eda:	cde0      	ldmia	r5, {r5, r6, r7}
   86edc:	2d00      	cmp	r5, #0
   86ede:	dd0c      	ble.n	86efa <_dtoa_r+0x44a>
   86ee0:	9908      	ldr	r1, [sp, #32]
   86ee2:	2900      	cmp	r1, #0
   86ee4:	460b      	mov	r3, r1
   86ee6:	dd08      	ble.n	86efa <_dtoa_r+0x44a>
   86ee8:	42a9      	cmp	r1, r5
   86eea:	bfa8      	it	ge
   86eec:	462b      	movge	r3, r5
   86eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86ef0:	1aed      	subs	r5, r5, r3
   86ef2:	1ad2      	subs	r2, r2, r3
   86ef4:	1acb      	subs	r3, r1, r3
   86ef6:	920a      	str	r2, [sp, #40]	; 0x28
   86ef8:	9308      	str	r3, [sp, #32]
   86efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86efc:	b1d3      	cbz	r3, 86f34 <_dtoa_r+0x484>
   86efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86f00:	2b00      	cmp	r3, #0
   86f02:	f000 82b8 	beq.w	87476 <_dtoa_r+0x9c6>
   86f06:	2f00      	cmp	r7, #0
   86f08:	dd10      	ble.n	86f2c <_dtoa_r+0x47c>
   86f0a:	4631      	mov	r1, r6
   86f0c:	463a      	mov	r2, r7
   86f0e:	4620      	mov	r0, r4
   86f10:	f001 f9fe 	bl	88310 <__pow5mult>
   86f14:	464a      	mov	r2, r9
   86f16:	4601      	mov	r1, r0
   86f18:	4606      	mov	r6, r0
   86f1a:	4620      	mov	r0, r4
   86f1c:	f001 f966 	bl	881ec <__multiply>
   86f20:	4603      	mov	r3, r0
   86f22:	4649      	mov	r1, r9
   86f24:	4620      	mov	r0, r4
   86f26:	4699      	mov	r9, r3
   86f28:	f001 f8ba 	bl	880a0 <_Bfree>
   86f2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86f2e:	1bda      	subs	r2, r3, r7
   86f30:	f040 82a2 	bne.w	87478 <_dtoa_r+0x9c8>
   86f34:	2101      	movs	r1, #1
   86f36:	4620      	mov	r0, r4
   86f38:	f001 f94e 	bl	881d8 <__i2b>
   86f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86f3e:	4680      	mov	r8, r0
   86f40:	2b00      	cmp	r3, #0
   86f42:	dd1f      	ble.n	86f84 <_dtoa_r+0x4d4>
   86f44:	4601      	mov	r1, r0
   86f46:	461a      	mov	r2, r3
   86f48:	4620      	mov	r0, r4
   86f4a:	f001 f9e1 	bl	88310 <__pow5mult>
   86f4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86f50:	4680      	mov	r8, r0
   86f52:	2b01      	cmp	r3, #1
   86f54:	f340 8255 	ble.w	87402 <_dtoa_r+0x952>
   86f58:	2300      	movs	r3, #0
   86f5a:	930c      	str	r3, [sp, #48]	; 0x30
   86f5c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   86f60:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   86f64:	6918      	ldr	r0, [r3, #16]
   86f66:	f001 f8e7 	bl	88138 <__hi0bits>
   86f6a:	f1c0 0020 	rsb	r0, r0, #32
   86f6e:	e013      	b.n	86f98 <_dtoa_r+0x4e8>
   86f70:	f1c3 0520 	rsb	r5, r3, #32
   86f74:	fa0a f005 	lsl.w	r0, sl, r5
   86f78:	e67b      	b.n	86c72 <_dtoa_r+0x1c2>
   86f7a:	900e      	str	r0, [sp, #56]	; 0x38
   86f7c:	e643      	b.n	86c06 <_dtoa_r+0x156>
   86f7e:	bf00      	nop
   86f80:	40240000 	.word	0x40240000
   86f84:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86f86:	2b01      	cmp	r3, #1
   86f88:	f340 8285 	ble.w	87496 <_dtoa_r+0x9e6>
   86f8c:	2300      	movs	r3, #0
   86f8e:	930c      	str	r3, [sp, #48]	; 0x30
   86f90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86f92:	2001      	movs	r0, #1
   86f94:	2b00      	cmp	r3, #0
   86f96:	d1e1      	bne.n	86f5c <_dtoa_r+0x4ac>
   86f98:	9a08      	ldr	r2, [sp, #32]
   86f9a:	4410      	add	r0, r2
   86f9c:	f010 001f 	ands.w	r0, r0, #31
   86fa0:	f000 80a1 	beq.w	870e6 <_dtoa_r+0x636>
   86fa4:	f1c0 0320 	rsb	r3, r0, #32
   86fa8:	2b04      	cmp	r3, #4
   86faa:	f340 8486 	ble.w	878ba <_dtoa_r+0xe0a>
   86fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86fb0:	f1c0 001c 	rsb	r0, r0, #28
   86fb4:	4403      	add	r3, r0
   86fb6:	930a      	str	r3, [sp, #40]	; 0x28
   86fb8:	4613      	mov	r3, r2
   86fba:	4403      	add	r3, r0
   86fbc:	4405      	add	r5, r0
   86fbe:	9308      	str	r3, [sp, #32]
   86fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86fc2:	2b00      	cmp	r3, #0
   86fc4:	dd05      	ble.n	86fd2 <_dtoa_r+0x522>
   86fc6:	4649      	mov	r1, r9
   86fc8:	461a      	mov	r2, r3
   86fca:	4620      	mov	r0, r4
   86fcc:	f001 f9f0 	bl	883b0 <__lshift>
   86fd0:	4681      	mov	r9, r0
   86fd2:	9b08      	ldr	r3, [sp, #32]
   86fd4:	2b00      	cmp	r3, #0
   86fd6:	dd05      	ble.n	86fe4 <_dtoa_r+0x534>
   86fd8:	4641      	mov	r1, r8
   86fda:	461a      	mov	r2, r3
   86fdc:	4620      	mov	r0, r4
   86fde:	f001 f9e7 	bl	883b0 <__lshift>
   86fe2:	4680      	mov	r8, r0
   86fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86fe6:	2b00      	cmp	r3, #0
   86fe8:	f040 8086 	bne.w	870f8 <_dtoa_r+0x648>
   86fec:	9b07      	ldr	r3, [sp, #28]
   86fee:	2b00      	cmp	r3, #0
   86ff0:	f340 8264 	ble.w	874bc <_dtoa_r+0xa0c>
   86ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86ff6:	2b00      	cmp	r3, #0
   86ff8:	f000 8098 	beq.w	8712c <_dtoa_r+0x67c>
   86ffc:	2d00      	cmp	r5, #0
   86ffe:	dd05      	ble.n	8700c <_dtoa_r+0x55c>
   87000:	4631      	mov	r1, r6
   87002:	462a      	mov	r2, r5
   87004:	4620      	mov	r0, r4
   87006:	f001 f9d3 	bl	883b0 <__lshift>
   8700a:	4606      	mov	r6, r0
   8700c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8700e:	2b00      	cmp	r3, #0
   87010:	f040 8336 	bne.w	87680 <_dtoa_r+0xbd0>
   87014:	9608      	str	r6, [sp, #32]
   87016:	9b07      	ldr	r3, [sp, #28]
   87018:	9a04      	ldr	r2, [sp, #16]
   8701a:	3b01      	subs	r3, #1
   8701c:	18d3      	adds	r3, r2, r3
   8701e:	930b      	str	r3, [sp, #44]	; 0x2c
   87020:	4617      	mov	r7, r2
   87022:	f00a 0301 	and.w	r3, sl, #1
   87026:	46c2      	mov	sl, r8
   87028:	f8dd b020 	ldr.w	fp, [sp, #32]
   8702c:	930c      	str	r3, [sp, #48]	; 0x30
   8702e:	4651      	mov	r1, sl
   87030:	4648      	mov	r0, r9
   87032:	f7ff fca7 	bl	86984 <quorem>
   87036:	4631      	mov	r1, r6
   87038:	4605      	mov	r5, r0
   8703a:	4648      	mov	r0, r9
   8703c:	f001 fa08 	bl	88450 <__mcmp>
   87040:	465a      	mov	r2, fp
   87042:	9007      	str	r0, [sp, #28]
   87044:	4651      	mov	r1, sl
   87046:	4620      	mov	r0, r4
   87048:	f001 fa1e 	bl	88488 <__mdiff>
   8704c:	68c2      	ldr	r2, [r0, #12]
   8704e:	4680      	mov	r8, r0
   87050:	f105 0330 	add.w	r3, r5, #48	; 0x30
   87054:	2a00      	cmp	r2, #0
   87056:	f040 8229 	bne.w	874ac <_dtoa_r+0x9fc>
   8705a:	4601      	mov	r1, r0
   8705c:	4648      	mov	r0, r9
   8705e:	930a      	str	r3, [sp, #40]	; 0x28
   87060:	f001 f9f6 	bl	88450 <__mcmp>
   87064:	4641      	mov	r1, r8
   87066:	9008      	str	r0, [sp, #32]
   87068:	4620      	mov	r0, r4
   8706a:	f001 f819 	bl	880a0 <_Bfree>
   8706e:	9a08      	ldr	r2, [sp, #32]
   87070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87072:	b932      	cbnz	r2, 87082 <_dtoa_r+0x5d2>
   87074:	9924      	ldr	r1, [sp, #144]	; 0x90
   87076:	b921      	cbnz	r1, 87082 <_dtoa_r+0x5d2>
   87078:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8707a:	2a00      	cmp	r2, #0
   8707c:	f000 83ee 	beq.w	8785c <_dtoa_r+0xdac>
   87080:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87082:	9907      	ldr	r1, [sp, #28]
   87084:	2900      	cmp	r1, #0
   87086:	f2c0 829f 	blt.w	875c8 <_dtoa_r+0xb18>
   8708a:	d105      	bne.n	87098 <_dtoa_r+0x5e8>
   8708c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8708e:	b919      	cbnz	r1, 87098 <_dtoa_r+0x5e8>
   87090:	990c      	ldr	r1, [sp, #48]	; 0x30
   87092:	2900      	cmp	r1, #0
   87094:	f000 8298 	beq.w	875c8 <_dtoa_r+0xb18>
   87098:	2a00      	cmp	r2, #0
   8709a:	f300 8305 	bgt.w	876a8 <_dtoa_r+0xbf8>
   8709e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   870a0:	f107 0801 	add.w	r8, r7, #1
   870a4:	4297      	cmp	r7, r2
   870a6:	703b      	strb	r3, [r7, #0]
   870a8:	4645      	mov	r5, r8
   870aa:	f000 830b 	beq.w	876c4 <_dtoa_r+0xc14>
   870ae:	4649      	mov	r1, r9
   870b0:	2300      	movs	r3, #0
   870b2:	220a      	movs	r2, #10
   870b4:	4620      	mov	r0, r4
   870b6:	f000 fffd 	bl	880b4 <__multadd>
   870ba:	455e      	cmp	r6, fp
   870bc:	4681      	mov	r9, r0
   870be:	4631      	mov	r1, r6
   870c0:	f04f 0300 	mov.w	r3, #0
   870c4:	f04f 020a 	mov.w	r2, #10
   870c8:	4620      	mov	r0, r4
   870ca:	f000 81e9 	beq.w	874a0 <_dtoa_r+0x9f0>
   870ce:	f000 fff1 	bl	880b4 <__multadd>
   870d2:	4659      	mov	r1, fp
   870d4:	4606      	mov	r6, r0
   870d6:	2300      	movs	r3, #0
   870d8:	220a      	movs	r2, #10
   870da:	4620      	mov	r0, r4
   870dc:	f000 ffea 	bl	880b4 <__multadd>
   870e0:	4647      	mov	r7, r8
   870e2:	4683      	mov	fp, r0
   870e4:	e7a3      	b.n	8702e <_dtoa_r+0x57e>
   870e6:	201c      	movs	r0, #28
   870e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   870ea:	4405      	add	r5, r0
   870ec:	4403      	add	r3, r0
   870ee:	930a      	str	r3, [sp, #40]	; 0x28
   870f0:	9b08      	ldr	r3, [sp, #32]
   870f2:	4403      	add	r3, r0
   870f4:	9308      	str	r3, [sp, #32]
   870f6:	e763      	b.n	86fc0 <_dtoa_r+0x510>
   870f8:	4641      	mov	r1, r8
   870fa:	4648      	mov	r0, r9
   870fc:	f001 f9a8 	bl	88450 <__mcmp>
   87100:	2800      	cmp	r0, #0
   87102:	f6bf af73 	bge.w	86fec <_dtoa_r+0x53c>
   87106:	9f02      	ldr	r7, [sp, #8]
   87108:	4649      	mov	r1, r9
   8710a:	2300      	movs	r3, #0
   8710c:	220a      	movs	r2, #10
   8710e:	4620      	mov	r0, r4
   87110:	3f01      	subs	r7, #1
   87112:	9702      	str	r7, [sp, #8]
   87114:	f000 ffce 	bl	880b4 <__multadd>
   87118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8711a:	4681      	mov	r9, r0
   8711c:	2b00      	cmp	r3, #0
   8711e:	f040 83b5 	bne.w	8788c <_dtoa_r+0xddc>
   87122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87124:	2b00      	cmp	r3, #0
   87126:	f340 83be 	ble.w	878a6 <_dtoa_r+0xdf6>
   8712a:	9307      	str	r3, [sp, #28]
   8712c:	f8dd a010 	ldr.w	sl, [sp, #16]
   87130:	9f07      	ldr	r7, [sp, #28]
   87132:	4655      	mov	r5, sl
   87134:	e006      	b.n	87144 <_dtoa_r+0x694>
   87136:	4649      	mov	r1, r9
   87138:	2300      	movs	r3, #0
   8713a:	220a      	movs	r2, #10
   8713c:	4620      	mov	r0, r4
   8713e:	f000 ffb9 	bl	880b4 <__multadd>
   87142:	4681      	mov	r9, r0
   87144:	4641      	mov	r1, r8
   87146:	4648      	mov	r0, r9
   87148:	f7ff fc1c 	bl	86984 <quorem>
   8714c:	3030      	adds	r0, #48	; 0x30
   8714e:	f805 0b01 	strb.w	r0, [r5], #1
   87152:	eba5 030a 	sub.w	r3, r5, sl
   87156:	42bb      	cmp	r3, r7
   87158:	dbed      	blt.n	87136 <_dtoa_r+0x686>
   8715a:	9b04      	ldr	r3, [sp, #16]
   8715c:	9a07      	ldr	r2, [sp, #28]
   8715e:	4682      	mov	sl, r0
   87160:	2a01      	cmp	r2, #1
   87162:	bfac      	ite	ge
   87164:	189b      	addge	r3, r3, r2
   87166:	3301      	addlt	r3, #1
   87168:	f04f 0b00 	mov.w	fp, #0
   8716c:	461d      	mov	r5, r3
   8716e:	4649      	mov	r1, r9
   87170:	2201      	movs	r2, #1
   87172:	4620      	mov	r0, r4
   87174:	f001 f91c 	bl	883b0 <__lshift>
   87178:	4641      	mov	r1, r8
   8717a:	4681      	mov	r9, r0
   8717c:	f001 f968 	bl	88450 <__mcmp>
   87180:	2800      	cmp	r0, #0
   87182:	f340 823f 	ble.w	87604 <_dtoa_r+0xb54>
   87186:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   8718a:	1e6b      	subs	r3, r5, #1
   8718c:	9904      	ldr	r1, [sp, #16]
   8718e:	e004      	b.n	8719a <_dtoa_r+0x6ea>
   87190:	428b      	cmp	r3, r1
   87192:	f000 81ae 	beq.w	874f2 <_dtoa_r+0xa42>
   87196:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   8719a:	2a39      	cmp	r2, #57	; 0x39
   8719c:	f103 0501 	add.w	r5, r3, #1
   871a0:	d0f6      	beq.n	87190 <_dtoa_r+0x6e0>
   871a2:	3201      	adds	r2, #1
   871a4:	701a      	strb	r2, [r3, #0]
   871a6:	4641      	mov	r1, r8
   871a8:	4620      	mov	r0, r4
   871aa:	f000 ff79 	bl	880a0 <_Bfree>
   871ae:	2e00      	cmp	r6, #0
   871b0:	f43f ae3d 	beq.w	86e2e <_dtoa_r+0x37e>
   871b4:	f1bb 0f00 	cmp.w	fp, #0
   871b8:	d005      	beq.n	871c6 <_dtoa_r+0x716>
   871ba:	45b3      	cmp	fp, r6
   871bc:	d003      	beq.n	871c6 <_dtoa_r+0x716>
   871be:	4659      	mov	r1, fp
   871c0:	4620      	mov	r0, r4
   871c2:	f000 ff6d 	bl	880a0 <_Bfree>
   871c6:	4631      	mov	r1, r6
   871c8:	4620      	mov	r0, r4
   871ca:	f000 ff69 	bl	880a0 <_Bfree>
   871ce:	e62e      	b.n	86e2e <_dtoa_r+0x37e>
   871d0:	2300      	movs	r3, #0
   871d2:	930b      	str	r3, [sp, #44]	; 0x2c
   871d4:	9b02      	ldr	r3, [sp, #8]
   871d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   871d8:	4413      	add	r3, r2
   871da:	930f      	str	r3, [sp, #60]	; 0x3c
   871dc:	3301      	adds	r3, #1
   871de:	2b01      	cmp	r3, #1
   871e0:	461f      	mov	r7, r3
   871e2:	461e      	mov	r6, r3
   871e4:	bfb8      	it	lt
   871e6:	2701      	movlt	r7, #1
   871e8:	9307      	str	r3, [sp, #28]
   871ea:	2100      	movs	r1, #0
   871ec:	2f17      	cmp	r7, #23
   871ee:	6461      	str	r1, [r4, #68]	; 0x44
   871f0:	d90a      	bls.n	87208 <_dtoa_r+0x758>
   871f2:	2201      	movs	r2, #1
   871f4:	2304      	movs	r3, #4
   871f6:	005b      	lsls	r3, r3, #1
   871f8:	f103 0014 	add.w	r0, r3, #20
   871fc:	4287      	cmp	r7, r0
   871fe:	4611      	mov	r1, r2
   87200:	f102 0201 	add.w	r2, r2, #1
   87204:	d2f7      	bcs.n	871f6 <_dtoa_r+0x746>
   87206:	6461      	str	r1, [r4, #68]	; 0x44
   87208:	4620      	mov	r0, r4
   8720a:	f000 ff23 	bl	88054 <_Balloc>
   8720e:	2e0e      	cmp	r6, #14
   87210:	9004      	str	r0, [sp, #16]
   87212:	6420      	str	r0, [r4, #64]	; 0x40
   87214:	f63f ad47 	bhi.w	86ca6 <_dtoa_r+0x1f6>
   87218:	2d00      	cmp	r5, #0
   8721a:	f43f ad44 	beq.w	86ca6 <_dtoa_r+0x1f6>
   8721e:	9902      	ldr	r1, [sp, #8]
   87220:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   87224:	2900      	cmp	r1, #0
   87226:	f340 8203 	ble.w	87630 <_dtoa_r+0xb80>
   8722a:	4bb9      	ldr	r3, [pc, #740]	; (87510 <_dtoa_r+0xa60>)
   8722c:	f001 020f 	and.w	r2, r1, #15
   87230:	110d      	asrs	r5, r1, #4
   87232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87236:	06e9      	lsls	r1, r5, #27
   87238:	e9d3 6700 	ldrd	r6, r7, [r3]
   8723c:	f140 81af 	bpl.w	8759e <_dtoa_r+0xaee>
   87240:	4bb4      	ldr	r3, [pc, #720]	; (87514 <_dtoa_r+0xa64>)
   87242:	4650      	mov	r0, sl
   87244:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   87248:	4659      	mov	r1, fp
   8724a:	f002 f95f 	bl	8950c <__aeabi_ddiv>
   8724e:	f04f 0a03 	mov.w	sl, #3
   87252:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   87256:	f005 050f 	and.w	r5, r5, #15
   8725a:	b18d      	cbz	r5, 87280 <_dtoa_r+0x7d0>
   8725c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 87514 <_dtoa_r+0xa64>
   87260:	07ea      	lsls	r2, r5, #31
   87262:	d509      	bpl.n	87278 <_dtoa_r+0x7c8>
   87264:	e9d8 2300 	ldrd	r2, r3, [r8]
   87268:	4630      	mov	r0, r6
   8726a:	4639      	mov	r1, r7
   8726c:	f002 f824 	bl	892b8 <__aeabi_dmul>
   87270:	4606      	mov	r6, r0
   87272:	460f      	mov	r7, r1
   87274:	f10a 0a01 	add.w	sl, sl, #1
   87278:	106d      	asrs	r5, r5, #1
   8727a:	f108 0808 	add.w	r8, r8, #8
   8727e:	d1ef      	bne.n	87260 <_dtoa_r+0x7b0>
   87280:	463b      	mov	r3, r7
   87282:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   87286:	4632      	mov	r2, r6
   87288:	f002 f940 	bl	8950c <__aeabi_ddiv>
   8728c:	4607      	mov	r7, r0
   8728e:	4688      	mov	r8, r1
   87290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87292:	b143      	cbz	r3, 872a6 <_dtoa_r+0x7f6>
   87294:	2200      	movs	r2, #0
   87296:	4ba0      	ldr	r3, [pc, #640]	; (87518 <_dtoa_r+0xa68>)
   87298:	4638      	mov	r0, r7
   8729a:	4641      	mov	r1, r8
   8729c:	f002 fa7e 	bl	8979c <__aeabi_dcmplt>
   872a0:	2800      	cmp	r0, #0
   872a2:	f040 8287 	bne.w	877b4 <_dtoa_r+0xd04>
   872a6:	4650      	mov	r0, sl
   872a8:	f001 ffa0 	bl	891ec <__aeabi_i2d>
   872ac:	463a      	mov	r2, r7
   872ae:	4643      	mov	r3, r8
   872b0:	f002 f802 	bl	892b8 <__aeabi_dmul>
   872b4:	4b99      	ldr	r3, [pc, #612]	; (8751c <_dtoa_r+0xa6c>)
   872b6:	2200      	movs	r2, #0
   872b8:	f001 fe4c 	bl	88f54 <__adddf3>
   872bc:	9b07      	ldr	r3, [sp, #28]
   872be:	4605      	mov	r5, r0
   872c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   872c4:	2b00      	cmp	r3, #0
   872c6:	f000 813f 	beq.w	87548 <_dtoa_r+0xa98>
   872ca:	9b02      	ldr	r3, [sp, #8]
   872cc:	9315      	str	r3, [sp, #84]	; 0x54
   872ce:	9b07      	ldr	r3, [sp, #28]
   872d0:	9312      	str	r3, [sp, #72]	; 0x48
   872d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   872d4:	2b00      	cmp	r3, #0
   872d6:	f000 81fb 	beq.w	876d0 <_dtoa_r+0xc20>
   872da:	9a12      	ldr	r2, [sp, #72]	; 0x48
   872dc:	4b8c      	ldr	r3, [pc, #560]	; (87510 <_dtoa_r+0xa60>)
   872de:	2000      	movs	r0, #0
   872e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   872e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   872e8:	498d      	ldr	r1, [pc, #564]	; (87520 <_dtoa_r+0xa70>)
   872ea:	f002 f90f 	bl	8950c <__aeabi_ddiv>
   872ee:	462a      	mov	r2, r5
   872f0:	4633      	mov	r3, r6
   872f2:	f001 fe2d 	bl	88f50 <__aeabi_dsub>
   872f6:	4682      	mov	sl, r0
   872f8:	468b      	mov	fp, r1
   872fa:	4638      	mov	r0, r7
   872fc:	4641      	mov	r1, r8
   872fe:	f002 fa8b 	bl	89818 <__aeabi_d2iz>
   87302:	4605      	mov	r5, r0
   87304:	f001 ff72 	bl	891ec <__aeabi_i2d>
   87308:	4602      	mov	r2, r0
   8730a:	460b      	mov	r3, r1
   8730c:	4638      	mov	r0, r7
   8730e:	4641      	mov	r1, r8
   87310:	f001 fe1e 	bl	88f50 <__aeabi_dsub>
   87314:	3530      	adds	r5, #48	; 0x30
   87316:	fa5f f885 	uxtb.w	r8, r5
   8731a:	9d04      	ldr	r5, [sp, #16]
   8731c:	4606      	mov	r6, r0
   8731e:	460f      	mov	r7, r1
   87320:	f885 8000 	strb.w	r8, [r5]
   87324:	4602      	mov	r2, r0
   87326:	460b      	mov	r3, r1
   87328:	4650      	mov	r0, sl
   8732a:	4659      	mov	r1, fp
   8732c:	3501      	adds	r5, #1
   8732e:	f002 fa53 	bl	897d8 <__aeabi_dcmpgt>
   87332:	2800      	cmp	r0, #0
   87334:	d154      	bne.n	873e0 <_dtoa_r+0x930>
   87336:	4632      	mov	r2, r6
   87338:	463b      	mov	r3, r7
   8733a:	2000      	movs	r0, #0
   8733c:	4976      	ldr	r1, [pc, #472]	; (87518 <_dtoa_r+0xa68>)
   8733e:	f001 fe07 	bl	88f50 <__aeabi_dsub>
   87342:	4602      	mov	r2, r0
   87344:	460b      	mov	r3, r1
   87346:	4650      	mov	r0, sl
   87348:	4659      	mov	r1, fp
   8734a:	f002 fa45 	bl	897d8 <__aeabi_dcmpgt>
   8734e:	2800      	cmp	r0, #0
   87350:	f040 8270 	bne.w	87834 <_dtoa_r+0xd84>
   87354:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87356:	2a01      	cmp	r2, #1
   87358:	f000 8112 	beq.w	87580 <_dtoa_r+0xad0>
   8735c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8735e:	9a04      	ldr	r2, [sp, #16]
   87360:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   87364:	4413      	add	r3, r2
   87366:	4699      	mov	r9, r3
   87368:	e00f      	b.n	8738a <_dtoa_r+0x8da>
   8736a:	4632      	mov	r2, r6
   8736c:	463b      	mov	r3, r7
   8736e:	2000      	movs	r0, #0
   87370:	4969      	ldr	r1, [pc, #420]	; (87518 <_dtoa_r+0xa68>)
   87372:	f001 fded 	bl	88f50 <__aeabi_dsub>
   87376:	4652      	mov	r2, sl
   87378:	465b      	mov	r3, fp
   8737a:	f002 fa0f 	bl	8979c <__aeabi_dcmplt>
   8737e:	2800      	cmp	r0, #0
   87380:	f040 8256 	bne.w	87830 <_dtoa_r+0xd80>
   87384:	454d      	cmp	r5, r9
   87386:	f000 80f9 	beq.w	8757c <_dtoa_r+0xacc>
   8738a:	4650      	mov	r0, sl
   8738c:	4659      	mov	r1, fp
   8738e:	2200      	movs	r2, #0
   87390:	4b64      	ldr	r3, [pc, #400]	; (87524 <_dtoa_r+0xa74>)
   87392:	f001 ff91 	bl	892b8 <__aeabi_dmul>
   87396:	2200      	movs	r2, #0
   87398:	4b62      	ldr	r3, [pc, #392]	; (87524 <_dtoa_r+0xa74>)
   8739a:	4682      	mov	sl, r0
   8739c:	468b      	mov	fp, r1
   8739e:	4630      	mov	r0, r6
   873a0:	4639      	mov	r1, r7
   873a2:	f001 ff89 	bl	892b8 <__aeabi_dmul>
   873a6:	460f      	mov	r7, r1
   873a8:	4606      	mov	r6, r0
   873aa:	f002 fa35 	bl	89818 <__aeabi_d2iz>
   873ae:	4680      	mov	r8, r0
   873b0:	f001 ff1c 	bl	891ec <__aeabi_i2d>
   873b4:	4602      	mov	r2, r0
   873b6:	460b      	mov	r3, r1
   873b8:	4630      	mov	r0, r6
   873ba:	4639      	mov	r1, r7
   873bc:	f001 fdc8 	bl	88f50 <__aeabi_dsub>
   873c0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   873c4:	fa5f f888 	uxtb.w	r8, r8
   873c8:	f805 8b01 	strb.w	r8, [r5], #1
   873cc:	4652      	mov	r2, sl
   873ce:	465b      	mov	r3, fp
   873d0:	4606      	mov	r6, r0
   873d2:	460f      	mov	r7, r1
   873d4:	f002 f9e2 	bl	8979c <__aeabi_dcmplt>
   873d8:	2800      	cmp	r0, #0
   873da:	d0c6      	beq.n	8736a <_dtoa_r+0x8ba>
   873dc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   873e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   873e2:	9302      	str	r3, [sp, #8]
   873e4:	e523      	b.n	86e2e <_dtoa_r+0x37e>
   873e6:	2300      	movs	r3, #0
   873e8:	930b      	str	r3, [sp, #44]	; 0x2c
   873ea:	9b25      	ldr	r3, [sp, #148]	; 0x94
   873ec:	2b00      	cmp	r3, #0
   873ee:	f340 80dd 	ble.w	875ac <_dtoa_r+0xafc>
   873f2:	461f      	mov	r7, r3
   873f4:	461e      	mov	r6, r3
   873f6:	930f      	str	r3, [sp, #60]	; 0x3c
   873f8:	9307      	str	r3, [sp, #28]
   873fa:	e6f6      	b.n	871ea <_dtoa_r+0x73a>
   873fc:	2301      	movs	r3, #1
   873fe:	930b      	str	r3, [sp, #44]	; 0x2c
   87400:	e7f3      	b.n	873ea <_dtoa_r+0x93a>
   87402:	f1ba 0f00 	cmp.w	sl, #0
   87406:	f47f ada7 	bne.w	86f58 <_dtoa_r+0x4a8>
   8740a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8740e:	2b00      	cmp	r3, #0
   87410:	f47f adbc 	bne.w	86f8c <_dtoa_r+0x4dc>
   87414:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   87418:	0d3f      	lsrs	r7, r7, #20
   8741a:	053f      	lsls	r7, r7, #20
   8741c:	2f00      	cmp	r7, #0
   8741e:	f000 820d 	beq.w	8783c <_dtoa_r+0xd8c>
   87422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87424:	3301      	adds	r3, #1
   87426:	930a      	str	r3, [sp, #40]	; 0x28
   87428:	9b08      	ldr	r3, [sp, #32]
   8742a:	3301      	adds	r3, #1
   8742c:	9308      	str	r3, [sp, #32]
   8742e:	2301      	movs	r3, #1
   87430:	930c      	str	r3, [sp, #48]	; 0x30
   87432:	e5ad      	b.n	86f90 <_dtoa_r+0x4e0>
   87434:	9b07      	ldr	r3, [sp, #28]
   87436:	2b00      	cmp	r3, #0
   87438:	f73f ac48 	bgt.w	86ccc <_dtoa_r+0x21c>
   8743c:	f040 8222 	bne.w	87884 <_dtoa_r+0xdd4>
   87440:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   87444:	2200      	movs	r2, #0
   87446:	4b38      	ldr	r3, [pc, #224]	; (87528 <_dtoa_r+0xa78>)
   87448:	f001 ff36 	bl	892b8 <__aeabi_dmul>
   8744c:	4652      	mov	r2, sl
   8744e:	465b      	mov	r3, fp
   87450:	f002 f9b8 	bl	897c4 <__aeabi_dcmpge>
   87454:	f8dd 801c 	ldr.w	r8, [sp, #28]
   87458:	4646      	mov	r6, r8
   8745a:	2800      	cmp	r0, #0
   8745c:	d041      	beq.n	874e2 <_dtoa_r+0xa32>
   8745e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87460:	9d04      	ldr	r5, [sp, #16]
   87462:	43db      	mvns	r3, r3
   87464:	9302      	str	r3, [sp, #8]
   87466:	4641      	mov	r1, r8
   87468:	4620      	mov	r0, r4
   8746a:	f000 fe19 	bl	880a0 <_Bfree>
   8746e:	2e00      	cmp	r6, #0
   87470:	f43f acdd 	beq.w	86e2e <_dtoa_r+0x37e>
   87474:	e6a7      	b.n	871c6 <_dtoa_r+0x716>
   87476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87478:	4649      	mov	r1, r9
   8747a:	4620      	mov	r0, r4
   8747c:	f000 ff48 	bl	88310 <__pow5mult>
   87480:	4681      	mov	r9, r0
   87482:	e557      	b.n	86f34 <_dtoa_r+0x484>
   87484:	9a14      	ldr	r2, [sp, #80]	; 0x50
   87486:	2a00      	cmp	r2, #0
   87488:	f000 8188 	beq.w	8779c <_dtoa_r+0xcec>
   8748c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   87490:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87492:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87494:	e4f2      	b.n	86e7c <_dtoa_r+0x3cc>
   87496:	f1ba 0f00 	cmp.w	sl, #0
   8749a:	f47f ad77 	bne.w	86f8c <_dtoa_r+0x4dc>
   8749e:	e7b4      	b.n	8740a <_dtoa_r+0x95a>
   874a0:	f000 fe08 	bl	880b4 <__multadd>
   874a4:	4647      	mov	r7, r8
   874a6:	4606      	mov	r6, r0
   874a8:	4683      	mov	fp, r0
   874aa:	e5c0      	b.n	8702e <_dtoa_r+0x57e>
   874ac:	4601      	mov	r1, r0
   874ae:	4620      	mov	r0, r4
   874b0:	9308      	str	r3, [sp, #32]
   874b2:	f000 fdf5 	bl	880a0 <_Bfree>
   874b6:	2201      	movs	r2, #1
   874b8:	9b08      	ldr	r3, [sp, #32]
   874ba:	e5e2      	b.n	87082 <_dtoa_r+0x5d2>
   874bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   874be:	2b02      	cmp	r3, #2
   874c0:	f77f ad98 	ble.w	86ff4 <_dtoa_r+0x544>
   874c4:	9b07      	ldr	r3, [sp, #28]
   874c6:	2b00      	cmp	r3, #0
   874c8:	d1c9      	bne.n	8745e <_dtoa_r+0x9ae>
   874ca:	4641      	mov	r1, r8
   874cc:	2205      	movs	r2, #5
   874ce:	4620      	mov	r0, r4
   874d0:	f000 fdf0 	bl	880b4 <__multadd>
   874d4:	4601      	mov	r1, r0
   874d6:	4680      	mov	r8, r0
   874d8:	4648      	mov	r0, r9
   874da:	f000 ffb9 	bl	88450 <__mcmp>
   874de:	2800      	cmp	r0, #0
   874e0:	ddbd      	ble.n	8745e <_dtoa_r+0x9ae>
   874e2:	2331      	movs	r3, #49	; 0x31
   874e4:	9a02      	ldr	r2, [sp, #8]
   874e6:	9904      	ldr	r1, [sp, #16]
   874e8:	3201      	adds	r2, #1
   874ea:	9202      	str	r2, [sp, #8]
   874ec:	700b      	strb	r3, [r1, #0]
   874ee:	1c4d      	adds	r5, r1, #1
   874f0:	e7b9      	b.n	87466 <_dtoa_r+0x9b6>
   874f2:	2331      	movs	r3, #49	; 0x31
   874f4:	9a02      	ldr	r2, [sp, #8]
   874f6:	3201      	adds	r2, #1
   874f8:	9202      	str	r2, [sp, #8]
   874fa:	9a04      	ldr	r2, [sp, #16]
   874fc:	7013      	strb	r3, [r2, #0]
   874fe:	e652      	b.n	871a6 <_dtoa_r+0x6f6>
   87500:	2301      	movs	r3, #1
   87502:	930b      	str	r3, [sp, #44]	; 0x2c
   87504:	e666      	b.n	871d4 <_dtoa_r+0x724>
   87506:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8750a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8750c:	e48f      	b.n	86e2e <_dtoa_r+0x37e>
   8750e:	bf00      	nop
   87510:	0008b178 	.word	0x0008b178
   87514:	0008b150 	.word	0x0008b150
   87518:	3ff00000 	.word	0x3ff00000
   8751c:	401c0000 	.word	0x401c0000
   87520:	3fe00000 	.word	0x3fe00000
   87524:	40240000 	.word	0x40240000
   87528:	40140000 	.word	0x40140000
   8752c:	4650      	mov	r0, sl
   8752e:	f001 fe5d 	bl	891ec <__aeabi_i2d>
   87532:	463a      	mov	r2, r7
   87534:	4643      	mov	r3, r8
   87536:	f001 febf 	bl	892b8 <__aeabi_dmul>
   8753a:	2200      	movs	r2, #0
   8753c:	4bc1      	ldr	r3, [pc, #772]	; (87844 <_dtoa_r+0xd94>)
   8753e:	f001 fd09 	bl	88f54 <__adddf3>
   87542:	4605      	mov	r5, r0
   87544:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   87548:	4641      	mov	r1, r8
   8754a:	2200      	movs	r2, #0
   8754c:	4bbe      	ldr	r3, [pc, #760]	; (87848 <_dtoa_r+0xd98>)
   8754e:	4638      	mov	r0, r7
   87550:	f001 fcfe 	bl	88f50 <__aeabi_dsub>
   87554:	462a      	mov	r2, r5
   87556:	4633      	mov	r3, r6
   87558:	4682      	mov	sl, r0
   8755a:	468b      	mov	fp, r1
   8755c:	f002 f93c 	bl	897d8 <__aeabi_dcmpgt>
   87560:	4680      	mov	r8, r0
   87562:	2800      	cmp	r0, #0
   87564:	f040 8110 	bne.w	87788 <_dtoa_r+0xcd8>
   87568:	462a      	mov	r2, r5
   8756a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   8756e:	4650      	mov	r0, sl
   87570:	4659      	mov	r1, fp
   87572:	f002 f913 	bl	8979c <__aeabi_dcmplt>
   87576:	b118      	cbz	r0, 87580 <_dtoa_r+0xad0>
   87578:	4646      	mov	r6, r8
   8757a:	e770      	b.n	8745e <_dtoa_r+0x9ae>
   8757c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87580:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   87584:	f7ff bb8f 	b.w	86ca6 <_dtoa_r+0x1f6>
   87588:	9804      	ldr	r0, [sp, #16]
   8758a:	f7ff bac0 	b.w	86b0e <_dtoa_r+0x5e>
   8758e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87590:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   87592:	1afb      	subs	r3, r7, r3
   87594:	441a      	add	r2, r3
   87596:	970c      	str	r7, [sp, #48]	; 0x30
   87598:	920d      	str	r2, [sp, #52]	; 0x34
   8759a:	2700      	movs	r7, #0
   8759c:	e468      	b.n	86e70 <_dtoa_r+0x3c0>
   8759e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   875a2:	f04f 0a02 	mov.w	sl, #2
   875a6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   875aa:	e656      	b.n	8725a <_dtoa_r+0x7aa>
   875ac:	2100      	movs	r1, #0
   875ae:	2301      	movs	r3, #1
   875b0:	4620      	mov	r0, r4
   875b2:	6461      	str	r1, [r4, #68]	; 0x44
   875b4:	9325      	str	r3, [sp, #148]	; 0x94
   875b6:	f000 fd4d 	bl	88054 <_Balloc>
   875ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
   875bc:	9004      	str	r0, [sp, #16]
   875be:	9307      	str	r3, [sp, #28]
   875c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   875c2:	6420      	str	r0, [r4, #64]	; 0x40
   875c4:	930f      	str	r3, [sp, #60]	; 0x3c
   875c6:	e627      	b.n	87218 <_dtoa_r+0x768>
   875c8:	2a00      	cmp	r2, #0
   875ca:	46d0      	mov	r8, sl
   875cc:	f8cd b020 	str.w	fp, [sp, #32]
   875d0:	469a      	mov	sl, r3
   875d2:	dd11      	ble.n	875f8 <_dtoa_r+0xb48>
   875d4:	4649      	mov	r1, r9
   875d6:	2201      	movs	r2, #1
   875d8:	4620      	mov	r0, r4
   875da:	f000 fee9 	bl	883b0 <__lshift>
   875de:	4641      	mov	r1, r8
   875e0:	4681      	mov	r9, r0
   875e2:	f000 ff35 	bl	88450 <__mcmp>
   875e6:	2800      	cmp	r0, #0
   875e8:	f340 8145 	ble.w	87876 <_dtoa_r+0xdc6>
   875ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   875f0:	f000 8105 	beq.w	877fe <_dtoa_r+0xd4e>
   875f4:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   875f8:	46b3      	mov	fp, r6
   875fa:	f887 a000 	strb.w	sl, [r7]
   875fe:	1c7d      	adds	r5, r7, #1
   87600:	9e08      	ldr	r6, [sp, #32]
   87602:	e5d0      	b.n	871a6 <_dtoa_r+0x6f6>
   87604:	d104      	bne.n	87610 <_dtoa_r+0xb60>
   87606:	f01a 0f01 	tst.w	sl, #1
   8760a:	d001      	beq.n	87610 <_dtoa_r+0xb60>
   8760c:	e5bb      	b.n	87186 <_dtoa_r+0x6d6>
   8760e:	4615      	mov	r5, r2
   87610:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   87614:	1e6a      	subs	r2, r5, #1
   87616:	2b30      	cmp	r3, #48	; 0x30
   87618:	d0f9      	beq.n	8760e <_dtoa_r+0xb5e>
   8761a:	e5c4      	b.n	871a6 <_dtoa_r+0x6f6>
   8761c:	2230      	movs	r2, #48	; 0x30
   8761e:	9904      	ldr	r1, [sp, #16]
   87620:	700a      	strb	r2, [r1, #0]
   87622:	9a02      	ldr	r2, [sp, #8]
   87624:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87628:	3201      	adds	r2, #1
   8762a:	9202      	str	r2, [sp, #8]
   8762c:	f7ff bbfb 	b.w	86e26 <_dtoa_r+0x376>
   87630:	f000 80bb 	beq.w	877aa <_dtoa_r+0xcfa>
   87634:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87638:	9b02      	ldr	r3, [sp, #8]
   8763a:	f04f 0a02 	mov.w	sl, #2
   8763e:	425d      	negs	r5, r3
   87640:	4b82      	ldr	r3, [pc, #520]	; (8784c <_dtoa_r+0xd9c>)
   87642:	f005 020f 	and.w	r2, r5, #15
   87646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8764a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8764e:	f001 fe33 	bl	892b8 <__aeabi_dmul>
   87652:	112d      	asrs	r5, r5, #4
   87654:	4607      	mov	r7, r0
   87656:	4688      	mov	r8, r1
   87658:	f43f ae1a 	beq.w	87290 <_dtoa_r+0x7e0>
   8765c:	4e7c      	ldr	r6, [pc, #496]	; (87850 <_dtoa_r+0xda0>)
   8765e:	07eb      	lsls	r3, r5, #31
   87660:	d509      	bpl.n	87676 <_dtoa_r+0xbc6>
   87662:	e9d6 2300 	ldrd	r2, r3, [r6]
   87666:	4638      	mov	r0, r7
   87668:	4641      	mov	r1, r8
   8766a:	f001 fe25 	bl	892b8 <__aeabi_dmul>
   8766e:	4607      	mov	r7, r0
   87670:	4688      	mov	r8, r1
   87672:	f10a 0a01 	add.w	sl, sl, #1
   87676:	106d      	asrs	r5, r5, #1
   87678:	f106 0608 	add.w	r6, r6, #8
   8767c:	d1ef      	bne.n	8765e <_dtoa_r+0xbae>
   8767e:	e607      	b.n	87290 <_dtoa_r+0x7e0>
   87680:	6871      	ldr	r1, [r6, #4]
   87682:	4620      	mov	r0, r4
   87684:	f000 fce6 	bl	88054 <_Balloc>
   87688:	4605      	mov	r5, r0
   8768a:	6933      	ldr	r3, [r6, #16]
   8768c:	f106 010c 	add.w	r1, r6, #12
   87690:	3302      	adds	r3, #2
   87692:	009a      	lsls	r2, r3, #2
   87694:	300c      	adds	r0, #12
   87696:	f000 fc5b 	bl	87f50 <memcpy>
   8769a:	4629      	mov	r1, r5
   8769c:	2201      	movs	r2, #1
   8769e:	4620      	mov	r0, r4
   876a0:	f000 fe86 	bl	883b0 <__lshift>
   876a4:	9008      	str	r0, [sp, #32]
   876a6:	e4b6      	b.n	87016 <_dtoa_r+0x566>
   876a8:	2b39      	cmp	r3, #57	; 0x39
   876aa:	f8cd b020 	str.w	fp, [sp, #32]
   876ae:	46d0      	mov	r8, sl
   876b0:	f000 80a5 	beq.w	877fe <_dtoa_r+0xd4e>
   876b4:	f103 0a01 	add.w	sl, r3, #1
   876b8:	46b3      	mov	fp, r6
   876ba:	f887 a000 	strb.w	sl, [r7]
   876be:	1c7d      	adds	r5, r7, #1
   876c0:	9e08      	ldr	r6, [sp, #32]
   876c2:	e570      	b.n	871a6 <_dtoa_r+0x6f6>
   876c4:	465a      	mov	r2, fp
   876c6:	46d0      	mov	r8, sl
   876c8:	46b3      	mov	fp, r6
   876ca:	469a      	mov	sl, r3
   876cc:	4616      	mov	r6, r2
   876ce:	e54e      	b.n	8716e <_dtoa_r+0x6be>
   876d0:	9812      	ldr	r0, [sp, #72]	; 0x48
   876d2:	495e      	ldr	r1, [pc, #376]	; (8784c <_dtoa_r+0xd9c>)
   876d4:	462a      	mov	r2, r5
   876d6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   876da:	4633      	mov	r3, r6
   876dc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   876e0:	f001 fdea 	bl	892b8 <__aeabi_dmul>
   876e4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   876e8:	4638      	mov	r0, r7
   876ea:	4641      	mov	r1, r8
   876ec:	f002 f894 	bl	89818 <__aeabi_d2iz>
   876f0:	4605      	mov	r5, r0
   876f2:	f001 fd7b 	bl	891ec <__aeabi_i2d>
   876f6:	4602      	mov	r2, r0
   876f8:	460b      	mov	r3, r1
   876fa:	4638      	mov	r0, r7
   876fc:	4641      	mov	r1, r8
   876fe:	f001 fc27 	bl	88f50 <__aeabi_dsub>
   87702:	4606      	mov	r6, r0
   87704:	9812      	ldr	r0, [sp, #72]	; 0x48
   87706:	9a04      	ldr	r2, [sp, #16]
   87708:	3530      	adds	r5, #48	; 0x30
   8770a:	2801      	cmp	r0, #1
   8770c:	7015      	strb	r5, [r2, #0]
   8770e:	460f      	mov	r7, r1
   87710:	f102 0501 	add.w	r5, r2, #1
   87714:	d026      	beq.n	87764 <_dtoa_r+0xcb4>
   87716:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87718:	9a04      	ldr	r2, [sp, #16]
   8771a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8771e:	4413      	add	r3, r2
   87720:	f04f 0a00 	mov.w	sl, #0
   87724:	4699      	mov	r9, r3
   87726:	f8df b130 	ldr.w	fp, [pc, #304]	; 87858 <_dtoa_r+0xda8>
   8772a:	4652      	mov	r2, sl
   8772c:	465b      	mov	r3, fp
   8772e:	4630      	mov	r0, r6
   87730:	4639      	mov	r1, r7
   87732:	f001 fdc1 	bl	892b8 <__aeabi_dmul>
   87736:	460f      	mov	r7, r1
   87738:	4606      	mov	r6, r0
   8773a:	f002 f86d 	bl	89818 <__aeabi_d2iz>
   8773e:	4680      	mov	r8, r0
   87740:	f001 fd54 	bl	891ec <__aeabi_i2d>
   87744:	4602      	mov	r2, r0
   87746:	460b      	mov	r3, r1
   87748:	4630      	mov	r0, r6
   8774a:	4639      	mov	r1, r7
   8774c:	f001 fc00 	bl	88f50 <__aeabi_dsub>
   87750:	f108 0830 	add.w	r8, r8, #48	; 0x30
   87754:	f805 8b01 	strb.w	r8, [r5], #1
   87758:	454d      	cmp	r5, r9
   8775a:	4606      	mov	r6, r0
   8775c:	460f      	mov	r7, r1
   8775e:	d1e4      	bne.n	8772a <_dtoa_r+0xc7a>
   87760:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87764:	2200      	movs	r2, #0
   87766:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   8776a:	4b3a      	ldr	r3, [pc, #232]	; (87854 <_dtoa_r+0xda4>)
   8776c:	f001 fbf2 	bl	88f54 <__adddf3>
   87770:	4632      	mov	r2, r6
   87772:	463b      	mov	r3, r7
   87774:	f002 f812 	bl	8979c <__aeabi_dcmplt>
   87778:	2800      	cmp	r0, #0
   8777a:	d046      	beq.n	8780a <_dtoa_r+0xd5a>
   8777c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8777e:	9302      	str	r3, [sp, #8]
   87780:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87784:	f7ff bb42 	b.w	86e0c <_dtoa_r+0x35c>
   87788:	f04f 0800 	mov.w	r8, #0
   8778c:	4646      	mov	r6, r8
   8778e:	e6a8      	b.n	874e2 <_dtoa_r+0xa32>
   87790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87792:	9a07      	ldr	r2, [sp, #28]
   87794:	1a9d      	subs	r5, r3, r2
   87796:	2300      	movs	r3, #0
   87798:	f7ff bb70 	b.w	86e7c <_dtoa_r+0x3cc>
   8779c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8779e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   877a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   877a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   877a6:	f7ff bb69 	b.w	86e7c <_dtoa_r+0x3cc>
   877aa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   877ae:	f04f 0a02 	mov.w	sl, #2
   877b2:	e56d      	b.n	87290 <_dtoa_r+0x7e0>
   877b4:	9b07      	ldr	r3, [sp, #28]
   877b6:	2b00      	cmp	r3, #0
   877b8:	f43f aeb8 	beq.w	8752c <_dtoa_r+0xa7c>
   877bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   877be:	2b00      	cmp	r3, #0
   877c0:	f77f aede 	ble.w	87580 <_dtoa_r+0xad0>
   877c4:	2200      	movs	r2, #0
   877c6:	4b24      	ldr	r3, [pc, #144]	; (87858 <_dtoa_r+0xda8>)
   877c8:	4638      	mov	r0, r7
   877ca:	4641      	mov	r1, r8
   877cc:	f001 fd74 	bl	892b8 <__aeabi_dmul>
   877d0:	4607      	mov	r7, r0
   877d2:	4688      	mov	r8, r1
   877d4:	f10a 0001 	add.w	r0, sl, #1
   877d8:	f001 fd08 	bl	891ec <__aeabi_i2d>
   877dc:	463a      	mov	r2, r7
   877de:	4643      	mov	r3, r8
   877e0:	f001 fd6a 	bl	892b8 <__aeabi_dmul>
   877e4:	2200      	movs	r2, #0
   877e6:	4b17      	ldr	r3, [pc, #92]	; (87844 <_dtoa_r+0xd94>)
   877e8:	f001 fbb4 	bl	88f54 <__adddf3>
   877ec:	9a02      	ldr	r2, [sp, #8]
   877ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   877f0:	3a01      	subs	r2, #1
   877f2:	4605      	mov	r5, r0
   877f4:	9215      	str	r2, [sp, #84]	; 0x54
   877f6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   877fa:	9312      	str	r3, [sp, #72]	; 0x48
   877fc:	e569      	b.n	872d2 <_dtoa_r+0x822>
   877fe:	2239      	movs	r2, #57	; 0x39
   87800:	46b3      	mov	fp, r6
   87802:	703a      	strb	r2, [r7, #0]
   87804:	9e08      	ldr	r6, [sp, #32]
   87806:	1c7d      	adds	r5, r7, #1
   87808:	e4bf      	b.n	8718a <_dtoa_r+0x6da>
   8780a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   8780e:	2000      	movs	r0, #0
   87810:	4910      	ldr	r1, [pc, #64]	; (87854 <_dtoa_r+0xda4>)
   87812:	f001 fb9d 	bl	88f50 <__aeabi_dsub>
   87816:	4632      	mov	r2, r6
   87818:	463b      	mov	r3, r7
   8781a:	f001 ffdd 	bl	897d8 <__aeabi_dcmpgt>
   8781e:	b908      	cbnz	r0, 87824 <_dtoa_r+0xd74>
   87820:	e6ae      	b.n	87580 <_dtoa_r+0xad0>
   87822:	4615      	mov	r5, r2
   87824:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   87828:	1e6a      	subs	r2, r5, #1
   8782a:	2b30      	cmp	r3, #48	; 0x30
   8782c:	d0f9      	beq.n	87822 <_dtoa_r+0xd72>
   8782e:	e5d7      	b.n	873e0 <_dtoa_r+0x930>
   87830:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87834:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87836:	9302      	str	r3, [sp, #8]
   87838:	f7ff bae8 	b.w	86e0c <_dtoa_r+0x35c>
   8783c:	970c      	str	r7, [sp, #48]	; 0x30
   8783e:	f7ff bba7 	b.w	86f90 <_dtoa_r+0x4e0>
   87842:	bf00      	nop
   87844:	401c0000 	.word	0x401c0000
   87848:	40140000 	.word	0x40140000
   8784c:	0008b178 	.word	0x0008b178
   87850:	0008b150 	.word	0x0008b150
   87854:	3fe00000 	.word	0x3fe00000
   87858:	40240000 	.word	0x40240000
   8785c:	2b39      	cmp	r3, #57	; 0x39
   8785e:	f8cd b020 	str.w	fp, [sp, #32]
   87862:	46d0      	mov	r8, sl
   87864:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87868:	469a      	mov	sl, r3
   8786a:	d0c8      	beq.n	877fe <_dtoa_r+0xd4e>
   8786c:	f1bb 0f00 	cmp.w	fp, #0
   87870:	f73f aec0 	bgt.w	875f4 <_dtoa_r+0xb44>
   87874:	e6c0      	b.n	875f8 <_dtoa_r+0xb48>
   87876:	f47f aebf 	bne.w	875f8 <_dtoa_r+0xb48>
   8787a:	f01a 0f01 	tst.w	sl, #1
   8787e:	f43f aebb 	beq.w	875f8 <_dtoa_r+0xb48>
   87882:	e6b3      	b.n	875ec <_dtoa_r+0xb3c>
   87884:	f04f 0800 	mov.w	r8, #0
   87888:	4646      	mov	r6, r8
   8788a:	e5e8      	b.n	8745e <_dtoa_r+0x9ae>
   8788c:	4631      	mov	r1, r6
   8788e:	2300      	movs	r3, #0
   87890:	220a      	movs	r2, #10
   87892:	4620      	mov	r0, r4
   87894:	f000 fc0e 	bl	880b4 <__multadd>
   87898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8789a:	4606      	mov	r6, r0
   8789c:	2b00      	cmp	r3, #0
   8789e:	dd07      	ble.n	878b0 <_dtoa_r+0xe00>
   878a0:	9307      	str	r3, [sp, #28]
   878a2:	f7ff bbab 	b.w	86ffc <_dtoa_r+0x54c>
   878a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   878a8:	2b02      	cmp	r3, #2
   878aa:	dc1f      	bgt.n	878ec <_dtoa_r+0xe3c>
   878ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   878ae:	e43c      	b.n	8712a <_dtoa_r+0x67a>
   878b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   878b2:	2b02      	cmp	r3, #2
   878b4:	dc1a      	bgt.n	878ec <_dtoa_r+0xe3c>
   878b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   878b8:	e7f2      	b.n	878a0 <_dtoa_r+0xdf0>
   878ba:	f43f ab81 	beq.w	86fc0 <_dtoa_r+0x510>
   878be:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   878c2:	e411      	b.n	870e8 <_dtoa_r+0x638>
   878c4:	2500      	movs	r5, #0
   878c6:	4620      	mov	r0, r4
   878c8:	6465      	str	r5, [r4, #68]	; 0x44
   878ca:	4629      	mov	r1, r5
   878cc:	f000 fbc2 	bl	88054 <_Balloc>
   878d0:	f04f 33ff 	mov.w	r3, #4294967295
   878d4:	9307      	str	r3, [sp, #28]
   878d6:	930f      	str	r3, [sp, #60]	; 0x3c
   878d8:	2301      	movs	r3, #1
   878da:	9004      	str	r0, [sp, #16]
   878dc:	9525      	str	r5, [sp, #148]	; 0x94
   878de:	6420      	str	r0, [r4, #64]	; 0x40
   878e0:	930b      	str	r3, [sp, #44]	; 0x2c
   878e2:	f7ff b9e0 	b.w	86ca6 <_dtoa_r+0x1f6>
   878e6:	2501      	movs	r5, #1
   878e8:	f7ff b9a8 	b.w	86c3c <_dtoa_r+0x18c>
   878ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   878ee:	9307      	str	r3, [sp, #28]
   878f0:	e5e8      	b.n	874c4 <_dtoa_r+0xa14>
   878f2:	bf00      	nop

000878f4 <__libc_fini_array>:
   878f4:	b538      	push	{r3, r4, r5, lr}
   878f6:	4c0a      	ldr	r4, [pc, #40]	; (87920 <__libc_fini_array+0x2c>)
   878f8:	4d0a      	ldr	r5, [pc, #40]	; (87924 <__libc_fini_array+0x30>)
   878fa:	1b64      	subs	r4, r4, r5
   878fc:	10a4      	asrs	r4, r4, #2
   878fe:	d00a      	beq.n	87916 <__libc_fini_array+0x22>
   87900:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   87904:	3b01      	subs	r3, #1
   87906:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8790a:	3c01      	subs	r4, #1
   8790c:	f855 3904 	ldr.w	r3, [r5], #-4
   87910:	4798      	blx	r3
   87912:	2c00      	cmp	r4, #0
   87914:	d1f9      	bne.n	8790a <__libc_fini_array+0x16>
   87916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8791a:	f003 bd23 	b.w	8b364 <_fini>
   8791e:	bf00      	nop
   87920:	0008b374 	.word	0x0008b374
   87924:	0008b370 	.word	0x0008b370

00087928 <__locale_ctype_ptr_l>:
   87928:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   8792c:	4770      	bx	lr
   8792e:	bf00      	nop

00087930 <_localeconv_r>:
   87930:	4a04      	ldr	r2, [pc, #16]	; (87944 <_localeconv_r+0x14>)
   87932:	4b05      	ldr	r3, [pc, #20]	; (87948 <_localeconv_r+0x18>)
   87934:	6812      	ldr	r2, [r2, #0]
   87936:	6b50      	ldr	r0, [r2, #52]	; 0x34
   87938:	2800      	cmp	r0, #0
   8793a:	bf08      	it	eq
   8793c:	4618      	moveq	r0, r3
   8793e:	30f0      	adds	r0, #240	; 0xf0
   87940:	4770      	bx	lr
   87942:	bf00      	nop
   87944:	20000630 	.word	0x20000630
   87948:	20000a64 	.word	0x20000a64

0008794c <__retarget_lock_acquire_recursive>:
   8794c:	4770      	bx	lr
   8794e:	bf00      	nop

00087950 <__retarget_lock_release_recursive>:
   87950:	4770      	bx	lr
   87952:	bf00      	nop

00087954 <_malloc_r>:
   87954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87958:	f101 060b 	add.w	r6, r1, #11
   8795c:	2e16      	cmp	r6, #22
   8795e:	b083      	sub	sp, #12
   87960:	4605      	mov	r5, r0
   87962:	f240 809e 	bls.w	87aa2 <_malloc_r+0x14e>
   87966:	f036 0607 	bics.w	r6, r6, #7
   8796a:	f100 80bd 	bmi.w	87ae8 <_malloc_r+0x194>
   8796e:	42b1      	cmp	r1, r6
   87970:	f200 80ba 	bhi.w	87ae8 <_malloc_r+0x194>
   87974:	f000 fb62 	bl	8803c <__malloc_lock>
   87978:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   8797c:	f0c0 8285 	bcc.w	87e8a <_malloc_r+0x536>
   87980:	0a73      	lsrs	r3, r6, #9
   87982:	f000 80b8 	beq.w	87af6 <_malloc_r+0x1a2>
   87986:	2b04      	cmp	r3, #4
   87988:	f200 816c 	bhi.w	87c64 <_malloc_r+0x310>
   8798c:	09b3      	lsrs	r3, r6, #6
   8798e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   87992:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   87996:	00c1      	lsls	r1, r0, #3
   87998:	4fb8      	ldr	r7, [pc, #736]	; (87c7c <_malloc_r+0x328>)
   8799a:	4439      	add	r1, r7
   8799c:	684c      	ldr	r4, [r1, #4]
   8799e:	3908      	subs	r1, #8
   879a0:	42a1      	cmp	r1, r4
   879a2:	d106      	bne.n	879b2 <_malloc_r+0x5e>
   879a4:	e00c      	b.n	879c0 <_malloc_r+0x6c>
   879a6:	2a00      	cmp	r2, #0
   879a8:	f280 80ab 	bge.w	87b02 <_malloc_r+0x1ae>
   879ac:	68e4      	ldr	r4, [r4, #12]
   879ae:	42a1      	cmp	r1, r4
   879b0:	d006      	beq.n	879c0 <_malloc_r+0x6c>
   879b2:	6863      	ldr	r3, [r4, #4]
   879b4:	f023 0303 	bic.w	r3, r3, #3
   879b8:	1b9a      	subs	r2, r3, r6
   879ba:	2a0f      	cmp	r2, #15
   879bc:	ddf3      	ble.n	879a6 <_malloc_r+0x52>
   879be:	4670      	mov	r0, lr
   879c0:	693c      	ldr	r4, [r7, #16]
   879c2:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 87c90 <_malloc_r+0x33c>
   879c6:	4574      	cmp	r4, lr
   879c8:	f000 819e 	beq.w	87d08 <_malloc_r+0x3b4>
   879cc:	6863      	ldr	r3, [r4, #4]
   879ce:	f023 0303 	bic.w	r3, r3, #3
   879d2:	1b9a      	subs	r2, r3, r6
   879d4:	2a0f      	cmp	r2, #15
   879d6:	f300 8183 	bgt.w	87ce0 <_malloc_r+0x38c>
   879da:	2a00      	cmp	r2, #0
   879dc:	f8c7 e014 	str.w	lr, [r7, #20]
   879e0:	f8c7 e010 	str.w	lr, [r7, #16]
   879e4:	f280 8091 	bge.w	87b0a <_malloc_r+0x1b6>
   879e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   879ec:	f080 8154 	bcs.w	87c98 <_malloc_r+0x344>
   879f0:	2201      	movs	r2, #1
   879f2:	08db      	lsrs	r3, r3, #3
   879f4:	6879      	ldr	r1, [r7, #4]
   879f6:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   879fa:	4413      	add	r3, r2
   879fc:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   87a00:	fa02 f20c 	lsl.w	r2, r2, ip
   87a04:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   87a08:	430a      	orrs	r2, r1
   87a0a:	f1ac 0108 	sub.w	r1, ip, #8
   87a0e:	60e1      	str	r1, [r4, #12]
   87a10:	f8c4 8008 	str.w	r8, [r4, #8]
   87a14:	607a      	str	r2, [r7, #4]
   87a16:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   87a1a:	f8c8 400c 	str.w	r4, [r8, #12]
   87a1e:	2401      	movs	r4, #1
   87a20:	1083      	asrs	r3, r0, #2
   87a22:	409c      	lsls	r4, r3
   87a24:	4294      	cmp	r4, r2
   87a26:	d87d      	bhi.n	87b24 <_malloc_r+0x1d0>
   87a28:	4214      	tst	r4, r2
   87a2a:	d106      	bne.n	87a3a <_malloc_r+0xe6>
   87a2c:	f020 0003 	bic.w	r0, r0, #3
   87a30:	0064      	lsls	r4, r4, #1
   87a32:	4214      	tst	r4, r2
   87a34:	f100 0004 	add.w	r0, r0, #4
   87a38:	d0fa      	beq.n	87a30 <_malloc_r+0xdc>
   87a3a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   87a3e:	46cc      	mov	ip, r9
   87a40:	4680      	mov	r8, r0
   87a42:	f8dc 300c 	ldr.w	r3, [ip, #12]
   87a46:	459c      	cmp	ip, r3
   87a48:	d107      	bne.n	87a5a <_malloc_r+0x106>
   87a4a:	e15f      	b.n	87d0c <_malloc_r+0x3b8>
   87a4c:	2a00      	cmp	r2, #0
   87a4e:	f280 816d 	bge.w	87d2c <_malloc_r+0x3d8>
   87a52:	68db      	ldr	r3, [r3, #12]
   87a54:	459c      	cmp	ip, r3
   87a56:	f000 8159 	beq.w	87d0c <_malloc_r+0x3b8>
   87a5a:	6859      	ldr	r1, [r3, #4]
   87a5c:	f021 0103 	bic.w	r1, r1, #3
   87a60:	1b8a      	subs	r2, r1, r6
   87a62:	2a0f      	cmp	r2, #15
   87a64:	ddf2      	ble.n	87a4c <_malloc_r+0xf8>
   87a66:	68dc      	ldr	r4, [r3, #12]
   87a68:	f8d3 c008 	ldr.w	ip, [r3, #8]
   87a6c:	f046 0801 	orr.w	r8, r6, #1
   87a70:	4628      	mov	r0, r5
   87a72:	441e      	add	r6, r3
   87a74:	f042 0501 	orr.w	r5, r2, #1
   87a78:	f8c3 8004 	str.w	r8, [r3, #4]
   87a7c:	f8cc 400c 	str.w	r4, [ip, #12]
   87a80:	f8c4 c008 	str.w	ip, [r4, #8]
   87a84:	617e      	str	r6, [r7, #20]
   87a86:	613e      	str	r6, [r7, #16]
   87a88:	f8c6 e00c 	str.w	lr, [r6, #12]
   87a8c:	f8c6 e008 	str.w	lr, [r6, #8]
   87a90:	6075      	str	r5, [r6, #4]
   87a92:	505a      	str	r2, [r3, r1]
   87a94:	9300      	str	r3, [sp, #0]
   87a96:	f000 fad7 	bl	88048 <__malloc_unlock>
   87a9a:	9b00      	ldr	r3, [sp, #0]
   87a9c:	f103 0408 	add.w	r4, r3, #8
   87aa0:	e01e      	b.n	87ae0 <_malloc_r+0x18c>
   87aa2:	2910      	cmp	r1, #16
   87aa4:	d820      	bhi.n	87ae8 <_malloc_r+0x194>
   87aa6:	f000 fac9 	bl	8803c <__malloc_lock>
   87aaa:	2610      	movs	r6, #16
   87aac:	2318      	movs	r3, #24
   87aae:	2002      	movs	r0, #2
   87ab0:	4f72      	ldr	r7, [pc, #456]	; (87c7c <_malloc_r+0x328>)
   87ab2:	443b      	add	r3, r7
   87ab4:	685c      	ldr	r4, [r3, #4]
   87ab6:	f1a3 0208 	sub.w	r2, r3, #8
   87aba:	4294      	cmp	r4, r2
   87abc:	f000 812f 	beq.w	87d1e <_malloc_r+0x3ca>
   87ac0:	6863      	ldr	r3, [r4, #4]
   87ac2:	68e1      	ldr	r1, [r4, #12]
   87ac4:	f023 0303 	bic.w	r3, r3, #3
   87ac8:	4423      	add	r3, r4
   87aca:	685a      	ldr	r2, [r3, #4]
   87acc:	68a6      	ldr	r6, [r4, #8]
   87ace:	f042 0201 	orr.w	r2, r2, #1
   87ad2:	60f1      	str	r1, [r6, #12]
   87ad4:	4628      	mov	r0, r5
   87ad6:	608e      	str	r6, [r1, #8]
   87ad8:	605a      	str	r2, [r3, #4]
   87ada:	f000 fab5 	bl	88048 <__malloc_unlock>
   87ade:	3408      	adds	r4, #8
   87ae0:	4620      	mov	r0, r4
   87ae2:	b003      	add	sp, #12
   87ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87ae8:	2400      	movs	r4, #0
   87aea:	230c      	movs	r3, #12
   87aec:	4620      	mov	r0, r4
   87aee:	602b      	str	r3, [r5, #0]
   87af0:	b003      	add	sp, #12
   87af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87af6:	2040      	movs	r0, #64	; 0x40
   87af8:	f44f 7100 	mov.w	r1, #512	; 0x200
   87afc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   87b00:	e74a      	b.n	87998 <_malloc_r+0x44>
   87b02:	4423      	add	r3, r4
   87b04:	685a      	ldr	r2, [r3, #4]
   87b06:	68e1      	ldr	r1, [r4, #12]
   87b08:	e7e0      	b.n	87acc <_malloc_r+0x178>
   87b0a:	4423      	add	r3, r4
   87b0c:	685a      	ldr	r2, [r3, #4]
   87b0e:	4628      	mov	r0, r5
   87b10:	f042 0201 	orr.w	r2, r2, #1
   87b14:	605a      	str	r2, [r3, #4]
   87b16:	3408      	adds	r4, #8
   87b18:	f000 fa96 	bl	88048 <__malloc_unlock>
   87b1c:	4620      	mov	r0, r4
   87b1e:	b003      	add	sp, #12
   87b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87b24:	68bc      	ldr	r4, [r7, #8]
   87b26:	6863      	ldr	r3, [r4, #4]
   87b28:	f023 0803 	bic.w	r8, r3, #3
   87b2c:	45b0      	cmp	r8, r6
   87b2e:	d304      	bcc.n	87b3a <_malloc_r+0x1e6>
   87b30:	eba8 0306 	sub.w	r3, r8, r6
   87b34:	2b0f      	cmp	r3, #15
   87b36:	f300 8085 	bgt.w	87c44 <_malloc_r+0x2f0>
   87b3a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 87c94 <_malloc_r+0x340>
   87b3e:	4b50      	ldr	r3, [pc, #320]	; (87c80 <_malloc_r+0x32c>)
   87b40:	f8d9 2000 	ldr.w	r2, [r9]
   87b44:	681b      	ldr	r3, [r3, #0]
   87b46:	3201      	adds	r2, #1
   87b48:	4433      	add	r3, r6
   87b4a:	eb04 0a08 	add.w	sl, r4, r8
   87b4e:	f000 8154 	beq.w	87dfa <_malloc_r+0x4a6>
   87b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   87b56:	330f      	adds	r3, #15
   87b58:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   87b5c:	f02b 0b0f 	bic.w	fp, fp, #15
   87b60:	4659      	mov	r1, fp
   87b62:	4628      	mov	r0, r5
   87b64:	f000 fd72 	bl	8864c <_sbrk_r>
   87b68:	1c41      	adds	r1, r0, #1
   87b6a:	4602      	mov	r2, r0
   87b6c:	f000 80fb 	beq.w	87d66 <_malloc_r+0x412>
   87b70:	4582      	cmp	sl, r0
   87b72:	f200 80f6 	bhi.w	87d62 <_malloc_r+0x40e>
   87b76:	4b43      	ldr	r3, [pc, #268]	; (87c84 <_malloc_r+0x330>)
   87b78:	6819      	ldr	r1, [r3, #0]
   87b7a:	4459      	add	r1, fp
   87b7c:	6019      	str	r1, [r3, #0]
   87b7e:	f000 814c 	beq.w	87e1a <_malloc_r+0x4c6>
   87b82:	f8d9 0000 	ldr.w	r0, [r9]
   87b86:	3001      	adds	r0, #1
   87b88:	bf1b      	ittet	ne
   87b8a:	eba2 0a0a 	subne.w	sl, r2, sl
   87b8e:	4451      	addne	r1, sl
   87b90:	f8c9 2000 	streq.w	r2, [r9]
   87b94:	6019      	strne	r1, [r3, #0]
   87b96:	f012 0107 	ands.w	r1, r2, #7
   87b9a:	f000 8114 	beq.w	87dc6 <_malloc_r+0x472>
   87b9e:	f1c1 0008 	rsb	r0, r1, #8
   87ba2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   87ba6:	4402      	add	r2, r0
   87ba8:	3108      	adds	r1, #8
   87baa:	eb02 090b 	add.w	r9, r2, fp
   87bae:	f3c9 090b 	ubfx	r9, r9, #0, #12
   87bb2:	eba1 0909 	sub.w	r9, r1, r9
   87bb6:	4649      	mov	r1, r9
   87bb8:	4628      	mov	r0, r5
   87bba:	9301      	str	r3, [sp, #4]
   87bbc:	9200      	str	r2, [sp, #0]
   87bbe:	f000 fd45 	bl	8864c <_sbrk_r>
   87bc2:	1c43      	adds	r3, r0, #1
   87bc4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   87bc8:	f000 8142 	beq.w	87e50 <_malloc_r+0x4fc>
   87bcc:	1a80      	subs	r0, r0, r2
   87bce:	4448      	add	r0, r9
   87bd0:	f040 0001 	orr.w	r0, r0, #1
   87bd4:	6819      	ldr	r1, [r3, #0]
   87bd6:	42bc      	cmp	r4, r7
   87bd8:	4449      	add	r1, r9
   87bda:	60ba      	str	r2, [r7, #8]
   87bdc:	6019      	str	r1, [r3, #0]
   87bde:	6050      	str	r0, [r2, #4]
   87be0:	d017      	beq.n	87c12 <_malloc_r+0x2be>
   87be2:	f1b8 0f0f 	cmp.w	r8, #15
   87be6:	f240 80fa 	bls.w	87dde <_malloc_r+0x48a>
   87bea:	f04f 0c05 	mov.w	ip, #5
   87bee:	6862      	ldr	r2, [r4, #4]
   87bf0:	f1a8 000c 	sub.w	r0, r8, #12
   87bf4:	f020 0007 	bic.w	r0, r0, #7
   87bf8:	f002 0201 	and.w	r2, r2, #1
   87bfc:	eb04 0e00 	add.w	lr, r4, r0
   87c00:	4302      	orrs	r2, r0
   87c02:	280f      	cmp	r0, #15
   87c04:	6062      	str	r2, [r4, #4]
   87c06:	f8ce c004 	str.w	ip, [lr, #4]
   87c0a:	f8ce c008 	str.w	ip, [lr, #8]
   87c0e:	f200 8116 	bhi.w	87e3e <_malloc_r+0x4ea>
   87c12:	4b1d      	ldr	r3, [pc, #116]	; (87c88 <_malloc_r+0x334>)
   87c14:	68bc      	ldr	r4, [r7, #8]
   87c16:	681a      	ldr	r2, [r3, #0]
   87c18:	4291      	cmp	r1, r2
   87c1a:	bf88      	it	hi
   87c1c:	6019      	strhi	r1, [r3, #0]
   87c1e:	4b1b      	ldr	r3, [pc, #108]	; (87c8c <_malloc_r+0x338>)
   87c20:	681a      	ldr	r2, [r3, #0]
   87c22:	4291      	cmp	r1, r2
   87c24:	6862      	ldr	r2, [r4, #4]
   87c26:	bf88      	it	hi
   87c28:	6019      	strhi	r1, [r3, #0]
   87c2a:	f022 0203 	bic.w	r2, r2, #3
   87c2e:	4296      	cmp	r6, r2
   87c30:	eba2 0306 	sub.w	r3, r2, r6
   87c34:	d801      	bhi.n	87c3a <_malloc_r+0x2e6>
   87c36:	2b0f      	cmp	r3, #15
   87c38:	dc04      	bgt.n	87c44 <_malloc_r+0x2f0>
   87c3a:	4628      	mov	r0, r5
   87c3c:	f000 fa04 	bl	88048 <__malloc_unlock>
   87c40:	2400      	movs	r4, #0
   87c42:	e74d      	b.n	87ae0 <_malloc_r+0x18c>
   87c44:	f046 0201 	orr.w	r2, r6, #1
   87c48:	f043 0301 	orr.w	r3, r3, #1
   87c4c:	4426      	add	r6, r4
   87c4e:	6062      	str	r2, [r4, #4]
   87c50:	4628      	mov	r0, r5
   87c52:	60be      	str	r6, [r7, #8]
   87c54:	3408      	adds	r4, #8
   87c56:	6073      	str	r3, [r6, #4]
   87c58:	f000 f9f6 	bl	88048 <__malloc_unlock>
   87c5c:	4620      	mov	r0, r4
   87c5e:	b003      	add	sp, #12
   87c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87c64:	2b14      	cmp	r3, #20
   87c66:	d970      	bls.n	87d4a <_malloc_r+0x3f6>
   87c68:	2b54      	cmp	r3, #84	; 0x54
   87c6a:	f200 80a2 	bhi.w	87db2 <_malloc_r+0x45e>
   87c6e:	0b33      	lsrs	r3, r6, #12
   87c70:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   87c74:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   87c78:	00c1      	lsls	r1, r0, #3
   87c7a:	e68d      	b.n	87998 <_malloc_r+0x44>
   87c7c:	20000bd0 	.word	0x20000bd0
   87c80:	200011bc 	.word	0x200011bc
   87c84:	2000118c 	.word	0x2000118c
   87c88:	200011b4 	.word	0x200011b4
   87c8c:	200011b8 	.word	0x200011b8
   87c90:	20000bd8 	.word	0x20000bd8
   87c94:	20000fd8 	.word	0x20000fd8
   87c98:	0a5a      	lsrs	r2, r3, #9
   87c9a:	2a04      	cmp	r2, #4
   87c9c:	d95b      	bls.n	87d56 <_malloc_r+0x402>
   87c9e:	2a14      	cmp	r2, #20
   87ca0:	f200 80ae 	bhi.w	87e00 <_malloc_r+0x4ac>
   87ca4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   87ca8:	00c9      	lsls	r1, r1, #3
   87caa:	325b      	adds	r2, #91	; 0x5b
   87cac:	eb07 0c01 	add.w	ip, r7, r1
   87cb0:	5879      	ldr	r1, [r7, r1]
   87cb2:	f1ac 0c08 	sub.w	ip, ip, #8
   87cb6:	458c      	cmp	ip, r1
   87cb8:	f000 8088 	beq.w	87dcc <_malloc_r+0x478>
   87cbc:	684a      	ldr	r2, [r1, #4]
   87cbe:	f022 0203 	bic.w	r2, r2, #3
   87cc2:	4293      	cmp	r3, r2
   87cc4:	d273      	bcs.n	87dae <_malloc_r+0x45a>
   87cc6:	6889      	ldr	r1, [r1, #8]
   87cc8:	458c      	cmp	ip, r1
   87cca:	d1f7      	bne.n	87cbc <_malloc_r+0x368>
   87ccc:	f8dc 300c 	ldr.w	r3, [ip, #12]
   87cd0:	687a      	ldr	r2, [r7, #4]
   87cd2:	60e3      	str	r3, [r4, #12]
   87cd4:	f8c4 c008 	str.w	ip, [r4, #8]
   87cd8:	609c      	str	r4, [r3, #8]
   87cda:	f8cc 400c 	str.w	r4, [ip, #12]
   87cde:	e69e      	b.n	87a1e <_malloc_r+0xca>
   87ce0:	f046 0c01 	orr.w	ip, r6, #1
   87ce4:	f042 0101 	orr.w	r1, r2, #1
   87ce8:	4426      	add	r6, r4
   87cea:	f8c4 c004 	str.w	ip, [r4, #4]
   87cee:	4628      	mov	r0, r5
   87cf0:	617e      	str	r6, [r7, #20]
   87cf2:	613e      	str	r6, [r7, #16]
   87cf4:	f8c6 e00c 	str.w	lr, [r6, #12]
   87cf8:	f8c6 e008 	str.w	lr, [r6, #8]
   87cfc:	6071      	str	r1, [r6, #4]
   87cfe:	50e2      	str	r2, [r4, r3]
   87d00:	f000 f9a2 	bl	88048 <__malloc_unlock>
   87d04:	3408      	adds	r4, #8
   87d06:	e6eb      	b.n	87ae0 <_malloc_r+0x18c>
   87d08:	687a      	ldr	r2, [r7, #4]
   87d0a:	e688      	b.n	87a1e <_malloc_r+0xca>
   87d0c:	f108 0801 	add.w	r8, r8, #1
   87d10:	f018 0f03 	tst.w	r8, #3
   87d14:	f10c 0c08 	add.w	ip, ip, #8
   87d18:	f47f ae93 	bne.w	87a42 <_malloc_r+0xee>
   87d1c:	e02d      	b.n	87d7a <_malloc_r+0x426>
   87d1e:	68dc      	ldr	r4, [r3, #12]
   87d20:	42a3      	cmp	r3, r4
   87d22:	bf08      	it	eq
   87d24:	3002      	addeq	r0, #2
   87d26:	f43f ae4b 	beq.w	879c0 <_malloc_r+0x6c>
   87d2a:	e6c9      	b.n	87ac0 <_malloc_r+0x16c>
   87d2c:	461c      	mov	r4, r3
   87d2e:	4419      	add	r1, r3
   87d30:	684a      	ldr	r2, [r1, #4]
   87d32:	68db      	ldr	r3, [r3, #12]
   87d34:	f854 6f08 	ldr.w	r6, [r4, #8]!
   87d38:	f042 0201 	orr.w	r2, r2, #1
   87d3c:	604a      	str	r2, [r1, #4]
   87d3e:	4628      	mov	r0, r5
   87d40:	60f3      	str	r3, [r6, #12]
   87d42:	609e      	str	r6, [r3, #8]
   87d44:	f000 f980 	bl	88048 <__malloc_unlock>
   87d48:	e6ca      	b.n	87ae0 <_malloc_r+0x18c>
   87d4a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   87d4e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   87d52:	00c1      	lsls	r1, r0, #3
   87d54:	e620      	b.n	87998 <_malloc_r+0x44>
   87d56:	099a      	lsrs	r2, r3, #6
   87d58:	f102 0139 	add.w	r1, r2, #57	; 0x39
   87d5c:	00c9      	lsls	r1, r1, #3
   87d5e:	3238      	adds	r2, #56	; 0x38
   87d60:	e7a4      	b.n	87cac <_malloc_r+0x358>
   87d62:	42bc      	cmp	r4, r7
   87d64:	d054      	beq.n	87e10 <_malloc_r+0x4bc>
   87d66:	68bc      	ldr	r4, [r7, #8]
   87d68:	6862      	ldr	r2, [r4, #4]
   87d6a:	f022 0203 	bic.w	r2, r2, #3
   87d6e:	e75e      	b.n	87c2e <_malloc_r+0x2da>
   87d70:	f859 3908 	ldr.w	r3, [r9], #-8
   87d74:	4599      	cmp	r9, r3
   87d76:	f040 8086 	bne.w	87e86 <_malloc_r+0x532>
   87d7a:	f010 0f03 	tst.w	r0, #3
   87d7e:	f100 30ff 	add.w	r0, r0, #4294967295
   87d82:	d1f5      	bne.n	87d70 <_malloc_r+0x41c>
   87d84:	687b      	ldr	r3, [r7, #4]
   87d86:	ea23 0304 	bic.w	r3, r3, r4
   87d8a:	607b      	str	r3, [r7, #4]
   87d8c:	0064      	lsls	r4, r4, #1
   87d8e:	429c      	cmp	r4, r3
   87d90:	f63f aec8 	bhi.w	87b24 <_malloc_r+0x1d0>
   87d94:	2c00      	cmp	r4, #0
   87d96:	f43f aec5 	beq.w	87b24 <_malloc_r+0x1d0>
   87d9a:	421c      	tst	r4, r3
   87d9c:	4640      	mov	r0, r8
   87d9e:	f47f ae4c 	bne.w	87a3a <_malloc_r+0xe6>
   87da2:	0064      	lsls	r4, r4, #1
   87da4:	421c      	tst	r4, r3
   87da6:	f100 0004 	add.w	r0, r0, #4
   87daa:	d0fa      	beq.n	87da2 <_malloc_r+0x44e>
   87dac:	e645      	b.n	87a3a <_malloc_r+0xe6>
   87dae:	468c      	mov	ip, r1
   87db0:	e78c      	b.n	87ccc <_malloc_r+0x378>
   87db2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   87db6:	d815      	bhi.n	87de4 <_malloc_r+0x490>
   87db8:	0bf3      	lsrs	r3, r6, #15
   87dba:	f103 0078 	add.w	r0, r3, #120	; 0x78
   87dbe:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   87dc2:	00c1      	lsls	r1, r0, #3
   87dc4:	e5e8      	b.n	87998 <_malloc_r+0x44>
   87dc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   87dca:	e6ee      	b.n	87baa <_malloc_r+0x256>
   87dcc:	2101      	movs	r1, #1
   87dce:	687b      	ldr	r3, [r7, #4]
   87dd0:	1092      	asrs	r2, r2, #2
   87dd2:	fa01 f202 	lsl.w	r2, r1, r2
   87dd6:	431a      	orrs	r2, r3
   87dd8:	607a      	str	r2, [r7, #4]
   87dda:	4663      	mov	r3, ip
   87ddc:	e779      	b.n	87cd2 <_malloc_r+0x37e>
   87dde:	2301      	movs	r3, #1
   87de0:	6053      	str	r3, [r2, #4]
   87de2:	e72a      	b.n	87c3a <_malloc_r+0x2e6>
   87de4:	f240 5254 	movw	r2, #1364	; 0x554
   87de8:	4293      	cmp	r3, r2
   87dea:	d822      	bhi.n	87e32 <_malloc_r+0x4de>
   87dec:	0cb3      	lsrs	r3, r6, #18
   87dee:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   87df2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   87df6:	00c1      	lsls	r1, r0, #3
   87df8:	e5ce      	b.n	87998 <_malloc_r+0x44>
   87dfa:	f103 0b10 	add.w	fp, r3, #16
   87dfe:	e6af      	b.n	87b60 <_malloc_r+0x20c>
   87e00:	2a54      	cmp	r2, #84	; 0x54
   87e02:	d829      	bhi.n	87e58 <_malloc_r+0x504>
   87e04:	0b1a      	lsrs	r2, r3, #12
   87e06:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   87e0a:	00c9      	lsls	r1, r1, #3
   87e0c:	326e      	adds	r2, #110	; 0x6e
   87e0e:	e74d      	b.n	87cac <_malloc_r+0x358>
   87e10:	4b20      	ldr	r3, [pc, #128]	; (87e94 <_malloc_r+0x540>)
   87e12:	6819      	ldr	r1, [r3, #0]
   87e14:	4459      	add	r1, fp
   87e16:	6019      	str	r1, [r3, #0]
   87e18:	e6b3      	b.n	87b82 <_malloc_r+0x22e>
   87e1a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   87e1e:	2800      	cmp	r0, #0
   87e20:	f47f aeaf 	bne.w	87b82 <_malloc_r+0x22e>
   87e24:	eb08 030b 	add.w	r3, r8, fp
   87e28:	68ba      	ldr	r2, [r7, #8]
   87e2a:	f043 0301 	orr.w	r3, r3, #1
   87e2e:	6053      	str	r3, [r2, #4]
   87e30:	e6ef      	b.n	87c12 <_malloc_r+0x2be>
   87e32:	207f      	movs	r0, #127	; 0x7f
   87e34:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   87e38:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   87e3c:	e5ac      	b.n	87998 <_malloc_r+0x44>
   87e3e:	f104 0108 	add.w	r1, r4, #8
   87e42:	4628      	mov	r0, r5
   87e44:	9300      	str	r3, [sp, #0]
   87e46:	f000 fd7f 	bl	88948 <_free_r>
   87e4a:	9b00      	ldr	r3, [sp, #0]
   87e4c:	6819      	ldr	r1, [r3, #0]
   87e4e:	e6e0      	b.n	87c12 <_malloc_r+0x2be>
   87e50:	2001      	movs	r0, #1
   87e52:	f04f 0900 	mov.w	r9, #0
   87e56:	e6bd      	b.n	87bd4 <_malloc_r+0x280>
   87e58:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   87e5c:	d805      	bhi.n	87e6a <_malloc_r+0x516>
   87e5e:	0bda      	lsrs	r2, r3, #15
   87e60:	f102 0178 	add.w	r1, r2, #120	; 0x78
   87e64:	00c9      	lsls	r1, r1, #3
   87e66:	3277      	adds	r2, #119	; 0x77
   87e68:	e720      	b.n	87cac <_malloc_r+0x358>
   87e6a:	f240 5154 	movw	r1, #1364	; 0x554
   87e6e:	428a      	cmp	r2, r1
   87e70:	d805      	bhi.n	87e7e <_malloc_r+0x52a>
   87e72:	0c9a      	lsrs	r2, r3, #18
   87e74:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   87e78:	00c9      	lsls	r1, r1, #3
   87e7a:	327c      	adds	r2, #124	; 0x7c
   87e7c:	e716      	b.n	87cac <_malloc_r+0x358>
   87e7e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   87e82:	227e      	movs	r2, #126	; 0x7e
   87e84:	e712      	b.n	87cac <_malloc_r+0x358>
   87e86:	687b      	ldr	r3, [r7, #4]
   87e88:	e780      	b.n	87d8c <_malloc_r+0x438>
   87e8a:	08f0      	lsrs	r0, r6, #3
   87e8c:	f106 0308 	add.w	r3, r6, #8
   87e90:	e60e      	b.n	87ab0 <_malloc_r+0x15c>
   87e92:	bf00      	nop
   87e94:	2000118c 	.word	0x2000118c

00087e98 <__ascii_mbtowc>:
   87e98:	b082      	sub	sp, #8
   87e9a:	b149      	cbz	r1, 87eb0 <__ascii_mbtowc+0x18>
   87e9c:	b15a      	cbz	r2, 87eb6 <__ascii_mbtowc+0x1e>
   87e9e:	b16b      	cbz	r3, 87ebc <__ascii_mbtowc+0x24>
   87ea0:	7813      	ldrb	r3, [r2, #0]
   87ea2:	600b      	str	r3, [r1, #0]
   87ea4:	7812      	ldrb	r2, [r2, #0]
   87ea6:	1c10      	adds	r0, r2, #0
   87ea8:	bf18      	it	ne
   87eaa:	2001      	movne	r0, #1
   87eac:	b002      	add	sp, #8
   87eae:	4770      	bx	lr
   87eb0:	a901      	add	r1, sp, #4
   87eb2:	2a00      	cmp	r2, #0
   87eb4:	d1f3      	bne.n	87e9e <__ascii_mbtowc+0x6>
   87eb6:	4610      	mov	r0, r2
   87eb8:	b002      	add	sp, #8
   87eba:	4770      	bx	lr
   87ebc:	f06f 0001 	mvn.w	r0, #1
   87ec0:	e7f4      	b.n	87eac <__ascii_mbtowc+0x14>
   87ec2:	bf00      	nop

00087ec4 <memchr>:
   87ec4:	0783      	lsls	r3, r0, #30
   87ec6:	b470      	push	{r4, r5, r6}
   87ec8:	b2cd      	uxtb	r5, r1
   87eca:	d03d      	beq.n	87f48 <memchr+0x84>
   87ecc:	1e54      	subs	r4, r2, #1
   87ece:	b30a      	cbz	r2, 87f14 <memchr+0x50>
   87ed0:	7803      	ldrb	r3, [r0, #0]
   87ed2:	42ab      	cmp	r3, r5
   87ed4:	d01f      	beq.n	87f16 <memchr+0x52>
   87ed6:	1c43      	adds	r3, r0, #1
   87ed8:	e005      	b.n	87ee6 <memchr+0x22>
   87eda:	f114 34ff 	adds.w	r4, r4, #4294967295
   87ede:	d319      	bcc.n	87f14 <memchr+0x50>
   87ee0:	7802      	ldrb	r2, [r0, #0]
   87ee2:	42aa      	cmp	r2, r5
   87ee4:	d017      	beq.n	87f16 <memchr+0x52>
   87ee6:	f013 0f03 	tst.w	r3, #3
   87eea:	4618      	mov	r0, r3
   87eec:	f103 0301 	add.w	r3, r3, #1
   87ef0:	d1f3      	bne.n	87eda <memchr+0x16>
   87ef2:	2c03      	cmp	r4, #3
   87ef4:	d811      	bhi.n	87f1a <memchr+0x56>
   87ef6:	b34c      	cbz	r4, 87f4c <memchr+0x88>
   87ef8:	7803      	ldrb	r3, [r0, #0]
   87efa:	42ab      	cmp	r3, r5
   87efc:	d00b      	beq.n	87f16 <memchr+0x52>
   87efe:	4404      	add	r4, r0
   87f00:	1c43      	adds	r3, r0, #1
   87f02:	e002      	b.n	87f0a <memchr+0x46>
   87f04:	7802      	ldrb	r2, [r0, #0]
   87f06:	42aa      	cmp	r2, r5
   87f08:	d005      	beq.n	87f16 <memchr+0x52>
   87f0a:	429c      	cmp	r4, r3
   87f0c:	4618      	mov	r0, r3
   87f0e:	f103 0301 	add.w	r3, r3, #1
   87f12:	d1f7      	bne.n	87f04 <memchr+0x40>
   87f14:	2000      	movs	r0, #0
   87f16:	bc70      	pop	{r4, r5, r6}
   87f18:	4770      	bx	lr
   87f1a:	0209      	lsls	r1, r1, #8
   87f1c:	b289      	uxth	r1, r1
   87f1e:	4329      	orrs	r1, r5
   87f20:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   87f24:	6803      	ldr	r3, [r0, #0]
   87f26:	4606      	mov	r6, r0
   87f28:	404b      	eors	r3, r1
   87f2a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   87f2e:	ea22 0303 	bic.w	r3, r2, r3
   87f32:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   87f36:	f100 0004 	add.w	r0, r0, #4
   87f3a:	d103      	bne.n	87f44 <memchr+0x80>
   87f3c:	3c04      	subs	r4, #4
   87f3e:	2c03      	cmp	r4, #3
   87f40:	d8f0      	bhi.n	87f24 <memchr+0x60>
   87f42:	e7d8      	b.n	87ef6 <memchr+0x32>
   87f44:	4630      	mov	r0, r6
   87f46:	e7d7      	b.n	87ef8 <memchr+0x34>
   87f48:	4614      	mov	r4, r2
   87f4a:	e7d2      	b.n	87ef2 <memchr+0x2e>
   87f4c:	4620      	mov	r0, r4
   87f4e:	e7e2      	b.n	87f16 <memchr+0x52>

00087f50 <memcpy>:
   87f50:	4684      	mov	ip, r0
   87f52:	ea41 0300 	orr.w	r3, r1, r0
   87f56:	f013 0303 	ands.w	r3, r3, #3
   87f5a:	d149      	bne.n	87ff0 <memcpy+0xa0>
   87f5c:	3a40      	subs	r2, #64	; 0x40
   87f5e:	d323      	bcc.n	87fa8 <memcpy+0x58>
   87f60:	680b      	ldr	r3, [r1, #0]
   87f62:	6003      	str	r3, [r0, #0]
   87f64:	684b      	ldr	r3, [r1, #4]
   87f66:	6043      	str	r3, [r0, #4]
   87f68:	688b      	ldr	r3, [r1, #8]
   87f6a:	6083      	str	r3, [r0, #8]
   87f6c:	68cb      	ldr	r3, [r1, #12]
   87f6e:	60c3      	str	r3, [r0, #12]
   87f70:	690b      	ldr	r3, [r1, #16]
   87f72:	6103      	str	r3, [r0, #16]
   87f74:	694b      	ldr	r3, [r1, #20]
   87f76:	6143      	str	r3, [r0, #20]
   87f78:	698b      	ldr	r3, [r1, #24]
   87f7a:	6183      	str	r3, [r0, #24]
   87f7c:	69cb      	ldr	r3, [r1, #28]
   87f7e:	61c3      	str	r3, [r0, #28]
   87f80:	6a0b      	ldr	r3, [r1, #32]
   87f82:	6203      	str	r3, [r0, #32]
   87f84:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   87f86:	6243      	str	r3, [r0, #36]	; 0x24
   87f88:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   87f8a:	6283      	str	r3, [r0, #40]	; 0x28
   87f8c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   87f8e:	62c3      	str	r3, [r0, #44]	; 0x2c
   87f90:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   87f92:	6303      	str	r3, [r0, #48]	; 0x30
   87f94:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   87f96:	6343      	str	r3, [r0, #52]	; 0x34
   87f98:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   87f9a:	6383      	str	r3, [r0, #56]	; 0x38
   87f9c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   87f9e:	63c3      	str	r3, [r0, #60]	; 0x3c
   87fa0:	3040      	adds	r0, #64	; 0x40
   87fa2:	3140      	adds	r1, #64	; 0x40
   87fa4:	3a40      	subs	r2, #64	; 0x40
   87fa6:	d2db      	bcs.n	87f60 <memcpy+0x10>
   87fa8:	3230      	adds	r2, #48	; 0x30
   87faa:	d30b      	bcc.n	87fc4 <memcpy+0x74>
   87fac:	680b      	ldr	r3, [r1, #0]
   87fae:	6003      	str	r3, [r0, #0]
   87fb0:	684b      	ldr	r3, [r1, #4]
   87fb2:	6043      	str	r3, [r0, #4]
   87fb4:	688b      	ldr	r3, [r1, #8]
   87fb6:	6083      	str	r3, [r0, #8]
   87fb8:	68cb      	ldr	r3, [r1, #12]
   87fba:	60c3      	str	r3, [r0, #12]
   87fbc:	3010      	adds	r0, #16
   87fbe:	3110      	adds	r1, #16
   87fc0:	3a10      	subs	r2, #16
   87fc2:	d2f3      	bcs.n	87fac <memcpy+0x5c>
   87fc4:	320c      	adds	r2, #12
   87fc6:	d305      	bcc.n	87fd4 <memcpy+0x84>
   87fc8:	f851 3b04 	ldr.w	r3, [r1], #4
   87fcc:	f840 3b04 	str.w	r3, [r0], #4
   87fd0:	3a04      	subs	r2, #4
   87fd2:	d2f9      	bcs.n	87fc8 <memcpy+0x78>
   87fd4:	3204      	adds	r2, #4
   87fd6:	d008      	beq.n	87fea <memcpy+0x9a>
   87fd8:	07d2      	lsls	r2, r2, #31
   87fda:	bf1c      	itt	ne
   87fdc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87fe0:	f800 3b01 	strbne.w	r3, [r0], #1
   87fe4:	d301      	bcc.n	87fea <memcpy+0x9a>
   87fe6:	880b      	ldrh	r3, [r1, #0]
   87fe8:	8003      	strh	r3, [r0, #0]
   87fea:	4660      	mov	r0, ip
   87fec:	4770      	bx	lr
   87fee:	bf00      	nop
   87ff0:	2a08      	cmp	r2, #8
   87ff2:	d313      	bcc.n	8801c <memcpy+0xcc>
   87ff4:	078b      	lsls	r3, r1, #30
   87ff6:	d0b1      	beq.n	87f5c <memcpy+0xc>
   87ff8:	f010 0303 	ands.w	r3, r0, #3
   87ffc:	d0ae      	beq.n	87f5c <memcpy+0xc>
   87ffe:	f1c3 0304 	rsb	r3, r3, #4
   88002:	1ad2      	subs	r2, r2, r3
   88004:	07db      	lsls	r3, r3, #31
   88006:	bf1c      	itt	ne
   88008:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8800c:	f800 3b01 	strbne.w	r3, [r0], #1
   88010:	d3a4      	bcc.n	87f5c <memcpy+0xc>
   88012:	f831 3b02 	ldrh.w	r3, [r1], #2
   88016:	f820 3b02 	strh.w	r3, [r0], #2
   8801a:	e79f      	b.n	87f5c <memcpy+0xc>
   8801c:	3a04      	subs	r2, #4
   8801e:	d3d9      	bcc.n	87fd4 <memcpy+0x84>
   88020:	3a01      	subs	r2, #1
   88022:	f811 3b01 	ldrb.w	r3, [r1], #1
   88026:	f800 3b01 	strb.w	r3, [r0], #1
   8802a:	d2f9      	bcs.n	88020 <memcpy+0xd0>
   8802c:	780b      	ldrb	r3, [r1, #0]
   8802e:	7003      	strb	r3, [r0, #0]
   88030:	784b      	ldrb	r3, [r1, #1]
   88032:	7043      	strb	r3, [r0, #1]
   88034:	788b      	ldrb	r3, [r1, #2]
   88036:	7083      	strb	r3, [r0, #2]
   88038:	4660      	mov	r0, ip
   8803a:	4770      	bx	lr

0008803c <__malloc_lock>:
   8803c:	4801      	ldr	r0, [pc, #4]	; (88044 <__malloc_lock+0x8>)
   8803e:	f7ff bc85 	b.w	8794c <__retarget_lock_acquire_recursive>
   88042:	bf00      	nop
   88044:	20002a04 	.word	0x20002a04

00088048 <__malloc_unlock>:
   88048:	4801      	ldr	r0, [pc, #4]	; (88050 <__malloc_unlock+0x8>)
   8804a:	f7ff bc81 	b.w	87950 <__retarget_lock_release_recursive>
   8804e:	bf00      	nop
   88050:	20002a04 	.word	0x20002a04

00088054 <_Balloc>:
   88054:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88056:	b570      	push	{r4, r5, r6, lr}
   88058:	4605      	mov	r5, r0
   8805a:	460c      	mov	r4, r1
   8805c:	b14b      	cbz	r3, 88072 <_Balloc+0x1e>
   8805e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   88062:	b180      	cbz	r0, 88086 <_Balloc+0x32>
   88064:	6802      	ldr	r2, [r0, #0]
   88066:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8806a:	2300      	movs	r3, #0
   8806c:	6103      	str	r3, [r0, #16]
   8806e:	60c3      	str	r3, [r0, #12]
   88070:	bd70      	pop	{r4, r5, r6, pc}
   88072:	2221      	movs	r2, #33	; 0x21
   88074:	2104      	movs	r1, #4
   88076:	f000 fbe7 	bl	88848 <_calloc_r>
   8807a:	64e8      	str	r0, [r5, #76]	; 0x4c
   8807c:	4603      	mov	r3, r0
   8807e:	2800      	cmp	r0, #0
   88080:	d1ed      	bne.n	8805e <_Balloc+0xa>
   88082:	2000      	movs	r0, #0
   88084:	bd70      	pop	{r4, r5, r6, pc}
   88086:	2101      	movs	r1, #1
   88088:	fa01 f604 	lsl.w	r6, r1, r4
   8808c:	1d72      	adds	r2, r6, #5
   8808e:	4628      	mov	r0, r5
   88090:	0092      	lsls	r2, r2, #2
   88092:	f000 fbd9 	bl	88848 <_calloc_r>
   88096:	2800      	cmp	r0, #0
   88098:	d0f3      	beq.n	88082 <_Balloc+0x2e>
   8809a:	6044      	str	r4, [r0, #4]
   8809c:	6086      	str	r6, [r0, #8]
   8809e:	e7e4      	b.n	8806a <_Balloc+0x16>

000880a0 <_Bfree>:
   880a0:	b131      	cbz	r1, 880b0 <_Bfree+0x10>
   880a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   880a4:	684a      	ldr	r2, [r1, #4]
   880a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   880aa:	6008      	str	r0, [r1, #0]
   880ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   880b0:	4770      	bx	lr
   880b2:	bf00      	nop

000880b4 <__multadd>:
   880b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   880b6:	460c      	mov	r4, r1
   880b8:	4605      	mov	r5, r0
   880ba:	f04f 0e00 	mov.w	lr, #0
   880be:	690e      	ldr	r6, [r1, #16]
   880c0:	b083      	sub	sp, #12
   880c2:	f101 0714 	add.w	r7, r1, #20
   880c6:	6838      	ldr	r0, [r7, #0]
   880c8:	f10e 0e01 	add.w	lr, lr, #1
   880cc:	b281      	uxth	r1, r0
   880ce:	fb02 3301 	mla	r3, r2, r1, r3
   880d2:	0c01      	lsrs	r1, r0, #16
   880d4:	0c18      	lsrs	r0, r3, #16
   880d6:	fb02 0101 	mla	r1, r2, r1, r0
   880da:	b29b      	uxth	r3, r3
   880dc:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   880e0:	4576      	cmp	r6, lr
   880e2:	f847 3b04 	str.w	r3, [r7], #4
   880e6:	ea4f 4311 	mov.w	r3, r1, lsr #16
   880ea:	dcec      	bgt.n	880c6 <__multadd+0x12>
   880ec:	b13b      	cbz	r3, 880fe <__multadd+0x4a>
   880ee:	68a2      	ldr	r2, [r4, #8]
   880f0:	4296      	cmp	r6, r2
   880f2:	da07      	bge.n	88104 <__multadd+0x50>
   880f4:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   880f8:	3601      	adds	r6, #1
   880fa:	6153      	str	r3, [r2, #20]
   880fc:	6126      	str	r6, [r4, #16]
   880fe:	4620      	mov	r0, r4
   88100:	b003      	add	sp, #12
   88102:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88104:	6861      	ldr	r1, [r4, #4]
   88106:	4628      	mov	r0, r5
   88108:	3101      	adds	r1, #1
   8810a:	9301      	str	r3, [sp, #4]
   8810c:	f7ff ffa2 	bl	88054 <_Balloc>
   88110:	4607      	mov	r7, r0
   88112:	6922      	ldr	r2, [r4, #16]
   88114:	f104 010c 	add.w	r1, r4, #12
   88118:	3202      	adds	r2, #2
   8811a:	0092      	lsls	r2, r2, #2
   8811c:	300c      	adds	r0, #12
   8811e:	f7ff ff17 	bl	87f50 <memcpy>
   88122:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   88124:	6861      	ldr	r1, [r4, #4]
   88126:	9b01      	ldr	r3, [sp, #4]
   88128:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   8812c:	6020      	str	r0, [r4, #0]
   8812e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   88132:	463c      	mov	r4, r7
   88134:	e7de      	b.n	880f4 <__multadd+0x40>
   88136:	bf00      	nop

00088138 <__hi0bits>:
   88138:	0c02      	lsrs	r2, r0, #16
   8813a:	0412      	lsls	r2, r2, #16
   8813c:	4603      	mov	r3, r0
   8813e:	b9b2      	cbnz	r2, 8816e <__hi0bits+0x36>
   88140:	0403      	lsls	r3, r0, #16
   88142:	2010      	movs	r0, #16
   88144:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   88148:	bf04      	itt	eq
   8814a:	021b      	lsleq	r3, r3, #8
   8814c:	3008      	addeq	r0, #8
   8814e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   88152:	bf04      	itt	eq
   88154:	011b      	lsleq	r3, r3, #4
   88156:	3004      	addeq	r0, #4
   88158:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8815c:	bf04      	itt	eq
   8815e:	009b      	lsleq	r3, r3, #2
   88160:	3002      	addeq	r0, #2
   88162:	2b00      	cmp	r3, #0
   88164:	db02      	blt.n	8816c <__hi0bits+0x34>
   88166:	005b      	lsls	r3, r3, #1
   88168:	d403      	bmi.n	88172 <__hi0bits+0x3a>
   8816a:	2020      	movs	r0, #32
   8816c:	4770      	bx	lr
   8816e:	2000      	movs	r0, #0
   88170:	e7e8      	b.n	88144 <__hi0bits+0xc>
   88172:	3001      	adds	r0, #1
   88174:	4770      	bx	lr
   88176:	bf00      	nop

00088178 <__lo0bits>:
   88178:	6803      	ldr	r3, [r0, #0]
   8817a:	4601      	mov	r1, r0
   8817c:	f013 0207 	ands.w	r2, r3, #7
   88180:	d007      	beq.n	88192 <__lo0bits+0x1a>
   88182:	07da      	lsls	r2, r3, #31
   88184:	d421      	bmi.n	881ca <__lo0bits+0x52>
   88186:	0798      	lsls	r0, r3, #30
   88188:	d421      	bmi.n	881ce <__lo0bits+0x56>
   8818a:	089b      	lsrs	r3, r3, #2
   8818c:	600b      	str	r3, [r1, #0]
   8818e:	2002      	movs	r0, #2
   88190:	4770      	bx	lr
   88192:	b298      	uxth	r0, r3
   88194:	b198      	cbz	r0, 881be <__lo0bits+0x46>
   88196:	4610      	mov	r0, r2
   88198:	f013 0fff 	tst.w	r3, #255	; 0xff
   8819c:	bf04      	itt	eq
   8819e:	0a1b      	lsreq	r3, r3, #8
   881a0:	3008      	addeq	r0, #8
   881a2:	071a      	lsls	r2, r3, #28
   881a4:	bf04      	itt	eq
   881a6:	091b      	lsreq	r3, r3, #4
   881a8:	3004      	addeq	r0, #4
   881aa:	079a      	lsls	r2, r3, #30
   881ac:	bf04      	itt	eq
   881ae:	089b      	lsreq	r3, r3, #2
   881b0:	3002      	addeq	r0, #2
   881b2:	07da      	lsls	r2, r3, #31
   881b4:	d407      	bmi.n	881c6 <__lo0bits+0x4e>
   881b6:	085b      	lsrs	r3, r3, #1
   881b8:	d104      	bne.n	881c4 <__lo0bits+0x4c>
   881ba:	2020      	movs	r0, #32
   881bc:	4770      	bx	lr
   881be:	0c1b      	lsrs	r3, r3, #16
   881c0:	2010      	movs	r0, #16
   881c2:	e7e9      	b.n	88198 <__lo0bits+0x20>
   881c4:	3001      	adds	r0, #1
   881c6:	600b      	str	r3, [r1, #0]
   881c8:	4770      	bx	lr
   881ca:	2000      	movs	r0, #0
   881cc:	4770      	bx	lr
   881ce:	085b      	lsrs	r3, r3, #1
   881d0:	600b      	str	r3, [r1, #0]
   881d2:	2001      	movs	r0, #1
   881d4:	4770      	bx	lr
   881d6:	bf00      	nop

000881d8 <__i2b>:
   881d8:	b510      	push	{r4, lr}
   881da:	460c      	mov	r4, r1
   881dc:	2101      	movs	r1, #1
   881de:	f7ff ff39 	bl	88054 <_Balloc>
   881e2:	2201      	movs	r2, #1
   881e4:	6144      	str	r4, [r0, #20]
   881e6:	6102      	str	r2, [r0, #16]
   881e8:	bd10      	pop	{r4, pc}
   881ea:	bf00      	nop

000881ec <__multiply>:
   881ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   881f0:	690c      	ldr	r4, [r1, #16]
   881f2:	6915      	ldr	r5, [r2, #16]
   881f4:	b083      	sub	sp, #12
   881f6:	42ac      	cmp	r4, r5
   881f8:	468b      	mov	fp, r1
   881fa:	4616      	mov	r6, r2
   881fc:	da04      	bge.n	88208 <__multiply+0x1c>
   881fe:	4622      	mov	r2, r4
   88200:	46b3      	mov	fp, r6
   88202:	462c      	mov	r4, r5
   88204:	460e      	mov	r6, r1
   88206:	4615      	mov	r5, r2
   88208:	f8db 3008 	ldr.w	r3, [fp, #8]
   8820c:	eb04 0805 	add.w	r8, r4, r5
   88210:	f8db 1004 	ldr.w	r1, [fp, #4]
   88214:	4598      	cmp	r8, r3
   88216:	bfc8      	it	gt
   88218:	3101      	addgt	r1, #1
   8821a:	f7ff ff1b 	bl	88054 <_Balloc>
   8821e:	f100 0914 	add.w	r9, r0, #20
   88222:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   88226:	45d1      	cmp	r9, sl
   88228:	9000      	str	r0, [sp, #0]
   8822a:	d205      	bcs.n	88238 <__multiply+0x4c>
   8822c:	464b      	mov	r3, r9
   8822e:	2100      	movs	r1, #0
   88230:	f843 1b04 	str.w	r1, [r3], #4
   88234:	459a      	cmp	sl, r3
   88236:	d8fb      	bhi.n	88230 <__multiply+0x44>
   88238:	f106 0c14 	add.w	ip, r6, #20
   8823c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   88240:	f10b 0b14 	add.w	fp, fp, #20
   88244:	459c      	cmp	ip, r3
   88246:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   8824a:	d24b      	bcs.n	882e4 <__multiply+0xf8>
   8824c:	f8cd a004 	str.w	sl, [sp, #4]
   88250:	469a      	mov	sl, r3
   88252:	f8dc 5000 	ldr.w	r5, [ip]
   88256:	b2af      	uxth	r7, r5
   88258:	b1e7      	cbz	r7, 88294 <__multiply+0xa8>
   8825a:	464d      	mov	r5, r9
   8825c:	465e      	mov	r6, fp
   8825e:	2100      	movs	r1, #0
   88260:	f856 2b04 	ldr.w	r2, [r6], #4
   88264:	6828      	ldr	r0, [r5, #0]
   88266:	b293      	uxth	r3, r2
   88268:	b284      	uxth	r4, r0
   8826a:	0c12      	lsrs	r2, r2, #16
   8826c:	fb07 4303 	mla	r3, r7, r3, r4
   88270:	0c00      	lsrs	r0, r0, #16
   88272:	fb07 0202 	mla	r2, r7, r2, r0
   88276:	440b      	add	r3, r1
   88278:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   8827c:	b29b      	uxth	r3, r3
   8827e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   88282:	45b6      	cmp	lr, r6
   88284:	f845 3b04 	str.w	r3, [r5], #4
   88288:	ea4f 4111 	mov.w	r1, r1, lsr #16
   8828c:	d8e8      	bhi.n	88260 <__multiply+0x74>
   8828e:	6029      	str	r1, [r5, #0]
   88290:	f8dc 5000 	ldr.w	r5, [ip]
   88294:	0c2d      	lsrs	r5, r5, #16
   88296:	d01d      	beq.n	882d4 <__multiply+0xe8>
   88298:	f8d9 3000 	ldr.w	r3, [r9]
   8829c:	4648      	mov	r0, r9
   8829e:	461c      	mov	r4, r3
   882a0:	4659      	mov	r1, fp
   882a2:	2200      	movs	r2, #0
   882a4:	880e      	ldrh	r6, [r1, #0]
   882a6:	0c24      	lsrs	r4, r4, #16
   882a8:	fb05 4406 	mla	r4, r5, r6, r4
   882ac:	b29b      	uxth	r3, r3
   882ae:	4422      	add	r2, r4
   882b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   882b4:	f840 3b04 	str.w	r3, [r0], #4
   882b8:	f851 3b04 	ldr.w	r3, [r1], #4
   882bc:	6804      	ldr	r4, [r0, #0]
   882be:	0c1b      	lsrs	r3, r3, #16
   882c0:	b2a6      	uxth	r6, r4
   882c2:	fb05 6303 	mla	r3, r5, r3, r6
   882c6:	458e      	cmp	lr, r1
   882c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   882cc:	ea4f 4213 	mov.w	r2, r3, lsr #16
   882d0:	d8e8      	bhi.n	882a4 <__multiply+0xb8>
   882d2:	6003      	str	r3, [r0, #0]
   882d4:	f10c 0c04 	add.w	ip, ip, #4
   882d8:	45e2      	cmp	sl, ip
   882da:	f109 0904 	add.w	r9, r9, #4
   882de:	d8b8      	bhi.n	88252 <__multiply+0x66>
   882e0:	f8dd a004 	ldr.w	sl, [sp, #4]
   882e4:	f1b8 0f00 	cmp.w	r8, #0
   882e8:	dd0b      	ble.n	88302 <__multiply+0x116>
   882ea:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   882ee:	f1aa 0a04 	sub.w	sl, sl, #4
   882f2:	b11b      	cbz	r3, 882fc <__multiply+0x110>
   882f4:	e005      	b.n	88302 <__multiply+0x116>
   882f6:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   882fa:	b913      	cbnz	r3, 88302 <__multiply+0x116>
   882fc:	f1b8 0801 	subs.w	r8, r8, #1
   88300:	d1f9      	bne.n	882f6 <__multiply+0x10a>
   88302:	9800      	ldr	r0, [sp, #0]
   88304:	f8c0 8010 	str.w	r8, [r0, #16]
   88308:	b003      	add	sp, #12
   8830a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8830e:	bf00      	nop

00088310 <__pow5mult>:
   88310:	f012 0303 	ands.w	r3, r2, #3
   88314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88318:	4614      	mov	r4, r2
   8831a:	4607      	mov	r7, r0
   8831c:	d12e      	bne.n	8837c <__pow5mult+0x6c>
   8831e:	460d      	mov	r5, r1
   88320:	10a4      	asrs	r4, r4, #2
   88322:	d01c      	beq.n	8835e <__pow5mult+0x4e>
   88324:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   88326:	b396      	cbz	r6, 8838e <__pow5mult+0x7e>
   88328:	07e3      	lsls	r3, r4, #31
   8832a:	f04f 0800 	mov.w	r8, #0
   8832e:	d406      	bmi.n	8833e <__pow5mult+0x2e>
   88330:	1064      	asrs	r4, r4, #1
   88332:	d014      	beq.n	8835e <__pow5mult+0x4e>
   88334:	6830      	ldr	r0, [r6, #0]
   88336:	b1a8      	cbz	r0, 88364 <__pow5mult+0x54>
   88338:	4606      	mov	r6, r0
   8833a:	07e3      	lsls	r3, r4, #31
   8833c:	d5f8      	bpl.n	88330 <__pow5mult+0x20>
   8833e:	4632      	mov	r2, r6
   88340:	4629      	mov	r1, r5
   88342:	4638      	mov	r0, r7
   88344:	f7ff ff52 	bl	881ec <__multiply>
   88348:	b1b5      	cbz	r5, 88378 <__pow5mult+0x68>
   8834a:	686a      	ldr	r2, [r5, #4]
   8834c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8834e:	1064      	asrs	r4, r4, #1
   88350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   88354:	6029      	str	r1, [r5, #0]
   88356:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8835a:	4605      	mov	r5, r0
   8835c:	d1ea      	bne.n	88334 <__pow5mult+0x24>
   8835e:	4628      	mov	r0, r5
   88360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88364:	4632      	mov	r2, r6
   88366:	4631      	mov	r1, r6
   88368:	4638      	mov	r0, r7
   8836a:	f7ff ff3f 	bl	881ec <__multiply>
   8836e:	6030      	str	r0, [r6, #0]
   88370:	f8c0 8000 	str.w	r8, [r0]
   88374:	4606      	mov	r6, r0
   88376:	e7e0      	b.n	8833a <__pow5mult+0x2a>
   88378:	4605      	mov	r5, r0
   8837a:	e7d9      	b.n	88330 <__pow5mult+0x20>
   8837c:	4a0b      	ldr	r2, [pc, #44]	; (883ac <__pow5mult+0x9c>)
   8837e:	3b01      	subs	r3, #1
   88380:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   88384:	2300      	movs	r3, #0
   88386:	f7ff fe95 	bl	880b4 <__multadd>
   8838a:	4605      	mov	r5, r0
   8838c:	e7c8      	b.n	88320 <__pow5mult+0x10>
   8838e:	2101      	movs	r1, #1
   88390:	4638      	mov	r0, r7
   88392:	f7ff fe5f 	bl	88054 <_Balloc>
   88396:	f240 2171 	movw	r1, #625	; 0x271
   8839a:	2201      	movs	r2, #1
   8839c:	2300      	movs	r3, #0
   8839e:	6141      	str	r1, [r0, #20]
   883a0:	6102      	str	r2, [r0, #16]
   883a2:	4606      	mov	r6, r0
   883a4:	64b8      	str	r0, [r7, #72]	; 0x48
   883a6:	6003      	str	r3, [r0, #0]
   883a8:	e7be      	b.n	88328 <__pow5mult+0x18>
   883aa:	bf00      	nop
   883ac:	0008b240 	.word	0x0008b240

000883b0 <__lshift>:
   883b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   883b4:	690b      	ldr	r3, [r1, #16]
   883b6:	1154      	asrs	r4, r2, #5
   883b8:	eb04 0803 	add.w	r8, r4, r3
   883bc:	688b      	ldr	r3, [r1, #8]
   883be:	f108 0501 	add.w	r5, r8, #1
   883c2:	429d      	cmp	r5, r3
   883c4:	460e      	mov	r6, r1
   883c6:	4691      	mov	r9, r2
   883c8:	4607      	mov	r7, r0
   883ca:	6849      	ldr	r1, [r1, #4]
   883cc:	dd04      	ble.n	883d8 <__lshift+0x28>
   883ce:	005b      	lsls	r3, r3, #1
   883d0:	429d      	cmp	r5, r3
   883d2:	f101 0101 	add.w	r1, r1, #1
   883d6:	dcfa      	bgt.n	883ce <__lshift+0x1e>
   883d8:	4638      	mov	r0, r7
   883da:	f7ff fe3b 	bl	88054 <_Balloc>
   883de:	2c00      	cmp	r4, #0
   883e0:	f100 0314 	add.w	r3, r0, #20
   883e4:	dd06      	ble.n	883f4 <__lshift+0x44>
   883e6:	2100      	movs	r1, #0
   883e8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   883ec:	f843 1b04 	str.w	r1, [r3], #4
   883f0:	429a      	cmp	r2, r3
   883f2:	d1fb      	bne.n	883ec <__lshift+0x3c>
   883f4:	6934      	ldr	r4, [r6, #16]
   883f6:	f106 0114 	add.w	r1, r6, #20
   883fa:	f019 091f 	ands.w	r9, r9, #31
   883fe:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   88402:	d01d      	beq.n	88440 <__lshift+0x90>
   88404:	2200      	movs	r2, #0
   88406:	f1c9 0c20 	rsb	ip, r9, #32
   8840a:	680c      	ldr	r4, [r1, #0]
   8840c:	fa04 f409 	lsl.w	r4, r4, r9
   88410:	4314      	orrs	r4, r2
   88412:	f843 4b04 	str.w	r4, [r3], #4
   88416:	f851 2b04 	ldr.w	r2, [r1], #4
   8841a:	458e      	cmp	lr, r1
   8841c:	fa22 f20c 	lsr.w	r2, r2, ip
   88420:	d8f3      	bhi.n	8840a <__lshift+0x5a>
   88422:	601a      	str	r2, [r3, #0]
   88424:	b10a      	cbz	r2, 8842a <__lshift+0x7a>
   88426:	f108 0502 	add.w	r5, r8, #2
   8842a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8842c:	6872      	ldr	r2, [r6, #4]
   8842e:	3d01      	subs	r5, #1
   88430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   88434:	6105      	str	r5, [r0, #16]
   88436:	6031      	str	r1, [r6, #0]
   88438:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8843c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88440:	3b04      	subs	r3, #4
   88442:	f851 2b04 	ldr.w	r2, [r1], #4
   88446:	458e      	cmp	lr, r1
   88448:	f843 2f04 	str.w	r2, [r3, #4]!
   8844c:	d8f9      	bhi.n	88442 <__lshift+0x92>
   8844e:	e7ec      	b.n	8842a <__lshift+0x7a>

00088450 <__mcmp>:
   88450:	b430      	push	{r4, r5}
   88452:	690b      	ldr	r3, [r1, #16]
   88454:	4605      	mov	r5, r0
   88456:	6900      	ldr	r0, [r0, #16]
   88458:	1ac0      	subs	r0, r0, r3
   8845a:	d10f      	bne.n	8847c <__mcmp+0x2c>
   8845c:	009b      	lsls	r3, r3, #2
   8845e:	3514      	adds	r5, #20
   88460:	3114      	adds	r1, #20
   88462:	4419      	add	r1, r3
   88464:	442b      	add	r3, r5
   88466:	e001      	b.n	8846c <__mcmp+0x1c>
   88468:	429d      	cmp	r5, r3
   8846a:	d207      	bcs.n	8847c <__mcmp+0x2c>
   8846c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   88470:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   88474:	4294      	cmp	r4, r2
   88476:	d0f7      	beq.n	88468 <__mcmp+0x18>
   88478:	d302      	bcc.n	88480 <__mcmp+0x30>
   8847a:	2001      	movs	r0, #1
   8847c:	bc30      	pop	{r4, r5}
   8847e:	4770      	bx	lr
   88480:	f04f 30ff 	mov.w	r0, #4294967295
   88484:	e7fa      	b.n	8847c <__mcmp+0x2c>
   88486:	bf00      	nop

00088488 <__mdiff>:
   88488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8848c:	690c      	ldr	r4, [r1, #16]
   8848e:	4689      	mov	r9, r1
   88490:	6911      	ldr	r1, [r2, #16]
   88492:	4692      	mov	sl, r2
   88494:	1a64      	subs	r4, r4, r1
   88496:	2c00      	cmp	r4, #0
   88498:	d117      	bne.n	884ca <__mdiff+0x42>
   8849a:	0089      	lsls	r1, r1, #2
   8849c:	f109 0714 	add.w	r7, r9, #20
   884a0:	f102 0614 	add.w	r6, r2, #20
   884a4:	187b      	adds	r3, r7, r1
   884a6:	4431      	add	r1, r6
   884a8:	e001      	b.n	884ae <__mdiff+0x26>
   884aa:	429f      	cmp	r7, r3
   884ac:	d265      	bcs.n	8857a <__mdiff+0xf2>
   884ae:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   884b2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   884b6:	4295      	cmp	r5, r2
   884b8:	d0f7      	beq.n	884aa <__mdiff+0x22>
   884ba:	d267      	bcs.n	8858c <__mdiff+0x104>
   884bc:	464b      	mov	r3, r9
   884be:	46bb      	mov	fp, r7
   884c0:	46d1      	mov	r9, sl
   884c2:	4637      	mov	r7, r6
   884c4:	469a      	mov	sl, r3
   884c6:	2401      	movs	r4, #1
   884c8:	e005      	b.n	884d6 <__mdiff+0x4e>
   884ca:	db61      	blt.n	88590 <__mdiff+0x108>
   884cc:	2400      	movs	r4, #0
   884ce:	f109 0714 	add.w	r7, r9, #20
   884d2:	f10a 0b14 	add.w	fp, sl, #20
   884d6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   884da:	f7ff fdbb 	bl	88054 <_Balloc>
   884de:	465d      	mov	r5, fp
   884e0:	f04f 0800 	mov.w	r8, #0
   884e4:	f8d9 e010 	ldr.w	lr, [r9, #16]
   884e8:	f8da 3010 	ldr.w	r3, [sl, #16]
   884ec:	463e      	mov	r6, r7
   884ee:	60c4      	str	r4, [r0, #12]
   884f0:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   884f4:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   884f8:	f100 0414 	add.w	r4, r0, #20
   884fc:	f856 9b04 	ldr.w	r9, [r6], #4
   88500:	f855 2b04 	ldr.w	r2, [r5], #4
   88504:	fa1f f389 	uxth.w	r3, r9
   88508:	4443      	add	r3, r8
   8850a:	fa1f f882 	uxth.w	r8, r2
   8850e:	0c12      	lsrs	r2, r2, #16
   88510:	eba3 0308 	sub.w	r3, r3, r8
   88514:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   88518:	eb02 4223 	add.w	r2, r2, r3, asr #16
   8851c:	b29b      	uxth	r3, r3
   8851e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   88522:	45ac      	cmp	ip, r5
   88524:	f844 3b04 	str.w	r3, [r4], #4
   88528:	ea4f 4822 	mov.w	r8, r2, asr #16
   8852c:	d8e6      	bhi.n	884fc <__mdiff+0x74>
   8852e:	42b7      	cmp	r7, r6
   88530:	d917      	bls.n	88562 <__mdiff+0xda>
   88532:	46a4      	mov	ip, r4
   88534:	4635      	mov	r5, r6
   88536:	f855 3b04 	ldr.w	r3, [r5], #4
   8853a:	b299      	uxth	r1, r3
   8853c:	4441      	add	r1, r8
   8853e:	140a      	asrs	r2, r1, #16
   88540:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   88544:	b289      	uxth	r1, r1
   88546:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   8854a:	42af      	cmp	r7, r5
   8854c:	f84c 3b04 	str.w	r3, [ip], #4
   88550:	ea4f 4822 	mov.w	r8, r2, asr #16
   88554:	d8ef      	bhi.n	88536 <__mdiff+0xae>
   88556:	43f6      	mvns	r6, r6
   88558:	4437      	add	r7, r6
   8855a:	f027 0703 	bic.w	r7, r7, #3
   8855e:	3704      	adds	r7, #4
   88560:	443c      	add	r4, r7
   88562:	3c04      	subs	r4, #4
   88564:	b92b      	cbnz	r3, 88572 <__mdiff+0xea>
   88566:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8856a:	f10e 3eff 	add.w	lr, lr, #4294967295
   8856e:	2b00      	cmp	r3, #0
   88570:	d0f9      	beq.n	88566 <__mdiff+0xde>
   88572:	f8c0 e010 	str.w	lr, [r0, #16]
   88576:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8857a:	2100      	movs	r1, #0
   8857c:	f7ff fd6a 	bl	88054 <_Balloc>
   88580:	2201      	movs	r2, #1
   88582:	2300      	movs	r3, #0
   88584:	6102      	str	r2, [r0, #16]
   88586:	6143      	str	r3, [r0, #20]
   88588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8858c:	46b3      	mov	fp, r6
   8858e:	e7a2      	b.n	884d6 <__mdiff+0x4e>
   88590:	464b      	mov	r3, r9
   88592:	f109 0b14 	add.w	fp, r9, #20
   88596:	f102 0714 	add.w	r7, r2, #20
   8859a:	4691      	mov	r9, r2
   8859c:	2401      	movs	r4, #1
   8859e:	469a      	mov	sl, r3
   885a0:	e799      	b.n	884d6 <__mdiff+0x4e>
   885a2:	bf00      	nop

000885a4 <__d2b>:
   885a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   885a6:	2101      	movs	r1, #1
   885a8:	b083      	sub	sp, #12
   885aa:	461c      	mov	r4, r3
   885ac:	f3c3 550a 	ubfx	r5, r3, #20, #11
   885b0:	4616      	mov	r6, r2
   885b2:	f7ff fd4f 	bl	88054 <_Balloc>
   885b6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   885ba:	4607      	mov	r7, r0
   885bc:	b10d      	cbz	r5, 885c2 <__d2b+0x1e>
   885be:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   885c2:	9401      	str	r4, [sp, #4]
   885c4:	b306      	cbz	r6, 88608 <__d2b+0x64>
   885c6:	a802      	add	r0, sp, #8
   885c8:	f840 6d08 	str.w	r6, [r0, #-8]!
   885cc:	f7ff fdd4 	bl	88178 <__lo0bits>
   885d0:	2800      	cmp	r0, #0
   885d2:	d130      	bne.n	88636 <__d2b+0x92>
   885d4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   885d8:	617a      	str	r2, [r7, #20]
   885da:	2b00      	cmp	r3, #0
   885dc:	bf0c      	ite	eq
   885de:	2101      	moveq	r1, #1
   885e0:	2102      	movne	r1, #2
   885e2:	61bb      	str	r3, [r7, #24]
   885e4:	6139      	str	r1, [r7, #16]
   885e6:	b9d5      	cbnz	r5, 8861e <__d2b+0x7a>
   885e8:	9a08      	ldr	r2, [sp, #32]
   885ea:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   885ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   885f2:	6010      	str	r0, [r2, #0]
   885f4:	6918      	ldr	r0, [r3, #16]
   885f6:	f7ff fd9f 	bl	88138 <__hi0bits>
   885fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   885fc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   88600:	6018      	str	r0, [r3, #0]
   88602:	4638      	mov	r0, r7
   88604:	b003      	add	sp, #12
   88606:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88608:	a801      	add	r0, sp, #4
   8860a:	f7ff fdb5 	bl	88178 <__lo0bits>
   8860e:	2201      	movs	r2, #1
   88610:	9b01      	ldr	r3, [sp, #4]
   88612:	4611      	mov	r1, r2
   88614:	3020      	adds	r0, #32
   88616:	613a      	str	r2, [r7, #16]
   88618:	617b      	str	r3, [r7, #20]
   8861a:	2d00      	cmp	r5, #0
   8861c:	d0e4      	beq.n	885e8 <__d2b+0x44>
   8861e:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   88622:	9a08      	ldr	r2, [sp, #32]
   88624:	4403      	add	r3, r0
   88626:	6013      	str	r3, [r2, #0]
   88628:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8862a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8862e:	6018      	str	r0, [r3, #0]
   88630:	4638      	mov	r0, r7
   88632:	b003      	add	sp, #12
   88634:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88636:	9b01      	ldr	r3, [sp, #4]
   88638:	f1c0 0220 	rsb	r2, r0, #32
   8863c:	9900      	ldr	r1, [sp, #0]
   8863e:	fa03 f202 	lsl.w	r2, r3, r2
   88642:	430a      	orrs	r2, r1
   88644:	40c3      	lsrs	r3, r0
   88646:	9301      	str	r3, [sp, #4]
   88648:	617a      	str	r2, [r7, #20]
   8864a:	e7c6      	b.n	885da <__d2b+0x36>

0008864c <_sbrk_r>:
   8864c:	b538      	push	{r3, r4, r5, lr}
   8864e:	2300      	movs	r3, #0
   88650:	4c06      	ldr	r4, [pc, #24]	; (8866c <_sbrk_r+0x20>)
   88652:	4605      	mov	r5, r0
   88654:	4608      	mov	r0, r1
   88656:	6023      	str	r3, [r4, #0]
   88658:	f7fc fa82 	bl	84b60 <_sbrk>
   8865c:	1c43      	adds	r3, r0, #1
   8865e:	d000      	beq.n	88662 <_sbrk_r+0x16>
   88660:	bd38      	pop	{r3, r4, r5, pc}
   88662:	6823      	ldr	r3, [r4, #0]
   88664:	2b00      	cmp	r3, #0
   88666:	d0fb      	beq.n	88660 <_sbrk_r+0x14>
   88668:	602b      	str	r3, [r5, #0]
   8866a:	bd38      	pop	{r3, r4, r5, pc}
   8866c:	20002a18 	.word	0x20002a18

00088670 <__ssprint_r>:
   88670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88674:	6893      	ldr	r3, [r2, #8]
   88676:	b083      	sub	sp, #12
   88678:	4690      	mov	r8, r2
   8867a:	2b00      	cmp	r3, #0
   8867c:	d070      	beq.n	88760 <__ssprint_r+0xf0>
   8867e:	4682      	mov	sl, r0
   88680:	460c      	mov	r4, r1
   88682:	6817      	ldr	r7, [r2, #0]
   88684:	688d      	ldr	r5, [r1, #8]
   88686:	6808      	ldr	r0, [r1, #0]
   88688:	e042      	b.n	88710 <__ssprint_r+0xa0>
   8868a:	89a3      	ldrh	r3, [r4, #12]
   8868c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   88690:	d02e      	beq.n	886f0 <__ssprint_r+0x80>
   88692:	6965      	ldr	r5, [r4, #20]
   88694:	6921      	ldr	r1, [r4, #16]
   88696:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8869a:	eba0 0b01 	sub.w	fp, r0, r1
   8869e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   886a2:	f10b 0001 	add.w	r0, fp, #1
   886a6:	106d      	asrs	r5, r5, #1
   886a8:	4430      	add	r0, r6
   886aa:	42a8      	cmp	r0, r5
   886ac:	462a      	mov	r2, r5
   886ae:	bf84      	itt	hi
   886b0:	4605      	movhi	r5, r0
   886b2:	462a      	movhi	r2, r5
   886b4:	055b      	lsls	r3, r3, #21
   886b6:	d538      	bpl.n	8872a <__ssprint_r+0xba>
   886b8:	4611      	mov	r1, r2
   886ba:	4650      	mov	r0, sl
   886bc:	f7ff f94a 	bl	87954 <_malloc_r>
   886c0:	2800      	cmp	r0, #0
   886c2:	d03c      	beq.n	8873e <__ssprint_r+0xce>
   886c4:	465a      	mov	r2, fp
   886c6:	6921      	ldr	r1, [r4, #16]
   886c8:	9001      	str	r0, [sp, #4]
   886ca:	f7ff fc41 	bl	87f50 <memcpy>
   886ce:	89a2      	ldrh	r2, [r4, #12]
   886d0:	9b01      	ldr	r3, [sp, #4]
   886d2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   886d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   886da:	81a2      	strh	r2, [r4, #12]
   886dc:	eba5 020b 	sub.w	r2, r5, fp
   886e0:	eb03 000b 	add.w	r0, r3, fp
   886e4:	6165      	str	r5, [r4, #20]
   886e6:	46b3      	mov	fp, r6
   886e8:	4635      	mov	r5, r6
   886ea:	6123      	str	r3, [r4, #16]
   886ec:	6020      	str	r0, [r4, #0]
   886ee:	60a2      	str	r2, [r4, #8]
   886f0:	465a      	mov	r2, fp
   886f2:	4649      	mov	r1, r9
   886f4:	f000 fa0e 	bl	88b14 <memmove>
   886f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   886fc:	68a2      	ldr	r2, [r4, #8]
   886fe:	6820      	ldr	r0, [r4, #0]
   88700:	1b55      	subs	r5, r2, r5
   88702:	4458      	add	r0, fp
   88704:	1b9e      	subs	r6, r3, r6
   88706:	60a5      	str	r5, [r4, #8]
   88708:	6020      	str	r0, [r4, #0]
   8870a:	f8c8 6008 	str.w	r6, [r8, #8]
   8870e:	b33e      	cbz	r6, 88760 <__ssprint_r+0xf0>
   88710:	687e      	ldr	r6, [r7, #4]
   88712:	463b      	mov	r3, r7
   88714:	3708      	adds	r7, #8
   88716:	2e00      	cmp	r6, #0
   88718:	d0fa      	beq.n	88710 <__ssprint_r+0xa0>
   8871a:	42ae      	cmp	r6, r5
   8871c:	f8d3 9000 	ldr.w	r9, [r3]
   88720:	46ab      	mov	fp, r5
   88722:	d2b2      	bcs.n	8868a <__ssprint_r+0x1a>
   88724:	4635      	mov	r5, r6
   88726:	46b3      	mov	fp, r6
   88728:	e7e2      	b.n	886f0 <__ssprint_r+0x80>
   8872a:	4650      	mov	r0, sl
   8872c:	f000 fa56 	bl	88bdc <_realloc_r>
   88730:	4603      	mov	r3, r0
   88732:	2800      	cmp	r0, #0
   88734:	d1d2      	bne.n	886dc <__ssprint_r+0x6c>
   88736:	6921      	ldr	r1, [r4, #16]
   88738:	4650      	mov	r0, sl
   8873a:	f000 f905 	bl	88948 <_free_r>
   8873e:	230c      	movs	r3, #12
   88740:	2200      	movs	r2, #0
   88742:	f04f 30ff 	mov.w	r0, #4294967295
   88746:	f8ca 3000 	str.w	r3, [sl]
   8874a:	89a3      	ldrh	r3, [r4, #12]
   8874c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88750:	81a3      	strh	r3, [r4, #12]
   88752:	f8c8 2008 	str.w	r2, [r8, #8]
   88756:	f8c8 2004 	str.w	r2, [r8, #4]
   8875a:	b003      	add	sp, #12
   8875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88760:	2000      	movs	r0, #0
   88762:	f8c8 0004 	str.w	r0, [r8, #4]
   88766:	b003      	add	sp, #12
   88768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008876c <__ascii_wctomb>:
   8876c:	b119      	cbz	r1, 88776 <__ascii_wctomb+0xa>
   8876e:	2aff      	cmp	r2, #255	; 0xff
   88770:	d803      	bhi.n	8877a <__ascii_wctomb+0xe>
   88772:	700a      	strb	r2, [r1, #0]
   88774:	2101      	movs	r1, #1
   88776:	4608      	mov	r0, r1
   88778:	4770      	bx	lr
   8877a:	238a      	movs	r3, #138	; 0x8a
   8877c:	f04f 31ff 	mov.w	r1, #4294967295
   88780:	6003      	str	r3, [r0, #0]
   88782:	e7f8      	b.n	88776 <__ascii_wctomb+0xa>

00088784 <__register_exitproc>:
   88784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88788:	4d2c      	ldr	r5, [pc, #176]	; (8883c <__register_exitproc+0xb8>)
   8878a:	4606      	mov	r6, r0
   8878c:	6828      	ldr	r0, [r5, #0]
   8878e:	4698      	mov	r8, r3
   88790:	460f      	mov	r7, r1
   88792:	4691      	mov	r9, r2
   88794:	f7ff f8da 	bl	8794c <__retarget_lock_acquire_recursive>
   88798:	4b29      	ldr	r3, [pc, #164]	; (88840 <__register_exitproc+0xbc>)
   8879a:	681c      	ldr	r4, [r3, #0]
   8879c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   887a0:	2b00      	cmp	r3, #0
   887a2:	d03e      	beq.n	88822 <__register_exitproc+0x9e>
   887a4:	685a      	ldr	r2, [r3, #4]
   887a6:	2a1f      	cmp	r2, #31
   887a8:	dc1c      	bgt.n	887e4 <__register_exitproc+0x60>
   887aa:	f102 0e01 	add.w	lr, r2, #1
   887ae:	b176      	cbz	r6, 887ce <__register_exitproc+0x4a>
   887b0:	2101      	movs	r1, #1
   887b2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   887b6:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   887ba:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   887be:	4091      	lsls	r1, r2
   887c0:	4308      	orrs	r0, r1
   887c2:	2e02      	cmp	r6, #2
   887c4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   887c8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   887cc:	d023      	beq.n	88816 <__register_exitproc+0x92>
   887ce:	3202      	adds	r2, #2
   887d0:	f8c3 e004 	str.w	lr, [r3, #4]
   887d4:	6828      	ldr	r0, [r5, #0]
   887d6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   887da:	f7ff f8b9 	bl	87950 <__retarget_lock_release_recursive>
   887de:	2000      	movs	r0, #0
   887e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   887e4:	4b17      	ldr	r3, [pc, #92]	; (88844 <__register_exitproc+0xc0>)
   887e6:	b30b      	cbz	r3, 8882c <__register_exitproc+0xa8>
   887e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   887ec:	f3af 8000 	nop.w
   887f0:	4603      	mov	r3, r0
   887f2:	b1d8      	cbz	r0, 8882c <__register_exitproc+0xa8>
   887f4:	2000      	movs	r0, #0
   887f6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   887fa:	f04f 0e01 	mov.w	lr, #1
   887fe:	6058      	str	r0, [r3, #4]
   88800:	6019      	str	r1, [r3, #0]
   88802:	4602      	mov	r2, r0
   88804:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   88808:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8880c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   88810:	2e00      	cmp	r6, #0
   88812:	d0dc      	beq.n	887ce <__register_exitproc+0x4a>
   88814:	e7cc      	b.n	887b0 <__register_exitproc+0x2c>
   88816:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8881a:	4301      	orrs	r1, r0
   8881c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   88820:	e7d5      	b.n	887ce <__register_exitproc+0x4a>
   88822:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   88826:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8882a:	e7bb      	b.n	887a4 <__register_exitproc+0x20>
   8882c:	6828      	ldr	r0, [r5, #0]
   8882e:	f7ff f88f 	bl	87950 <__retarget_lock_release_recursive>
   88832:	f04f 30ff 	mov.w	r0, #4294967295
   88836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8883a:	bf00      	nop
   8883c:	20000a60 	.word	0x20000a60
   88840:	0008b0c8 	.word	0x0008b0c8
   88844:	00000000 	.word	0x00000000

00088848 <_calloc_r>:
   88848:	b510      	push	{r4, lr}
   8884a:	fb02 f101 	mul.w	r1, r2, r1
   8884e:	f7ff f881 	bl	87954 <_malloc_r>
   88852:	4604      	mov	r4, r0
   88854:	b1d8      	cbz	r0, 8888e <_calloc_r+0x46>
   88856:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8885a:	f022 0203 	bic.w	r2, r2, #3
   8885e:	3a04      	subs	r2, #4
   88860:	2a24      	cmp	r2, #36	; 0x24
   88862:	d818      	bhi.n	88896 <_calloc_r+0x4e>
   88864:	2a13      	cmp	r2, #19
   88866:	d914      	bls.n	88892 <_calloc_r+0x4a>
   88868:	2300      	movs	r3, #0
   8886a:	2a1b      	cmp	r2, #27
   8886c:	6003      	str	r3, [r0, #0]
   8886e:	6043      	str	r3, [r0, #4]
   88870:	d916      	bls.n	888a0 <_calloc_r+0x58>
   88872:	2a24      	cmp	r2, #36	; 0x24
   88874:	6083      	str	r3, [r0, #8]
   88876:	60c3      	str	r3, [r0, #12]
   88878:	bf11      	iteee	ne
   8887a:	f100 0210 	addne.w	r2, r0, #16
   8887e:	6103      	streq	r3, [r0, #16]
   88880:	6143      	streq	r3, [r0, #20]
   88882:	f100 0218 	addeq.w	r2, r0, #24
   88886:	2300      	movs	r3, #0
   88888:	6013      	str	r3, [r2, #0]
   8888a:	6053      	str	r3, [r2, #4]
   8888c:	6093      	str	r3, [r2, #8]
   8888e:	4620      	mov	r0, r4
   88890:	bd10      	pop	{r4, pc}
   88892:	4602      	mov	r2, r0
   88894:	e7f7      	b.n	88886 <_calloc_r+0x3e>
   88896:	2100      	movs	r1, #0
   88898:	f7fc fc5e 	bl	85158 <memset>
   8889c:	4620      	mov	r0, r4
   8889e:	bd10      	pop	{r4, pc}
   888a0:	f100 0208 	add.w	r2, r0, #8
   888a4:	e7ef      	b.n	88886 <_calloc_r+0x3e>
   888a6:	bf00      	nop

000888a8 <_malloc_trim_r>:
   888a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   888aa:	460c      	mov	r4, r1
   888ac:	4f23      	ldr	r7, [pc, #140]	; (8893c <_malloc_trim_r+0x94>)
   888ae:	4606      	mov	r6, r0
   888b0:	f7ff fbc4 	bl	8803c <__malloc_lock>
   888b4:	68bb      	ldr	r3, [r7, #8]
   888b6:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   888ba:	685d      	ldr	r5, [r3, #4]
   888bc:	310f      	adds	r1, #15
   888be:	f025 0503 	bic.w	r5, r5, #3
   888c2:	4429      	add	r1, r5
   888c4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   888c8:	f021 010f 	bic.w	r1, r1, #15
   888cc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   888d0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   888d4:	db07      	blt.n	888e6 <_malloc_trim_r+0x3e>
   888d6:	2100      	movs	r1, #0
   888d8:	4630      	mov	r0, r6
   888da:	f7ff feb7 	bl	8864c <_sbrk_r>
   888de:	68bb      	ldr	r3, [r7, #8]
   888e0:	442b      	add	r3, r5
   888e2:	4298      	cmp	r0, r3
   888e4:	d004      	beq.n	888f0 <_malloc_trim_r+0x48>
   888e6:	4630      	mov	r0, r6
   888e8:	f7ff fbae 	bl	88048 <__malloc_unlock>
   888ec:	2000      	movs	r0, #0
   888ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   888f0:	4261      	negs	r1, r4
   888f2:	4630      	mov	r0, r6
   888f4:	f7ff feaa 	bl	8864c <_sbrk_r>
   888f8:	3001      	adds	r0, #1
   888fa:	d00d      	beq.n	88918 <_malloc_trim_r+0x70>
   888fc:	4b10      	ldr	r3, [pc, #64]	; (88940 <_malloc_trim_r+0x98>)
   888fe:	68ba      	ldr	r2, [r7, #8]
   88900:	6819      	ldr	r1, [r3, #0]
   88902:	1b2d      	subs	r5, r5, r4
   88904:	f045 0501 	orr.w	r5, r5, #1
   88908:	4630      	mov	r0, r6
   8890a:	1b09      	subs	r1, r1, r4
   8890c:	6055      	str	r5, [r2, #4]
   8890e:	6019      	str	r1, [r3, #0]
   88910:	f7ff fb9a 	bl	88048 <__malloc_unlock>
   88914:	2001      	movs	r0, #1
   88916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88918:	2100      	movs	r1, #0
   8891a:	4630      	mov	r0, r6
   8891c:	f7ff fe96 	bl	8864c <_sbrk_r>
   88920:	68ba      	ldr	r2, [r7, #8]
   88922:	1a83      	subs	r3, r0, r2
   88924:	2b0f      	cmp	r3, #15
   88926:	ddde      	ble.n	888e6 <_malloc_trim_r+0x3e>
   88928:	4c06      	ldr	r4, [pc, #24]	; (88944 <_malloc_trim_r+0x9c>)
   8892a:	4905      	ldr	r1, [pc, #20]	; (88940 <_malloc_trim_r+0x98>)
   8892c:	6824      	ldr	r4, [r4, #0]
   8892e:	f043 0301 	orr.w	r3, r3, #1
   88932:	1b00      	subs	r0, r0, r4
   88934:	6053      	str	r3, [r2, #4]
   88936:	6008      	str	r0, [r1, #0]
   88938:	e7d5      	b.n	888e6 <_malloc_trim_r+0x3e>
   8893a:	bf00      	nop
   8893c:	20000bd0 	.word	0x20000bd0
   88940:	2000118c 	.word	0x2000118c
   88944:	20000fd8 	.word	0x20000fd8

00088948 <_free_r>:
   88948:	2900      	cmp	r1, #0
   8894a:	d044      	beq.n	889d6 <_free_r+0x8e>
   8894c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88950:	460d      	mov	r5, r1
   88952:	4680      	mov	r8, r0
   88954:	f7ff fb72 	bl	8803c <__malloc_lock>
   88958:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8895c:	4969      	ldr	r1, [pc, #420]	; (88b04 <_free_r+0x1bc>)
   8895e:	f1a5 0408 	sub.w	r4, r5, #8
   88962:	f027 0301 	bic.w	r3, r7, #1
   88966:	18e2      	adds	r2, r4, r3
   88968:	688e      	ldr	r6, [r1, #8]
   8896a:	6850      	ldr	r0, [r2, #4]
   8896c:	42b2      	cmp	r2, r6
   8896e:	f020 0003 	bic.w	r0, r0, #3
   88972:	d05e      	beq.n	88a32 <_free_r+0xea>
   88974:	07fe      	lsls	r6, r7, #31
   88976:	6050      	str	r0, [r2, #4]
   88978:	d40b      	bmi.n	88992 <_free_r+0x4a>
   8897a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8897e:	f101 0e08 	add.w	lr, r1, #8
   88982:	1be4      	subs	r4, r4, r7
   88984:	68a5      	ldr	r5, [r4, #8]
   88986:	443b      	add	r3, r7
   88988:	4575      	cmp	r5, lr
   8898a:	d06d      	beq.n	88a68 <_free_r+0x120>
   8898c:	68e7      	ldr	r7, [r4, #12]
   8898e:	60ef      	str	r7, [r5, #12]
   88990:	60bd      	str	r5, [r7, #8]
   88992:	1815      	adds	r5, r2, r0
   88994:	686d      	ldr	r5, [r5, #4]
   88996:	07ed      	lsls	r5, r5, #31
   88998:	d53e      	bpl.n	88a18 <_free_r+0xd0>
   8899a:	f043 0201 	orr.w	r2, r3, #1
   8899e:	6062      	str	r2, [r4, #4]
   889a0:	50e3      	str	r3, [r4, r3]
   889a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   889a6:	d217      	bcs.n	889d8 <_free_r+0x90>
   889a8:	2201      	movs	r2, #1
   889aa:	08db      	lsrs	r3, r3, #3
   889ac:	1098      	asrs	r0, r3, #2
   889ae:	684d      	ldr	r5, [r1, #4]
   889b0:	4413      	add	r3, r2
   889b2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   889b6:	4082      	lsls	r2, r0
   889b8:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   889bc:	432a      	orrs	r2, r5
   889be:	3808      	subs	r0, #8
   889c0:	60e0      	str	r0, [r4, #12]
   889c2:	60a7      	str	r7, [r4, #8]
   889c4:	604a      	str	r2, [r1, #4]
   889c6:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   889ca:	60fc      	str	r4, [r7, #12]
   889cc:	4640      	mov	r0, r8
   889ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   889d2:	f7ff bb39 	b.w	88048 <__malloc_unlock>
   889d6:	4770      	bx	lr
   889d8:	0a5a      	lsrs	r2, r3, #9
   889da:	2a04      	cmp	r2, #4
   889dc:	d852      	bhi.n	88a84 <_free_r+0x13c>
   889de:	099a      	lsrs	r2, r3, #6
   889e0:	f102 0739 	add.w	r7, r2, #57	; 0x39
   889e4:	00ff      	lsls	r7, r7, #3
   889e6:	f102 0538 	add.w	r5, r2, #56	; 0x38
   889ea:	19c8      	adds	r0, r1, r7
   889ec:	59ca      	ldr	r2, [r1, r7]
   889ee:	3808      	subs	r0, #8
   889f0:	4290      	cmp	r0, r2
   889f2:	d04f      	beq.n	88a94 <_free_r+0x14c>
   889f4:	6851      	ldr	r1, [r2, #4]
   889f6:	f021 0103 	bic.w	r1, r1, #3
   889fa:	428b      	cmp	r3, r1
   889fc:	d232      	bcs.n	88a64 <_free_r+0x11c>
   889fe:	6892      	ldr	r2, [r2, #8]
   88a00:	4290      	cmp	r0, r2
   88a02:	d1f7      	bne.n	889f4 <_free_r+0xac>
   88a04:	68c3      	ldr	r3, [r0, #12]
   88a06:	60a0      	str	r0, [r4, #8]
   88a08:	60e3      	str	r3, [r4, #12]
   88a0a:	609c      	str	r4, [r3, #8]
   88a0c:	60c4      	str	r4, [r0, #12]
   88a0e:	4640      	mov	r0, r8
   88a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88a14:	f7ff bb18 	b.w	88048 <__malloc_unlock>
   88a18:	6895      	ldr	r5, [r2, #8]
   88a1a:	4f3b      	ldr	r7, [pc, #236]	; (88b08 <_free_r+0x1c0>)
   88a1c:	4403      	add	r3, r0
   88a1e:	42bd      	cmp	r5, r7
   88a20:	d040      	beq.n	88aa4 <_free_r+0x15c>
   88a22:	68d0      	ldr	r0, [r2, #12]
   88a24:	f043 0201 	orr.w	r2, r3, #1
   88a28:	60e8      	str	r0, [r5, #12]
   88a2a:	6085      	str	r5, [r0, #8]
   88a2c:	6062      	str	r2, [r4, #4]
   88a2e:	50e3      	str	r3, [r4, r3]
   88a30:	e7b7      	b.n	889a2 <_free_r+0x5a>
   88a32:	07ff      	lsls	r7, r7, #31
   88a34:	4403      	add	r3, r0
   88a36:	d407      	bmi.n	88a48 <_free_r+0x100>
   88a38:	f855 5c08 	ldr.w	r5, [r5, #-8]
   88a3c:	1b64      	subs	r4, r4, r5
   88a3e:	68e2      	ldr	r2, [r4, #12]
   88a40:	68a0      	ldr	r0, [r4, #8]
   88a42:	442b      	add	r3, r5
   88a44:	60c2      	str	r2, [r0, #12]
   88a46:	6090      	str	r0, [r2, #8]
   88a48:	4a30      	ldr	r2, [pc, #192]	; (88b0c <_free_r+0x1c4>)
   88a4a:	f043 0001 	orr.w	r0, r3, #1
   88a4e:	6812      	ldr	r2, [r2, #0]
   88a50:	6060      	str	r0, [r4, #4]
   88a52:	4293      	cmp	r3, r2
   88a54:	608c      	str	r4, [r1, #8]
   88a56:	d3b9      	bcc.n	889cc <_free_r+0x84>
   88a58:	4b2d      	ldr	r3, [pc, #180]	; (88b10 <_free_r+0x1c8>)
   88a5a:	4640      	mov	r0, r8
   88a5c:	6819      	ldr	r1, [r3, #0]
   88a5e:	f7ff ff23 	bl	888a8 <_malloc_trim_r>
   88a62:	e7b3      	b.n	889cc <_free_r+0x84>
   88a64:	4610      	mov	r0, r2
   88a66:	e7cd      	b.n	88a04 <_free_r+0xbc>
   88a68:	1811      	adds	r1, r2, r0
   88a6a:	6849      	ldr	r1, [r1, #4]
   88a6c:	07c9      	lsls	r1, r1, #31
   88a6e:	d444      	bmi.n	88afa <_free_r+0x1b2>
   88a70:	6891      	ldr	r1, [r2, #8]
   88a72:	4403      	add	r3, r0
   88a74:	68d2      	ldr	r2, [r2, #12]
   88a76:	f043 0001 	orr.w	r0, r3, #1
   88a7a:	60ca      	str	r2, [r1, #12]
   88a7c:	6091      	str	r1, [r2, #8]
   88a7e:	6060      	str	r0, [r4, #4]
   88a80:	50e3      	str	r3, [r4, r3]
   88a82:	e7a3      	b.n	889cc <_free_r+0x84>
   88a84:	2a14      	cmp	r2, #20
   88a86:	d816      	bhi.n	88ab6 <_free_r+0x16e>
   88a88:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   88a8c:	00ff      	lsls	r7, r7, #3
   88a8e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   88a92:	e7aa      	b.n	889ea <_free_r+0xa2>
   88a94:	2301      	movs	r3, #1
   88a96:	10aa      	asrs	r2, r5, #2
   88a98:	684d      	ldr	r5, [r1, #4]
   88a9a:	4093      	lsls	r3, r2
   88a9c:	432b      	orrs	r3, r5
   88a9e:	604b      	str	r3, [r1, #4]
   88aa0:	4603      	mov	r3, r0
   88aa2:	e7b0      	b.n	88a06 <_free_r+0xbe>
   88aa4:	f043 0201 	orr.w	r2, r3, #1
   88aa8:	614c      	str	r4, [r1, #20]
   88aaa:	610c      	str	r4, [r1, #16]
   88aac:	60e5      	str	r5, [r4, #12]
   88aae:	60a5      	str	r5, [r4, #8]
   88ab0:	6062      	str	r2, [r4, #4]
   88ab2:	50e3      	str	r3, [r4, r3]
   88ab4:	e78a      	b.n	889cc <_free_r+0x84>
   88ab6:	2a54      	cmp	r2, #84	; 0x54
   88ab8:	d806      	bhi.n	88ac8 <_free_r+0x180>
   88aba:	0b1a      	lsrs	r2, r3, #12
   88abc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   88ac0:	00ff      	lsls	r7, r7, #3
   88ac2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   88ac6:	e790      	b.n	889ea <_free_r+0xa2>
   88ac8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   88acc:	d806      	bhi.n	88adc <_free_r+0x194>
   88ace:	0bda      	lsrs	r2, r3, #15
   88ad0:	f102 0778 	add.w	r7, r2, #120	; 0x78
   88ad4:	00ff      	lsls	r7, r7, #3
   88ad6:	f102 0577 	add.w	r5, r2, #119	; 0x77
   88ada:	e786      	b.n	889ea <_free_r+0xa2>
   88adc:	f240 5054 	movw	r0, #1364	; 0x554
   88ae0:	4282      	cmp	r2, r0
   88ae2:	d806      	bhi.n	88af2 <_free_r+0x1aa>
   88ae4:	0c9a      	lsrs	r2, r3, #18
   88ae6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   88aea:	00ff      	lsls	r7, r7, #3
   88aec:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   88af0:	e77b      	b.n	889ea <_free_r+0xa2>
   88af2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   88af6:	257e      	movs	r5, #126	; 0x7e
   88af8:	e777      	b.n	889ea <_free_r+0xa2>
   88afa:	f043 0101 	orr.w	r1, r3, #1
   88afe:	6061      	str	r1, [r4, #4]
   88b00:	6013      	str	r3, [r2, #0]
   88b02:	e763      	b.n	889cc <_free_r+0x84>
   88b04:	20000bd0 	.word	0x20000bd0
   88b08:	20000bd8 	.word	0x20000bd8
   88b0c:	20000fdc 	.word	0x20000fdc
   88b10:	200011bc 	.word	0x200011bc

00088b14 <memmove>:
   88b14:	4288      	cmp	r0, r1
   88b16:	b5f0      	push	{r4, r5, r6, r7, lr}
   88b18:	d90d      	bls.n	88b36 <memmove+0x22>
   88b1a:	188b      	adds	r3, r1, r2
   88b1c:	4298      	cmp	r0, r3
   88b1e:	d20a      	bcs.n	88b36 <memmove+0x22>
   88b20:	1884      	adds	r4, r0, r2
   88b22:	2a00      	cmp	r2, #0
   88b24:	d051      	beq.n	88bca <memmove+0xb6>
   88b26:	4622      	mov	r2, r4
   88b28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   88b2c:	4299      	cmp	r1, r3
   88b2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   88b32:	d1f9      	bne.n	88b28 <memmove+0x14>
   88b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88b36:	2a0f      	cmp	r2, #15
   88b38:	d948      	bls.n	88bcc <memmove+0xb8>
   88b3a:	ea41 0300 	orr.w	r3, r1, r0
   88b3e:	079b      	lsls	r3, r3, #30
   88b40:	d146      	bne.n	88bd0 <memmove+0xbc>
   88b42:	4615      	mov	r5, r2
   88b44:	f100 0410 	add.w	r4, r0, #16
   88b48:	f101 0310 	add.w	r3, r1, #16
   88b4c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   88b50:	3d10      	subs	r5, #16
   88b52:	f844 6c10 	str.w	r6, [r4, #-16]
   88b56:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   88b5a:	2d0f      	cmp	r5, #15
   88b5c:	f844 6c0c 	str.w	r6, [r4, #-12]
   88b60:	f853 6c08 	ldr.w	r6, [r3, #-8]
   88b64:	f104 0410 	add.w	r4, r4, #16
   88b68:	f844 6c18 	str.w	r6, [r4, #-24]
   88b6c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   88b70:	f103 0310 	add.w	r3, r3, #16
   88b74:	f844 6c14 	str.w	r6, [r4, #-20]
   88b78:	d8e8      	bhi.n	88b4c <memmove+0x38>
   88b7a:	f1a2 0310 	sub.w	r3, r2, #16
   88b7e:	f023 030f 	bic.w	r3, r3, #15
   88b82:	f002 0e0f 	and.w	lr, r2, #15
   88b86:	3310      	adds	r3, #16
   88b88:	f1be 0f03 	cmp.w	lr, #3
   88b8c:	4419      	add	r1, r3
   88b8e:	4403      	add	r3, r0
   88b90:	d921      	bls.n	88bd6 <memmove+0xc2>
   88b92:	460e      	mov	r6, r1
   88b94:	4674      	mov	r4, lr
   88b96:	1f1d      	subs	r5, r3, #4
   88b98:	f856 7b04 	ldr.w	r7, [r6], #4
   88b9c:	3c04      	subs	r4, #4
   88b9e:	2c03      	cmp	r4, #3
   88ba0:	f845 7f04 	str.w	r7, [r5, #4]!
   88ba4:	d8f8      	bhi.n	88b98 <memmove+0x84>
   88ba6:	f1ae 0404 	sub.w	r4, lr, #4
   88baa:	f024 0403 	bic.w	r4, r4, #3
   88bae:	3404      	adds	r4, #4
   88bb0:	4421      	add	r1, r4
   88bb2:	4423      	add	r3, r4
   88bb4:	f002 0203 	and.w	r2, r2, #3
   88bb8:	b162      	cbz	r2, 88bd4 <memmove+0xc0>
   88bba:	3b01      	subs	r3, #1
   88bbc:	440a      	add	r2, r1
   88bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
   88bc2:	428a      	cmp	r2, r1
   88bc4:	f803 4f01 	strb.w	r4, [r3, #1]!
   88bc8:	d1f9      	bne.n	88bbe <memmove+0xaa>
   88bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88bcc:	4603      	mov	r3, r0
   88bce:	e7f3      	b.n	88bb8 <memmove+0xa4>
   88bd0:	4603      	mov	r3, r0
   88bd2:	e7f2      	b.n	88bba <memmove+0xa6>
   88bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88bd6:	4672      	mov	r2, lr
   88bd8:	e7ee      	b.n	88bb8 <memmove+0xa4>
   88bda:	bf00      	nop

00088bdc <_realloc_r>:
   88bdc:	2900      	cmp	r1, #0
   88bde:	f000 8094 	beq.w	88d0a <_realloc_r+0x12e>
   88be2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88be6:	460c      	mov	r4, r1
   88be8:	4615      	mov	r5, r2
   88bea:	b083      	sub	sp, #12
   88bec:	4680      	mov	r8, r0
   88bee:	f105 060b 	add.w	r6, r5, #11
   88bf2:	f7ff fa23 	bl	8803c <__malloc_lock>
   88bf6:	f854 ec04 	ldr.w	lr, [r4, #-4]
   88bfa:	2e16      	cmp	r6, #22
   88bfc:	f02e 0703 	bic.w	r7, lr, #3
   88c00:	f1a4 0908 	sub.w	r9, r4, #8
   88c04:	d83c      	bhi.n	88c80 <_realloc_r+0xa4>
   88c06:	2210      	movs	r2, #16
   88c08:	4616      	mov	r6, r2
   88c0a:	42b5      	cmp	r5, r6
   88c0c:	d83d      	bhi.n	88c8a <_realloc_r+0xae>
   88c0e:	4297      	cmp	r7, r2
   88c10:	da43      	bge.n	88c9a <_realloc_r+0xbe>
   88c12:	4bc6      	ldr	r3, [pc, #792]	; (88f2c <_realloc_r+0x350>)
   88c14:	eb09 0007 	add.w	r0, r9, r7
   88c18:	6899      	ldr	r1, [r3, #8]
   88c1a:	4288      	cmp	r0, r1
   88c1c:	f000 80c3 	beq.w	88da6 <_realloc_r+0x1ca>
   88c20:	6843      	ldr	r3, [r0, #4]
   88c22:	f023 0101 	bic.w	r1, r3, #1
   88c26:	4401      	add	r1, r0
   88c28:	6849      	ldr	r1, [r1, #4]
   88c2a:	07c9      	lsls	r1, r1, #31
   88c2c:	d54d      	bpl.n	88cca <_realloc_r+0xee>
   88c2e:	f01e 0f01 	tst.w	lr, #1
   88c32:	f000 809b 	beq.w	88d6c <_realloc_r+0x190>
   88c36:	4629      	mov	r1, r5
   88c38:	4640      	mov	r0, r8
   88c3a:	f7fe fe8b 	bl	87954 <_malloc_r>
   88c3e:	4605      	mov	r5, r0
   88c40:	2800      	cmp	r0, #0
   88c42:	d03b      	beq.n	88cbc <_realloc_r+0xe0>
   88c44:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88c48:	f1a0 0208 	sub.w	r2, r0, #8
   88c4c:	f023 0301 	bic.w	r3, r3, #1
   88c50:	444b      	add	r3, r9
   88c52:	429a      	cmp	r2, r3
   88c54:	f000 812b 	beq.w	88eae <_realloc_r+0x2d2>
   88c58:	1f3a      	subs	r2, r7, #4
   88c5a:	2a24      	cmp	r2, #36	; 0x24
   88c5c:	f200 8118 	bhi.w	88e90 <_realloc_r+0x2b4>
   88c60:	2a13      	cmp	r2, #19
   88c62:	f200 80eb 	bhi.w	88e3c <_realloc_r+0x260>
   88c66:	4603      	mov	r3, r0
   88c68:	4622      	mov	r2, r4
   88c6a:	6811      	ldr	r1, [r2, #0]
   88c6c:	6019      	str	r1, [r3, #0]
   88c6e:	6851      	ldr	r1, [r2, #4]
   88c70:	6059      	str	r1, [r3, #4]
   88c72:	6892      	ldr	r2, [r2, #8]
   88c74:	609a      	str	r2, [r3, #8]
   88c76:	4621      	mov	r1, r4
   88c78:	4640      	mov	r0, r8
   88c7a:	f7ff fe65 	bl	88948 <_free_r>
   88c7e:	e01d      	b.n	88cbc <_realloc_r+0xe0>
   88c80:	f026 0607 	bic.w	r6, r6, #7
   88c84:	2e00      	cmp	r6, #0
   88c86:	4632      	mov	r2, r6
   88c88:	dabf      	bge.n	88c0a <_realloc_r+0x2e>
   88c8a:	2500      	movs	r5, #0
   88c8c:	230c      	movs	r3, #12
   88c8e:	4628      	mov	r0, r5
   88c90:	f8c8 3000 	str.w	r3, [r8]
   88c94:	b003      	add	sp, #12
   88c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88c9a:	4625      	mov	r5, r4
   88c9c:	1bbb      	subs	r3, r7, r6
   88c9e:	2b0f      	cmp	r3, #15
   88ca0:	f8d9 2004 	ldr.w	r2, [r9, #4]
   88ca4:	d81d      	bhi.n	88ce2 <_realloc_r+0x106>
   88ca6:	f002 0201 	and.w	r2, r2, #1
   88caa:	433a      	orrs	r2, r7
   88cac:	eb09 0107 	add.w	r1, r9, r7
   88cb0:	f8c9 2004 	str.w	r2, [r9, #4]
   88cb4:	684b      	ldr	r3, [r1, #4]
   88cb6:	f043 0301 	orr.w	r3, r3, #1
   88cba:	604b      	str	r3, [r1, #4]
   88cbc:	4640      	mov	r0, r8
   88cbe:	f7ff f9c3 	bl	88048 <__malloc_unlock>
   88cc2:	4628      	mov	r0, r5
   88cc4:	b003      	add	sp, #12
   88cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88cca:	f023 0303 	bic.w	r3, r3, #3
   88cce:	18f9      	adds	r1, r7, r3
   88cd0:	4291      	cmp	r1, r2
   88cd2:	db1d      	blt.n	88d10 <_realloc_r+0x134>
   88cd4:	68c3      	ldr	r3, [r0, #12]
   88cd6:	6882      	ldr	r2, [r0, #8]
   88cd8:	4625      	mov	r5, r4
   88cda:	60d3      	str	r3, [r2, #12]
   88cdc:	460f      	mov	r7, r1
   88cde:	609a      	str	r2, [r3, #8]
   88ce0:	e7dc      	b.n	88c9c <_realloc_r+0xc0>
   88ce2:	f002 0201 	and.w	r2, r2, #1
   88ce6:	eb09 0106 	add.w	r1, r9, r6
   88cea:	f043 0301 	orr.w	r3, r3, #1
   88cee:	4332      	orrs	r2, r6
   88cf0:	f8c9 2004 	str.w	r2, [r9, #4]
   88cf4:	444f      	add	r7, r9
   88cf6:	604b      	str	r3, [r1, #4]
   88cf8:	687b      	ldr	r3, [r7, #4]
   88cfa:	3108      	adds	r1, #8
   88cfc:	f043 0301 	orr.w	r3, r3, #1
   88d00:	607b      	str	r3, [r7, #4]
   88d02:	4640      	mov	r0, r8
   88d04:	f7ff fe20 	bl	88948 <_free_r>
   88d08:	e7d8      	b.n	88cbc <_realloc_r+0xe0>
   88d0a:	4611      	mov	r1, r2
   88d0c:	f7fe be22 	b.w	87954 <_malloc_r>
   88d10:	f01e 0f01 	tst.w	lr, #1
   88d14:	d18f      	bne.n	88c36 <_realloc_r+0x5a>
   88d16:	f854 1c08 	ldr.w	r1, [r4, #-8]
   88d1a:	eba9 0a01 	sub.w	sl, r9, r1
   88d1e:	f8da 1004 	ldr.w	r1, [sl, #4]
   88d22:	f021 0103 	bic.w	r1, r1, #3
   88d26:	440b      	add	r3, r1
   88d28:	443b      	add	r3, r7
   88d2a:	4293      	cmp	r3, r2
   88d2c:	db26      	blt.n	88d7c <_realloc_r+0x1a0>
   88d2e:	4655      	mov	r5, sl
   88d30:	68c1      	ldr	r1, [r0, #12]
   88d32:	6880      	ldr	r0, [r0, #8]
   88d34:	1f3a      	subs	r2, r7, #4
   88d36:	60c1      	str	r1, [r0, #12]
   88d38:	6088      	str	r0, [r1, #8]
   88d3a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   88d3e:	f8da 100c 	ldr.w	r1, [sl, #12]
   88d42:	2a24      	cmp	r2, #36	; 0x24
   88d44:	60c1      	str	r1, [r0, #12]
   88d46:	6088      	str	r0, [r1, #8]
   88d48:	d826      	bhi.n	88d98 <_realloc_r+0x1bc>
   88d4a:	2a13      	cmp	r2, #19
   88d4c:	f240 8081 	bls.w	88e52 <_realloc_r+0x276>
   88d50:	6821      	ldr	r1, [r4, #0]
   88d52:	2a1b      	cmp	r2, #27
   88d54:	f8ca 1008 	str.w	r1, [sl, #8]
   88d58:	6861      	ldr	r1, [r4, #4]
   88d5a:	f8ca 100c 	str.w	r1, [sl, #12]
   88d5e:	f200 80ad 	bhi.w	88ebc <_realloc_r+0x2e0>
   88d62:	f104 0008 	add.w	r0, r4, #8
   88d66:	f10a 0210 	add.w	r2, sl, #16
   88d6a:	e074      	b.n	88e56 <_realloc_r+0x27a>
   88d6c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   88d70:	eba9 0a03 	sub.w	sl, r9, r3
   88d74:	f8da 1004 	ldr.w	r1, [sl, #4]
   88d78:	f021 0103 	bic.w	r1, r1, #3
   88d7c:	187b      	adds	r3, r7, r1
   88d7e:	4293      	cmp	r3, r2
   88d80:	f6ff af59 	blt.w	88c36 <_realloc_r+0x5a>
   88d84:	4655      	mov	r5, sl
   88d86:	f8da 100c 	ldr.w	r1, [sl, #12]
   88d8a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   88d8e:	1f3a      	subs	r2, r7, #4
   88d90:	2a24      	cmp	r2, #36	; 0x24
   88d92:	60c1      	str	r1, [r0, #12]
   88d94:	6088      	str	r0, [r1, #8]
   88d96:	d9d8      	bls.n	88d4a <_realloc_r+0x16e>
   88d98:	4621      	mov	r1, r4
   88d9a:	4628      	mov	r0, r5
   88d9c:	461f      	mov	r7, r3
   88d9e:	46d1      	mov	r9, sl
   88da0:	f7ff feb8 	bl	88b14 <memmove>
   88da4:	e77a      	b.n	88c9c <_realloc_r+0xc0>
   88da6:	6841      	ldr	r1, [r0, #4]
   88da8:	f106 0010 	add.w	r0, r6, #16
   88dac:	f021 0b03 	bic.w	fp, r1, #3
   88db0:	44bb      	add	fp, r7
   88db2:	4583      	cmp	fp, r0
   88db4:	da58      	bge.n	88e68 <_realloc_r+0x28c>
   88db6:	f01e 0f01 	tst.w	lr, #1
   88dba:	f47f af3c 	bne.w	88c36 <_realloc_r+0x5a>
   88dbe:	f854 1c08 	ldr.w	r1, [r4, #-8]
   88dc2:	eba9 0a01 	sub.w	sl, r9, r1
   88dc6:	f8da 1004 	ldr.w	r1, [sl, #4]
   88dca:	f021 0103 	bic.w	r1, r1, #3
   88dce:	448b      	add	fp, r1
   88dd0:	4558      	cmp	r0, fp
   88dd2:	dcd3      	bgt.n	88d7c <_realloc_r+0x1a0>
   88dd4:	4655      	mov	r5, sl
   88dd6:	f8da 100c 	ldr.w	r1, [sl, #12]
   88dda:	f855 0f08 	ldr.w	r0, [r5, #8]!
   88dde:	1f3a      	subs	r2, r7, #4
   88de0:	2a24      	cmp	r2, #36	; 0x24
   88de2:	60c1      	str	r1, [r0, #12]
   88de4:	6088      	str	r0, [r1, #8]
   88de6:	f200 808d 	bhi.w	88f04 <_realloc_r+0x328>
   88dea:	2a13      	cmp	r2, #19
   88dec:	f240 8087 	bls.w	88efe <_realloc_r+0x322>
   88df0:	6821      	ldr	r1, [r4, #0]
   88df2:	2a1b      	cmp	r2, #27
   88df4:	f8ca 1008 	str.w	r1, [sl, #8]
   88df8:	6861      	ldr	r1, [r4, #4]
   88dfa:	f8ca 100c 	str.w	r1, [sl, #12]
   88dfe:	f200 8088 	bhi.w	88f12 <_realloc_r+0x336>
   88e02:	f104 0108 	add.w	r1, r4, #8
   88e06:	f10a 0210 	add.w	r2, sl, #16
   88e0a:	6808      	ldr	r0, [r1, #0]
   88e0c:	6010      	str	r0, [r2, #0]
   88e0e:	6848      	ldr	r0, [r1, #4]
   88e10:	6050      	str	r0, [r2, #4]
   88e12:	6889      	ldr	r1, [r1, #8]
   88e14:	6091      	str	r1, [r2, #8]
   88e16:	ebab 0206 	sub.w	r2, fp, r6
   88e1a:	eb0a 0106 	add.w	r1, sl, r6
   88e1e:	f042 0201 	orr.w	r2, r2, #1
   88e22:	6099      	str	r1, [r3, #8]
   88e24:	604a      	str	r2, [r1, #4]
   88e26:	f8da 3004 	ldr.w	r3, [sl, #4]
   88e2a:	4640      	mov	r0, r8
   88e2c:	f003 0301 	and.w	r3, r3, #1
   88e30:	431e      	orrs	r6, r3
   88e32:	f8ca 6004 	str.w	r6, [sl, #4]
   88e36:	f7ff f907 	bl	88048 <__malloc_unlock>
   88e3a:	e742      	b.n	88cc2 <_realloc_r+0xe6>
   88e3c:	6823      	ldr	r3, [r4, #0]
   88e3e:	2a1b      	cmp	r2, #27
   88e40:	6003      	str	r3, [r0, #0]
   88e42:	6863      	ldr	r3, [r4, #4]
   88e44:	6043      	str	r3, [r0, #4]
   88e46:	d827      	bhi.n	88e98 <_realloc_r+0x2bc>
   88e48:	f100 0308 	add.w	r3, r0, #8
   88e4c:	f104 0208 	add.w	r2, r4, #8
   88e50:	e70b      	b.n	88c6a <_realloc_r+0x8e>
   88e52:	4620      	mov	r0, r4
   88e54:	462a      	mov	r2, r5
   88e56:	6801      	ldr	r1, [r0, #0]
   88e58:	461f      	mov	r7, r3
   88e5a:	6011      	str	r1, [r2, #0]
   88e5c:	6841      	ldr	r1, [r0, #4]
   88e5e:	46d1      	mov	r9, sl
   88e60:	6051      	str	r1, [r2, #4]
   88e62:	6883      	ldr	r3, [r0, #8]
   88e64:	6093      	str	r3, [r2, #8]
   88e66:	e719      	b.n	88c9c <_realloc_r+0xc0>
   88e68:	ebab 0b06 	sub.w	fp, fp, r6
   88e6c:	eb09 0106 	add.w	r1, r9, r6
   88e70:	f04b 0201 	orr.w	r2, fp, #1
   88e74:	6099      	str	r1, [r3, #8]
   88e76:	604a      	str	r2, [r1, #4]
   88e78:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88e7c:	4640      	mov	r0, r8
   88e7e:	f003 0301 	and.w	r3, r3, #1
   88e82:	431e      	orrs	r6, r3
   88e84:	f844 6c04 	str.w	r6, [r4, #-4]
   88e88:	f7ff f8de 	bl	88048 <__malloc_unlock>
   88e8c:	4625      	mov	r5, r4
   88e8e:	e718      	b.n	88cc2 <_realloc_r+0xe6>
   88e90:	4621      	mov	r1, r4
   88e92:	f7ff fe3f 	bl	88b14 <memmove>
   88e96:	e6ee      	b.n	88c76 <_realloc_r+0x9a>
   88e98:	68a3      	ldr	r3, [r4, #8]
   88e9a:	2a24      	cmp	r2, #36	; 0x24
   88e9c:	6083      	str	r3, [r0, #8]
   88e9e:	68e3      	ldr	r3, [r4, #12]
   88ea0:	60c3      	str	r3, [r0, #12]
   88ea2:	d018      	beq.n	88ed6 <_realloc_r+0x2fa>
   88ea4:	f100 0310 	add.w	r3, r0, #16
   88ea8:	f104 0210 	add.w	r2, r4, #16
   88eac:	e6dd      	b.n	88c6a <_realloc_r+0x8e>
   88eae:	f850 3c04 	ldr.w	r3, [r0, #-4]
   88eb2:	4625      	mov	r5, r4
   88eb4:	f023 0303 	bic.w	r3, r3, #3
   88eb8:	441f      	add	r7, r3
   88eba:	e6ef      	b.n	88c9c <_realloc_r+0xc0>
   88ebc:	68a1      	ldr	r1, [r4, #8]
   88ebe:	2a24      	cmp	r2, #36	; 0x24
   88ec0:	f8ca 1010 	str.w	r1, [sl, #16]
   88ec4:	68e1      	ldr	r1, [r4, #12]
   88ec6:	f8ca 1014 	str.w	r1, [sl, #20]
   88eca:	d00d      	beq.n	88ee8 <_realloc_r+0x30c>
   88ecc:	f104 0010 	add.w	r0, r4, #16
   88ed0:	f10a 0218 	add.w	r2, sl, #24
   88ed4:	e7bf      	b.n	88e56 <_realloc_r+0x27a>
   88ed6:	6922      	ldr	r2, [r4, #16]
   88ed8:	f100 0318 	add.w	r3, r0, #24
   88edc:	6102      	str	r2, [r0, #16]
   88ede:	6961      	ldr	r1, [r4, #20]
   88ee0:	f104 0218 	add.w	r2, r4, #24
   88ee4:	6141      	str	r1, [r0, #20]
   88ee6:	e6c0      	b.n	88c6a <_realloc_r+0x8e>
   88ee8:	6922      	ldr	r2, [r4, #16]
   88eea:	f104 0018 	add.w	r0, r4, #24
   88eee:	f8ca 2018 	str.w	r2, [sl, #24]
   88ef2:	6961      	ldr	r1, [r4, #20]
   88ef4:	f10a 0220 	add.w	r2, sl, #32
   88ef8:	f8ca 101c 	str.w	r1, [sl, #28]
   88efc:	e7ab      	b.n	88e56 <_realloc_r+0x27a>
   88efe:	4621      	mov	r1, r4
   88f00:	462a      	mov	r2, r5
   88f02:	e782      	b.n	88e0a <_realloc_r+0x22e>
   88f04:	4621      	mov	r1, r4
   88f06:	4628      	mov	r0, r5
   88f08:	9301      	str	r3, [sp, #4]
   88f0a:	f7ff fe03 	bl	88b14 <memmove>
   88f0e:	9b01      	ldr	r3, [sp, #4]
   88f10:	e781      	b.n	88e16 <_realloc_r+0x23a>
   88f12:	68a1      	ldr	r1, [r4, #8]
   88f14:	2a24      	cmp	r2, #36	; 0x24
   88f16:	f8ca 1010 	str.w	r1, [sl, #16]
   88f1a:	68e1      	ldr	r1, [r4, #12]
   88f1c:	f8ca 1014 	str.w	r1, [sl, #20]
   88f20:	d006      	beq.n	88f30 <_realloc_r+0x354>
   88f22:	f104 0110 	add.w	r1, r4, #16
   88f26:	f10a 0218 	add.w	r2, sl, #24
   88f2a:	e76e      	b.n	88e0a <_realloc_r+0x22e>
   88f2c:	20000bd0 	.word	0x20000bd0
   88f30:	6922      	ldr	r2, [r4, #16]
   88f32:	f104 0118 	add.w	r1, r4, #24
   88f36:	f8ca 2018 	str.w	r2, [sl, #24]
   88f3a:	6960      	ldr	r0, [r4, #20]
   88f3c:	f10a 0220 	add.w	r2, sl, #32
   88f40:	f8ca 001c 	str.w	r0, [sl, #28]
   88f44:	e761      	b.n	88e0a <_realloc_r+0x22e>
   88f46:	bf00      	nop

00088f48 <__aeabi_drsub>:
   88f48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   88f4c:	e002      	b.n	88f54 <__adddf3>
   88f4e:	bf00      	nop

00088f50 <__aeabi_dsub>:
   88f50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00088f54 <__adddf3>:
   88f54:	b530      	push	{r4, r5, lr}
   88f56:	ea4f 0441 	mov.w	r4, r1, lsl #1
   88f5a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   88f5e:	ea94 0f05 	teq	r4, r5
   88f62:	bf08      	it	eq
   88f64:	ea90 0f02 	teqeq	r0, r2
   88f68:	bf1f      	itttt	ne
   88f6a:	ea54 0c00 	orrsne.w	ip, r4, r0
   88f6e:	ea55 0c02 	orrsne.w	ip, r5, r2
   88f72:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   88f76:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   88f7a:	f000 80e2 	beq.w	89142 <__adddf3+0x1ee>
   88f7e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   88f82:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   88f86:	bfb8      	it	lt
   88f88:	426d      	neglt	r5, r5
   88f8a:	dd0c      	ble.n	88fa6 <__adddf3+0x52>
   88f8c:	442c      	add	r4, r5
   88f8e:	ea80 0202 	eor.w	r2, r0, r2
   88f92:	ea81 0303 	eor.w	r3, r1, r3
   88f96:	ea82 0000 	eor.w	r0, r2, r0
   88f9a:	ea83 0101 	eor.w	r1, r3, r1
   88f9e:	ea80 0202 	eor.w	r2, r0, r2
   88fa2:	ea81 0303 	eor.w	r3, r1, r3
   88fa6:	2d36      	cmp	r5, #54	; 0x36
   88fa8:	bf88      	it	hi
   88faa:	bd30      	pophi	{r4, r5, pc}
   88fac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   88fb0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   88fb4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   88fb8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   88fbc:	d002      	beq.n	88fc4 <__adddf3+0x70>
   88fbe:	4240      	negs	r0, r0
   88fc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   88fc4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   88fc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   88fcc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   88fd0:	d002      	beq.n	88fd8 <__adddf3+0x84>
   88fd2:	4252      	negs	r2, r2
   88fd4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   88fd8:	ea94 0f05 	teq	r4, r5
   88fdc:	f000 80a7 	beq.w	8912e <__adddf3+0x1da>
   88fe0:	f1a4 0401 	sub.w	r4, r4, #1
   88fe4:	f1d5 0e20 	rsbs	lr, r5, #32
   88fe8:	db0d      	blt.n	89006 <__adddf3+0xb2>
   88fea:	fa02 fc0e 	lsl.w	ip, r2, lr
   88fee:	fa22 f205 	lsr.w	r2, r2, r5
   88ff2:	1880      	adds	r0, r0, r2
   88ff4:	f141 0100 	adc.w	r1, r1, #0
   88ff8:	fa03 f20e 	lsl.w	r2, r3, lr
   88ffc:	1880      	adds	r0, r0, r2
   88ffe:	fa43 f305 	asr.w	r3, r3, r5
   89002:	4159      	adcs	r1, r3
   89004:	e00e      	b.n	89024 <__adddf3+0xd0>
   89006:	f1a5 0520 	sub.w	r5, r5, #32
   8900a:	f10e 0e20 	add.w	lr, lr, #32
   8900e:	2a01      	cmp	r2, #1
   89010:	fa03 fc0e 	lsl.w	ip, r3, lr
   89014:	bf28      	it	cs
   89016:	f04c 0c02 	orrcs.w	ip, ip, #2
   8901a:	fa43 f305 	asr.w	r3, r3, r5
   8901e:	18c0      	adds	r0, r0, r3
   89020:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   89024:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   89028:	d507      	bpl.n	8903a <__adddf3+0xe6>
   8902a:	f04f 0e00 	mov.w	lr, #0
   8902e:	f1dc 0c00 	rsbs	ip, ip, #0
   89032:	eb7e 0000 	sbcs.w	r0, lr, r0
   89036:	eb6e 0101 	sbc.w	r1, lr, r1
   8903a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8903e:	d31b      	bcc.n	89078 <__adddf3+0x124>
   89040:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   89044:	d30c      	bcc.n	89060 <__adddf3+0x10c>
   89046:	0849      	lsrs	r1, r1, #1
   89048:	ea5f 0030 	movs.w	r0, r0, rrx
   8904c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   89050:	f104 0401 	add.w	r4, r4, #1
   89054:	ea4f 5244 	mov.w	r2, r4, lsl #21
   89058:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8905c:	f080 809a 	bcs.w	89194 <__adddf3+0x240>
   89060:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   89064:	bf08      	it	eq
   89066:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8906a:	f150 0000 	adcs.w	r0, r0, #0
   8906e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   89072:	ea41 0105 	orr.w	r1, r1, r5
   89076:	bd30      	pop	{r4, r5, pc}
   89078:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8907c:	4140      	adcs	r0, r0
   8907e:	eb41 0101 	adc.w	r1, r1, r1
   89082:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   89086:	f1a4 0401 	sub.w	r4, r4, #1
   8908a:	d1e9      	bne.n	89060 <__adddf3+0x10c>
   8908c:	f091 0f00 	teq	r1, #0
   89090:	bf04      	itt	eq
   89092:	4601      	moveq	r1, r0
   89094:	2000      	moveq	r0, #0
   89096:	fab1 f381 	clz	r3, r1
   8909a:	bf08      	it	eq
   8909c:	3320      	addeq	r3, #32
   8909e:	f1a3 030b 	sub.w	r3, r3, #11
   890a2:	f1b3 0220 	subs.w	r2, r3, #32
   890a6:	da0c      	bge.n	890c2 <__adddf3+0x16e>
   890a8:	320c      	adds	r2, #12
   890aa:	dd08      	ble.n	890be <__adddf3+0x16a>
   890ac:	f102 0c14 	add.w	ip, r2, #20
   890b0:	f1c2 020c 	rsb	r2, r2, #12
   890b4:	fa01 f00c 	lsl.w	r0, r1, ip
   890b8:	fa21 f102 	lsr.w	r1, r1, r2
   890bc:	e00c      	b.n	890d8 <__adddf3+0x184>
   890be:	f102 0214 	add.w	r2, r2, #20
   890c2:	bfd8      	it	le
   890c4:	f1c2 0c20 	rsble	ip, r2, #32
   890c8:	fa01 f102 	lsl.w	r1, r1, r2
   890cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   890d0:	bfdc      	itt	le
   890d2:	ea41 010c 	orrle.w	r1, r1, ip
   890d6:	4090      	lslle	r0, r2
   890d8:	1ae4      	subs	r4, r4, r3
   890da:	bfa2      	ittt	ge
   890dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   890e0:	4329      	orrge	r1, r5
   890e2:	bd30      	popge	{r4, r5, pc}
   890e4:	ea6f 0404 	mvn.w	r4, r4
   890e8:	3c1f      	subs	r4, #31
   890ea:	da1c      	bge.n	89126 <__adddf3+0x1d2>
   890ec:	340c      	adds	r4, #12
   890ee:	dc0e      	bgt.n	8910e <__adddf3+0x1ba>
   890f0:	f104 0414 	add.w	r4, r4, #20
   890f4:	f1c4 0220 	rsb	r2, r4, #32
   890f8:	fa20 f004 	lsr.w	r0, r0, r4
   890fc:	fa01 f302 	lsl.w	r3, r1, r2
   89100:	ea40 0003 	orr.w	r0, r0, r3
   89104:	fa21 f304 	lsr.w	r3, r1, r4
   89108:	ea45 0103 	orr.w	r1, r5, r3
   8910c:	bd30      	pop	{r4, r5, pc}
   8910e:	f1c4 040c 	rsb	r4, r4, #12
   89112:	f1c4 0220 	rsb	r2, r4, #32
   89116:	fa20 f002 	lsr.w	r0, r0, r2
   8911a:	fa01 f304 	lsl.w	r3, r1, r4
   8911e:	ea40 0003 	orr.w	r0, r0, r3
   89122:	4629      	mov	r1, r5
   89124:	bd30      	pop	{r4, r5, pc}
   89126:	fa21 f004 	lsr.w	r0, r1, r4
   8912a:	4629      	mov	r1, r5
   8912c:	bd30      	pop	{r4, r5, pc}
   8912e:	f094 0f00 	teq	r4, #0
   89132:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   89136:	bf06      	itte	eq
   89138:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8913c:	3401      	addeq	r4, #1
   8913e:	3d01      	subne	r5, #1
   89140:	e74e      	b.n	88fe0 <__adddf3+0x8c>
   89142:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   89146:	bf18      	it	ne
   89148:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8914c:	d029      	beq.n	891a2 <__adddf3+0x24e>
   8914e:	ea94 0f05 	teq	r4, r5
   89152:	bf08      	it	eq
   89154:	ea90 0f02 	teqeq	r0, r2
   89158:	d005      	beq.n	89166 <__adddf3+0x212>
   8915a:	ea54 0c00 	orrs.w	ip, r4, r0
   8915e:	bf04      	itt	eq
   89160:	4619      	moveq	r1, r3
   89162:	4610      	moveq	r0, r2
   89164:	bd30      	pop	{r4, r5, pc}
   89166:	ea91 0f03 	teq	r1, r3
   8916a:	bf1e      	ittt	ne
   8916c:	2100      	movne	r1, #0
   8916e:	2000      	movne	r0, #0
   89170:	bd30      	popne	{r4, r5, pc}
   89172:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   89176:	d105      	bne.n	89184 <__adddf3+0x230>
   89178:	0040      	lsls	r0, r0, #1
   8917a:	4149      	adcs	r1, r1
   8917c:	bf28      	it	cs
   8917e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   89182:	bd30      	pop	{r4, r5, pc}
   89184:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   89188:	bf3c      	itt	cc
   8918a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8918e:	bd30      	popcc	{r4, r5, pc}
   89190:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   89194:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   89198:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8919c:	f04f 0000 	mov.w	r0, #0
   891a0:	bd30      	pop	{r4, r5, pc}
   891a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   891a6:	bf1a      	itte	ne
   891a8:	4619      	movne	r1, r3
   891aa:	4610      	movne	r0, r2
   891ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   891b0:	bf1c      	itt	ne
   891b2:	460b      	movne	r3, r1
   891b4:	4602      	movne	r2, r0
   891b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   891ba:	bf06      	itte	eq
   891bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   891c0:	ea91 0f03 	teqeq	r1, r3
   891c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   891c8:	bd30      	pop	{r4, r5, pc}
   891ca:	bf00      	nop

000891cc <__aeabi_ui2d>:
   891cc:	f090 0f00 	teq	r0, #0
   891d0:	bf04      	itt	eq
   891d2:	2100      	moveq	r1, #0
   891d4:	4770      	bxeq	lr
   891d6:	b530      	push	{r4, r5, lr}
   891d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   891dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   891e0:	f04f 0500 	mov.w	r5, #0
   891e4:	f04f 0100 	mov.w	r1, #0
   891e8:	e750      	b.n	8908c <__adddf3+0x138>
   891ea:	bf00      	nop

000891ec <__aeabi_i2d>:
   891ec:	f090 0f00 	teq	r0, #0
   891f0:	bf04      	itt	eq
   891f2:	2100      	moveq	r1, #0
   891f4:	4770      	bxeq	lr
   891f6:	b530      	push	{r4, r5, lr}
   891f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   891fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   89200:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   89204:	bf48      	it	mi
   89206:	4240      	negmi	r0, r0
   89208:	f04f 0100 	mov.w	r1, #0
   8920c:	e73e      	b.n	8908c <__adddf3+0x138>
   8920e:	bf00      	nop

00089210 <__aeabi_f2d>:
   89210:	0042      	lsls	r2, r0, #1
   89212:	ea4f 01e2 	mov.w	r1, r2, asr #3
   89216:	ea4f 0131 	mov.w	r1, r1, rrx
   8921a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8921e:	bf1f      	itttt	ne
   89220:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   89224:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   89228:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8922c:	4770      	bxne	lr
   8922e:	f092 0f00 	teq	r2, #0
   89232:	bf14      	ite	ne
   89234:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   89238:	4770      	bxeq	lr
   8923a:	b530      	push	{r4, r5, lr}
   8923c:	f44f 7460 	mov.w	r4, #896	; 0x380
   89240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   89244:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   89248:	e720      	b.n	8908c <__adddf3+0x138>
   8924a:	bf00      	nop

0008924c <__aeabi_ul2d>:
   8924c:	ea50 0201 	orrs.w	r2, r0, r1
   89250:	bf08      	it	eq
   89252:	4770      	bxeq	lr
   89254:	b530      	push	{r4, r5, lr}
   89256:	f04f 0500 	mov.w	r5, #0
   8925a:	e00a      	b.n	89272 <__aeabi_l2d+0x16>

0008925c <__aeabi_l2d>:
   8925c:	ea50 0201 	orrs.w	r2, r0, r1
   89260:	bf08      	it	eq
   89262:	4770      	bxeq	lr
   89264:	b530      	push	{r4, r5, lr}
   89266:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8926a:	d502      	bpl.n	89272 <__aeabi_l2d+0x16>
   8926c:	4240      	negs	r0, r0
   8926e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   89272:	f44f 6480 	mov.w	r4, #1024	; 0x400
   89276:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8927a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8927e:	f43f aedc 	beq.w	8903a <__adddf3+0xe6>
   89282:	f04f 0203 	mov.w	r2, #3
   89286:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8928a:	bf18      	it	ne
   8928c:	3203      	addne	r2, #3
   8928e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   89292:	bf18      	it	ne
   89294:	3203      	addne	r2, #3
   89296:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8929a:	f1c2 0320 	rsb	r3, r2, #32
   8929e:	fa00 fc03 	lsl.w	ip, r0, r3
   892a2:	fa20 f002 	lsr.w	r0, r0, r2
   892a6:	fa01 fe03 	lsl.w	lr, r1, r3
   892aa:	ea40 000e 	orr.w	r0, r0, lr
   892ae:	fa21 f102 	lsr.w	r1, r1, r2
   892b2:	4414      	add	r4, r2
   892b4:	e6c1      	b.n	8903a <__adddf3+0xe6>
   892b6:	bf00      	nop

000892b8 <__aeabi_dmul>:
   892b8:	b570      	push	{r4, r5, r6, lr}
   892ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   892be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   892c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   892c6:	bf1d      	ittte	ne
   892c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   892cc:	ea94 0f0c 	teqne	r4, ip
   892d0:	ea95 0f0c 	teqne	r5, ip
   892d4:	f000 f8de 	bleq	89494 <__aeabi_dmul+0x1dc>
   892d8:	442c      	add	r4, r5
   892da:	ea81 0603 	eor.w	r6, r1, r3
   892de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   892e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   892e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   892ea:	bf18      	it	ne
   892ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   892f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   892f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   892f8:	d038      	beq.n	8936c <__aeabi_dmul+0xb4>
   892fa:	fba0 ce02 	umull	ip, lr, r0, r2
   892fe:	f04f 0500 	mov.w	r5, #0
   89302:	fbe1 e502 	umlal	lr, r5, r1, r2
   89306:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8930a:	fbe0 e503 	umlal	lr, r5, r0, r3
   8930e:	f04f 0600 	mov.w	r6, #0
   89312:	fbe1 5603 	umlal	r5, r6, r1, r3
   89316:	f09c 0f00 	teq	ip, #0
   8931a:	bf18      	it	ne
   8931c:	f04e 0e01 	orrne.w	lr, lr, #1
   89320:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   89324:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   89328:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8932c:	d204      	bcs.n	89338 <__aeabi_dmul+0x80>
   8932e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   89332:	416d      	adcs	r5, r5
   89334:	eb46 0606 	adc.w	r6, r6, r6
   89338:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8933c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   89340:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   89344:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   89348:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8934c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   89350:	bf88      	it	hi
   89352:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   89356:	d81e      	bhi.n	89396 <__aeabi_dmul+0xde>
   89358:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8935c:	bf08      	it	eq
   8935e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   89362:	f150 0000 	adcs.w	r0, r0, #0
   89366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8936a:	bd70      	pop	{r4, r5, r6, pc}
   8936c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   89370:	ea46 0101 	orr.w	r1, r6, r1
   89374:	ea40 0002 	orr.w	r0, r0, r2
   89378:	ea81 0103 	eor.w	r1, r1, r3
   8937c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   89380:	bfc2      	ittt	gt
   89382:	ebd4 050c 	rsbsgt	r5, r4, ip
   89386:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8938a:	bd70      	popgt	{r4, r5, r6, pc}
   8938c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   89390:	f04f 0e00 	mov.w	lr, #0
   89394:	3c01      	subs	r4, #1
   89396:	f300 80ab 	bgt.w	894f0 <__aeabi_dmul+0x238>
   8939a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8939e:	bfde      	ittt	le
   893a0:	2000      	movle	r0, #0
   893a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   893a6:	bd70      	pople	{r4, r5, r6, pc}
   893a8:	f1c4 0400 	rsb	r4, r4, #0
   893ac:	3c20      	subs	r4, #32
   893ae:	da35      	bge.n	8941c <__aeabi_dmul+0x164>
   893b0:	340c      	adds	r4, #12
   893b2:	dc1b      	bgt.n	893ec <__aeabi_dmul+0x134>
   893b4:	f104 0414 	add.w	r4, r4, #20
   893b8:	f1c4 0520 	rsb	r5, r4, #32
   893bc:	fa00 f305 	lsl.w	r3, r0, r5
   893c0:	fa20 f004 	lsr.w	r0, r0, r4
   893c4:	fa01 f205 	lsl.w	r2, r1, r5
   893c8:	ea40 0002 	orr.w	r0, r0, r2
   893cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   893d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   893d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   893d8:	fa21 f604 	lsr.w	r6, r1, r4
   893dc:	eb42 0106 	adc.w	r1, r2, r6
   893e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   893e4:	bf08      	it	eq
   893e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   893ea:	bd70      	pop	{r4, r5, r6, pc}
   893ec:	f1c4 040c 	rsb	r4, r4, #12
   893f0:	f1c4 0520 	rsb	r5, r4, #32
   893f4:	fa00 f304 	lsl.w	r3, r0, r4
   893f8:	fa20 f005 	lsr.w	r0, r0, r5
   893fc:	fa01 f204 	lsl.w	r2, r1, r4
   89400:	ea40 0002 	orr.w	r0, r0, r2
   89404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   89408:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8940c:	f141 0100 	adc.w	r1, r1, #0
   89410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   89414:	bf08      	it	eq
   89416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8941a:	bd70      	pop	{r4, r5, r6, pc}
   8941c:	f1c4 0520 	rsb	r5, r4, #32
   89420:	fa00 f205 	lsl.w	r2, r0, r5
   89424:	ea4e 0e02 	orr.w	lr, lr, r2
   89428:	fa20 f304 	lsr.w	r3, r0, r4
   8942c:	fa01 f205 	lsl.w	r2, r1, r5
   89430:	ea43 0302 	orr.w	r3, r3, r2
   89434:	fa21 f004 	lsr.w	r0, r1, r4
   89438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8943c:	fa21 f204 	lsr.w	r2, r1, r4
   89440:	ea20 0002 	bic.w	r0, r0, r2
   89444:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   89448:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8944c:	bf08      	it	eq
   8944e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   89452:	bd70      	pop	{r4, r5, r6, pc}
   89454:	f094 0f00 	teq	r4, #0
   89458:	d10f      	bne.n	8947a <__aeabi_dmul+0x1c2>
   8945a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8945e:	0040      	lsls	r0, r0, #1
   89460:	eb41 0101 	adc.w	r1, r1, r1
   89464:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   89468:	bf08      	it	eq
   8946a:	3c01      	subeq	r4, #1
   8946c:	d0f7      	beq.n	8945e <__aeabi_dmul+0x1a6>
   8946e:	ea41 0106 	orr.w	r1, r1, r6
   89472:	f095 0f00 	teq	r5, #0
   89476:	bf18      	it	ne
   89478:	4770      	bxne	lr
   8947a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8947e:	0052      	lsls	r2, r2, #1
   89480:	eb43 0303 	adc.w	r3, r3, r3
   89484:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   89488:	bf08      	it	eq
   8948a:	3d01      	subeq	r5, #1
   8948c:	d0f7      	beq.n	8947e <__aeabi_dmul+0x1c6>
   8948e:	ea43 0306 	orr.w	r3, r3, r6
   89492:	4770      	bx	lr
   89494:	ea94 0f0c 	teq	r4, ip
   89498:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8949c:	bf18      	it	ne
   8949e:	ea95 0f0c 	teqne	r5, ip
   894a2:	d00c      	beq.n	894be <__aeabi_dmul+0x206>
   894a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   894a8:	bf18      	it	ne
   894aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   894ae:	d1d1      	bne.n	89454 <__aeabi_dmul+0x19c>
   894b0:	ea81 0103 	eor.w	r1, r1, r3
   894b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   894b8:	f04f 0000 	mov.w	r0, #0
   894bc:	bd70      	pop	{r4, r5, r6, pc}
   894be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   894c2:	bf06      	itte	eq
   894c4:	4610      	moveq	r0, r2
   894c6:	4619      	moveq	r1, r3
   894c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   894cc:	d019      	beq.n	89502 <__aeabi_dmul+0x24a>
   894ce:	ea94 0f0c 	teq	r4, ip
   894d2:	d102      	bne.n	894da <__aeabi_dmul+0x222>
   894d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   894d8:	d113      	bne.n	89502 <__aeabi_dmul+0x24a>
   894da:	ea95 0f0c 	teq	r5, ip
   894de:	d105      	bne.n	894ec <__aeabi_dmul+0x234>
   894e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   894e4:	bf1c      	itt	ne
   894e6:	4610      	movne	r0, r2
   894e8:	4619      	movne	r1, r3
   894ea:	d10a      	bne.n	89502 <__aeabi_dmul+0x24a>
   894ec:	ea81 0103 	eor.w	r1, r1, r3
   894f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   894f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   894f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   894fc:	f04f 0000 	mov.w	r0, #0
   89500:	bd70      	pop	{r4, r5, r6, pc}
   89502:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   89506:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8950a:	bd70      	pop	{r4, r5, r6, pc}

0008950c <__aeabi_ddiv>:
   8950c:	b570      	push	{r4, r5, r6, lr}
   8950e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   89512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   89516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8951a:	bf1d      	ittte	ne
   8951c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   89520:	ea94 0f0c 	teqne	r4, ip
   89524:	ea95 0f0c 	teqne	r5, ip
   89528:	f000 f8a7 	bleq	8967a <__aeabi_ddiv+0x16e>
   8952c:	eba4 0405 	sub.w	r4, r4, r5
   89530:	ea81 0e03 	eor.w	lr, r1, r3
   89534:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   89538:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8953c:	f000 8088 	beq.w	89650 <__aeabi_ddiv+0x144>
   89540:	ea4f 3303 	mov.w	r3, r3, lsl #12
   89544:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   89548:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8954c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   89550:	ea4f 2202 	mov.w	r2, r2, lsl #8
   89554:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   89558:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8955c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   89560:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   89564:	429d      	cmp	r5, r3
   89566:	bf08      	it	eq
   89568:	4296      	cmpeq	r6, r2
   8956a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8956e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   89572:	d202      	bcs.n	8957a <__aeabi_ddiv+0x6e>
   89574:	085b      	lsrs	r3, r3, #1
   89576:	ea4f 0232 	mov.w	r2, r2, rrx
   8957a:	1ab6      	subs	r6, r6, r2
   8957c:	eb65 0503 	sbc.w	r5, r5, r3
   89580:	085b      	lsrs	r3, r3, #1
   89582:	ea4f 0232 	mov.w	r2, r2, rrx
   89586:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8958a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8958e:	ebb6 0e02 	subs.w	lr, r6, r2
   89592:	eb75 0e03 	sbcs.w	lr, r5, r3
   89596:	bf22      	ittt	cs
   89598:	1ab6      	subcs	r6, r6, r2
   8959a:	4675      	movcs	r5, lr
   8959c:	ea40 000c 	orrcs.w	r0, r0, ip
   895a0:	085b      	lsrs	r3, r3, #1
   895a2:	ea4f 0232 	mov.w	r2, r2, rrx
   895a6:	ebb6 0e02 	subs.w	lr, r6, r2
   895aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   895ae:	bf22      	ittt	cs
   895b0:	1ab6      	subcs	r6, r6, r2
   895b2:	4675      	movcs	r5, lr
   895b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   895b8:	085b      	lsrs	r3, r3, #1
   895ba:	ea4f 0232 	mov.w	r2, r2, rrx
   895be:	ebb6 0e02 	subs.w	lr, r6, r2
   895c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   895c6:	bf22      	ittt	cs
   895c8:	1ab6      	subcs	r6, r6, r2
   895ca:	4675      	movcs	r5, lr
   895cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   895d0:	085b      	lsrs	r3, r3, #1
   895d2:	ea4f 0232 	mov.w	r2, r2, rrx
   895d6:	ebb6 0e02 	subs.w	lr, r6, r2
   895da:	eb75 0e03 	sbcs.w	lr, r5, r3
   895de:	bf22      	ittt	cs
   895e0:	1ab6      	subcs	r6, r6, r2
   895e2:	4675      	movcs	r5, lr
   895e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   895e8:	ea55 0e06 	orrs.w	lr, r5, r6
   895ec:	d018      	beq.n	89620 <__aeabi_ddiv+0x114>
   895ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   895f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   895f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   895fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   895fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   89602:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   89606:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8960a:	d1c0      	bne.n	8958e <__aeabi_ddiv+0x82>
   8960c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   89610:	d10b      	bne.n	8962a <__aeabi_ddiv+0x11e>
   89612:	ea41 0100 	orr.w	r1, r1, r0
   89616:	f04f 0000 	mov.w	r0, #0
   8961a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8961e:	e7b6      	b.n	8958e <__aeabi_ddiv+0x82>
   89620:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   89624:	bf04      	itt	eq
   89626:	4301      	orreq	r1, r0
   89628:	2000      	moveq	r0, #0
   8962a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8962e:	bf88      	it	hi
   89630:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   89634:	f63f aeaf 	bhi.w	89396 <__aeabi_dmul+0xde>
   89638:	ebb5 0c03 	subs.w	ip, r5, r3
   8963c:	bf04      	itt	eq
   8963e:	ebb6 0c02 	subseq.w	ip, r6, r2
   89642:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   89646:	f150 0000 	adcs.w	r0, r0, #0
   8964a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8964e:	bd70      	pop	{r4, r5, r6, pc}
   89650:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   89654:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   89658:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8965c:	bfc2      	ittt	gt
   8965e:	ebd4 050c 	rsbsgt	r5, r4, ip
   89662:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   89666:	bd70      	popgt	{r4, r5, r6, pc}
   89668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8966c:	f04f 0e00 	mov.w	lr, #0
   89670:	3c01      	subs	r4, #1
   89672:	e690      	b.n	89396 <__aeabi_dmul+0xde>
   89674:	ea45 0e06 	orr.w	lr, r5, r6
   89678:	e68d      	b.n	89396 <__aeabi_dmul+0xde>
   8967a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8967e:	ea94 0f0c 	teq	r4, ip
   89682:	bf08      	it	eq
   89684:	ea95 0f0c 	teqeq	r5, ip
   89688:	f43f af3b 	beq.w	89502 <__aeabi_dmul+0x24a>
   8968c:	ea94 0f0c 	teq	r4, ip
   89690:	d10a      	bne.n	896a8 <__aeabi_ddiv+0x19c>
   89692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   89696:	f47f af34 	bne.w	89502 <__aeabi_dmul+0x24a>
   8969a:	ea95 0f0c 	teq	r5, ip
   8969e:	f47f af25 	bne.w	894ec <__aeabi_dmul+0x234>
   896a2:	4610      	mov	r0, r2
   896a4:	4619      	mov	r1, r3
   896a6:	e72c      	b.n	89502 <__aeabi_dmul+0x24a>
   896a8:	ea95 0f0c 	teq	r5, ip
   896ac:	d106      	bne.n	896bc <__aeabi_ddiv+0x1b0>
   896ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   896b2:	f43f aefd 	beq.w	894b0 <__aeabi_dmul+0x1f8>
   896b6:	4610      	mov	r0, r2
   896b8:	4619      	mov	r1, r3
   896ba:	e722      	b.n	89502 <__aeabi_dmul+0x24a>
   896bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   896c0:	bf18      	it	ne
   896c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   896c6:	f47f aec5 	bne.w	89454 <__aeabi_dmul+0x19c>
   896ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   896ce:	f47f af0d 	bne.w	894ec <__aeabi_dmul+0x234>
   896d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   896d6:	f47f aeeb 	bne.w	894b0 <__aeabi_dmul+0x1f8>
   896da:	e712      	b.n	89502 <__aeabi_dmul+0x24a>

000896dc <__gedf2>:
   896dc:	f04f 3cff 	mov.w	ip, #4294967295
   896e0:	e006      	b.n	896f0 <__cmpdf2+0x4>
   896e2:	bf00      	nop

000896e4 <__ledf2>:
   896e4:	f04f 0c01 	mov.w	ip, #1
   896e8:	e002      	b.n	896f0 <__cmpdf2+0x4>
   896ea:	bf00      	nop

000896ec <__cmpdf2>:
   896ec:	f04f 0c01 	mov.w	ip, #1
   896f0:	f84d cd04 	str.w	ip, [sp, #-4]!
   896f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   896f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   896fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89700:	bf18      	it	ne
   89702:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   89706:	d01b      	beq.n	89740 <__cmpdf2+0x54>
   89708:	b001      	add	sp, #4
   8970a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8970e:	bf0c      	ite	eq
   89710:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   89714:	ea91 0f03 	teqne	r1, r3
   89718:	bf02      	ittt	eq
   8971a:	ea90 0f02 	teqeq	r0, r2
   8971e:	2000      	moveq	r0, #0
   89720:	4770      	bxeq	lr
   89722:	f110 0f00 	cmn.w	r0, #0
   89726:	ea91 0f03 	teq	r1, r3
   8972a:	bf58      	it	pl
   8972c:	4299      	cmppl	r1, r3
   8972e:	bf08      	it	eq
   89730:	4290      	cmpeq	r0, r2
   89732:	bf2c      	ite	cs
   89734:	17d8      	asrcs	r0, r3, #31
   89736:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8973a:	f040 0001 	orr.w	r0, r0, #1
   8973e:	4770      	bx	lr
   89740:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89744:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89748:	d102      	bne.n	89750 <__cmpdf2+0x64>
   8974a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8974e:	d107      	bne.n	89760 <__cmpdf2+0x74>
   89750:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89754:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89758:	d1d6      	bne.n	89708 <__cmpdf2+0x1c>
   8975a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8975e:	d0d3      	beq.n	89708 <__cmpdf2+0x1c>
   89760:	f85d 0b04 	ldr.w	r0, [sp], #4
   89764:	4770      	bx	lr
   89766:	bf00      	nop

00089768 <__aeabi_cdrcmple>:
   89768:	4684      	mov	ip, r0
   8976a:	4610      	mov	r0, r2
   8976c:	4662      	mov	r2, ip
   8976e:	468c      	mov	ip, r1
   89770:	4619      	mov	r1, r3
   89772:	4663      	mov	r3, ip
   89774:	e000      	b.n	89778 <__aeabi_cdcmpeq>
   89776:	bf00      	nop

00089778 <__aeabi_cdcmpeq>:
   89778:	b501      	push	{r0, lr}
   8977a:	f7ff ffb7 	bl	896ec <__cmpdf2>
   8977e:	2800      	cmp	r0, #0
   89780:	bf48      	it	mi
   89782:	f110 0f00 	cmnmi.w	r0, #0
   89786:	bd01      	pop	{r0, pc}

00089788 <__aeabi_dcmpeq>:
   89788:	f84d ed08 	str.w	lr, [sp, #-8]!
   8978c:	f7ff fff4 	bl	89778 <__aeabi_cdcmpeq>
   89790:	bf0c      	ite	eq
   89792:	2001      	moveq	r0, #1
   89794:	2000      	movne	r0, #0
   89796:	f85d fb08 	ldr.w	pc, [sp], #8
   8979a:	bf00      	nop

0008979c <__aeabi_dcmplt>:
   8979c:	f84d ed08 	str.w	lr, [sp, #-8]!
   897a0:	f7ff ffea 	bl	89778 <__aeabi_cdcmpeq>
   897a4:	bf34      	ite	cc
   897a6:	2001      	movcc	r0, #1
   897a8:	2000      	movcs	r0, #0
   897aa:	f85d fb08 	ldr.w	pc, [sp], #8
   897ae:	bf00      	nop

000897b0 <__aeabi_dcmple>:
   897b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   897b4:	f7ff ffe0 	bl	89778 <__aeabi_cdcmpeq>
   897b8:	bf94      	ite	ls
   897ba:	2001      	movls	r0, #1
   897bc:	2000      	movhi	r0, #0
   897be:	f85d fb08 	ldr.w	pc, [sp], #8
   897c2:	bf00      	nop

000897c4 <__aeabi_dcmpge>:
   897c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   897c8:	f7ff ffce 	bl	89768 <__aeabi_cdrcmple>
   897cc:	bf94      	ite	ls
   897ce:	2001      	movls	r0, #1
   897d0:	2000      	movhi	r0, #0
   897d2:	f85d fb08 	ldr.w	pc, [sp], #8
   897d6:	bf00      	nop

000897d8 <__aeabi_dcmpgt>:
   897d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   897dc:	f7ff ffc4 	bl	89768 <__aeabi_cdrcmple>
   897e0:	bf34      	ite	cc
   897e2:	2001      	movcc	r0, #1
   897e4:	2000      	movcs	r0, #0
   897e6:	f85d fb08 	ldr.w	pc, [sp], #8
   897ea:	bf00      	nop

000897ec <__aeabi_dcmpun>:
   897ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   897f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   897f4:	d102      	bne.n	897fc <__aeabi_dcmpun+0x10>
   897f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   897fa:	d10a      	bne.n	89812 <__aeabi_dcmpun+0x26>
   897fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89804:	d102      	bne.n	8980c <__aeabi_dcmpun+0x20>
   89806:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8980a:	d102      	bne.n	89812 <__aeabi_dcmpun+0x26>
   8980c:	f04f 0000 	mov.w	r0, #0
   89810:	4770      	bx	lr
   89812:	f04f 0001 	mov.w	r0, #1
   89816:	4770      	bx	lr

00089818 <__aeabi_d2iz>:
   89818:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8981c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   89820:	d215      	bcs.n	8984e <__aeabi_d2iz+0x36>
   89822:	d511      	bpl.n	89848 <__aeabi_d2iz+0x30>
   89824:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   89828:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8982c:	d912      	bls.n	89854 <__aeabi_d2iz+0x3c>
   8982e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   89832:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   89836:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8983a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8983e:	fa23 f002 	lsr.w	r0, r3, r2
   89842:	bf18      	it	ne
   89844:	4240      	negne	r0, r0
   89846:	4770      	bx	lr
   89848:	f04f 0000 	mov.w	r0, #0
   8984c:	4770      	bx	lr
   8984e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   89852:	d105      	bne.n	89860 <__aeabi_d2iz+0x48>
   89854:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   89858:	bf08      	it	eq
   8985a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8985e:	4770      	bx	lr
   89860:	f04f 0000 	mov.w	r0, #0
   89864:	4770      	bx	lr
   89866:	bf00      	nop

00089868 <__aeabi_uldivmod>:
   89868:	b953      	cbnz	r3, 89880 <__aeabi_uldivmod+0x18>
   8986a:	b94a      	cbnz	r2, 89880 <__aeabi_uldivmod+0x18>
   8986c:	2900      	cmp	r1, #0
   8986e:	bf08      	it	eq
   89870:	2800      	cmpeq	r0, #0
   89872:	bf1c      	itt	ne
   89874:	f04f 31ff 	movne.w	r1, #4294967295
   89878:	f04f 30ff 	movne.w	r0, #4294967295
   8987c:	f000 b97a 	b.w	89b74 <__aeabi_idiv0>
   89880:	f1ad 0c08 	sub.w	ip, sp, #8
   89884:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   89888:	f000 f806 	bl	89898 <__udivmoddi4>
   8988c:	f8dd e004 	ldr.w	lr, [sp, #4]
   89890:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   89894:	b004      	add	sp, #16
   89896:	4770      	bx	lr

00089898 <__udivmoddi4>:
   89898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8989c:	468c      	mov	ip, r1
   8989e:	460e      	mov	r6, r1
   898a0:	4604      	mov	r4, r0
   898a2:	9d08      	ldr	r5, [sp, #32]
   898a4:	2b00      	cmp	r3, #0
   898a6:	d150      	bne.n	8994a <__udivmoddi4+0xb2>
   898a8:	428a      	cmp	r2, r1
   898aa:	4617      	mov	r7, r2
   898ac:	d96c      	bls.n	89988 <__udivmoddi4+0xf0>
   898ae:	fab2 fe82 	clz	lr, r2
   898b2:	f1be 0f00 	cmp.w	lr, #0
   898b6:	d00b      	beq.n	898d0 <__udivmoddi4+0x38>
   898b8:	f1ce 0c20 	rsb	ip, lr, #32
   898bc:	fa01 f60e 	lsl.w	r6, r1, lr
   898c0:	fa20 fc0c 	lsr.w	ip, r0, ip
   898c4:	fa02 f70e 	lsl.w	r7, r2, lr
   898c8:	ea4c 0c06 	orr.w	ip, ip, r6
   898cc:	fa00 f40e 	lsl.w	r4, r0, lr
   898d0:	0c3a      	lsrs	r2, r7, #16
   898d2:	fbbc f9f2 	udiv	r9, ip, r2
   898d6:	b2bb      	uxth	r3, r7
   898d8:	fb02 cc19 	mls	ip, r2, r9, ip
   898dc:	fb09 fa03 	mul.w	sl, r9, r3
   898e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
   898e4:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   898e8:	45b2      	cmp	sl, r6
   898ea:	d90a      	bls.n	89902 <__udivmoddi4+0x6a>
   898ec:	19f6      	adds	r6, r6, r7
   898ee:	f109 31ff 	add.w	r1, r9, #4294967295
   898f2:	f080 8125 	bcs.w	89b40 <__udivmoddi4+0x2a8>
   898f6:	45b2      	cmp	sl, r6
   898f8:	f240 8122 	bls.w	89b40 <__udivmoddi4+0x2a8>
   898fc:	f1a9 0902 	sub.w	r9, r9, #2
   89900:	443e      	add	r6, r7
   89902:	eba6 060a 	sub.w	r6, r6, sl
   89906:	fbb6 f0f2 	udiv	r0, r6, r2
   8990a:	fb02 6610 	mls	r6, r2, r0, r6
   8990e:	fb00 f303 	mul.w	r3, r0, r3
   89912:	b2a4      	uxth	r4, r4
   89914:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   89918:	42a3      	cmp	r3, r4
   8991a:	d909      	bls.n	89930 <__udivmoddi4+0x98>
   8991c:	19e4      	adds	r4, r4, r7
   8991e:	f100 32ff 	add.w	r2, r0, #4294967295
   89922:	f080 810b 	bcs.w	89b3c <__udivmoddi4+0x2a4>
   89926:	42a3      	cmp	r3, r4
   89928:	f240 8108 	bls.w	89b3c <__udivmoddi4+0x2a4>
   8992c:	3802      	subs	r0, #2
   8992e:	443c      	add	r4, r7
   89930:	2100      	movs	r1, #0
   89932:	1ae4      	subs	r4, r4, r3
   89934:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   89938:	2d00      	cmp	r5, #0
   8993a:	d062      	beq.n	89a02 <__udivmoddi4+0x16a>
   8993c:	2300      	movs	r3, #0
   8993e:	fa24 f40e 	lsr.w	r4, r4, lr
   89942:	602c      	str	r4, [r5, #0]
   89944:	606b      	str	r3, [r5, #4]
   89946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8994a:	428b      	cmp	r3, r1
   8994c:	d907      	bls.n	8995e <__udivmoddi4+0xc6>
   8994e:	2d00      	cmp	r5, #0
   89950:	d055      	beq.n	899fe <__udivmoddi4+0x166>
   89952:	2100      	movs	r1, #0
   89954:	e885 0041 	stmia.w	r5, {r0, r6}
   89958:	4608      	mov	r0, r1
   8995a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8995e:	fab3 f183 	clz	r1, r3
   89962:	2900      	cmp	r1, #0
   89964:	f040 808f 	bne.w	89a86 <__udivmoddi4+0x1ee>
   89968:	42b3      	cmp	r3, r6
   8996a:	d302      	bcc.n	89972 <__udivmoddi4+0xda>
   8996c:	4282      	cmp	r2, r0
   8996e:	f200 80fc 	bhi.w	89b6a <__udivmoddi4+0x2d2>
   89972:	1a84      	subs	r4, r0, r2
   89974:	eb66 0603 	sbc.w	r6, r6, r3
   89978:	2001      	movs	r0, #1
   8997a:	46b4      	mov	ip, r6
   8997c:	2d00      	cmp	r5, #0
   8997e:	d040      	beq.n	89a02 <__udivmoddi4+0x16a>
   89980:	e885 1010 	stmia.w	r5, {r4, ip}
   89984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89988:	b912      	cbnz	r2, 89990 <__udivmoddi4+0xf8>
   8998a:	2701      	movs	r7, #1
   8998c:	fbb7 f7f2 	udiv	r7, r7, r2
   89990:	fab7 fe87 	clz	lr, r7
   89994:	f1be 0f00 	cmp.w	lr, #0
   89998:	d135      	bne.n	89a06 <__udivmoddi4+0x16e>
   8999a:	2101      	movs	r1, #1
   8999c:	1bf6      	subs	r6, r6, r7
   8999e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   899a2:	fa1f f887 	uxth.w	r8, r7
   899a6:	fbb6 f2fc 	udiv	r2, r6, ip
   899aa:	fb0c 6612 	mls	r6, ip, r2, r6
   899ae:	fb08 f002 	mul.w	r0, r8, r2
   899b2:	0c23      	lsrs	r3, r4, #16
   899b4:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   899b8:	42b0      	cmp	r0, r6
   899ba:	d907      	bls.n	899cc <__udivmoddi4+0x134>
   899bc:	19f6      	adds	r6, r6, r7
   899be:	f102 33ff 	add.w	r3, r2, #4294967295
   899c2:	d202      	bcs.n	899ca <__udivmoddi4+0x132>
   899c4:	42b0      	cmp	r0, r6
   899c6:	f200 80d2 	bhi.w	89b6e <__udivmoddi4+0x2d6>
   899ca:	461a      	mov	r2, r3
   899cc:	1a36      	subs	r6, r6, r0
   899ce:	fbb6 f0fc 	udiv	r0, r6, ip
   899d2:	fb0c 6610 	mls	r6, ip, r0, r6
   899d6:	fb08 f800 	mul.w	r8, r8, r0
   899da:	b2a3      	uxth	r3, r4
   899dc:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   899e0:	45a0      	cmp	r8, r4
   899e2:	d907      	bls.n	899f4 <__udivmoddi4+0x15c>
   899e4:	19e4      	adds	r4, r4, r7
   899e6:	f100 33ff 	add.w	r3, r0, #4294967295
   899ea:	d202      	bcs.n	899f2 <__udivmoddi4+0x15a>
   899ec:	45a0      	cmp	r8, r4
   899ee:	f200 80b9 	bhi.w	89b64 <__udivmoddi4+0x2cc>
   899f2:	4618      	mov	r0, r3
   899f4:	eba4 0408 	sub.w	r4, r4, r8
   899f8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   899fc:	e79c      	b.n	89938 <__udivmoddi4+0xa0>
   899fe:	4629      	mov	r1, r5
   89a00:	4628      	mov	r0, r5
   89a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89a06:	fa07 f70e 	lsl.w	r7, r7, lr
   89a0a:	f1ce 0320 	rsb	r3, lr, #32
   89a0e:	fa26 f203 	lsr.w	r2, r6, r3
   89a12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   89a16:	fbb2 f1fc 	udiv	r1, r2, ip
   89a1a:	fa1f f887 	uxth.w	r8, r7
   89a1e:	fb0c 2211 	mls	r2, ip, r1, r2
   89a22:	fa06 f60e 	lsl.w	r6, r6, lr
   89a26:	fa20 f303 	lsr.w	r3, r0, r3
   89a2a:	fb01 f908 	mul.w	r9, r1, r8
   89a2e:	4333      	orrs	r3, r6
   89a30:	0c1e      	lsrs	r6, r3, #16
   89a32:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   89a36:	45b1      	cmp	r9, r6
   89a38:	fa00 f40e 	lsl.w	r4, r0, lr
   89a3c:	d909      	bls.n	89a52 <__udivmoddi4+0x1ba>
   89a3e:	19f6      	adds	r6, r6, r7
   89a40:	f101 32ff 	add.w	r2, r1, #4294967295
   89a44:	f080 808c 	bcs.w	89b60 <__udivmoddi4+0x2c8>
   89a48:	45b1      	cmp	r9, r6
   89a4a:	f240 8089 	bls.w	89b60 <__udivmoddi4+0x2c8>
   89a4e:	3902      	subs	r1, #2
   89a50:	443e      	add	r6, r7
   89a52:	eba6 0609 	sub.w	r6, r6, r9
   89a56:	fbb6 f0fc 	udiv	r0, r6, ip
   89a5a:	fb0c 6210 	mls	r2, ip, r0, r6
   89a5e:	fb00 f908 	mul.w	r9, r0, r8
   89a62:	b29e      	uxth	r6, r3
   89a64:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   89a68:	45b1      	cmp	r9, r6
   89a6a:	d907      	bls.n	89a7c <__udivmoddi4+0x1e4>
   89a6c:	19f6      	adds	r6, r6, r7
   89a6e:	f100 33ff 	add.w	r3, r0, #4294967295
   89a72:	d271      	bcs.n	89b58 <__udivmoddi4+0x2c0>
   89a74:	45b1      	cmp	r9, r6
   89a76:	d96f      	bls.n	89b58 <__udivmoddi4+0x2c0>
   89a78:	3802      	subs	r0, #2
   89a7a:	443e      	add	r6, r7
   89a7c:	eba6 0609 	sub.w	r6, r6, r9
   89a80:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   89a84:	e78f      	b.n	899a6 <__udivmoddi4+0x10e>
   89a86:	f1c1 0720 	rsb	r7, r1, #32
   89a8a:	fa22 f807 	lsr.w	r8, r2, r7
   89a8e:	408b      	lsls	r3, r1
   89a90:	ea48 0303 	orr.w	r3, r8, r3
   89a94:	fa26 f407 	lsr.w	r4, r6, r7
   89a98:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   89a9c:	fbb4 f9fe 	udiv	r9, r4, lr
   89aa0:	fa1f fc83 	uxth.w	ip, r3
   89aa4:	fb0e 4419 	mls	r4, lr, r9, r4
   89aa8:	408e      	lsls	r6, r1
   89aaa:	fa20 f807 	lsr.w	r8, r0, r7
   89aae:	fb09 fa0c 	mul.w	sl, r9, ip
   89ab2:	ea48 0806 	orr.w	r8, r8, r6
   89ab6:	ea4f 4618 	mov.w	r6, r8, lsr #16
   89aba:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   89abe:	45a2      	cmp	sl, r4
   89ac0:	fa02 f201 	lsl.w	r2, r2, r1
   89ac4:	fa00 f601 	lsl.w	r6, r0, r1
   89ac8:	d908      	bls.n	89adc <__udivmoddi4+0x244>
   89aca:	18e4      	adds	r4, r4, r3
   89acc:	f109 30ff 	add.w	r0, r9, #4294967295
   89ad0:	d244      	bcs.n	89b5c <__udivmoddi4+0x2c4>
   89ad2:	45a2      	cmp	sl, r4
   89ad4:	d942      	bls.n	89b5c <__udivmoddi4+0x2c4>
   89ad6:	f1a9 0902 	sub.w	r9, r9, #2
   89ada:	441c      	add	r4, r3
   89adc:	eba4 040a 	sub.w	r4, r4, sl
   89ae0:	fbb4 f0fe 	udiv	r0, r4, lr
   89ae4:	fb0e 4410 	mls	r4, lr, r0, r4
   89ae8:	fb00 fc0c 	mul.w	ip, r0, ip
   89aec:	fa1f f888 	uxth.w	r8, r8
   89af0:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   89af4:	45a4      	cmp	ip, r4
   89af6:	d907      	bls.n	89b08 <__udivmoddi4+0x270>
   89af8:	18e4      	adds	r4, r4, r3
   89afa:	f100 3eff 	add.w	lr, r0, #4294967295
   89afe:	d229      	bcs.n	89b54 <__udivmoddi4+0x2bc>
   89b00:	45a4      	cmp	ip, r4
   89b02:	d927      	bls.n	89b54 <__udivmoddi4+0x2bc>
   89b04:	3802      	subs	r0, #2
   89b06:	441c      	add	r4, r3
   89b08:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   89b0c:	fba0 8902 	umull	r8, r9, r0, r2
   89b10:	eba4 0c0c 	sub.w	ip, r4, ip
   89b14:	45cc      	cmp	ip, r9
   89b16:	46c2      	mov	sl, r8
   89b18:	46ce      	mov	lr, r9
   89b1a:	d315      	bcc.n	89b48 <__udivmoddi4+0x2b0>
   89b1c:	d012      	beq.n	89b44 <__udivmoddi4+0x2ac>
   89b1e:	b155      	cbz	r5, 89b36 <__udivmoddi4+0x29e>
   89b20:	ebb6 030a 	subs.w	r3, r6, sl
   89b24:	eb6c 060e 	sbc.w	r6, ip, lr
   89b28:	fa06 f707 	lsl.w	r7, r6, r7
   89b2c:	40cb      	lsrs	r3, r1
   89b2e:	431f      	orrs	r7, r3
   89b30:	40ce      	lsrs	r6, r1
   89b32:	602f      	str	r7, [r5, #0]
   89b34:	606e      	str	r6, [r5, #4]
   89b36:	2100      	movs	r1, #0
   89b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89b3c:	4610      	mov	r0, r2
   89b3e:	e6f7      	b.n	89930 <__udivmoddi4+0x98>
   89b40:	4689      	mov	r9, r1
   89b42:	e6de      	b.n	89902 <__udivmoddi4+0x6a>
   89b44:	4546      	cmp	r6, r8
   89b46:	d2ea      	bcs.n	89b1e <__udivmoddi4+0x286>
   89b48:	ebb8 0a02 	subs.w	sl, r8, r2
   89b4c:	eb69 0e03 	sbc.w	lr, r9, r3
   89b50:	3801      	subs	r0, #1
   89b52:	e7e4      	b.n	89b1e <__udivmoddi4+0x286>
   89b54:	4670      	mov	r0, lr
   89b56:	e7d7      	b.n	89b08 <__udivmoddi4+0x270>
   89b58:	4618      	mov	r0, r3
   89b5a:	e78f      	b.n	89a7c <__udivmoddi4+0x1e4>
   89b5c:	4681      	mov	r9, r0
   89b5e:	e7bd      	b.n	89adc <__udivmoddi4+0x244>
   89b60:	4611      	mov	r1, r2
   89b62:	e776      	b.n	89a52 <__udivmoddi4+0x1ba>
   89b64:	3802      	subs	r0, #2
   89b66:	443c      	add	r4, r7
   89b68:	e744      	b.n	899f4 <__udivmoddi4+0x15c>
   89b6a:	4608      	mov	r0, r1
   89b6c:	e706      	b.n	8997c <__udivmoddi4+0xe4>
   89b6e:	3a02      	subs	r2, #2
   89b70:	443e      	add	r6, r7
   89b72:	e72b      	b.n	899cc <__udivmoddi4+0x134>

00089b74 <__aeabi_idiv0>:
   89b74:	4770      	bx	lr
   89b76:	bf00      	nop
   89b78:	090a0a0d 	.word	0x090a0a0d
   89b7c:	5f5f5f2a 	.word	0x5f5f5f2a
   89b80:	5f5f5f5f 	.word	0x5f5f5f5f
   89b84:	5f5f5f5f 	.word	0x5f5f5f5f
   89b88:	205f5f5f 	.word	0x205f5f5f
   89b8c:	2e555043 	.word	0x2e555043
   89b90:	2d584341 	.word	0x2d584341
   89b94:	41535441 	.word	0x41535441
   89b98:	3455334d 	.word	0x3455334d
   89b9c:	412d4143 	.word	0x412d4143
   89ba0:	5f5f2055 	.word	0x5f5f2055
   89ba4:	5f5f5f5f 	.word	0x5f5f5f5f
   89ba8:	56414c53 	.word	0x56414c53
   89bac:	5f5f5f45 	.word	0x5f5f5f45
   89bb0:	0d2a5f5f 	.word	0x0d2a5f5f
   89bb4:	00000a0a 	.word	0x00000a0a
   89bb8:	2e555043 	.word	0x2e555043
   89bbc:	20584341 	.word	0x20584341
   89bc0:	53544120 	.word	0x53544120
   89bc4:	55334d41 	.word	0x55334d41
   89bc8:	00004334 	.word	0x00004334
   89bcc:	000186a0 	.word	0x000186a0
   89bd0:	000186a0 	.word	0x000186a0
   89bd4:	00b71b00 	.word	0x00b71b00
   89bd8:	65540a0d 	.word	0x65540a0d
   89bdc:	73207473 	.word	0x73207473
   89be0:	74726174 	.word	0x74726174
   89be4:	2e2e6465 	.word	0x2e2e6465
   89be8:	000a0d2e 	.word	0x000a0d2e
   89bec:	48500a0d 	.word	0x48500a0d
   89bf0:	2d64253a 	.word	0x2d64253a
   89bf4:	0d64252d 	.word	0x0d64252d
   89bf8:	0000000a 	.word	0x0000000a
   89bfc:	454e4550 	.word	0x454e4550
   89c00:	56554f20 	.word	0x56554f20
   89c04:	00545245 	.word	0x00545245
   89c08:	00203a09 	.word	0x00203a09
   89c0c:	00004e4f 	.word	0x00004e4f
   89c10:	0046464f 	.word	0x0046464f
   89c14:	454e4550 	.word	0x454e4550
   89c18:	52454620 	.word	0x52454620
   89c1c:	0000454d 	.word	0x0000454d
   89c20:	00534c49 	.word	0x00534c49
   89c24:	203a0909 	.word	0x203a0909
   89c28:	00000000 	.word	0x00000000
   89c2c:	00005653 	.word	0x00005653
   89c30:	41444152 	.word	0x41444152
   89c34:	00000052 	.word	0x00000052
   89c38:	00555644 	.word	0x00555644
   89c3c:	4d455250 	.word	0x4d455250
   89c40:	45524549 	.word	0x45524549
   89c44:	544e4520 	.word	0x544e4520
   89c48:	00454552 	.word	0x00454552
   89c4c:	20555644 	.word	0x20555644
   89c50:	454e4547 	.word	0x454e4547
   89c54:	004c4152 	.word	0x004c4152
   89c58:	52544e45 	.word	0x52544e45
   89c5c:	4c204545 	.word	0x4c204545
   89c60:	45524249 	.word	0x45524249
   89c64:	00000000 	.word	0x00000000
   89c68:	52544e45 	.word	0x52544e45
   89c6c:	4f204545 	.word	0x4f204545
   89c70:	4f495450 	.word	0x4f495450
   89c74:	0000004e 	.word	0x0000004e
   89c78:	65540a0d 	.word	0x65540a0d
   89c7c:	74207473 	.word	0x74207473
   89c80:	696d7265 	.word	0x696d7265
   89c84:	6574616e 	.word	0x6574616e
   89c88:	2e2e2e64 	.word	0x2e2e2e64
   89c8c:	00000a0d 	.word	0x00000a0d

00089c90 <commands>:
   89c90:	0000624f 0008083d 0000ae76 00080791     Ob..=...v.......
   89ca0:	00003427 000809ed 00000000 00000000     '4..............
   89cb0:	42090a0d 64616f72 74736163 6e797320     ...Broadcast syn
   89cc0:	6f726863 617a696e 6e6f6974 6b6f7420     chronization tok
   89cd0:	0a0d6e65 00000000 624e0a0d 74736554     en........NbTest
   89ce0:	6425203a 00000a0d 75420a0d 72657a7a     : %d......Buzzer
   89cf0:	206e6f20 20726f66 00000000 6d206425      on for ....%d m
   89d00:	2e2e2e73 00000a0d 75420a0d 72657a7a     s.........Buzzer
   89d10:	66666f20 0d2e2e2e 0000000a 43090a0d      off...........C
   89d20:	53524d4f 5f353834 3a57454e 00000a0d     OMRS485_NEW:....
   89d30:	53520a0d 20353834 4445454e 4b434120     ..RS485 NEED ACK
   89d40:	6425203a 00000a0d 3d3d0a0d 3d3d3d3d     : %d......======
   89d50:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89d60:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89d70:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89d80:	0a0d3d3d 00000000 3d3d0a0d 3d3d3d3d     ==........======
   89d90:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89da0:	4152463d 5220454d 49454345 3d444556     =FRAME RECEIVED=
   89db0:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89dc0:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89dd0:	00000a0d 63657209 3a637243 58343025     .....recCrc:%04X
   89de0:	63726320 30253a43 00205834 3d3d0a0d      crcC:%04X ...==
   89df0:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89e00:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89e10:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89e20:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89e30:	3d3d3d3d 00000a0d 5f6d0a0d 54494157     ====......m_WAIT
   89e40:	4b43415f 00000a0d 2a090a0d 2a2a2a2a     _ACK.......*****
   89e50:	4d4f4320 38345352 4f4e2035 4b434120      COMRS485 NO ACK
   89e60:	4f524620 4c53204d 20455641 00000023      FROM SLAVE #...
   89e70:	58323025 20796220 74206425 73656972     %02X by %d tries
   89e80:	2a2a2a20 0a0d2a2a 00000000               *****......

00089e8c <usart_console_settings>:
   89e8c:	0001c200 000000c0 00000800 00000000     ................
	...
   89ea4:	2a090a0d 2a2a2a2a 4f525245 64253a52     ...*****ERROR:%d
   89eb4:	3a435309 2a2a6425 0d2a2a2a 0000000a     .SC:%d*****.....
   89ec4:	46090a0d 454d4152 5f465542 0d57454e     ...FRAMEBUF_NEW.
   89ed4:	0000000a 20090a0d 454d5246 5355505f     ....... FRME_PUS
   89ee4:	0a0d2048 00000000 53090a0d 58253a43     H .........SC:%X
   89ef4:	00000a0d 20090a0d 454d5246 504f505f     ....... FRME_POP
   89f04:	000a0d20 70090a0d 3a504f50 00582520      ......pPOP: %X.
   89f14:	20090a0d 454d5246 504f505f 504d4520     ... FRME_POP EMP
   89f24:	0d205954 0000000a 25207325 73252064     TY .....%s %d %s
   89f34:	64342520 00000000                        %4d....

00089f3c <nbDaysInMonth>:
   89f3c:	1e1f1c1f 1f1f1e1f 1f1e1f1e 756e614a     ............Janu
   89f4c:	00797261 72626546 79726175 00000000     ary.February....
   89f5c:	6372614d 00000068 69727041 0000006c     March...April...
   89f6c:	0079614d 656e754a 00000000 796c754a     May.June....July
   89f7c:	00000000 75677541 00007473 74706553     ....August..Sept
   89f8c:	65626d65 00000072 6f74634f 00726562     ember...October.
   89f9c:	65766f4e 7265626d 00000000 65636544     November....Dece
   89fac:	7265626d 00000000 646e7553 00007961     mber....Sunday..
   89fbc:	646e6f4d 00007961 73657554 00796164     Monday..Tuesday.
   89fcc:	6e646557 61647365 00000079 72756854     Wednesday...Thur
   89fdc:	79616473 00000000 64697246 00007961     sday....Friday..
   89fec:	75746153 79616472 00000000              Saturday....

00089ff8 <line2addr>:
   89ff8:	54144000 5453414d 00005245 76616c53     .@.TMASTER..Slav
   8a008:	44412065 78253a44 00000000 41090a0d     e ADD:%x.......A
   8a018:	43415454 45522048 3a594441 0d642520     TTACH READY: %d.
   8a028:	0000000a 6c530a0d 20657661 3a6d6f63     ......Slave com:
   8a038:	09782520 6c530909 20657661 3a646461      %x...Slave add:
   8a048:	0a0d7825 00000000 75460a0d 203a636e     %x........Func: 
   8a058:	0a0d7825 00000000 73490a0d 526b6341     %x........IsAckR
   8a068:	203a7165 0a0d6425 00000000 50090a0d     eq: %d.........P
   8a078:	45434f52 46205353 454d4152 00000a0d     ROCESS FRAME....
   8a088:	53490a0d 53414d20 3a524554 00642520     ..IS MASTER: %d.
   8a098:	49090a0d 414d2073 52455453 00000a0d     ...Is MASTER....
   8a0a8:	41090a0d 52204b43 49555145 3a444552     ...ACK REQUIRED:
   8a0b8:	0d642520 0000000a 57090a0d 45544952      %d........WRITE
   8a0c8:	4e49535f 5f454c47 4c494f43 4b43415f     _SINGLE_COIL_ACK
   8a0d8:	0d4b4f5f 0000000a 52090a0d 5f444145     _OK........READ_
   8a0e8:	4c494f43 43415f53 4b4f5f4b 00000a0d     COILS_ACK_OK....
   8a0f8:	4e090a0d 73207765 6576616c 3a444920     ...New slave ID:
   8a108:	0d582520 0000000a 454a0a0d 4d454420      %X.......JE DEM
   8a118:	45444e41 20414c20 434e4f46 4e4f4954     ANDE LA FONCTION
   8a128:	5825203a 000a0d20 53090a0d 4556414c     : %X ......SLAVE
   8a138:	51455220 4552203a 43204441 534c494f      REQ: READ COILS
   8a148:	00000a0d 53090a0d 4556414c 51455220     .......SLAVE REQ
   8a158:	5257203a 20455449 474e4953 4320454c     : WRITE SINGLE C
   8a168:	534c494f 00000a0d 20090a0d 52204f4e     OILS....... NO R
   8a178:	45555145 00005453 52570a0d 20455449     EQUEST....WRITE 
   8a188:	474e4953 4320454c 0d4c494f 6e75460a     SINGLE COIL..Fun
   8a198:	6f697463 646f436e 25203a65 4f0a0d58     ctionCode: %X..O
   8a1a8:	55505455 44412054 203a5244 4f205825     UTPUT ADDR: %X O
   8a1b8:	55505455 41562054 3a45554c 00582520     UTPUT VALUE: %X.
   8a1c8:	570a0a0d 45544952 4e495320 20454c47     ...WRITE SINGLE 
   8a1d8:	4c494f43 4b434120 0a0d2121 00000000     COIL ACK!!......
   8a1e8:	520a0a0d 20444145 4c494f43 43412053     ...READ COILS AC
   8a1f8:	0d21214b 0000000a 2a090a0d 2a2a2a2a     K!!........*****
   8a208:	444f4d20 5f535542 56414c53 4f4e5f45      MODBUS_SLAVE_NO
   8a218:	43415f54 5246204b 53204d4f 4556414c     T_ACK FROM SLAVE
   8a228:	00002320 78323025 2a2a2a20 0a0d2a2a      #..%02x *****..
   8a238:	00000000 21090a0d 00000a0d 41090a0d     .......!.......A
   8a248:	43415454 45522048 20594441 4f434553     TTACH READY SECO
   8a258:	203a444e 0a0d6425 00000000 41090a0d     ND: %d.........A
   8a268:	43415454 45522048 20594441 53524946     TTACH READY FIRS
   8a278:	25203a54 000a0d64                       T: %d...

0008a280 <slaves>:
   8a280:	00000016 00000020 00000000 20090a0d     .... .......... 
   8a290:	4c454853 454e204c 000a0d57 53090a0d     SHELL NEW......S
   8a2a0:	4c4c4548 4d4f5250 0a0d5450 00000000     HELLPROMPT......
   8a2b0:	3230250d 30253a64 253a6432 00643230     .%02d:%02d:%02d.
   8a2c0:	64323025 3230253a 30253a64 00006432     %02d:%02d:%02d..
   8a2d0:	64323025 3230252f 30252f64 00006434     %02d/%02d/%04d..
   8a2e0:	003e0a0d 00445b1b 00435b1b 3e2f0a0d     ..>..[D..[C.../>
   8a2f0:	00000000 6b6e7509 6e776f6e 646d6320     .....unknown cmd
   8a300:	3025203a 0a0d5834 00000000 2a090a0d     : %04X.........*
   8a310:	2a2a2a2a 73616320 535f2065 4c4c4548     **** case _SHELL
   8a320:	48424b5f 203a5449 20444142 65736163     _KBHIT: BAD case
   8a330:	2a2a2021 2a2a2a2a 00000a0d 20200a0d     ! ******......  
   8a340:	43534520 5145535f 0000203a 30253c20      ESC_SEQ: .. <%0
   8a350:	0d3e5834 0000000a 4b325b1b 0000000d     4X>......[2K....
   8a360:	3b315b1b 00004335                       .[1;5C..

0008a368 <heartBeatRhythm>:
   8a368:	00000028 000000fe 00000028 00000548     (.......(...H...
   8a378:	00000000                                ....

0008a37c <hexDigits>:
   8a37c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   8a38c:	00000000                                ....

0008a390 <restartTimeOut>:
   8a390:	00000033                                3...

0008a394 <separators>:
   8a394:	3a3b2e20 0d095c2f 0000000a 4a325b1b      .;:/\.......[2J
   8a3a4:	00000000 3d090a0d 3d3d3d3d 3d3d3d3d     .......=========
   8a3b4:	3d3d3d3d 43203d3d 20504948 4e454449     ====== CHIP IDEN
   8a3c4:	49464954 49205245 534f464e 3d3d3d20     TIFIER INFOS ===
   8a3d4:	3d3d3d3d 3d3d3d3d 3d3d3d3d 000a0a0d     ============....
   8a3e4:	52455609 4e4f4953 6325203a 00000a0d     .VERSION: %c....
   8a3f4:	45202009 434f5250 0000203a 564e2009     .  EPROC: ... NV
   8a404:	5a495350 0000203a 50564e09 325a4953     PSIZ: ...NVPSIZ2
   8a414:	0000203a 41525309 5a49534d 0000203a     : ...SRAMSIZ: ..
   8a424:	20202009 48435241 0000203a 2d2d2d20     .   ARCH: .. ---
   8a434:	00000020 564e2009 50595450 0000203a      .... NVPTYP: ..
   8a444:	20202009 44495845 3025203a 0a0d5838     .   EXID: %08X..
   8a454:	00000000 3d090a0d 3d3d3d3d 3d3d3d3d     .......=========
   8a464:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   8a474:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   8a484:	3d3d3d3d 3d3d3d3d 3d3d3d3d 000a0a0d     ============....
   8a494:	7379530d 206d6574 6c6c6977 73657220     .System will res
   8a4a4:	74726174 206e6920 73206925 6e6f6365     tart in %i secon
   8a4b4:	2e2e2e64 00000000 2f2e3a20 00000a0d     d....... :./....
   8a4c4:	4b325b1b 00000000 646d6320 61747320     .[2K.... cmd sta
   8a4d4:	3a207472 00000020                       rt : ...

0008a4dc <arch>:
   8a4dc:	00000019 0008a7a0 0008a7ac 00000029     ............)...
   8a4ec:	0008a7c0 0008a7d0 00000034 0008a7e4     ........4.......
   8a4fc:	0008a7ec 00000037 0008a7fc 0008a804     ....7...........
   8a50c:	00000039 0008a810 0008a818 0000003b     9...........;...
   8a51c:	0008a824 0008a82c 00000040 0008a83c     $...,...@...<...
   8a52c:	0008a844 00000042 0008a854 0008a85c     D...B...T...\...
   8a53c:	00000055 0008a86c 0008a874 00000060     U...l...t...`...
   8a54c:	0008a884 0008a890 00000061 0008a8a4     ........a.......
   8a55c:	0008a8b4 00000063 0008a8c8 0008a8d0     ....c...........
   8a56c:	00000070 0008a8e0 0008a8ec 00000071     p...........q...
   8a57c:	0008a900 0008a910 00000072 0008a924     ........r...$...
   8a58c:	0008a934 00000073 0008a948 0008a954     4...s...H...T...
   8a59c:	00000075 0008a968 0008a974 00000076     u...h...t...v...
   8a5ac:	0008a988 0008a998 00000080 0008a9ac     ................
   8a5bc:	0008a9b4 00000081 0008a9d8 0008a9e0     ................
   8a5cc:	00000083 0008aa04 0008aa14 00000084     ................
   8a5dc:	0008aa40 0008aa50 00000085 0008aa7c     @...P.......|...
   8a5ec:	0008aa8c 00000086 0008aab8 0008aac8     ................
   8a5fc:	00000088 0008aaf8 0008ab08 00000089     ................
   8a60c:	0008ab30 0008ab40 0000008a 0008ab68     0...@.......h...
   8a61c:	0008ab78 00000092 0008aba4 0008abac     x...............
   8a62c:	00000093 0008abbc 0008abc4 00000094     ................
   8a63c:	0008abe4 0008abec 00000095 0008ac0c     ................
   8a64c:	0008ac14 00000099 0008ac38 0008ac44     ........8...D...
   8a65c:	0000009a 0008ac68 0008ac74 000000a5     ....h...t.......
   8a66c:	0008ac98 0008ac98 000000f0 0008aca0     ................
   8a67c:	0008aca8 00000000 0008acb8 00000000     ................

0008a68c <cmdEntries>:
   8a68c:	0000624f 00083181 00006cab 000831b1     Ob...1...l...1..
   8a69c:	00003bed 0008319d 0000aaf6 00083101     .;...1.......1..
   8a6ac:	0000b326 00083141 0000902b 00083345     &...A1..+...E3..
   8a6bc:	0000b344 00083345 0000ebe8 00083379     D...E3......y3..
	...
   8a6d4:	204d4f52 202d2d2d 004d4f52 4c4d4f52     ROM --- ROM.ROML
   8a6e4:	20535345 202d2d2d 6c4d4f52 20737365     ESS --- ROMless 
   8a6f4:	6f20726f 68632d6e 46207069 6873616c     or on-chip Flash
   8a704:	00000000 53414c46 2d2d2048 6d45202d     ....FLASH --- Em
   8a714:	64646562 46206465 6873616c 6d654d20     bedded Flash Mem
   8a724:	0079726f 5f4d4f52 53414c46 2d2d2048     ory.ROM_FLASH --
   8a734:	4f52202d 6e61204d 6d452064 64646562     - ROM and Embedd
   8a744:	46206465 6873616c 6d654d20 2079726f     ed Flash Memory 
   8a754:	50564e5b 205a4953 52207369 73204d4f     [NVPSIZ is ROM s
   8a764:	20657a69 564e202f 5a495350 73692032     ize / NVPSIZ2 is
   8a774:	616c4620 73206873 5d657a69 00000000      Flash size]....
   8a784:	4d415253 2d2d2d20 41525320 6d65204d     SRAM --- SRAM em
   8a794:	74616c75 20676e69 004d4f52 31395441     ulating ROM.AT91
   8a7a4:	394d4153 00007878 31395441 394d4153     SAM9xx..AT91SAM9
   8a7b4:	53207878 65697265 00000073 31395441     xx Series...AT91
   8a7c4:	394d4153 78784558 00000000 31395441     SAM9XExx....AT91
   8a7d4:	394d4153 78784558 72655320 00736569     SAM9XExx Series.
   8a7e4:	31395441 00343378 31395441 20343378     AT91x34.AT91x34 
   8a7f4:	69726553 00007365 37504143 00000000     Series..CAP7....
   8a804:	37504143 72655320 00736569 39504143     CAP7 Series.CAP9
   8a814:	00000000 39504143 72655320 00736569     ....CAP9 Series.
   8a824:	31504143 00000031 31504143 65532031     CAP11...CAP11 Se
   8a834:	73656972 00000000 31395441 00303478     ries....AT91x40.
   8a844:	31395441 20303478 69726553 00007365     AT91x40 Series..
   8a854:	31395441 00323478 31395441 20323478     AT91x42.AT91x42 
   8a864:	69726553 00007365 31395441 00353578     Series..AT91x55.
   8a874:	31395441 20353578 69726553 00007365     AT91x55 Series..
   8a884:	31395441 374d4153 00787841 31395441     AT91SAM7Axx.AT91
   8a894:	374d4153 20787841 69726553 00007365     SAM7Axx Series..
   8a8a4:	31395441 374d4153 78785141 00000000     AT91SAM7AQxx....
   8a8b4:	31395441 374d4153 78785141 72655320     AT91SAM7AQxx Ser
   8a8c4:	00736569 31395441 00333678 31395441     ies.AT91x63.AT91
   8a8d4:	20333678 69726553 00007365 31395441     x63 Series..AT91
   8a8e4:	374d4153 00787853 31395441 374d4153     SAM7Sxx.AT91SAM7
   8a8f4:	20787853 69726553 00007365 31395441     Sxx Series..AT91
   8a904:	374d4153 78784358 00000000 31395441     SAM7XCxx....AT91
   8a914:	374d4153 78784358 72655320 00736569     SAM7XCxx Series.
   8a924:	31395441 374d4153 78784553 00000000     AT91SAM7SExx....
   8a934:	31395441 374d4153 78784553 72655320     AT91SAM7SExx Ser
   8a944:	00736569 31395441 374d4153 0078784c     ies.AT91SAM7Lxx.
   8a954:	31395441 374d4153 2078784c 69726553     AT91SAM7Lxx Seri
   8a964:	00007365 31395441 374d4153 00787858     es..AT91SAM7Xxx.
   8a974:	31395441 374d4153 20787858 69726553     AT91SAM7Xxx Seri
   8a984:	00007365 31395441 374d4153 78784c53     es..AT91SAM7SLxx
   8a994:	00000000 31395441 374d4153 78784c53     ....AT91SAM7SLxx
   8a9a4:	72655320 00736569 334d4153 00437855      Series.SAM3UxC.
   8a9b4:	334d4153 20437855 69726553 28207365     SAM3UxC Series (
   8a9c4:	2d303031 206e6970 73726576 296e6f69     100-pin version)
   8a9d4:	00000000 334d4153 00457855 334d4153     ....SAM3UxE.SAM3
   8a9e4:	20457855 69726553 28207365 2d343431     UxE Series (144-
   8a9f4:	206e6970 73726576 296e6f69 00000000     pin version)....
   8aa04:	334d4153 2f437841 334d4153 00437841     SAM3AxC/SAM3AxC.
   8aa14:	334d4153 2f437841 344d4153 20437841     SAM3AxC/SAM4AxC 
   8aa24:	69726553 28207365 2d303031 206e6970     Series (100-pin 
   8aa34:	73726576 296e6f69 00000000 334d4153     version)....SAM3
   8aa44:	2f437858 344d4153 00437858 334d4153     XxC/SAM4XxC.SAM3
   8aa54:	2f437858 344d4153 20437858 69726553     XxC/SAM4XxC Seri
   8aa64:	28207365 2d303031 206e6970 73726576     es (100-pin vers
   8aa74:	296e6f69 00000000 334d4153 2f457858     ion)....SAM3XxE/
   8aa84:	344d4153 00457858 334d4153 2f457858     SAM4XxE.SAM3XxE/
   8aa94:	344d4153 20457858 69726553 28207365     SAM4XxE Series (
   8aaa4:	2d343431 206e6970 73726576 296e6f69     144-pin version)
   8aab4:	00000000 334d4153 2f477858 344d4153     ....SAM3XxG/SAM4
   8aac4:	00477858 334d4153 2f477858 344d4153     XxG.SAM3XxG/SAM4
   8aad4:	20477858 69726553 28207365 2f383032     XxG Series (208/
   8aae4:	2d373132 206e6970 73726576 296e6f69     217-pin version)
   8aaf4:	00000000 334d4153 2f417853 344d4153     ....SAM3SxA/SAM4
   8ab04:	00417853 334d4153 2f417853 344d4153     SxA.SAM3SxA/SAM4
   8ab14:	20417853 69726553 28207365 702d3834     SxA Series (48-p
   8ab24:	76206e69 69737265 00296e6f 334d4153     in version).SAM3
   8ab34:	2f427853 344d4153 00427853 334d4153     SxB/SAM4SxB.SAM3
   8ab44:	2f427853 344d4153 20427853 69726553     SxB/SAM4SxB Seri
   8ab54:	28207365 702d3436 76206e69 69737265     es (64-pin versi
   8ab64:	00296e6f 334d4153 2f437853 344d4153     on).SAM3SxC/SAM4
   8ab74:	00437853 334d4153 2f437853 344d4153     SxC.SAM3SxC/SAM4
   8ab84:	20437853 69726553 28207365 2d303031     SxC Series (100-
   8ab94:	206e6970 73726576 296e6f69 00000000     pin version)....
   8aba4:	31395441 00323978 31395441 20323978     AT91x92.AT91x92 
   8abb4:	69726553 00007365 334d4153 0041784e     Series..SAM3NxA.
   8abc4:	334d4153 2041784e 69726553 28207365     SAM3NxA Series (
   8abd4:	702d3834 76206e69 69737265 00296e6f     48-pin version).
   8abe4:	334d4153 0042784e 334d4153 2042784e     SAM3NxB.SAM3NxB 
   8abf4:	69726553 28207365 702d3436 76206e69     Series (64-pin v
   8ac04:	69737265 00296e6f 334d4153 0043784e     ersion).SAM3NxC.
   8ac14:	334d4153 2043784e 69726553 28207365     SAM3NxC Series (
   8ac24:	2d303031 206e6970 73726576 296e6f69     100-pin version)
   8ac34:	00000000 334d4153 42784453 00000000     ....SAM3SDxB....
   8ac44:	334d4153 42784453 72655320 20736569     SAM3SDxB Series 
   8ac54:	2d343628 206e6970 73726576 296e6f69     (64-pin version)
   8ac64:	00000000 334d4153 43784453 00000000     ....SAM3SDxC....
   8ac74:	334d4153 43784453 72655320 20736569     SAM3SDxC Series 
   8ac84:	30303128 6e69702d 72657620 6e6f6973     (100-pin version
   8ac94:	00000029 354d4153 00000041 35375441     )...SAM5A...AT75
   8aca4:	00787843 35375441 20787843 69726553     Cxx.AT75Cxx Seri
   8acb4:	00007365 41204f4e 21484352 00000000     es..NO ARCH!....
   8acc4:	204b3834 65747962 00000073 62204b31     48K bytes...1K b
   8acd4:	73657479 00000000 62204b32 73657479     ytes....2K bytes
   8ace4:	00000000 62204b36 73657479 00000000     ....6K bytes....
   8acf4:	204b3432 65747962 00000073 62204b34     24K bytes...4K b
   8ad04:	73657479 00000000 204b3038 65747962     ytes....80K byte
   8ad14:	00000073 4b303631 74796220 00007365     s...160K bytes..
   8ad24:	62204b38 73657479 00000000 204b3631     8K bytes....16K 
   8ad34:	65747962 00000073 204b3233 65747962     bytes...32K byte
   8ad44:	00000073 204b3436 65747962 00000073     s...64K bytes...
   8ad54:	4b383231 74796220 00007365 4b363532     128K bytes..256K
   8ad64:	74796220 00007365 204b3639 65747962      bytes..96K byte
   8ad74:	00000073 4b323135 74796220 00007365     s...512K bytes..
   8ad84:	454e4f4e 00000000 34323031 7962204b     NONE....1024K by
   8ad94:	00736574 38343032 7962204b 00736574     tes.2048K bytes.
   8ada4:	45444e55 454e4946 00002144 394d5241     UNDEFINED!..ARM9
   8adb4:	00533634 374d5241 494d4454 00000000     46S.ARM7TDMI....
   8adc4:	74726f43 4d2d7865 00000033 394d5241     Cortex-M3...ARM9
   8add4:	00543032 394d5241 4a453632 00000053     20T.ARM926EJS...
   8ade4:	74726f43 412d7865 00000035 74726f43     Cortex-A5...Cort
   8adf4:	4d2d7865 00000034                       ex-M4...

0008adfc <uart_opt>:
   8adfc:	05b8d800 0001c200 00000800 454d0a0d     ..............ME
   8ae0c:	4e5f554e 0a0d5745 00000000 20202020     NU_NEW......    
   8ae1c:	20202020 20202020 20202020 20202020                     
   8ae2c:	00000000                                ....

0008ae30 <_etatMenu>:
   8ae30:	0008b000 0008af58 00000000 00083c09     ....X........<..
   8ae40:	0008b010 0008af58 00000000 00083c49     ....X.......I<..
   8ae50:	0008aff4 0008af58 00000000 00083c89     ....X........<..
	...

0008ae70 <_mainMenu>:
   8ae70:	0008af98 00000000 00000000 00083bc9     .............;..
   8ae80:	0008afa4 00000000 0008af58 00000000     ........X.......
   8ae90:	0008afb4 00000000 0008af58 00000000     ........X.......
   8aea0:	0008afc4 00000000 0008af58 00000000     ........X.......
	...
   8aec0:	54415445 524f5020 31204554 00000000     ETAT PORTE 1....
   8aed0:	54415445 524f5020 00534554 6e656d5f     ETAT PORTES._men
   8aee0:	74704f75 536e6f69 75467361 203a636e     uOptionSasFunc: 
   8aef0:	20444142 00004353 20202020 20202020     BAD SC..        
   8af00:	20202020 20202020 20202020 00000020                  ...
   8af10:	4d524546 52555445 41532045 00000053     FERMETURE SAS...
   8af20:	6e656d5f 726f5075 65466574 72656d72     _menuPorteFermer
   8af30:	42203a31 53204441 00000043 6e656d5f     1: BAD SC..._men
   8af40:	726f5075 65466574 72656d72 42203a32     uPorteFermer2: B
   8af50:	53204441 00000043                       AD SC...

0008af58 <_porteMenu>:
   8af58:	0008afd4 0008ae70 00000000 00083b89     ....p........;..
   8af68:	0008afe4 0008ae70 00000000 00083ba9     ....p........;..
   8af78:	0008aff4 0008ae70 0008ae30 00000000     ....p...0.......
	...
   8af98:	6974704f 73206e6f 00007361 6974704f     Option sas..Opti
   8afa8:	70206e6f 6574726f 00000073 6974704f     on portes...Opti
   8afb8:	66206e6f 74656e65 00006572 6974704f     on fenetre..Opti
   8afc8:	74206e6f 70706172 00000065 6d726546     on trappe...Ferm
   8afd8:	70207265 6574726f 00003120 6d726546     er porte 1..Ferm
   8afe8:	70207265 6574726f 00003220 74617445     er porte 2..Etat
   8aff8:	726f7020 00736574 74617445 726f7020      portes.Etat por
   8b008:	31206574 00000000 74617445 726f7020     te 1....Etat por
   8b018:	32206574 00000000 20090a0d 55444f4d     te 2....... MODU
   8b028:	4e20454c 21215745 000a0d21 20090a0d     LE NEW!!!...... 
   8b038:	45534c45 0d212121 0000000a 4f4d0a0d     ELSE!!!.......MO
   8b048:	454c5544 494e495f 4e492054 21215449     DULE_INIT INIT!!
   8b058:	0a0d2121 00000000 4d090a0d 4c55444f     !!.........MODUL
   8b068:	44412045 53534552 25203a45 45530958     E ADRESSE: %X.SE
   8b078:	4c414952 4d554e20 3a524542 00582520     RIAL NUMBER: %X.
   8b088:	55444f4d 4120454c 53455244 203a4553     MODULE ADRESSE: 
   8b098:	00005825 00000001 00000002 00000004     %X..............
   8b0a8:	00000008 00000010 00000020 00000040     ........ ...@...
   8b0b8:	00000080 00000100 00000200 00000400     ................

0008b0c8 <_global_impure_ptr>:
   8b0c8:	20000638 00464e49 00666e69 004e414e     8.. INF.inf.NAN.
   8b0d8:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   8b0e8:	46454443 00000000 33323130 37363534     CDEF....01234567
   8b0f8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   8b108:	0000296c 00000030                       l)..0...

0008b110 <blanks.7223>:
   8b110:	20202020 20202020 20202020 20202020                     

0008b120 <zeroes.7224>:
   8b120:	30303030 30303030 30303030 30303030     0000000000000000
   8b130:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   8b140:	49534f50 00000058 0000002e 00000000     POSIX...........

0008b150 <__mprec_bigtens>:
   8b150:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8b160:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8b170:	7f73bf3c 75154fdd                       <.s..O.u

0008b178 <__mprec_tens>:
   8b178:	00000000 3ff00000 00000000 40240000     .......?......$@
   8b188:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8b198:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8b1a8:	00000000 412e8480 00000000 416312d0     .......A......cA
   8b1b8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8b1c8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8b1d8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8b1e8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8b1f8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8b208:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8b218:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8b228:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8b238:	79d99db4 44ea7843                       ...yCx.D

0008b240 <p05.6055>:
   8b240:	00000005 00000019 0000007d              ........}...

0008b24c <_ctype_>:
   8b24c:	20202000 20202020 28282020 20282828     .         ((((( 
   8b25c:	20202020 20202020 20202020 20202020                     
   8b26c:	10108820 10101010 10101010 10101010      ...............
   8b27c:	04040410 04040404 10040404 10101010     ................
   8b28c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8b29c:	01010101 01010101 01010101 10101010     ................
   8b2ac:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8b2bc:	02020202 02020202 02020202 10101010     ................
   8b2cc:	00000020 00000000 00000000 00000000      ...............
	...

0008b350 <_init>:
   8b350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b352:	bf00      	nop
   8b354:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8b356:	bc08      	pop	{r3}
   8b358:	469e      	mov	lr, r3
   8b35a:	4770      	bx	lr

0008b35c <__init_array_start>:
   8b35c:	00086965 	.word	0x00086965

0008b360 <__frame_dummy_init_array_entry>:
   8b360:	000800e1                                ....

0008b364 <_fini>:
   8b364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b366:	bf00      	nop
   8b368:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8b36a:	bc08      	pop	{r3}
   8b36c:	469e      	mov	lr, r3
   8b36e:	4770      	bx	lr

0008b370 <__fini_array_start>:
   8b370:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000010:	4a21      	ldr	r2, [pc, #132]	; (20000098 <SystemInit+0x8c>)
20000012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2000001a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
2000001e:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
20000022:	6a1b      	ldr	r3, [r3, #32]
20000024:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20000028:	d107      	bne.n	2000003a <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000002a:	4a1c      	ldr	r2, [pc, #112]	; (2000009c <SystemInit+0x90>)
2000002c:	4b1c      	ldr	r3, [pc, #112]	; (200000a0 <SystemInit+0x94>)
2000002e:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000030:	461a      	mov	r2, r3
20000032:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000034:	f013 0f01 	tst.w	r3, #1
20000038:	d0fb      	beq.n	20000032 <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000003a:	4a1a      	ldr	r2, [pc, #104]	; (200000a4 <SystemInit+0x98>)
2000003c:	4b18      	ldr	r3, [pc, #96]	; (200000a0 <SystemInit+0x94>)
2000003e:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000040:	461a      	mov	r2, r3
20000042:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000044:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20000048:	d0fb      	beq.n	20000042 <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2000004a:	4a15      	ldr	r2, [pc, #84]	; (200000a0 <SystemInit+0x94>)
2000004c:	6b13      	ldr	r3, [r2, #48]	; 0x30
2000004e:	f023 0303 	bic.w	r3, r3, #3
20000052:	f043 0301 	orr.w	r3, r3, #1
20000056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000005a:	f013 0f08 	tst.w	r3, #8
2000005e:	d0fb      	beq.n	20000058 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000060:	4a11      	ldr	r2, [pc, #68]	; (200000a8 <SystemInit+0x9c>)
20000062:	4b0f      	ldr	r3, [pc, #60]	; (200000a0 <SystemInit+0x94>)
20000064:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000066:	461a      	mov	r2, r3
20000068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000006a:	f013 0f02 	tst.w	r3, #2
2000006e:	d0fb      	beq.n	20000068 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000070:	2211      	movs	r2, #17
20000072:	4b0b      	ldr	r3, [pc, #44]	; (200000a0 <SystemInit+0x94>)
20000074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000076:	461a      	mov	r2, r3
20000078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000007a:	f013 0f08 	tst.w	r3, #8
2000007e:	d0fb      	beq.n	20000078 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000080:	2212      	movs	r2, #18
20000082:	4b07      	ldr	r3, [pc, #28]	; (200000a0 <SystemInit+0x94>)
20000084:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000086:	461a      	mov	r2, r3
20000088:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000008a:	f013 0f08 	tst.w	r3, #8
2000008e:	d0fb      	beq.n	20000088 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000090:	4a06      	ldr	r2, [pc, #24]	; (200000ac <SystemInit+0xa0>)
20000092:	4b07      	ldr	r3, [pc, #28]	; (200000b0 <SystemInit+0xa4>)
20000094:	601a      	str	r2, [r3, #0]
20000096:	4770      	bx	lr
20000098:	400e0800 	.word	0x400e0800
2000009c:	00370809 	.word	0x00370809
200000a0:	400e0400 	.word	0x400e0400
200000a4:	01370809 	.word	0x01370809
200000a8:	200f3f01 	.word	0x200f3f01
200000ac:	05b8d800 	.word	0x05b8d800
200000b0:	2000062c 	.word	0x2000062c

200000b4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000b4:	4b16      	ldr	r3, [pc, #88]	; (20000110 <system_init_flash+0x5c>)
200000b6:	4298      	cmp	r0, r3
200000b8:	d912      	bls.n	200000e0 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000ba:	4b16      	ldr	r3, [pc, #88]	; (20000114 <system_init_flash+0x60>)
200000bc:	4298      	cmp	r0, r3
200000be:	d916      	bls.n	200000ee <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200000c0:	4b15      	ldr	r3, [pc, #84]	; (20000118 <system_init_flash+0x64>)
200000c2:	4298      	cmp	r0, r3
200000c4:	d91b      	bls.n	200000fe <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200000c6:	4b15      	ldr	r3, [pc, #84]	; (2000011c <system_init_flash+0x68>)
200000c8:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200000ca:	bf94      	ite	ls
200000cc:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000d0:	f44f 6380 	movhi.w	r3, #1024	; 0x400
200000d4:	4a12      	ldr	r2, [pc, #72]	; (20000120 <system_init_flash+0x6c>)
200000d6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000dc:	6013      	str	r3, [r2, #0]
200000de:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200000e0:	2300      	movs	r3, #0
200000e2:	4a0f      	ldr	r2, [pc, #60]	; (20000120 <system_init_flash+0x6c>)
200000e4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200000e6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000ea:	6013      	str	r3, [r2, #0]
200000ec:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200000ee:	f44f 7380 	mov.w	r3, #256	; 0x100
200000f2:	4a0b      	ldr	r2, [pc, #44]	; (20000120 <system_init_flash+0x6c>)
200000f4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200000f6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000fa:	6013      	str	r3, [r2, #0]
200000fc:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200000fe:	f44f 7300 	mov.w	r3, #512	; 0x200
20000102:	4a07      	ldr	r2, [pc, #28]	; (20000120 <system_init_flash+0x6c>)
20000104:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000106:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000010a:	6013      	str	r3, [r2, #0]
2000010c:	4770      	bx	lr
2000010e:	bf00      	nop
20000110:	016e35ff 	.word	0x016e35ff
20000114:	026259ff 	.word	0x026259ff
20000118:	044aa1ff 	.word	0x044aa1ff
2000011c:	0501bcff 	.word	0x0501bcff
20000120:	400e0800 	.word	0x400e0800

20000124 <wCRCTable>:
20000124:	00000000 0000c0c1 0000c181 00000140     ............@...
20000134:	0000c301 000003c0 00000280 0000c241     ............A...
20000144:	0000c601 000006c0 00000780 0000c741     ............A...
20000154:	00000500 0000c5c1 0000c481 00000440     ............@...
20000164:	0000cc01 00000cc0 00000d80 0000cd41     ............A...
20000174:	00000f00 0000cfc1 0000ce81 00000e40     ............@...
20000184:	00000a00 0000cac1 0000cb81 00000b40     ............@...
20000194:	0000c901 000009c0 00000880 0000c841     ............A...
200001a4:	0000d801 000018c0 00001980 0000d941     ............A...
200001b4:	00001b00 0000dbc1 0000da81 00001a40     ............@...
200001c4:	00001e00 0000dec1 0000df81 00001f40     ............@...
200001d4:	0000dd01 00001dc0 00001c80 0000dc41     ............A...
200001e4:	00001400 0000d4c1 0000d581 00001540     ............@...
200001f4:	0000d701 000017c0 00001680 0000d641     ............A...
20000204:	0000d201 000012c0 00001380 0000d341     ............A...
20000214:	00001100 0000d1c1 0000d081 00001040     ............@...
20000224:	0000f001 000030c0 00003180 0000f141     .....0...1..A...
20000234:	00003300 0000f3c1 0000f281 00003240     .3..........@2..
20000244:	00003600 0000f6c1 0000f781 00003740     .6..........@7..
20000254:	0000f501 000035c0 00003480 0000f441     .....5...4..A...
20000264:	00003c00 0000fcc1 0000fd81 00003d40     .<..........@=..
20000274:	0000ff01 00003fc0 00003e80 0000fe41     .....?...>..A...
20000284:	0000fa01 00003ac0 00003b80 0000fb41     .....:...;..A...
20000294:	00003900 0000f9c1 0000f881 00003840     .9..........@8..
200002a4:	00002800 0000e8c1 0000e981 00002940     .(..........@)..
200002b4:	0000eb01 00002bc0 00002a80 0000ea41     .....+...*..A...
200002c4:	0000ee01 00002ec0 00002f80 0000ef41     ........./..A...
200002d4:	00002d00 0000edc1 0000ec81 00002c40     .-..........@,..
200002e4:	0000e401 000024c0 00002580 0000e541     .....$...%..A...
200002f4:	00002700 0000e7c1 0000e681 00002640     .'..........@&..
20000304:	00002200 0000e2c1 0000e381 00002340     ."..........@#..
20000314:	0000e101 000021c0 00002080 0000e041     .....!... ..A...
20000324:	0000a001 000060c0 00006180 0000a141     .....`...a..A...
20000334:	00006300 0000a3c1 0000a281 00006240     .c..........@b..
20000344:	00006600 0000a6c1 0000a781 00006740     .f..........@g..
20000354:	0000a501 000065c0 00006480 0000a441     .....e...d..A...
20000364:	00006c00 0000acc1 0000ad81 00006d40     .l..........@m..
20000374:	0000af01 00006fc0 00006e80 0000ae41     .....o...n..A...
20000384:	0000aa01 00006ac0 00006b80 0000ab41     .....j...k..A...
20000394:	00006900 0000a9c1 0000a881 00006840     .i..........@h..
200003a4:	00007800 0000b8c1 0000b981 00007940     .x..........@y..
200003b4:	0000bb01 00007bc0 00007a80 0000ba41     .....{...z..A...
200003c4:	0000be01 00007ec0 00007f80 0000bf41     .....~......A...
200003d4:	00007d00 0000bdc1 0000bc81 00007c40     .}..........@|..
200003e4:	0000b401 000074c0 00007580 0000b541     .....t...u..A...
200003f4:	00007700 0000b7c1 0000b681 00007640     .w..........@v..
20000404:	00007200 0000b2c1 0000b381 00007340     .r..........@s..
20000414:	0000b101 000071c0 00007080 0000b041     .....q...p..A...
20000424:	00005000 000090c1 00009181 00005140     .P..........@Q..
20000434:	00009301 000053c0 00005280 00009241     .....S...R..A...
20000444:	00009601 000056c0 00005780 00009741     .....V...W..A...
20000454:	00005500 000095c1 00009481 00005440     .U..........@T..
20000464:	00009c01 00005cc0 00005d80 00009d41     .....\...]..A...
20000474:	00005f00 00009fc1 00009e81 00005e40     ._..........@^..
20000484:	00005a00 00009ac1 00009b81 00005b40     .Z..........@[..
20000494:	00009901 000059c0 00005880 00009841     .....Y...X..A...
200004a4:	00008801 000048c0 00004980 00008941     .....H...I..A...
200004b4:	00004b00 00008bc1 00008a81 00004a40     .K..........@J..
200004c4:	00004e00 00008ec1 00008f81 00004f40     .N..........@O..
200004d4:	00008d01 00004dc0 00004c80 00008c41     .....M...L..A...
200004e4:	00004400 000084c1 00008581 00004540     .D..........@E..
200004f4:	00008701 000047c0 00004680 00008641     .....G...F..A...
20000504:	00008201 000042c0 00004380 00008341     .....B...C..A...
20000514:	00004100 000081c1 00008081 00004040     .A..........@@..

20000524 <daysOfWeek>:
20000524:	00089fb4 00089fbc 00089fc4 00089fcc     ................
20000534:	00089fd8 00089fe4 00089fec              ............

20000540 <months>:
20000540:	00089f48 00089f50 00089f5c 00089f64     H...P...\...d...
20000550:	00089f6c 00089f70 00089f78 00089f80     l...p...x.......
20000560:	00089f88 00089f94 00089f9c 00089fa8     ................

20000570 <eprocs>:
20000570:	0008ada4 0008adb0 0008adb8 0008adc4     ................
20000580:	0008add0 0008add8 0008ade4 0008adf0     ................

20000590 <nvpsiz>:
20000590:	0008ad84 0008ad24 0008ad30 0008ad3c     ....$...0...<...
200005a0:	00000000 0008ad48 00000000 0008ad54     ....H.......T...
200005b0:	00000000 0008ad60 0008ad78 00000000     ....`...x.......
200005c0:	0008ad8c 00000000 0008ad98 00000000     ................

200005d0 <nvptyp>:
200005d0:	0008a6d4 0008a6e0 0008a708 0008a728     ............(...
200005e0:	0008a784                                ....

200005e4 <sramsiz>:
200005e4:	0008acc4 0008acd0 0008acdc 0008ace8     ................
200005f4:	0008acf4 0008ad00 0008ad0c 0008ad18     ................
20000604:	0008ad24 0008ad30 0008ad3c 0008ad48     $...0...<...H...
20000614:	0008ad54 0008ad60 0008ad6c 0008ad78     T...`...l...x...

20000624 <moduleIdentification>:
20000624:	ffffffff                                ....

20000628 <g_interrupt_enabled>:
20000628:	00000001                                ....

2000062c <SystemCoreClock>:
2000062c:	003d0900                                ..=.

20000630 <_impure_ptr>:
20000630:	20000638 00000000                       8.. ....

20000638 <impure_data>:
20000638:	00000000 20000924 2000098c 200009f4     ....$.. ... ... 
	...
200006e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200006f0:	0005deec 0000000b 00000000 00000000     ................
	...

20000a60 <__atexit_recursive_mutex>:
20000a60:	200029f4                                .). 

20000a64 <__global_locale>:
20000a64:	00000043 00000000 00000000 00000000     C...............
	...
20000a84:	00000043 00000000 00000000 00000000     C...............
	...
20000aa4:	00000043 00000000 00000000 00000000     C...............
	...
20000ac4:	00000043 00000000 00000000 00000000     C...............
	...
20000ae4:	00000043 00000000 00000000 00000000     C...............
	...
20000b04:	00000043 00000000 00000000 00000000     C...............
	...
20000b24:	00000043 00000000 00000000 00000000     C...............
	...
20000b44:	0008876d 00087e99 00000000 0008b24c     m....~......L...
20000b54:	0008b148 00089ee8 00089ee8 00089ee8     H...............
20000b64:	00089ee8 00089ee8 00089ee8 00089ee8     ................
20000b74:	00089ee8 00089ee8 ffffffff ffffffff     ................
20000b84:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000bac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000bd0 <__malloc_av_>:
	...
20000bd8:	20000bd0 20000bd0 20000bd8 20000bd8     ... ... ... ... 
20000be8:	20000be0 20000be0 20000be8 20000be8     ... ... ... ... 
20000bf8:	20000bf0 20000bf0 20000bf8 20000bf8     ... ... ... ... 
20000c08:	20000c00 20000c00 20000c08 20000c08     ... ... ... ... 
20000c18:	20000c10 20000c10 20000c18 20000c18     ... ... ... ... 
20000c28:	20000c20 20000c20 20000c28 20000c28      ..  .. (.. (.. 
20000c38:	20000c30 20000c30 20000c38 20000c38     0.. 0.. 8.. 8.. 
20000c48:	20000c40 20000c40 20000c48 20000c48     @.. @.. H.. H.. 
20000c58:	20000c50 20000c50 20000c58 20000c58     P.. P.. X.. X.. 
20000c68:	20000c60 20000c60 20000c68 20000c68     `.. `.. h.. h.. 
20000c78:	20000c70 20000c70 20000c78 20000c78     p.. p.. x.. x.. 
20000c88:	20000c80 20000c80 20000c88 20000c88     ... ... ... ... 
20000c98:	20000c90 20000c90 20000c98 20000c98     ... ... ... ... 
20000ca8:	20000ca0 20000ca0 20000ca8 20000ca8     ... ... ... ... 
20000cb8:	20000cb0 20000cb0 20000cb8 20000cb8     ... ... ... ... 
20000cc8:	20000cc0 20000cc0 20000cc8 20000cc8     ... ... ... ... 
20000cd8:	20000cd0 20000cd0 20000cd8 20000cd8     ... ... ... ... 
20000ce8:	20000ce0 20000ce0 20000ce8 20000ce8     ... ... ... ... 
20000cf8:	20000cf0 20000cf0 20000cf8 20000cf8     ... ... ... ... 
20000d08:	20000d00 20000d00 20000d08 20000d08     ... ... ... ... 
20000d18:	20000d10 20000d10 20000d18 20000d18     ... ... ... ... 
20000d28:	20000d20 20000d20 20000d28 20000d28      ..  .. (.. (.. 
20000d38:	20000d30 20000d30 20000d38 20000d38     0.. 0.. 8.. 8.. 
20000d48:	20000d40 20000d40 20000d48 20000d48     @.. @.. H.. H.. 
20000d58:	20000d50 20000d50 20000d58 20000d58     P.. P.. X.. X.. 
20000d68:	20000d60 20000d60 20000d68 20000d68     `.. `.. h.. h.. 
20000d78:	20000d70 20000d70 20000d78 20000d78     p.. p.. x.. x.. 
20000d88:	20000d80 20000d80 20000d88 20000d88     ... ... ... ... 
20000d98:	20000d90 20000d90 20000d98 20000d98     ... ... ... ... 
20000da8:	20000da0 20000da0 20000da8 20000da8     ... ... ... ... 
20000db8:	20000db0 20000db0 20000db8 20000db8     ... ... ... ... 
20000dc8:	20000dc0 20000dc0 20000dc8 20000dc8     ... ... ... ... 
20000dd8:	20000dd0 20000dd0 20000dd8 20000dd8     ... ... ... ... 
20000de8:	20000de0 20000de0 20000de8 20000de8     ... ... ... ... 
20000df8:	20000df0 20000df0 20000df8 20000df8     ... ... ... ... 
20000e08:	20000e00 20000e00 20000e08 20000e08     ... ... ... ... 
20000e18:	20000e10 20000e10 20000e18 20000e18     ... ... ... ... 
20000e28:	20000e20 20000e20 20000e28 20000e28      ..  .. (.. (.. 
20000e38:	20000e30 20000e30 20000e38 20000e38     0.. 0.. 8.. 8.. 
20000e48:	20000e40 20000e40 20000e48 20000e48     @.. @.. H.. H.. 
20000e58:	20000e50 20000e50 20000e58 20000e58     P.. P.. X.. X.. 
20000e68:	20000e60 20000e60 20000e68 20000e68     `.. `.. h.. h.. 
20000e78:	20000e70 20000e70 20000e78 20000e78     p.. p.. x.. x.. 
20000e88:	20000e80 20000e80 20000e88 20000e88     ... ... ... ... 
20000e98:	20000e90 20000e90 20000e98 20000e98     ... ... ... ... 
20000ea8:	20000ea0 20000ea0 20000ea8 20000ea8     ... ... ... ... 
20000eb8:	20000eb0 20000eb0 20000eb8 20000eb8     ... ... ... ... 
20000ec8:	20000ec0 20000ec0 20000ec8 20000ec8     ... ... ... ... 
20000ed8:	20000ed0 20000ed0 20000ed8 20000ed8     ... ... ... ... 
20000ee8:	20000ee0 20000ee0 20000ee8 20000ee8     ... ... ... ... 
20000ef8:	20000ef0 20000ef0 20000ef8 20000ef8     ... ... ... ... 
20000f08:	20000f00 20000f00 20000f08 20000f08     ... ... ... ... 
20000f18:	20000f10 20000f10 20000f18 20000f18     ... ... ... ... 
20000f28:	20000f20 20000f20 20000f28 20000f28      ..  .. (.. (.. 
20000f38:	20000f30 20000f30 20000f38 20000f38     0.. 0.. 8.. 8.. 
20000f48:	20000f40 20000f40 20000f48 20000f48     @.. @.. H.. H.. 
20000f58:	20000f50 20000f50 20000f58 20000f58     P.. P.. X.. X.. 
20000f68:	20000f60 20000f60 20000f68 20000f68     `.. `.. h.. h.. 
20000f78:	20000f70 20000f70 20000f78 20000f78     p.. p.. x.. x.. 
20000f88:	20000f80 20000f80 20000f88 20000f88     ... ... ... ... 
20000f98:	20000f90 20000f90 20000f98 20000f98     ... ... ... ... 
20000fa8:	20000fa0 20000fa0 20000fa8 20000fa8     ... ... ... ... 
20000fb8:	20000fb0 20000fb0 20000fb8 20000fb8     ... ... ... ... 
20000fc8:	20000fc0 20000fc0 20000fc8 20000fc8     ... ... ... ... 

20000fd8 <__malloc_sbrk_base>:
20000fd8:	ffffffff                                ....

20000fdc <__malloc_trim_threshold>:
20000fdc:	00020000                                ....
