
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006d5c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086d5c  00086d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000f30  20000000  00086d64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000072c  20000f30  00087c94  00020f30  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020f30  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020f59  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001eed9  00000000  00000000  00020fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004adc  00000000  00000000  0003fe8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006991  00000000  00000000  00044967  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c60  00000000  00000000  0004b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bc0  00000000  00000000  0004bf58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b240  00000000  00000000  0004cb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016715  00000000  00000000  00057d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00056621  00000000  00000000  0006e46d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000027e0  00000000  00000000  000c4a90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 d9 1d 08 00 d5 1d 08 00 d5 1d 08 00     .@. ............
   80010:	d5 1d 08 00 d5 1d 08 00 d5 1d 08 00 00 00 00 00     ................
	...
   8002c:	f9 03 08 00 d5 1d 08 00 00 00 00 00 41 04 08 00     ............A...
   8003c:	7d 04 08 00 d5 1d 08 00 d5 1d 08 00 35 0e 08 00     }...........5...
   8004c:	d5 1d 08 00 d5 1d 08 00 d5 1d 08 00 d5 1d 08 00     ................
   8005c:	d5 1d 08 00 01 02 08 00 d5 1d 08 00 85 03 08 00     ................
   8006c:	99 03 08 00 d5 1d 08 00 d5 1d 08 00 d5 1d 08 00     ................
   8007c:	d5 1d 08 00 d5 1d 08 00 d5 1d 08 00 d5 1d 08 00     ................
   8008c:	d5 1d 08 00 d5 1d 08 00 d5 1d 08 00 39 16 08 00     ............9...
   8009c:	d5 1d 08 00 d5 1d 08 00 d5 1d 08 00 d5 1d 08 00     ................
   800ac:	d5 1d 08 00 d5 1d 08 00 d5 1d 08 00 d5 1d 08 00     ................

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000f30 	.word	0x20000f30
   800d8:	00000000 	.word	0x00000000
   800dc:	00086d64 	.word	0x00086d64

000800e0 <frame_dummy>:
   800e0:	4b0c      	ldr	r3, [pc, #48]	; (80114 <frame_dummy+0x34>)
   800e2:	b143      	cbz	r3, 800f6 <frame_dummy+0x16>
   800e4:	480c      	ldr	r0, [pc, #48]	; (80118 <frame_dummy+0x38>)
   800e6:	b510      	push	{r4, lr}
   800e8:	490c      	ldr	r1, [pc, #48]	; (8011c <frame_dummy+0x3c>)
   800ea:	f3af 8000 	nop.w
   800ee:	480c      	ldr	r0, [pc, #48]	; (80120 <frame_dummy+0x40>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b923      	cbnz	r3, 800fe <frame_dummy+0x1e>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	480a      	ldr	r0, [pc, #40]	; (80120 <frame_dummy+0x40>)
   800f8:	6803      	ldr	r3, [r0, #0]
   800fa:	b933      	cbnz	r3, 8010a <frame_dummy+0x2a>
   800fc:	4770      	bx	lr
   800fe:	4b09      	ldr	r3, [pc, #36]	; (80124 <frame_dummy+0x44>)
   80100:	2b00      	cmp	r3, #0
   80102:	d0f7      	beq.n	800f4 <frame_dummy+0x14>
   80104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80108:	4718      	bx	r3
   8010a:	4b06      	ldr	r3, [pc, #24]	; (80124 <frame_dummy+0x44>)
   8010c:	2b00      	cmp	r3, #0
   8010e:	d0f5      	beq.n	800fc <frame_dummy+0x1c>
   80110:	4718      	bx	r3
   80112:	bf00      	nop
   80114:	00000000 	.word	0x00000000
   80118:	00086d64 	.word	0x00086d64
   8011c:	20000f34 	.word	0x20000f34
   80120:	00086d64 	.word	0x00086d64
   80124:	00000000 	.word	0x00000000

00080128 <configure_rx_dma>:
 * For internal use only.
 * Configures the Rx DMA to receive data into free space within the Rx buffer.
 */
static void configure_rx_dma(uint32_t uart_index,
		enum buffer_operations operation_performed)
{
   80128:	b570      	push	{r4, r5, r6, lr}
	rx_buffer_definition = &(rx_buffer_definitions[uart_index]);

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
   8012a:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   8012e:	4b2d      	ldr	r3, [pc, #180]	; (801e4 <configure_rx_dma+0xbc>)
   80130:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80134:	699a      	ldr	r2, [r3, #24]
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
   80136:	689b      	ldr	r3, [r3, #8]
	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
   80138:	429a      	cmp	r2, r3
   8013a:	d02b      	beq.n	80194 <configure_rx_dma+0x6c>
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
   8013c:	429a      	cmp	r2, r3
   8013e:	d941      	bls.n	801c4 <configure_rx_dma+0x9c>
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   80140:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
   80144:	4927      	ldr	r1, [pc, #156]	; (801e4 <configure_rx_dma+0xbc>)
   80146:	eb01 0184 	add.w	r1, r1, r4, lsl #2
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
   8014a:	1ad2      	subs	r2, r2, r3
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   8014c:	60ca      	str	r2, [r1, #12]
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	}

	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr+
   8014e:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
   80152:	4a24      	ldr	r2, [pc, #144]	; (801e4 <configure_rx_dma+0xbc>)
   80154:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   80158:	68d1      	ldr	r1, [r2, #12]
   8015a:	440b      	add	r3, r1
   8015c:	6852      	ldr	r2, [r2, #4]
   8015e:	4293      	cmp	r3, r2
   80160:	d823      	bhi.n	801aa <configure_rx_dma+0x82>
			rx_buffer_definition->rx_pdc_parameters.ul_size) <=
			rx_buffer_definition->past_rx_buffer_end_address);

	if (rx_buffer_definition->rx_pdc_parameters.ul_size > 0) {
   80162:	2900      	cmp	r1, #0
   80164:	d037      	beq.n	801d6 <configure_rx_dma+0xae>
		/* Restart the DMA to receive into whichever space was calculated
		as remaining.  First clear any characters that might already be in the
		registers. */
		pdc_rx_init(
   80166:	4d20      	ldr	r5, [pc, #128]	; (801e8 <configure_rx_dma+0xc0>)
   80168:	0104      	lsls	r4, r0, #4
   8016a:	192b      	adds	r3, r5, r4
   8016c:	685e      	ldr	r6, [r3, #4]
   8016e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   80172:	491c      	ldr	r1, [pc, #112]	; (801e4 <configure_rx_dma+0xbc>)
   80174:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   80178:	2200      	movs	r2, #0
   8017a:	3108      	adds	r1, #8
   8017c:	4630      	mov	r0, r6
   8017e:	4b1b      	ldr	r3, [pc, #108]	; (801ec <configure_rx_dma+0xc4>)
   80180:	4798      	blx	r3
				all_uart_definitions[uart_index].pdc_base_address, &rx_buffer_definition->rx_pdc_parameters,
				NULL);
		pdc_enable_transfer(
   80182:	2101      	movs	r1, #1
   80184:	4630      	mov	r0, r6
   80186:	4b1a      	ldr	r3, [pc, #104]	; (801f0 <configure_rx_dma+0xc8>)
   80188:	4798      	blx	r3
				all_uart_definitions[uart_index].pdc_base_address,
				PERIPH_PTCR_RXTEN);
		uart_enable_interrupt(
   8018a:	2109      	movs	r1, #9
   8018c:	5928      	ldr	r0, [r5, r4]
   8018e:	4b19      	ldr	r3, [pc, #100]	; (801f4 <configure_rx_dma+0xcc>)
   80190:	4798      	blx	r3
   80192:	bd70      	pop	{r4, r5, r6, pc}
		if (operation_performed == data_added) {
   80194:	b969      	cbnz	r1, 801b2 <configure_rx_dma+0x8a>
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
   80196:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
   8019a:	4a12      	ldr	r2, [pc, #72]	; (801e4 <configure_rx_dma+0xbc>)
   8019c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   801a0:	2100      	movs	r1, #0
   801a2:	60d1      	str	r1, [r2, #12]
	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr+
   801a4:	6852      	ldr	r2, [r2, #4]
   801a6:	4293      	cmp	r3, r2
   801a8:	d915      	bls.n	801d6 <configure_rx_dma+0xae>
   801aa:	4b13      	ldr	r3, [pc, #76]	; (801f8 <configure_rx_dma+0xd0>)
   801ac:	4798      	blx	r3
   801ae:	bf00      	nop
   801b0:	e7fd      	b.n	801ae <configure_rx_dma+0x86>
			rx_buffer_definition->rx_pdc_parameters.ul_size =
   801b2:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
   801b6:	4a0b      	ldr	r2, [pc, #44]	; (801e4 <configure_rx_dma+0xbc>)
   801b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
   801bc:	6851      	ldr	r1, [r2, #4]
   801be:	1ac9      	subs	r1, r1, r3
			rx_buffer_definition->rx_pdc_parameters.ul_size =
   801c0:	60d1      	str	r1, [r2, #12]
   801c2:	e7c4      	b.n	8014e <configure_rx_dma+0x26>
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   801c4:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
   801c8:	4a06      	ldr	r2, [pc, #24]	; (801e4 <configure_rx_dma+0xbc>)
   801ca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
   801ce:	6851      	ldr	r1, [r2, #4]
   801d0:	1ac9      	subs	r1, r1, r3
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   801d2:	60d1      	str	r1, [r2, #12]
   801d4:	e7bb      	b.n	8014e <configure_rx_dma+0x26>
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		uart_disable_interrupt(
				all_uart_definitions[uart_index].peripheral_base_address,
   801d6:	0100      	lsls	r0, r0, #4
		uart_disable_interrupt(
   801d8:	2109      	movs	r1, #9
   801da:	4b03      	ldr	r3, [pc, #12]	; (801e8 <configure_rx_dma+0xc0>)
   801dc:	5818      	ldr	r0, [r3, r0]
   801de:	4b07      	ldr	r3, [pc, #28]	; (801fc <configure_rx_dma+0xd4>)
   801e0:	4798      	blx	r3
   801e2:	bd70      	pop	{r4, r5, r6, pc}
   801e4:	20000f4c 	.word	0x20000f4c
   801e8:	000868d4 	.word	0x000868d4
   801ec:	00080311 	.word	0x00080311
   801f0:	00080329 	.word	0x00080329
   801f4:	00081d51 	.word	0x00081d51
   801f8:	00080429 	.word	0x00080429
   801fc:	00081d55 	.word	0x00081d55

00080200 <UART_Handler>:
 */

#ifdef UART

void UART_Handler(void)
{
   80200:	b530      	push	{r4, r5, lr}
   80202:	b083      	sub	sp, #12
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
   80204:	2300      	movs	r3, #0
   80206:	9301      	str	r3, [sp, #4]
	uart_status = uart_get_status(
   80208:	4d36      	ldr	r5, [pc, #216]	; (802e4 <UART_Handler+0xe4>)
   8020a:	4628      	mov	r0, r5
   8020c:	4b36      	ldr	r3, [pc, #216]	; (802e8 <UART_Handler+0xe8>)
   8020e:	4798      	blx	r3
   80210:	4604      	mov	r4, r0
	uart_status &= uart_get_interrupt_mask(
   80212:	4628      	mov	r0, r5
   80214:	4b35      	ldr	r3, [pc, #212]	; (802ec <UART_Handler+0xec>)
   80216:	4798      	blx	r3
   80218:	4004      	ands	r4, r0
	if ((uart_status & UART_SR_ENDTX) != 0UL) {
   8021a:	f014 0f10 	tst.w	r4, #16
   8021e:	d12e      	bne.n	8027e <UART_Handler+0x7e>
	if ((uart_status & UART_SR_ENDRX) != 0UL) {
   80220:	f014 0f08 	tst.w	r4, #8
   80224:	d01d      	beq.n	80262 <UART_Handler+0x62>
		configASSERT(rx_buffer_definition->next_byte_to_read);
   80226:	4b32      	ldr	r3, [pc, #200]	; (802f0 <UART_Handler+0xf0>)
   80228:	699b      	ldr	r3, [r3, #24]
   8022a:	2b00      	cmp	r3, #0
   8022c:	d03d      	beq.n	802aa <UART_Handler+0xaa>
		configASSERT(rx_buffer_definition->next_byte_to_read !=
   8022e:	2b01      	cmp	r3, #1
   80230:	d03f      	beq.n	802b2 <UART_Handler+0xb2>
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
   80232:	4a2f      	ldr	r2, [pc, #188]	; (802f0 <UART_Handler+0xf0>)
   80234:	6893      	ldr	r3, [r2, #8]
   80236:	68d1      	ldr	r1, [r2, #12]
   80238:	440b      	add	r3, r1
   8023a:	6093      	str	r3, [r2, #8]
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
   8023c:	6852      	ldr	r2, [r2, #4]
   8023e:	4293      	cmp	r3, r2
   80240:	d302      	bcc.n	80248 <UART_Handler+0x48>
			rx_buffer_definition->rx_pdc_parameters.ul_addr =
   80242:	4b2b      	ldr	r3, [pc, #172]	; (802f0 <UART_Handler+0xf0>)
   80244:	681a      	ldr	r2, [r3, #0]
   80246:	609a      	str	r2, [r3, #8]
		configure_rx_dma(uart_index, data_added);
   80248:	2100      	movs	r1, #0
   8024a:	4608      	mov	r0, r1
   8024c:	4b29      	ldr	r3, [pc, #164]	; (802f4 <UART_Handler+0xf4>)
   8024e:	4798      	blx	r3
		if (rx_buffer_definition->rx_event_semaphore != NULL) {
   80250:	4b27      	ldr	r3, [pc, #156]	; (802f0 <UART_Handler+0xf0>)
   80252:	6918      	ldr	r0, [r3, #16]
   80254:	2800      	cmp	r0, #0
   80256:	d033      	beq.n	802c0 <UART_Handler+0xc0>
			xSemaphoreGiveFromISR(
   80258:	2300      	movs	r3, #0
   8025a:	aa01      	add	r2, sp, #4
   8025c:	4619      	mov	r1, r3
   8025e:	4d26      	ldr	r5, [pc, #152]	; (802f8 <UART_Handler+0xf8>)
   80260:	47a8      	blx	r5
	if (uart_status == 0UL) {
   80262:	2c00      	cmp	r4, #0
   80264:	d12e      	bne.n	802c4 <UART_Handler+0xc4>
		if (rx_buffer_definition->rx_event_semaphore != NULL) {
   80266:	4b22      	ldr	r3, [pc, #136]	; (802f0 <UART_Handler+0xf0>)
   80268:	6918      	ldr	r0, [r3, #16]
   8026a:	b120      	cbz	r0, 80276 <UART_Handler+0x76>
			xSemaphoreGiveFromISR(
   8026c:	2300      	movs	r3, #0
   8026e:	aa01      	add	r2, sp, #4
   80270:	4619      	mov	r1, r3
   80272:	4c21      	ldr	r4, [pc, #132]	; (802f8 <UART_Handler+0xf8>)
   80274:	47a0      	blx	r4
	portEND_SWITCHING_ISR(higher_priority_task_woken);
   80276:	9b01      	ldr	r3, [sp, #4]
   80278:	b9fb      	cbnz	r3, 802ba <UART_Handler+0xba>
	local_uart_handler(0);
}
   8027a:	b003      	add	sp, #12
   8027c:	bd30      	pop	{r4, r5, pc}
		uart_disable_interrupt(
   8027e:	2110      	movs	r1, #16
   80280:	4628      	mov	r0, r5
   80282:	4b1e      	ldr	r3, [pc, #120]	; (802fc <UART_Handler+0xfc>)
   80284:	4798      	blx	r3
		if (tx_dma_control[uart_index].peripheral_access_sem != NULL) {
   80286:	4b1e      	ldr	r3, [pc, #120]	; (80300 <UART_Handler+0x100>)
   80288:	6858      	ldr	r0, [r3, #4]
   8028a:	b120      	cbz	r0, 80296 <UART_Handler+0x96>
			xSemaphoreGiveFromISR(
   8028c:	2300      	movs	r3, #0
   8028e:	aa01      	add	r2, sp, #4
   80290:	4619      	mov	r1, r3
   80292:	4d19      	ldr	r5, [pc, #100]	; (802f8 <UART_Handler+0xf8>)
   80294:	47a8      	blx	r5
		if (tx_dma_control[uart_index].transaction_complete_notification_semaphore != NULL) {
   80296:	4b1a      	ldr	r3, [pc, #104]	; (80300 <UART_Handler+0x100>)
   80298:	6818      	ldr	r0, [r3, #0]
   8029a:	2800      	cmp	r0, #0
   8029c:	d0c0      	beq.n	80220 <UART_Handler+0x20>
			xSemaphoreGiveFromISR(
   8029e:	2300      	movs	r3, #0
   802a0:	aa01      	add	r2, sp, #4
   802a2:	4619      	mov	r1, r3
   802a4:	4d14      	ldr	r5, [pc, #80]	; (802f8 <UART_Handler+0xf8>)
   802a6:	47a8      	blx	r5
   802a8:	e7ba      	b.n	80220 <UART_Handler+0x20>
		configASSERT(rx_buffer_definition->next_byte_to_read);
   802aa:	4b16      	ldr	r3, [pc, #88]	; (80304 <UART_Handler+0x104>)
   802ac:	4798      	blx	r3
   802ae:	bf00      	nop
   802b0:	e7fd      	b.n	802ae <UART_Handler+0xae>
		configASSERT(rx_buffer_definition->next_byte_to_read !=
   802b2:	4b14      	ldr	r3, [pc, #80]	; (80304 <UART_Handler+0x104>)
   802b4:	4798      	blx	r3
   802b6:	bf00      	nop
   802b8:	e7fd      	b.n	802b6 <UART_Handler+0xb6>
	portEND_SWITCHING_ISR(higher_priority_task_woken);
   802ba:	4b13      	ldr	r3, [pc, #76]	; (80308 <UART_Handler+0x108>)
   802bc:	4798      	blx	r3
}
   802be:	e7dc      	b.n	8027a <UART_Handler+0x7a>
	if (uart_status == 0UL) {
   802c0:	2c00      	cmp	r4, #0
   802c2:	d0d8      	beq.n	80276 <UART_Handler+0x76>
	if ((uart_status & SR_ERROR_INTERRUPTS) != 0) {
   802c4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
   802c8:	d0d5      	beq.n	80276 <UART_Handler+0x76>
		uart_reset_status(
   802ca:	4806      	ldr	r0, [pc, #24]	; (802e4 <UART_Handler+0xe4>)
   802cc:	4b0f      	ldr	r3, [pc, #60]	; (8030c <UART_Handler+0x10c>)
   802ce:	4798      	blx	r3
		if (tx_dma_control[uart_index].peripheral_access_sem != NULL) {
   802d0:	4b0b      	ldr	r3, [pc, #44]	; (80300 <UART_Handler+0x100>)
   802d2:	6858      	ldr	r0, [r3, #4]
   802d4:	2800      	cmp	r0, #0
   802d6:	d0ce      	beq.n	80276 <UART_Handler+0x76>
			xSemaphoreGiveFromISR(
   802d8:	2300      	movs	r3, #0
   802da:	aa01      	add	r2, sp, #4
   802dc:	4619      	mov	r1, r3
   802de:	4c06      	ldr	r4, [pc, #24]	; (802f8 <UART_Handler+0xf8>)
   802e0:	47a0      	blx	r4
   802e2:	e7c8      	b.n	80276 <UART_Handler+0x76>
   802e4:	400e0600 	.word	0x400e0600
   802e8:	00081d5d 	.word	0x00081d5d
   802ec:	00081d59 	.word	0x00081d59
   802f0:	20000f4c 	.word	0x20000f4c
   802f4:	00080129 	.word	0x00080129
   802f8:	00080511 	.word	0x00080511
   802fc:	00081d55 	.word	0x00081d55
   80300:	20000f68 	.word	0x20000f68
   80304:	00080429 	.word	0x00080429
   80308:	00080419 	.word	0x00080419
   8030c:	00081d61 	.word	0x00081d61

00080310 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   80310:	460b      	mov	r3, r1
   80312:	b119      	cbz	r1, 8031c <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
   80314:	6809      	ldr	r1, [r1, #0]
   80316:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
   80318:	685b      	ldr	r3, [r3, #4]
   8031a:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
   8031c:	b11a      	cbz	r2, 80326 <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
   8031e:	6813      	ldr	r3, [r2, #0]
   80320:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
   80322:	6853      	ldr	r3, [r2, #4]
   80324:	6143      	str	r3, [r0, #20]
   80326:	4770      	bx	lr

00080328 <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   80328:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
   8032c:	05c9      	lsls	r1, r1, #23
   8032e:	0dc9      	lsrs	r1, r1, #23
	p_pdc->PERIPH_PTCR =
   80330:	6201      	str	r1, [r0, #32]
   80332:	4770      	bx	lr

00080334 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80338:	4604      	mov	r4, r0
   8033a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8033c:	4b0e      	ldr	r3, [pc, #56]	; (80378 <pio_handler_process+0x44>)
   8033e:	4798      	blx	r3
   80340:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80342:	4620      	mov	r0, r4
   80344:	4b0d      	ldr	r3, [pc, #52]	; (8037c <pio_handler_process+0x48>)
   80346:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80348:	4005      	ands	r5, r0
   8034a:	d013      	beq.n	80374 <pio_handler_process+0x40>
   8034c:	4c0c      	ldr	r4, [pc, #48]	; (80380 <pio_handler_process+0x4c>)
   8034e:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80352:	e003      	b.n	8035c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80354:	42b4      	cmp	r4, r6
   80356:	d00d      	beq.n	80374 <pio_handler_process+0x40>
   80358:	3410      	adds	r4, #16
		while (status != 0) {
   8035a:	b15d      	cbz	r5, 80374 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   8035c:	6820      	ldr	r0, [r4, #0]
   8035e:	4540      	cmp	r0, r8
   80360:	d1f8      	bne.n	80354 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80362:	6861      	ldr	r1, [r4, #4]
   80364:	4229      	tst	r1, r5
   80366:	d0f5      	beq.n	80354 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80368:	68e3      	ldr	r3, [r4, #12]
   8036a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   8036c:	6863      	ldr	r3, [r4, #4]
   8036e:	ea25 0503 	bic.w	r5, r5, r3
   80372:	e7ef      	b.n	80354 <pio_handler_process+0x20>
   80374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80378:	000818f7 	.word	0x000818f7
   8037c:	000818fb 	.word	0x000818fb
   80380:	20000f70 	.word	0x20000f70

00080384 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80384:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80386:	210a      	movs	r1, #10
   80388:	4801      	ldr	r0, [pc, #4]	; (80390 <PIOA_Handler+0xc>)
   8038a:	4b02      	ldr	r3, [pc, #8]	; (80394 <PIOA_Handler+0x10>)
   8038c:	4798      	blx	r3
   8038e:	bd08      	pop	{r3, pc}
   80390:	400e0c00 	.word	0x400e0c00
   80394:	00080335 	.word	0x00080335

00080398 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80398:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8039a:	210b      	movs	r1, #11
   8039c:	4801      	ldr	r0, [pc, #4]	; (803a4 <PIOB_Handler+0xc>)
   8039e:	4b02      	ldr	r3, [pc, #8]	; (803a8 <PIOB_Handler+0x10>)
   803a0:	4798      	blx	r3
   803a2:	bd08      	pop	{r3, pc}
   803a4:	400e0e00 	.word	0x400e0e00
   803a8:	00080335 	.word	0x00080335

000803ac <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   803ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   803b0:	6043      	str	r3, [r0, #4]
   803b2:	4770      	bx	lr

000803b4 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   803b4:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   803b6:	685a      	ldr	r2, [r3, #4]
   803b8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   803ba:	6842      	ldr	r2, [r0, #4]
   803bc:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   803be:	685a      	ldr	r2, [r3, #4]
   803c0:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   803c2:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   803c4:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   803c6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   803c8:	6803      	ldr	r3, [r0, #0]
   803ca:	3301      	adds	r3, #1
   803cc:	6003      	str	r3, [r0, #0]
   803ce:	4770      	bx	lr

000803d0 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   803d0:	6843      	ldr	r3, [r0, #4]
   803d2:	6882      	ldr	r2, [r0, #8]
   803d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   803d6:	6883      	ldr	r3, [r0, #8]
   803d8:	6842      	ldr	r2, [r0, #4]
   803da:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   803dc:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   803de:	685a      	ldr	r2, [r3, #4]
   803e0:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   803e2:	bf04      	itt	eq
   803e4:	6882      	ldreq	r2, [r0, #8]
   803e6:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   803e8:	2200      	movs	r2, #0
   803ea:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   803ec:	681a      	ldr	r2, [r3, #0]
   803ee:	3a01      	subs	r2, #1
   803f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   803f2:	6818      	ldr	r0, [r3, #0]
}
   803f4:	4770      	bx	lr
	...

000803f8 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   803f8:	4b06      	ldr	r3, [pc, #24]	; (80414 <pxCurrentTCBConst2>)
   803fa:	6819      	ldr	r1, [r3, #0]
   803fc:	6808      	ldr	r0, [r1, #0]
   803fe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80402:	f380 8809 	msr	PSP, r0
   80406:	f04f 0000 	mov.w	r0, #0
   8040a:	f380 8811 	msr	BASEPRI, r0
   8040e:	f04e 0e0d 	orr.w	lr, lr, #13
   80412:	4770      	bx	lr

00080414 <pxCurrentTCBConst2>:
   80414:	20000fe0 	.word	0x20000fe0

00080418 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8041c:	4b01      	ldr	r3, [pc, #4]	; (80424 <vPortYieldFromISR+0xc>)
   8041e:	601a      	str	r2, [r3, #0]
   80420:	4770      	bx	lr
   80422:	bf00      	nop
   80424:	e000ed04 	.word	0xe000ed04

00080428 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80428:	f3ef 8011 	mrs	r0, BASEPRI
   8042c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80430:	f381 8811 	msr	BASEPRI, r1
   80434:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80436:	2000      	movs	r0, #0

00080438 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80438:	f380 8811 	msr	BASEPRI, r0
   8043c:	4770      	bx	lr
	...

00080440 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80440:	f3ef 8009 	mrs	r0, PSP
   80444:	4b0c      	ldr	r3, [pc, #48]	; (80478 <pxCurrentTCBConst>)
   80446:	681a      	ldr	r2, [r3, #0]
   80448:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8044c:	6010      	str	r0, [r2, #0]
   8044e:	e92d 4008 	stmdb	sp!, {r3, lr}
   80452:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80456:	f380 8811 	msr	BASEPRI, r0
   8045a:	f000 f935 	bl	806c8 <vTaskSwitchContext>
   8045e:	f04f 0000 	mov.w	r0, #0
   80462:	f380 8811 	msr	BASEPRI, r0
   80466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8046a:	6819      	ldr	r1, [r3, #0]
   8046c:	6808      	ldr	r0, [r1, #0]
   8046e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80472:	f380 8809 	msr	PSP, r0
   80476:	4770      	bx	lr

00080478 <pxCurrentTCBConst>:
   80478:	20000fe0 	.word	0x20000fe0

0008047c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   8047c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8047e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80482:	4b05      	ldr	r3, [pc, #20]	; (80498 <SysTick_Handler+0x1c>)
   80484:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80486:	4b05      	ldr	r3, [pc, #20]	; (8049c <SysTick_Handler+0x20>)
   80488:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8048a:	4b05      	ldr	r3, [pc, #20]	; (804a0 <SysTick_Handler+0x24>)
   8048c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8048e:	2000      	movs	r0, #0
   80490:	4b04      	ldr	r3, [pc, #16]	; (804a4 <SysTick_Handler+0x28>)
   80492:	4798      	blx	r3
   80494:	bd08      	pop	{r3, pc}
   80496:	bf00      	nop
   80498:	e000ed04 	.word	0xe000ed04
   8049c:	00080429 	.word	0x00080429
   804a0:	000805a1 	.word	0x000805a1
   804a4:	00080439 	.word	0x00080439

000804a8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   804a8:	b510      	push	{r4, lr}
   804aa:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   804ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
   804ae:	b95b      	cbnz	r3, 804c8 <prvCopyDataToQueue+0x20>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   804b0:	6803      	ldr	r3, [r0, #0]
   804b2:	b11b      	cbz	r3, 804bc <prvCopyDataToQueue+0x14>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
   804b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   804b6:	3301      	adds	r3, #1
   804b8:	63a3      	str	r3, [r4, #56]	; 0x38
   804ba:	bd10      	pop	{r4, pc}
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   804bc:	6840      	ldr	r0, [r0, #4]
   804be:	4b12      	ldr	r3, [pc, #72]	; (80508 <prvCopyDataToQueue+0x60>)
   804c0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   804c2:	2300      	movs	r3, #0
   804c4:	6063      	str	r3, [r4, #4]
   804c6:	e7f5      	b.n	804b4 <prvCopyDataToQueue+0xc>
	else if( xPosition == queueSEND_TO_BACK )
   804c8:	b96a      	cbnz	r2, 804e6 <prvCopyDataToQueue+0x3e>
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   804ca:	461a      	mov	r2, r3
   804cc:	6880      	ldr	r0, [r0, #8]
   804ce:	4b0f      	ldr	r3, [pc, #60]	; (8050c <prvCopyDataToQueue+0x64>)
   804d0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   804d2:	68a3      	ldr	r3, [r4, #8]
   804d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
   804d6:	4413      	add	r3, r2
   804d8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   804da:	6862      	ldr	r2, [r4, #4]
   804dc:	4293      	cmp	r3, r2
   804de:	d3e9      	bcc.n	804b4 <prvCopyDataToQueue+0xc>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   804e0:	6823      	ldr	r3, [r4, #0]
   804e2:	60a3      	str	r3, [r4, #8]
   804e4:	e7e6      	b.n	804b4 <prvCopyDataToQueue+0xc>
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   804e6:	461a      	mov	r2, r3
   804e8:	68c0      	ldr	r0, [r0, #12]
   804ea:	4b08      	ldr	r3, [pc, #32]	; (8050c <prvCopyDataToQueue+0x64>)
   804ec:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   804ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
   804f0:	4252      	negs	r2, r2
   804f2:	68e3      	ldr	r3, [r4, #12]
   804f4:	4413      	add	r3, r2
   804f6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   804f8:	6821      	ldr	r1, [r4, #0]
   804fa:	428b      	cmp	r3, r1
   804fc:	d2da      	bcs.n	804b4 <prvCopyDataToQueue+0xc>
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   804fe:	6863      	ldr	r3, [r4, #4]
   80500:	441a      	add	r2, r3
   80502:	60e2      	str	r2, [r4, #12]
   80504:	e7d6      	b.n	804b4 <prvCopyDataToQueue+0xc>
   80506:	bf00      	nop
   80508:	000807ed 	.word	0x000807ed
   8050c:	00082011 	.word	0x00082011

00080510 <xQueueGenericSendFromISR>:
{
   80510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxQueue );
   80514:	b190      	cbz	r0, 8053c <xQueueGenericSendFromISR+0x2c>
   80516:	460e      	mov	r6, r1
   80518:	4615      	mov	r5, r2
   8051a:	4698      	mov	r8, r3
   8051c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8051e:	b189      	cbz	r1, 80544 <xQueueGenericSendFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80520:	4b1b      	ldr	r3, [pc, #108]	; (80590 <xQueueGenericSendFromISR+0x80>)
   80522:	4798      	blx	r3
   80524:	4607      	mov	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80526:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80528:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8052a:	429a      	cmp	r2, r3
   8052c:	d311      	bcc.n	80552 <xQueueGenericSendFromISR+0x42>
			xReturn = errQUEUE_FULL;
   8052e:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80530:	4638      	mov	r0, r7
   80532:	4b18      	ldr	r3, [pc, #96]	; (80594 <xQueueGenericSendFromISR+0x84>)
   80534:	4798      	blx	r3
}
   80536:	4620      	mov	r0, r4
   80538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( pxQueue );
   8053c:	4b14      	ldr	r3, [pc, #80]	; (80590 <xQueueGenericSendFromISR+0x80>)
   8053e:	4798      	blx	r3
   80540:	bf00      	nop
   80542:	e7fd      	b.n	80540 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80544:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80546:	2b00      	cmp	r3, #0
   80548:	d0ea      	beq.n	80520 <xQueueGenericSendFromISR+0x10>
   8054a:	4b11      	ldr	r3, [pc, #68]	; (80590 <xQueueGenericSendFromISR+0x80>)
   8054c:	4798      	blx	r3
   8054e:	bf00      	nop
   80550:	e7fd      	b.n	8054e <xQueueGenericSendFromISR+0x3e>
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80552:	4642      	mov	r2, r8
   80554:	4631      	mov	r1, r6
   80556:	4620      	mov	r0, r4
   80558:	4b0f      	ldr	r3, [pc, #60]	; (80598 <xQueueGenericSendFromISR+0x88>)
   8055a:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
   8055c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8055e:	f1b3 3fff 	cmp.w	r3, #4294967295
   80562:	d10a      	bne.n	8057a <xQueueGenericSendFromISR+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80564:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80566:	b16b      	cbz	r3, 80584 <xQueueGenericSendFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80568:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8056c:	4b0b      	ldr	r3, [pc, #44]	; (8059c <xQueueGenericSendFromISR+0x8c>)
   8056e:	4798      	blx	r3
   80570:	b150      	cbz	r0, 80588 <xQueueGenericSendFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
   80572:	b15d      	cbz	r5, 8058c <xQueueGenericSendFromISR+0x7c>
							*pxHigherPriorityTaskWoken = pdTRUE;
   80574:	2401      	movs	r4, #1
   80576:	602c      	str	r4, [r5, #0]
   80578:	e7da      	b.n	80530 <xQueueGenericSendFromISR+0x20>
				++( pxQueue->xTxLock );
   8057a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8057c:	3301      	adds	r3, #1
   8057e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
   80580:	2401      	movs	r4, #1
   80582:	e7d5      	b.n	80530 <xQueueGenericSendFromISR+0x20>
   80584:	2401      	movs	r4, #1
   80586:	e7d3      	b.n	80530 <xQueueGenericSendFromISR+0x20>
   80588:	2401      	movs	r4, #1
   8058a:	e7d1      	b.n	80530 <xQueueGenericSendFromISR+0x20>
   8058c:	2401      	movs	r4, #1
   8058e:	e7cf      	b.n	80530 <xQueueGenericSendFromISR+0x20>
   80590:	00080429 	.word	0x00080429
   80594:	00080439 	.word	0x00080439
   80598:	000804a9 	.word	0x000804a9
   8059c:	00080769 	.word	0x00080769

000805a0 <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   805a0:	4b3d      	ldr	r3, [pc, #244]	; (80698 <vTaskIncrementTick+0xf8>)
   805a2:	681b      	ldr	r3, [r3, #0]
   805a4:	2b00      	cmp	r3, #0
   805a6:	d16f      	bne.n	80688 <vTaskIncrementTick+0xe8>
{
   805a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		++xTickCount;
   805ac:	4b3b      	ldr	r3, [pc, #236]	; (8069c <vTaskIncrementTick+0xfc>)
   805ae:	681a      	ldr	r2, [r3, #0]
   805b0:	3201      	adds	r2, #1
   805b2:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   805b4:	681b      	ldr	r3, [r3, #0]
   805b6:	b9ab      	cbnz	r3, 805e4 <vTaskIncrementTick+0x44>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   805b8:	4b39      	ldr	r3, [pc, #228]	; (806a0 <vTaskIncrementTick+0x100>)
   805ba:	681b      	ldr	r3, [r3, #0]
   805bc:	681b      	ldr	r3, [r3, #0]
   805be:	2b00      	cmp	r3, #0
   805c0:	d128      	bne.n	80614 <vTaskIncrementTick+0x74>

			pxTemp = pxDelayedTaskList;
   805c2:	4b37      	ldr	r3, [pc, #220]	; (806a0 <vTaskIncrementTick+0x100>)
   805c4:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   805c6:	4a37      	ldr	r2, [pc, #220]	; (806a4 <vTaskIncrementTick+0x104>)
   805c8:	6810      	ldr	r0, [r2, #0]
   805ca:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   805cc:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   805ce:	4936      	ldr	r1, [pc, #216]	; (806a8 <vTaskIncrementTick+0x108>)
   805d0:	680a      	ldr	r2, [r1, #0]
   805d2:	3201      	adds	r2, #1
   805d4:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   805d6:	681b      	ldr	r3, [r3, #0]
   805d8:	681b      	ldr	r3, [r3, #0]
   805da:	b9fb      	cbnz	r3, 8061c <vTaskIncrementTick+0x7c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   805dc:	f04f 32ff 	mov.w	r2, #4294967295
   805e0:	4b32      	ldr	r3, [pc, #200]	; (806ac <vTaskIncrementTick+0x10c>)
   805e2:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   805e4:	4b2d      	ldr	r3, [pc, #180]	; (8069c <vTaskIncrementTick+0xfc>)
   805e6:	681a      	ldr	r2, [r3, #0]
   805e8:	4b30      	ldr	r3, [pc, #192]	; (806ac <vTaskIncrementTick+0x10c>)
   805ea:	681b      	ldr	r3, [r3, #0]
   805ec:	429a      	cmp	r2, r3
   805ee:	d350      	bcc.n	80692 <vTaskIncrementTick+0xf2>
   805f0:	4b2b      	ldr	r3, [pc, #172]	; (806a0 <vTaskIncrementTick+0x100>)
   805f2:	681b      	ldr	r3, [r3, #0]
   805f4:	681b      	ldr	r3, [r3, #0]
   805f6:	b1cb      	cbz	r3, 8062c <vTaskIncrementTick+0x8c>
   805f8:	4b29      	ldr	r3, [pc, #164]	; (806a0 <vTaskIncrementTick+0x100>)
   805fa:	681b      	ldr	r3, [r3, #0]
   805fc:	68db      	ldr	r3, [r3, #12]
   805fe:	68dc      	ldr	r4, [r3, #12]
   80600:	6863      	ldr	r3, [r4, #4]
   80602:	4a26      	ldr	r2, [pc, #152]	; (8069c <vTaskIncrementTick+0xfc>)
   80604:	6812      	ldr	r2, [r2, #0]
   80606:	4293      	cmp	r3, r2
   80608:	d816      	bhi.n	80638 <vTaskIncrementTick+0x98>
   8060a:	4e29      	ldr	r6, [pc, #164]	; (806b0 <vTaskIncrementTick+0x110>)
   8060c:	4f29      	ldr	r7, [pc, #164]	; (806b4 <vTaskIncrementTick+0x114>)
   8060e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 806c4 <vTaskIncrementTick+0x124>
   80612:	e02f      	b.n	80674 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80614:	4b28      	ldr	r3, [pc, #160]	; (806b8 <vTaskIncrementTick+0x118>)
   80616:	4798      	blx	r3
   80618:	bf00      	nop
   8061a:	e7fd      	b.n	80618 <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   8061c:	4b20      	ldr	r3, [pc, #128]	; (806a0 <vTaskIncrementTick+0x100>)
   8061e:	681b      	ldr	r3, [r3, #0]
   80620:	68db      	ldr	r3, [r3, #12]
   80622:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80624:	685a      	ldr	r2, [r3, #4]
   80626:	4b21      	ldr	r3, [pc, #132]	; (806ac <vTaskIncrementTick+0x10c>)
   80628:	601a      	str	r2, [r3, #0]
   8062a:	e7db      	b.n	805e4 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   8062c:	f04f 32ff 	mov.w	r2, #4294967295
   80630:	4b1e      	ldr	r3, [pc, #120]	; (806ac <vTaskIncrementTick+0x10c>)
   80632:	601a      	str	r2, [r3, #0]
   80634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80638:	4a1c      	ldr	r2, [pc, #112]	; (806ac <vTaskIncrementTick+0x10c>)
   8063a:	6013      	str	r3, [r2, #0]
   8063c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80640:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80642:	683b      	ldr	r3, [r7, #0]
   80644:	4298      	cmp	r0, r3
   80646:	bf88      	it	hi
   80648:	6038      	strhi	r0, [r7, #0]
   8064a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8064e:	4629      	mov	r1, r5
   80650:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   80654:	4b19      	ldr	r3, [pc, #100]	; (806bc <vTaskIncrementTick+0x11c>)
   80656:	4798      	blx	r3
   80658:	4b11      	ldr	r3, [pc, #68]	; (806a0 <vTaskIncrementTick+0x100>)
   8065a:	681b      	ldr	r3, [r3, #0]
   8065c:	681b      	ldr	r3, [r3, #0]
   8065e:	2b00      	cmp	r3, #0
   80660:	d0e4      	beq.n	8062c <vTaskIncrementTick+0x8c>
   80662:	4b0f      	ldr	r3, [pc, #60]	; (806a0 <vTaskIncrementTick+0x100>)
   80664:	681b      	ldr	r3, [r3, #0]
   80666:	68db      	ldr	r3, [r3, #12]
   80668:	68dc      	ldr	r4, [r3, #12]
   8066a:	6863      	ldr	r3, [r4, #4]
   8066c:	4a0b      	ldr	r2, [pc, #44]	; (8069c <vTaskIncrementTick+0xfc>)
   8066e:	6812      	ldr	r2, [r2, #0]
   80670:	4293      	cmp	r3, r2
   80672:	d8e1      	bhi.n	80638 <vTaskIncrementTick+0x98>
   80674:	1d25      	adds	r5, r4, #4
   80676:	4628      	mov	r0, r5
   80678:	47b0      	blx	r6
   8067a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8067c:	2b00      	cmp	r3, #0
   8067e:	d0df      	beq.n	80640 <vTaskIncrementTick+0xa0>
   80680:	f104 0018 	add.w	r0, r4, #24
   80684:	47b0      	blx	r6
   80686:	e7db      	b.n	80640 <vTaskIncrementTick+0xa0>
	}
	else
	{
		++uxMissedTicks;
   80688:	4a0d      	ldr	r2, [pc, #52]	; (806c0 <vTaskIncrementTick+0x120>)
   8068a:	6813      	ldr	r3, [r2, #0]
   8068c:	3301      	adds	r3, #1
   8068e:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
   80690:	4770      	bx	lr
   80692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80696:	bf00      	nop
   80698:	20001054 	.word	0x20001054
   8069c:	20001078 	.word	0x20001078
   806a0:	20000fe4 	.word	0x20000fe4
   806a4:	20000fe8 	.word	0x20000fe8
   806a8:	20001060 	.word	0x20001060
   806ac:	20000124 	.word	0x20000124
   806b0:	000803d1 	.word	0x000803d1
   806b4:	20001058 	.word	0x20001058
   806b8:	00080429 	.word	0x00080429
   806bc:	000803b5 	.word	0x000803b5
   806c0:	20001050 	.word	0x20001050
   806c4:	20000fec 	.word	0x20000fec

000806c8 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   806c8:	4b21      	ldr	r3, [pc, #132]	; (80750 <vTaskSwitchContext+0x88>)
   806ca:	681b      	ldr	r3, [r3, #0]
   806cc:	b9eb      	cbnz	r3, 8070a <vTaskSwitchContext+0x42>
{
   806ce:	b510      	push	{r4, lr}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   806d0:	4b20      	ldr	r3, [pc, #128]	; (80754 <vTaskSwitchContext+0x8c>)
   806d2:	681b      	ldr	r3, [r3, #0]
   806d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   806d8:	009b      	lsls	r3, r3, #2
   806da:	4a1f      	ldr	r2, [pc, #124]	; (80758 <vTaskSwitchContext+0x90>)
   806dc:	58d3      	ldr	r3, [r2, r3]
   806de:	b9c3      	cbnz	r3, 80712 <vTaskSwitchContext+0x4a>
   806e0:	4b1c      	ldr	r3, [pc, #112]	; (80754 <vTaskSwitchContext+0x8c>)
   806e2:	681b      	ldr	r3, [r3, #0]
   806e4:	b16b      	cbz	r3, 80702 <vTaskSwitchContext+0x3a>
   806e6:	4a1b      	ldr	r2, [pc, #108]	; (80754 <vTaskSwitchContext+0x8c>)
   806e8:	491b      	ldr	r1, [pc, #108]	; (80758 <vTaskSwitchContext+0x90>)
   806ea:	6813      	ldr	r3, [r2, #0]
   806ec:	3b01      	subs	r3, #1
   806ee:	6013      	str	r3, [r2, #0]
   806f0:	6813      	ldr	r3, [r2, #0]
   806f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   806f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   806fa:	b953      	cbnz	r3, 80712 <vTaskSwitchContext+0x4a>
   806fc:	6813      	ldr	r3, [r2, #0]
   806fe:	2b00      	cmp	r3, #0
   80700:	d1f3      	bne.n	806ea <vTaskSwitchContext+0x22>
   80702:	4b16      	ldr	r3, [pc, #88]	; (8075c <vTaskSwitchContext+0x94>)
   80704:	4798      	blx	r3
   80706:	bf00      	nop
   80708:	e7fd      	b.n	80706 <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   8070a:	2201      	movs	r2, #1
   8070c:	4b14      	ldr	r3, [pc, #80]	; (80760 <vTaskSwitchContext+0x98>)
   8070e:	601a      	str	r2, [r3, #0]
   80710:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   80712:	4b10      	ldr	r3, [pc, #64]	; (80754 <vTaskSwitchContext+0x8c>)
   80714:	681b      	ldr	r3, [r3, #0]
   80716:	4a10      	ldr	r2, [pc, #64]	; (80758 <vTaskSwitchContext+0x90>)
   80718:	0099      	lsls	r1, r3, #2
   8071a:	18c8      	adds	r0, r1, r3
   8071c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   80720:	6844      	ldr	r4, [r0, #4]
   80722:	6864      	ldr	r4, [r4, #4]
   80724:	6044      	str	r4, [r0, #4]
   80726:	4419      	add	r1, r3
   80728:	4602      	mov	r2, r0
   8072a:	3208      	adds	r2, #8
   8072c:	4294      	cmp	r4, r2
   8072e:	d009      	beq.n	80744 <vTaskSwitchContext+0x7c>
   80730:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80734:	4a08      	ldr	r2, [pc, #32]	; (80758 <vTaskSwitchContext+0x90>)
   80736:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8073a:	685b      	ldr	r3, [r3, #4]
   8073c:	68da      	ldr	r2, [r3, #12]
   8073e:	4b09      	ldr	r3, [pc, #36]	; (80764 <vTaskSwitchContext+0x9c>)
   80740:	601a      	str	r2, [r3, #0]
   80742:	bd10      	pop	{r4, pc}
   80744:	6860      	ldr	r0, [r4, #4]
   80746:	4a04      	ldr	r2, [pc, #16]	; (80758 <vTaskSwitchContext+0x90>)
   80748:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8074c:	6050      	str	r0, [r2, #4]
   8074e:	e7ef      	b.n	80730 <vTaskSwitchContext+0x68>
   80750:	20001054 	.word	0x20001054
   80754:	20001058 	.word	0x20001058
   80758:	20000fec 	.word	0x20000fec
   8075c:	00080429 	.word	0x00080429
   80760:	2000105c 	.word	0x2000105c
   80764:	20000fe0 	.word	0x20000fe0

00080768 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   80768:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8076a:	68c3      	ldr	r3, [r0, #12]
   8076c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8076e:	b31c      	cbz	r4, 807b8 <xTaskRemoveFromEventList+0x50>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   80770:	f104 0518 	add.w	r5, r4, #24
   80774:	4628      	mov	r0, r5
   80776:	4b15      	ldr	r3, [pc, #84]	; (807cc <xTaskRemoveFromEventList+0x64>)
   80778:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8077a:	4b15      	ldr	r3, [pc, #84]	; (807d0 <xTaskRemoveFromEventList+0x68>)
   8077c:	681b      	ldr	r3, [r3, #0]
   8077e:	b9fb      	cbnz	r3, 807c0 <xTaskRemoveFromEventList+0x58>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   80780:	1d25      	adds	r5, r4, #4
   80782:	4628      	mov	r0, r5
   80784:	4b11      	ldr	r3, [pc, #68]	; (807cc <xTaskRemoveFromEventList+0x64>)
   80786:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   80788:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8078a:	4b12      	ldr	r3, [pc, #72]	; (807d4 <xTaskRemoveFromEventList+0x6c>)
   8078c:	681b      	ldr	r3, [r3, #0]
   8078e:	4298      	cmp	r0, r3
   80790:	bf84      	itt	hi
   80792:	4b10      	ldrhi	r3, [pc, #64]	; (807d4 <xTaskRemoveFromEventList+0x6c>)
   80794:	6018      	strhi	r0, [r3, #0]
   80796:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8079a:	4629      	mov	r1, r5
   8079c:	4b0e      	ldr	r3, [pc, #56]	; (807d8 <xTaskRemoveFromEventList+0x70>)
   8079e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   807a2:	4b0e      	ldr	r3, [pc, #56]	; (807dc <xTaskRemoveFromEventList+0x74>)
   807a4:	4798      	blx	r3
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   807a6:	4b0e      	ldr	r3, [pc, #56]	; (807e0 <xTaskRemoveFromEventList+0x78>)
   807a8:	681b      	ldr	r3, [r3, #0]
   807aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   807ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   807ae:	4298      	cmp	r0, r3
   807b0:	bf34      	ite	cc
   807b2:	2000      	movcc	r0, #0
   807b4:	2001      	movcs	r0, #1
   807b6:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
   807b8:	4b0a      	ldr	r3, [pc, #40]	; (807e4 <xTaskRemoveFromEventList+0x7c>)
   807ba:	4798      	blx	r3
   807bc:	bf00      	nop
   807be:	e7fd      	b.n	807bc <xTaskRemoveFromEventList+0x54>
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   807c0:	4629      	mov	r1, r5
   807c2:	4809      	ldr	r0, [pc, #36]	; (807e8 <xTaskRemoveFromEventList+0x80>)
   807c4:	4b05      	ldr	r3, [pc, #20]	; (807dc <xTaskRemoveFromEventList+0x74>)
   807c6:	4798      	blx	r3
   807c8:	e7ed      	b.n	807a6 <xTaskRemoveFromEventList+0x3e>
   807ca:	bf00      	nop
   807cc:	000803d1 	.word	0x000803d1
   807d0:	20001054 	.word	0x20001054
   807d4:	20001058 	.word	0x20001058
   807d8:	20000fec 	.word	0x20000fec
   807dc:	000803b5 	.word	0x000803b5
   807e0:	20000fe0 	.word	0x20000fe0
   807e4:	00080429 	.word	0x00080429
   807e8:	20001064 	.word	0x20001064

000807ec <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   807ec:	b1e8      	cbz	r0, 8082a <vTaskPriorityDisinherit+0x3e>
	{
   807ee:	b538      	push	{r3, r4, r5, lr}
   807f0:	4604      	mov	r4, r0
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   807f2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   807f4:	6c82      	ldr	r2, [r0, #72]	; 0x48
   807f6:	4291      	cmp	r1, r2
   807f8:	d016      	beq.n	80828 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   807fa:	1d05      	adds	r5, r0, #4
   807fc:	4628      	mov	r0, r5
   807fe:	4b0b      	ldr	r3, [pc, #44]	; (8082c <vTaskPriorityDisinherit+0x40>)
   80800:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   80802:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   80804:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   80806:	f1c0 0305 	rsb	r3, r0, #5
   8080a:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   8080c:	4b08      	ldr	r3, [pc, #32]	; (80830 <vTaskPriorityDisinherit+0x44>)
   8080e:	681b      	ldr	r3, [r3, #0]
   80810:	4298      	cmp	r0, r3
   80812:	bf84      	itt	hi
   80814:	4b06      	ldrhi	r3, [pc, #24]	; (80830 <vTaskPriorityDisinherit+0x44>)
   80816:	6018      	strhi	r0, [r3, #0]
   80818:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8081c:	4629      	mov	r1, r5
   8081e:	4b05      	ldr	r3, [pc, #20]	; (80834 <vTaskPriorityDisinherit+0x48>)
   80820:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80824:	4b04      	ldr	r3, [pc, #16]	; (80838 <vTaskPriorityDisinherit+0x4c>)
   80826:	4798      	blx	r3
   80828:	bd38      	pop	{r3, r4, r5, pc}
   8082a:	4770      	bx	lr
   8082c:	000803d1 	.word	0x000803d1
   80830:	20001058 	.word	0x20001058
   80834:	20000fec 	.word	0x20000fec
   80838:	000803b5 	.word	0x000803b5

0008083c <CRC16MODBUSFRAME>:
unsigned int CRC16MODBUSFRAME (unsigned char *nData, unsigned int wLength)
{
	unsigned char  nTemp;
	unsigned int  wCRCWord = 0xFFFF;

	while (wLength--)
   8083c:	b189      	cbz	r1, 80862 <CRC16MODBUSFRAME+0x26>
{
   8083e:	b410      	push	{r4}
   80840:	1841      	adds	r1, r0, r1
	while (wLength--)
   80842:	f64f 72ff 	movw	r2, #65535	; 0xffff
	{
		nTemp = *nData++ ^ wCRCWord;
		wCRCWord >>= 8;
		wCRCWord ^= wCRCTable[nTemp];
   80846:	4c09      	ldr	r4, [pc, #36]	; (8086c <CRC16MODBUSFRAME+0x30>)
		nTemp = *nData++ ^ wCRCWord;
   80848:	f810 3b01 	ldrb.w	r3, [r0], #1
   8084c:	4053      	eors	r3, r2
		wCRCWord ^= wCRCTable[nTemp];
   8084e:	b2db      	uxtb	r3, r3
   80850:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   80854:	ea83 2212 	eor.w	r2, r3, r2, lsr #8
	while (wLength--)
   80858:	4281      	cmp	r1, r0
   8085a:	d1f5      	bne.n	80848 <CRC16MODBUSFRAME+0xc>
	}
	return wCRCWord;
}
   8085c:	4610      	mov	r0, r2
   8085e:	bc10      	pop	{r4}
   80860:	4770      	bx	lr
	unsigned int  wCRCWord = 0xFFFF;
   80862:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
   80866:	4610      	mov	r0, r2
   80868:	4770      	bx	lr
   8086a:	bf00      	nop
   8086c:	20000128 	.word	0x20000128

00080870 <ErrorLed>:
#include "../Headers/appli.h"

t_ptf32 pErrorFunc = ErrorLed;

uint32_t ErrorLed(uint32_t err, ...)
{
   80870:	b40f      	push	{r0, r1, r2, r3}
   80872:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		delay_ms(2000);
		gpio_set_pin_low(ERROR_LED);
		delay_ms(500);

		//Display tens of error code
		for(i=0; i<err/10; i++)
   80878:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80910 <ErrorLed+0xa0>
   8087c:	fba9 2903 	umull	r2, r9, r9, r3
   80880:	ea4f 09d9 	mov.w	r9, r9, lsr #3
			delay_ms(200);
		}
		delay_ms(500);

		//Display units of error code
		for(i=0; i<err%10; i++)
   80884:	eb09 0a89 	add.w	sl, r9, r9, lsl #2
   80888:	eba3 0a4a 	sub.w	sl, r3, sl, lsl #1
		gpio_set_pin_high(ERROR_LED);
   8088c:	2533      	movs	r5, #51	; 0x33
   8088e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80914 <ErrorLed+0xa4>
		delay_ms(2000);
   80892:	4c1a      	ldr	r4, [pc, #104]	; (808fc <ErrorLed+0x8c>)
		delay_ms(500);
   80894:	f8df b080 	ldr.w	fp, [pc, #128]	; 80918 <ErrorLed+0xa8>
   80898:	e001      	b.n	8089e <ErrorLed+0x2e>
			gpio_set_pin_high(ERROR_LED);
			delay_ms(200);
			gpio_set_pin_low(ERROR_LED);
			delay_ms(200);
		}
		delay_ms(1000);
   8089a:	4819      	ldr	r0, [pc, #100]	; (80900 <ErrorLed+0x90>)
   8089c:	47a0      	blx	r4
		gpio_set_pin_high(ERROR_LED);
   8089e:	4628      	mov	r0, r5
   808a0:	47c0      	blx	r8
		delay_ms(2000);
   808a2:	4818      	ldr	r0, [pc, #96]	; (80904 <ErrorLed+0x94>)
   808a4:	47a0      	blx	r4
		gpio_set_pin_low(ERROR_LED);
   808a6:	4628      	mov	r0, r5
   808a8:	4b17      	ldr	r3, [pc, #92]	; (80908 <ErrorLed+0x98>)
   808aa:	4798      	blx	r3
		delay_ms(500);
   808ac:	4658      	mov	r0, fp
   808ae:	47a0      	blx	r4
		for(i=0; i<err/10; i++)
   808b0:	f1b9 0f00 	cmp.w	r9, #0
   808b4:	d00d      	beq.n	808d2 <ErrorLed+0x62>
   808b6:	2600      	movs	r6, #0
			delay_ms(200);
   808b8:	4f14      	ldr	r7, [pc, #80]	; (8090c <ErrorLed+0x9c>)
			gpio_set_pin_high(ERROR_LED);
   808ba:	4628      	mov	r0, r5
   808bc:	47c0      	blx	r8
			delay_ms(200);
   808be:	4638      	mov	r0, r7
   808c0:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   808c2:	4628      	mov	r0, r5
   808c4:	4b10      	ldr	r3, [pc, #64]	; (80908 <ErrorLed+0x98>)
   808c6:	4798      	blx	r3
			delay_ms(200);
   808c8:	4638      	mov	r0, r7
   808ca:	47a0      	blx	r4
		for(i=0; i<err/10; i++)
   808cc:	3601      	adds	r6, #1
   808ce:	454e      	cmp	r6, r9
   808d0:	d1f3      	bne.n	808ba <ErrorLed+0x4a>
		delay_ms(500);
   808d2:	4658      	mov	r0, fp
   808d4:	47a0      	blx	r4
		for(i=0; i<err%10; i++)
   808d6:	f1ba 0f00 	cmp.w	sl, #0
   808da:	d0de      	beq.n	8089a <ErrorLed+0x2a>
   808dc:	2600      	movs	r6, #0
			delay_ms(200);
   808de:	4f0b      	ldr	r7, [pc, #44]	; (8090c <ErrorLed+0x9c>)
			gpio_set_pin_high(ERROR_LED);
   808e0:	4628      	mov	r0, r5
   808e2:	47c0      	blx	r8
			delay_ms(200);
   808e4:	4638      	mov	r0, r7
   808e6:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   808e8:	4628      	mov	r0, r5
   808ea:	4b07      	ldr	r3, [pc, #28]	; (80908 <ErrorLed+0x98>)
   808ec:	4798      	blx	r3
			delay_ms(200);
   808ee:	4638      	mov	r0, r7
   808f0:	47a0      	blx	r4
		for(i=0; i<err%10; i++)
   808f2:	3601      	adds	r6, #1
   808f4:	4556      	cmp	r6, sl
   808f6:	d1f3      	bne.n	808e0 <ErrorLed+0x70>
   808f8:	e7cf      	b.n	8089a <ErrorLed+0x2a>
   808fa:	bf00      	nop
   808fc:	20000001 	.word	0x20000001
   80900:	0068a1b7 	.word	0x0068a1b7
   80904:	00d1436e 	.word	0x00d1436e
   80908:	00081935 	.word	0x00081935
   8090c:	0014ed25 	.word	0x0014ed25
   80910:	cccccccd 	.word	0xcccccccd
   80914:	0008191b 	.word	0x0008191b
   80918:	003450dc 	.word	0x003450dc

0008091c <Lcd>:

#define ST_LCD_ON		0x0000001


uint32_t Lcd(uint32_t sc, ...)
{
   8091c:	b40f      	push	{r0, r1, r2, r3}
   8091e:	b570      	push	{r4, r5, r6, lr}
	switch(sc)
   80920:	9904      	ldr	r1, [sp, #16]
   80922:	1e4b      	subs	r3, r1, #1
   80924:	2b67      	cmp	r3, #103	; 0x67
   80926:	f200 826a 	bhi.w	80dfe <Lcd+0x4e2>
   8092a:	e8df f013 	tbh	[pc, r3, lsl #1]
   8092e:	010e      	.short	0x010e
   80930:	01680142 	.word	0x01680142
   80934:	01a0018e 	.word	0x01a0018e
   80938:	01b201a9 	.word	0x01b201a9
   8093c:	024201d3 	.word	0x024201d3
   80940:	02680255 	.word	0x02680255
   80944:	02680268 	.word	0x02680268
   80948:	02680268 	.word	0x02680268
   8094c:	02680268 	.word	0x02680268
   80950:	02680268 	.word	0x02680268
   80954:	02680268 	.word	0x02680268
   80958:	02680268 	.word	0x02680268
   8095c:	02680268 	.word	0x02680268
   80960:	02680268 	.word	0x02680268
   80964:	02680268 	.word	0x02680268
   80968:	02680268 	.word	0x02680268
   8096c:	02680268 	.word	0x02680268
   80970:	02680268 	.word	0x02680268
   80974:	02680268 	.word	0x02680268
   80978:	02680268 	.word	0x02680268
   8097c:	02680268 	.word	0x02680268
   80980:	02680268 	.word	0x02680268
   80984:	02680268 	.word	0x02680268
   80988:	02680268 	.word	0x02680268
   8098c:	02680268 	.word	0x02680268
   80990:	02680268 	.word	0x02680268
   80994:	02680268 	.word	0x02680268
   80998:	02680268 	.word	0x02680268
   8099c:	02680268 	.word	0x02680268
   809a0:	02680268 	.word	0x02680268
   809a4:	02680268 	.word	0x02680268
   809a8:	02680268 	.word	0x02680268
   809ac:	02680268 	.word	0x02680268
   809b0:	02680268 	.word	0x02680268
   809b4:	02680268 	.word	0x02680268
   809b8:	02680268 	.word	0x02680268
   809bc:	02680268 	.word	0x02680268
   809c0:	02680268 	.word	0x02680268
   809c4:	02680268 	.word	0x02680268
   809c8:	02680268 	.word	0x02680268
   809cc:	02680268 	.word	0x02680268
   809d0:	02680268 	.word	0x02680268
   809d4:	02680268 	.word	0x02680268
   809d8:	02680268 	.word	0x02680268
   809dc:	02680268 	.word	0x02680268
   809e0:	02680268 	.word	0x02680268
   809e4:	02680268 	.word	0x02680268
   809e8:	02680268 	.word	0x02680268
   809ec:	02680268 	.word	0x02680268
   809f0:	02680268 	.word	0x02680268
   809f4:	00c40068 	.word	0x00c40068
   809f8:	00ee0103 	.word	0x00ee0103
   809fc:	00e9      	.short	0x00e9
	{
	case LCD_NEW:
		Lcd(LCD_DEL);
   809fe:	2065      	movs	r0, #101	; 0x65
   80a00:	f7ff ff8c 	bl	8091c <Lcd>
		delay_ms(200);
   80a04:	48aa      	ldr	r0, [pc, #680]	; (80cb0 <Lcd+0x394>)
   80a06:	4cab      	ldr	r4, [pc, #684]	; (80cb4 <Lcd+0x398>)
   80a08:	47a0      	blx	r4
		_LcdSetDataLineOut();
   80a0a:	2009      	movs	r0, #9
   80a0c:	f7ff ff86 	bl	8091c <Lcd>
		gpio_configure_pin(LCD_E,			LCD_PIN_OUT_FLAGS);
   80a10:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80a14:	2004      	movs	r0, #4
   80a16:	4da8      	ldr	r5, [pc, #672]	; (80cb8 <Lcd+0x39c>)
   80a18:	47a8      	blx	r5
		gpio_configure_pin(LCD_RWB,			LCD_PIN_OUT_FLAGS);
   80a1a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80a1e:	2005      	movs	r0, #5
   80a20:	47a8      	blx	r5
		gpio_configure_pin(LCD_RS,			LCD_PIN_OUT_FLAGS);
   80a22:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80a26:	2006      	movs	r0, #6
   80a28:	47a8      	blx	r5
		gpio_configure_pin(LCD_BACKLIGHT,	LCD_PIN_OUT_FLAGS);
   80a2a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80a2e:	2007      	movs	r0, #7
   80a30:	47a8      	blx	r5

		gpio_set_pin_low(LCD_E);
   80a32:	2004      	movs	r0, #4
   80a34:	4da1      	ldr	r5, [pc, #644]	; (80cbc <Lcd+0x3a0>)
   80a36:	47a8      	blx	r5
		gpio_set_pin_low(LCD_RS);
   80a38:	2006      	movs	r0, #6
   80a3a:	47a8      	blx	r5
		gpio_set_pin_low(LCD_RWB);
   80a3c:	2005      	movs	r0, #5
   80a3e:	47a8      	blx	r5
		gpio_set_pin_high(LCD_BACKLIGHT);
   80a40:	2007      	movs	r0, #7
   80a42:	4b9f      	ldr	r3, [pc, #636]	; (80cc0 <Lcd+0x3a4>)
   80a44:	4798      	blx	r3

		delay_ms(300);
   80a46:	489f      	ldr	r0, [pc, #636]	; (80cc4 <Lcd+0x3a8>)
   80a48:	47a0      	blx	r4
		_LcdWriteHalf(0x30);
   80a4a:	2130      	movs	r1, #48	; 0x30
   80a4c:	2001      	movs	r0, #1
   80a4e:	f7ff ff65 	bl	8091c <Lcd>
		delay_ms(10);
   80a52:	4d9d      	ldr	r5, [pc, #628]	; (80cc8 <Lcd+0x3ac>)
   80a54:	4628      	mov	r0, r5
   80a56:	47a0      	blx	r4
		_LcdWriteHalf(0x30);
   80a58:	2130      	movs	r1, #48	; 0x30
   80a5a:	2001      	movs	r0, #1
   80a5c:	f7ff ff5e 	bl	8091c <Lcd>
		delay_ms(10);
   80a60:	4628      	mov	r0, r5
   80a62:	47a0      	blx	r4
		_LcdWriteHalf(0x30);
   80a64:	2130      	movs	r1, #48	; 0x30
   80a66:	2001      	movs	r0, #1
   80a68:	f7ff ff58 	bl	8091c <Lcd>
		delay_ms(10);
   80a6c:	4628      	mov	r0, r5
   80a6e:	47a0      	blx	r4
		_LcdWriteHalf(0x20);
   80a70:	2120      	movs	r1, #32
   80a72:	2001      	movs	r0, #1
   80a74:	f7ff ff52 	bl	8091c <Lcd>
		delay_ms(10);
   80a78:	4628      	mov	r0, r5
   80a7a:	47a0      	blx	r4
		_LcdWriteInst(0x28);	//SET FUNCTION : 4 bits interface/2 line display/5x7 dots
   80a7c:	2128      	movs	r1, #40	; 0x28
   80a7e:	2002      	movs	r0, #2
   80a80:	f7ff ff4c 	bl	8091c <Lcd>
		_LcdWriteInst(0x08);	//DISPLAY OFF
   80a84:	2108      	movs	r1, #8
   80a86:	2002      	movs	r0, #2
   80a88:	f7ff ff48 	bl	8091c <Lcd>
		_LcdWriteInst(0x01);	//DISPLAY CLEAR
   80a8c:	2101      	movs	r1, #1
   80a8e:	2002      	movs	r0, #2
   80a90:	f7ff ff44 	bl	8091c <Lcd>
		_LcdWriteInst(0x06);	//ENTRY MODE SET : Cursor Increase/Display is not shift
   80a94:	2106      	movs	r1, #6
   80a96:	2002      	movs	r0, #2
   80a98:	f7ff ff40 	bl	8091c <Lcd>
		_LcdWriteInst(0x0C);	//DISPLAY ON/CURSOR OFF
   80a9c:	210c      	movs	r1, #12
   80a9e:	2002      	movs	r0, #2
   80aa0:	f7ff ff3c 	bl	8091c <Lcd>
		
		//_LcdWriteInst(0x01);	//DISPLAY CLEAR
		//_LcdWriteInst(0x02);	//RETURN HOME
		
		lcd.status = ST_LCD_ON;
   80aa4:	2201      	movs	r2, #1
   80aa6:	4b89      	ldr	r3, [pc, #548]	; (80ccc <Lcd+0x3b0>)
   80aa8:	601a      	str	r2, [r3, #0]

	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERR_LCD_SWITCH_BAD_SC,sc);
	}
	return 0;
   80aaa:	2400      	movs	r4, #0
   80aac:	4620      	mov	r0, r4
   80aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   80ab2:	b004      	add	sp, #16
   80ab4:	4770      	bx	lr
		_LcdWriteInst(0x08);	//DISPLAY OFF
   80ab6:	2108      	movs	r1, #8
   80ab8:	2002      	movs	r0, #2
   80aba:	f7ff ff2f 	bl	8091c <Lcd>
		_LcdSetDataLineIn();
   80abe:	200a      	movs	r0, #10
   80ac0:	f7ff ff2c 	bl	8091c <Lcd>
		gpio_configure_pin(LCD_E,			LCD_PIN_OUT_FLAGS);
   80ac4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80ac8:	2004      	movs	r0, #4
   80aca:	4c7b      	ldr	r4, [pc, #492]	; (80cb8 <Lcd+0x39c>)
   80acc:	47a0      	blx	r4
		gpio_configure_pin(LCD_RWB,			LCD_PIN_OUT_FLAGS);
   80ace:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80ad2:	2005      	movs	r0, #5
   80ad4:	47a0      	blx	r4
		gpio_configure_pin(LCD_RS,			LCD_PIN_OUT_FLAGS);
   80ad6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80ada:	2006      	movs	r0, #6
   80adc:	47a0      	blx	r4
		gpio_configure_pin(LCD_BACKLIGHT,	LCD_PIN_OUT_FLAGS);
   80ade:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80ae2:	2007      	movs	r0, #7
   80ae4:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   80ae6:	2004      	movs	r0, #4
   80ae8:	4c74      	ldr	r4, [pc, #464]	; (80cbc <Lcd+0x3a0>)
   80aea:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RS);
   80aec:	2006      	movs	r0, #6
   80aee:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RWB);
   80af0:	2005      	movs	r0, #5
   80af2:	47a0      	blx	r4
		gpio_set_pin_low(LCD_BACKLIGHT);
   80af4:	2007      	movs	r0, #7
   80af6:	47a0      	blx	r4
		lcd.status=0;
   80af8:	2400      	movs	r4, #0
   80afa:	4b74      	ldr	r3, [pc, #464]	; (80ccc <Lcd+0x3b0>)
   80afc:	601c      	str	r4, [r3, #0]
		break;
   80afe:	e7d5      	b.n	80aac <Lcd+0x190>
		return (uint32_t)(mIsBitsSet(lcd.status,ST_LCD_ON));
   80b00:	4b72      	ldr	r3, [pc, #456]	; (80ccc <Lcd+0x3b0>)
   80b02:	681c      	ldr	r4, [r3, #0]
   80b04:	f004 0401 	and.w	r4, r4, #1
   80b08:	e7d0      	b.n	80aac <Lcd+0x190>
		_LcdSetCursor(_line,_col);
   80b0a:	9a07      	ldr	r2, [sp, #28]
   80b0c:	9906      	ldr	r1, [sp, #24]
   80b0e:	2007      	movs	r0, #7
   80b10:	f7ff ff04 	bl	8091c <Lcd>
		while(*(char*)_str)
   80b14:	9c05      	ldr	r4, [sp, #20]
   80b16:	7821      	ldrb	r1, [r4, #0]
   80b18:	2900      	cmp	r1, #0
   80b1a:	f000 8176 	beq.w	80e0a <Lcd+0x4ee>
			_LcdWriteData(*(char*)_str++);
   80b1e:	2503      	movs	r5, #3
   80b20:	3401      	adds	r4, #1
   80b22:	9405      	str	r4, [sp, #20]
   80b24:	4628      	mov	r0, r5
   80b26:	f7ff fef9 	bl	8091c <Lcd>
		while(*(char*)_str)
   80b2a:	7821      	ldrb	r1, [r4, #0]
   80b2c:	2900      	cmp	r1, #0
   80b2e:	d1f7      	bne.n	80b20 <Lcd+0x204>
	return 0;
   80b30:	2400      	movs	r4, #0
   80b32:	e7bb      	b.n	80aac <Lcd+0x190>
		if(_onOff)
   80b34:	9c05      	ldr	r4, [sp, #20]
   80b36:	b124      	cbz	r4, 80b42 <Lcd+0x226>
			gpio_set_pin_high(LCD_BACKLIGHT);
   80b38:	2007      	movs	r0, #7
   80b3a:	4b61      	ldr	r3, [pc, #388]	; (80cc0 <Lcd+0x3a4>)
   80b3c:	4798      	blx	r3
	return 0;
   80b3e:	2400      	movs	r4, #0
   80b40:	e7b4      	b.n	80aac <Lcd+0x190>
			gpio_set_pin_low(LCD_BACKLIGHT);
   80b42:	2007      	movs	r0, #7
   80b44:	4b5d      	ldr	r3, [pc, #372]	; (80cbc <Lcd+0x3a0>)
   80b46:	4798      	blx	r3
   80b48:	e7b0      	b.n	80aac <Lcd+0x190>
		_LcdSetDataLineOut();
   80b4a:	2009      	movs	r0, #9
   80b4c:	f7ff fee6 	bl	8091c <Lcd>
		gpio_set_pin_low(LCD_RWB);
   80b50:	2005      	movs	r0, #5
   80b52:	4b5a      	ldr	r3, [pc, #360]	; (80cbc <Lcd+0x3a0>)
   80b54:	4798      	blx	r3
		_LcdEup();
   80b56:	2005      	movs	r0, #5
   80b58:	f7ff fee0 	bl	8091c <Lcd>
		(_half&0x80)?gpio_set_pin_high(LCD_DB7):gpio_set_pin_low(LCD_DB7);
   80b5c:	9c05      	ldr	r4, [sp, #20]
   80b5e:	f014 0f80 	tst.w	r4, #128	; 0x80
   80b62:	f04f 0003 	mov.w	r0, #3
   80b66:	bf14      	ite	ne
   80b68:	4b55      	ldrne	r3, [pc, #340]	; (80cc0 <Lcd+0x3a4>)
   80b6a:	4b54      	ldreq	r3, [pc, #336]	; (80cbc <Lcd+0x3a0>)
   80b6c:	4798      	blx	r3
		(_half&0x40)?gpio_set_pin_high(LCD_DB6):gpio_set_pin_low(LCD_DB6);
   80b6e:	b2e4      	uxtb	r4, r4
   80b70:	f014 0f40 	tst.w	r4, #64	; 0x40
   80b74:	f04f 0002 	mov.w	r0, #2
   80b78:	bf14      	ite	ne
   80b7a:	4b51      	ldrne	r3, [pc, #324]	; (80cc0 <Lcd+0x3a4>)
   80b7c:	4b4f      	ldreq	r3, [pc, #316]	; (80cbc <Lcd+0x3a0>)
   80b7e:	4798      	blx	r3
		(_half&0x20)?gpio_set_pin_high(LCD_DB5):gpio_set_pin_low(LCD_DB5);
   80b80:	f014 0f20 	tst.w	r4, #32
   80b84:	f04f 0001 	mov.w	r0, #1
   80b88:	bf14      	ite	ne
   80b8a:	4b4d      	ldrne	r3, [pc, #308]	; (80cc0 <Lcd+0x3a4>)
   80b8c:	4b4b      	ldreq	r3, [pc, #300]	; (80cbc <Lcd+0x3a0>)
   80b8e:	4798      	blx	r3
		(_half&0x10)?gpio_set_pin_high(LCD_DB4):gpio_set_pin_low(LCD_DB4);
   80b90:	f014 0f10 	tst.w	r4, #16
   80b94:	f04f 0000 	mov.w	r0, #0
   80b98:	bf14      	ite	ne
   80b9a:	4b49      	ldrne	r3, [pc, #292]	; (80cc0 <Lcd+0x3a4>)
   80b9c:	4b47      	ldreq	r3, [pc, #284]	; (80cbc <Lcd+0x3a0>)
   80b9e:	4798      	blx	r3
		delay_us(500);
   80ba0:	f640 5065 	movw	r0, #3429	; 0xd65
   80ba4:	4b43      	ldr	r3, [pc, #268]	; (80cb4 <Lcd+0x398>)
   80ba6:	4798      	blx	r3
		_LcdEdown();
   80ba8:	2006      	movs	r0, #6
   80baa:	f7ff feb7 	bl	8091c <Lcd>
	return 0;
   80bae:	2400      	movs	r4, #0
		break;
   80bb0:	e77c      	b.n	80aac <Lcd+0x190>
		_try=5;
   80bb2:	2305      	movs	r3, #5
   80bb4:	9304      	str	r3, [sp, #16]
		while(_LcdIsBusy()&&_try)
   80bb6:	2408      	movs	r4, #8
			delay_us(500);
   80bb8:	f640 5665 	movw	r6, #3429	; 0xd65
   80bbc:	4d3d      	ldr	r5, [pc, #244]	; (80cb4 <Lcd+0x398>)
		while(_LcdIsBusy()&&_try)
   80bbe:	4620      	mov	r0, r4
   80bc0:	f7ff feac 	bl	8091c <Lcd>
   80bc4:	b148      	cbz	r0, 80bda <Lcd+0x2be>
   80bc6:	9b04      	ldr	r3, [sp, #16]
   80bc8:	b13b      	cbz	r3, 80bda <Lcd+0x2be>
			if(!--_try)
   80bca:	3b01      	subs	r3, #1
   80bcc:	9304      	str	r3, [sp, #16]
   80bce:	2b00      	cmp	r3, #0
   80bd0:	f000 811d 	beq.w	80e0e <Lcd+0x4f2>
			delay_us(500);
   80bd4:	4630      	mov	r0, r6
   80bd6:	47a8      	blx	r5
   80bd8:	e7f1      	b.n	80bbe <Lcd+0x2a2>
		gpio_set_pin_low(LCD_RS);
   80bda:	2006      	movs	r0, #6
   80bdc:	4d37      	ldr	r5, [pc, #220]	; (80cbc <Lcd+0x3a0>)
   80bde:	47a8      	blx	r5
		_LcdWriteHalf(_inst);
   80be0:	9c05      	ldr	r4, [sp, #20]
   80be2:	b2e1      	uxtb	r1, r4
   80be4:	2001      	movs	r0, #1
   80be6:	f7ff fe99 	bl	8091c <Lcd>
		gpio_set_pin_low(LCD_RS);
   80bea:	2006      	movs	r0, #6
   80bec:	47a8      	blx	r5
		_LcdWriteHalf(_inst<<4);
   80bee:	0121      	lsls	r1, r4, #4
   80bf0:	f401 617f 	and.w	r1, r1, #4080	; 0xff0
   80bf4:	2001      	movs	r0, #1
   80bf6:	f7ff fe91 	bl	8091c <Lcd>
	return 0;
   80bfa:	2400      	movs	r4, #0
		break;
   80bfc:	e756      	b.n	80aac <Lcd+0x190>
		_try=5;
   80bfe:	2305      	movs	r3, #5
   80c00:	9304      	str	r3, [sp, #16]
		while(_LcdIsBusy()&&_try)
   80c02:	2408      	movs	r4, #8
			delay_us(500);
   80c04:	f640 5665 	movw	r6, #3429	; 0xd65
   80c08:	4d2a      	ldr	r5, [pc, #168]	; (80cb4 <Lcd+0x398>)
		while(_LcdIsBusy()&&_try)
   80c0a:	4620      	mov	r0, r4
   80c0c:	f7ff fe86 	bl	8091c <Lcd>
   80c10:	b148      	cbz	r0, 80c26 <Lcd+0x30a>
   80c12:	9b04      	ldr	r3, [sp, #16]
   80c14:	b13b      	cbz	r3, 80c26 <Lcd+0x30a>
			if(!--_try)
   80c16:	3b01      	subs	r3, #1
   80c18:	9304      	str	r3, [sp, #16]
   80c1a:	2b00      	cmp	r3, #0
   80c1c:	f000 80fa 	beq.w	80e14 <Lcd+0x4f8>
			delay_us(500);
   80c20:	4630      	mov	r0, r6
   80c22:	47a8      	blx	r5
   80c24:	e7f1      	b.n	80c0a <Lcd+0x2ee>
		gpio_set_pin_high(LCD_RS);
   80c26:	2006      	movs	r0, #6
   80c28:	4d25      	ldr	r5, [pc, #148]	; (80cc0 <Lcd+0x3a4>)
   80c2a:	47a8      	blx	r5
		_LcdWriteHalf(_data);
   80c2c:	9c05      	ldr	r4, [sp, #20]
   80c2e:	b2e1      	uxtb	r1, r4
   80c30:	2001      	movs	r0, #1
   80c32:	f7ff fe73 	bl	8091c <Lcd>
		gpio_set_pin_high(LCD_RS);
   80c36:	2006      	movs	r0, #6
   80c38:	47a8      	blx	r5
		_LcdWriteHalf(_data<<4);
   80c3a:	0121      	lsls	r1, r4, #4
   80c3c:	f401 617f 	and.w	r1, r1, #4080	; 0xff0
   80c40:	2001      	movs	r0, #1
   80c42:	f7ff fe6b 	bl	8091c <Lcd>
	return 0;
   80c46:	2400      	movs	r4, #0
		break;
   80c48:	e730      	b.n	80aac <Lcd+0x190>
		delay_us(500);
   80c4a:	f640 5065 	movw	r0, #3429	; 0xd65
   80c4e:	4c19      	ldr	r4, [pc, #100]	; (80cb4 <Lcd+0x398>)
   80c50:	47a0      	blx	r4
		gpio_set_pin_high(LCD_E);
   80c52:	2004      	movs	r0, #4
   80c54:	4b1a      	ldr	r3, [pc, #104]	; (80cc0 <Lcd+0x3a4>)
   80c56:	4798      	blx	r3
		delay_us(500);
   80c58:	f640 5065 	movw	r0, #3429	; 0xd65
   80c5c:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   80c5e:	2004      	movs	r0, #4
   80c60:	4b16      	ldr	r3, [pc, #88]	; (80cbc <Lcd+0x3a0>)
   80c62:	4798      	blx	r3
		delay_us(500);
   80c64:	f640 5065 	movw	r0, #3429	; 0xd65
   80c68:	47a0      	blx	r4
	return 0;
   80c6a:	2400      	movs	r4, #0
		break;
   80c6c:	e71e      	b.n	80aac <Lcd+0x190>
		delay_us(1500);
   80c6e:	f642 002e 	movw	r0, #10286	; 0x282e
   80c72:	4b10      	ldr	r3, [pc, #64]	; (80cb4 <Lcd+0x398>)
   80c74:	4798      	blx	r3
		gpio_set_pin_high(LCD_E);
   80c76:	2004      	movs	r0, #4
   80c78:	4b11      	ldr	r3, [pc, #68]	; (80cc0 <Lcd+0x3a4>)
   80c7a:	4798      	blx	r3
	return 0;
   80c7c:	2400      	movs	r4, #0
		break;
   80c7e:	e715      	b.n	80aac <Lcd+0x190>
		gpio_set_pin_low(LCD_E);
   80c80:	2004      	movs	r0, #4
   80c82:	4b0e      	ldr	r3, [pc, #56]	; (80cbc <Lcd+0x3a0>)
   80c84:	4798      	blx	r3
		delay_us(1500);
   80c86:	f642 002e 	movw	r0, #10286	; 0x282e
   80c8a:	4b0a      	ldr	r3, [pc, #40]	; (80cb4 <Lcd+0x398>)
   80c8c:	4798      	blx	r3
	return 0;
   80c8e:	2400      	movs	r4, #0
		break;
   80c90:	e70c      	b.n	80aac <Lcd+0x190>
		_LcdWriteInst((line2addr[_nLine&0x03]+_nCol)|0x80);
   80c92:	9b05      	ldr	r3, [sp, #20]
   80c94:	f003 0303 	and.w	r3, r3, #3
   80c98:	4a0d      	ldr	r2, [pc, #52]	; (80cd0 <Lcd+0x3b4>)
   80c9a:	5cd1      	ldrb	r1, [r2, r3]
   80c9c:	9b06      	ldr	r3, [sp, #24]
   80c9e:	4419      	add	r1, r3
   80ca0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   80ca4:	2002      	movs	r0, #2
   80ca6:	f7ff fe39 	bl	8091c <Lcd>
	return 0;
   80caa:	2400      	movs	r4, #0
		break;
   80cac:	e6fe      	b.n	80aac <Lcd+0x190>
   80cae:	bf00      	nop
   80cb0:	0014ed25 	.word	0x0014ed25
   80cb4:	20000001 	.word	0x20000001
   80cb8:	00081971 	.word	0x00081971
   80cbc:	00081935 	.word	0x00081935
   80cc0:	0008191b 	.word	0x0008191b
   80cc4:	001f63b7 	.word	0x001f63b7
   80cc8:	00010bdc 	.word	0x00010bdc
   80ccc:	200010bc 	.word	0x200010bc
   80cd0:	000868e4 	.word	0x000868e4
		_LcdSetDataLineIn();
   80cd4:	200a      	movs	r0, #10
   80cd6:	f7ff fe21 	bl	8091c <Lcd>
		gpio_set_pin_low(LCD_RS);
   80cda:	2006      	movs	r0, #6
   80cdc:	4b4f      	ldr	r3, [pc, #316]	; (80e1c <Lcd+0x500>)
   80cde:	4798      	blx	r3
		gpio_set_pin_high(LCD_RWB);
   80ce0:	2005      	movs	r0, #5
   80ce2:	4d4f      	ldr	r5, [pc, #316]	; (80e20 <Lcd+0x504>)
   80ce4:	47a8      	blx	r5
		delay_us(50);
   80ce6:	f240 1057 	movw	r0, #343	; 0x157
   80cea:	4c4e      	ldr	r4, [pc, #312]	; (80e24 <Lcd+0x508>)
   80cec:	47a0      	blx	r4
		gpio_set_pin_high(LCD_E);
   80cee:	2004      	movs	r0, #4
   80cf0:	47a8      	blx	r5
		delay_us(50);
   80cf2:	f240 1057 	movw	r0, #343	; 0x157
   80cf6:	47a0      	blx	r4
		_lcdStatus = (gpio_pin_is_high(LCD_DB7)<<7)|(gpio_pin_is_high(LCD_DB6)<<6)|(gpio_pin_is_high(LCD_DB5)<<5)|(gpio_pin_is_high(LCD_DB4)<<4);
   80cf8:	2003      	movs	r0, #3
   80cfa:	4b4b      	ldr	r3, [pc, #300]	; (80e28 <Lcd+0x50c>)
   80cfc:	4798      	blx	r3
   80cfe:	2800      	cmp	r0, #0
   80d00:	bf14      	ite	ne
   80d02:	2580      	movne	r5, #128	; 0x80
   80d04:	2500      	moveq	r5, #0
   80d06:	2002      	movs	r0, #2
   80d08:	4b47      	ldr	r3, [pc, #284]	; (80e28 <Lcd+0x50c>)
   80d0a:	4798      	blx	r3
   80d0c:	2800      	cmp	r0, #0
   80d0e:	bf14      	ite	ne
   80d10:	2440      	movne	r4, #64	; 0x40
   80d12:	2400      	moveq	r4, #0
   80d14:	4325      	orrs	r5, r4
   80d16:	2001      	movs	r0, #1
   80d18:	4b43      	ldr	r3, [pc, #268]	; (80e28 <Lcd+0x50c>)
   80d1a:	4798      	blx	r3
   80d1c:	2800      	cmp	r0, #0
   80d1e:	bf14      	ite	ne
   80d20:	2420      	movne	r4, #32
   80d22:	2400      	moveq	r4, #0
   80d24:	432c      	orrs	r4, r5
   80d26:	2000      	movs	r0, #0
   80d28:	4b3f      	ldr	r3, [pc, #252]	; (80e28 <Lcd+0x50c>)
   80d2a:	4798      	blx	r3
   80d2c:	2800      	cmp	r0, #0
   80d2e:	bf14      	ite	ne
   80d30:	2510      	movne	r5, #16
   80d32:	2500      	moveq	r5, #0
   80d34:	4325      	orrs	r5, r4
		delay_us(50);
   80d36:	f240 1057 	movw	r0, #343	; 0x157
   80d3a:	4c3a      	ldr	r4, [pc, #232]	; (80e24 <Lcd+0x508>)
   80d3c:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   80d3e:	2004      	movs	r0, #4
   80d40:	4b36      	ldr	r3, [pc, #216]	; (80e1c <Lcd+0x500>)
   80d42:	4798      	blx	r3
		delay_us(50);
   80d44:	f240 1057 	movw	r0, #343	; 0x157
   80d48:	47a0      	blx	r4
		gpio_set_pin_high(LCD_E);
   80d4a:	2004      	movs	r0, #4
   80d4c:	4b34      	ldr	r3, [pc, #208]	; (80e20 <Lcd+0x504>)
   80d4e:	4798      	blx	r3
		delay_us(50);
   80d50:	f240 1057 	movw	r0, #343	; 0x157
   80d54:	47a0      	blx	r4
		_lcdStatus |= (gpio_pin_is_high(LCD_DB7)<<3)|(gpio_pin_is_high(LCD_DB6)<<2)|(gpio_pin_is_high(LCD_DB5)<<1)|(gpio_pin_is_high(LCD_DB4)<<0);
   80d56:	2003      	movs	r0, #3
   80d58:	4b33      	ldr	r3, [pc, #204]	; (80e28 <Lcd+0x50c>)
   80d5a:	4798      	blx	r3
   80d5c:	2800      	cmp	r0, #0
   80d5e:	bf14      	ite	ne
   80d60:	2408      	movne	r4, #8
   80d62:	2400      	moveq	r4, #0
   80d64:	2002      	movs	r0, #2
   80d66:	4b30      	ldr	r3, [pc, #192]	; (80e28 <Lcd+0x50c>)
   80d68:	4798      	blx	r3
   80d6a:	2800      	cmp	r0, #0
   80d6c:	bf14      	ite	ne
   80d6e:	2604      	movne	r6, #4
   80d70:	2600      	moveq	r6, #0
   80d72:	4326      	orrs	r6, r4
   80d74:	2001      	movs	r0, #1
   80d76:	4b2c      	ldr	r3, [pc, #176]	; (80e28 <Lcd+0x50c>)
   80d78:	4798      	blx	r3
   80d7a:	2800      	cmp	r0, #0
   80d7c:	bf14      	ite	ne
   80d7e:	2402      	movne	r4, #2
   80d80:	2400      	moveq	r4, #0
   80d82:	4334      	orrs	r4, r6
   80d84:	2000      	movs	r0, #0
   80d86:	4b28      	ldr	r3, [pc, #160]	; (80e28 <Lcd+0x50c>)
   80d88:	4798      	blx	r3
   80d8a:	2800      	cmp	r0, #0
   80d8c:	bf18      	it	ne
   80d8e:	f044 0401 	orrne.w	r4, r4, #1
   80d92:	432c      	orrs	r4, r5
		delay_us(50);
   80d94:	f240 1057 	movw	r0, #343	; 0x157
   80d98:	4d22      	ldr	r5, [pc, #136]	; (80e24 <Lcd+0x508>)
   80d9a:	47a8      	blx	r5
		gpio_set_pin_low(LCD_E);
   80d9c:	2004      	movs	r0, #4
   80d9e:	4b1f      	ldr	r3, [pc, #124]	; (80e1c <Lcd+0x500>)
   80da0:	4798      	blx	r3
		delay_us(50);
   80da2:	f240 1057 	movw	r0, #343	; 0x157
   80da6:	47a8      	blx	r5
		_LcdSetDataLineOut();
   80da8:	2009      	movs	r0, #9
   80daa:	f7ff fdb7 	bl	8091c <Lcd>
		return (uint32_t)((_lcdStatus&0x80)==0x80);
   80dae:	09e4      	lsrs	r4, r4, #7
   80db0:	e67c      	b.n	80aac <Lcd+0x190>
		gpio_configure_pin(LCD_DB4,			LCD_PIN_OUT_FLAGS);
   80db2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80db6:	2000      	movs	r0, #0
   80db8:	4c1c      	ldr	r4, [pc, #112]	; (80e2c <Lcd+0x510>)
   80dba:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB5,			LCD_PIN_OUT_FLAGS);
   80dbc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80dc0:	2001      	movs	r0, #1
   80dc2:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB6,			LCD_PIN_OUT_FLAGS);
   80dc4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80dc8:	2002      	movs	r0, #2
   80dca:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB7,			LCD_PIN_OUT_FLAGS);
   80dcc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80dd0:	2003      	movs	r0, #3
   80dd2:	47a0      	blx	r4
	return 0;
   80dd4:	2400      	movs	r4, #0
		break;
   80dd6:	e669      	b.n	80aac <Lcd+0x190>
		gpio_configure_pin(LCD_DB4,			LCD_PIN_IN_FLAGS);
   80dd8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80ddc:	2000      	movs	r0, #0
   80dde:	4c13      	ldr	r4, [pc, #76]	; (80e2c <Lcd+0x510>)
   80de0:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB5,			LCD_PIN_IN_FLAGS);
   80de2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80de6:	2001      	movs	r0, #1
   80de8:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB6,			LCD_PIN_IN_FLAGS);
   80dea:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80dee:	2002      	movs	r0, #2
   80df0:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB7,			LCD_PIN_IN_FLAGS);
   80df2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80df6:	2003      	movs	r0, #3
   80df8:	47a0      	blx	r4
	return 0;
   80dfa:	2400      	movs	r4, #0
		break;
   80dfc:	e656      	b.n	80aac <Lcd+0x190>
		Error(ERR_LCD_SWITCH_BAD_SC,sc);
   80dfe:	4b0c      	ldr	r3, [pc, #48]	; (80e30 <Lcd+0x514>)
   80e00:	681b      	ldr	r3, [r3, #0]
   80e02:	2014      	movs	r0, #20
   80e04:	4798      	blx	r3
	return 0;
   80e06:	2400      	movs	r4, #0
   80e08:	e650      	b.n	80aac <Lcd+0x190>
   80e0a:	2400      	movs	r4, #0
   80e0c:	e64e      	b.n	80aac <Lcd+0x190>
				return -1;
   80e0e:	f04f 34ff 	mov.w	r4, #4294967295
   80e12:	e64b      	b.n	80aac <Lcd+0x190>
				return -1;
   80e14:	f04f 34ff 	mov.w	r4, #4294967295
   80e18:	e648      	b.n	80aac <Lcd+0x190>
   80e1a:	bf00      	nop
   80e1c:	00081935 	.word	0x00081935
   80e20:	0008191b 	.word	0x0008191b
   80e24:	20000001 	.word	0x20000001
   80e28:	000818ff 	.word	0x000818ff
   80e2c:	00081971 	.word	0x00081971
   80e30:	20000528 	.word	0x20000528

00080e34 <RTC_Handler>:
	return 0;
}


void RTC_Handler(void )
{
   80e34:	4770      	bx	lr
	...

00080e38 <__RTCdayByDate>:
uint8_t __RTCdayByDate(uint32_t date, uint32_t month, uint32_t centYear)
{
	uint8_t  D; //Day of the week
	#define y   centYear
	//Mike Keith algorithme ----------------------------------------------------------------//
	if(month>=3)
   80e38:	2902      	cmp	r1, #2
   80e3a:	d824      	bhi.n	80e86 <__RTCdayByDate+0x4e>
	{
		D = ( ((uint16_t)month*23)/9 + date + 4 + y + y/4 - y/100 + y/400 - 2 ) % 7 + 1;
	}
	else
	{
		D = ( ((uint16_t)month*23)/9 + date + 4 + y + (y-1)/4 - (y-1)/100 + (y-1)/400 ) % 7 + 1;
   80e3c:	1e53      	subs	r3, r2, #1
   80e3e:	3204      	adds	r2, #4
   80e40:	4410      	add	r0, r2
   80e42:	eb00 0093 	add.w	r0, r0, r3, lsr #2
   80e46:	4a22      	ldr	r2, [pc, #136]	; (80ed0 <__RTCdayByDate+0x98>)
   80e48:	fba2 2303 	umull	r2, r3, r2, r3
   80e4c:	eb00 10d3 	add.w	r0, r0, r3, lsr #7
   80e50:	eba0 1053 	sub.w	r0, r0, r3, lsr #5
   80e54:	b289      	uxth	r1, r1
   80e56:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   80e5a:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
   80e5e:	4b1d      	ldr	r3, [pc, #116]	; (80ed4 <__RTCdayByDate+0x9c>)
   80e60:	fb83 2301 	smull	r2, r3, r3, r1
   80e64:	17c9      	asrs	r1, r1, #31
   80e66:	ebc1 0163 	rsb	r1, r1, r3, asr #1
   80e6a:	4408      	add	r0, r1
   80e6c:	4b1a      	ldr	r3, [pc, #104]	; (80ed8 <__RTCdayByDate+0xa0>)
   80e6e:	fba3 2300 	umull	r2, r3, r3, r0
   80e72:	1ac2      	subs	r2, r0, r3
   80e74:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   80e78:	089b      	lsrs	r3, r3, #2
   80e7a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   80e7e:	1ac0      	subs	r0, r0, r3
   80e80:	3001      	adds	r0, #1
   80e82:	b2c0      	uxtb	r0, r0
	}
	#undef y
	return D; //Normaly 1 to 7 !!!!
}
   80e84:	4770      	bx	lr
		D = ( ((uint16_t)month*23)/9 + date + 4 + y + y/4 - y/100 + y/400 - 2 ) % 7 + 1;
   80e86:	1c93      	adds	r3, r2, #2
   80e88:	4418      	add	r0, r3
   80e8a:	eb00 0092 	add.w	r0, r0, r2, lsr #2
   80e8e:	4b10      	ldr	r3, [pc, #64]	; (80ed0 <__RTCdayByDate+0x98>)
   80e90:	fba3 3202 	umull	r3, r2, r3, r2
   80e94:	eb00 10d2 	add.w	r0, r0, r2, lsr #7
   80e98:	eba0 1252 	sub.w	r2, r0, r2, lsr #5
   80e9c:	b289      	uxth	r1, r1
   80e9e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   80ea2:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
   80ea6:	480b      	ldr	r0, [pc, #44]	; (80ed4 <__RTCdayByDate+0x9c>)
   80ea8:	fb80 3001 	smull	r3, r0, r0, r1
   80eac:	17c9      	asrs	r1, r1, #31
   80eae:	ebc1 0160 	rsb	r1, r1, r0, asr #1
   80eb2:	440a      	add	r2, r1
   80eb4:	4808      	ldr	r0, [pc, #32]	; (80ed8 <__RTCdayByDate+0xa0>)
   80eb6:	fba0 3002 	umull	r3, r0, r0, r2
   80eba:	1a13      	subs	r3, r2, r0
   80ebc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
   80ec0:	0880      	lsrs	r0, r0, #2
   80ec2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   80ec6:	1a10      	subs	r0, r2, r0
   80ec8:	3001      	adds	r0, #1
   80eca:	b2c0      	uxtb	r0, r0
   80ecc:	4770      	bx	lr
   80ece:	bf00      	nop
   80ed0:	51eb851f 	.word	0x51eb851f
   80ed4:	38e38e39 	.word	0x38e38e39
   80ed8:	24924925 	.word	0x24924925

00080edc <Shell>:
{
   80edc:	b40f      	push	{r0, r1, r2, r3}
   80ede:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80ee2:	b087      	sub	sp, #28
	switch(sc)
   80ee4:	990e      	ldr	r1, [sp, #56]	; 0x38
   80ee6:	2902      	cmp	r1, #2
   80ee8:	f000 8121 	beq.w	8112e <Shell+0x252>
   80eec:	d942      	bls.n	80f74 <Shell+0x98>
   80eee:	2904      	cmp	r1, #4
   80ef0:	f000 813a 	beq.w	81168 <Shell+0x28c>
   80ef4:	2964      	cmp	r1, #100	; 0x64
   80ef6:	f040 81b4 	bne.w	81262 <Shell+0x386>
		Lcd(LCD_NEW);
   80efa:	2064      	movs	r0, #100	; 0x64
   80efc:	4ba1      	ldr	r3, [pc, #644]	; (81184 <Shell+0x2a8>)
   80efe:	4798      	blx	r3
		gpio_configure_pin(HEART_LED, POWER_LED_FLAGS);
   80f00:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80f04:	2034      	movs	r0, #52	; 0x34
   80f06:	4ca0      	ldr	r4, [pc, #640]	; (81188 <Shell+0x2ac>)
   80f08:	47a0      	blx	r4
		gpio_configure_pin(POWER_LED, POWER_LED_FLAGS);
   80f0a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80f0e:	2033      	movs	r0, #51	; 0x33
   80f10:	47a0      	blx	r4
		gpio_set_pin_low(POWER_LED);
   80f12:	2033      	movs	r0, #51	; 0x33
   80f14:	4b9d      	ldr	r3, [pc, #628]	; (8118c <Shell+0x2b0>)
   80f16:	4798      	blx	r3
		state = IDLE;
   80f18:	2400      	movs	r4, #0
   80f1a:	4b9d      	ldr	r3, [pc, #628]	; (81190 <Shell+0x2b4>)
   80f1c:	701c      	strb	r4, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80f1e:	2002      	movs	r0, #2
   80f20:	4b9c      	ldr	r3, [pc, #624]	; (81194 <Shell+0x2b8>)
   80f22:	4798      	blx	r3
		rtc_set_hour_mode(RTC, 0);
   80f24:	4d9c      	ldr	r5, [pc, #624]	; (81198 <Shell+0x2bc>)
   80f26:	4621      	mov	r1, r4
   80f28:	4628      	mov	r0, r5
   80f2a:	4b9c      	ldr	r3, [pc, #624]	; (8119c <Shell+0x2c0>)
   80f2c:	4798      	blx	r3
		rtc_set_time(RTC, 1, 2, 3);
   80f2e:	2303      	movs	r3, #3
   80f30:	2202      	movs	r2, #2
   80f32:	2101      	movs	r1, #1
   80f34:	4628      	mov	r0, r5
   80f36:	4e9a      	ldr	r6, [pc, #616]	; (811a0 <Shell+0x2c4>)
   80f38:	47b0      	blx	r6
		rtc_enable_interrupt(RTC, RTC_IER_SECEN);
   80f3a:	2104      	movs	r1, #4
   80f3c:	4628      	mov	r0, r5
   80f3e:	4b99      	ldr	r3, [pc, #612]	; (811a4 <Shell+0x2c8>)
   80f40:	4798      	blx	r3
		Shellcom(SHELLCOM_NEW);
   80f42:	2064      	movs	r0, #100	; 0x64
   80f44:	4b98      	ldr	r3, [pc, #608]	; (811a8 <Shell+0x2cc>)
   80f46:	4798      	blx	r3
		PushTask(Shell,_SHELL_HEARTBEAT,0,0);
   80f48:	4e98      	ldr	r6, [pc, #608]	; (811ac <Shell+0x2d0>)
   80f4a:	9400      	str	r4, [sp, #0]
   80f4c:	4623      	mov	r3, r4
   80f4e:	2202      	movs	r2, #2
   80f50:	4631      	mov	r1, r6
   80f52:	2066      	movs	r0, #102	; 0x66
   80f54:	4d96      	ldr	r5, [pc, #600]	; (811b0 <Shell+0x2d4>)
   80f56:	47a8      	blx	r5
		PushTask(Shell,_SHELL_PROMPT,0,500);		
   80f58:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   80f5c:	9300      	str	r3, [sp, #0]
   80f5e:	4623      	mov	r3, r4
   80f60:	2204      	movs	r2, #4
   80f62:	4631      	mov	r1, r6
   80f64:	2066      	movs	r0, #102	; 0x66
   80f66:	47a8      	blx	r5
}
   80f68:	2000      	movs	r0, #0
   80f6a:	b007      	add	sp, #28
   80f6c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80f70:	b004      	add	sp, #16
   80f72:	4770      	bx	lr
	switch(sc)
   80f74:	2901      	cmp	r1, #1
   80f76:	f040 8174 	bne.w	81262 <Shell+0x386>
		switch(state)
   80f7a:	4b85      	ldr	r3, [pc, #532]	; (81190 <Shell+0x2b4>)
   80f7c:	781b      	ldrb	r3, [r3, #0]
   80f7e:	2b06      	cmp	r3, #6
   80f80:	f200 80cf 	bhi.w	81122 <Shell+0x246>
   80f84:	a201      	add	r2, pc, #4	; (adr r2, 80f8c <Shell+0xb0>)
   80f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80f8a:	bf00      	nop
   80f8c:	00080fa9 	.word	0x00080fa9
   80f90:	00081041 	.word	0x00081041
   80f94:	000810e5 	.word	0x000810e5
   80f98:	00080f69 	.word	0x00080f69
   80f9c:	00080f69 	.word	0x00080f69
   80fa0:	00080f69 	.word	0x00080f69
   80fa4:	00080f69 	.word	0x00080f69
			switch(_kbhitChar)
   80fa8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   80faa:	b2ec      	uxtb	r4, r5
   80fac:	f1a4 0308 	sub.w	r3, r4, #8
   80fb0:	2b18      	cmp	r3, #24
   80fb2:	d835      	bhi.n	81020 <Shell+0x144>
   80fb4:	a201      	add	r2, pc, #4	; (adr r2, 80fbc <Shell+0xe0>)
   80fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80fba:	bf00      	nop
   80fbc:	00080f69 	.word	0x00080f69
   80fc0:	00080f69 	.word	0x00080f69
   80fc4:	00080f69 	.word	0x00080f69
   80fc8:	00081021 	.word	0x00081021
   80fcc:	00081021 	.word	0x00081021
   80fd0:	00080f69 	.word	0x00080f69
   80fd4:	00081021 	.word	0x00081021
   80fd8:	00081021 	.word	0x00081021
   80fdc:	00081021 	.word	0x00081021
   80fe0:	00081021 	.word	0x00081021
   80fe4:	00081021 	.word	0x00081021
   80fe8:	00081021 	.word	0x00081021
   80fec:	00081021 	.word	0x00081021
   80ff0:	00081021 	.word	0x00081021
   80ff4:	00081021 	.word	0x00081021
   80ff8:	00081021 	.word	0x00081021
   80ffc:	00081021 	.word	0x00081021
   81000:	00081021 	.word	0x00081021
   81004:	00081021 	.word	0x00081021
   81008:	00080f69 	.word	0x00080f69
   8100c:	00081021 	.word	0x00081021
   81010:	00081021 	.word	0x00081021
   81014:	00081021 	.word	0x00081021
   81018:	00081021 	.word	0x00081021
   8101c:	00080f69 	.word	0x00080f69
					Putstr("\r\n>");
   81020:	4964      	ldr	r1, [pc, #400]	; (811b4 <Shell+0x2d8>)
   81022:	2067      	movs	r0, #103	; 0x67
   81024:	4f60      	ldr	r7, [pc, #384]	; (811a8 <Shell+0x2cc>)
   81026:	47b8      	blx	r7
					*pEdit++ = _kbhitChar;
   81028:	4e59      	ldr	r6, [pc, #356]	; (81190 <Shell+0x2b4>)
   8102a:	4b63      	ldr	r3, [pc, #396]	; (811b8 <Shell+0x2dc>)
   8102c:	60b3      	str	r3, [r6, #8]
			switch(_kbhitChar)
   8102e:	f803 5c01 	strb.w	r5, [r3, #-1]
					nbChar = 1;
   81032:	2501      	movs	r5, #1
   81034:	60f5      	str	r5, [r6, #12]
					Putch(_kbhitChar);
   81036:	4621      	mov	r1, r4
   81038:	2066      	movs	r0, #102	; 0x66
   8103a:	47b8      	blx	r7
					state = EDITION;
   8103c:	7035      	strb	r5, [r6, #0]
					break;
   8103e:	e793      	b.n	80f68 <Shell+0x8c>
			switch(_kbhitChar)
   81040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81042:	b2d1      	uxtb	r1, r2
   81044:	f1a1 0308 	sub.w	r3, r1, #8
   81048:	2b13      	cmp	r3, #19
   8104a:	d83a      	bhi.n	810c2 <Shell+0x1e6>
   8104c:	a001      	add	r0, pc, #4	; (adr r0, 81054 <Shell+0x178>)
   8104e:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   81052:	bf00      	nop
   81054:	00080f69 	.word	0x00080f69
   81058:	00080f69 	.word	0x00080f69
   8105c:	00080f69 	.word	0x00080f69
   81060:	000810c3 	.word	0x000810c3
   81064:	000810c3 	.word	0x000810c3
   81068:	000810a5 	.word	0x000810a5
   8106c:	000810c3 	.word	0x000810c3
   81070:	000810c3 	.word	0x000810c3
   81074:	000810c3 	.word	0x000810c3
   81078:	000810c3 	.word	0x000810c3
   8107c:	000810c3 	.word	0x000810c3
   81080:	000810c3 	.word	0x000810c3
   81084:	000810c3 	.word	0x000810c3
   81088:	000810c3 	.word	0x000810c3
   8108c:	000810c3 	.word	0x000810c3
   81090:	000810c3 	.word	0x000810c3
   81094:	000810c3 	.word	0x000810c3
   81098:	000810c3 	.word	0x000810c3
   8109c:	000810c3 	.word	0x000810c3
   810a0:	00080f69 	.word	0x00080f69
				*pEdit++ = '\0';
   810a4:	4a3a      	ldr	r2, [pc, #232]	; (81190 <Shell+0x2b4>)
   810a6:	6891      	ldr	r1, [r2, #8]
   810a8:	1c4b      	adds	r3, r1, #1
   810aa:	6093      	str	r3, [r2, #8]
   810ac:	2300      	movs	r3, #0
   810ae:	700b      	strb	r3, [r1, #0]
				state = EXECUTION;
   810b0:	2102      	movs	r1, #2
   810b2:	7011      	strb	r1, [r2, #0]
				PushTask(Shell, _SHELL_KBHIT, 0, 0);
   810b4:	9300      	str	r3, [sp, #0]
   810b6:	2201      	movs	r2, #1
   810b8:	493c      	ldr	r1, [pc, #240]	; (811ac <Shell+0x2d0>)
   810ba:	2066      	movs	r0, #102	; 0x66
   810bc:	4c3c      	ldr	r4, [pc, #240]	; (811b0 <Shell+0x2d4>)
   810be:	47a0      	blx	r4
				break;
   810c0:	e752      	b.n	80f68 <Shell+0x8c>
				if(nbChar < SHELL_EDIT_BUFFER_LEN - 2)
   810c2:	4b33      	ldr	r3, [pc, #204]	; (81190 <Shell+0x2b4>)
   810c4:	68db      	ldr	r3, [r3, #12]
   810c6:	2bfd      	cmp	r3, #253	; 0xfd
   810c8:	f63f af4e 	bhi.w	80f68 <Shell+0x8c>
					*pEdit++ = _kbhitChar;
   810cc:	4b30      	ldr	r3, [pc, #192]	; (81190 <Shell+0x2b4>)
   810ce:	6898      	ldr	r0, [r3, #8]
   810d0:	1c44      	adds	r4, r0, #1
   810d2:	609c      	str	r4, [r3, #8]
			switch(_kbhitChar)
   810d4:	7002      	strb	r2, [r0, #0]
					nbChar++;
   810d6:	68da      	ldr	r2, [r3, #12]
   810d8:	3201      	adds	r2, #1
   810da:	60da      	str	r2, [r3, #12]
					Putch(_kbhitChar);
   810dc:	2066      	movs	r0, #102	; 0x66
   810de:	4b32      	ldr	r3, [pc, #200]	; (811a8 <Shell+0x2cc>)
   810e0:	4798      	blx	r3
   810e2:	e741      	b.n	80f68 <Shell+0x8c>
				Putstr("\r\n>>>");
   810e4:	4935      	ldr	r1, [pc, #212]	; (811bc <Shell+0x2e0>)
   810e6:	2067      	movs	r0, #103	; 0x67
   810e8:	4c2f      	ldr	r4, [pc, #188]	; (811a8 <Shell+0x2cc>)
   810ea:	47a0      	blx	r4
				Putstr(shellBuf);
   810ec:	4d34      	ldr	r5, [pc, #208]	; (811c0 <Shell+0x2e4>)
   810ee:	4629      	mov	r1, r5
   810f0:	2067      	movs	r0, #103	; 0x67
   810f2:	47a0      	blx	r4
				Putstr("\r\n");
   810f4:	4933      	ldr	r1, [pc, #204]	; (811c4 <Shell+0x2e8>)
   810f6:	2067      	movs	r0, #103	; 0x67
   810f8:	47a0      	blx	r4
				pToken = (uint32_t)strtok(shellBuf, " \r\n");
   810fa:	4933      	ldr	r1, [pc, #204]	; (811c8 <Shell+0x2ec>)
   810fc:	4628      	mov	r0, r5
   810fe:	4b33      	ldr	r3, [pc, #204]	; (811cc <Shell+0x2f0>)
   81100:	4798      	blx	r3
   81102:	4604      	mov	r4, r0
   81104:	900e      	str	r0, [sp, #56]	; 0x38
				if(pToken)
   81106:	b918      	cbnz	r0, 81110 <Shell+0x234>
				state = IDLE;
   81108:	2200      	movs	r2, #0
   8110a:	4b21      	ldr	r3, [pc, #132]	; (81190 <Shell+0x2b4>)
   8110c:	701a      	strb	r2, [r3, #0]
				break;
   8110e:	e72b      	b.n	80f68 <Shell+0x8c>
					crc = CRC16MODBUSFRAME(pToken, strlen(pToken));
   81110:	4b2f      	ldr	r3, [pc, #188]	; (811d0 <Shell+0x2f4>)
   81112:	4798      	blx	r3
   81114:	4601      	mov	r1, r0
   81116:	4620      	mov	r0, r4
   81118:	4b2e      	ldr	r3, [pc, #184]	; (811d4 <Shell+0x2f8>)
   8111a:	4798      	blx	r3
   8111c:	4b1c      	ldr	r3, [pc, #112]	; (81190 <Shell+0x2b4>)
   8111e:	8218      	strh	r0, [r3, #16]
   81120:	e7f2      	b.n	81108 <Shell+0x22c>
				Putch(_kbhitChar);
   81122:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   81126:	2066      	movs	r0, #102	; 0x66
   81128:	4b1f      	ldr	r3, [pc, #124]	; (811a8 <Shell+0x2cc>)
   8112a:	4798      	blx	r3
				break;
   8112c:	e71c      	b.n	80f68 <Shell+0x8c>
			k++; if(flashSequ[k]==0) k=0;
   8112e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   81130:	3401      	adds	r4, #1
   81132:	940f      	str	r4, [sp, #60]	; 0x3c
   81134:	4b28      	ldr	r3, [pc, #160]	; (811d8 <Shell+0x2fc>)
   81136:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   8113a:	b133      	cbz	r3, 8114a <Shell+0x26e>
			if(k%2==0) gpio_set_pin_low(HEART_LED);
   8113c:	f014 0f01 	tst.w	r4, #1
   81140:	d004      	beq.n	8114c <Shell+0x270>
			else gpio_set_pin_high(HEART_LED);
   81142:	2034      	movs	r0, #52	; 0x34
   81144:	4b25      	ldr	r3, [pc, #148]	; (811dc <Shell+0x300>)
   81146:	4798      	blx	r3
   81148:	e003      	b.n	81152 <Shell+0x276>
			if(k%2==0) gpio_set_pin_low(HEART_LED);
   8114a:	2400      	movs	r4, #0
   8114c:	2034      	movs	r0, #52	; 0x34
   8114e:	4b0f      	ldr	r3, [pc, #60]	; (8118c <Shell+0x2b0>)
   81150:	4798      	blx	r3
			PushTask(Shell,_SHELL_HEARTBEAT,k,flashSequ[k]);
   81152:	4b21      	ldr	r3, [pc, #132]	; (811d8 <Shell+0x2fc>)
   81154:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   81158:	9300      	str	r3, [sp, #0]
   8115a:	4623      	mov	r3, r4
   8115c:	2202      	movs	r2, #2
   8115e:	4913      	ldr	r1, [pc, #76]	; (811ac <Shell+0x2d0>)
   81160:	2066      	movs	r0, #102	; 0x66
   81162:	4c13      	ldr	r4, [pc, #76]	; (811b0 <Shell+0x2d4>)
   81164:	47a0      	blx	r4
			break;
   81166:	e6ff      	b.n	80f68 <Shell+0x8c>
			if(state==IDLE)
   81168:	4b09      	ldr	r3, [pc, #36]	; (81190 <Shell+0x2b4>)
   8116a:	781b      	ldrb	r3, [r3, #0]
   8116c:	b3c3      	cbz	r3, 811e0 <Shell+0x304>
			PushTask(Shell,_SHELL_PROMPT,0,300);
   8116e:	f44f 7396 	mov.w	r3, #300	; 0x12c
   81172:	9300      	str	r3, [sp, #0]
   81174:	2300      	movs	r3, #0
   81176:	2204      	movs	r2, #4
   81178:	490c      	ldr	r1, [pc, #48]	; (811ac <Shell+0x2d0>)
   8117a:	2066      	movs	r0, #102	; 0x66
   8117c:	4c0c      	ldr	r4, [pc, #48]	; (811b0 <Shell+0x2d4>)
   8117e:	47a0      	blx	r4
			break;
   81180:	e6f2      	b.n	80f68 <Shell+0x8c>
   81182:	bf00      	nop
   81184:	0008091d 	.word	0x0008091d
   81188:	00081971 	.word	0x00081971
   8118c:	00081935 	.word	0x00081935
   81190:	200010c0 	.word	0x200010c0
   81194:	00081b2d 	.word	0x00081b2d
   81198:	400e1260 	.word	0x400e1260
   8119c:	00081b61 	.word	0x00081b61
   811a0:	00081bd5 	.word	0x00081bd5
   811a4:	00081b77 	.word	0x00081b77
   811a8:	000812a1 	.word	0x000812a1
   811ac:	00080edd 	.word	0x00080edd
   811b0:	0008143d 	.word	0x0008143d
   811b4:	000868e8 	.word	0x000868e8
   811b8:	200010d5 	.word	0x200010d5
   811bc:	000868ec 	.word	0x000868ec
   811c0:	200010d4 	.word	0x200010d4
   811c4:	00086aac 	.word	0x00086aac
   811c8:	000868f4 	.word	0x000868f4
   811cc:	00082241 	.word	0x00082241
   811d0:	000821e5 	.word	0x000821e5
   811d4:	0008083d 	.word	0x0008083d
   811d8:	0008691c 	.word	0x0008691c
   811dc:	0008191b 	.word	0x0008191b
				rtc_get_date(RTC, &yr, &mm, &dd, &wk);
   811e0:	4e22      	ldr	r6, [pc, #136]	; (8126c <Shell+0x390>)
   811e2:	af02      	add	r7, sp, #8
   811e4:	9700      	str	r7, [sp, #0]
   811e6:	ab03      	add	r3, sp, #12
   811e8:	aa04      	add	r2, sp, #16
   811ea:	a905      	add	r1, sp, #20
   811ec:	4630      	mov	r0, r6
   811ee:	4c20      	ldr	r4, [pc, #128]	; (81270 <Shell+0x394>)
   811f0:	47a0      	blx	r4
				day = __RTCdayByDate(dd, mm, yr/100);
   811f2:	f8dd 800c 	ldr.w	r8, [sp, #12]
   811f6:	9d04      	ldr	r5, [sp, #16]
   811f8:	f8dd 9014 	ldr.w	r9, [sp, #20]
   811fc:	4a1d      	ldr	r2, [pc, #116]	; (81274 <Shell+0x398>)
   811fe:	fba2 3209 	umull	r3, r2, r2, r9
   81202:	0952      	lsrs	r2, r2, #5
   81204:	4629      	mov	r1, r5
   81206:	4640      	mov	r0, r8
   81208:	4b1b      	ldr	r3, [pc, #108]	; (81278 <Shell+0x39c>)
   8120a:	4798      	blx	r3
				sprintf(buf,"%.3s %02d %.3s %02d", daysOfWeek[day - 3], dd, months[mm-1], yr);
   8120c:	3803      	subs	r0, #3
   8120e:	4b1b      	ldr	r3, [pc, #108]	; (8127c <Shell+0x3a0>)
   81210:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   81214:	4c1a      	ldr	r4, [pc, #104]	; (81280 <Shell+0x3a4>)
   81216:	f8cd 9004 	str.w	r9, [sp, #4]
   8121a:	3d01      	subs	r5, #1
   8121c:	4b19      	ldr	r3, [pc, #100]	; (81284 <Shell+0x3a8>)
   8121e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   81222:	9300      	str	r3, [sp, #0]
   81224:	4643      	mov	r3, r8
   81226:	4918      	ldr	r1, [pc, #96]	; (81288 <Shell+0x3ac>)
   81228:	4620      	mov	r0, r4
   8122a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8129c <Shell+0x3c0>
   8122e:	47c0      	blx	r8
				LcdPutstr(buf, 0, 2);
   81230:	2302      	movs	r3, #2
   81232:	2200      	movs	r2, #0
   81234:	4621      	mov	r1, r4
   81236:	2067      	movs	r0, #103	; 0x67
   81238:	4d14      	ldr	r5, [pc, #80]	; (8128c <Shell+0x3b0>)
   8123a:	47a8      	blx	r5
				rtc_get_time(RTC, &hh, &mn, &sec);
   8123c:	463b      	mov	r3, r7
   8123e:	aa03      	add	r2, sp, #12
   81240:	a904      	add	r1, sp, #16
   81242:	4630      	mov	r0, r6
   81244:	4e12      	ldr	r6, [pc, #72]	; (81290 <Shell+0x3b4>)
   81246:	47b0      	blx	r6
				sprintf(buf, "%02d:%02d:%02d ", hh, mn, sec);
   81248:	9b02      	ldr	r3, [sp, #8]
   8124a:	9300      	str	r3, [sp, #0]
   8124c:	9b03      	ldr	r3, [sp, #12]
   8124e:	9a04      	ldr	r2, [sp, #16]
   81250:	4910      	ldr	r1, [pc, #64]	; (81294 <Shell+0x3b8>)
   81252:	4620      	mov	r0, r4
   81254:	47c0      	blx	r8
				LcdPutstr(buf, 1, 5);
   81256:	2305      	movs	r3, #5
   81258:	2201      	movs	r2, #1
   8125a:	4621      	mov	r1, r4
   8125c:	2067      	movs	r0, #103	; 0x67
   8125e:	47a8      	blx	r5
   81260:	e785      	b.n	8116e <Shell+0x292>
			Error(ERR_SHELL_SWITCH_BAD_SC,sc);
   81262:	4b0d      	ldr	r3, [pc, #52]	; (81298 <Shell+0x3bc>)
   81264:	681b      	ldr	r3, [r3, #0]
   81266:	200e      	movs	r0, #14
   81268:	4798      	blx	r3
			break;
   8126a:	e67d      	b.n	80f68 <Shell+0x8c>
   8126c:	400e1260 	.word	0x400e1260
   81270:	00081c69 	.word	0x00081c69
   81274:	51eb851f 	.word	0x51eb851f
   81278:	00080e39 	.word	0x00080e39
   8127c:	2000052c 	.word	0x2000052c
   81280:	20001434 	.word	0x20001434
   81284:	20000548 	.word	0x20000548
   81288:	000868f8 	.word	0x000868f8
   8128c:	0008091d 	.word	0x0008091d
   81290:	00081b7b 	.word	0x00081b7b
   81294:	0008690c 	.word	0x0008690c
   81298:	20000528 	.word	0x20000528
   8129c:	00082199 	.word	0x00082199

000812a0 <Shellcom>:
	char	*pTxRead;
}shellcom;


uint32_t Shellcom(uint32_t sc, ...)
{
   812a0:	b40f      	push	{r0, r1, r2, r3}
   812a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	switch(sc)
   812a4:	9906      	ldr	r1, [sp, #24]
   812a6:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   812aa:	2b04      	cmp	r3, #4
   812ac:	f200 80a8 	bhi.w	81400 <Shellcom+0x160>
   812b0:	e8df f013 	tbh	[pc, r3, lsl #1]
   812b4:	00a60005 	.word	0x00a60005
   812b8:	004c002c 	.word	0x004c002c
   812bc:	007a      	.short	0x007a
	{
	case SHELLCOM_NEW:
		shellcom.pTxRead=shellcom.pTxWrite=shellcomTxBuf;
   812be:	4b53      	ldr	r3, [pc, #332]	; (8140c <Shellcom+0x16c>)
   812c0:	4a53      	ldr	r2, [pc, #332]	; (81410 <Shellcom+0x170>)
   812c2:	601a      	str	r2, [r3, #0]
   812c4:	605a      	str	r2, [r3, #4]
		pmc_enable_periph_clk(ID_UART);
   812c6:	2008      	movs	r0, #8
   812c8:	4b52      	ldr	r3, [pc, #328]	; (81414 <Shellcom+0x174>)
   812ca:	4798      	blx	r3
		pio_configure_pin(UART_TX_PIN,UART_TX_PIN_FLAGS);
   812cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   812d0:	200c      	movs	r0, #12
   812d2:	4c51      	ldr	r4, [pc, #324]	; (81418 <Shellcom+0x178>)
   812d4:	47a0      	blx	r4
		pio_configure_pin(UART_RX_PIN,UART_RX_PIN_FLAGS);
   812d6:	4951      	ldr	r1, [pc, #324]	; (8141c <Shellcom+0x17c>)
   812d8:	200b      	movs	r0, #11
   812da:	47a0      	blx	r4
		if(uart_init(UART,&uart_opt)) Error(ERR_SHELLCOM_UART_INIT_FAILED, sc);
   812dc:	4950      	ldr	r1, [pc, #320]	; (81420 <Shellcom+0x180>)
   812de:	4851      	ldr	r0, [pc, #324]	; (81424 <Shellcom+0x184>)
   812e0:	4b51      	ldr	r3, [pc, #324]	; (81428 <Shellcom+0x188>)
   812e2:	4798      	blx	r3
   812e4:	b960      	cbnz	r0, 81300 <Shellcom+0x60>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   812e6:	f44f 7280 	mov.w	r2, #256	; 0x100
   812ea:	4b50      	ldr	r3, [pc, #320]	; (8142c <Shellcom+0x18c>)
   812ec:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(ID_UART);
		uart_enable_interrupt(UART,US_IER_RXRDY);
   812ee:	2101      	movs	r1, #1
   812f0:	484c      	ldr	r0, [pc, #304]	; (81424 <Shellcom+0x184>)
   812f2:	4b4f      	ldr	r3, [pc, #316]	; (81430 <Shellcom+0x190>)
   812f4:	4798      	blx	r3
	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERR_SHELLCOM_SWITCH_BAD_SC, (uint32_t)sc);
	}

	return 0;
   812f6:	2000      	movs	r0, #0
}
   812f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   812fc:	b004      	add	sp, #16
   812fe:	4770      	bx	lr
		if(uart_init(UART,&uart_opt)) Error(ERR_SHELLCOM_UART_INIT_FAILED, sc);
   81300:	4b4c      	ldr	r3, [pc, #304]	; (81434 <Shellcom+0x194>)
   81302:	681b      	ldr	r3, [r3, #0]
   81304:	2164      	movs	r1, #100	; 0x64
   81306:	201f      	movs	r0, #31
   81308:	4798      	blx	r3
   8130a:	e7ec      	b.n	812e6 <Shellcom+0x46>
		*shellcom.pTxWrite++=_charData;
   8130c:	4b3f      	ldr	r3, [pc, #252]	; (8140c <Shellcom+0x16c>)
   8130e:	681a      	ldr	r2, [r3, #0]
   81310:	1c51      	adds	r1, r2, #1
   81312:	6019      	str	r1, [r3, #0]
   81314:	9907      	ldr	r1, [sp, #28]
   81316:	7011      	strb	r1, [r2, #0]
		if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   81318:	681a      	ldr	r2, [r3, #0]
   8131a:	4b47      	ldr	r3, [pc, #284]	; (81438 <Shellcom+0x198>)
   8131c:	429a      	cmp	r2, r3
   8131e:	d303      	bcc.n	81328 <Shellcom+0x88>
   81320:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
   81324:	4b39      	ldr	r3, [pc, #228]	; (8140c <Shellcom+0x16c>)
   81326:	601a      	str	r2, [r3, #0]
		if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   81328:	4b38      	ldr	r3, [pc, #224]	; (8140c <Shellcom+0x16c>)
   8132a:	681a      	ldr	r2, [r3, #0]
   8132c:	685b      	ldr	r3, [r3, #4]
   8132e:	429a      	cmp	r2, r3
   81330:	d006      	beq.n	81340 <Shellcom+0xa0>
		uart_enable_interrupt(UART,US_IER_TXEMPTY);
   81332:	f44f 7100 	mov.w	r1, #512	; 0x200
   81336:	483b      	ldr	r0, [pc, #236]	; (81424 <Shellcom+0x184>)
   81338:	4b3d      	ldr	r3, [pc, #244]	; (81430 <Shellcom+0x190>)
   8133a:	4798      	blx	r3
		return 1;
   8133c:	2001      	movs	r0, #1
   8133e:	e7db      	b.n	812f8 <Shellcom+0x58>
		if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   81340:	4b3c      	ldr	r3, [pc, #240]	; (81434 <Shellcom+0x194>)
   81342:	681b      	ldr	r3, [r3, #0]
   81344:	2100      	movs	r1, #0
   81346:	2017      	movs	r0, #23
   81348:	4798      	blx	r3
   8134a:	e7f2      	b.n	81332 <Shellcom+0x92>
		_nChar=0;
   8134c:	2300      	movs	r3, #0
   8134e:	9306      	str	r3, [sp, #24]
		while(*(char*)_pStr)
   81350:	9d07      	ldr	r5, [sp, #28]
   81352:	462a      	mov	r2, r5
   81354:	782b      	ldrb	r3, [r5, #0]
   81356:	b1fb      	cbz	r3, 81398 <Shellcom+0xf8>
   81358:	3501      	adds	r5, #1
			*shellcom.pTxWrite++=*(char*)_pStr++; _nChar++;
   8135a:	4c2c      	ldr	r4, [pc, #176]	; (8140c <Shellcom+0x16c>)
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   8135c:	4f36      	ldr	r7, [pc, #216]	; (81438 <Shellcom+0x198>)
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   8135e:	4e31      	ldr	r6, [pc, #196]	; (81424 <Shellcom+0x184>)
			*shellcom.pTxWrite++=*(char*)_pStr++; _nChar++;
   81360:	6823      	ldr	r3, [r4, #0]
   81362:	1c59      	adds	r1, r3, #1
   81364:	6021      	str	r1, [r4, #0]
   81366:	9507      	str	r5, [sp, #28]
   81368:	7812      	ldrb	r2, [r2, #0]
   8136a:	701a      	strb	r2, [r3, #0]
   8136c:	9b06      	ldr	r3, [sp, #24]
   8136e:	3301      	adds	r3, #1
   81370:	9306      	str	r3, [sp, #24]
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   81372:	6823      	ldr	r3, [r4, #0]
   81374:	42bb      	cmp	r3, r7
   81376:	bf24      	itt	cs
   81378:	4b25      	ldrcs	r3, [pc, #148]	; (81410 <Shellcom+0x170>)
   8137a:	6023      	strcs	r3, [r4, #0]
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   8137c:	6822      	ldr	r2, [r4, #0]
   8137e:	6863      	ldr	r3, [r4, #4]
   81380:	429a      	cmp	r2, r3
   81382:	d00b      	beq.n	8139c <Shellcom+0xfc>
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   81384:	f44f 7100 	mov.w	r1, #512	; 0x200
   81388:	4630      	mov	r0, r6
   8138a:	4b29      	ldr	r3, [pc, #164]	; (81430 <Shellcom+0x190>)
   8138c:	4798      	blx	r3
		while(*(char*)_pStr)
   8138e:	462a      	mov	r2, r5
   81390:	f815 3b01 	ldrb.w	r3, [r5], #1
   81394:	2b00      	cmp	r3, #0
   81396:	d1e3      	bne.n	81360 <Shellcom+0xc0>
		return _nChar;
   81398:	9806      	ldr	r0, [sp, #24]
   8139a:	e7ad      	b.n	812f8 <Shellcom+0x58>
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   8139c:	4b25      	ldr	r3, [pc, #148]	; (81434 <Shellcom+0x194>)
   8139e:	681b      	ldr	r3, [r3, #0]
   813a0:	2100      	movs	r1, #0
   813a2:	2017      	movs	r0, #23
   813a4:	4798      	blx	r3
   813a6:	e7ed      	b.n	81384 <Shellcom+0xe4>
		_nChar=0;
   813a8:	2300      	movs	r3, #0
   813aa:	9306      	str	r3, [sp, #24]
		while(_strLen)
   813ac:	9d08      	ldr	r5, [sp, #32]
   813ae:	b1fd      	cbz	r5, 813f0 <Shellcom+0x150>
			*shellcom.pTxWrite++=*(char*)_pStr++; _strLen--; _nChar++;
   813b0:	4c16      	ldr	r4, [pc, #88]	; (8140c <Shellcom+0x16c>)
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   813b2:	4f21      	ldr	r7, [pc, #132]	; (81438 <Shellcom+0x198>)
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   813b4:	4e1b      	ldr	r6, [pc, #108]	; (81424 <Shellcom+0x184>)
			*shellcom.pTxWrite++=*(char*)_pStr++; _strLen--; _nChar++;
   813b6:	6823      	ldr	r3, [r4, #0]
   813b8:	1c5a      	adds	r2, r3, #1
   813ba:	6022      	str	r2, [r4, #0]
   813bc:	9a07      	ldr	r2, [sp, #28]
   813be:	1c51      	adds	r1, r2, #1
   813c0:	9107      	str	r1, [sp, #28]
   813c2:	7812      	ldrb	r2, [r2, #0]
   813c4:	701a      	strb	r2, [r3, #0]
   813c6:	3d01      	subs	r5, #1
   813c8:	9508      	str	r5, [sp, #32]
   813ca:	9b06      	ldr	r3, [sp, #24]
   813cc:	3301      	adds	r3, #1
   813ce:	9306      	str	r3, [sp, #24]
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   813d0:	6823      	ldr	r3, [r4, #0]
   813d2:	42bb      	cmp	r3, r7
   813d4:	bf24      	itt	cs
   813d6:	4b0e      	ldrcs	r3, [pc, #56]	; (81410 <Shellcom+0x170>)
   813d8:	6023      	strcs	r3, [r4, #0]
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   813da:	6822      	ldr	r2, [r4, #0]
   813dc:	6863      	ldr	r3, [r4, #4]
   813de:	429a      	cmp	r2, r3
   813e0:	d008      	beq.n	813f4 <Shellcom+0x154>
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   813e2:	f44f 7100 	mov.w	r1, #512	; 0x200
   813e6:	4630      	mov	r0, r6
   813e8:	4b11      	ldr	r3, [pc, #68]	; (81430 <Shellcom+0x190>)
   813ea:	4798      	blx	r3
		while(_strLen)
   813ec:	2d00      	cmp	r5, #0
   813ee:	d1e2      	bne.n	813b6 <Shellcom+0x116>
		return _nChar;
   813f0:	9806      	ldr	r0, [sp, #24]
   813f2:	e781      	b.n	812f8 <Shellcom+0x58>
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   813f4:	4b0f      	ldr	r3, [pc, #60]	; (81434 <Shellcom+0x194>)
   813f6:	681b      	ldr	r3, [r3, #0]
   813f8:	2100      	movs	r1, #0
   813fa:	2017      	movs	r0, #23
   813fc:	4798      	blx	r3
   813fe:	e7f0      	b.n	813e2 <Shellcom+0x142>
		Error(ERR_SHELLCOM_SWITCH_BAD_SC, (uint32_t)sc);
   81400:	4b0c      	ldr	r3, [pc, #48]	; (81434 <Shellcom+0x194>)
   81402:	681b      	ldr	r3, [r3, #0]
   81404:	200d      	movs	r0, #13
   81406:	4798      	blx	r3
	return 0;
   81408:	2000      	movs	r0, #0
   8140a:	e775      	b.n	812f8 <Shellcom+0x58>
   8140c:	200011e4 	.word	0x200011e4
   81410:	200011ec 	.word	0x200011ec
   81414:	00081b2d 	.word	0x00081b2d
   81418:	00081971 	.word	0x00081971
   8141c:	08000001 	.word	0x08000001
   81420:	000869ec 	.word	0x000869ec
   81424:	400e0600 	.word	0x400e0600
   81428:	00081d1b 	.word	0x00081d1b
   8142c:	e000e100 	.word	0xe000e100
   81430:	00081d51 	.word	0x00081d51
   81434:	20000528 	.word	0x20000528
   81438:	200012ec 	.word	0x200012ec

0008143c <Taskman>:
 };


 /////////////////////////////////////////////////////////////////////////////
 uint32_t Taskman(uint32_t sc, ...)
 {
   8143c:	b40f      	push	{r0, r1, r2, r3}
   8143e:	b5f0      	push	{r4, r5, r6, r7, lr}
   81440:	b083      	sub	sp, #12
//	uint8_t criticalStatus;
	
	switch(sc)
   81442:	9908      	ldr	r1, [sp, #32]
   81444:	2964      	cmp	r1, #100	; 0x64
   81446:	d024      	beq.n	81492 <Taskman+0x56>
   81448:	d917      	bls.n	8147a <Taskman+0x3e>
   8144a:	2966      	cmp	r1, #102	; 0x66
   8144c:	d067      	beq.n	8151e <Taskman+0xe2>
   8144e:	2967      	cmp	r1, #103	; 0x67
   81450:	f040 80c8 	bne.w	815e4 <Taskman+0x1a8>
#undef k

		break;

	case TASKMAN_POP_TASK:
		if(taskman.pPop!=taskman.pPush)
   81454:	4a66      	ldr	r2, [pc, #408]	; (815f0 <Taskman+0x1b4>)
   81456:	6853      	ldr	r3, [r2, #4]
   81458:	6812      	ldr	r2, [r2, #0]
   8145a:	4293      	cmp	r3, r2
   8145c:	d059      	beq.n	81512 <Taskman+0xd6>
		{
			t_ptf	 func;
			void*	 pa;
			func = taskman.pPop->pFunc;
   8145e:	681a      	ldr	r2, [r3, #0]
			sc = taskman.pPop->sc;
   81460:	6858      	ldr	r0, [r3, #4]
   81462:	9008      	str	r0, [sp, #32]
			pa = taskman.pPop->pParam;
   81464:	6899      	ldr	r1, [r3, #8]
			taskman.pPop++;
   81466:	3310      	adds	r3, #16
			if(taskman.pPop>=tasks+TASKMAN_TASKS_LIST_LEN) taskman.pPop=tasks;
   81468:	4c62      	ldr	r4, [pc, #392]	; (815f4 <Taskman+0x1b8>)
   8146a:	42a3      	cmp	r3, r4
   8146c:	f0c0 80a3 	bcc.w	815b6 <Taskman+0x17a>
   81470:	4c61      	ldr	r4, [pc, #388]	; (815f8 <Taskman+0x1bc>)
   81472:	4b5f      	ldr	r3, [pc, #380]	; (815f0 <Taskman+0x1b4>)
   81474:	605c      	str	r4, [r3, #4]
			//Function call
			func(sc,pa);
   81476:	4790      	blx	r2
   81478:	e04b      	b.n	81512 <Taskman+0xd6>
	switch(sc)
   8147a:	2901      	cmp	r1, #1
   8147c:	f040 80b2 	bne.w	815e4 <Taskman+0x1a8>
		}
		break;

	//Private services implementation section /////////////////////////////////
	case _TASKMAN_DELAYED_TASK_PROC:
		gpio_toggle_pin(PIO_PA2_IDX);
   81480:	2002      	movs	r0, #2
   81482:	4b5e      	ldr	r3, [pc, #376]	; (815fc <Taskman+0x1c0>)
   81484:	4798      	blx	r3
#define k sc
		for(k=0;k<TASKMAN_DELAYED_TASKS_LIST_LEN;k++)
   81486:	2500      	movs	r5, #0
   81488:	9508      	str	r5, [sp, #32]
   8148a:	4c5d      	ldr	r4, [pc, #372]	; (81600 <Taskman+0x1c4>)
		{
			if(dTasks[k].delay)
			{
				if(--dTasks[k].delay==0)
				{
					PushTask(
   8148c:	462f      	mov	r7, r5
   8148e:	2666      	movs	r6, #102	; 0x66
   81490:	e099      	b.n	815c6 <Taskman+0x18a>
		taskman.pPop=taskman.pPush=tasks;
   81492:	4b57      	ldr	r3, [pc, #348]	; (815f0 <Taskman+0x1b4>)
   81494:	4a58      	ldr	r2, [pc, #352]	; (815f8 <Taskman+0x1bc>)
   81496:	601a      	str	r2, [r3, #0]
   81498:	605a      	str	r2, [r3, #4]
   8149a:	4b59      	ldr	r3, [pc, #356]	; (81600 <Taskman+0x1c4>)
   8149c:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
			dTasks[k].delay=0;
   814a0:	2200      	movs	r2, #0
   814a2:	60da      	str	r2, [r3, #12]
   814a4:	3310      	adds	r3, #16
		for(k=0;k<TASKMAN_DELAYED_TASKS_LIST_LEN;k++)
   814a6:	428b      	cmp	r3, r1
   814a8:	d1fb      	bne.n	814a2 <Taskman+0x66>
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   814aa:	4b56      	ldr	r3, [pc, #344]	; (81604 <Taskman+0x1c8>)
   814ac:	2202      	movs	r2, #2
   814ae:	661a      	str	r2, [r3, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   814b0:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   814b2:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   814b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   814b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
   814ba:	f021 0102 	bic.w	r1, r1, #2
   814be:	6719      	str	r1, [r3, #112]	; 0x70
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   814c0:	605a      	str	r2, [r3, #4]
   814c2:	2016      	movs	r0, #22
   814c4:	4b50      	ldr	r3, [pc, #320]	; (81608 <Taskman+0x1cc>)
   814c6:	4798      	blx	r3

	 //Configure the PMC to enable the TC module.
	 sysclk_enable_peripheral_clock(ID_TC_WAVEFORM);

	 //Init TC to waveform mode.
	 tc_init(
   814c8:	4c50      	ldr	r4, [pc, #320]	; (8160c <Taskman+0x1d0>)
   814ca:	4a51      	ldr	r2, [pc, #324]	; (81610 <Taskman+0x1d4>)
   814cc:	2100      	movs	r1, #0
   814ce:	4620      	mov	r0, r4
   814d0:	4b50      	ldr	r3, [pc, #320]	; (81614 <Taskman+0x1d8>)
   814d2:	4798      	blx	r3

	 //Configure waveform frequency and duty cycle.
	 rc =	(sysclk_get_peripheral_bus_hz(TC) /
	 TC_WAVEFORM_DIVISOR) /
	 TC_WAVEFORM_FREQUENCY;
	 tc_write_rc(TC, TC_CHANNEL_WAVEFORM, rc);
   814d4:	f240 22ee 	movw	r2, #750	; 0x2ee
   814d8:	2100      	movs	r1, #0
   814da:	4620      	mov	r0, r4
   814dc:	4b4e      	ldr	r3, [pc, #312]	; (81618 <Taskman+0x1dc>)
   814de:	4798      	blx	r3

	 ra = (100 - TC_WAVEFORM_DUTY_CYCLE) * rc / 100;
	 tc_write_ra(TC, TC_CHANNEL_WAVEFORM, ra);
   814e0:	f240 220d 	movw	r2, #525	; 0x20d
   814e4:	2100      	movs	r1, #0
   814e6:	4620      	mov	r0, r4
   814e8:	4b4c      	ldr	r3, [pc, #304]	; (8161c <Taskman+0x1e0>)
   814ea:	4798      	blx	r3

	 //Enable TC TC_CHANNEL_WAVEFORM
	 tc_start(TC, TC_CHANNEL_WAVEFORM);
   814ec:	2100      	movs	r1, #0
   814ee:	4620      	mov	r0, r4
   814f0:	4b4b      	ldr	r3, [pc, #300]	; (81620 <Taskman+0x1e4>)
   814f2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   814f4:	4b4b      	ldr	r3, [pc, #300]	; (81624 <Taskman+0x1e8>)
   814f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   814fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   814fe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81502:	2100      	movs	r1, #0
   81504:	f883 1316 	strb.w	r1, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81508:	601a      	str	r2, [r3, #0]
		tc_enable_interrupt(TC, TC_CHANNEL_WAVEFORM, TC_IER_CPAS);
   8150a:	2204      	movs	r2, #4
   8150c:	4620      	mov	r0, r4
   8150e:	4b46      	ldr	r3, [pc, #280]	; (81628 <Taskman+0x1ec>)
   81510:	4798      	blx	r3
 }
   81512:	2000      	movs	r0, #0
   81514:	b003      	add	sp, #12
   81516:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   8151a:	b004      	add	sp, #16
   8151c:	4770      	bx	lr
		cpu_irq_enter_critical();
   8151e:	4b43      	ldr	r3, [pc, #268]	; (8162c <Taskman+0x1f0>)
   81520:	4798      	blx	r3
		if(_delay)
   81522:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   81524:	b34d      	cbz	r5, 8157a <Taskman+0x13e>
			for(k=0;(k<TASKMAN_DELAYED_TASKS_LIST_LEN)&&(dTasks[k].delay);k++);
   81526:	2300      	movs	r3, #0
   81528:	9308      	str	r3, [sp, #32]
   8152a:	4b35      	ldr	r3, [pc, #212]	; (81600 <Taskman+0x1c4>)
   8152c:	68db      	ldr	r3, [r3, #12]
   8152e:	b1ab      	cbz	r3, 8155c <Taskman+0x120>
   81530:	2301      	movs	r3, #1
   81532:	9308      	str	r3, [sp, #32]
   81534:	4a32      	ldr	r2, [pc, #200]	; (81600 <Taskman+0x1c4>)
   81536:	2000      	movs	r0, #0
   81538:	461c      	mov	r4, r3
   8153a:	69d1      	ldr	r1, [r2, #28]
   8153c:	b159      	cbz	r1, 81556 <Taskman+0x11a>
   8153e:	3301      	adds	r3, #1
   81540:	3210      	adds	r2, #16
   81542:	4620      	mov	r0, r4
   81544:	2b0a      	cmp	r3, #10
   81546:	d1f8      	bne.n	8153a <Taskman+0xfe>
			if(k==TASKMAN_DELAYED_TASKS_LIST_LEN) Error(ERR_TASKMAN_DELAYED_TASKLIST_FULL, (uint32_t)0);
   81548:	4b39      	ldr	r3, [pc, #228]	; (81630 <Taskman+0x1f4>)
   8154a:	681b      	ldr	r3, [r3, #0]
   8154c:	2100      	movs	r1, #0
   8154e:	2016      	movs	r0, #22
   81550:	4798      	blx	r3
   81552:	230a      	movs	r3, #10
   81554:	e002      	b.n	8155c <Taskman+0x120>
   81556:	b970      	cbnz	r0, 81576 <Taskman+0x13a>
   81558:	2b0a      	cmp	r3, #10
   8155a:	d0f5      	beq.n	81548 <Taskman+0x10c>
			dTasks[k].pFunc=_func;
   8155c:	4928      	ldr	r1, [pc, #160]	; (81600 <Taskman+0x1c4>)
   8155e:	011b      	lsls	r3, r3, #4
   81560:	18ca      	adds	r2, r1, r3
   81562:	9809      	ldr	r0, [sp, #36]	; 0x24
   81564:	50c8      	str	r0, [r1, r3]
			dTasks[k].sc=_sc;
   81566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81568:	6053      	str	r3, [r2, #4]
			dTasks[k].pParam=_pParam;
   8156a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8156c:	6093      	str	r3, [r2, #8]
			dTasks[k].delay=_delay;
   8156e:	60d5      	str	r5, [r2, #12]
		cpu_irq_leave_critical();
   81570:	4b30      	ldr	r3, [pc, #192]	; (81634 <Taskman+0x1f8>)
   81572:	4798      	blx	r3
		break;
   81574:	e7cd      	b.n	81512 <Taskman+0xd6>
   81576:	9308      	str	r3, [sp, #32]
   81578:	e7ee      	b.n	81558 <Taskman+0x11c>
			taskman.pPush->pFunc=_func;
   8157a:	4b1d      	ldr	r3, [pc, #116]	; (815f0 <Taskman+0x1b4>)
   8157c:	681a      	ldr	r2, [r3, #0]
   8157e:	9909      	ldr	r1, [sp, #36]	; 0x24
   81580:	6011      	str	r1, [r2, #0]
			taskman.pPush->sc=_sc;
   81582:	681b      	ldr	r3, [r3, #0]
   81584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   81586:	605a      	str	r2, [r3, #4]
			taskman.pPush->pParam=_pParam;
   81588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8158a:	609a      	str	r2, [r3, #8]
			taskman.pPush++;
   8158c:	3310      	adds	r3, #16
			if(taskman.pPush>=tasks+TASKMAN_TASKS_LIST_LEN) taskman.pPush=tasks;
   8158e:	4a19      	ldr	r2, [pc, #100]	; (815f4 <Taskman+0x1b8>)
   81590:	4293      	cmp	r3, r2
   81592:	d20c      	bcs.n	815ae <Taskman+0x172>
			taskman.pPush++;
   81594:	4a16      	ldr	r2, [pc, #88]	; (815f0 <Taskman+0x1b4>)
   81596:	6013      	str	r3, [r2, #0]
			if(taskman.pPush==taskman.pPop) Error(ERR_TASKMAN_TASKLIST_FULL, (uint32_t)0);
   81598:	4b15      	ldr	r3, [pc, #84]	; (815f0 <Taskman+0x1b4>)
   8159a:	681a      	ldr	r2, [r3, #0]
   8159c:	685b      	ldr	r3, [r3, #4]
   8159e:	429a      	cmp	r2, r3
   815a0:	d1e6      	bne.n	81570 <Taskman+0x134>
   815a2:	4b23      	ldr	r3, [pc, #140]	; (81630 <Taskman+0x1f4>)
   815a4:	681b      	ldr	r3, [r3, #0]
   815a6:	2100      	movs	r1, #0
   815a8:	2015      	movs	r0, #21
   815aa:	4798      	blx	r3
   815ac:	e7e0      	b.n	81570 <Taskman+0x134>
			if(taskman.pPush>=tasks+TASKMAN_TASKS_LIST_LEN) taskman.pPush=tasks;
   815ae:	4a12      	ldr	r2, [pc, #72]	; (815f8 <Taskman+0x1bc>)
   815b0:	4b0f      	ldr	r3, [pc, #60]	; (815f0 <Taskman+0x1b4>)
   815b2:	601a      	str	r2, [r3, #0]
   815b4:	e7f0      	b.n	81598 <Taskman+0x15c>
			taskman.pPop++;
   815b6:	4c0e      	ldr	r4, [pc, #56]	; (815f0 <Taskman+0x1b4>)
   815b8:	6063      	str	r3, [r4, #4]
   815ba:	e75c      	b.n	81476 <Taskman+0x3a>
		for(k=0;k<TASKMAN_DELAYED_TASKS_LIST_LEN;k++)
   815bc:	3501      	adds	r5, #1
   815be:	9508      	str	r5, [sp, #32]
   815c0:	3410      	adds	r4, #16
   815c2:	2d0a      	cmp	r5, #10
   815c4:	d0a5      	beq.n	81512 <Taskman+0xd6>
			if(dTasks[k].delay)
   815c6:	68e3      	ldr	r3, [r4, #12]
   815c8:	2b00      	cmp	r3, #0
   815ca:	d0f7      	beq.n	815bc <Taskman+0x180>
				if(--dTasks[k].delay==0)
   815cc:	3b01      	subs	r3, #1
   815ce:	60e3      	str	r3, [r4, #12]
   815d0:	2b00      	cmp	r3, #0
   815d2:	d1f3      	bne.n	815bc <Taskman+0x180>
					PushTask(
   815d4:	68a3      	ldr	r3, [r4, #8]
   815d6:	6862      	ldr	r2, [r4, #4]
   815d8:	6821      	ldr	r1, [r4, #0]
   815da:	9700      	str	r7, [sp, #0]
   815dc:	4630      	mov	r0, r6
   815de:	f7ff ff2d 	bl	8143c <Taskman>
   815e2:	e7eb      	b.n	815bc <Taskman+0x180>
		Error(ERR_TASKMAN_SWITCH_BAD_SC, sc);
   815e4:	4b12      	ldr	r3, [pc, #72]	; (81630 <Taskman+0x1f4>)
   815e6:	681b      	ldr	r3, [r3, #0]
   815e8:	200b      	movs	r0, #11
   815ea:	4798      	blx	r3
	return 0;
   815ec:	e791      	b.n	81512 <Taskman+0xd6>
   815ee:	bf00      	nop
   815f0:	2000138c 	.word	0x2000138c
   815f4:	2000138c 	.word	0x2000138c
   815f8:	200012ec 	.word	0x200012ec
   815fc:	0008194f 	.word	0x0008194f
   81600:	20001394 	.word	0x20001394
   81604:	400e0c00 	.word	0x400e0c00
   81608:	00081b2d 	.word	0x00081b2d
   8160c:	40080000 	.word	0x40080000
   81610:	0009c003 	.word	0x0009c003
   81614:	00081cdb 	.word	0x00081cdb
   81618:	00081d03 	.word	0x00081d03
   8161c:	00081cfb 	.word	0x00081cfb
   81620:	00081cf3 	.word	0x00081cf3
   81624:	e000e100 	.word	0xe000e100
   81628:	00081d0b 	.word	0x00081d0b
   8162c:	00081d6d 	.word	0x00081d6d
   81630:	20000528 	.word	0x20000528
   81634:	00081da9 	.word	0x00081da9

00081638 <TC0_Handler>:
 {
   81638:	b508      	push	{r3, lr}
	 tc_get_status(TC, TC_CHANNEL_WAVEFORM);
   8163a:	2100      	movs	r1, #0
   8163c:	4803      	ldr	r0, [pc, #12]	; (8164c <TC0_Handler+0x14>)
   8163e:	4b04      	ldr	r3, [pc, #16]	; (81650 <TC0_Handler+0x18>)
   81640:	4798      	blx	r3
	 Taskman(_TASKMAN_DELAYED_TASK_PROC);
   81642:	2001      	movs	r0, #1
   81644:	4b03      	ldr	r3, [pc, #12]	; (81654 <TC0_Handler+0x1c>)
   81646:	4798      	blx	r3
   81648:	bd08      	pop	{r3, pc}
   8164a:	bf00      	nop
   8164c:	40080000 	.word	0x40080000
   81650:	00081d13 	.word	0x00081d13
   81654:	0008143d 	.word	0x0008143d

00081658 <Appli>:
 #include "./Headers/appli.h"

 uint32_t Appli(uint32_t sc, ...)
 {
   81658:	b40f      	push	{r0, r1, r2, r3}
   8165a:	b538      	push	{r3, r4, r5, lr}
   8165c:	9904      	ldr	r1, [sp, #16]
	switch (sc)
   8165e:	2964      	cmp	r1, #100	; 0x64
   81660:	d006      	beq.n	81670 <Appli+0x18>
   81662:	2966      	cmp	r1, #102	; 0x66
   81664:	d051      	beq.n	8170a <Appli+0xb2>
		LcdPutstr("Hello World 2",2,2);
		LcdPutstr("Hello World 3",3,3);
		Putstr("LCD Hello World!\r\n");
		break;
	default:
		Error(ERR_APPLI_SWITCH_BAD_SC, sc);
   81666:	4b36      	ldr	r3, [pc, #216]	; (81740 <Appli+0xe8>)
   81668:	681b      	ldr	r3, [r3, #0]
   8166a:	200f      	movs	r0, #15
   8166c:	4798      	blx	r3
   8166e:	e047      	b.n	81700 <Appli+0xa8>
		gpio_configure_pin(CMD_MOSFET,			CMD_MOSFET_FLAGS);
   81670:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81674:	2020      	movs	r0, #32
   81676:	4c33      	ldr	r4, [pc, #204]	; (81744 <Appli+0xec>)
   81678:	47a0      	blx	r4
		gpio_configure_pin(CMD_MOT_SERRURE,		CMD_MOT_SERRURE_FLAGS);
   8167a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8167e:	2021      	movs	r0, #33	; 0x21
   81680:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS,			CMD_RELAIS_FLAGS);
   81682:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81686:	2022      	movs	r0, #34	; 0x22
   81688:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS_1,		CMD_RELAIS_1_FLAGS);
   8168a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8168e:	2023      	movs	r0, #35	; 0x23
   81690:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS_2,		CMD_RELAIS_2_FLAGS);
   81692:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81696:	2024      	movs	r0, #36	; 0x24
   81698:	47a0      	blx	r4
		pmc_enable_periph_clk(ID_PIOA);
   8169a:	200a      	movs	r0, #10
   8169c:	4d2a      	ldr	r5, [pc, #168]	; (81748 <Appli+0xf0>)
   8169e:	47a8      	blx	r5
		pmc_enable_periph_clk(ID_PIOB);
   816a0:	200b      	movs	r0, #11
   816a2:	47a8      	blx	r5
		gpio_configure_pin(PENE_OUVERT,			PENE_OUVERT_FLAGS);
   816a4:	4d29      	ldr	r5, [pc, #164]	; (8174c <Appli+0xf4>)
   816a6:	4629      	mov	r1, r5
   816a8:	200e      	movs	r0, #14
   816aa:	47a0      	blx	r4
		gpio_configure_pin(PENE_FERME,			PENE_FERME_FLAGS);
   816ac:	4629      	mov	r1, r5
   816ae:	200f      	movs	r0, #15
   816b0:	47a0      	blx	r4
		gpio_configure_pin(IN_ILS,				IN_ILS_FLAGS);
   816b2:	4629      	mov	r1, r5
   816b4:	2010      	movs	r0, #16
   816b6:	47a0      	blx	r4
		gpio_configure_pin(IN_SV,				IN_SV_FLAGS);
   816b8:	4629      	mov	r1, r5
   816ba:	2011      	movs	r0, #17
   816bc:	47a0      	blx	r4
		gpio_configure_pin(IN_RADAR,			IN_RADAR_FLAGS);
   816be:	4629      	mov	r1, r5
   816c0:	2018      	movs	r0, #24
   816c2:	47a0      	blx	r4
		gpio_configure_pin(IN_DVU,				IN_DVU_FLAGS);
   816c4:	4629      	mov	r1, r5
   816c6:	2019      	movs	r0, #25
   816c8:	47a0      	blx	r4
		gpio_configure_pin(IN_PREMIERE_ENTREE,	IN_PREMIERE_ENTREE_FLAGS);
   816ca:	4629      	mov	r1, r5
   816cc:	201a      	movs	r0, #26
   816ce:	47a0      	blx	r4
		gpio_configure_pin(IN_DVU_GENERAL,		IN_DVU_GENERAL_FLAGS);
   816d0:	4629      	mov	r1, r5
   816d2:	201b      	movs	r0, #27
   816d4:	47a0      	blx	r4
		gpio_configure_pin(IN_ENTREE_LIBRE,		IN_ENTREE_OPTION_FLAGS);
   816d6:	4629      	mov	r1, r5
   816d8:	201c      	movs	r0, #28
   816da:	47a0      	blx	r4
		gpio_configure_pin(IN_ENTREE_OPTION,	IN_ENTREE_OPTION_FLAGS);
   816dc:	4629      	mov	r1, r5
   816de:	201d      	movs	r0, #29
   816e0:	47a0      	blx	r4
		Putstr("\r\n\n\t*______________ CPU.ACX-ATSAM3U4CA-AU ______________*\r\n\n");
   816e2:	491b      	ldr	r1, [pc, #108]	; (81750 <Appli+0xf8>)
   816e4:	2067      	movs	r0, #103	; 0x67
   816e6:	4b1b      	ldr	r3, [pc, #108]	; (81754 <Appli+0xfc>)
   816e8:	4798      	blx	r3
		LcdPutstr("CPU.ACX  ATSAM3U4C",2,1);
   816ea:	2301      	movs	r3, #1
   816ec:	2202      	movs	r2, #2
   816ee:	491a      	ldr	r1, [pc, #104]	; (81758 <Appli+0x100>)
   816f0:	2067      	movs	r0, #103	; 0x67
   816f2:	4c1a      	ldr	r4, [pc, #104]	; (8175c <Appli+0x104>)
   816f4:	47a0      	blx	r4
		LcdPutstr("www.a-2-s.fr",3,4);
   816f6:	2304      	movs	r3, #4
   816f8:	2203      	movs	r2, #3
   816fa:	4919      	ldr	r1, [pc, #100]	; (81760 <Appli+0x108>)
   816fc:	2067      	movs	r0, #103	; 0x67
   816fe:	47a0      	blx	r4
	}
	return 0;
 }
   81700:	2000      	movs	r0, #0
   81702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81706:	b004      	add	sp, #16
   81708:	4770      	bx	lr
		LcdPutstr("Hello World 0",0,0);
   8170a:	2300      	movs	r3, #0
   8170c:	461a      	mov	r2, r3
   8170e:	4915      	ldr	r1, [pc, #84]	; (81764 <Appli+0x10c>)
   81710:	2067      	movs	r0, #103	; 0x67
   81712:	4c12      	ldr	r4, [pc, #72]	; (8175c <Appli+0x104>)
   81714:	47a0      	blx	r4
		LcdPutstr("Hello World 1",1,1);
   81716:	2301      	movs	r3, #1
   81718:	461a      	mov	r2, r3
   8171a:	4913      	ldr	r1, [pc, #76]	; (81768 <Appli+0x110>)
   8171c:	2067      	movs	r0, #103	; 0x67
   8171e:	47a0      	blx	r4
		LcdPutstr("Hello World 2",2,2);
   81720:	2302      	movs	r3, #2
   81722:	461a      	mov	r2, r3
   81724:	4911      	ldr	r1, [pc, #68]	; (8176c <Appli+0x114>)
   81726:	2067      	movs	r0, #103	; 0x67
   81728:	47a0      	blx	r4
		LcdPutstr("Hello World 3",3,3);
   8172a:	2303      	movs	r3, #3
   8172c:	461a      	mov	r2, r3
   8172e:	4910      	ldr	r1, [pc, #64]	; (81770 <Appli+0x118>)
   81730:	2067      	movs	r0, #103	; 0x67
   81732:	47a0      	blx	r4
		Putstr("LCD Hello World!\r\n");
   81734:	490f      	ldr	r1, [pc, #60]	; (81774 <Appli+0x11c>)
   81736:	2067      	movs	r0, #103	; 0x67
   81738:	4b06      	ldr	r3, [pc, #24]	; (81754 <Appli+0xfc>)
   8173a:	4798      	blx	r3
		break;
   8173c:	e7e0      	b.n	81700 <Appli+0xa8>
   8173e:	bf00      	nop
   81740:	20000528 	.word	0x20000528
   81744:	00081971 	.word	0x00081971
   81748:	00081b2d 	.word	0x00081b2d
   8174c:	28000001 	.word	0x28000001
   81750:	000869f8 	.word	0x000869f8
   81754:	000812a1 	.word	0x000812a1
   81758:	00086a38 	.word	0x00086a38
   8175c:	0008091d 	.word	0x0008091d
   81760:	00086a4c 	.word	0x00086a4c
   81764:	00086a5c 	.word	0x00086a5c
   81768:	00086a6c 	.word	0x00086a6c
   8176c:	00086a7c 	.word	0x00086a7c
   81770:	00086a8c 	.word	0x00086a8c
   81774:	00086a9c 	.word	0x00086a9c

00081778 <main>:
#include ".\Headers\appli.h"
char buf[512];
int main (void)
{
   81778:	b500      	push	{lr}
   8177a:	b083      	sub	sp, #12
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8177c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8177e:	f3bf 8f5f 	dmb	sy
	/*Insert system clock initialization code here (sysclk_init()). */
	cpu_irq_disable();
   81782:	4e10      	ldr	r6, [pc, #64]	; (817c4 <main+0x4c>)
   81784:	2400      	movs	r4, #0
   81786:	7034      	strb	r4, [r6, #0]
	wdt_disable(WDT);
   81788:	480f      	ldr	r0, [pc, #60]	; (817c8 <main+0x50>)
   8178a:	4b10      	ldr	r3, [pc, #64]	; (817cc <main+0x54>)
   8178c:	4798      	blx	r3
	sysclk_init();
   8178e:	4b10      	ldr	r3, [pc, #64]	; (817d0 <main+0x58>)
   81790:	4798      	blx	r3
	board_init();
   81792:	4b10      	ldr	r3, [pc, #64]	; (817d4 <main+0x5c>)
   81794:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());

	/*Insert application code here, after the board has been initialized. */
	Taskman(TASKMAN_NEW);
   81796:	2064      	movs	r0, #100	; 0x64
   81798:	4d0f      	ldr	r5, [pc, #60]	; (817d8 <main+0x60>)
   8179a:	47a8      	blx	r5
	Shell(SHELL_NEW);
   8179c:	2064      	movs	r0, #100	; 0x64
   8179e:	4b0f      	ldr	r3, [pc, #60]	; (817dc <main+0x64>)
   817a0:	4798      	blx	r3
	
	cpu_irq_enable();
   817a2:	2301      	movs	r3, #1
   817a4:	7033      	strb	r3, [r6, #0]
   817a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   817aa:	b662      	cpsie	i
	PushTask(Appli, APPLI_NEW, 0, 0);
   817ac:	9400      	str	r4, [sp, #0]
   817ae:	4623      	mov	r3, r4
   817b0:	2264      	movs	r2, #100	; 0x64
   817b2:	490b      	ldr	r1, [pc, #44]	; (817e0 <main+0x68>)
   817b4:	2066      	movs	r0, #102	; 0x66
   817b6:	47a8      	blx	r5
	for(;;)
	{
		PopTask();
   817b8:	2567      	movs	r5, #103	; 0x67
   817ba:	4c07      	ldr	r4, [pc, #28]	; (817d8 <main+0x60>)
   817bc:	4628      	mov	r0, r5
   817be:	47a0      	blx	r4
   817c0:	e7fc      	b.n	817bc <main+0x44>
   817c2:	bf00      	nop
   817c4:	20000578 	.word	0x20000578
   817c8:	400e1250 	.word	0x400e1250
   817cc:	000803ad 	.word	0x000803ad
   817d0:	000817e5 	.word	0x000817e5
   817d4:	00081d69 	.word	0x00081d69
   817d8:	0008143d 	.word	0x0008143d
   817dc:	00080edd 	.word	0x00080edd
   817e0:	00081659 	.word	0x00081659

000817e4 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   817e4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   817e6:	4812      	ldr	r0, [pc, #72]	; (81830 <sysclk_init+0x4c>)
   817e8:	4b12      	ldr	r3, [pc, #72]	; (81834 <sysclk_init+0x50>)
   817ea:	4798      	blx	r3
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   817ec:	203e      	movs	r0, #62	; 0x3e
   817ee:	4b12      	ldr	r3, [pc, #72]	; (81838 <sysclk_init+0x54>)
   817f0:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   817f2:	4c12      	ldr	r4, [pc, #72]	; (8183c <sysclk_init+0x58>)
   817f4:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   817f6:	2800      	cmp	r0, #0
   817f8:	d0fc      	beq.n	817f4 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   817fa:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   817fe:	4b10      	ldr	r3, [pc, #64]	; (81840 <sysclk_init+0x5c>)
   81800:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   81802:	4c10      	ldr	r4, [pc, #64]	; (81844 <sysclk_init+0x60>)
   81804:	47a0      	blx	r4
   81806:	2800      	cmp	r0, #0
   81808:	d0fc      	beq.n	81804 <sysclk_init+0x20>
		uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8180a:	4b0f      	ldr	r3, [pc, #60]	; (81848 <sysclk_init+0x64>)
   8180c:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8180e:	4a0f      	ldr	r2, [pc, #60]	; (8184c <sysclk_init+0x68>)
   81810:	4b0f      	ldr	r3, [pc, #60]	; (81850 <sysclk_init+0x6c>)
   81812:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81814:	4c0f      	ldr	r4, [pc, #60]	; (81854 <sysclk_init+0x70>)
   81816:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81818:	2800      	cmp	r0, #0
   8181a:	d0fc      	beq.n	81816 <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8181c:	2010      	movs	r0, #16
   8181e:	4b0e      	ldr	r3, [pc, #56]	; (81858 <sysclk_init+0x74>)
   81820:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81822:	4b0e      	ldr	r3, [pc, #56]	; (8185c <sysclk_init+0x78>)
   81824:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81826:	4802      	ldr	r0, [pc, #8]	; (81830 <sysclk_init+0x4c>)
   81828:	4b02      	ldr	r3, [pc, #8]	; (81834 <sysclk_init+0x50>)
   8182a:	4798      	blx	r3
   8182c:	bd10      	pop	{r4, pc}
   8182e:	bf00      	nop
   81830:	05b8d800 	.word	0x05b8d800
   81834:	200000b5 	.word	0x200000b5
   81838:	00081aa5 	.word	0x00081aa5
   8183c:	00081acd 	.word	0x00081acd
   81840:	00081aed 	.word	0x00081aed
   81844:	00081add 	.word	0x00081add
   81848:	00081b0d 	.word	0x00081b0d
   8184c:	200f3f01 	.word	0x200f3f01
   81850:	400e0400 	.word	0x400e0400
   81854:	00081b1d 	.word	0x00081b1d
   81858:	00081a41 	.word	0x00081a41
   8185c:	00081e71 	.word	0x00081e71

00081860 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81860:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81862:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81866:	d016      	beq.n	81896 <pio_set_peripheral+0x36>
   81868:	d80b      	bhi.n	81882 <pio_set_peripheral+0x22>
   8186a:	b149      	cbz	r1, 81880 <pio_set_peripheral+0x20>
   8186c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81870:	d105      	bne.n	8187e <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81872:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81874:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81876:	400b      	ands	r3, r1
   81878:	ea23 0302 	bic.w	r3, r3, r2
   8187c:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8187e:	6042      	str	r2, [r0, #4]
   81880:	4770      	bx	lr
	switch (ul_type) {
   81882:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81886:	d0fb      	beq.n	81880 <pio_set_peripheral+0x20>
   81888:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8188c:	d0f8      	beq.n	81880 <pio_set_peripheral+0x20>
   8188e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81892:	d1f4      	bne.n	8187e <pio_set_peripheral+0x1e>
   81894:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81896:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81898:	4313      	orrs	r3, r2
   8189a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8189c:	e7ef      	b.n	8187e <pio_set_peripheral+0x1e>

0008189e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8189e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   818a0:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   818a4:	bf14      	ite	ne
   818a6:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   818a8:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   818aa:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   818ae:	bf14      	ite	ne
   818b0:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   818b2:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   818b4:	f012 0f02 	tst.w	r2, #2
   818b8:	d107      	bne.n	818ca <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   818ba:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   818be:	bf18      	it	ne
   818c0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   818c4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   818c6:	6001      	str	r1, [r0, #0]
   818c8:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   818ca:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   818ce:	e7f9      	b.n	818c4 <pio_set_input+0x26>

000818d0 <pio_set_output>:
{
   818d0:	b410      	push	{r4}
   818d2:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   818d4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   818d6:	b944      	cbnz	r4, 818ea <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   818d8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   818da:	b143      	cbz	r3, 818ee <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   818dc:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   818de:	b942      	cbnz	r2, 818f2 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   818e0:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   818e2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   818e4:	6001      	str	r1, [r0, #0]
}
   818e6:	bc10      	pop	{r4}
   818e8:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   818ea:	6641      	str	r1, [r0, #100]	; 0x64
   818ec:	e7f5      	b.n	818da <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   818ee:	6541      	str	r1, [r0, #84]	; 0x54
   818f0:	e7f5      	b.n	818de <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   818f2:	6301      	str	r1, [r0, #48]	; 0x30
   818f4:	e7f5      	b.n	818e2 <pio_set_output+0x12>

000818f6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   818f6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   818f8:	4770      	bx	lr

000818fa <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   818fa:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   818fc:	4770      	bx	lr

000818fe <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   818fe:	0943      	lsrs	r3, r0, #5
   81900:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81904:	f203 7306 	addw	r3, r3, #1798	; 0x706
   81908:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   8190a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8190c:	f000 001f 	and.w	r0, r0, #31
   81910:	fa23 f000 	lsr.w	r0, r3, r0
}
   81914:	f000 0001 	and.w	r0, r0, #1
   81918:	4770      	bx	lr

0008191a <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8191a:	0943      	lsrs	r3, r0, #5
   8191c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81920:	f203 7306 	addw	r3, r3, #1798	; 0x706
   81924:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81926:	f000 001f 	and.w	r0, r0, #31
   8192a:	2201      	movs	r2, #1
   8192c:	fa02 f000 	lsl.w	r0, r2, r0
   81930:	6318      	str	r0, [r3, #48]	; 0x30
   81932:	4770      	bx	lr

00081934 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81934:	0943      	lsrs	r3, r0, #5
   81936:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8193a:	f203 7306 	addw	r3, r3, #1798	; 0x706
   8193e:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81940:	f000 001f 	and.w	r0, r0, #31
   81944:	2201      	movs	r2, #1
   81946:	fa02 f000 	lsl.w	r0, r2, r0
   8194a:	6358      	str	r0, [r3, #52]	; 0x34
   8194c:	4770      	bx	lr

0008194e <pio_toggle_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8194e:	0943      	lsrs	r3, r0, #5
   81950:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81954:	f203 7306 	addw	r3, r3, #1798	; 0x706
   81958:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   8195a:	6b99      	ldr	r1, [r3, #56]	; 0x38
   8195c:	f000 021f 	and.w	r2, r0, #31
   81960:	2001      	movs	r0, #1
   81962:	4090      	lsls	r0, r2
   81964:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81966:	bf14      	ite	ne
   81968:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8196a:	6318      	streq	r0, [r3, #48]	; 0x30
   8196c:	4770      	bx	lr
	...

00081970 <pio_configure_pin>:
{
   81970:	b570      	push	{r4, r5, r6, lr}
   81972:	b082      	sub	sp, #8
   81974:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81976:	0943      	lsrs	r3, r0, #5
   81978:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8197c:	f203 7306 	addw	r3, r3, #1798	; 0x706
   81980:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81982:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81986:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8198a:	d031      	beq.n	819f0 <pio_configure_pin+0x80>
   8198c:	d816      	bhi.n	819bc <pio_configure_pin+0x4c>
   8198e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81992:	d01b      	beq.n	819cc <pio_configure_pin+0x5c>
   81994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81998:	d116      	bne.n	819c8 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8199a:	f000 001f 	and.w	r0, r0, #31
   8199e:	2601      	movs	r6, #1
   819a0:	4086      	lsls	r6, r0
   819a2:	4632      	mov	r2, r6
   819a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   819a8:	4620      	mov	r0, r4
   819aa:	4b22      	ldr	r3, [pc, #136]	; (81a34 <pio_configure_pin+0xc4>)
   819ac:	4798      	blx	r3
	if (ul_pull_up_enable) {
   819ae:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   819b2:	bf14      	ite	ne
   819b4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   819b6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   819b8:	2001      	movs	r0, #1
   819ba:	e017      	b.n	819ec <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   819bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   819c0:	d021      	beq.n	81a06 <pio_configure_pin+0x96>
   819c2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   819c6:	d01e      	beq.n	81a06 <pio_configure_pin+0x96>
		return 0;
   819c8:	2000      	movs	r0, #0
   819ca:	e00f      	b.n	819ec <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   819cc:	f000 001f 	and.w	r0, r0, #31
   819d0:	2601      	movs	r6, #1
   819d2:	4086      	lsls	r6, r0
   819d4:	4632      	mov	r2, r6
   819d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819da:	4620      	mov	r0, r4
   819dc:	4b15      	ldr	r3, [pc, #84]	; (81a34 <pio_configure_pin+0xc4>)
   819de:	4798      	blx	r3
	if (ul_pull_up_enable) {
   819e0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   819e4:	bf14      	ite	ne
   819e6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   819e8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   819ea:	2001      	movs	r0, #1
}
   819ec:	b002      	add	sp, #8
   819ee:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   819f0:	f000 011f 	and.w	r1, r0, #31
   819f4:	2601      	movs	r6, #1
   819f6:	462a      	mov	r2, r5
   819f8:	fa06 f101 	lsl.w	r1, r6, r1
   819fc:	4620      	mov	r0, r4
   819fe:	4b0e      	ldr	r3, [pc, #56]	; (81a38 <pio_configure_pin+0xc8>)
   81a00:	4798      	blx	r3
	return 1;
   81a02:	4630      	mov	r0, r6
		break;
   81a04:	e7f2      	b.n	819ec <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81a06:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81a0a:	f000 011f 	and.w	r1, r0, #31
   81a0e:	2601      	movs	r6, #1
   81a10:	ea05 0306 	and.w	r3, r5, r6
   81a14:	9300      	str	r3, [sp, #0]
   81a16:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81a1a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81a1e:	bf14      	ite	ne
   81a20:	2200      	movne	r2, #0
   81a22:	2201      	moveq	r2, #1
   81a24:	fa06 f101 	lsl.w	r1, r6, r1
   81a28:	4620      	mov	r0, r4
   81a2a:	4c04      	ldr	r4, [pc, #16]	; (81a3c <pio_configure_pin+0xcc>)
   81a2c:	47a0      	blx	r4
	return 1;
   81a2e:	4630      	mov	r0, r6
		break;
   81a30:	e7dc      	b.n	819ec <pio_configure_pin+0x7c>
   81a32:	bf00      	nop
   81a34:	00081861 	.word	0x00081861
   81a38:	0008189f 	.word	0x0008189f
   81a3c:	000818d1 	.word	0x000818d1

00081a40 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81a40:	4a17      	ldr	r2, [pc, #92]	; (81aa0 <pmc_switch_mck_to_pllack+0x60>)
   81a42:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81a48:	4318      	orrs	r0, r3
   81a4a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81a4c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81a4e:	f013 0f08 	tst.w	r3, #8
   81a52:	d10a      	bne.n	81a6a <pmc_switch_mck_to_pllack+0x2a>
   81a54:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81a58:	4911      	ldr	r1, [pc, #68]	; (81aa0 <pmc_switch_mck_to_pllack+0x60>)
   81a5a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81a5c:	f012 0f08 	tst.w	r2, #8
   81a60:	d103      	bne.n	81a6a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81a62:	3b01      	subs	r3, #1
   81a64:	d1f9      	bne.n	81a5a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   81a66:	2001      	movs	r0, #1
   81a68:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81a6a:	4a0d      	ldr	r2, [pc, #52]	; (81aa0 <pmc_switch_mck_to_pllack+0x60>)
   81a6c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81a6e:	f023 0303 	bic.w	r3, r3, #3
   81a72:	f043 0302 	orr.w	r3, r3, #2
   81a76:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81a78:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81a7a:	f013 0f08 	tst.w	r3, #8
   81a7e:	d10a      	bne.n	81a96 <pmc_switch_mck_to_pllack+0x56>
   81a80:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81a84:	4906      	ldr	r1, [pc, #24]	; (81aa0 <pmc_switch_mck_to_pllack+0x60>)
   81a86:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81a88:	f012 0f08 	tst.w	r2, #8
   81a8c:	d105      	bne.n	81a9a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81a8e:	3b01      	subs	r3, #1
   81a90:	d1f9      	bne.n	81a86 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   81a92:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81a94:	4770      	bx	lr
	return 0;
   81a96:	2000      	movs	r0, #0
   81a98:	4770      	bx	lr
   81a9a:	2000      	movs	r0, #0
   81a9c:	4770      	bx	lr
   81a9e:	bf00      	nop
   81aa0:	400e0400 	.word	0x400e0400

00081aa4 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   81aa4:	4a08      	ldr	r2, [pc, #32]	; (81ac8 <pmc_osc_enable_main_xtal+0x24>)
   81aa6:	6a13      	ldr	r3, [r2, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   81aa8:	f023 0303 	bic.w	r3, r3, #3
   81aac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81ab0:	f043 0301 	orr.w	r3, r3, #1
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81ab4:	0200      	lsls	r0, r0, #8
   81ab6:	b280      	uxth	r0, r0
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81ab8:	4303      	orrs	r3, r0
	PMC->CKGR_MOR = mor;
   81aba:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81abc:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81abe:	f013 0f01 	tst.w	r3, #1
   81ac2:	d0fb      	beq.n	81abc <pmc_osc_enable_main_xtal+0x18>
}
   81ac4:	4770      	bx	lr
   81ac6:	bf00      	nop
   81ac8:	400e0400 	.word	0x400e0400

00081acc <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   81acc:	4b02      	ldr	r3, [pc, #8]	; (81ad8 <pmc_osc_is_ready_main_xtal+0xc>)
   81ace:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81ad0:	f000 0001 	and.w	r0, r0, #1
   81ad4:	4770      	bx	lr
   81ad6:	bf00      	nop
   81ad8:	400e0400 	.word	0x400e0400

00081adc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81adc:	4b02      	ldr	r3, [pc, #8]	; (81ae8 <pmc_osc_is_ready_mainck+0xc>)
   81ade:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81ae0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81ae4:	4770      	bx	lr
   81ae6:	bf00      	nop
   81ae8:	400e0400 	.word	0x400e0400

00081aec <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   81aec:	4b06      	ldr	r3, [pc, #24]	; (81b08 <pmc_mainck_osc_select+0x1c>)
   81aee:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   81af0:	b930      	cbnz	r0, 81b00 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   81af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   81af6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81afa:	4a03      	ldr	r2, [pc, #12]	; (81b08 <pmc_mainck_osc_select+0x1c>)
   81afc:	6213      	str	r3, [r2, #32]
   81afe:	4770      	bx	lr
		mor |=  CKGR_MOR_MOSCSEL;
   81b00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   81b04:	e7f7      	b.n	81af6 <pmc_mainck_osc_select+0xa>
   81b06:	bf00      	nop
   81b08:	400e0400 	.word	0x400e0400

00081b0c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81b0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81b10:	4b01      	ldr	r3, [pc, #4]	; (81b18 <pmc_disable_pllack+0xc>)
   81b12:	629a      	str	r2, [r3, #40]	; 0x28
   81b14:	4770      	bx	lr
   81b16:	bf00      	nop
   81b18:	400e0400 	.word	0x400e0400

00081b1c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81b1c:	4b02      	ldr	r3, [pc, #8]	; (81b28 <pmc_is_locked_pllack+0xc>)
   81b1e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81b20:	f000 0002 	and.w	r0, r0, #2
   81b24:	4770      	bx	lr
   81b26:	bf00      	nop
   81b28:	400e0400 	.word	0x400e0400

00081b2c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81b2c:	281d      	cmp	r0, #29
   81b2e:	d80e      	bhi.n	81b4e <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   81b30:	281f      	cmp	r0, #31
   81b32:	d80e      	bhi.n	81b52 <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81b34:	4b09      	ldr	r3, [pc, #36]	; (81b5c <pmc_enable_periph_clk+0x30>)
   81b36:	699a      	ldr	r2, [r3, #24]
   81b38:	2301      	movs	r3, #1
   81b3a:	4083      	lsls	r3, r0
   81b3c:	4393      	bics	r3, r2
   81b3e:	d00a      	beq.n	81b56 <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   81b40:	2301      	movs	r3, #1
   81b42:	fa03 f000 	lsl.w	r0, r3, r0
   81b46:	4b05      	ldr	r3, [pc, #20]	; (81b5c <pmc_enable_periph_clk+0x30>)
   81b48:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81b4a:	2000      	movs	r0, #0
   81b4c:	4770      	bx	lr
		return 1;
   81b4e:	2001      	movs	r0, #1
   81b50:	4770      	bx	lr
	return 0;
   81b52:	2000      	movs	r0, #0
   81b54:	4770      	bx	lr
   81b56:	2000      	movs	r0, #0
}
   81b58:	4770      	bx	lr
   81b5a:	bf00      	nop
   81b5c:	400e0400 	.word	0x400e0400

00081b60 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
   81b60:	b921      	cbnz	r1, 81b6c <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
   81b62:	6843      	ldr	r3, [r0, #4]
   81b64:	f023 0301 	bic.w	r3, r3, #1
   81b68:	6043      	str	r3, [r0, #4]
   81b6a:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
   81b6c:	6843      	ldr	r3, [r0, #4]
   81b6e:	f043 0301 	orr.w	r3, r3, #1
   81b72:	6043      	str	r3, [r0, #4]
   81b74:	4770      	bx	lr

00081b76 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
   81b76:	6201      	str	r1, [r0, #32]
   81b78:	4770      	bx	lr

00081b7a <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
   81b7a:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
   81b7c:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   81b7e:	6884      	ldr	r4, [r0, #8]
   81b80:	42a5      	cmp	r5, r4
   81b82:	d003      	beq.n	81b8c <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
   81b84:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   81b86:	6884      	ldr	r4, [r0, #8]
   81b88:	42ac      	cmp	r4, r5
   81b8a:	d1fb      	bne.n	81b84 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
   81b8c:	b161      	cbz	r1, 81ba8 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   81b8e:	f3c4 5001 	ubfx	r0, r4, #20, #2
   81b92:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   81b96:	f3c4 4003 	ubfx	r0, r4, #16, #4
   81b9a:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
   81b9e:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
   81ba2:	bf18      	it	ne
   81ba4:	300c      	addne	r0, #12
   81ba6:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
   81ba8:	b142      	cbz	r2, 81bbc <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
   81baa:	f3c4 3102 	ubfx	r1, r4, #12, #3
   81bae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   81bb2:	f3c4 2003 	ubfx	r0, r4, #8, #4
   81bb6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
   81bba:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
   81bbc:	b143      	cbz	r3, 81bd0 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   81bbe:	f3c4 1202 	ubfx	r2, r4, #4, #3
   81bc2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81bc6:	f004 040f 	and.w	r4, r4, #15
   81bca:	eb04 0442 	add.w	r4, r4, r2, lsl #1
   81bce:	601c      	str	r4, [r3, #0]
	}
}
   81bd0:	bc30      	pop	{r4, r5}
   81bd2:	4770      	bx	lr

00081bd4 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
   81bd4:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
   81bd6:	6844      	ldr	r4, [r0, #4]
   81bd8:	f014 0f01 	tst.w	r4, #1
   81bdc:	d005      	beq.n	81bea <rtc_set_time+0x16>
		if (ul_hour > 12) {
   81bde:	290c      	cmp	r1, #12
   81be0:	d93d      	bls.n	81c5e <rtc_set_time+0x8a>
			ul_hour -= 12;
   81be2:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
   81be4:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   81be8:	e000      	b.n	81bec <rtc_set_time+0x18>
	uint32_t ul_time = 0;
   81bea:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   81bec:	4c1d      	ldr	r4, [pc, #116]	; (81c64 <rtc_set_time+0x90>)
   81bee:	fba4 5603 	umull	r5, r6, r4, r3
   81bf2:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
   81bf4:	eb06 0586 	add.w	r5, r6, r6, lsl #2
   81bf8:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
   81bfc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
   81c00:	fba4 6502 	umull	r6, r5, r4, r2
   81c04:	08ed      	lsrs	r5, r5, #3
   81c06:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
   81c0a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81c0e:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
   81c12:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   81c16:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
   81c18:	fba4 4201 	umull	r4, r2, r4, r1
   81c1c:	08d2      	lsrs	r2, r2, #3
   81c1e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
   81c22:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81c26:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   81c2a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   81c2e:	6983      	ldr	r3, [r0, #24]
   81c30:	f013 0f04 	tst.w	r3, #4
   81c34:	d0fb      	beq.n	81c2e <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
   81c36:	6803      	ldr	r3, [r0, #0]
   81c38:	f043 0301 	orr.w	r3, r3, #1
   81c3c:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   81c3e:	6983      	ldr	r3, [r0, #24]
   81c40:	f013 0f01 	tst.w	r3, #1
   81c44:	d0fb      	beq.n	81c3e <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
   81c46:	2301      	movs	r3, #1
   81c48:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
   81c4a:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
   81c4c:	6803      	ldr	r3, [r0, #0]
   81c4e:	f023 0301 	bic.w	r3, r3, #1
   81c52:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
   81c54:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   81c56:	f000 0001 	and.w	r0, r0, #1
   81c5a:	bcf0      	pop	{r4, r5, r6, r7}
   81c5c:	4770      	bx	lr
	uint32_t ul_time = 0;
   81c5e:	2700      	movs	r7, #0
   81c60:	e7c4      	b.n	81bec <rtc_set_time+0x18>
   81c62:	bf00      	nop
   81c64:	cccccccd 	.word	0xcccccccd

00081c68 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
   81c68:	b4f0      	push	{r4, r5, r6, r7}
   81c6a:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
   81c6c:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   81c6e:	68c4      	ldr	r4, [r0, #12]
   81c70:	42a5      	cmp	r5, r4
   81c72:	d003      	beq.n	81c7c <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
   81c74:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   81c76:	68c4      	ldr	r4, [r0, #12]
   81c78:	42ac      	cmp	r4, r5
   81c7a:	d1fb      	bne.n	81c74 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
   81c7c:	b199      	cbz	r1, 81ca6 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   81c7e:	f3c4 3003 	ubfx	r0, r4, #12, #4
   81c82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81c86:	f3c4 2703 	ubfx	r7, r4, #8, #4
   81c8a:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   81c8e:	f3c4 1002 	ubfx	r0, r4, #4, #3
   81c92:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   81c96:	f004 000f 	and.w	r0, r4, #15
   81c9a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   81c9e:	2564      	movs	r5, #100	; 0x64
   81ca0:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
   81ca4:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
   81ca6:	b142      	cbz	r2, 81cba <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   81ca8:	f3c4 5000 	ubfx	r0, r4, #20, #1
   81cac:	0081      	lsls	r1, r0, #2
   81cae:	4408      	add	r0, r1
   81cb0:	f3c4 4103 	ubfx	r1, r4, #16, #4
   81cb4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
   81cb8:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
   81cba:	b143      	cbz	r3, 81cce <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   81cbc:	f3c4 7201 	ubfx	r2, r4, #28, #2
   81cc0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81cc4:	f3c4 6103 	ubfx	r1, r4, #24, #4
   81cc8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   81ccc:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
   81cce:	b116      	cbz	r6, 81cd6 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
   81cd0:	f3c4 5442 	ubfx	r4, r4, #21, #3
   81cd4:	6034      	str	r4, [r6, #0]
	}
}
   81cd6:	bcf0      	pop	{r4, r5, r6, r7}
   81cd8:	4770      	bx	lr

00081cda <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   81cda:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81cdc:	0189      	lsls	r1, r1, #6
   81cde:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   81ce0:	2402      	movs	r4, #2
   81ce2:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   81ce4:	f04f 31ff 	mov.w	r1, #4294967295
   81ce8:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81cea:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81cec:	605a      	str	r2, [r3, #4]
}
   81cee:	bc10      	pop	{r4}
   81cf0:	4770      	bx	lr

00081cf2 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   81cf2:	0189      	lsls	r1, r1, #6
   81cf4:	2305      	movs	r3, #5
   81cf6:	5043      	str	r3, [r0, r1]
   81cf8:	4770      	bx	lr

00081cfa <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
   81cfa:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   81cfe:	614a      	str	r2, [r1, #20]
   81d00:	4770      	bx	lr

00081d02 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81d02:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   81d06:	61ca      	str	r2, [r1, #28]
   81d08:	4770      	bx	lr

00081d0a <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81d0a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   81d0e:	624a      	str	r2, [r1, #36]	; 0x24
   81d10:	4770      	bx	lr

00081d12 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81d12:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   81d16:	6a08      	ldr	r0, [r1, #32]
}
   81d18:	4770      	bx	lr

00081d1a <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81d1a:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81d1c:	23ac      	movs	r3, #172	; 0xac
   81d1e:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81d20:	680b      	ldr	r3, [r1, #0]
   81d22:	684a      	ldr	r2, [r1, #4]
   81d24:	fbb3 f3f2 	udiv	r3, r3, r2
   81d28:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81d2a:	1e5c      	subs	r4, r3, #1
   81d2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81d30:	4294      	cmp	r4, r2
   81d32:	d80b      	bhi.n	81d4c <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   81d34:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81d36:	688b      	ldr	r3, [r1, #8]
   81d38:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81d3a:	f240 2302 	movw	r3, #514	; 0x202
   81d3e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81d42:	2350      	movs	r3, #80	; 0x50
   81d44:	6003      	str	r3, [r0, #0]

	return 0;
   81d46:	2000      	movs	r0, #0
}
   81d48:	bc10      	pop	{r4}
   81d4a:	4770      	bx	lr
		return 1;
   81d4c:	2001      	movs	r0, #1
   81d4e:	e7fb      	b.n	81d48 <uart_init+0x2e>

00081d50 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
   81d50:	6081      	str	r1, [r0, #8]
   81d52:	4770      	bx	lr

00081d54 <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
   81d54:	60c1      	str	r1, [r0, #12]
   81d56:	4770      	bx	lr

00081d58 <uart_get_interrupt_mask>:
 *
 *  \return The interrupt mask value.
 */
uint32_t uart_get_interrupt_mask(Uart *p_uart)
{
	return p_uart->UART_IMR;
   81d58:	6900      	ldr	r0, [r0, #16]
}
   81d5a:	4770      	bx	lr

00081d5c <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
   81d5c:	6940      	ldr	r0, [r0, #20]
}
   81d5e:	4770      	bx	lr

00081d60 <uart_reset_status>:
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_reset_status(Uart *p_uart)
{
	p_uart->UART_CR = UART_CR_RSTSTA;
   81d60:	f44f 7380 	mov.w	r3, #256	; 0x100
   81d64:	6003      	str	r3, [r0, #0]
   81d66:	4770      	bx	lr

00081d68 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
   81d68:	4770      	bx	lr
	...

00081d6c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   81d6c:	4b0b      	ldr	r3, [pc, #44]	; (81d9c <cpu_irq_enter_critical+0x30>)
   81d6e:	681b      	ldr	r3, [r3, #0]
   81d70:	b92b      	cbnz	r3, 81d7e <cpu_irq_enter_critical+0x12>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81d72:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   81d76:	b13b      	cbz	r3, 81d88 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   81d78:	2200      	movs	r2, #0
   81d7a:	4b09      	ldr	r3, [pc, #36]	; (81da0 <cpu_irq_enter_critical+0x34>)
   81d7c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   81d7e:	4a07      	ldr	r2, [pc, #28]	; (81d9c <cpu_irq_enter_critical+0x30>)
   81d80:	6813      	ldr	r3, [r2, #0]
   81d82:	3301      	adds	r3, #1
   81d84:	6013      	str	r3, [r2, #0]
   81d86:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
   81d88:	b672      	cpsid	i
   81d8a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   81d8e:	2200      	movs	r2, #0
   81d90:	4b04      	ldr	r3, [pc, #16]	; (81da4 <cpu_irq_enter_critical+0x38>)
   81d92:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   81d94:	2201      	movs	r2, #1
   81d96:	4b02      	ldr	r3, [pc, #8]	; (81da0 <cpu_irq_enter_critical+0x34>)
   81d98:	701a      	strb	r2, [r3, #0]
   81d9a:	e7f0      	b.n	81d7e <cpu_irq_enter_critical+0x12>
   81d9c:	2000107c 	.word	0x2000107c
   81da0:	20001080 	.word	0x20001080
   81da4:	20000578 	.word	0x20000578

00081da8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   81da8:	4b07      	ldr	r3, [pc, #28]	; (81dc8 <cpu_irq_leave_critical+0x20>)
   81daa:	681a      	ldr	r2, [r3, #0]
   81dac:	3a01      	subs	r2, #1
   81dae:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   81db0:	681b      	ldr	r3, [r3, #0]
   81db2:	b943      	cbnz	r3, 81dc6 <cpu_irq_leave_critical+0x1e>
   81db4:	4b05      	ldr	r3, [pc, #20]	; (81dcc <cpu_irq_leave_critical+0x24>)
   81db6:	781b      	ldrb	r3, [r3, #0]
   81db8:	b12b      	cbz	r3, 81dc6 <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   81dba:	2201      	movs	r2, #1
   81dbc:	4b04      	ldr	r3, [pc, #16]	; (81dd0 <cpu_irq_leave_critical+0x28>)
   81dbe:	701a      	strb	r2, [r3, #0]
   81dc0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81dc4:	b662      	cpsie	i
   81dc6:	4770      	bx	lr
   81dc8:	2000107c 	.word	0x2000107c
   81dcc:	20001080 	.word	0x20001080
   81dd0:	20000578 	.word	0x20000578

00081dd4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81dd4:	e7fe      	b.n	81dd4 <Dummy_Handler>
	...

00081dd8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81dd8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81dda:	4b1c      	ldr	r3, [pc, #112]	; (81e4c <Reset_Handler+0x74>)
   81ddc:	4a1c      	ldr	r2, [pc, #112]	; (81e50 <Reset_Handler+0x78>)
   81dde:	429a      	cmp	r2, r3
   81de0:	d010      	beq.n	81e04 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   81de2:	4b1c      	ldr	r3, [pc, #112]	; (81e54 <Reset_Handler+0x7c>)
   81de4:	4a19      	ldr	r2, [pc, #100]	; (81e4c <Reset_Handler+0x74>)
   81de6:	429a      	cmp	r2, r3
   81de8:	d20c      	bcs.n	81e04 <Reset_Handler+0x2c>
   81dea:	3b01      	subs	r3, #1
   81dec:	1a9b      	subs	r3, r3, r2
   81dee:	f023 0303 	bic.w	r3, r3, #3
   81df2:	3304      	adds	r3, #4
   81df4:	4413      	add	r3, r2
   81df6:	4916      	ldr	r1, [pc, #88]	; (81e50 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   81df8:	f851 0b04 	ldr.w	r0, [r1], #4
   81dfc:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   81e00:	429a      	cmp	r2, r3
   81e02:	d1f9      	bne.n	81df8 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81e04:	4b14      	ldr	r3, [pc, #80]	; (81e58 <Reset_Handler+0x80>)
   81e06:	4a15      	ldr	r2, [pc, #84]	; (81e5c <Reset_Handler+0x84>)
   81e08:	429a      	cmp	r2, r3
   81e0a:	d20a      	bcs.n	81e22 <Reset_Handler+0x4a>
   81e0c:	3b01      	subs	r3, #1
   81e0e:	1a9b      	subs	r3, r3, r2
   81e10:	f023 0303 	bic.w	r3, r3, #3
   81e14:	3304      	adds	r3, #4
   81e16:	4413      	add	r3, r2
		*pDest++ = 0;
   81e18:	2100      	movs	r1, #0
   81e1a:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   81e1e:	4293      	cmp	r3, r2
   81e20:	d1fb      	bne.n	81e1a <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81e22:	4b0f      	ldr	r3, [pc, #60]	; (81e60 <Reset_Handler+0x88>)
   81e24:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81e28:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81e2c:	490d      	ldr	r1, [pc, #52]	; (81e64 <Reset_Handler+0x8c>)
   81e2e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   81e30:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81e34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
   81e38:	d203      	bcs.n	81e42 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81e3a:	688b      	ldr	r3, [r1, #8]
   81e3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81e40:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81e42:	4b09      	ldr	r3, [pc, #36]	; (81e68 <Reset_Handler+0x90>)
   81e44:	4798      	blx	r3

	/* Branch to main function */
	main();
   81e46:	4b09      	ldr	r3, [pc, #36]	; (81e6c <Reset_Handler+0x94>)
   81e48:	4798      	blx	r3
   81e4a:	e7fe      	b.n	81e4a <Reset_Handler+0x72>
   81e4c:	20000000 	.word	0x20000000
   81e50:	00086d64 	.word	0x00086d64
   81e54:	20000f30 	.word	0x20000f30
   81e58:	2000165c 	.word	0x2000165c
   81e5c:	20000f30 	.word	0x20000f30
   81e60:	00080000 	.word	0x00080000
   81e64:	e000ed00 	.word	0xe000ed00
   81e68:	00081fc1 	.word	0x00081fc1
   81e6c:	00081779 	.word	0x00081779

00081e70 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81e70:	4b3d      	ldr	r3, [pc, #244]	; (81f68 <SystemCoreClockUpdate+0xf8>)
   81e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81e74:	f003 0303 	and.w	r3, r3, #3
   81e78:	2b03      	cmp	r3, #3
   81e7a:	d80e      	bhi.n	81e9a <SystemCoreClockUpdate+0x2a>
   81e7c:	e8df f003 	tbb	[pc, r3]
   81e80:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81e84:	4b39      	ldr	r3, [pc, #228]	; (81f6c <SystemCoreClockUpdate+0xfc>)
   81e86:	695b      	ldr	r3, [r3, #20]
   81e88:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81e8c:	bf14      	ite	ne
   81e8e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81e92:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81e96:	4b36      	ldr	r3, [pc, #216]	; (81f70 <SystemCoreClockUpdate+0x100>)
   81e98:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81e9a:	4b33      	ldr	r3, [pc, #204]	; (81f68 <SystemCoreClockUpdate+0xf8>)
   81e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81ea2:	2b70      	cmp	r3, #112	; 0x70
   81ea4:	d057      	beq.n	81f56 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81ea6:	4b30      	ldr	r3, [pc, #192]	; (81f68 <SystemCoreClockUpdate+0xf8>)
   81ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81eaa:	4931      	ldr	r1, [pc, #196]	; (81f70 <SystemCoreClockUpdate+0x100>)
   81eac:	f3c2 1202 	ubfx	r2, r2, #4, #3
   81eb0:	680b      	ldr	r3, [r1, #0]
   81eb2:	40d3      	lsrs	r3, r2
   81eb4:	600b      	str	r3, [r1, #0]
   81eb6:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81eb8:	4b2b      	ldr	r3, [pc, #172]	; (81f68 <SystemCoreClockUpdate+0xf8>)
   81eba:	6a1b      	ldr	r3, [r3, #32]
   81ebc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81ec0:	d003      	beq.n	81eca <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81ec2:	4a2c      	ldr	r2, [pc, #176]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81ec4:	4b2a      	ldr	r3, [pc, #168]	; (81f70 <SystemCoreClockUpdate+0x100>)
   81ec6:	601a      	str	r2, [r3, #0]
   81ec8:	e7e7      	b.n	81e9a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81eca:	4a2b      	ldr	r2, [pc, #172]	; (81f78 <SystemCoreClockUpdate+0x108>)
   81ecc:	4b28      	ldr	r3, [pc, #160]	; (81f70 <SystemCoreClockUpdate+0x100>)
   81ece:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81ed0:	4b25      	ldr	r3, [pc, #148]	; (81f68 <SystemCoreClockUpdate+0xf8>)
   81ed2:	6a1b      	ldr	r3, [r3, #32]
   81ed4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81ed8:	2b10      	cmp	r3, #16
   81eda:	d005      	beq.n	81ee8 <SystemCoreClockUpdate+0x78>
   81edc:	2b20      	cmp	r3, #32
   81ede:	d1dc      	bne.n	81e9a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   81ee0:	4a24      	ldr	r2, [pc, #144]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81ee2:	4b23      	ldr	r3, [pc, #140]	; (81f70 <SystemCoreClockUpdate+0x100>)
   81ee4:	601a      	str	r2, [r3, #0]
				break;
   81ee6:	e7d8      	b.n	81e9a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   81ee8:	4a24      	ldr	r2, [pc, #144]	; (81f7c <SystemCoreClockUpdate+0x10c>)
   81eea:	4b21      	ldr	r3, [pc, #132]	; (81f70 <SystemCoreClockUpdate+0x100>)
   81eec:	601a      	str	r2, [r3, #0]
				break;
   81eee:	e7d4      	b.n	81e9a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81ef0:	4b1d      	ldr	r3, [pc, #116]	; (81f68 <SystemCoreClockUpdate+0xf8>)
   81ef2:	6a1b      	ldr	r3, [r3, #32]
   81ef4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81ef8:	d00c      	beq.n	81f14 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81efa:	4a1e      	ldr	r2, [pc, #120]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81efc:	4b1c      	ldr	r3, [pc, #112]	; (81f70 <SystemCoreClockUpdate+0x100>)
   81efe:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81f00:	4b19      	ldr	r3, [pc, #100]	; (81f68 <SystemCoreClockUpdate+0xf8>)
   81f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81f04:	f003 0303 	and.w	r3, r3, #3
   81f08:	2b02      	cmp	r3, #2
   81f0a:	d016      	beq.n	81f3a <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81f0c:	4a1c      	ldr	r2, [pc, #112]	; (81f80 <SystemCoreClockUpdate+0x110>)
   81f0e:	4b18      	ldr	r3, [pc, #96]	; (81f70 <SystemCoreClockUpdate+0x100>)
   81f10:	601a      	str	r2, [r3, #0]
   81f12:	e7c2      	b.n	81e9a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81f14:	4a18      	ldr	r2, [pc, #96]	; (81f78 <SystemCoreClockUpdate+0x108>)
   81f16:	4b16      	ldr	r3, [pc, #88]	; (81f70 <SystemCoreClockUpdate+0x100>)
   81f18:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81f1a:	4b13      	ldr	r3, [pc, #76]	; (81f68 <SystemCoreClockUpdate+0xf8>)
   81f1c:	6a1b      	ldr	r3, [r3, #32]
   81f1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81f22:	2b10      	cmp	r3, #16
   81f24:	d005      	beq.n	81f32 <SystemCoreClockUpdate+0xc2>
   81f26:	2b20      	cmp	r3, #32
   81f28:	d1ea      	bne.n	81f00 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   81f2a:	4a12      	ldr	r2, [pc, #72]	; (81f74 <SystemCoreClockUpdate+0x104>)
   81f2c:	4b10      	ldr	r3, [pc, #64]	; (81f70 <SystemCoreClockUpdate+0x100>)
   81f2e:	601a      	str	r2, [r3, #0]
				break;
   81f30:	e7e6      	b.n	81f00 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   81f32:	4a12      	ldr	r2, [pc, #72]	; (81f7c <SystemCoreClockUpdate+0x10c>)
   81f34:	4b0e      	ldr	r3, [pc, #56]	; (81f70 <SystemCoreClockUpdate+0x100>)
   81f36:	601a      	str	r2, [r3, #0]
				break;
   81f38:	e7e2      	b.n	81f00 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81f3a:	4a0b      	ldr	r2, [pc, #44]	; (81f68 <SystemCoreClockUpdate+0xf8>)
   81f3c:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   81f3e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   81f40:	480b      	ldr	r0, [pc, #44]	; (81f70 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81f42:	f3c1 410a 	ubfx	r1, r1, #16, #11
   81f46:	6803      	ldr	r3, [r0, #0]
   81f48:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   81f4c:	b2d2      	uxtb	r2, r2
   81f4e:	fbb3 f3f2 	udiv	r3, r3, r2
   81f52:	6003      	str	r3, [r0, #0]
   81f54:	e7a1      	b.n	81e9a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   81f56:	4a06      	ldr	r2, [pc, #24]	; (81f70 <SystemCoreClockUpdate+0x100>)
   81f58:	6813      	ldr	r3, [r2, #0]
   81f5a:	490a      	ldr	r1, [pc, #40]	; (81f84 <SystemCoreClockUpdate+0x114>)
   81f5c:	fba1 1303 	umull	r1, r3, r1, r3
   81f60:	085b      	lsrs	r3, r3, #1
   81f62:	6013      	str	r3, [r2, #0]
   81f64:	4770      	bx	lr
   81f66:	bf00      	nop
   81f68:	400e0400 	.word	0x400e0400
   81f6c:	400e1210 	.word	0x400e1210
   81f70:	2000057c 	.word	0x2000057c
   81f74:	00b71b00 	.word	0x00b71b00
   81f78:	003d0900 	.word	0x003d0900
   81f7c:	007a1200 	.word	0x007a1200
   81f80:	0e4e1c00 	.word	0x0e4e1c00
   81f84:	aaaaaaab 	.word	0xaaaaaaab

00081f88 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81f88:	4b0a      	ldr	r3, [pc, #40]	; (81fb4 <_sbrk+0x2c>)
   81f8a:	681b      	ldr	r3, [r3, #0]
   81f8c:	b153      	cbz	r3, 81fa4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   81f8e:	4b09      	ldr	r3, [pc, #36]	; (81fb4 <_sbrk+0x2c>)
   81f90:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81f92:	181a      	adds	r2, r3, r0
   81f94:	4908      	ldr	r1, [pc, #32]	; (81fb8 <_sbrk+0x30>)
   81f96:	4291      	cmp	r1, r2
   81f98:	db08      	blt.n	81fac <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   81f9a:	4610      	mov	r0, r2
   81f9c:	4a05      	ldr	r2, [pc, #20]	; (81fb4 <_sbrk+0x2c>)
   81f9e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81fa0:	4618      	mov	r0, r3
   81fa2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   81fa4:	4a05      	ldr	r2, [pc, #20]	; (81fbc <_sbrk+0x34>)
   81fa6:	4b03      	ldr	r3, [pc, #12]	; (81fb4 <_sbrk+0x2c>)
   81fa8:	601a      	str	r2, [r3, #0]
   81faa:	e7f0      	b.n	81f8e <_sbrk+0x6>
		return (caddr_t) -1;	
   81fac:	f04f 30ff 	mov.w	r0, #4294967295
}
   81fb0:	4770      	bx	lr
   81fb2:	bf00      	nop
   81fb4:	20001084 	.word	0x20001084
   81fb8:	20083ffc 	.word	0x20083ffc
   81fbc:	20084000 	.word	0x20084000

00081fc0 <__libc_init_array>:
   81fc0:	b570      	push	{r4, r5, r6, lr}
   81fc2:	4e0f      	ldr	r6, [pc, #60]	; (82000 <__libc_init_array+0x40>)
   81fc4:	4d0f      	ldr	r5, [pc, #60]	; (82004 <__libc_init_array+0x44>)
   81fc6:	1b76      	subs	r6, r6, r5
   81fc8:	10b6      	asrs	r6, r6, #2
   81fca:	bf18      	it	ne
   81fcc:	2400      	movne	r4, #0
   81fce:	d005      	beq.n	81fdc <__libc_init_array+0x1c>
   81fd0:	3401      	adds	r4, #1
   81fd2:	f855 3b04 	ldr.w	r3, [r5], #4
   81fd6:	4798      	blx	r3
   81fd8:	42a6      	cmp	r6, r4
   81fda:	d1f9      	bne.n	81fd0 <__libc_init_array+0x10>
   81fdc:	4e0a      	ldr	r6, [pc, #40]	; (82008 <__libc_init_array+0x48>)
   81fde:	4d0b      	ldr	r5, [pc, #44]	; (8200c <__libc_init_array+0x4c>)
   81fe0:	f004 feaa 	bl	86d38 <_init>
   81fe4:	1b76      	subs	r6, r6, r5
   81fe6:	10b6      	asrs	r6, r6, #2
   81fe8:	bf18      	it	ne
   81fea:	2400      	movne	r4, #0
   81fec:	d006      	beq.n	81ffc <__libc_init_array+0x3c>
   81fee:	3401      	adds	r4, #1
   81ff0:	f855 3b04 	ldr.w	r3, [r5], #4
   81ff4:	4798      	blx	r3
   81ff6:	42a6      	cmp	r6, r4
   81ff8:	d1f9      	bne.n	81fee <__libc_init_array+0x2e>
   81ffa:	bd70      	pop	{r4, r5, r6, pc}
   81ffc:	bd70      	pop	{r4, r5, r6, pc}
   81ffe:	bf00      	nop
   82000:	00086d44 	.word	0x00086d44
   82004:	00086d44 	.word	0x00086d44
   82008:	00086d4c 	.word	0x00086d4c
   8200c:	00086d44 	.word	0x00086d44

00082010 <memcpy>:
   82010:	4684      	mov	ip, r0
   82012:	ea41 0300 	orr.w	r3, r1, r0
   82016:	f013 0303 	ands.w	r3, r3, #3
   8201a:	d149      	bne.n	820b0 <memcpy+0xa0>
   8201c:	3a40      	subs	r2, #64	; 0x40
   8201e:	d323      	bcc.n	82068 <memcpy+0x58>
   82020:	680b      	ldr	r3, [r1, #0]
   82022:	6003      	str	r3, [r0, #0]
   82024:	684b      	ldr	r3, [r1, #4]
   82026:	6043      	str	r3, [r0, #4]
   82028:	688b      	ldr	r3, [r1, #8]
   8202a:	6083      	str	r3, [r0, #8]
   8202c:	68cb      	ldr	r3, [r1, #12]
   8202e:	60c3      	str	r3, [r0, #12]
   82030:	690b      	ldr	r3, [r1, #16]
   82032:	6103      	str	r3, [r0, #16]
   82034:	694b      	ldr	r3, [r1, #20]
   82036:	6143      	str	r3, [r0, #20]
   82038:	698b      	ldr	r3, [r1, #24]
   8203a:	6183      	str	r3, [r0, #24]
   8203c:	69cb      	ldr	r3, [r1, #28]
   8203e:	61c3      	str	r3, [r0, #28]
   82040:	6a0b      	ldr	r3, [r1, #32]
   82042:	6203      	str	r3, [r0, #32]
   82044:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82046:	6243      	str	r3, [r0, #36]	; 0x24
   82048:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8204a:	6283      	str	r3, [r0, #40]	; 0x28
   8204c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8204e:	62c3      	str	r3, [r0, #44]	; 0x2c
   82050:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82052:	6303      	str	r3, [r0, #48]	; 0x30
   82054:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82056:	6343      	str	r3, [r0, #52]	; 0x34
   82058:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8205a:	6383      	str	r3, [r0, #56]	; 0x38
   8205c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8205e:	63c3      	str	r3, [r0, #60]	; 0x3c
   82060:	3040      	adds	r0, #64	; 0x40
   82062:	3140      	adds	r1, #64	; 0x40
   82064:	3a40      	subs	r2, #64	; 0x40
   82066:	d2db      	bcs.n	82020 <memcpy+0x10>
   82068:	3230      	adds	r2, #48	; 0x30
   8206a:	d30b      	bcc.n	82084 <memcpy+0x74>
   8206c:	680b      	ldr	r3, [r1, #0]
   8206e:	6003      	str	r3, [r0, #0]
   82070:	684b      	ldr	r3, [r1, #4]
   82072:	6043      	str	r3, [r0, #4]
   82074:	688b      	ldr	r3, [r1, #8]
   82076:	6083      	str	r3, [r0, #8]
   82078:	68cb      	ldr	r3, [r1, #12]
   8207a:	60c3      	str	r3, [r0, #12]
   8207c:	3010      	adds	r0, #16
   8207e:	3110      	adds	r1, #16
   82080:	3a10      	subs	r2, #16
   82082:	d2f3      	bcs.n	8206c <memcpy+0x5c>
   82084:	320c      	adds	r2, #12
   82086:	d305      	bcc.n	82094 <memcpy+0x84>
   82088:	f851 3b04 	ldr.w	r3, [r1], #4
   8208c:	f840 3b04 	str.w	r3, [r0], #4
   82090:	3a04      	subs	r2, #4
   82092:	d2f9      	bcs.n	82088 <memcpy+0x78>
   82094:	3204      	adds	r2, #4
   82096:	d008      	beq.n	820aa <memcpy+0x9a>
   82098:	07d2      	lsls	r2, r2, #31
   8209a:	bf1c      	itt	ne
   8209c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   820a0:	f800 3b01 	strbne.w	r3, [r0], #1
   820a4:	d301      	bcc.n	820aa <memcpy+0x9a>
   820a6:	880b      	ldrh	r3, [r1, #0]
   820a8:	8003      	strh	r3, [r0, #0]
   820aa:	4660      	mov	r0, ip
   820ac:	4770      	bx	lr
   820ae:	bf00      	nop
   820b0:	2a08      	cmp	r2, #8
   820b2:	d313      	bcc.n	820dc <memcpy+0xcc>
   820b4:	078b      	lsls	r3, r1, #30
   820b6:	d0b1      	beq.n	8201c <memcpy+0xc>
   820b8:	f010 0303 	ands.w	r3, r0, #3
   820bc:	d0ae      	beq.n	8201c <memcpy+0xc>
   820be:	f1c3 0304 	rsb	r3, r3, #4
   820c2:	1ad2      	subs	r2, r2, r3
   820c4:	07db      	lsls	r3, r3, #31
   820c6:	bf1c      	itt	ne
   820c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   820cc:	f800 3b01 	strbne.w	r3, [r0], #1
   820d0:	d3a4      	bcc.n	8201c <memcpy+0xc>
   820d2:	f831 3b02 	ldrh.w	r3, [r1], #2
   820d6:	f820 3b02 	strh.w	r3, [r0], #2
   820da:	e79f      	b.n	8201c <memcpy+0xc>
   820dc:	3a04      	subs	r2, #4
   820de:	d3d9      	bcc.n	82094 <memcpy+0x84>
   820e0:	3a01      	subs	r2, #1
   820e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   820e6:	f800 3b01 	strb.w	r3, [r0], #1
   820ea:	d2f9      	bcs.n	820e0 <memcpy+0xd0>
   820ec:	780b      	ldrb	r3, [r1, #0]
   820ee:	7003      	strb	r3, [r0, #0]
   820f0:	784b      	ldrb	r3, [r1, #1]
   820f2:	7043      	strb	r3, [r0, #1]
   820f4:	788b      	ldrb	r3, [r1, #2]
   820f6:	7083      	strb	r3, [r0, #2]
   820f8:	4660      	mov	r0, ip
   820fa:	4770      	bx	lr

000820fc <memset>:
   820fc:	b470      	push	{r4, r5, r6}
   820fe:	0786      	lsls	r6, r0, #30
   82100:	d046      	beq.n	82190 <memset+0x94>
   82102:	1e54      	subs	r4, r2, #1
   82104:	2a00      	cmp	r2, #0
   82106:	d041      	beq.n	8218c <memset+0x90>
   82108:	b2ca      	uxtb	r2, r1
   8210a:	4603      	mov	r3, r0
   8210c:	e002      	b.n	82114 <memset+0x18>
   8210e:	f114 34ff 	adds.w	r4, r4, #4294967295
   82112:	d33b      	bcc.n	8218c <memset+0x90>
   82114:	f803 2b01 	strb.w	r2, [r3], #1
   82118:	079d      	lsls	r5, r3, #30
   8211a:	d1f8      	bne.n	8210e <memset+0x12>
   8211c:	2c03      	cmp	r4, #3
   8211e:	d92e      	bls.n	8217e <memset+0x82>
   82120:	b2cd      	uxtb	r5, r1
   82122:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82126:	2c0f      	cmp	r4, #15
   82128:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8212c:	d919      	bls.n	82162 <memset+0x66>
   8212e:	4626      	mov	r6, r4
   82130:	f103 0210 	add.w	r2, r3, #16
   82134:	3e10      	subs	r6, #16
   82136:	2e0f      	cmp	r6, #15
   82138:	f842 5c10 	str.w	r5, [r2, #-16]
   8213c:	f842 5c0c 	str.w	r5, [r2, #-12]
   82140:	f842 5c08 	str.w	r5, [r2, #-8]
   82144:	f842 5c04 	str.w	r5, [r2, #-4]
   82148:	f102 0210 	add.w	r2, r2, #16
   8214c:	d8f2      	bhi.n	82134 <memset+0x38>
   8214e:	f1a4 0210 	sub.w	r2, r4, #16
   82152:	f022 020f 	bic.w	r2, r2, #15
   82156:	f004 040f 	and.w	r4, r4, #15
   8215a:	3210      	adds	r2, #16
   8215c:	2c03      	cmp	r4, #3
   8215e:	4413      	add	r3, r2
   82160:	d90d      	bls.n	8217e <memset+0x82>
   82162:	461e      	mov	r6, r3
   82164:	4622      	mov	r2, r4
   82166:	3a04      	subs	r2, #4
   82168:	2a03      	cmp	r2, #3
   8216a:	f846 5b04 	str.w	r5, [r6], #4
   8216e:	d8fa      	bhi.n	82166 <memset+0x6a>
   82170:	1f22      	subs	r2, r4, #4
   82172:	f022 0203 	bic.w	r2, r2, #3
   82176:	3204      	adds	r2, #4
   82178:	4413      	add	r3, r2
   8217a:	f004 0403 	and.w	r4, r4, #3
   8217e:	b12c      	cbz	r4, 8218c <memset+0x90>
   82180:	b2c9      	uxtb	r1, r1
   82182:	441c      	add	r4, r3
   82184:	f803 1b01 	strb.w	r1, [r3], #1
   82188:	429c      	cmp	r4, r3
   8218a:	d1fb      	bne.n	82184 <memset+0x88>
   8218c:	bc70      	pop	{r4, r5, r6}
   8218e:	4770      	bx	lr
   82190:	4614      	mov	r4, r2
   82192:	4603      	mov	r3, r0
   82194:	e7c2      	b.n	8211c <memset+0x20>
   82196:	bf00      	nop

00082198 <sprintf>:
   82198:	b40e      	push	{r1, r2, r3}
   8219a:	4601      	mov	r1, r0
   8219c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8219e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   821a2:	f44f 7702 	mov.w	r7, #520	; 0x208
   821a6:	f64f 76ff 	movw	r6, #65535	; 0xffff
   821aa:	b09c      	sub	sp, #112	; 0x70
   821ac:	ac21      	add	r4, sp, #132	; 0x84
   821ae:	f854 2b04 	ldr.w	r2, [r4], #4
   821b2:	4b0b      	ldr	r3, [pc, #44]	; (821e0 <sprintf+0x48>)
   821b4:	9102      	str	r1, [sp, #8]
   821b6:	9106      	str	r1, [sp, #24]
   821b8:	6818      	ldr	r0, [r3, #0]
   821ba:	a902      	add	r1, sp, #8
   821bc:	4623      	mov	r3, r4
   821be:	9401      	str	r4, [sp, #4]
   821c0:	f8ad 7014 	strh.w	r7, [sp, #20]
   821c4:	9504      	str	r5, [sp, #16]
   821c6:	9507      	str	r5, [sp, #28]
   821c8:	f8ad 6016 	strh.w	r6, [sp, #22]
   821cc:	f000 f872 	bl	822b4 <_svfprintf_r>
   821d0:	2200      	movs	r2, #0
   821d2:	9b02      	ldr	r3, [sp, #8]
   821d4:	701a      	strb	r2, [r3, #0]
   821d6:	b01c      	add	sp, #112	; 0x70
   821d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   821dc:	b003      	add	sp, #12
   821de:	4770      	bx	lr
   821e0:	20000580 	.word	0x20000580

000821e4 <strlen>:
   821e4:	f020 0103 	bic.w	r1, r0, #3
   821e8:	f010 0003 	ands.w	r0, r0, #3
   821ec:	f1c0 0000 	rsb	r0, r0, #0
   821f0:	f851 3b04 	ldr.w	r3, [r1], #4
   821f4:	f100 0c04 	add.w	ip, r0, #4
   821f8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   821fc:	f06f 0200 	mvn.w	r2, #0
   82200:	bf1c      	itt	ne
   82202:	fa22 f20c 	lsrne.w	r2, r2, ip
   82206:	4313      	orrne	r3, r2
   82208:	f04f 0c01 	mov.w	ip, #1
   8220c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82210:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82214:	eba3 020c 	sub.w	r2, r3, ip
   82218:	ea22 0203 	bic.w	r2, r2, r3
   8221c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82220:	bf04      	itt	eq
   82222:	f851 3b04 	ldreq.w	r3, [r1], #4
   82226:	3004      	addeq	r0, #4
   82228:	d0f4      	beq.n	82214 <strlen+0x30>
   8222a:	f1c2 0100 	rsb	r1, r2, #0
   8222e:	ea02 0201 	and.w	r2, r2, r1
   82232:	fab2 f282 	clz	r2, r2
   82236:	f1c2 021f 	rsb	r2, r2, #31
   8223a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8223e:	4770      	bx	lr

00082240 <strtok>:
   82240:	4a02      	ldr	r2, [pc, #8]	; (8224c <strtok+0xc>)
   82242:	2301      	movs	r3, #1
   82244:	6812      	ldr	r2, [r2, #0]
   82246:	325c      	adds	r2, #92	; 0x5c
   82248:	f000 b802 	b.w	82250 <__strtok_r>
   8224c:	20000580 	.word	0x20000580

00082250 <__strtok_r>:
   82250:	b4f0      	push	{r4, r5, r6, r7}
   82252:	b318      	cbz	r0, 8229c <__strtok_r+0x4c>
   82254:	4607      	mov	r7, r0
   82256:	460d      	mov	r5, r1
   82258:	f817 6b01 	ldrb.w	r6, [r7], #1
   8225c:	e001      	b.n	82262 <__strtok_r+0x12>
   8225e:	42a6      	cmp	r6, r4
   82260:	d017      	beq.n	82292 <__strtok_r+0x42>
   82262:	f815 4b01 	ldrb.w	r4, [r5], #1
   82266:	2c00      	cmp	r4, #0
   82268:	d1f9      	bne.n	8225e <__strtok_r+0xe>
   8226a:	b1e6      	cbz	r6, 822a6 <__strtok_r+0x56>
   8226c:	460c      	mov	r4, r1
   8226e:	f817 5b01 	ldrb.w	r5, [r7], #1
   82272:	e001      	b.n	82278 <__strtok_r+0x28>
   82274:	2b00      	cmp	r3, #0
   82276:	d0f9      	beq.n	8226c <__strtok_r+0x1c>
   82278:	f814 3b01 	ldrb.w	r3, [r4], #1
   8227c:	429d      	cmp	r5, r3
   8227e:	d1f9      	bne.n	82274 <__strtok_r+0x24>
   82280:	b155      	cbz	r5, 82298 <__strtok_r+0x48>
   82282:	2300      	movs	r3, #0
   82284:	f807 3c01 	strb.w	r3, [r7, #-1]
   82288:	4606      	mov	r6, r0
   8228a:	6017      	str	r7, [r2, #0]
   8228c:	4630      	mov	r0, r6
   8228e:	bcf0      	pop	{r4, r5, r6, r7}
   82290:	4770      	bx	lr
   82292:	b153      	cbz	r3, 822aa <__strtok_r+0x5a>
   82294:	4638      	mov	r0, r7
   82296:	e7dd      	b.n	82254 <__strtok_r+0x4>
   82298:	462f      	mov	r7, r5
   8229a:	e7f5      	b.n	82288 <__strtok_r+0x38>
   8229c:	6810      	ldr	r0, [r2, #0]
   8229e:	2800      	cmp	r0, #0
   822a0:	d1d8      	bne.n	82254 <__strtok_r+0x4>
   822a2:	4606      	mov	r6, r0
   822a4:	e7f2      	b.n	8228c <__strtok_r+0x3c>
   822a6:	6016      	str	r6, [r2, #0]
   822a8:	e7f0      	b.n	8228c <__strtok_r+0x3c>
   822aa:	6017      	str	r7, [r2, #0]
   822ac:	4606      	mov	r6, r0
   822ae:	7003      	strb	r3, [r0, #0]
   822b0:	e7ec      	b.n	8228c <__strtok_r+0x3c>
   822b2:	bf00      	nop

000822b4 <_svfprintf_r>:
   822b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   822b8:	b0c3      	sub	sp, #268	; 0x10c
   822ba:	460c      	mov	r4, r1
   822bc:	910b      	str	r1, [sp, #44]	; 0x2c
   822be:	4692      	mov	sl, r2
   822c0:	930f      	str	r3, [sp, #60]	; 0x3c
   822c2:	900c      	str	r0, [sp, #48]	; 0x30
   822c4:	f002 fa58 	bl	84778 <_localeconv_r>
   822c8:	6803      	ldr	r3, [r0, #0]
   822ca:	4618      	mov	r0, r3
   822cc:	931a      	str	r3, [sp, #104]	; 0x68
   822ce:	f7ff ff89 	bl	821e4 <strlen>
   822d2:	89a3      	ldrh	r3, [r4, #12]
   822d4:	9019      	str	r0, [sp, #100]	; 0x64
   822d6:	0619      	lsls	r1, r3, #24
   822d8:	d503      	bpl.n	822e2 <_svfprintf_r+0x2e>
   822da:	6923      	ldr	r3, [r4, #16]
   822dc:	2b00      	cmp	r3, #0
   822de:	f001 8035 	beq.w	8334c <_svfprintf_r+0x1098>
   822e2:	2300      	movs	r3, #0
   822e4:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   822e8:	46c8      	mov	r8, r9
   822ea:	9315      	str	r3, [sp, #84]	; 0x54
   822ec:	9313      	str	r3, [sp, #76]	; 0x4c
   822ee:	9314      	str	r3, [sp, #80]	; 0x50
   822f0:	9318      	str	r3, [sp, #96]	; 0x60
   822f2:	931b      	str	r3, [sp, #108]	; 0x6c
   822f4:	9309      	str	r3, [sp, #36]	; 0x24
   822f6:	9316      	str	r3, [sp, #88]	; 0x58
   822f8:	9317      	str	r3, [sp, #92]	; 0x5c
   822fa:	9327      	str	r3, [sp, #156]	; 0x9c
   822fc:	9326      	str	r3, [sp, #152]	; 0x98
   822fe:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   82302:	f89a 3000 	ldrb.w	r3, [sl]
   82306:	4654      	mov	r4, sl
   82308:	b1eb      	cbz	r3, 82346 <_svfprintf_r+0x92>
   8230a:	2b25      	cmp	r3, #37	; 0x25
   8230c:	d102      	bne.n	82314 <_svfprintf_r+0x60>
   8230e:	e01a      	b.n	82346 <_svfprintf_r+0x92>
   82310:	2b25      	cmp	r3, #37	; 0x25
   82312:	d003      	beq.n	8231c <_svfprintf_r+0x68>
   82314:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82318:	2b00      	cmp	r3, #0
   8231a:	d1f9      	bne.n	82310 <_svfprintf_r+0x5c>
   8231c:	eba4 050a 	sub.w	r5, r4, sl
   82320:	b18d      	cbz	r5, 82346 <_svfprintf_r+0x92>
   82322:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82324:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   82326:	3301      	adds	r3, #1
   82328:	442a      	add	r2, r5
   8232a:	2b07      	cmp	r3, #7
   8232c:	f8c8 a000 	str.w	sl, [r8]
   82330:	f8c8 5004 	str.w	r5, [r8, #4]
   82334:	9227      	str	r2, [sp, #156]	; 0x9c
   82336:	9326      	str	r3, [sp, #152]	; 0x98
   82338:	f300 808a 	bgt.w	82450 <_svfprintf_r+0x19c>
   8233c:	f108 0808 	add.w	r8, r8, #8
   82340:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82342:	442b      	add	r3, r5
   82344:	9309      	str	r3, [sp, #36]	; 0x24
   82346:	7823      	ldrb	r3, [r4, #0]
   82348:	2b00      	cmp	r3, #0
   8234a:	f000 8089 	beq.w	82460 <_svfprintf_r+0x1ac>
   8234e:	2300      	movs	r3, #0
   82350:	f04f 30ff 	mov.w	r0, #4294967295
   82354:	461a      	mov	r2, r3
   82356:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8235a:	4619      	mov	r1, r3
   8235c:	930d      	str	r3, [sp, #52]	; 0x34
   8235e:	469b      	mov	fp, r3
   82360:	7863      	ldrb	r3, [r4, #1]
   82362:	f104 0a01 	add.w	sl, r4, #1
   82366:	900a      	str	r0, [sp, #40]	; 0x28
   82368:	f10a 0a01 	add.w	sl, sl, #1
   8236c:	f1a3 0020 	sub.w	r0, r3, #32
   82370:	2858      	cmp	r0, #88	; 0x58
   82372:	f200 83b7 	bhi.w	82ae4 <_svfprintf_r+0x830>
   82376:	e8df f010 	tbh	[pc, r0, lsl #1]
   8237a:	034c      	.short	0x034c
   8237c:	03b503b5 	.word	0x03b503b5
   82380:	03b50354 	.word	0x03b50354
   82384:	03b503b5 	.word	0x03b503b5
   82388:	03b503b5 	.word	0x03b503b5
   8238c:	005903b5 	.word	0x005903b5
   82390:	03b50359 	.word	0x03b50359
   82394:	02140066 	.word	0x02140066
   82398:	022f03b5 	.word	0x022f03b5
   8239c:	03a503a5 	.word	0x03a503a5
   823a0:	03a503a5 	.word	0x03a503a5
   823a4:	03a503a5 	.word	0x03a503a5
   823a8:	03a503a5 	.word	0x03a503a5
   823ac:	03b503a5 	.word	0x03b503a5
   823b0:	03b503b5 	.word	0x03b503b5
   823b4:	03b503b5 	.word	0x03b503b5
   823b8:	03b503b5 	.word	0x03b503b5
   823bc:	03b503b5 	.word	0x03b503b5
   823c0:	028b03b5 	.word	0x028b03b5
   823c4:	03b502d3 	.word	0x03b502d3
   823c8:	03b502d3 	.word	0x03b502d3
   823cc:	03b503b5 	.word	0x03b503b5
   823d0:	031b03b5 	.word	0x031b03b5
   823d4:	03b503b5 	.word	0x03b503b5
   823d8:	03b50320 	.word	0x03b50320
   823dc:	03b503b5 	.word	0x03b503b5
   823e0:	03b503b5 	.word	0x03b503b5
   823e4:	03b50234 	.word	0x03b50234
   823e8:	024b03b5 	.word	0x024b03b5
   823ec:	03b503b5 	.word	0x03b503b5
   823f0:	03b503b5 	.word	0x03b503b5
   823f4:	03b503b5 	.word	0x03b503b5
   823f8:	03b503b5 	.word	0x03b503b5
   823fc:	03b503b5 	.word	0x03b503b5
   82400:	039e0276 	.word	0x039e0276
   82404:	02d302d3 	.word	0x02d302d3
   82408:	036302d3 	.word	0x036302d3
   8240c:	03b5039e 	.word	0x03b5039e
   82410:	036803b5 	.word	0x036803b5
   82414:	037503b5 	.word	0x037503b5
   82418:	038c01dd 	.word	0x038c01dd
   8241c:	03b5035e 	.word	0x03b5035e
   82420:	03b501f2 	.word	0x03b501f2
   82424:	03b50087 	.word	0x03b50087
   82428:	033203b5 	.word	0x033203b5
   8242c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8242e:	6823      	ldr	r3, [r4, #0]
   82430:	4618      	mov	r0, r3
   82432:	930d      	str	r3, [sp, #52]	; 0x34
   82434:	4623      	mov	r3, r4
   82436:	2800      	cmp	r0, #0
   82438:	f103 0304 	add.w	r3, r3, #4
   8243c:	930f      	str	r3, [sp, #60]	; 0x3c
   8243e:	da04      	bge.n	8244a <_svfprintf_r+0x196>
   82440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82442:	425b      	negs	r3, r3
   82444:	930d      	str	r3, [sp, #52]	; 0x34
   82446:	f04b 0b04 	orr.w	fp, fp, #4
   8244a:	f89a 3000 	ldrb.w	r3, [sl]
   8244e:	e78b      	b.n	82368 <_svfprintf_r+0xb4>
   82450:	aa25      	add	r2, sp, #148	; 0x94
   82452:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82454:	980c      	ldr	r0, [sp, #48]	; 0x30
   82456:	f002 ffb9 	bl	853cc <__ssprint_r>
   8245a:	b940      	cbnz	r0, 8246e <_svfprintf_r+0x1ba>
   8245c:	46c8      	mov	r8, r9
   8245e:	e76f      	b.n	82340 <_svfprintf_r+0x8c>
   82460:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   82462:	b123      	cbz	r3, 8246e <_svfprintf_r+0x1ba>
   82464:	980c      	ldr	r0, [sp, #48]	; 0x30
   82466:	aa25      	add	r2, sp, #148	; 0x94
   82468:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8246a:	f002 ffaf 	bl	853cc <__ssprint_r>
   8246e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   82470:	899b      	ldrh	r3, [r3, #12]
   82472:	f013 0f40 	tst.w	r3, #64	; 0x40
   82476:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82478:	bf18      	it	ne
   8247a:	f04f 33ff 	movne.w	r3, #4294967295
   8247e:	9309      	str	r3, [sp, #36]	; 0x24
   82480:	9809      	ldr	r0, [sp, #36]	; 0x24
   82482:	b043      	add	sp, #268	; 0x10c
   82484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82488:	f01b 0f20 	tst.w	fp, #32
   8248c:	9311      	str	r3, [sp, #68]	; 0x44
   8248e:	f040 81af 	bne.w	827f0 <_svfprintf_r+0x53c>
   82492:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82494:	f01b 0f10 	tst.w	fp, #16
   82498:	4613      	mov	r3, r2
   8249a:	f040 859a 	bne.w	82fd2 <_svfprintf_r+0xd1e>
   8249e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   824a2:	f000 8596 	beq.w	82fd2 <_svfprintf_r+0xd1e>
   824a6:	2500      	movs	r5, #0
   824a8:	2301      	movs	r3, #1
   824aa:	8814      	ldrh	r4, [r2, #0]
   824ac:	3204      	adds	r2, #4
   824ae:	920f      	str	r2, [sp, #60]	; 0x3c
   824b0:	2200      	movs	r2, #0
   824b2:	4617      	mov	r7, r2
   824b4:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   824b8:	990a      	ldr	r1, [sp, #40]	; 0x28
   824ba:	1c4a      	adds	r2, r1, #1
   824bc:	f000 8210 	beq.w	828e0 <_svfprintf_r+0x62c>
   824c0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   824c4:	9207      	str	r2, [sp, #28]
   824c6:	ea54 0205 	orrs.w	r2, r4, r5
   824ca:	f040 820f 	bne.w	828ec <_svfprintf_r+0x638>
   824ce:	2900      	cmp	r1, #0
   824d0:	f040 8431 	bne.w	82d36 <_svfprintf_r+0xa82>
   824d4:	2b00      	cmp	r3, #0
   824d6:	f040 8539 	bne.w	82f4c <_svfprintf_r+0xc98>
   824da:	f01b 0301 	ands.w	r3, fp, #1
   824de:	930e      	str	r3, [sp, #56]	; 0x38
   824e0:	f000 8662 	beq.w	831a8 <_svfprintf_r+0xef4>
   824e4:	2330      	movs	r3, #48	; 0x30
   824e6:	ae42      	add	r6, sp, #264	; 0x108
   824e8:	f806 3d41 	strb.w	r3, [r6, #-65]!
   824ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   824ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   824f0:	4293      	cmp	r3, r2
   824f2:	bfb8      	it	lt
   824f4:	4613      	movlt	r3, r2
   824f6:	9308      	str	r3, [sp, #32]
   824f8:	2300      	movs	r3, #0
   824fa:	9312      	str	r3, [sp, #72]	; 0x48
   824fc:	b117      	cbz	r7, 82504 <_svfprintf_r+0x250>
   824fe:	9b08      	ldr	r3, [sp, #32]
   82500:	3301      	adds	r3, #1
   82502:	9308      	str	r3, [sp, #32]
   82504:	9b07      	ldr	r3, [sp, #28]
   82506:	f013 0302 	ands.w	r3, r3, #2
   8250a:	9310      	str	r3, [sp, #64]	; 0x40
   8250c:	d002      	beq.n	82514 <_svfprintf_r+0x260>
   8250e:	9b08      	ldr	r3, [sp, #32]
   82510:	3302      	adds	r3, #2
   82512:	9308      	str	r3, [sp, #32]
   82514:	9b07      	ldr	r3, [sp, #28]
   82516:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   8251a:	f040 8310 	bne.w	82b3e <_svfprintf_r+0x88a>
   8251e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82520:	9a08      	ldr	r2, [sp, #32]
   82522:	eba3 0b02 	sub.w	fp, r3, r2
   82526:	f1bb 0f00 	cmp.w	fp, #0
   8252a:	f340 8308 	ble.w	82b3e <_svfprintf_r+0x88a>
   8252e:	f1bb 0f10 	cmp.w	fp, #16
   82532:	f340 87b2 	ble.w	8349a <_svfprintf_r+0x11e6>
   82536:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82538:	4643      	mov	r3, r8
   8253a:	4621      	mov	r1, r4
   8253c:	46a8      	mov	r8, r5
   8253e:	2710      	movs	r7, #16
   82540:	9a26      	ldr	r2, [sp, #152]	; 0x98
   82542:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82544:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82546:	e006      	b.n	82556 <_svfprintf_r+0x2a2>
   82548:	f1ab 0b10 	sub.w	fp, fp, #16
   8254c:	f1bb 0f10 	cmp.w	fp, #16
   82550:	f103 0308 	add.w	r3, r3, #8
   82554:	dd18      	ble.n	82588 <_svfprintf_r+0x2d4>
   82556:	3201      	adds	r2, #1
   82558:	48ab      	ldr	r0, [pc, #684]	; (82808 <_svfprintf_r+0x554>)
   8255a:	3110      	adds	r1, #16
   8255c:	2a07      	cmp	r2, #7
   8255e:	9127      	str	r1, [sp, #156]	; 0x9c
   82560:	9226      	str	r2, [sp, #152]	; 0x98
   82562:	e883 0081 	stmia.w	r3, {r0, r7}
   82566:	ddef      	ble.n	82548 <_svfprintf_r+0x294>
   82568:	aa25      	add	r2, sp, #148	; 0x94
   8256a:	4629      	mov	r1, r5
   8256c:	4620      	mov	r0, r4
   8256e:	f002 ff2d 	bl	853cc <__ssprint_r>
   82572:	2800      	cmp	r0, #0
   82574:	f47f af7b 	bne.w	8246e <_svfprintf_r+0x1ba>
   82578:	f1ab 0b10 	sub.w	fp, fp, #16
   8257c:	f1bb 0f10 	cmp.w	fp, #16
   82580:	464b      	mov	r3, r9
   82582:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82584:	9a26      	ldr	r2, [sp, #152]	; 0x98
   82586:	dce6      	bgt.n	82556 <_svfprintf_r+0x2a2>
   82588:	4645      	mov	r5, r8
   8258a:	460c      	mov	r4, r1
   8258c:	4698      	mov	r8, r3
   8258e:	3201      	adds	r2, #1
   82590:	4b9d      	ldr	r3, [pc, #628]	; (82808 <_svfprintf_r+0x554>)
   82592:	445c      	add	r4, fp
   82594:	2a07      	cmp	r2, #7
   82596:	9427      	str	r4, [sp, #156]	; 0x9c
   82598:	9226      	str	r2, [sp, #152]	; 0x98
   8259a:	e888 0808 	stmia.w	r8, {r3, fp}
   8259e:	f300 82c3 	bgt.w	82b28 <_svfprintf_r+0x874>
   825a2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   825a6:	f108 0808 	add.w	r8, r8, #8
   825aa:	b187      	cbz	r7, 825ce <_svfprintf_r+0x31a>
   825ac:	2101      	movs	r1, #1
   825ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   825b0:	440c      	add	r4, r1
   825b2:	440b      	add	r3, r1
   825b4:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   825b8:	2b07      	cmp	r3, #7
   825ba:	9427      	str	r4, [sp, #156]	; 0x9c
   825bc:	9326      	str	r3, [sp, #152]	; 0x98
   825be:	f8c8 1004 	str.w	r1, [r8, #4]
   825c2:	f8c8 2000 	str.w	r2, [r8]
   825c6:	f300 83cd 	bgt.w	82d64 <_svfprintf_r+0xab0>
   825ca:	f108 0808 	add.w	r8, r8, #8
   825ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   825d0:	b17b      	cbz	r3, 825f2 <_svfprintf_r+0x33e>
   825d2:	2102      	movs	r1, #2
   825d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   825d6:	440c      	add	r4, r1
   825d8:	3301      	adds	r3, #1
   825da:	aa1e      	add	r2, sp, #120	; 0x78
   825dc:	2b07      	cmp	r3, #7
   825de:	9427      	str	r4, [sp, #156]	; 0x9c
   825e0:	9326      	str	r3, [sp, #152]	; 0x98
   825e2:	f8c8 1004 	str.w	r1, [r8, #4]
   825e6:	f8c8 2000 	str.w	r2, [r8]
   825ea:	f300 8411 	bgt.w	82e10 <_svfprintf_r+0xb5c>
   825ee:	f108 0808 	add.w	r8, r8, #8
   825f2:	2d80      	cmp	r5, #128	; 0x80
   825f4:	f000 8304 	beq.w	82c00 <_svfprintf_r+0x94c>
   825f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   825fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   825fc:	1a9f      	subs	r7, r3, r2
   825fe:	2f00      	cmp	r7, #0
   82600:	dd37      	ble.n	82672 <_svfprintf_r+0x3be>
   82602:	2f10      	cmp	r7, #16
   82604:	f340 8679 	ble.w	832fa <_svfprintf_r+0x1046>
   82608:	4d80      	ldr	r5, [pc, #512]	; (8280c <_svfprintf_r+0x558>)
   8260a:	4642      	mov	r2, r8
   8260c:	4621      	mov	r1, r4
   8260e:	46b0      	mov	r8, r6
   82610:	f04f 0b10 	mov.w	fp, #16
   82614:	462e      	mov	r6, r5
   82616:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82618:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8261a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8261c:	e004      	b.n	82628 <_svfprintf_r+0x374>
   8261e:	3f10      	subs	r7, #16
   82620:	2f10      	cmp	r7, #16
   82622:	f102 0208 	add.w	r2, r2, #8
   82626:	dd15      	ble.n	82654 <_svfprintf_r+0x3a0>
   82628:	3301      	adds	r3, #1
   8262a:	3110      	adds	r1, #16
   8262c:	2b07      	cmp	r3, #7
   8262e:	9127      	str	r1, [sp, #156]	; 0x9c
   82630:	9326      	str	r3, [sp, #152]	; 0x98
   82632:	e882 0840 	stmia.w	r2, {r6, fp}
   82636:	ddf2      	ble.n	8261e <_svfprintf_r+0x36a>
   82638:	aa25      	add	r2, sp, #148	; 0x94
   8263a:	4629      	mov	r1, r5
   8263c:	4620      	mov	r0, r4
   8263e:	f002 fec5 	bl	853cc <__ssprint_r>
   82642:	2800      	cmp	r0, #0
   82644:	f47f af13 	bne.w	8246e <_svfprintf_r+0x1ba>
   82648:	3f10      	subs	r7, #16
   8264a:	2f10      	cmp	r7, #16
   8264c:	464a      	mov	r2, r9
   8264e:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82650:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82652:	dce9      	bgt.n	82628 <_svfprintf_r+0x374>
   82654:	4635      	mov	r5, r6
   82656:	460c      	mov	r4, r1
   82658:	4646      	mov	r6, r8
   8265a:	4690      	mov	r8, r2
   8265c:	3301      	adds	r3, #1
   8265e:	443c      	add	r4, r7
   82660:	2b07      	cmp	r3, #7
   82662:	9427      	str	r4, [sp, #156]	; 0x9c
   82664:	9326      	str	r3, [sp, #152]	; 0x98
   82666:	e888 00a0 	stmia.w	r8, {r5, r7}
   8266a:	f300 8370 	bgt.w	82d4e <_svfprintf_r+0xa9a>
   8266e:	f108 0808 	add.w	r8, r8, #8
   82672:	9b07      	ldr	r3, [sp, #28]
   82674:	05df      	lsls	r7, r3, #23
   82676:	f100 8264 	bmi.w	82b42 <_svfprintf_r+0x88e>
   8267a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8267c:	990e      	ldr	r1, [sp, #56]	; 0x38
   8267e:	3301      	adds	r3, #1
   82680:	440c      	add	r4, r1
   82682:	2b07      	cmp	r3, #7
   82684:	9427      	str	r4, [sp, #156]	; 0x9c
   82686:	f8c8 6000 	str.w	r6, [r8]
   8268a:	f8c8 1004 	str.w	r1, [r8, #4]
   8268e:	9326      	str	r3, [sp, #152]	; 0x98
   82690:	f300 83b3 	bgt.w	82dfa <_svfprintf_r+0xb46>
   82694:	f108 0808 	add.w	r8, r8, #8
   82698:	9b07      	ldr	r3, [sp, #28]
   8269a:	075b      	lsls	r3, r3, #29
   8269c:	d53b      	bpl.n	82716 <_svfprintf_r+0x462>
   8269e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   826a0:	9a08      	ldr	r2, [sp, #32]
   826a2:	1a9d      	subs	r5, r3, r2
   826a4:	2d00      	cmp	r5, #0
   826a6:	dd36      	ble.n	82716 <_svfprintf_r+0x462>
   826a8:	2d10      	cmp	r5, #16
   826aa:	f340 8721 	ble.w	834f0 <_svfprintf_r+0x123c>
   826ae:	2610      	movs	r6, #16
   826b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   826b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   826b4:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   826b8:	e004      	b.n	826c4 <_svfprintf_r+0x410>
   826ba:	3d10      	subs	r5, #16
   826bc:	2d10      	cmp	r5, #16
   826be:	f108 0808 	add.w	r8, r8, #8
   826c2:	dd16      	ble.n	826f2 <_svfprintf_r+0x43e>
   826c4:	3301      	adds	r3, #1
   826c6:	4a50      	ldr	r2, [pc, #320]	; (82808 <_svfprintf_r+0x554>)
   826c8:	3410      	adds	r4, #16
   826ca:	2b07      	cmp	r3, #7
   826cc:	9427      	str	r4, [sp, #156]	; 0x9c
   826ce:	9326      	str	r3, [sp, #152]	; 0x98
   826d0:	e888 0044 	stmia.w	r8, {r2, r6}
   826d4:	ddf1      	ble.n	826ba <_svfprintf_r+0x406>
   826d6:	aa25      	add	r2, sp, #148	; 0x94
   826d8:	4659      	mov	r1, fp
   826da:	4638      	mov	r0, r7
   826dc:	f002 fe76 	bl	853cc <__ssprint_r>
   826e0:	2800      	cmp	r0, #0
   826e2:	f47f aec4 	bne.w	8246e <_svfprintf_r+0x1ba>
   826e6:	3d10      	subs	r5, #16
   826e8:	2d10      	cmp	r5, #16
   826ea:	46c8      	mov	r8, r9
   826ec:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   826ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
   826f0:	dce8      	bgt.n	826c4 <_svfprintf_r+0x410>
   826f2:	3301      	adds	r3, #1
   826f4:	4a44      	ldr	r2, [pc, #272]	; (82808 <_svfprintf_r+0x554>)
   826f6:	442c      	add	r4, r5
   826f8:	2b07      	cmp	r3, #7
   826fa:	9427      	str	r4, [sp, #156]	; 0x9c
   826fc:	9326      	str	r3, [sp, #152]	; 0x98
   826fe:	e888 0024 	stmia.w	r8, {r2, r5}
   82702:	dd08      	ble.n	82716 <_svfprintf_r+0x462>
   82704:	aa25      	add	r2, sp, #148	; 0x94
   82706:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82708:	980c      	ldr	r0, [sp, #48]	; 0x30
   8270a:	f002 fe5f 	bl	853cc <__ssprint_r>
   8270e:	2800      	cmp	r0, #0
   82710:	f47f aead 	bne.w	8246e <_svfprintf_r+0x1ba>
   82714:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82716:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82718:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8271a:	9908      	ldr	r1, [sp, #32]
   8271c:	428a      	cmp	r2, r1
   8271e:	bfac      	ite	ge
   82720:	189b      	addge	r3, r3, r2
   82722:	185b      	addlt	r3, r3, r1
   82724:	9309      	str	r3, [sp, #36]	; 0x24
   82726:	2c00      	cmp	r4, #0
   82728:	f040 82fb 	bne.w	82d22 <_svfprintf_r+0xa6e>
   8272c:	2300      	movs	r3, #0
   8272e:	46c8      	mov	r8, r9
   82730:	9326      	str	r3, [sp, #152]	; 0x98
   82732:	e5e6      	b.n	82302 <_svfprintf_r+0x4e>
   82734:	9311      	str	r3, [sp, #68]	; 0x44
   82736:	f01b 0320 	ands.w	r3, fp, #32
   8273a:	f040 8145 	bne.w	829c8 <_svfprintf_r+0x714>
   8273e:	f01b 0210 	ands.w	r2, fp, #16
   82742:	f040 8466 	bne.w	83012 <_svfprintf_r+0xd5e>
   82746:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   8274a:	f000 8462 	beq.w	83012 <_svfprintf_r+0xd5e>
   8274e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   82750:	4613      	mov	r3, r2
   82752:	460a      	mov	r2, r1
   82754:	3204      	adds	r2, #4
   82756:	880c      	ldrh	r4, [r1, #0]
   82758:	2500      	movs	r5, #0
   8275a:	920f      	str	r2, [sp, #60]	; 0x3c
   8275c:	e6a8      	b.n	824b0 <_svfprintf_r+0x1fc>
   8275e:	2500      	movs	r5, #0
   82760:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82762:	9311      	str	r3, [sp, #68]	; 0x44
   82764:	6816      	ldr	r6, [r2, #0]
   82766:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   8276a:	1d14      	adds	r4, r2, #4
   8276c:	2e00      	cmp	r6, #0
   8276e:	f000 86cd 	beq.w	8350c <_svfprintf_r+0x1258>
   82772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   82774:	1c53      	adds	r3, r2, #1
   82776:	f000 861b 	beq.w	833b0 <_svfprintf_r+0x10fc>
   8277a:	4629      	mov	r1, r5
   8277c:	4630      	mov	r0, r6
   8277e:	f002 fac5 	bl	84d0c <memchr>
   82782:	2800      	cmp	r0, #0
   82784:	f000 870d 	beq.w	835a2 <_svfprintf_r+0x12ee>
   82788:	1b83      	subs	r3, r0, r6
   8278a:	950a      	str	r5, [sp, #40]	; 0x28
   8278c:	930e      	str	r3, [sp, #56]	; 0x38
   8278e:	940f      	str	r4, [sp, #60]	; 0x3c
   82790:	f8cd b01c 	str.w	fp, [sp, #28]
   82794:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   82798:	9308      	str	r3, [sp, #32]
   8279a:	9512      	str	r5, [sp, #72]	; 0x48
   8279c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   827a0:	e6ac      	b.n	824fc <_svfprintf_r+0x248>
   827a2:	f89a 3000 	ldrb.w	r3, [sl]
   827a6:	f10a 0401 	add.w	r4, sl, #1
   827aa:	2b2a      	cmp	r3, #42	; 0x2a
   827ac:	f000 87c2 	beq.w	83734 <_svfprintf_r+0x1480>
   827b0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   827b4:	2809      	cmp	r0, #9
   827b6:	46a2      	mov	sl, r4
   827b8:	f200 8718 	bhi.w	835ec <_svfprintf_r+0x1338>
   827bc:	2300      	movs	r3, #0
   827be:	461c      	mov	r4, r3
   827c0:	f81a 3b01 	ldrb.w	r3, [sl], #1
   827c4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   827c8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   827cc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   827d0:	2809      	cmp	r0, #9
   827d2:	d9f5      	bls.n	827c0 <_svfprintf_r+0x50c>
   827d4:	940a      	str	r4, [sp, #40]	; 0x28
   827d6:	e5c9      	b.n	8236c <_svfprintf_r+0xb8>
   827d8:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   827dc:	f89a 3000 	ldrb.w	r3, [sl]
   827e0:	e5c2      	b.n	82368 <_svfprintf_r+0xb4>
   827e2:	f04b 0b10 	orr.w	fp, fp, #16
   827e6:	f01b 0f20 	tst.w	fp, #32
   827ea:	9311      	str	r3, [sp, #68]	; 0x44
   827ec:	f43f ae51 	beq.w	82492 <_svfprintf_r+0x1de>
   827f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   827f2:	3407      	adds	r4, #7
   827f4:	f024 0307 	bic.w	r3, r4, #7
   827f8:	f103 0208 	add.w	r2, r3, #8
   827fc:	e9d3 4500 	ldrd	r4, r5, [r3]
   82800:	920f      	str	r2, [sp, #60]	; 0x3c
   82802:	2301      	movs	r3, #1
   82804:	e654      	b.n	824b0 <_svfprintf_r+0x1fc>
   82806:	bf00      	nop
   82808:	00086af4 	.word	0x00086af4
   8280c:	00086b04 	.word	0x00086b04
   82810:	9311      	str	r3, [sp, #68]	; 0x44
   82812:	2a00      	cmp	r2, #0
   82814:	f040 87ad 	bne.w	83772 <_svfprintf_r+0x14be>
   82818:	4bbe      	ldr	r3, [pc, #760]	; (82b14 <_svfprintf_r+0x860>)
   8281a:	f01b 0f20 	tst.w	fp, #32
   8281e:	9318      	str	r3, [sp, #96]	; 0x60
   82820:	f040 80e7 	bne.w	829f2 <_svfprintf_r+0x73e>
   82824:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82826:	f01b 0f10 	tst.w	fp, #16
   8282a:	4613      	mov	r3, r2
   8282c:	f040 83d8 	bne.w	82fe0 <_svfprintf_r+0xd2c>
   82830:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82834:	f000 83d4 	beq.w	82fe0 <_svfprintf_r+0xd2c>
   82838:	2500      	movs	r5, #0
   8283a:	3304      	adds	r3, #4
   8283c:	8814      	ldrh	r4, [r2, #0]
   8283e:	930f      	str	r3, [sp, #60]	; 0x3c
   82840:	f01b 0f01 	tst.w	fp, #1
   82844:	f000 80e3 	beq.w	82a0e <_svfprintf_r+0x75a>
   82848:	ea54 0305 	orrs.w	r3, r4, r5
   8284c:	f000 80df 	beq.w	82a0e <_svfprintf_r+0x75a>
   82850:	2330      	movs	r3, #48	; 0x30
   82852:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   82856:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   8285a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   8285e:	f04b 0b02 	orr.w	fp, fp, #2
   82862:	2302      	movs	r3, #2
   82864:	e624      	b.n	824b0 <_svfprintf_r+0x1fc>
   82866:	2201      	movs	r2, #1
   82868:	9311      	str	r3, [sp, #68]	; 0x44
   8286a:	2300      	movs	r3, #0
   8286c:	4611      	mov	r1, r2
   8286e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   82870:	9208      	str	r2, [sp, #32]
   82872:	6802      	ldr	r2, [r0, #0]
   82874:	461f      	mov	r7, r3
   82876:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8287a:	930a      	str	r3, [sp, #40]	; 0x28
   8287c:	9312      	str	r3, [sp, #72]	; 0x48
   8287e:	1d03      	adds	r3, r0, #4
   82880:	f8cd b01c 	str.w	fp, [sp, #28]
   82884:	910e      	str	r1, [sp, #56]	; 0x38
   82886:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   8288a:	930f      	str	r3, [sp, #60]	; 0x3c
   8288c:	ae28      	add	r6, sp, #160	; 0xa0
   8288e:	e639      	b.n	82504 <_svfprintf_r+0x250>
   82890:	9311      	str	r3, [sp, #68]	; 0x44
   82892:	2a00      	cmp	r2, #0
   82894:	f040 8784 	bne.w	837a0 <_svfprintf_r+0x14ec>
   82898:	f04b 0b10 	orr.w	fp, fp, #16
   8289c:	f01b 0f20 	tst.w	fp, #32
   828a0:	f040 8475 	bne.w	8318e <_svfprintf_r+0xeda>
   828a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   828a6:	f01b 0f10 	tst.w	fp, #16
   828aa:	4613      	mov	r3, r2
   828ac:	f040 839d 	bne.w	82fea <_svfprintf_r+0xd36>
   828b0:	f01b 0f40 	tst.w	fp, #64	; 0x40
   828b4:	f000 8399 	beq.w	82fea <_svfprintf_r+0xd36>
   828b8:	f9b2 4000 	ldrsh.w	r4, [r2]
   828bc:	3304      	adds	r3, #4
   828be:	17e5      	asrs	r5, r4, #31
   828c0:	930f      	str	r3, [sp, #60]	; 0x3c
   828c2:	4622      	mov	r2, r4
   828c4:	462b      	mov	r3, r5
   828c6:	2a00      	cmp	r2, #0
   828c8:	f173 0300 	sbcs.w	r3, r3, #0
   828cc:	f2c0 8398 	blt.w	83000 <_svfprintf_r+0xd4c>
   828d0:	990a      	ldr	r1, [sp, #40]	; 0x28
   828d2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   828d6:	1c4a      	adds	r2, r1, #1
   828d8:	f04f 0301 	mov.w	r3, #1
   828dc:	f47f adf0 	bne.w	824c0 <_svfprintf_r+0x20c>
   828e0:	ea54 0205 	orrs.w	r2, r4, r5
   828e4:	f000 8229 	beq.w	82d3a <_svfprintf_r+0xa86>
   828e8:	f8cd b01c 	str.w	fp, [sp, #28]
   828ec:	2b01      	cmp	r3, #1
   828ee:	f000 830e 	beq.w	82f0e <_svfprintf_r+0xc5a>
   828f2:	2b02      	cmp	r3, #2
   828f4:	f040 829c 	bne.w	82e30 <_svfprintf_r+0xb7c>
   828f8:	464e      	mov	r6, r9
   828fa:	9818      	ldr	r0, [sp, #96]	; 0x60
   828fc:	0923      	lsrs	r3, r4, #4
   828fe:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   82902:	0929      	lsrs	r1, r5, #4
   82904:	f004 020f 	and.w	r2, r4, #15
   82908:	460d      	mov	r5, r1
   8290a:	461c      	mov	r4, r3
   8290c:	5c83      	ldrb	r3, [r0, r2]
   8290e:	f806 3d01 	strb.w	r3, [r6, #-1]!
   82912:	ea54 0305 	orrs.w	r3, r4, r5
   82916:	d1f1      	bne.n	828fc <_svfprintf_r+0x648>
   82918:	eba9 0306 	sub.w	r3, r9, r6
   8291c:	930e      	str	r3, [sp, #56]	; 0x38
   8291e:	e5e5      	b.n	824ec <_svfprintf_r+0x238>
   82920:	9311      	str	r3, [sp, #68]	; 0x44
   82922:	2a00      	cmp	r2, #0
   82924:	f040 8738 	bne.w	83798 <_svfprintf_r+0x14e4>
   82928:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8292a:	f01b 0f08 	tst.w	fp, #8
   8292e:	f104 0407 	add.w	r4, r4, #7
   82932:	f000 84cf 	beq.w	832d4 <_svfprintf_r+0x1020>
   82936:	f024 0307 	bic.w	r3, r4, #7
   8293a:	f103 0208 	add.w	r2, r3, #8
   8293e:	920f      	str	r2, [sp, #60]	; 0x3c
   82940:	681a      	ldr	r2, [r3, #0]
   82942:	685b      	ldr	r3, [r3, #4]
   82944:	9215      	str	r2, [sp, #84]	; 0x54
   82946:	9314      	str	r3, [sp, #80]	; 0x50
   82948:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8294a:	9d15      	ldr	r5, [sp, #84]	; 0x54
   8294c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   82950:	4628      	mov	r0, r5
   82952:	4621      	mov	r1, r4
   82954:	f04f 32ff 	mov.w	r2, #4294967295
   82958:	4b6f      	ldr	r3, [pc, #444]	; (82b18 <_svfprintf_r+0x864>)
   8295a:	f003 fdf5 	bl	86548 <__aeabi_dcmpun>
   8295e:	2800      	cmp	r0, #0
   82960:	f040 8434 	bne.w	831cc <_svfprintf_r+0xf18>
   82964:	4628      	mov	r0, r5
   82966:	4621      	mov	r1, r4
   82968:	f04f 32ff 	mov.w	r2, #4294967295
   8296c:	4b6a      	ldr	r3, [pc, #424]	; (82b18 <_svfprintf_r+0x864>)
   8296e:	f003 fdcd 	bl	8650c <__aeabi_dcmple>
   82972:	2800      	cmp	r0, #0
   82974:	f040 842a 	bne.w	831cc <_svfprintf_r+0xf18>
   82978:	a815      	add	r0, sp, #84	; 0x54
   8297a:	c80d      	ldmia	r0, {r0, r2, r3}
   8297c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8297e:	f003 fdbb 	bl	864f8 <__aeabi_dcmplt>
   82982:	2800      	cmp	r0, #0
   82984:	f040 85d4 	bne.w	83530 <_svfprintf_r+0x127c>
   82988:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8298c:	2303      	movs	r3, #3
   8298e:	461a      	mov	r2, r3
   82990:	9308      	str	r3, [sp, #32]
   82992:	2300      	movs	r3, #0
   82994:	4e61      	ldr	r6, [pc, #388]	; (82b1c <_svfprintf_r+0x868>)
   82996:	4619      	mov	r1, r3
   82998:	930a      	str	r3, [sp, #40]	; 0x28
   8299a:	4b61      	ldr	r3, [pc, #388]	; (82b20 <_svfprintf_r+0x86c>)
   8299c:	920e      	str	r2, [sp, #56]	; 0x38
   8299e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   829a0:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   829a4:	9007      	str	r0, [sp, #28]
   829a6:	9112      	str	r1, [sp, #72]	; 0x48
   829a8:	2a47      	cmp	r2, #71	; 0x47
   829aa:	bfd8      	it	le
   829ac:	461e      	movle	r6, r3
   829ae:	e5a5      	b.n	824fc <_svfprintf_r+0x248>
   829b0:	f04b 0b08 	orr.w	fp, fp, #8
   829b4:	f89a 3000 	ldrb.w	r3, [sl]
   829b8:	e4d6      	b.n	82368 <_svfprintf_r+0xb4>
   829ba:	f04b 0b10 	orr.w	fp, fp, #16
   829be:	9311      	str	r3, [sp, #68]	; 0x44
   829c0:	f01b 0320 	ands.w	r3, fp, #32
   829c4:	f43f aebb 	beq.w	8273e <_svfprintf_r+0x48a>
   829c8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   829ca:	3407      	adds	r4, #7
   829cc:	f024 0307 	bic.w	r3, r4, #7
   829d0:	f103 0208 	add.w	r2, r3, #8
   829d4:	e9d3 4500 	ldrd	r4, r5, [r3]
   829d8:	920f      	str	r2, [sp, #60]	; 0x3c
   829da:	2300      	movs	r3, #0
   829dc:	e568      	b.n	824b0 <_svfprintf_r+0x1fc>
   829de:	9311      	str	r3, [sp, #68]	; 0x44
   829e0:	2a00      	cmp	r2, #0
   829e2:	f040 86c2 	bne.w	8376a <_svfprintf_r+0x14b6>
   829e6:	4b4f      	ldr	r3, [pc, #316]	; (82b24 <_svfprintf_r+0x870>)
   829e8:	f01b 0f20 	tst.w	fp, #32
   829ec:	9318      	str	r3, [sp, #96]	; 0x60
   829ee:	f43f af19 	beq.w	82824 <_svfprintf_r+0x570>
   829f2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   829f4:	f01b 0f01 	tst.w	fp, #1
   829f8:	f104 0407 	add.w	r4, r4, #7
   829fc:	f024 0307 	bic.w	r3, r4, #7
   82a00:	f103 0208 	add.w	r2, r3, #8
   82a04:	920f      	str	r2, [sp, #60]	; 0x3c
   82a06:	e9d3 4500 	ldrd	r4, r5, [r3]
   82a0a:	f47f af1d 	bne.w	82848 <_svfprintf_r+0x594>
   82a0e:	2302      	movs	r3, #2
   82a10:	e54e      	b.n	824b0 <_svfprintf_r+0x1fc>
   82a12:	f89a 3000 	ldrb.w	r3, [sl]
   82a16:	2900      	cmp	r1, #0
   82a18:	f47f aca6 	bne.w	82368 <_svfprintf_r+0xb4>
   82a1c:	2201      	movs	r2, #1
   82a1e:	2120      	movs	r1, #32
   82a20:	e4a2      	b.n	82368 <_svfprintf_r+0xb4>
   82a22:	f04b 0b01 	orr.w	fp, fp, #1
   82a26:	f89a 3000 	ldrb.w	r3, [sl]
   82a2a:	e49d      	b.n	82368 <_svfprintf_r+0xb4>
   82a2c:	f89a 3000 	ldrb.w	r3, [sl]
   82a30:	2201      	movs	r2, #1
   82a32:	212b      	movs	r1, #43	; 0x2b
   82a34:	e498      	b.n	82368 <_svfprintf_r+0xb4>
   82a36:	f04b 0b20 	orr.w	fp, fp, #32
   82a3a:	f89a 3000 	ldrb.w	r3, [sl]
   82a3e:	e493      	b.n	82368 <_svfprintf_r+0xb4>
   82a40:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   82a44:	f89a 3000 	ldrb.w	r3, [sl]
   82a48:	e48e      	b.n	82368 <_svfprintf_r+0xb4>
   82a4a:	f89a 3000 	ldrb.w	r3, [sl]
   82a4e:	2b6c      	cmp	r3, #108	; 0x6c
   82a50:	bf03      	ittte	eq
   82a52:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   82a56:	f04b 0b20 	orreq.w	fp, fp, #32
   82a5a:	f10a 0a01 	addeq.w	sl, sl, #1
   82a5e:	f04b 0b10 	orrne.w	fp, fp, #16
   82a62:	e481      	b.n	82368 <_svfprintf_r+0xb4>
   82a64:	2a00      	cmp	r2, #0
   82a66:	f040 867c 	bne.w	83762 <_svfprintf_r+0x14ae>
   82a6a:	f01b 0f20 	tst.w	fp, #32
   82a6e:	f040 8452 	bne.w	83316 <_svfprintf_r+0x1062>
   82a72:	f01b 0f10 	tst.w	fp, #16
   82a76:	f040 8438 	bne.w	832ea <_svfprintf_r+0x1036>
   82a7a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82a7e:	f000 8434 	beq.w	832ea <_svfprintf_r+0x1036>
   82a82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82a84:	6813      	ldr	r3, [r2, #0]
   82a86:	3204      	adds	r2, #4
   82a88:	920f      	str	r2, [sp, #60]	; 0x3c
   82a8a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   82a8e:	801a      	strh	r2, [r3, #0]
   82a90:	e437      	b.n	82302 <_svfprintf_r+0x4e>
   82a92:	2378      	movs	r3, #120	; 0x78
   82a94:	2230      	movs	r2, #48	; 0x30
   82a96:	980f      	ldr	r0, [sp, #60]	; 0x3c
   82a98:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   82a9c:	9311      	str	r3, [sp, #68]	; 0x44
   82a9e:	1d03      	adds	r3, r0, #4
   82aa0:	930f      	str	r3, [sp, #60]	; 0x3c
   82aa2:	4b20      	ldr	r3, [pc, #128]	; (82b24 <_svfprintf_r+0x870>)
   82aa4:	6804      	ldr	r4, [r0, #0]
   82aa6:	9318      	str	r3, [sp, #96]	; 0x60
   82aa8:	f04b 0b02 	orr.w	fp, fp, #2
   82aac:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   82ab0:	2500      	movs	r5, #0
   82ab2:	2302      	movs	r3, #2
   82ab4:	e4fc      	b.n	824b0 <_svfprintf_r+0x1fc>
   82ab6:	9311      	str	r3, [sp, #68]	; 0x44
   82ab8:	2a00      	cmp	r2, #0
   82aba:	f43f aeef 	beq.w	8289c <_svfprintf_r+0x5e8>
   82abe:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   82ac2:	e6eb      	b.n	8289c <_svfprintf_r+0x5e8>
   82ac4:	2000      	movs	r0, #0
   82ac6:	4604      	mov	r4, r0
   82ac8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82acc:	f81a 3b01 	ldrb.w	r3, [sl], #1
   82ad0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82ad4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   82ad8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82adc:	2809      	cmp	r0, #9
   82ade:	d9f5      	bls.n	82acc <_svfprintf_r+0x818>
   82ae0:	940d      	str	r4, [sp, #52]	; 0x34
   82ae2:	e443      	b.n	8236c <_svfprintf_r+0xb8>
   82ae4:	9311      	str	r3, [sp, #68]	; 0x44
   82ae6:	2a00      	cmp	r2, #0
   82ae8:	f040 864a 	bne.w	83780 <_svfprintf_r+0x14cc>
   82aec:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82aee:	2a00      	cmp	r2, #0
   82af0:	f43f acb6 	beq.w	82460 <_svfprintf_r+0x1ac>
   82af4:	2300      	movs	r3, #0
   82af6:	2101      	movs	r1, #1
   82af8:	461f      	mov	r7, r3
   82afa:	9108      	str	r1, [sp, #32]
   82afc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   82b00:	f8cd b01c 	str.w	fp, [sp, #28]
   82b04:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   82b08:	930a      	str	r3, [sp, #40]	; 0x28
   82b0a:	9312      	str	r3, [sp, #72]	; 0x48
   82b0c:	910e      	str	r1, [sp, #56]	; 0x38
   82b0e:	ae28      	add	r6, sp, #160	; 0xa0
   82b10:	e4f8      	b.n	82504 <_svfprintf_r+0x250>
   82b12:	bf00      	nop
   82b14:	00086ac4 	.word	0x00086ac4
   82b18:	7fefffff 	.word	0x7fefffff
   82b1c:	00086ab8 	.word	0x00086ab8
   82b20:	00086ab4 	.word	0x00086ab4
   82b24:	00086ad8 	.word	0x00086ad8
   82b28:	aa25      	add	r2, sp, #148	; 0x94
   82b2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82b2c:	980c      	ldr	r0, [sp, #48]	; 0x30
   82b2e:	f002 fc4d 	bl	853cc <__ssprint_r>
   82b32:	2800      	cmp	r0, #0
   82b34:	f47f ac9b 	bne.w	8246e <_svfprintf_r+0x1ba>
   82b38:	46c8      	mov	r8, r9
   82b3a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82b3e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82b40:	e533      	b.n	825aa <_svfprintf_r+0x2f6>
   82b42:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82b44:	2b65      	cmp	r3, #101	; 0x65
   82b46:	f340 809a 	ble.w	82c7e <_svfprintf_r+0x9ca>
   82b4a:	a815      	add	r0, sp, #84	; 0x54
   82b4c:	c80d      	ldmia	r0, {r0, r2, r3}
   82b4e:	9914      	ldr	r1, [sp, #80]	; 0x50
   82b50:	f003 fcc8 	bl	864e4 <__aeabi_dcmpeq>
   82b54:	2800      	cmp	r0, #0
   82b56:	f000 8193 	beq.w	82e80 <_svfprintf_r+0xbcc>
   82b5a:	2101      	movs	r1, #1
   82b5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82b5e:	4ab5      	ldr	r2, [pc, #724]	; (82e34 <_svfprintf_r+0xb80>)
   82b60:	440b      	add	r3, r1
   82b62:	440c      	add	r4, r1
   82b64:	2b07      	cmp	r3, #7
   82b66:	9427      	str	r4, [sp, #156]	; 0x9c
   82b68:	9326      	str	r3, [sp, #152]	; 0x98
   82b6a:	f8c8 1004 	str.w	r1, [r8, #4]
   82b6e:	f8c8 2000 	str.w	r2, [r8]
   82b72:	f300 83c6 	bgt.w	83302 <_svfprintf_r+0x104e>
   82b76:	f108 0808 	add.w	r8, r8, #8
   82b7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   82b7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   82b7e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82b80:	4293      	cmp	r3, r2
   82b82:	db03      	blt.n	82b8c <_svfprintf_r+0x8d8>
   82b84:	9b07      	ldr	r3, [sp, #28]
   82b86:	07dd      	lsls	r5, r3, #31
   82b88:	f57f ad86 	bpl.w	82698 <_svfprintf_r+0x3e4>
   82b8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82b8e:	9919      	ldr	r1, [sp, #100]	; 0x64
   82b90:	3301      	adds	r3, #1
   82b92:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   82b94:	440c      	add	r4, r1
   82b96:	2b07      	cmp	r3, #7
   82b98:	f8c8 2000 	str.w	r2, [r8]
   82b9c:	f8c8 1004 	str.w	r1, [r8, #4]
   82ba0:	9427      	str	r4, [sp, #156]	; 0x9c
   82ba2:	9326      	str	r3, [sp, #152]	; 0x98
   82ba4:	f300 83c4 	bgt.w	83330 <_svfprintf_r+0x107c>
   82ba8:	f108 0808 	add.w	r8, r8, #8
   82bac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82bae:	1e5e      	subs	r6, r3, #1
   82bb0:	2e00      	cmp	r6, #0
   82bb2:	f77f ad71 	ble.w	82698 <_svfprintf_r+0x3e4>
   82bb6:	2e10      	cmp	r6, #16
   82bb8:	f340 8575 	ble.w	836a6 <_svfprintf_r+0x13f2>
   82bbc:	4622      	mov	r2, r4
   82bbe:	2710      	movs	r7, #16
   82bc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82bc2:	4d9d      	ldr	r5, [pc, #628]	; (82e38 <_svfprintf_r+0xb84>)
   82bc4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   82bc8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   82bca:	e005      	b.n	82bd8 <_svfprintf_r+0x924>
   82bcc:	f108 0808 	add.w	r8, r8, #8
   82bd0:	3e10      	subs	r6, #16
   82bd2:	2e10      	cmp	r6, #16
   82bd4:	f340 8225 	ble.w	83022 <_svfprintf_r+0xd6e>
   82bd8:	3301      	adds	r3, #1
   82bda:	3210      	adds	r2, #16
   82bdc:	2b07      	cmp	r3, #7
   82bde:	9227      	str	r2, [sp, #156]	; 0x9c
   82be0:	9326      	str	r3, [sp, #152]	; 0x98
   82be2:	e888 00a0 	stmia.w	r8, {r5, r7}
   82be6:	ddf1      	ble.n	82bcc <_svfprintf_r+0x918>
   82be8:	aa25      	add	r2, sp, #148	; 0x94
   82bea:	4621      	mov	r1, r4
   82bec:	4658      	mov	r0, fp
   82bee:	f002 fbed 	bl	853cc <__ssprint_r>
   82bf2:	2800      	cmp	r0, #0
   82bf4:	f47f ac3b 	bne.w	8246e <_svfprintf_r+0x1ba>
   82bf8:	46c8      	mov	r8, r9
   82bfa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   82bfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82bfe:	e7e7      	b.n	82bd0 <_svfprintf_r+0x91c>
   82c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82c02:	9a08      	ldr	r2, [sp, #32]
   82c04:	1a9f      	subs	r7, r3, r2
   82c06:	2f00      	cmp	r7, #0
   82c08:	f77f acf6 	ble.w	825f8 <_svfprintf_r+0x344>
   82c0c:	2f10      	cmp	r7, #16
   82c0e:	f340 84a8 	ble.w	83562 <_svfprintf_r+0x12ae>
   82c12:	4d89      	ldr	r5, [pc, #548]	; (82e38 <_svfprintf_r+0xb84>)
   82c14:	4642      	mov	r2, r8
   82c16:	4621      	mov	r1, r4
   82c18:	46b0      	mov	r8, r6
   82c1a:	f04f 0b10 	mov.w	fp, #16
   82c1e:	462e      	mov	r6, r5
   82c20:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82c22:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82c24:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82c26:	e004      	b.n	82c32 <_svfprintf_r+0x97e>
   82c28:	3f10      	subs	r7, #16
   82c2a:	2f10      	cmp	r7, #16
   82c2c:	f102 0208 	add.w	r2, r2, #8
   82c30:	dd15      	ble.n	82c5e <_svfprintf_r+0x9aa>
   82c32:	3301      	adds	r3, #1
   82c34:	3110      	adds	r1, #16
   82c36:	2b07      	cmp	r3, #7
   82c38:	9127      	str	r1, [sp, #156]	; 0x9c
   82c3a:	9326      	str	r3, [sp, #152]	; 0x98
   82c3c:	e882 0840 	stmia.w	r2, {r6, fp}
   82c40:	ddf2      	ble.n	82c28 <_svfprintf_r+0x974>
   82c42:	aa25      	add	r2, sp, #148	; 0x94
   82c44:	4629      	mov	r1, r5
   82c46:	4620      	mov	r0, r4
   82c48:	f002 fbc0 	bl	853cc <__ssprint_r>
   82c4c:	2800      	cmp	r0, #0
   82c4e:	f47f ac0e 	bne.w	8246e <_svfprintf_r+0x1ba>
   82c52:	3f10      	subs	r7, #16
   82c54:	2f10      	cmp	r7, #16
   82c56:	464a      	mov	r2, r9
   82c58:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82c5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82c5c:	dce9      	bgt.n	82c32 <_svfprintf_r+0x97e>
   82c5e:	4635      	mov	r5, r6
   82c60:	460c      	mov	r4, r1
   82c62:	4646      	mov	r6, r8
   82c64:	4690      	mov	r8, r2
   82c66:	3301      	adds	r3, #1
   82c68:	443c      	add	r4, r7
   82c6a:	2b07      	cmp	r3, #7
   82c6c:	9427      	str	r4, [sp, #156]	; 0x9c
   82c6e:	9326      	str	r3, [sp, #152]	; 0x98
   82c70:	e888 00a0 	stmia.w	r8, {r5, r7}
   82c74:	f300 829e 	bgt.w	831b4 <_svfprintf_r+0xf00>
   82c78:	f108 0808 	add.w	r8, r8, #8
   82c7c:	e4bc      	b.n	825f8 <_svfprintf_r+0x344>
   82c7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82c80:	2b01      	cmp	r3, #1
   82c82:	f340 824f 	ble.w	83124 <_svfprintf_r+0xe70>
   82c86:	2301      	movs	r3, #1
   82c88:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82c8a:	441c      	add	r4, r3
   82c8c:	441f      	add	r7, r3
   82c8e:	2f07      	cmp	r7, #7
   82c90:	9427      	str	r4, [sp, #156]	; 0x9c
   82c92:	f8c8 6000 	str.w	r6, [r8]
   82c96:	9726      	str	r7, [sp, #152]	; 0x98
   82c98:	f8c8 3004 	str.w	r3, [r8, #4]
   82c9c:	f300 825f 	bgt.w	8315e <_svfprintf_r+0xeaa>
   82ca0:	f108 0808 	add.w	r8, r8, #8
   82ca4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   82ca6:	3701      	adds	r7, #1
   82ca8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   82caa:	4414      	add	r4, r2
   82cac:	2f07      	cmp	r7, #7
   82cae:	9427      	str	r4, [sp, #156]	; 0x9c
   82cb0:	9726      	str	r7, [sp, #152]	; 0x98
   82cb2:	f8c8 3000 	str.w	r3, [r8]
   82cb6:	f8c8 2004 	str.w	r2, [r8, #4]
   82cba:	f300 825c 	bgt.w	83176 <_svfprintf_r+0xec2>
   82cbe:	f108 0808 	add.w	r8, r8, #8
   82cc2:	a815      	add	r0, sp, #84	; 0x54
   82cc4:	c80d      	ldmia	r0, {r0, r2, r3}
   82cc6:	9914      	ldr	r1, [sp, #80]	; 0x50
   82cc8:	f003 fc0c 	bl	864e4 <__aeabi_dcmpeq>
   82ccc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82cce:	2800      	cmp	r0, #0
   82cd0:	f040 8141 	bne.w	82f56 <_svfprintf_r+0xca2>
   82cd4:	3b01      	subs	r3, #1
   82cd6:	3701      	adds	r7, #1
   82cd8:	3601      	adds	r6, #1
   82cda:	441c      	add	r4, r3
   82cdc:	2f07      	cmp	r7, #7
   82cde:	f8c8 6000 	str.w	r6, [r8]
   82ce2:	9726      	str	r7, [sp, #152]	; 0x98
   82ce4:	9427      	str	r4, [sp, #156]	; 0x9c
   82ce6:	f8c8 3004 	str.w	r3, [r8, #4]
   82cea:	f300 8166 	bgt.w	82fba <_svfprintf_r+0xd06>
   82cee:	f108 0808 	add.w	r8, r8, #8
   82cf2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   82cf4:	3701      	adds	r7, #1
   82cf6:	4414      	add	r4, r2
   82cf8:	ab21      	add	r3, sp, #132	; 0x84
   82cfa:	2f07      	cmp	r7, #7
   82cfc:	9427      	str	r4, [sp, #156]	; 0x9c
   82cfe:	9726      	str	r7, [sp, #152]	; 0x98
   82d00:	f8c8 2004 	str.w	r2, [r8, #4]
   82d04:	f8c8 3000 	str.w	r3, [r8]
   82d08:	f77f acc4 	ble.w	82694 <_svfprintf_r+0x3e0>
   82d0c:	aa25      	add	r2, sp, #148	; 0x94
   82d0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82d10:	980c      	ldr	r0, [sp, #48]	; 0x30
   82d12:	f002 fb5b 	bl	853cc <__ssprint_r>
   82d16:	2800      	cmp	r0, #0
   82d18:	f47f aba9 	bne.w	8246e <_svfprintf_r+0x1ba>
   82d1c:	46c8      	mov	r8, r9
   82d1e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82d20:	e4ba      	b.n	82698 <_svfprintf_r+0x3e4>
   82d22:	aa25      	add	r2, sp, #148	; 0x94
   82d24:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82d26:	980c      	ldr	r0, [sp, #48]	; 0x30
   82d28:	f002 fb50 	bl	853cc <__ssprint_r>
   82d2c:	2800      	cmp	r0, #0
   82d2e:	f43f acfd 	beq.w	8272c <_svfprintf_r+0x478>
   82d32:	f7ff bb9c 	b.w	8246e <_svfprintf_r+0x1ba>
   82d36:	f8dd b01c 	ldr.w	fp, [sp, #28]
   82d3a:	2b01      	cmp	r3, #1
   82d3c:	f000 817e 	beq.w	8303c <_svfprintf_r+0xd88>
   82d40:	2b02      	cmp	r3, #2
   82d42:	d171      	bne.n	82e28 <_svfprintf_r+0xb74>
   82d44:	f8cd b01c 	str.w	fp, [sp, #28]
   82d48:	2400      	movs	r4, #0
   82d4a:	2500      	movs	r5, #0
   82d4c:	e5d4      	b.n	828f8 <_svfprintf_r+0x644>
   82d4e:	aa25      	add	r2, sp, #148	; 0x94
   82d50:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82d52:	980c      	ldr	r0, [sp, #48]	; 0x30
   82d54:	f002 fb3a 	bl	853cc <__ssprint_r>
   82d58:	2800      	cmp	r0, #0
   82d5a:	f47f ab88 	bne.w	8246e <_svfprintf_r+0x1ba>
   82d5e:	46c8      	mov	r8, r9
   82d60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82d62:	e486      	b.n	82672 <_svfprintf_r+0x3be>
   82d64:	aa25      	add	r2, sp, #148	; 0x94
   82d66:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82d68:	980c      	ldr	r0, [sp, #48]	; 0x30
   82d6a:	f002 fb2f 	bl	853cc <__ssprint_r>
   82d6e:	2800      	cmp	r0, #0
   82d70:	f47f ab7d 	bne.w	8246e <_svfprintf_r+0x1ba>
   82d74:	46c8      	mov	r8, r9
   82d76:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82d78:	e429      	b.n	825ce <_svfprintf_r+0x31a>
   82d7a:	2001      	movs	r0, #1
   82d7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82d7e:	4a2d      	ldr	r2, [pc, #180]	; (82e34 <_svfprintf_r+0xb80>)
   82d80:	4403      	add	r3, r0
   82d82:	4404      	add	r4, r0
   82d84:	2b07      	cmp	r3, #7
   82d86:	9427      	str	r4, [sp, #156]	; 0x9c
   82d88:	9326      	str	r3, [sp, #152]	; 0x98
   82d8a:	f8c8 0004 	str.w	r0, [r8, #4]
   82d8e:	f8c8 2000 	str.w	r2, [r8]
   82d92:	f340 82d8 	ble.w	83346 <_svfprintf_r+0x1092>
   82d96:	aa25      	add	r2, sp, #148	; 0x94
   82d98:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82d9a:	980c      	ldr	r0, [sp, #48]	; 0x30
   82d9c:	f002 fb16 	bl	853cc <__ssprint_r>
   82da0:	2800      	cmp	r0, #0
   82da2:	f47f ab64 	bne.w	8246e <_svfprintf_r+0x1ba>
   82da6:	46c8      	mov	r8, r9
   82da8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   82daa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82dac:	b929      	cbnz	r1, 82dba <_svfprintf_r+0xb06>
   82dae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82db0:	b91b      	cbnz	r3, 82dba <_svfprintf_r+0xb06>
   82db2:	9b07      	ldr	r3, [sp, #28]
   82db4:	07d8      	lsls	r0, r3, #31
   82db6:	f57f ac6f 	bpl.w	82698 <_svfprintf_r+0x3e4>
   82dba:	9819      	ldr	r0, [sp, #100]	; 0x64
   82dbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82dbe:	4602      	mov	r2, r0
   82dc0:	3301      	adds	r3, #1
   82dc2:	4422      	add	r2, r4
   82dc4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   82dc6:	2b07      	cmp	r3, #7
   82dc8:	9227      	str	r2, [sp, #156]	; 0x9c
   82dca:	f8c8 4000 	str.w	r4, [r8]
   82dce:	f8c8 0004 	str.w	r0, [r8, #4]
   82dd2:	9326      	str	r3, [sp, #152]	; 0x98
   82dd4:	f300 8431 	bgt.w	8363a <_svfprintf_r+0x1386>
   82dd8:	f108 0808 	add.w	r8, r8, #8
   82ddc:	2900      	cmp	r1, #0
   82dde:	f2c0 8409 	blt.w	835f4 <_svfprintf_r+0x1340>
   82de2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   82de4:	3301      	adds	r3, #1
   82de6:	188c      	adds	r4, r1, r2
   82de8:	2b07      	cmp	r3, #7
   82dea:	9427      	str	r4, [sp, #156]	; 0x9c
   82dec:	9326      	str	r3, [sp, #152]	; 0x98
   82dee:	f8c8 6000 	str.w	r6, [r8]
   82df2:	f8c8 1004 	str.w	r1, [r8, #4]
   82df6:	f77f ac4d 	ble.w	82694 <_svfprintf_r+0x3e0>
   82dfa:	aa25      	add	r2, sp, #148	; 0x94
   82dfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82dfe:	980c      	ldr	r0, [sp, #48]	; 0x30
   82e00:	f002 fae4 	bl	853cc <__ssprint_r>
   82e04:	2800      	cmp	r0, #0
   82e06:	f47f ab32 	bne.w	8246e <_svfprintf_r+0x1ba>
   82e0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82e0c:	46c8      	mov	r8, r9
   82e0e:	e443      	b.n	82698 <_svfprintf_r+0x3e4>
   82e10:	aa25      	add	r2, sp, #148	; 0x94
   82e12:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82e14:	980c      	ldr	r0, [sp, #48]	; 0x30
   82e16:	f002 fad9 	bl	853cc <__ssprint_r>
   82e1a:	2800      	cmp	r0, #0
   82e1c:	f47f ab27 	bne.w	8246e <_svfprintf_r+0x1ba>
   82e20:	46c8      	mov	r8, r9
   82e22:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82e24:	f7ff bbe5 	b.w	825f2 <_svfprintf_r+0x33e>
   82e28:	2400      	movs	r4, #0
   82e2a:	2500      	movs	r5, #0
   82e2c:	f8cd b01c 	str.w	fp, [sp, #28]
   82e30:	4649      	mov	r1, r9
   82e32:	e004      	b.n	82e3e <_svfprintf_r+0xb8a>
   82e34:	00086a68 	.word	0x00086a68
   82e38:	00086b04 	.word	0x00086b04
   82e3c:	4631      	mov	r1, r6
   82e3e:	08e2      	lsrs	r2, r4, #3
   82e40:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   82e44:	08e8      	lsrs	r0, r5, #3
   82e46:	f004 0307 	and.w	r3, r4, #7
   82e4a:	4605      	mov	r5, r0
   82e4c:	4614      	mov	r4, r2
   82e4e:	3330      	adds	r3, #48	; 0x30
   82e50:	ea54 0205 	orrs.w	r2, r4, r5
   82e54:	f801 3c01 	strb.w	r3, [r1, #-1]
   82e58:	f101 36ff 	add.w	r6, r1, #4294967295
   82e5c:	d1ee      	bne.n	82e3c <_svfprintf_r+0xb88>
   82e5e:	9a07      	ldr	r2, [sp, #28]
   82e60:	07d2      	lsls	r2, r2, #31
   82e62:	f57f ad59 	bpl.w	82918 <_svfprintf_r+0x664>
   82e66:	2b30      	cmp	r3, #48	; 0x30
   82e68:	f43f ad56 	beq.w	82918 <_svfprintf_r+0x664>
   82e6c:	2330      	movs	r3, #48	; 0x30
   82e6e:	3902      	subs	r1, #2
   82e70:	f806 3c01 	strb.w	r3, [r6, #-1]
   82e74:	eba9 0301 	sub.w	r3, r9, r1
   82e78:	930e      	str	r3, [sp, #56]	; 0x38
   82e7a:	460e      	mov	r6, r1
   82e7c:	f7ff bb36 	b.w	824ec <_svfprintf_r+0x238>
   82e80:	991f      	ldr	r1, [sp, #124]	; 0x7c
   82e82:	2900      	cmp	r1, #0
   82e84:	f77f af79 	ble.w	82d7a <_svfprintf_r+0xac6>
   82e88:	9b12      	ldr	r3, [sp, #72]	; 0x48
   82e8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   82e8c:	4293      	cmp	r3, r2
   82e8e:	bfa8      	it	ge
   82e90:	4613      	movge	r3, r2
   82e92:	2b00      	cmp	r3, #0
   82e94:	461f      	mov	r7, r3
   82e96:	dd0b      	ble.n	82eb0 <_svfprintf_r+0xbfc>
   82e98:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82e9a:	443c      	add	r4, r7
   82e9c:	3301      	adds	r3, #1
   82e9e:	2b07      	cmp	r3, #7
   82ea0:	9427      	str	r4, [sp, #156]	; 0x9c
   82ea2:	e888 00c0 	stmia.w	r8, {r6, r7}
   82ea6:	9326      	str	r3, [sp, #152]	; 0x98
   82ea8:	f300 82fb 	bgt.w	834a2 <_svfprintf_r+0x11ee>
   82eac:	f108 0808 	add.w	r8, r8, #8
   82eb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   82eb2:	2f00      	cmp	r7, #0
   82eb4:	bfa8      	it	ge
   82eb6:	1bdb      	subge	r3, r3, r7
   82eb8:	2b00      	cmp	r3, #0
   82eba:	461f      	mov	r7, r3
   82ebc:	f340 80d7 	ble.w	8306e <_svfprintf_r+0xdba>
   82ec0:	2b10      	cmp	r3, #16
   82ec2:	f340 8434 	ble.w	8372e <_svfprintf_r+0x147a>
   82ec6:	4dba      	ldr	r5, [pc, #744]	; (831b0 <_svfprintf_r+0xefc>)
   82ec8:	4642      	mov	r2, r8
   82eca:	4621      	mov	r1, r4
   82ecc:	46b0      	mov	r8, r6
   82ece:	f04f 0b10 	mov.w	fp, #16
   82ed2:	462e      	mov	r6, r5
   82ed4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82ed6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82ed8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82eda:	e004      	b.n	82ee6 <_svfprintf_r+0xc32>
   82edc:	3208      	adds	r2, #8
   82ede:	3f10      	subs	r7, #16
   82ee0:	2f10      	cmp	r7, #16
   82ee2:	f340 80b5 	ble.w	83050 <_svfprintf_r+0xd9c>
   82ee6:	3301      	adds	r3, #1
   82ee8:	3110      	adds	r1, #16
   82eea:	2b07      	cmp	r3, #7
   82eec:	9127      	str	r1, [sp, #156]	; 0x9c
   82eee:	9326      	str	r3, [sp, #152]	; 0x98
   82ef0:	e882 0840 	stmia.w	r2, {r6, fp}
   82ef4:	ddf2      	ble.n	82edc <_svfprintf_r+0xc28>
   82ef6:	aa25      	add	r2, sp, #148	; 0x94
   82ef8:	4629      	mov	r1, r5
   82efa:	4620      	mov	r0, r4
   82efc:	f002 fa66 	bl	853cc <__ssprint_r>
   82f00:	2800      	cmp	r0, #0
   82f02:	f47f aab4 	bne.w	8246e <_svfprintf_r+0x1ba>
   82f06:	464a      	mov	r2, r9
   82f08:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82f0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82f0c:	e7e7      	b.n	82ede <_svfprintf_r+0xc2a>
   82f0e:	2d00      	cmp	r5, #0
   82f10:	bf08      	it	eq
   82f12:	2c0a      	cmpeq	r4, #10
   82f14:	f0c0 8090 	bcc.w	83038 <_svfprintf_r+0xd84>
   82f18:	464e      	mov	r6, r9
   82f1a:	4620      	mov	r0, r4
   82f1c:	4629      	mov	r1, r5
   82f1e:	220a      	movs	r2, #10
   82f20:	2300      	movs	r3, #0
   82f22:	f003 fb4f 	bl	865c4 <__aeabi_uldivmod>
   82f26:	3230      	adds	r2, #48	; 0x30
   82f28:	f806 2d01 	strb.w	r2, [r6, #-1]!
   82f2c:	4620      	mov	r0, r4
   82f2e:	4629      	mov	r1, r5
   82f30:	2300      	movs	r3, #0
   82f32:	220a      	movs	r2, #10
   82f34:	f003 fb46 	bl	865c4 <__aeabi_uldivmod>
   82f38:	4604      	mov	r4, r0
   82f3a:	460d      	mov	r5, r1
   82f3c:	ea54 0305 	orrs.w	r3, r4, r5
   82f40:	d1eb      	bne.n	82f1a <_svfprintf_r+0xc66>
   82f42:	eba9 0306 	sub.w	r3, r9, r6
   82f46:	930e      	str	r3, [sp, #56]	; 0x38
   82f48:	f7ff bad0 	b.w	824ec <_svfprintf_r+0x238>
   82f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82f4e:	464e      	mov	r6, r9
   82f50:	930e      	str	r3, [sp, #56]	; 0x38
   82f52:	f7ff bacb 	b.w	824ec <_svfprintf_r+0x238>
   82f56:	1e5e      	subs	r6, r3, #1
   82f58:	2e00      	cmp	r6, #0
   82f5a:	f77f aeca 	ble.w	82cf2 <_svfprintf_r+0xa3e>
   82f5e:	2e10      	cmp	r6, #16
   82f60:	f340 83e3 	ble.w	8372a <_svfprintf_r+0x1476>
   82f64:	4622      	mov	r2, r4
   82f66:	f04f 0b10 	mov.w	fp, #16
   82f6a:	4d91      	ldr	r5, [pc, #580]	; (831b0 <_svfprintf_r+0xefc>)
   82f6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82f6e:	e004      	b.n	82f7a <_svfprintf_r+0xcc6>
   82f70:	3e10      	subs	r6, #16
   82f72:	2e10      	cmp	r6, #16
   82f74:	f108 0808 	add.w	r8, r8, #8
   82f78:	dd15      	ble.n	82fa6 <_svfprintf_r+0xcf2>
   82f7a:	3701      	adds	r7, #1
   82f7c:	3210      	adds	r2, #16
   82f7e:	2f07      	cmp	r7, #7
   82f80:	9227      	str	r2, [sp, #156]	; 0x9c
   82f82:	9726      	str	r7, [sp, #152]	; 0x98
   82f84:	e888 0820 	stmia.w	r8, {r5, fp}
   82f88:	ddf2      	ble.n	82f70 <_svfprintf_r+0xcbc>
   82f8a:	aa25      	add	r2, sp, #148	; 0x94
   82f8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82f8e:	4620      	mov	r0, r4
   82f90:	f002 fa1c 	bl	853cc <__ssprint_r>
   82f94:	2800      	cmp	r0, #0
   82f96:	f47f aa6a 	bne.w	8246e <_svfprintf_r+0x1ba>
   82f9a:	3e10      	subs	r6, #16
   82f9c:	2e10      	cmp	r6, #16
   82f9e:	46c8      	mov	r8, r9
   82fa0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   82fa2:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82fa4:	dce9      	bgt.n	82f7a <_svfprintf_r+0xcc6>
   82fa6:	4614      	mov	r4, r2
   82fa8:	3701      	adds	r7, #1
   82faa:	4434      	add	r4, r6
   82fac:	2f07      	cmp	r7, #7
   82fae:	9427      	str	r4, [sp, #156]	; 0x9c
   82fb0:	9726      	str	r7, [sp, #152]	; 0x98
   82fb2:	e888 0060 	stmia.w	r8, {r5, r6}
   82fb6:	f77f ae9a 	ble.w	82cee <_svfprintf_r+0xa3a>
   82fba:	aa25      	add	r2, sp, #148	; 0x94
   82fbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82fbe:	980c      	ldr	r0, [sp, #48]	; 0x30
   82fc0:	f002 fa04 	bl	853cc <__ssprint_r>
   82fc4:	2800      	cmp	r0, #0
   82fc6:	f47f aa52 	bne.w	8246e <_svfprintf_r+0x1ba>
   82fca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82fcc:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82fce:	46c8      	mov	r8, r9
   82fd0:	e68f      	b.n	82cf2 <_svfprintf_r+0xa3e>
   82fd2:	3204      	adds	r2, #4
   82fd4:	681c      	ldr	r4, [r3, #0]
   82fd6:	2500      	movs	r5, #0
   82fd8:	2301      	movs	r3, #1
   82fda:	920f      	str	r2, [sp, #60]	; 0x3c
   82fdc:	f7ff ba68 	b.w	824b0 <_svfprintf_r+0x1fc>
   82fe0:	681c      	ldr	r4, [r3, #0]
   82fe2:	3304      	adds	r3, #4
   82fe4:	930f      	str	r3, [sp, #60]	; 0x3c
   82fe6:	2500      	movs	r5, #0
   82fe8:	e42a      	b.n	82840 <_svfprintf_r+0x58c>
   82fea:	681c      	ldr	r4, [r3, #0]
   82fec:	3304      	adds	r3, #4
   82fee:	17e5      	asrs	r5, r4, #31
   82ff0:	4622      	mov	r2, r4
   82ff2:	930f      	str	r3, [sp, #60]	; 0x3c
   82ff4:	462b      	mov	r3, r5
   82ff6:	2a00      	cmp	r2, #0
   82ff8:	f173 0300 	sbcs.w	r3, r3, #0
   82ffc:	f6bf ac68 	bge.w	828d0 <_svfprintf_r+0x61c>
   83000:	272d      	movs	r7, #45	; 0x2d
   83002:	4264      	negs	r4, r4
   83004:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   83008:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   8300c:	2301      	movs	r3, #1
   8300e:	f7ff ba53 	b.w	824b8 <_svfprintf_r+0x204>
   83012:	990f      	ldr	r1, [sp, #60]	; 0x3c
   83014:	2500      	movs	r5, #0
   83016:	460a      	mov	r2, r1
   83018:	3204      	adds	r2, #4
   8301a:	680c      	ldr	r4, [r1, #0]
   8301c:	920f      	str	r2, [sp, #60]	; 0x3c
   8301e:	f7ff ba47 	b.w	824b0 <_svfprintf_r+0x1fc>
   83022:	4614      	mov	r4, r2
   83024:	3301      	adds	r3, #1
   83026:	4434      	add	r4, r6
   83028:	2b07      	cmp	r3, #7
   8302a:	9427      	str	r4, [sp, #156]	; 0x9c
   8302c:	9326      	str	r3, [sp, #152]	; 0x98
   8302e:	e888 0060 	stmia.w	r8, {r5, r6}
   83032:	f77f ab2f 	ble.w	82694 <_svfprintf_r+0x3e0>
   83036:	e6e0      	b.n	82dfa <_svfprintf_r+0xb46>
   83038:	f8dd b01c 	ldr.w	fp, [sp, #28]
   8303c:	2301      	movs	r3, #1
   8303e:	ae42      	add	r6, sp, #264	; 0x108
   83040:	3430      	adds	r4, #48	; 0x30
   83042:	f8cd b01c 	str.w	fp, [sp, #28]
   83046:	f806 4d41 	strb.w	r4, [r6, #-65]!
   8304a:	930e      	str	r3, [sp, #56]	; 0x38
   8304c:	f7ff ba4e 	b.w	824ec <_svfprintf_r+0x238>
   83050:	4635      	mov	r5, r6
   83052:	460c      	mov	r4, r1
   83054:	4646      	mov	r6, r8
   83056:	4690      	mov	r8, r2
   83058:	3301      	adds	r3, #1
   8305a:	443c      	add	r4, r7
   8305c:	2b07      	cmp	r3, #7
   8305e:	9427      	str	r4, [sp, #156]	; 0x9c
   83060:	9326      	str	r3, [sp, #152]	; 0x98
   83062:	e888 00a0 	stmia.w	r8, {r5, r7}
   83066:	f300 8246 	bgt.w	834f6 <_svfprintf_r+0x1242>
   8306a:	f108 0808 	add.w	r8, r8, #8
   8306e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   83070:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   83072:	429a      	cmp	r2, r3
   83074:	db45      	blt.n	83102 <_svfprintf_r+0xe4e>
   83076:	9b07      	ldr	r3, [sp, #28]
   83078:	07d9      	lsls	r1, r3, #31
   8307a:	d442      	bmi.n	83102 <_svfprintf_r+0xe4e>
   8307c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8307e:	9812      	ldr	r0, [sp, #72]	; 0x48
   83080:	1a9a      	subs	r2, r3, r2
   83082:	1a1d      	subs	r5, r3, r0
   83084:	4295      	cmp	r5, r2
   83086:	bfa8      	it	ge
   83088:	4615      	movge	r5, r2
   8308a:	2d00      	cmp	r5, #0
   8308c:	dd0e      	ble.n	830ac <_svfprintf_r+0xdf8>
   8308e:	9926      	ldr	r1, [sp, #152]	; 0x98
   83090:	4406      	add	r6, r0
   83092:	3101      	adds	r1, #1
   83094:	442c      	add	r4, r5
   83096:	2907      	cmp	r1, #7
   83098:	f8c8 6000 	str.w	r6, [r8]
   8309c:	9427      	str	r4, [sp, #156]	; 0x9c
   8309e:	f8c8 5004 	str.w	r5, [r8, #4]
   830a2:	9126      	str	r1, [sp, #152]	; 0x98
   830a4:	f300 8216 	bgt.w	834d4 <_svfprintf_r+0x1220>
   830a8:	f108 0808 	add.w	r8, r8, #8
   830ac:	2d00      	cmp	r5, #0
   830ae:	bfb4      	ite	lt
   830b0:	4616      	movlt	r6, r2
   830b2:	1b56      	subge	r6, r2, r5
   830b4:	2e00      	cmp	r6, #0
   830b6:	f77f aaef 	ble.w	82698 <_svfprintf_r+0x3e4>
   830ba:	2e10      	cmp	r6, #16
   830bc:	f340 82f3 	ble.w	836a6 <_svfprintf_r+0x13f2>
   830c0:	4622      	mov	r2, r4
   830c2:	2710      	movs	r7, #16
   830c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   830c6:	4d3a      	ldr	r5, [pc, #232]	; (831b0 <_svfprintf_r+0xefc>)
   830c8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   830cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   830ce:	e004      	b.n	830da <_svfprintf_r+0xe26>
   830d0:	f108 0808 	add.w	r8, r8, #8
   830d4:	3e10      	subs	r6, #16
   830d6:	2e10      	cmp	r6, #16
   830d8:	dda3      	ble.n	83022 <_svfprintf_r+0xd6e>
   830da:	3301      	adds	r3, #1
   830dc:	3210      	adds	r2, #16
   830de:	2b07      	cmp	r3, #7
   830e0:	9227      	str	r2, [sp, #156]	; 0x9c
   830e2:	9326      	str	r3, [sp, #152]	; 0x98
   830e4:	e888 00a0 	stmia.w	r8, {r5, r7}
   830e8:	ddf2      	ble.n	830d0 <_svfprintf_r+0xe1c>
   830ea:	aa25      	add	r2, sp, #148	; 0x94
   830ec:	4621      	mov	r1, r4
   830ee:	4658      	mov	r0, fp
   830f0:	f002 f96c 	bl	853cc <__ssprint_r>
   830f4:	2800      	cmp	r0, #0
   830f6:	f47f a9ba 	bne.w	8246e <_svfprintf_r+0x1ba>
   830fa:	46c8      	mov	r8, r9
   830fc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   830fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83100:	e7e8      	b.n	830d4 <_svfprintf_r+0xe20>
   83102:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83104:	9819      	ldr	r0, [sp, #100]	; 0x64
   83106:	3301      	adds	r3, #1
   83108:	991a      	ldr	r1, [sp, #104]	; 0x68
   8310a:	4404      	add	r4, r0
   8310c:	2b07      	cmp	r3, #7
   8310e:	9427      	str	r4, [sp, #156]	; 0x9c
   83110:	f8c8 1000 	str.w	r1, [r8]
   83114:	f8c8 0004 	str.w	r0, [r8, #4]
   83118:	9326      	str	r3, [sp, #152]	; 0x98
   8311a:	f300 81cf 	bgt.w	834bc <_svfprintf_r+0x1208>
   8311e:	f108 0808 	add.w	r8, r8, #8
   83122:	e7ab      	b.n	8307c <_svfprintf_r+0xdc8>
   83124:	9b07      	ldr	r3, [sp, #28]
   83126:	07da      	lsls	r2, r3, #31
   83128:	f53f adad 	bmi.w	82c86 <_svfprintf_r+0x9d2>
   8312c:	2301      	movs	r3, #1
   8312e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83130:	441c      	add	r4, r3
   83132:	441f      	add	r7, r3
   83134:	2f07      	cmp	r7, #7
   83136:	9427      	str	r4, [sp, #156]	; 0x9c
   83138:	f8c8 6000 	str.w	r6, [r8]
   8313c:	9726      	str	r7, [sp, #152]	; 0x98
   8313e:	f8c8 3004 	str.w	r3, [r8, #4]
   83142:	f77f add4 	ble.w	82cee <_svfprintf_r+0xa3a>
   83146:	aa25      	add	r2, sp, #148	; 0x94
   83148:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8314a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8314c:	f002 f93e 	bl	853cc <__ssprint_r>
   83150:	2800      	cmp	r0, #0
   83152:	f47f a98c 	bne.w	8246e <_svfprintf_r+0x1ba>
   83156:	46c8      	mov	r8, r9
   83158:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8315a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8315c:	e5c9      	b.n	82cf2 <_svfprintf_r+0xa3e>
   8315e:	aa25      	add	r2, sp, #148	; 0x94
   83160:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83162:	980c      	ldr	r0, [sp, #48]	; 0x30
   83164:	f002 f932 	bl	853cc <__ssprint_r>
   83168:	2800      	cmp	r0, #0
   8316a:	f47f a980 	bne.w	8246e <_svfprintf_r+0x1ba>
   8316e:	46c8      	mov	r8, r9
   83170:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83172:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83174:	e596      	b.n	82ca4 <_svfprintf_r+0x9f0>
   83176:	aa25      	add	r2, sp, #148	; 0x94
   83178:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8317a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8317c:	f002 f926 	bl	853cc <__ssprint_r>
   83180:	2800      	cmp	r0, #0
   83182:	f47f a974 	bne.w	8246e <_svfprintf_r+0x1ba>
   83186:	46c8      	mov	r8, r9
   83188:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8318a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8318c:	e599      	b.n	82cc2 <_svfprintf_r+0xa0e>
   8318e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83190:	3407      	adds	r4, #7
   83192:	f024 0407 	bic.w	r4, r4, #7
   83196:	f104 0108 	add.w	r1, r4, #8
   8319a:	e9d4 2300 	ldrd	r2, r3, [r4]
   8319e:	910f      	str	r1, [sp, #60]	; 0x3c
   831a0:	4614      	mov	r4, r2
   831a2:	461d      	mov	r5, r3
   831a4:	f7ff bb8f 	b.w	828c6 <_svfprintf_r+0x612>
   831a8:	464e      	mov	r6, r9
   831aa:	f7ff b99f 	b.w	824ec <_svfprintf_r+0x238>
   831ae:	bf00      	nop
   831b0:	00086b04 	.word	0x00086b04
   831b4:	aa25      	add	r2, sp, #148	; 0x94
   831b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   831b8:	980c      	ldr	r0, [sp, #48]	; 0x30
   831ba:	f002 f907 	bl	853cc <__ssprint_r>
   831be:	2800      	cmp	r0, #0
   831c0:	f47f a955 	bne.w	8246e <_svfprintf_r+0x1ba>
   831c4:	46c8      	mov	r8, r9
   831c6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   831c8:	f7ff ba16 	b.w	825f8 <_svfprintf_r+0x344>
   831cc:	9c15      	ldr	r4, [sp, #84]	; 0x54
   831ce:	4622      	mov	r2, r4
   831d0:	4620      	mov	r0, r4
   831d2:	9c14      	ldr	r4, [sp, #80]	; 0x50
   831d4:	4623      	mov	r3, r4
   831d6:	4621      	mov	r1, r4
   831d8:	f003 f9b6 	bl	86548 <__aeabi_dcmpun>
   831dc:	2800      	cmp	r0, #0
   831de:	f040 8273 	bne.w	836c8 <_svfprintf_r+0x1414>
   831e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   831e4:	3301      	adds	r3, #1
   831e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   831e8:	f023 0320 	bic.w	r3, r3, #32
   831ec:	930e      	str	r3, [sp, #56]	; 0x38
   831ee:	f000 819c 	beq.w	8352a <_svfprintf_r+0x1276>
   831f2:	2b47      	cmp	r3, #71	; 0x47
   831f4:	f000 80d6 	beq.w	833a4 <_svfprintf_r+0x10f0>
   831f8:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   831fc:	9307      	str	r3, [sp, #28]
   831fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83200:	1e1f      	subs	r7, r3, #0
   83202:	9b15      	ldr	r3, [sp, #84]	; 0x54
   83204:	9308      	str	r3, [sp, #32]
   83206:	bfb7      	itett	lt
   83208:	463b      	movlt	r3, r7
   8320a:	2300      	movge	r3, #0
   8320c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   83210:	232d      	movlt	r3, #45	; 0x2d
   83212:	9310      	str	r3, [sp, #64]	; 0x40
   83214:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83216:	2b66      	cmp	r3, #102	; 0x66
   83218:	f000 8190 	beq.w	8353c <_svfprintf_r+0x1288>
   8321c:	2b46      	cmp	r3, #70	; 0x46
   8321e:	f000 80a4 	beq.w	8336a <_svfprintf_r+0x10b6>
   83222:	2002      	movs	r0, #2
   83224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83226:	a923      	add	r1, sp, #140	; 0x8c
   83228:	2b45      	cmp	r3, #69	; 0x45
   8322a:	bf0a      	itet	eq
   8322c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   8322e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   83230:	1c5d      	addeq	r5, r3, #1
   83232:	e88d 0021 	stmia.w	sp, {r0, r5}
   83236:	9104      	str	r1, [sp, #16]
   83238:	a820      	add	r0, sp, #128	; 0x80
   8323a:	a91f      	add	r1, sp, #124	; 0x7c
   8323c:	463b      	mov	r3, r7
   8323e:	9003      	str	r0, [sp, #12]
   83240:	9a08      	ldr	r2, [sp, #32]
   83242:	9102      	str	r1, [sp, #8]
   83244:	980c      	ldr	r0, [sp, #48]	; 0x30
   83246:	f000 fb5b 	bl	83900 <_dtoa_r>
   8324a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8324c:	4606      	mov	r6, r0
   8324e:	2b67      	cmp	r3, #103	; 0x67
   83250:	f040 81ba 	bne.w	835c8 <_svfprintf_r+0x1314>
   83254:	f01b 0f01 	tst.w	fp, #1
   83258:	f000 8223 	beq.w	836a2 <_svfprintf_r+0x13ee>
   8325c:	1974      	adds	r4, r6, r5
   8325e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   83260:	9808      	ldr	r0, [sp, #32]
   83262:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   83264:	4639      	mov	r1, r7
   83266:	f003 f93d 	bl	864e4 <__aeabi_dcmpeq>
   8326a:	2800      	cmp	r0, #0
   8326c:	f040 8124 	bne.w	834b8 <_svfprintf_r+0x1204>
   83270:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   83272:	42a3      	cmp	r3, r4
   83274:	d206      	bcs.n	83284 <_svfprintf_r+0xfd0>
   83276:	2130      	movs	r1, #48	; 0x30
   83278:	1c5a      	adds	r2, r3, #1
   8327a:	9223      	str	r2, [sp, #140]	; 0x8c
   8327c:	7019      	strb	r1, [r3, #0]
   8327e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   83280:	429c      	cmp	r4, r3
   83282:	d8f9      	bhi.n	83278 <_svfprintf_r+0xfc4>
   83284:	1b9b      	subs	r3, r3, r6
   83286:	9313      	str	r3, [sp, #76]	; 0x4c
   83288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8328a:	2b47      	cmp	r3, #71	; 0x47
   8328c:	f000 80a2 	beq.w	833d4 <_svfprintf_r+0x1120>
   83290:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83292:	2b65      	cmp	r3, #101	; 0x65
   83294:	f340 81a7 	ble.w	835e6 <_svfprintf_r+0x1332>
   83298:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8329a:	2b66      	cmp	r3, #102	; 0x66
   8329c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8329e:	9312      	str	r3, [sp, #72]	; 0x48
   832a0:	f000 8171 	beq.w	83586 <_svfprintf_r+0x12d2>
   832a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   832a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   832a8:	4619      	mov	r1, r3
   832aa:	4291      	cmp	r1, r2
   832ac:	f300 815d 	bgt.w	8356a <_svfprintf_r+0x12b6>
   832b0:	f01b 0f01 	tst.w	fp, #1
   832b4:	f040 81f0 	bne.w	83698 <_svfprintf_r+0x13e4>
   832b8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   832bc:	9308      	str	r3, [sp, #32]
   832be:	2367      	movs	r3, #103	; 0x67
   832c0:	920e      	str	r2, [sp, #56]	; 0x38
   832c2:	9311      	str	r3, [sp, #68]	; 0x44
   832c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   832c6:	2b00      	cmp	r3, #0
   832c8:	d17d      	bne.n	833c6 <_svfprintf_r+0x1112>
   832ca:	930a      	str	r3, [sp, #40]	; 0x28
   832cc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   832d0:	f7ff b914 	b.w	824fc <_svfprintf_r+0x248>
   832d4:	f024 0407 	bic.w	r4, r4, #7
   832d8:	6823      	ldr	r3, [r4, #0]
   832da:	9315      	str	r3, [sp, #84]	; 0x54
   832dc:	6863      	ldr	r3, [r4, #4]
   832de:	9314      	str	r3, [sp, #80]	; 0x50
   832e0:	f104 0308 	add.w	r3, r4, #8
   832e4:	930f      	str	r3, [sp, #60]	; 0x3c
   832e6:	f7ff bb2f 	b.w	82948 <_svfprintf_r+0x694>
   832ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   832ec:	6813      	ldr	r3, [r2, #0]
   832ee:	3204      	adds	r2, #4
   832f0:	920f      	str	r2, [sp, #60]	; 0x3c
   832f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   832f4:	601a      	str	r2, [r3, #0]
   832f6:	f7ff b804 	b.w	82302 <_svfprintf_r+0x4e>
   832fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   832fc:	4daf      	ldr	r5, [pc, #700]	; (835bc <_svfprintf_r+0x1308>)
   832fe:	f7ff b9ad 	b.w	8265c <_svfprintf_r+0x3a8>
   83302:	aa25      	add	r2, sp, #148	; 0x94
   83304:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83306:	980c      	ldr	r0, [sp, #48]	; 0x30
   83308:	f002 f860 	bl	853cc <__ssprint_r>
   8330c:	2800      	cmp	r0, #0
   8330e:	f47f a8ae 	bne.w	8246e <_svfprintf_r+0x1ba>
   83312:	46c8      	mov	r8, r9
   83314:	e431      	b.n	82b7a <_svfprintf_r+0x8c6>
   83316:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83318:	4613      	mov	r3, r2
   8331a:	3304      	adds	r3, #4
   8331c:	930f      	str	r3, [sp, #60]	; 0x3c
   8331e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83320:	6811      	ldr	r1, [r2, #0]
   83322:	17dd      	asrs	r5, r3, #31
   83324:	461a      	mov	r2, r3
   83326:	462b      	mov	r3, r5
   83328:	e9c1 2300 	strd	r2, r3, [r1]
   8332c:	f7fe bfe9 	b.w	82302 <_svfprintf_r+0x4e>
   83330:	aa25      	add	r2, sp, #148	; 0x94
   83332:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83334:	980c      	ldr	r0, [sp, #48]	; 0x30
   83336:	f002 f849 	bl	853cc <__ssprint_r>
   8333a:	2800      	cmp	r0, #0
   8333c:	f47f a897 	bne.w	8246e <_svfprintf_r+0x1ba>
   83340:	46c8      	mov	r8, r9
   83342:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83344:	e432      	b.n	82bac <_svfprintf_r+0x8f8>
   83346:	f108 0808 	add.w	r8, r8, #8
   8334a:	e52f      	b.n	82dac <_svfprintf_r+0xaf8>
   8334c:	2140      	movs	r1, #64	; 0x40
   8334e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83350:	f001 fa24 	bl	8479c <_malloc_r>
   83354:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83356:	6010      	str	r0, [r2, #0]
   83358:	6110      	str	r0, [r2, #16]
   8335a:	2800      	cmp	r0, #0
   8335c:	f000 8214 	beq.w	83788 <_svfprintf_r+0x14d4>
   83360:	2340      	movs	r3, #64	; 0x40
   83362:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83364:	6153      	str	r3, [r2, #20]
   83366:	f7fe bfbc 	b.w	822e2 <_svfprintf_r+0x2e>
   8336a:	2003      	movs	r0, #3
   8336c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8336e:	a923      	add	r1, sp, #140	; 0x8c
   83370:	e88d 0011 	stmia.w	sp, {r0, r4}
   83374:	9104      	str	r1, [sp, #16]
   83376:	a820      	add	r0, sp, #128	; 0x80
   83378:	a91f      	add	r1, sp, #124	; 0x7c
   8337a:	9003      	str	r0, [sp, #12]
   8337c:	9a08      	ldr	r2, [sp, #32]
   8337e:	463b      	mov	r3, r7
   83380:	9102      	str	r1, [sp, #8]
   83382:	980c      	ldr	r0, [sp, #48]	; 0x30
   83384:	f000 fabc 	bl	83900 <_dtoa_r>
   83388:	4625      	mov	r5, r4
   8338a:	4606      	mov	r6, r0
   8338c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8338e:	1974      	adds	r4, r6, r5
   83390:	2b46      	cmp	r3, #70	; 0x46
   83392:	f47f af64 	bne.w	8325e <_svfprintf_r+0xfaa>
   83396:	7833      	ldrb	r3, [r6, #0]
   83398:	2b30      	cmp	r3, #48	; 0x30
   8339a:	f000 8187 	beq.w	836ac <_svfprintf_r+0x13f8>
   8339e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   833a0:	442c      	add	r4, r5
   833a2:	e75c      	b.n	8325e <_svfprintf_r+0xfaa>
   833a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   833a6:	2b00      	cmp	r3, #0
   833a8:	bf08      	it	eq
   833aa:	2301      	moveq	r3, #1
   833ac:	930a      	str	r3, [sp, #40]	; 0x28
   833ae:	e723      	b.n	831f8 <_svfprintf_r+0xf44>
   833b0:	4630      	mov	r0, r6
   833b2:	950a      	str	r5, [sp, #40]	; 0x28
   833b4:	f7fe ff16 	bl	821e4 <strlen>
   833b8:	940f      	str	r4, [sp, #60]	; 0x3c
   833ba:	900e      	str	r0, [sp, #56]	; 0x38
   833bc:	f8cd b01c 	str.w	fp, [sp, #28]
   833c0:	4603      	mov	r3, r0
   833c2:	f7ff b9e7 	b.w	82794 <_svfprintf_r+0x4e0>
   833c6:	272d      	movs	r7, #45	; 0x2d
   833c8:	2300      	movs	r3, #0
   833ca:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   833ce:	930a      	str	r3, [sp, #40]	; 0x28
   833d0:	f7ff b895 	b.w	824fe <_svfprintf_r+0x24a>
   833d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   833d6:	461a      	mov	r2, r3
   833d8:	9312      	str	r3, [sp, #72]	; 0x48
   833da:	3303      	adds	r3, #3
   833dc:	db04      	blt.n	833e8 <_svfprintf_r+0x1134>
   833de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   833e0:	4619      	mov	r1, r3
   833e2:	4291      	cmp	r1, r2
   833e4:	f6bf af5e 	bge.w	832a4 <_svfprintf_r+0xff0>
   833e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   833ea:	3b02      	subs	r3, #2
   833ec:	9311      	str	r3, [sp, #68]	; 0x44
   833ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
   833f0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   833f4:	3b01      	subs	r3, #1
   833f6:	2b00      	cmp	r3, #0
   833f8:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   833fc:	bfb4      	ite	lt
   833fe:	222d      	movlt	r2, #45	; 0x2d
   83400:	222b      	movge	r2, #43	; 0x2b
   83402:	931f      	str	r3, [sp, #124]	; 0x7c
   83404:	bfb8      	it	lt
   83406:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   83408:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   8340c:	bfb8      	it	lt
   8340e:	f1c3 0301 	rsblt	r3, r3, #1
   83412:	2b09      	cmp	r3, #9
   83414:	f340 811f 	ble.w	83656 <_svfprintf_r+0x13a2>
   83418:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   8341c:	4601      	mov	r1, r0
   8341e:	4c68      	ldr	r4, [pc, #416]	; (835c0 <_svfprintf_r+0x130c>)
   83420:	e000      	b.n	83424 <_svfprintf_r+0x1170>
   83422:	4611      	mov	r1, r2
   83424:	fb84 5203 	smull	r5, r2, r4, r3
   83428:	17dd      	asrs	r5, r3, #31
   8342a:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   8342e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   83432:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   83436:	3230      	adds	r2, #48	; 0x30
   83438:	2d09      	cmp	r5, #9
   8343a:	f801 2c01 	strb.w	r2, [r1, #-1]
   8343e:	462b      	mov	r3, r5
   83440:	f101 32ff 	add.w	r2, r1, #4294967295
   83444:	dced      	bgt.n	83422 <_svfprintf_r+0x116e>
   83446:	3330      	adds	r3, #48	; 0x30
   83448:	3902      	subs	r1, #2
   8344a:	b2dc      	uxtb	r4, r3
   8344c:	4288      	cmp	r0, r1
   8344e:	f802 4c01 	strb.w	r4, [r2, #-1]
   83452:	f240 8192 	bls.w	8377a <_svfprintf_r+0x14c6>
   83456:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   8345a:	4613      	mov	r3, r2
   8345c:	e001      	b.n	83462 <_svfprintf_r+0x11ae>
   8345e:	f813 4b01 	ldrb.w	r4, [r3], #1
   83462:	4283      	cmp	r3, r0
   83464:	f801 4b01 	strb.w	r4, [r1], #1
   83468:	d1f9      	bne.n	8345e <_svfprintf_r+0x11aa>
   8346a:	3301      	adds	r3, #1
   8346c:	1a9b      	subs	r3, r3, r2
   8346e:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   83472:	4413      	add	r3, r2
   83474:	aa21      	add	r2, sp, #132	; 0x84
   83476:	1a9b      	subs	r3, r3, r2
   83478:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8347a:	931b      	str	r3, [sp, #108]	; 0x6c
   8347c:	2a01      	cmp	r2, #1
   8347e:	4413      	add	r3, r2
   83480:	930e      	str	r3, [sp, #56]	; 0x38
   83482:	f340 8148 	ble.w	83716 <_svfprintf_r+0x1462>
   83486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83488:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8348a:	4413      	add	r3, r2
   8348c:	930e      	str	r3, [sp, #56]	; 0x38
   8348e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   83492:	9308      	str	r3, [sp, #32]
   83494:	2300      	movs	r3, #0
   83496:	9312      	str	r3, [sp, #72]	; 0x48
   83498:	e714      	b.n	832c4 <_svfprintf_r+0x1010>
   8349a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8349c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8349e:	f7ff b876 	b.w	8258e <_svfprintf_r+0x2da>
   834a2:	aa25      	add	r2, sp, #148	; 0x94
   834a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   834a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   834a8:	f001 ff90 	bl	853cc <__ssprint_r>
   834ac:	2800      	cmp	r0, #0
   834ae:	f47e afde 	bne.w	8246e <_svfprintf_r+0x1ba>
   834b2:	46c8      	mov	r8, r9
   834b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   834b6:	e4fb      	b.n	82eb0 <_svfprintf_r+0xbfc>
   834b8:	4623      	mov	r3, r4
   834ba:	e6e3      	b.n	83284 <_svfprintf_r+0xfd0>
   834bc:	aa25      	add	r2, sp, #148	; 0x94
   834be:	990b      	ldr	r1, [sp, #44]	; 0x2c
   834c0:	980c      	ldr	r0, [sp, #48]	; 0x30
   834c2:	f001 ff83 	bl	853cc <__ssprint_r>
   834c6:	2800      	cmp	r0, #0
   834c8:	f47e afd1 	bne.w	8246e <_svfprintf_r+0x1ba>
   834cc:	46c8      	mov	r8, r9
   834ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   834d0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   834d2:	e5d3      	b.n	8307c <_svfprintf_r+0xdc8>
   834d4:	aa25      	add	r2, sp, #148	; 0x94
   834d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   834d8:	980c      	ldr	r0, [sp, #48]	; 0x30
   834da:	f001 ff77 	bl	853cc <__ssprint_r>
   834de:	2800      	cmp	r0, #0
   834e0:	f47e afc5 	bne.w	8246e <_svfprintf_r+0x1ba>
   834e4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   834e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   834e8:	46c8      	mov	r8, r9
   834ea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   834ec:	1a9a      	subs	r2, r3, r2
   834ee:	e5dd      	b.n	830ac <_svfprintf_r+0xdf8>
   834f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   834f2:	f7ff b8fe 	b.w	826f2 <_svfprintf_r+0x43e>
   834f6:	aa25      	add	r2, sp, #148	; 0x94
   834f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   834fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   834fc:	f001 ff66 	bl	853cc <__ssprint_r>
   83500:	2800      	cmp	r0, #0
   83502:	f47e afb4 	bne.w	8246e <_svfprintf_r+0x1ba>
   83506:	46c8      	mov	r8, r9
   83508:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8350a:	e5b0      	b.n	8306e <_svfprintf_r+0xdba>
   8350c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8350e:	4637      	mov	r7, r6
   83510:	2b06      	cmp	r3, #6
   83512:	bf28      	it	cs
   83514:	2306      	movcs	r3, #6
   83516:	960a      	str	r6, [sp, #40]	; 0x28
   83518:	9612      	str	r6, [sp, #72]	; 0x48
   8351a:	9308      	str	r3, [sp, #32]
   8351c:	940f      	str	r4, [sp, #60]	; 0x3c
   8351e:	f8cd b01c 	str.w	fp, [sp, #28]
   83522:	930e      	str	r3, [sp, #56]	; 0x38
   83524:	4e27      	ldr	r6, [pc, #156]	; (835c4 <_svfprintf_r+0x1310>)
   83526:	f7fe bfe9 	b.w	824fc <_svfprintf_r+0x248>
   8352a:	2306      	movs	r3, #6
   8352c:	930a      	str	r3, [sp, #40]	; 0x28
   8352e:	e663      	b.n	831f8 <_svfprintf_r+0xf44>
   83530:	232d      	movs	r3, #45	; 0x2d
   83532:	461f      	mov	r7, r3
   83534:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   83538:	f7ff ba28 	b.w	8298c <_svfprintf_r+0x6d8>
   8353c:	2003      	movs	r0, #3
   8353e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   83540:	a923      	add	r1, sp, #140	; 0x8c
   83542:	e88d 0011 	stmia.w	sp, {r0, r4}
   83546:	9104      	str	r1, [sp, #16]
   83548:	a820      	add	r0, sp, #128	; 0x80
   8354a:	a91f      	add	r1, sp, #124	; 0x7c
   8354c:	9003      	str	r0, [sp, #12]
   8354e:	9a08      	ldr	r2, [sp, #32]
   83550:	463b      	mov	r3, r7
   83552:	9102      	str	r1, [sp, #8]
   83554:	980c      	ldr	r0, [sp, #48]	; 0x30
   83556:	f000 f9d3 	bl	83900 <_dtoa_r>
   8355a:	4625      	mov	r5, r4
   8355c:	4606      	mov	r6, r0
   8355e:	1904      	adds	r4, r0, r4
   83560:	e719      	b.n	83396 <_svfprintf_r+0x10e2>
   83562:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83564:	4d15      	ldr	r5, [pc, #84]	; (835bc <_svfprintf_r+0x1308>)
   83566:	f7ff bb7e 	b.w	82c66 <_svfprintf_r+0x9b2>
   8356a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8356c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8356e:	4413      	add	r3, r2
   83570:	9a12      	ldr	r2, [sp, #72]	; 0x48
   83572:	930e      	str	r3, [sp, #56]	; 0x38
   83574:	2a00      	cmp	r2, #0
   83576:	f340 80c7 	ble.w	83708 <_svfprintf_r+0x1454>
   8357a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8357e:	9308      	str	r3, [sp, #32]
   83580:	2367      	movs	r3, #103	; 0x67
   83582:	9311      	str	r3, [sp, #68]	; 0x44
   83584:	e69e      	b.n	832c4 <_svfprintf_r+0x1010>
   83586:	2b00      	cmp	r3, #0
   83588:	f340 80e1 	ble.w	8374e <_svfprintf_r+0x149a>
   8358c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8358e:	2a00      	cmp	r2, #0
   83590:	f040 80b0 	bne.w	836f4 <_svfprintf_r+0x1440>
   83594:	f01b 0f01 	tst.w	fp, #1
   83598:	f040 80ac 	bne.w	836f4 <_svfprintf_r+0x1440>
   8359c:	9308      	str	r3, [sp, #32]
   8359e:	930e      	str	r3, [sp, #56]	; 0x38
   835a0:	e690      	b.n	832c4 <_svfprintf_r+0x1010>
   835a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   835a4:	940f      	str	r4, [sp, #60]	; 0x3c
   835a6:	9308      	str	r3, [sp, #32]
   835a8:	930e      	str	r3, [sp, #56]	; 0x38
   835aa:	900a      	str	r0, [sp, #40]	; 0x28
   835ac:	f8cd b01c 	str.w	fp, [sp, #28]
   835b0:	9012      	str	r0, [sp, #72]	; 0x48
   835b2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   835b6:	f7fe bfa1 	b.w	824fc <_svfprintf_r+0x248>
   835ba:	bf00      	nop
   835bc:	00086b04 	.word	0x00086b04
   835c0:	66666667 	.word	0x66666667
   835c4:	00086aec 	.word	0x00086aec
   835c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   835ca:	2b47      	cmp	r3, #71	; 0x47
   835cc:	f47f ae46 	bne.w	8325c <_svfprintf_r+0xfa8>
   835d0:	f01b 0f01 	tst.w	fp, #1
   835d4:	f47f aeda 	bne.w	8338c <_svfprintf_r+0x10d8>
   835d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   835da:	1b9b      	subs	r3, r3, r6
   835dc:	9313      	str	r3, [sp, #76]	; 0x4c
   835de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   835e0:	2b47      	cmp	r3, #71	; 0x47
   835e2:	f43f aef7 	beq.w	833d4 <_svfprintf_r+0x1120>
   835e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   835e8:	9312      	str	r3, [sp, #72]	; 0x48
   835ea:	e700      	b.n	833ee <_svfprintf_r+0x113a>
   835ec:	2000      	movs	r0, #0
   835ee:	900a      	str	r0, [sp, #40]	; 0x28
   835f0:	f7fe bebc 	b.w	8236c <_svfprintf_r+0xb8>
   835f4:	424f      	negs	r7, r1
   835f6:	3110      	adds	r1, #16
   835f8:	da35      	bge.n	83666 <_svfprintf_r+0x13b2>
   835fa:	2410      	movs	r4, #16
   835fc:	4d6a      	ldr	r5, [pc, #424]	; (837a8 <_svfprintf_r+0x14f4>)
   835fe:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   83602:	e004      	b.n	8360e <_svfprintf_r+0x135a>
   83604:	f108 0808 	add.w	r8, r8, #8
   83608:	3f10      	subs	r7, #16
   8360a:	2f10      	cmp	r7, #16
   8360c:	dd2c      	ble.n	83668 <_svfprintf_r+0x13b4>
   8360e:	3301      	adds	r3, #1
   83610:	3210      	adds	r2, #16
   83612:	2b07      	cmp	r3, #7
   83614:	9227      	str	r2, [sp, #156]	; 0x9c
   83616:	9326      	str	r3, [sp, #152]	; 0x98
   83618:	f8c8 5000 	str.w	r5, [r8]
   8361c:	f8c8 4004 	str.w	r4, [r8, #4]
   83620:	ddf0      	ble.n	83604 <_svfprintf_r+0x1350>
   83622:	aa25      	add	r2, sp, #148	; 0x94
   83624:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83626:	4658      	mov	r0, fp
   83628:	f001 fed0 	bl	853cc <__ssprint_r>
   8362c:	2800      	cmp	r0, #0
   8362e:	f47e af1e 	bne.w	8246e <_svfprintf_r+0x1ba>
   83632:	46c8      	mov	r8, r9
   83634:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83636:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83638:	e7e6      	b.n	83608 <_svfprintf_r+0x1354>
   8363a:	aa25      	add	r2, sp, #148	; 0x94
   8363c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8363e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83640:	f001 fec4 	bl	853cc <__ssprint_r>
   83644:	2800      	cmp	r0, #0
   83646:	f47e af12 	bne.w	8246e <_svfprintf_r+0x1ba>
   8364a:	46c8      	mov	r8, r9
   8364c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8364e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83650:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83652:	f7ff bbc3 	b.w	82ddc <_svfprintf_r+0xb28>
   83656:	2230      	movs	r2, #48	; 0x30
   83658:	4413      	add	r3, r2
   8365a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   8365e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   83662:	ab22      	add	r3, sp, #136	; 0x88
   83664:	e706      	b.n	83474 <_svfprintf_r+0x11c0>
   83666:	4d50      	ldr	r5, [pc, #320]	; (837a8 <_svfprintf_r+0x14f4>)
   83668:	3301      	adds	r3, #1
   8366a:	443a      	add	r2, r7
   8366c:	2b07      	cmp	r3, #7
   8366e:	e888 00a0 	stmia.w	r8, {r5, r7}
   83672:	9227      	str	r2, [sp, #156]	; 0x9c
   83674:	9326      	str	r3, [sp, #152]	; 0x98
   83676:	f108 0808 	add.w	r8, r8, #8
   8367a:	f77f abb2 	ble.w	82de2 <_svfprintf_r+0xb2e>
   8367e:	aa25      	add	r2, sp, #148	; 0x94
   83680:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83682:	980c      	ldr	r0, [sp, #48]	; 0x30
   83684:	f001 fea2 	bl	853cc <__ssprint_r>
   83688:	2800      	cmp	r0, #0
   8368a:	f47e aef0 	bne.w	8246e <_svfprintf_r+0x1ba>
   8368e:	46c8      	mov	r8, r9
   83690:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83692:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83694:	f7ff bba5 	b.w	82de2 <_svfprintf_r+0xb2e>
   83698:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8369a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8369c:	4413      	add	r3, r2
   8369e:	930e      	str	r3, [sp, #56]	; 0x38
   836a0:	e76b      	b.n	8357a <_svfprintf_r+0x12c6>
   836a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   836a4:	e5ee      	b.n	83284 <_svfprintf_r+0xfd0>
   836a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   836a8:	4d3f      	ldr	r5, [pc, #252]	; (837a8 <_svfprintf_r+0x14f4>)
   836aa:	e4bb      	b.n	83024 <_svfprintf_r+0xd70>
   836ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
   836ae:	9808      	ldr	r0, [sp, #32]
   836b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   836b2:	4639      	mov	r1, r7
   836b4:	f002 ff16 	bl	864e4 <__aeabi_dcmpeq>
   836b8:	2800      	cmp	r0, #0
   836ba:	f47f ae70 	bne.w	8339e <_svfprintf_r+0x10ea>
   836be:	f1c5 0501 	rsb	r5, r5, #1
   836c2:	951f      	str	r5, [sp, #124]	; 0x7c
   836c4:	442c      	add	r4, r5
   836c6:	e5ca      	b.n	8325e <_svfprintf_r+0xfaa>
   836c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   836ca:	4e38      	ldr	r6, [pc, #224]	; (837ac <_svfprintf_r+0x14f8>)
   836cc:	2b00      	cmp	r3, #0
   836ce:	bfbe      	ittt	lt
   836d0:	232d      	movlt	r3, #45	; 0x2d
   836d2:	461f      	movlt	r7, r3
   836d4:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   836d8:	f04f 0303 	mov.w	r3, #3
   836dc:	461a      	mov	r2, r3
   836de:	9308      	str	r3, [sp, #32]
   836e0:	f04f 0300 	mov.w	r3, #0
   836e4:	bfa8      	it	ge
   836e6:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   836ea:	4619      	mov	r1, r3
   836ec:	930a      	str	r3, [sp, #40]	; 0x28
   836ee:	4b30      	ldr	r3, [pc, #192]	; (837b0 <_svfprintf_r+0x14fc>)
   836f0:	f7ff b954 	b.w	8299c <_svfprintf_r+0x6e8>
   836f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   836f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   836f8:	4413      	add	r3, r2
   836fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   836fc:	441a      	add	r2, r3
   836fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   83702:	920e      	str	r2, [sp, #56]	; 0x38
   83704:	9308      	str	r3, [sp, #32]
   83706:	e5dd      	b.n	832c4 <_svfprintf_r+0x1010>
   83708:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8370a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8370c:	f1c3 0301 	rsb	r3, r3, #1
   83710:	441a      	add	r2, r3
   83712:	4613      	mov	r3, r2
   83714:	e7c3      	b.n	8369e <_svfprintf_r+0x13ea>
   83716:	f01b 0301 	ands.w	r3, fp, #1
   8371a:	9312      	str	r3, [sp, #72]	; 0x48
   8371c:	f47f aeb3 	bne.w	83486 <_svfprintf_r+0x11d2>
   83720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83722:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   83726:	9308      	str	r3, [sp, #32]
   83728:	e5cc      	b.n	832c4 <_svfprintf_r+0x1010>
   8372a:	4d1f      	ldr	r5, [pc, #124]	; (837a8 <_svfprintf_r+0x14f4>)
   8372c:	e43c      	b.n	82fa8 <_svfprintf_r+0xcf4>
   8372e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83730:	4d1d      	ldr	r5, [pc, #116]	; (837a8 <_svfprintf_r+0x14f4>)
   83732:	e491      	b.n	83058 <_svfprintf_r+0xda4>
   83734:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   83736:	f89a 3001 	ldrb.w	r3, [sl, #1]
   8373a:	6828      	ldr	r0, [r5, #0]
   8373c:	46a2      	mov	sl, r4
   8373e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   83742:	900a      	str	r0, [sp, #40]	; 0x28
   83744:	4628      	mov	r0, r5
   83746:	3004      	adds	r0, #4
   83748:	900f      	str	r0, [sp, #60]	; 0x3c
   8374a:	f7fe be0d 	b.w	82368 <_svfprintf_r+0xb4>
   8374e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83750:	b913      	cbnz	r3, 83758 <_svfprintf_r+0x14a4>
   83752:	f01b 0f01 	tst.w	fp, #1
   83756:	d002      	beq.n	8375e <_svfprintf_r+0x14aa>
   83758:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8375a:	3301      	adds	r3, #1
   8375c:	e7cd      	b.n	836fa <_svfprintf_r+0x1446>
   8375e:	2301      	movs	r3, #1
   83760:	e71c      	b.n	8359c <_svfprintf_r+0x12e8>
   83762:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83766:	f7ff b980 	b.w	82a6a <_svfprintf_r+0x7b6>
   8376a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8376e:	f7ff b93a 	b.w	829e6 <_svfprintf_r+0x732>
   83772:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83776:	f7ff b84f 	b.w	82818 <_svfprintf_r+0x564>
   8377a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   8377e:	e679      	b.n	83474 <_svfprintf_r+0x11c0>
   83780:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83784:	f7ff b9b2 	b.w	82aec <_svfprintf_r+0x838>
   83788:	f04f 32ff 	mov.w	r2, #4294967295
   8378c:	230c      	movs	r3, #12
   8378e:	9209      	str	r2, [sp, #36]	; 0x24
   83790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83792:	6013      	str	r3, [r2, #0]
   83794:	f7fe be74 	b.w	82480 <_svfprintf_r+0x1cc>
   83798:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8379c:	f7ff b8c4 	b.w	82928 <_svfprintf_r+0x674>
   837a0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   837a4:	f7ff b878 	b.w	82898 <_svfprintf_r+0x5e4>
   837a8:	00086b04 	.word	0x00086b04
   837ac:	00086ac0 	.word	0x00086ac0
   837b0:	00086abc 	.word	0x00086abc

000837b4 <register_fini>:
   837b4:	4b02      	ldr	r3, [pc, #8]	; (837c0 <register_fini+0xc>)
   837b6:	b113      	cbz	r3, 837be <register_fini+0xa>
   837b8:	4802      	ldr	r0, [pc, #8]	; (837c4 <register_fini+0x10>)
   837ba:	f000 b805 	b.w	837c8 <atexit>
   837be:	4770      	bx	lr
   837c0:	00000000 	.word	0x00000000
   837c4:	00084745 	.word	0x00084745

000837c8 <atexit>:
   837c8:	2300      	movs	r3, #0
   837ca:	4601      	mov	r1, r0
   837cc:	461a      	mov	r2, r3
   837ce:	4618      	mov	r0, r3
   837d0:	f001 be86 	b.w	854e0 <__register_exitproc>

000837d4 <quorem>:
   837d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   837d8:	6903      	ldr	r3, [r0, #16]
   837da:	690f      	ldr	r7, [r1, #16]
   837dc:	b083      	sub	sp, #12
   837de:	429f      	cmp	r7, r3
   837e0:	f300 8088 	bgt.w	838f4 <quorem+0x120>
   837e4:	3f01      	subs	r7, #1
   837e6:	f101 0614 	add.w	r6, r1, #20
   837ea:	f100 0a14 	add.w	sl, r0, #20
   837ee:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   837f2:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   837f6:	3301      	adds	r3, #1
   837f8:	fbb2 f8f3 	udiv	r8, r2, r3
   837fc:	00bb      	lsls	r3, r7, #2
   837fe:	9300      	str	r3, [sp, #0]
   83800:	eb06 0903 	add.w	r9, r6, r3
   83804:	4453      	add	r3, sl
   83806:	9301      	str	r3, [sp, #4]
   83808:	f1b8 0f00 	cmp.w	r8, #0
   8380c:	d03b      	beq.n	83886 <quorem+0xb2>
   8380e:	2300      	movs	r3, #0
   83810:	46b4      	mov	ip, r6
   83812:	461c      	mov	r4, r3
   83814:	46d6      	mov	lr, sl
   83816:	f85c 2b04 	ldr.w	r2, [ip], #4
   8381a:	f8de 5000 	ldr.w	r5, [lr]
   8381e:	fa1f fb82 	uxth.w	fp, r2
   83822:	fb08 330b 	mla	r3, r8, fp, r3
   83826:	0c12      	lsrs	r2, r2, #16
   83828:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   8382c:	fb08 bb02 	mla	fp, r8, r2, fp
   83830:	b29a      	uxth	r2, r3
   83832:	1aa2      	subs	r2, r4, r2
   83834:	b2ab      	uxth	r3, r5
   83836:	fa1f f48b 	uxth.w	r4, fp
   8383a:	441a      	add	r2, r3
   8383c:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   83840:	eb04 4422 	add.w	r4, r4, r2, asr #16
   83844:	b292      	uxth	r2, r2
   83846:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   8384a:	45e1      	cmp	r9, ip
   8384c:	f84e 2b04 	str.w	r2, [lr], #4
   83850:	ea4f 4424 	mov.w	r4, r4, asr #16
   83854:	ea4f 431b 	mov.w	r3, fp, lsr #16
   83858:	d2dd      	bcs.n	83816 <quorem+0x42>
   8385a:	9b00      	ldr	r3, [sp, #0]
   8385c:	f85a 3003 	ldr.w	r3, [sl, r3]
   83860:	b98b      	cbnz	r3, 83886 <quorem+0xb2>
   83862:	9c01      	ldr	r4, [sp, #4]
   83864:	1f23      	subs	r3, r4, #4
   83866:	459a      	cmp	sl, r3
   83868:	d20c      	bcs.n	83884 <quorem+0xb0>
   8386a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8386e:	b94b      	cbnz	r3, 83884 <quorem+0xb0>
   83870:	f1a4 0308 	sub.w	r3, r4, #8
   83874:	e002      	b.n	8387c <quorem+0xa8>
   83876:	681a      	ldr	r2, [r3, #0]
   83878:	3b04      	subs	r3, #4
   8387a:	b91a      	cbnz	r2, 83884 <quorem+0xb0>
   8387c:	459a      	cmp	sl, r3
   8387e:	f107 37ff 	add.w	r7, r7, #4294967295
   83882:	d3f8      	bcc.n	83876 <quorem+0xa2>
   83884:	6107      	str	r7, [r0, #16]
   83886:	4604      	mov	r4, r0
   83888:	f001 fc90 	bl	851ac <__mcmp>
   8388c:	2800      	cmp	r0, #0
   8388e:	db2d      	blt.n	838ec <quorem+0x118>
   83890:	4655      	mov	r5, sl
   83892:	2300      	movs	r3, #0
   83894:	f108 0801 	add.w	r8, r8, #1
   83898:	f856 1b04 	ldr.w	r1, [r6], #4
   8389c:	6828      	ldr	r0, [r5, #0]
   8389e:	b28a      	uxth	r2, r1
   838a0:	1a9a      	subs	r2, r3, r2
   838a2:	0c0b      	lsrs	r3, r1, #16
   838a4:	b281      	uxth	r1, r0
   838a6:	440a      	add	r2, r1
   838a8:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   838ac:	eb03 4322 	add.w	r3, r3, r2, asr #16
   838b0:	b292      	uxth	r2, r2
   838b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   838b6:	45b1      	cmp	r9, r6
   838b8:	f845 2b04 	str.w	r2, [r5], #4
   838bc:	ea4f 4323 	mov.w	r3, r3, asr #16
   838c0:	d2ea      	bcs.n	83898 <quorem+0xc4>
   838c2:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   838c6:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   838ca:	b97a      	cbnz	r2, 838ec <quorem+0x118>
   838cc:	1f1a      	subs	r2, r3, #4
   838ce:	4592      	cmp	sl, r2
   838d0:	d20b      	bcs.n	838ea <quorem+0x116>
   838d2:	f853 2c04 	ldr.w	r2, [r3, #-4]
   838d6:	b942      	cbnz	r2, 838ea <quorem+0x116>
   838d8:	3b08      	subs	r3, #8
   838da:	e002      	b.n	838e2 <quorem+0x10e>
   838dc:	681a      	ldr	r2, [r3, #0]
   838de:	3b04      	subs	r3, #4
   838e0:	b91a      	cbnz	r2, 838ea <quorem+0x116>
   838e2:	459a      	cmp	sl, r3
   838e4:	f107 37ff 	add.w	r7, r7, #4294967295
   838e8:	d3f8      	bcc.n	838dc <quorem+0x108>
   838ea:	6127      	str	r7, [r4, #16]
   838ec:	4640      	mov	r0, r8
   838ee:	b003      	add	sp, #12
   838f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   838f4:	2000      	movs	r0, #0
   838f6:	b003      	add	sp, #12
   838f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   838fc:	0000      	movs	r0, r0
	...

00083900 <_dtoa_r>:
   83900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83904:	6c05      	ldr	r5, [r0, #64]	; 0x40
   83906:	b09b      	sub	sp, #108	; 0x6c
   83908:	4604      	mov	r4, r0
   8390a:	4692      	mov	sl, r2
   8390c:	469b      	mov	fp, r3
   8390e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   83910:	b14d      	cbz	r5, 83926 <_dtoa_r+0x26>
   83912:	2301      	movs	r3, #1
   83914:	6c42      	ldr	r2, [r0, #68]	; 0x44
   83916:	4629      	mov	r1, r5
   83918:	4093      	lsls	r3, r2
   8391a:	60ab      	str	r3, [r5, #8]
   8391c:	606a      	str	r2, [r5, #4]
   8391e:	f001 fa6d 	bl	84dfc <_Bfree>
   83922:	2300      	movs	r3, #0
   83924:	6423      	str	r3, [r4, #64]	; 0x40
   83926:	f1bb 0f00 	cmp.w	fp, #0
   8392a:	465d      	mov	r5, fp
   8392c:	db35      	blt.n	8399a <_dtoa_r+0x9a>
   8392e:	2300      	movs	r3, #0
   83930:	6033      	str	r3, [r6, #0]
   83932:	4b9d      	ldr	r3, [pc, #628]	; (83ba8 <_dtoa_r+0x2a8>)
   83934:	43ab      	bics	r3, r5
   83936:	d015      	beq.n	83964 <_dtoa_r+0x64>
   83938:	2200      	movs	r2, #0
   8393a:	2300      	movs	r3, #0
   8393c:	4650      	mov	r0, sl
   8393e:	4659      	mov	r1, fp
   83940:	f002 fdd0 	bl	864e4 <__aeabi_dcmpeq>
   83944:	4680      	mov	r8, r0
   83946:	2800      	cmp	r0, #0
   83948:	d02d      	beq.n	839a6 <_dtoa_r+0xa6>
   8394a:	2301      	movs	r3, #1
   8394c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8394e:	6013      	str	r3, [r2, #0]
   83950:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83952:	2b00      	cmp	r3, #0
   83954:	f000 80bd 	beq.w	83ad2 <_dtoa_r+0x1d2>
   83958:	4894      	ldr	r0, [pc, #592]	; (83bac <_dtoa_r+0x2ac>)
   8395a:	6018      	str	r0, [r3, #0]
   8395c:	3801      	subs	r0, #1
   8395e:	b01b      	add	sp, #108	; 0x6c
   83960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83964:	f242 730f 	movw	r3, #9999	; 0x270f
   83968:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8396a:	6013      	str	r3, [r2, #0]
   8396c:	f1ba 0f00 	cmp.w	sl, #0
   83970:	d10d      	bne.n	8398e <_dtoa_r+0x8e>
   83972:	f3c5 0513 	ubfx	r5, r5, #0, #20
   83976:	b955      	cbnz	r5, 8398e <_dtoa_r+0x8e>
   83978:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8397a:	488d      	ldr	r0, [pc, #564]	; (83bb0 <_dtoa_r+0x2b0>)
   8397c:	2b00      	cmp	r3, #0
   8397e:	d0ee      	beq.n	8395e <_dtoa_r+0x5e>
   83980:	f100 0308 	add.w	r3, r0, #8
   83984:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   83986:	6013      	str	r3, [r2, #0]
   83988:	b01b      	add	sp, #108	; 0x6c
   8398a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8398e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83990:	4888      	ldr	r0, [pc, #544]	; (83bb4 <_dtoa_r+0x2b4>)
   83992:	2b00      	cmp	r3, #0
   83994:	d0e3      	beq.n	8395e <_dtoa_r+0x5e>
   83996:	1cc3      	adds	r3, r0, #3
   83998:	e7f4      	b.n	83984 <_dtoa_r+0x84>
   8399a:	2301      	movs	r3, #1
   8399c:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   839a0:	6033      	str	r3, [r6, #0]
   839a2:	46ab      	mov	fp, r5
   839a4:	e7c5      	b.n	83932 <_dtoa_r+0x32>
   839a6:	aa18      	add	r2, sp, #96	; 0x60
   839a8:	ab19      	add	r3, sp, #100	; 0x64
   839aa:	9201      	str	r2, [sp, #4]
   839ac:	9300      	str	r3, [sp, #0]
   839ae:	4652      	mov	r2, sl
   839b0:	465b      	mov	r3, fp
   839b2:	4620      	mov	r0, r4
   839b4:	f001 fca4 	bl	85300 <__d2b>
   839b8:	0d2b      	lsrs	r3, r5, #20
   839ba:	4681      	mov	r9, r0
   839bc:	d071      	beq.n	83aa2 <_dtoa_r+0x1a2>
   839be:	4650      	mov	r0, sl
   839c0:	f3cb 0213 	ubfx	r2, fp, #0, #20
   839c4:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   839c8:	9f18      	ldr	r7, [sp, #96]	; 0x60
   839ca:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   839ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   839d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   839d6:	2200      	movs	r2, #0
   839d8:	4b77      	ldr	r3, [pc, #476]	; (83bb8 <_dtoa_r+0x2b8>)
   839da:	f002 f967 	bl	85cac <__aeabi_dsub>
   839de:	a36c      	add	r3, pc, #432	; (adr r3, 83b90 <_dtoa_r+0x290>)
   839e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   839e4:	f002 fb16 	bl	86014 <__aeabi_dmul>
   839e8:	a36b      	add	r3, pc, #428	; (adr r3, 83b98 <_dtoa_r+0x298>)
   839ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   839ee:	f002 f95f 	bl	85cb0 <__adddf3>
   839f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   839f6:	4630      	mov	r0, r6
   839f8:	f002 faa6 	bl	85f48 <__aeabi_i2d>
   839fc:	a368      	add	r3, pc, #416	; (adr r3, 83ba0 <_dtoa_r+0x2a0>)
   839fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   83a02:	f002 fb07 	bl	86014 <__aeabi_dmul>
   83a06:	4602      	mov	r2, r0
   83a08:	460b      	mov	r3, r1
   83a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   83a0e:	f002 f94f 	bl	85cb0 <__adddf3>
   83a12:	e9cd 0104 	strd	r0, r1, [sp, #16]
   83a16:	f002 fdad 	bl	86574 <__aeabi_d2iz>
   83a1a:	2200      	movs	r2, #0
   83a1c:	9002      	str	r0, [sp, #8]
   83a1e:	2300      	movs	r3, #0
   83a20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83a24:	f002 fd68 	bl	864f8 <__aeabi_dcmplt>
   83a28:	2800      	cmp	r0, #0
   83a2a:	f040 816d 	bne.w	83d08 <_dtoa_r+0x408>
   83a2e:	9d02      	ldr	r5, [sp, #8]
   83a30:	2d16      	cmp	r5, #22
   83a32:	f200 8157 	bhi.w	83ce4 <_dtoa_r+0x3e4>
   83a36:	4961      	ldr	r1, [pc, #388]	; (83bbc <_dtoa_r+0x2bc>)
   83a38:	4652      	mov	r2, sl
   83a3a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   83a3e:	465b      	mov	r3, fp
   83a40:	e9d1 0100 	ldrd	r0, r1, [r1]
   83a44:	f002 fd76 	bl	86534 <__aeabi_dcmpgt>
   83a48:	2800      	cmp	r0, #0
   83a4a:	f000 81be 	beq.w	83dca <_dtoa_r+0x4ca>
   83a4e:	1e6b      	subs	r3, r5, #1
   83a50:	9302      	str	r3, [sp, #8]
   83a52:	2300      	movs	r3, #0
   83a54:	930e      	str	r3, [sp, #56]	; 0x38
   83a56:	1bbf      	subs	r7, r7, r6
   83a58:	1e7b      	subs	r3, r7, #1
   83a5a:	9308      	str	r3, [sp, #32]
   83a5c:	f100 814e 	bmi.w	83cfc <_dtoa_r+0x3fc>
   83a60:	2300      	movs	r3, #0
   83a62:	930a      	str	r3, [sp, #40]	; 0x28
   83a64:	9b02      	ldr	r3, [sp, #8]
   83a66:	2b00      	cmp	r3, #0
   83a68:	f2c0 813f 	blt.w	83cea <_dtoa_r+0x3ea>
   83a6c:	9a08      	ldr	r2, [sp, #32]
   83a6e:	930d      	str	r3, [sp, #52]	; 0x34
   83a70:	4611      	mov	r1, r2
   83a72:	4419      	add	r1, r3
   83a74:	2300      	movs	r3, #0
   83a76:	9108      	str	r1, [sp, #32]
   83a78:	930c      	str	r3, [sp, #48]	; 0x30
   83a7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83a7c:	2b09      	cmp	r3, #9
   83a7e:	d82a      	bhi.n	83ad6 <_dtoa_r+0x1d6>
   83a80:	2b05      	cmp	r3, #5
   83a82:	f340 8658 	ble.w	84736 <_dtoa_r+0xe36>
   83a86:	2500      	movs	r5, #0
   83a88:	3b04      	subs	r3, #4
   83a8a:	9324      	str	r3, [sp, #144]	; 0x90
   83a8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83a8e:	3b02      	subs	r3, #2
   83a90:	2b03      	cmp	r3, #3
   83a92:	f200 863f 	bhi.w	84714 <_dtoa_r+0xe14>
   83a96:	e8df f013 	tbh	[pc, r3, lsl #1]
   83a9a:	03ce      	.short	0x03ce
   83a9c:	03d902c3 	.word	0x03d902c3
   83aa0:	045b      	.short	0x045b
   83aa2:	9f18      	ldr	r7, [sp, #96]	; 0x60
   83aa4:	9e19      	ldr	r6, [sp, #100]	; 0x64
   83aa6:	443e      	add	r6, r7
   83aa8:	f206 4332 	addw	r3, r6, #1074	; 0x432
   83aac:	2b20      	cmp	r3, #32
   83aae:	f340 8187 	ble.w	83dc0 <_dtoa_r+0x4c0>
   83ab2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   83ab6:	f206 4012 	addw	r0, r6, #1042	; 0x412
   83aba:	409d      	lsls	r5, r3
   83abc:	fa2a f000 	lsr.w	r0, sl, r0
   83ac0:	4328      	orrs	r0, r5
   83ac2:	f002 fa31 	bl	85f28 <__aeabi_ui2d>
   83ac6:	2301      	movs	r3, #1
   83ac8:	3e01      	subs	r6, #1
   83aca:	9314      	str	r3, [sp, #80]	; 0x50
   83acc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   83ad0:	e781      	b.n	839d6 <_dtoa_r+0xd6>
   83ad2:	483b      	ldr	r0, [pc, #236]	; (83bc0 <_dtoa_r+0x2c0>)
   83ad4:	e743      	b.n	8395e <_dtoa_r+0x5e>
   83ad6:	2100      	movs	r1, #0
   83ad8:	4620      	mov	r0, r4
   83ada:	6461      	str	r1, [r4, #68]	; 0x44
   83adc:	9125      	str	r1, [sp, #148]	; 0x94
   83ade:	f001 f967 	bl	84db0 <_Balloc>
   83ae2:	f04f 33ff 	mov.w	r3, #4294967295
   83ae6:	9307      	str	r3, [sp, #28]
   83ae8:	930f      	str	r3, [sp, #60]	; 0x3c
   83aea:	2301      	movs	r3, #1
   83aec:	9a25      	ldr	r2, [sp, #148]	; 0x94
   83aee:	9004      	str	r0, [sp, #16]
   83af0:	6420      	str	r0, [r4, #64]	; 0x40
   83af2:	9224      	str	r2, [sp, #144]	; 0x90
   83af4:	930b      	str	r3, [sp, #44]	; 0x2c
   83af6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   83af8:	2b00      	cmp	r3, #0
   83afa:	f2c0 80d3 	blt.w	83ca4 <_dtoa_r+0x3a4>
   83afe:	9a02      	ldr	r2, [sp, #8]
   83b00:	2a0e      	cmp	r2, #14
   83b02:	f300 80cf 	bgt.w	83ca4 <_dtoa_r+0x3a4>
   83b06:	4b2d      	ldr	r3, [pc, #180]	; (83bbc <_dtoa_r+0x2bc>)
   83b08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   83b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   83b10:	e9cd 2308 	strd	r2, r3, [sp, #32]
   83b14:	9b25      	ldr	r3, [sp, #148]	; 0x94
   83b16:	2b00      	cmp	r3, #0
   83b18:	f2c0 83b4 	blt.w	84284 <_dtoa_r+0x984>
   83b1c:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   83b20:	4650      	mov	r0, sl
   83b22:	462a      	mov	r2, r5
   83b24:	4633      	mov	r3, r6
   83b26:	4659      	mov	r1, fp
   83b28:	f002 fb9e 	bl	86268 <__aeabi_ddiv>
   83b2c:	f002 fd22 	bl	86574 <__aeabi_d2iz>
   83b30:	4680      	mov	r8, r0
   83b32:	f002 fa09 	bl	85f48 <__aeabi_i2d>
   83b36:	462a      	mov	r2, r5
   83b38:	4633      	mov	r3, r6
   83b3a:	f002 fa6b 	bl	86014 <__aeabi_dmul>
   83b3e:	4602      	mov	r2, r0
   83b40:	460b      	mov	r3, r1
   83b42:	4650      	mov	r0, sl
   83b44:	4659      	mov	r1, fp
   83b46:	f002 f8b1 	bl	85cac <__aeabi_dsub>
   83b4a:	9e07      	ldr	r6, [sp, #28]
   83b4c:	9f04      	ldr	r7, [sp, #16]
   83b4e:	f108 0530 	add.w	r5, r8, #48	; 0x30
   83b52:	2e01      	cmp	r6, #1
   83b54:	703d      	strb	r5, [r7, #0]
   83b56:	4602      	mov	r2, r0
   83b58:	460b      	mov	r3, r1
   83b5a:	f107 0501 	add.w	r5, r7, #1
   83b5e:	d064      	beq.n	83c2a <_dtoa_r+0x32a>
   83b60:	2200      	movs	r2, #0
   83b62:	4b18      	ldr	r3, [pc, #96]	; (83bc4 <_dtoa_r+0x2c4>)
   83b64:	f002 fa56 	bl	86014 <__aeabi_dmul>
   83b68:	2200      	movs	r2, #0
   83b6a:	2300      	movs	r3, #0
   83b6c:	4606      	mov	r6, r0
   83b6e:	460f      	mov	r7, r1
   83b70:	f002 fcb8 	bl	864e4 <__aeabi_dcmpeq>
   83b74:	2800      	cmp	r0, #0
   83b76:	f040 8082 	bne.w	83c7e <_dtoa_r+0x37e>
   83b7a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   83b7e:	f04f 0a00 	mov.w	sl, #0
   83b82:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   83b86:	f04f 0b00 	mov.w	fp, #0
   83b8a:	940b      	str	r4, [sp, #44]	; 0x2c
   83b8c:	e029      	b.n	83be2 <_dtoa_r+0x2e2>
   83b8e:	bf00      	nop
   83b90:	636f4361 	.word	0x636f4361
   83b94:	3fd287a7 	.word	0x3fd287a7
   83b98:	8b60c8b3 	.word	0x8b60c8b3
   83b9c:	3fc68a28 	.word	0x3fc68a28
   83ba0:	509f79fb 	.word	0x509f79fb
   83ba4:	3fd34413 	.word	0x3fd34413
   83ba8:	7ff00000 	.word	0x7ff00000
   83bac:	00086a69 	.word	0x00086a69
   83bb0:	00086b14 	.word	0x00086b14
   83bb4:	00086b20 	.word	0x00086b20
   83bb8:	3ff80000 	.word	0x3ff80000
   83bbc:	00086b60 	.word	0x00086b60
   83bc0:	00086a68 	.word	0x00086a68
   83bc4:	40240000 	.word	0x40240000
   83bc8:	2200      	movs	r2, #0
   83bca:	4b81      	ldr	r3, [pc, #516]	; (83dd0 <_dtoa_r+0x4d0>)
   83bcc:	f002 fa22 	bl	86014 <__aeabi_dmul>
   83bd0:	4652      	mov	r2, sl
   83bd2:	465b      	mov	r3, fp
   83bd4:	4606      	mov	r6, r0
   83bd6:	460f      	mov	r7, r1
   83bd8:	f002 fc84 	bl	864e4 <__aeabi_dcmpeq>
   83bdc:	2800      	cmp	r0, #0
   83bde:	f040 83ba 	bne.w	84356 <_dtoa_r+0xa56>
   83be2:	4642      	mov	r2, r8
   83be4:	464b      	mov	r3, r9
   83be6:	4630      	mov	r0, r6
   83be8:	4639      	mov	r1, r7
   83bea:	f002 fb3d 	bl	86268 <__aeabi_ddiv>
   83bee:	f002 fcc1 	bl	86574 <__aeabi_d2iz>
   83bf2:	4604      	mov	r4, r0
   83bf4:	f002 f9a8 	bl	85f48 <__aeabi_i2d>
   83bf8:	4642      	mov	r2, r8
   83bfa:	464b      	mov	r3, r9
   83bfc:	f002 fa0a 	bl	86014 <__aeabi_dmul>
   83c00:	4602      	mov	r2, r0
   83c02:	460b      	mov	r3, r1
   83c04:	4630      	mov	r0, r6
   83c06:	4639      	mov	r1, r7
   83c08:	f002 f850 	bl	85cac <__aeabi_dsub>
   83c0c:	f104 0630 	add.w	r6, r4, #48	; 0x30
   83c10:	f805 6b01 	strb.w	r6, [r5], #1
   83c14:	9e04      	ldr	r6, [sp, #16]
   83c16:	9f07      	ldr	r7, [sp, #28]
   83c18:	1bae      	subs	r6, r5, r6
   83c1a:	42be      	cmp	r6, r7
   83c1c:	4602      	mov	r2, r0
   83c1e:	460b      	mov	r3, r1
   83c20:	d1d2      	bne.n	83bc8 <_dtoa_r+0x2c8>
   83c22:	46a0      	mov	r8, r4
   83c24:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   83c28:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   83c2a:	4610      	mov	r0, r2
   83c2c:	4619      	mov	r1, r3
   83c2e:	f002 f83f 	bl	85cb0 <__adddf3>
   83c32:	4606      	mov	r6, r0
   83c34:	460f      	mov	r7, r1
   83c36:	4602      	mov	r2, r0
   83c38:	460b      	mov	r3, r1
   83c3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   83c3e:	f002 fc5b 	bl	864f8 <__aeabi_dcmplt>
   83c42:	b948      	cbnz	r0, 83c58 <_dtoa_r+0x358>
   83c44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   83c48:	4632      	mov	r2, r6
   83c4a:	463b      	mov	r3, r7
   83c4c:	f002 fc4a 	bl	864e4 <__aeabi_dcmpeq>
   83c50:	b1a8      	cbz	r0, 83c7e <_dtoa_r+0x37e>
   83c52:	f018 0f01 	tst.w	r8, #1
   83c56:	d012      	beq.n	83c7e <_dtoa_r+0x37e>
   83c58:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   83c5c:	1e6b      	subs	r3, r5, #1
   83c5e:	9a04      	ldr	r2, [sp, #16]
   83c60:	e004      	b.n	83c6c <_dtoa_r+0x36c>
   83c62:	429a      	cmp	r2, r3
   83c64:	f000 8402 	beq.w	8446c <_dtoa_r+0xb6c>
   83c68:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   83c6c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   83c70:	f103 0501 	add.w	r5, r3, #1
   83c74:	d0f5      	beq.n	83c62 <_dtoa_r+0x362>
   83c76:	f108 0801 	add.w	r8, r8, #1
   83c7a:	f883 8000 	strb.w	r8, [r3]
   83c7e:	4649      	mov	r1, r9
   83c80:	4620      	mov	r0, r4
   83c82:	f001 f8bb 	bl	84dfc <_Bfree>
   83c86:	2200      	movs	r2, #0
   83c88:	9b02      	ldr	r3, [sp, #8]
   83c8a:	702a      	strb	r2, [r5, #0]
   83c8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83c8e:	3301      	adds	r3, #1
   83c90:	6013      	str	r3, [r2, #0]
   83c92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83c94:	2b00      	cmp	r3, #0
   83c96:	f000 839f 	beq.w	843d8 <_dtoa_r+0xad8>
   83c9a:	9804      	ldr	r0, [sp, #16]
   83c9c:	601d      	str	r5, [r3, #0]
   83c9e:	b01b      	add	sp, #108	; 0x6c
   83ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83ca4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83ca6:	2a00      	cmp	r2, #0
   83ca8:	d03e      	beq.n	83d28 <_dtoa_r+0x428>
   83caa:	9a24      	ldr	r2, [sp, #144]	; 0x90
   83cac:	2a01      	cmp	r2, #1
   83cae:	f340 8311 	ble.w	842d4 <_dtoa_r+0x9d4>
   83cb2:	9b07      	ldr	r3, [sp, #28]
   83cb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83cb6:	1e5f      	subs	r7, r3, #1
   83cb8:	42ba      	cmp	r2, r7
   83cba:	f2c0 8390 	blt.w	843de <_dtoa_r+0xade>
   83cbe:	1bd7      	subs	r7, r2, r7
   83cc0:	9b07      	ldr	r3, [sp, #28]
   83cc2:	2b00      	cmp	r3, #0
   83cc4:	f2c0 848c 	blt.w	845e0 <_dtoa_r+0xce0>
   83cc8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83cca:	9b07      	ldr	r3, [sp, #28]
   83ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83cce:	2101      	movs	r1, #1
   83cd0:	441a      	add	r2, r3
   83cd2:	920a      	str	r2, [sp, #40]	; 0x28
   83cd4:	9a08      	ldr	r2, [sp, #32]
   83cd6:	4620      	mov	r0, r4
   83cd8:	441a      	add	r2, r3
   83cda:	9208      	str	r2, [sp, #32]
   83cdc:	f001 f92a 	bl	84f34 <__i2b>
   83ce0:	4606      	mov	r6, r0
   83ce2:	e023      	b.n	83d2c <_dtoa_r+0x42c>
   83ce4:	2301      	movs	r3, #1
   83ce6:	930e      	str	r3, [sp, #56]	; 0x38
   83ce8:	e6b5      	b.n	83a56 <_dtoa_r+0x156>
   83cea:	2300      	movs	r3, #0
   83cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83cee:	930d      	str	r3, [sp, #52]	; 0x34
   83cf0:	9b02      	ldr	r3, [sp, #8]
   83cf2:	1ad2      	subs	r2, r2, r3
   83cf4:	425b      	negs	r3, r3
   83cf6:	920a      	str	r2, [sp, #40]	; 0x28
   83cf8:	930c      	str	r3, [sp, #48]	; 0x30
   83cfa:	e6be      	b.n	83a7a <_dtoa_r+0x17a>
   83cfc:	f1c7 0301 	rsb	r3, r7, #1
   83d00:	930a      	str	r3, [sp, #40]	; 0x28
   83d02:	2300      	movs	r3, #0
   83d04:	9308      	str	r3, [sp, #32]
   83d06:	e6ad      	b.n	83a64 <_dtoa_r+0x164>
   83d08:	9d02      	ldr	r5, [sp, #8]
   83d0a:	4628      	mov	r0, r5
   83d0c:	f002 f91c 	bl	85f48 <__aeabi_i2d>
   83d10:	4602      	mov	r2, r0
   83d12:	460b      	mov	r3, r1
   83d14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83d18:	f002 fbe4 	bl	864e4 <__aeabi_dcmpeq>
   83d1c:	2800      	cmp	r0, #0
   83d1e:	f47f ae86 	bne.w	83a2e <_dtoa_r+0x12e>
   83d22:	1e6b      	subs	r3, r5, #1
   83d24:	9302      	str	r3, [sp, #8]
   83d26:	e682      	b.n	83a2e <_dtoa_r+0x12e>
   83d28:	ad0a      	add	r5, sp, #40	; 0x28
   83d2a:	cde0      	ldmia	r5, {r5, r6, r7}
   83d2c:	2d00      	cmp	r5, #0
   83d2e:	dd0c      	ble.n	83d4a <_dtoa_r+0x44a>
   83d30:	9908      	ldr	r1, [sp, #32]
   83d32:	2900      	cmp	r1, #0
   83d34:	460b      	mov	r3, r1
   83d36:	dd08      	ble.n	83d4a <_dtoa_r+0x44a>
   83d38:	42a9      	cmp	r1, r5
   83d3a:	bfa8      	it	ge
   83d3c:	462b      	movge	r3, r5
   83d3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83d40:	1aed      	subs	r5, r5, r3
   83d42:	1ad2      	subs	r2, r2, r3
   83d44:	1acb      	subs	r3, r1, r3
   83d46:	920a      	str	r2, [sp, #40]	; 0x28
   83d48:	9308      	str	r3, [sp, #32]
   83d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83d4c:	b1d3      	cbz	r3, 83d84 <_dtoa_r+0x484>
   83d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83d50:	2b00      	cmp	r3, #0
   83d52:	f000 82b8 	beq.w	842c6 <_dtoa_r+0x9c6>
   83d56:	2f00      	cmp	r7, #0
   83d58:	dd10      	ble.n	83d7c <_dtoa_r+0x47c>
   83d5a:	4631      	mov	r1, r6
   83d5c:	463a      	mov	r2, r7
   83d5e:	4620      	mov	r0, r4
   83d60:	f001 f984 	bl	8506c <__pow5mult>
   83d64:	464a      	mov	r2, r9
   83d66:	4601      	mov	r1, r0
   83d68:	4606      	mov	r6, r0
   83d6a:	4620      	mov	r0, r4
   83d6c:	f001 f8ec 	bl	84f48 <__multiply>
   83d70:	4603      	mov	r3, r0
   83d72:	4649      	mov	r1, r9
   83d74:	4620      	mov	r0, r4
   83d76:	4699      	mov	r9, r3
   83d78:	f001 f840 	bl	84dfc <_Bfree>
   83d7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83d7e:	1bda      	subs	r2, r3, r7
   83d80:	f040 82a2 	bne.w	842c8 <_dtoa_r+0x9c8>
   83d84:	2101      	movs	r1, #1
   83d86:	4620      	mov	r0, r4
   83d88:	f001 f8d4 	bl	84f34 <__i2b>
   83d8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83d8e:	4680      	mov	r8, r0
   83d90:	2b00      	cmp	r3, #0
   83d92:	dd1f      	ble.n	83dd4 <_dtoa_r+0x4d4>
   83d94:	4601      	mov	r1, r0
   83d96:	461a      	mov	r2, r3
   83d98:	4620      	mov	r0, r4
   83d9a:	f001 f967 	bl	8506c <__pow5mult>
   83d9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83da0:	4680      	mov	r8, r0
   83da2:	2b01      	cmp	r3, #1
   83da4:	f340 8255 	ble.w	84252 <_dtoa_r+0x952>
   83da8:	2300      	movs	r3, #0
   83daa:	930c      	str	r3, [sp, #48]	; 0x30
   83dac:	f8d8 3010 	ldr.w	r3, [r8, #16]
   83db0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   83db4:	6918      	ldr	r0, [r3, #16]
   83db6:	f001 f86d 	bl	84e94 <__hi0bits>
   83dba:	f1c0 0020 	rsb	r0, r0, #32
   83dbe:	e013      	b.n	83de8 <_dtoa_r+0x4e8>
   83dc0:	f1c3 0520 	rsb	r5, r3, #32
   83dc4:	fa0a f005 	lsl.w	r0, sl, r5
   83dc8:	e67b      	b.n	83ac2 <_dtoa_r+0x1c2>
   83dca:	900e      	str	r0, [sp, #56]	; 0x38
   83dcc:	e643      	b.n	83a56 <_dtoa_r+0x156>
   83dce:	bf00      	nop
   83dd0:	40240000 	.word	0x40240000
   83dd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83dd6:	2b01      	cmp	r3, #1
   83dd8:	f340 8285 	ble.w	842e6 <_dtoa_r+0x9e6>
   83ddc:	2300      	movs	r3, #0
   83dde:	930c      	str	r3, [sp, #48]	; 0x30
   83de0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83de2:	2001      	movs	r0, #1
   83de4:	2b00      	cmp	r3, #0
   83de6:	d1e1      	bne.n	83dac <_dtoa_r+0x4ac>
   83de8:	9a08      	ldr	r2, [sp, #32]
   83dea:	4410      	add	r0, r2
   83dec:	f010 001f 	ands.w	r0, r0, #31
   83df0:	f000 80a1 	beq.w	83f36 <_dtoa_r+0x636>
   83df4:	f1c0 0320 	rsb	r3, r0, #32
   83df8:	2b04      	cmp	r3, #4
   83dfa:	f340 8486 	ble.w	8470a <_dtoa_r+0xe0a>
   83dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83e00:	f1c0 001c 	rsb	r0, r0, #28
   83e04:	4403      	add	r3, r0
   83e06:	930a      	str	r3, [sp, #40]	; 0x28
   83e08:	4613      	mov	r3, r2
   83e0a:	4403      	add	r3, r0
   83e0c:	4405      	add	r5, r0
   83e0e:	9308      	str	r3, [sp, #32]
   83e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83e12:	2b00      	cmp	r3, #0
   83e14:	dd05      	ble.n	83e22 <_dtoa_r+0x522>
   83e16:	4649      	mov	r1, r9
   83e18:	461a      	mov	r2, r3
   83e1a:	4620      	mov	r0, r4
   83e1c:	f001 f976 	bl	8510c <__lshift>
   83e20:	4681      	mov	r9, r0
   83e22:	9b08      	ldr	r3, [sp, #32]
   83e24:	2b00      	cmp	r3, #0
   83e26:	dd05      	ble.n	83e34 <_dtoa_r+0x534>
   83e28:	4641      	mov	r1, r8
   83e2a:	461a      	mov	r2, r3
   83e2c:	4620      	mov	r0, r4
   83e2e:	f001 f96d 	bl	8510c <__lshift>
   83e32:	4680      	mov	r8, r0
   83e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83e36:	2b00      	cmp	r3, #0
   83e38:	f040 8086 	bne.w	83f48 <_dtoa_r+0x648>
   83e3c:	9b07      	ldr	r3, [sp, #28]
   83e3e:	2b00      	cmp	r3, #0
   83e40:	f340 8264 	ble.w	8430c <_dtoa_r+0xa0c>
   83e44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83e46:	2b00      	cmp	r3, #0
   83e48:	f000 8098 	beq.w	83f7c <_dtoa_r+0x67c>
   83e4c:	2d00      	cmp	r5, #0
   83e4e:	dd05      	ble.n	83e5c <_dtoa_r+0x55c>
   83e50:	4631      	mov	r1, r6
   83e52:	462a      	mov	r2, r5
   83e54:	4620      	mov	r0, r4
   83e56:	f001 f959 	bl	8510c <__lshift>
   83e5a:	4606      	mov	r6, r0
   83e5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83e5e:	2b00      	cmp	r3, #0
   83e60:	f040 8336 	bne.w	844d0 <_dtoa_r+0xbd0>
   83e64:	9608      	str	r6, [sp, #32]
   83e66:	9b07      	ldr	r3, [sp, #28]
   83e68:	9a04      	ldr	r2, [sp, #16]
   83e6a:	3b01      	subs	r3, #1
   83e6c:	18d3      	adds	r3, r2, r3
   83e6e:	930b      	str	r3, [sp, #44]	; 0x2c
   83e70:	4617      	mov	r7, r2
   83e72:	f00a 0301 	and.w	r3, sl, #1
   83e76:	46c2      	mov	sl, r8
   83e78:	f8dd b020 	ldr.w	fp, [sp, #32]
   83e7c:	930c      	str	r3, [sp, #48]	; 0x30
   83e7e:	4651      	mov	r1, sl
   83e80:	4648      	mov	r0, r9
   83e82:	f7ff fca7 	bl	837d4 <quorem>
   83e86:	4631      	mov	r1, r6
   83e88:	4605      	mov	r5, r0
   83e8a:	4648      	mov	r0, r9
   83e8c:	f001 f98e 	bl	851ac <__mcmp>
   83e90:	465a      	mov	r2, fp
   83e92:	9007      	str	r0, [sp, #28]
   83e94:	4651      	mov	r1, sl
   83e96:	4620      	mov	r0, r4
   83e98:	f001 f9a4 	bl	851e4 <__mdiff>
   83e9c:	68c2      	ldr	r2, [r0, #12]
   83e9e:	4680      	mov	r8, r0
   83ea0:	f105 0330 	add.w	r3, r5, #48	; 0x30
   83ea4:	2a00      	cmp	r2, #0
   83ea6:	f040 8229 	bne.w	842fc <_dtoa_r+0x9fc>
   83eaa:	4601      	mov	r1, r0
   83eac:	4648      	mov	r0, r9
   83eae:	930a      	str	r3, [sp, #40]	; 0x28
   83eb0:	f001 f97c 	bl	851ac <__mcmp>
   83eb4:	4641      	mov	r1, r8
   83eb6:	9008      	str	r0, [sp, #32]
   83eb8:	4620      	mov	r0, r4
   83eba:	f000 ff9f 	bl	84dfc <_Bfree>
   83ebe:	9a08      	ldr	r2, [sp, #32]
   83ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83ec2:	b932      	cbnz	r2, 83ed2 <_dtoa_r+0x5d2>
   83ec4:	9924      	ldr	r1, [sp, #144]	; 0x90
   83ec6:	b921      	cbnz	r1, 83ed2 <_dtoa_r+0x5d2>
   83ec8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83eca:	2a00      	cmp	r2, #0
   83ecc:	f000 83ee 	beq.w	846ac <_dtoa_r+0xdac>
   83ed0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   83ed2:	9907      	ldr	r1, [sp, #28]
   83ed4:	2900      	cmp	r1, #0
   83ed6:	f2c0 829f 	blt.w	84418 <_dtoa_r+0xb18>
   83eda:	d105      	bne.n	83ee8 <_dtoa_r+0x5e8>
   83edc:	9924      	ldr	r1, [sp, #144]	; 0x90
   83ede:	b919      	cbnz	r1, 83ee8 <_dtoa_r+0x5e8>
   83ee0:	990c      	ldr	r1, [sp, #48]	; 0x30
   83ee2:	2900      	cmp	r1, #0
   83ee4:	f000 8298 	beq.w	84418 <_dtoa_r+0xb18>
   83ee8:	2a00      	cmp	r2, #0
   83eea:	f300 8305 	bgt.w	844f8 <_dtoa_r+0xbf8>
   83eee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83ef0:	f107 0801 	add.w	r8, r7, #1
   83ef4:	4297      	cmp	r7, r2
   83ef6:	703b      	strb	r3, [r7, #0]
   83ef8:	4645      	mov	r5, r8
   83efa:	f000 830b 	beq.w	84514 <_dtoa_r+0xc14>
   83efe:	4649      	mov	r1, r9
   83f00:	2300      	movs	r3, #0
   83f02:	220a      	movs	r2, #10
   83f04:	4620      	mov	r0, r4
   83f06:	f000 ff83 	bl	84e10 <__multadd>
   83f0a:	455e      	cmp	r6, fp
   83f0c:	4681      	mov	r9, r0
   83f0e:	4631      	mov	r1, r6
   83f10:	f04f 0300 	mov.w	r3, #0
   83f14:	f04f 020a 	mov.w	r2, #10
   83f18:	4620      	mov	r0, r4
   83f1a:	f000 81e9 	beq.w	842f0 <_dtoa_r+0x9f0>
   83f1e:	f000 ff77 	bl	84e10 <__multadd>
   83f22:	4659      	mov	r1, fp
   83f24:	4606      	mov	r6, r0
   83f26:	2300      	movs	r3, #0
   83f28:	220a      	movs	r2, #10
   83f2a:	4620      	mov	r0, r4
   83f2c:	f000 ff70 	bl	84e10 <__multadd>
   83f30:	4647      	mov	r7, r8
   83f32:	4683      	mov	fp, r0
   83f34:	e7a3      	b.n	83e7e <_dtoa_r+0x57e>
   83f36:	201c      	movs	r0, #28
   83f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83f3a:	4405      	add	r5, r0
   83f3c:	4403      	add	r3, r0
   83f3e:	930a      	str	r3, [sp, #40]	; 0x28
   83f40:	9b08      	ldr	r3, [sp, #32]
   83f42:	4403      	add	r3, r0
   83f44:	9308      	str	r3, [sp, #32]
   83f46:	e763      	b.n	83e10 <_dtoa_r+0x510>
   83f48:	4641      	mov	r1, r8
   83f4a:	4648      	mov	r0, r9
   83f4c:	f001 f92e 	bl	851ac <__mcmp>
   83f50:	2800      	cmp	r0, #0
   83f52:	f6bf af73 	bge.w	83e3c <_dtoa_r+0x53c>
   83f56:	9f02      	ldr	r7, [sp, #8]
   83f58:	4649      	mov	r1, r9
   83f5a:	2300      	movs	r3, #0
   83f5c:	220a      	movs	r2, #10
   83f5e:	4620      	mov	r0, r4
   83f60:	3f01      	subs	r7, #1
   83f62:	9702      	str	r7, [sp, #8]
   83f64:	f000 ff54 	bl	84e10 <__multadd>
   83f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83f6a:	4681      	mov	r9, r0
   83f6c:	2b00      	cmp	r3, #0
   83f6e:	f040 83b5 	bne.w	846dc <_dtoa_r+0xddc>
   83f72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   83f74:	2b00      	cmp	r3, #0
   83f76:	f340 83be 	ble.w	846f6 <_dtoa_r+0xdf6>
   83f7a:	9307      	str	r3, [sp, #28]
   83f7c:	f8dd a010 	ldr.w	sl, [sp, #16]
   83f80:	9f07      	ldr	r7, [sp, #28]
   83f82:	4655      	mov	r5, sl
   83f84:	e006      	b.n	83f94 <_dtoa_r+0x694>
   83f86:	4649      	mov	r1, r9
   83f88:	2300      	movs	r3, #0
   83f8a:	220a      	movs	r2, #10
   83f8c:	4620      	mov	r0, r4
   83f8e:	f000 ff3f 	bl	84e10 <__multadd>
   83f92:	4681      	mov	r9, r0
   83f94:	4641      	mov	r1, r8
   83f96:	4648      	mov	r0, r9
   83f98:	f7ff fc1c 	bl	837d4 <quorem>
   83f9c:	3030      	adds	r0, #48	; 0x30
   83f9e:	f805 0b01 	strb.w	r0, [r5], #1
   83fa2:	eba5 030a 	sub.w	r3, r5, sl
   83fa6:	42bb      	cmp	r3, r7
   83fa8:	dbed      	blt.n	83f86 <_dtoa_r+0x686>
   83faa:	9b04      	ldr	r3, [sp, #16]
   83fac:	9a07      	ldr	r2, [sp, #28]
   83fae:	4682      	mov	sl, r0
   83fb0:	2a01      	cmp	r2, #1
   83fb2:	bfac      	ite	ge
   83fb4:	189b      	addge	r3, r3, r2
   83fb6:	3301      	addlt	r3, #1
   83fb8:	f04f 0b00 	mov.w	fp, #0
   83fbc:	461d      	mov	r5, r3
   83fbe:	4649      	mov	r1, r9
   83fc0:	2201      	movs	r2, #1
   83fc2:	4620      	mov	r0, r4
   83fc4:	f001 f8a2 	bl	8510c <__lshift>
   83fc8:	4641      	mov	r1, r8
   83fca:	4681      	mov	r9, r0
   83fcc:	f001 f8ee 	bl	851ac <__mcmp>
   83fd0:	2800      	cmp	r0, #0
   83fd2:	f340 823f 	ble.w	84454 <_dtoa_r+0xb54>
   83fd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   83fda:	1e6b      	subs	r3, r5, #1
   83fdc:	9904      	ldr	r1, [sp, #16]
   83fde:	e004      	b.n	83fea <_dtoa_r+0x6ea>
   83fe0:	428b      	cmp	r3, r1
   83fe2:	f000 81ae 	beq.w	84342 <_dtoa_r+0xa42>
   83fe6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   83fea:	2a39      	cmp	r2, #57	; 0x39
   83fec:	f103 0501 	add.w	r5, r3, #1
   83ff0:	d0f6      	beq.n	83fe0 <_dtoa_r+0x6e0>
   83ff2:	3201      	adds	r2, #1
   83ff4:	701a      	strb	r2, [r3, #0]
   83ff6:	4641      	mov	r1, r8
   83ff8:	4620      	mov	r0, r4
   83ffa:	f000 feff 	bl	84dfc <_Bfree>
   83ffe:	2e00      	cmp	r6, #0
   84000:	f43f ae3d 	beq.w	83c7e <_dtoa_r+0x37e>
   84004:	f1bb 0f00 	cmp.w	fp, #0
   84008:	d005      	beq.n	84016 <_dtoa_r+0x716>
   8400a:	45b3      	cmp	fp, r6
   8400c:	d003      	beq.n	84016 <_dtoa_r+0x716>
   8400e:	4659      	mov	r1, fp
   84010:	4620      	mov	r0, r4
   84012:	f000 fef3 	bl	84dfc <_Bfree>
   84016:	4631      	mov	r1, r6
   84018:	4620      	mov	r0, r4
   8401a:	f000 feef 	bl	84dfc <_Bfree>
   8401e:	e62e      	b.n	83c7e <_dtoa_r+0x37e>
   84020:	2300      	movs	r3, #0
   84022:	930b      	str	r3, [sp, #44]	; 0x2c
   84024:	9b02      	ldr	r3, [sp, #8]
   84026:	9a25      	ldr	r2, [sp, #148]	; 0x94
   84028:	4413      	add	r3, r2
   8402a:	930f      	str	r3, [sp, #60]	; 0x3c
   8402c:	3301      	adds	r3, #1
   8402e:	2b01      	cmp	r3, #1
   84030:	461f      	mov	r7, r3
   84032:	461e      	mov	r6, r3
   84034:	bfb8      	it	lt
   84036:	2701      	movlt	r7, #1
   84038:	9307      	str	r3, [sp, #28]
   8403a:	2100      	movs	r1, #0
   8403c:	2f17      	cmp	r7, #23
   8403e:	6461      	str	r1, [r4, #68]	; 0x44
   84040:	d90a      	bls.n	84058 <_dtoa_r+0x758>
   84042:	2201      	movs	r2, #1
   84044:	2304      	movs	r3, #4
   84046:	005b      	lsls	r3, r3, #1
   84048:	f103 0014 	add.w	r0, r3, #20
   8404c:	4287      	cmp	r7, r0
   8404e:	4611      	mov	r1, r2
   84050:	f102 0201 	add.w	r2, r2, #1
   84054:	d2f7      	bcs.n	84046 <_dtoa_r+0x746>
   84056:	6461      	str	r1, [r4, #68]	; 0x44
   84058:	4620      	mov	r0, r4
   8405a:	f000 fea9 	bl	84db0 <_Balloc>
   8405e:	2e0e      	cmp	r6, #14
   84060:	9004      	str	r0, [sp, #16]
   84062:	6420      	str	r0, [r4, #64]	; 0x40
   84064:	f63f ad47 	bhi.w	83af6 <_dtoa_r+0x1f6>
   84068:	2d00      	cmp	r5, #0
   8406a:	f43f ad44 	beq.w	83af6 <_dtoa_r+0x1f6>
   8406e:	9902      	ldr	r1, [sp, #8]
   84070:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   84074:	2900      	cmp	r1, #0
   84076:	f340 8203 	ble.w	84480 <_dtoa_r+0xb80>
   8407a:	4bb9      	ldr	r3, [pc, #740]	; (84360 <_dtoa_r+0xa60>)
   8407c:	f001 020f 	and.w	r2, r1, #15
   84080:	110d      	asrs	r5, r1, #4
   84082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   84086:	06e9      	lsls	r1, r5, #27
   84088:	e9d3 6700 	ldrd	r6, r7, [r3]
   8408c:	f140 81af 	bpl.w	843ee <_dtoa_r+0xaee>
   84090:	4bb4      	ldr	r3, [pc, #720]	; (84364 <_dtoa_r+0xa64>)
   84092:	4650      	mov	r0, sl
   84094:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   84098:	4659      	mov	r1, fp
   8409a:	f002 f8e5 	bl	86268 <__aeabi_ddiv>
   8409e:	f04f 0a03 	mov.w	sl, #3
   840a2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   840a6:	f005 050f 	and.w	r5, r5, #15
   840aa:	b18d      	cbz	r5, 840d0 <_dtoa_r+0x7d0>
   840ac:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 84364 <_dtoa_r+0xa64>
   840b0:	07ea      	lsls	r2, r5, #31
   840b2:	d509      	bpl.n	840c8 <_dtoa_r+0x7c8>
   840b4:	e9d8 2300 	ldrd	r2, r3, [r8]
   840b8:	4630      	mov	r0, r6
   840ba:	4639      	mov	r1, r7
   840bc:	f001 ffaa 	bl	86014 <__aeabi_dmul>
   840c0:	4606      	mov	r6, r0
   840c2:	460f      	mov	r7, r1
   840c4:	f10a 0a01 	add.w	sl, sl, #1
   840c8:	106d      	asrs	r5, r5, #1
   840ca:	f108 0808 	add.w	r8, r8, #8
   840ce:	d1ef      	bne.n	840b0 <_dtoa_r+0x7b0>
   840d0:	463b      	mov	r3, r7
   840d2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   840d6:	4632      	mov	r2, r6
   840d8:	f002 f8c6 	bl	86268 <__aeabi_ddiv>
   840dc:	4607      	mov	r7, r0
   840de:	4688      	mov	r8, r1
   840e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   840e2:	b143      	cbz	r3, 840f6 <_dtoa_r+0x7f6>
   840e4:	2200      	movs	r2, #0
   840e6:	4ba0      	ldr	r3, [pc, #640]	; (84368 <_dtoa_r+0xa68>)
   840e8:	4638      	mov	r0, r7
   840ea:	4641      	mov	r1, r8
   840ec:	f002 fa04 	bl	864f8 <__aeabi_dcmplt>
   840f0:	2800      	cmp	r0, #0
   840f2:	f040 8287 	bne.w	84604 <_dtoa_r+0xd04>
   840f6:	4650      	mov	r0, sl
   840f8:	f001 ff26 	bl	85f48 <__aeabi_i2d>
   840fc:	463a      	mov	r2, r7
   840fe:	4643      	mov	r3, r8
   84100:	f001 ff88 	bl	86014 <__aeabi_dmul>
   84104:	4b99      	ldr	r3, [pc, #612]	; (8436c <_dtoa_r+0xa6c>)
   84106:	2200      	movs	r2, #0
   84108:	f001 fdd2 	bl	85cb0 <__adddf3>
   8410c:	9b07      	ldr	r3, [sp, #28]
   8410e:	4605      	mov	r5, r0
   84110:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   84114:	2b00      	cmp	r3, #0
   84116:	f000 813f 	beq.w	84398 <_dtoa_r+0xa98>
   8411a:	9b02      	ldr	r3, [sp, #8]
   8411c:	9315      	str	r3, [sp, #84]	; 0x54
   8411e:	9b07      	ldr	r3, [sp, #28]
   84120:	9312      	str	r3, [sp, #72]	; 0x48
   84122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84124:	2b00      	cmp	r3, #0
   84126:	f000 81fb 	beq.w	84520 <_dtoa_r+0xc20>
   8412a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8412c:	4b8c      	ldr	r3, [pc, #560]	; (84360 <_dtoa_r+0xa60>)
   8412e:	2000      	movs	r0, #0
   84130:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   84134:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   84138:	498d      	ldr	r1, [pc, #564]	; (84370 <_dtoa_r+0xa70>)
   8413a:	f002 f895 	bl	86268 <__aeabi_ddiv>
   8413e:	462a      	mov	r2, r5
   84140:	4633      	mov	r3, r6
   84142:	f001 fdb3 	bl	85cac <__aeabi_dsub>
   84146:	4682      	mov	sl, r0
   84148:	468b      	mov	fp, r1
   8414a:	4638      	mov	r0, r7
   8414c:	4641      	mov	r1, r8
   8414e:	f002 fa11 	bl	86574 <__aeabi_d2iz>
   84152:	4605      	mov	r5, r0
   84154:	f001 fef8 	bl	85f48 <__aeabi_i2d>
   84158:	4602      	mov	r2, r0
   8415a:	460b      	mov	r3, r1
   8415c:	4638      	mov	r0, r7
   8415e:	4641      	mov	r1, r8
   84160:	f001 fda4 	bl	85cac <__aeabi_dsub>
   84164:	3530      	adds	r5, #48	; 0x30
   84166:	fa5f f885 	uxtb.w	r8, r5
   8416a:	9d04      	ldr	r5, [sp, #16]
   8416c:	4606      	mov	r6, r0
   8416e:	460f      	mov	r7, r1
   84170:	f885 8000 	strb.w	r8, [r5]
   84174:	4602      	mov	r2, r0
   84176:	460b      	mov	r3, r1
   84178:	4650      	mov	r0, sl
   8417a:	4659      	mov	r1, fp
   8417c:	3501      	adds	r5, #1
   8417e:	f002 f9d9 	bl	86534 <__aeabi_dcmpgt>
   84182:	2800      	cmp	r0, #0
   84184:	d154      	bne.n	84230 <_dtoa_r+0x930>
   84186:	4632      	mov	r2, r6
   84188:	463b      	mov	r3, r7
   8418a:	2000      	movs	r0, #0
   8418c:	4976      	ldr	r1, [pc, #472]	; (84368 <_dtoa_r+0xa68>)
   8418e:	f001 fd8d 	bl	85cac <__aeabi_dsub>
   84192:	4602      	mov	r2, r0
   84194:	460b      	mov	r3, r1
   84196:	4650      	mov	r0, sl
   84198:	4659      	mov	r1, fp
   8419a:	f002 f9cb 	bl	86534 <__aeabi_dcmpgt>
   8419e:	2800      	cmp	r0, #0
   841a0:	f040 8270 	bne.w	84684 <_dtoa_r+0xd84>
   841a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   841a6:	2a01      	cmp	r2, #1
   841a8:	f000 8112 	beq.w	843d0 <_dtoa_r+0xad0>
   841ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   841ae:	9a04      	ldr	r2, [sp, #16]
   841b0:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   841b4:	4413      	add	r3, r2
   841b6:	4699      	mov	r9, r3
   841b8:	e00f      	b.n	841da <_dtoa_r+0x8da>
   841ba:	4632      	mov	r2, r6
   841bc:	463b      	mov	r3, r7
   841be:	2000      	movs	r0, #0
   841c0:	4969      	ldr	r1, [pc, #420]	; (84368 <_dtoa_r+0xa68>)
   841c2:	f001 fd73 	bl	85cac <__aeabi_dsub>
   841c6:	4652      	mov	r2, sl
   841c8:	465b      	mov	r3, fp
   841ca:	f002 f995 	bl	864f8 <__aeabi_dcmplt>
   841ce:	2800      	cmp	r0, #0
   841d0:	f040 8256 	bne.w	84680 <_dtoa_r+0xd80>
   841d4:	454d      	cmp	r5, r9
   841d6:	f000 80f9 	beq.w	843cc <_dtoa_r+0xacc>
   841da:	4650      	mov	r0, sl
   841dc:	4659      	mov	r1, fp
   841de:	2200      	movs	r2, #0
   841e0:	4b64      	ldr	r3, [pc, #400]	; (84374 <_dtoa_r+0xa74>)
   841e2:	f001 ff17 	bl	86014 <__aeabi_dmul>
   841e6:	2200      	movs	r2, #0
   841e8:	4b62      	ldr	r3, [pc, #392]	; (84374 <_dtoa_r+0xa74>)
   841ea:	4682      	mov	sl, r0
   841ec:	468b      	mov	fp, r1
   841ee:	4630      	mov	r0, r6
   841f0:	4639      	mov	r1, r7
   841f2:	f001 ff0f 	bl	86014 <__aeabi_dmul>
   841f6:	460f      	mov	r7, r1
   841f8:	4606      	mov	r6, r0
   841fa:	f002 f9bb 	bl	86574 <__aeabi_d2iz>
   841fe:	4680      	mov	r8, r0
   84200:	f001 fea2 	bl	85f48 <__aeabi_i2d>
   84204:	4602      	mov	r2, r0
   84206:	460b      	mov	r3, r1
   84208:	4630      	mov	r0, r6
   8420a:	4639      	mov	r1, r7
   8420c:	f001 fd4e 	bl	85cac <__aeabi_dsub>
   84210:	f108 0830 	add.w	r8, r8, #48	; 0x30
   84214:	fa5f f888 	uxtb.w	r8, r8
   84218:	f805 8b01 	strb.w	r8, [r5], #1
   8421c:	4652      	mov	r2, sl
   8421e:	465b      	mov	r3, fp
   84220:	4606      	mov	r6, r0
   84222:	460f      	mov	r7, r1
   84224:	f002 f968 	bl	864f8 <__aeabi_dcmplt>
   84228:	2800      	cmp	r0, #0
   8422a:	d0c6      	beq.n	841ba <_dtoa_r+0x8ba>
   8422c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   84230:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84232:	9302      	str	r3, [sp, #8]
   84234:	e523      	b.n	83c7e <_dtoa_r+0x37e>
   84236:	2300      	movs	r3, #0
   84238:	930b      	str	r3, [sp, #44]	; 0x2c
   8423a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8423c:	2b00      	cmp	r3, #0
   8423e:	f340 80dd 	ble.w	843fc <_dtoa_r+0xafc>
   84242:	461f      	mov	r7, r3
   84244:	461e      	mov	r6, r3
   84246:	930f      	str	r3, [sp, #60]	; 0x3c
   84248:	9307      	str	r3, [sp, #28]
   8424a:	e6f6      	b.n	8403a <_dtoa_r+0x73a>
   8424c:	2301      	movs	r3, #1
   8424e:	930b      	str	r3, [sp, #44]	; 0x2c
   84250:	e7f3      	b.n	8423a <_dtoa_r+0x93a>
   84252:	f1ba 0f00 	cmp.w	sl, #0
   84256:	f47f ada7 	bne.w	83da8 <_dtoa_r+0x4a8>
   8425a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8425e:	2b00      	cmp	r3, #0
   84260:	f47f adbc 	bne.w	83ddc <_dtoa_r+0x4dc>
   84264:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   84268:	0d3f      	lsrs	r7, r7, #20
   8426a:	053f      	lsls	r7, r7, #20
   8426c:	2f00      	cmp	r7, #0
   8426e:	f000 820d 	beq.w	8468c <_dtoa_r+0xd8c>
   84272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84274:	3301      	adds	r3, #1
   84276:	930a      	str	r3, [sp, #40]	; 0x28
   84278:	9b08      	ldr	r3, [sp, #32]
   8427a:	3301      	adds	r3, #1
   8427c:	9308      	str	r3, [sp, #32]
   8427e:	2301      	movs	r3, #1
   84280:	930c      	str	r3, [sp, #48]	; 0x30
   84282:	e5ad      	b.n	83de0 <_dtoa_r+0x4e0>
   84284:	9b07      	ldr	r3, [sp, #28]
   84286:	2b00      	cmp	r3, #0
   84288:	f73f ac48 	bgt.w	83b1c <_dtoa_r+0x21c>
   8428c:	f040 8222 	bne.w	846d4 <_dtoa_r+0xdd4>
   84290:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84294:	2200      	movs	r2, #0
   84296:	4b38      	ldr	r3, [pc, #224]	; (84378 <_dtoa_r+0xa78>)
   84298:	f001 febc 	bl	86014 <__aeabi_dmul>
   8429c:	4652      	mov	r2, sl
   8429e:	465b      	mov	r3, fp
   842a0:	f002 f93e 	bl	86520 <__aeabi_dcmpge>
   842a4:	f8dd 801c 	ldr.w	r8, [sp, #28]
   842a8:	4646      	mov	r6, r8
   842aa:	2800      	cmp	r0, #0
   842ac:	d041      	beq.n	84332 <_dtoa_r+0xa32>
   842ae:	9b25      	ldr	r3, [sp, #148]	; 0x94
   842b0:	9d04      	ldr	r5, [sp, #16]
   842b2:	43db      	mvns	r3, r3
   842b4:	9302      	str	r3, [sp, #8]
   842b6:	4641      	mov	r1, r8
   842b8:	4620      	mov	r0, r4
   842ba:	f000 fd9f 	bl	84dfc <_Bfree>
   842be:	2e00      	cmp	r6, #0
   842c0:	f43f acdd 	beq.w	83c7e <_dtoa_r+0x37e>
   842c4:	e6a7      	b.n	84016 <_dtoa_r+0x716>
   842c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   842c8:	4649      	mov	r1, r9
   842ca:	4620      	mov	r0, r4
   842cc:	f000 fece 	bl	8506c <__pow5mult>
   842d0:	4681      	mov	r9, r0
   842d2:	e557      	b.n	83d84 <_dtoa_r+0x484>
   842d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   842d6:	2a00      	cmp	r2, #0
   842d8:	f000 8188 	beq.w	845ec <_dtoa_r+0xcec>
   842dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
   842e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   842e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   842e4:	e4f2      	b.n	83ccc <_dtoa_r+0x3cc>
   842e6:	f1ba 0f00 	cmp.w	sl, #0
   842ea:	f47f ad77 	bne.w	83ddc <_dtoa_r+0x4dc>
   842ee:	e7b4      	b.n	8425a <_dtoa_r+0x95a>
   842f0:	f000 fd8e 	bl	84e10 <__multadd>
   842f4:	4647      	mov	r7, r8
   842f6:	4606      	mov	r6, r0
   842f8:	4683      	mov	fp, r0
   842fa:	e5c0      	b.n	83e7e <_dtoa_r+0x57e>
   842fc:	4601      	mov	r1, r0
   842fe:	4620      	mov	r0, r4
   84300:	9308      	str	r3, [sp, #32]
   84302:	f000 fd7b 	bl	84dfc <_Bfree>
   84306:	2201      	movs	r2, #1
   84308:	9b08      	ldr	r3, [sp, #32]
   8430a:	e5e2      	b.n	83ed2 <_dtoa_r+0x5d2>
   8430c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8430e:	2b02      	cmp	r3, #2
   84310:	f77f ad98 	ble.w	83e44 <_dtoa_r+0x544>
   84314:	9b07      	ldr	r3, [sp, #28]
   84316:	2b00      	cmp	r3, #0
   84318:	d1c9      	bne.n	842ae <_dtoa_r+0x9ae>
   8431a:	4641      	mov	r1, r8
   8431c:	2205      	movs	r2, #5
   8431e:	4620      	mov	r0, r4
   84320:	f000 fd76 	bl	84e10 <__multadd>
   84324:	4601      	mov	r1, r0
   84326:	4680      	mov	r8, r0
   84328:	4648      	mov	r0, r9
   8432a:	f000 ff3f 	bl	851ac <__mcmp>
   8432e:	2800      	cmp	r0, #0
   84330:	ddbd      	ble.n	842ae <_dtoa_r+0x9ae>
   84332:	2331      	movs	r3, #49	; 0x31
   84334:	9a02      	ldr	r2, [sp, #8]
   84336:	9904      	ldr	r1, [sp, #16]
   84338:	3201      	adds	r2, #1
   8433a:	9202      	str	r2, [sp, #8]
   8433c:	700b      	strb	r3, [r1, #0]
   8433e:	1c4d      	adds	r5, r1, #1
   84340:	e7b9      	b.n	842b6 <_dtoa_r+0x9b6>
   84342:	2331      	movs	r3, #49	; 0x31
   84344:	9a02      	ldr	r2, [sp, #8]
   84346:	3201      	adds	r2, #1
   84348:	9202      	str	r2, [sp, #8]
   8434a:	9a04      	ldr	r2, [sp, #16]
   8434c:	7013      	strb	r3, [r2, #0]
   8434e:	e652      	b.n	83ff6 <_dtoa_r+0x6f6>
   84350:	2301      	movs	r3, #1
   84352:	930b      	str	r3, [sp, #44]	; 0x2c
   84354:	e666      	b.n	84024 <_dtoa_r+0x724>
   84356:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8435a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8435c:	e48f      	b.n	83c7e <_dtoa_r+0x37e>
   8435e:	bf00      	nop
   84360:	00086b60 	.word	0x00086b60
   84364:	00086b38 	.word	0x00086b38
   84368:	3ff00000 	.word	0x3ff00000
   8436c:	401c0000 	.word	0x401c0000
   84370:	3fe00000 	.word	0x3fe00000
   84374:	40240000 	.word	0x40240000
   84378:	40140000 	.word	0x40140000
   8437c:	4650      	mov	r0, sl
   8437e:	f001 fde3 	bl	85f48 <__aeabi_i2d>
   84382:	463a      	mov	r2, r7
   84384:	4643      	mov	r3, r8
   84386:	f001 fe45 	bl	86014 <__aeabi_dmul>
   8438a:	2200      	movs	r2, #0
   8438c:	4bc1      	ldr	r3, [pc, #772]	; (84694 <_dtoa_r+0xd94>)
   8438e:	f001 fc8f 	bl	85cb0 <__adddf3>
   84392:	4605      	mov	r5, r0
   84394:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   84398:	4641      	mov	r1, r8
   8439a:	2200      	movs	r2, #0
   8439c:	4bbe      	ldr	r3, [pc, #760]	; (84698 <_dtoa_r+0xd98>)
   8439e:	4638      	mov	r0, r7
   843a0:	f001 fc84 	bl	85cac <__aeabi_dsub>
   843a4:	462a      	mov	r2, r5
   843a6:	4633      	mov	r3, r6
   843a8:	4682      	mov	sl, r0
   843aa:	468b      	mov	fp, r1
   843ac:	f002 f8c2 	bl	86534 <__aeabi_dcmpgt>
   843b0:	4680      	mov	r8, r0
   843b2:	2800      	cmp	r0, #0
   843b4:	f040 8110 	bne.w	845d8 <_dtoa_r+0xcd8>
   843b8:	462a      	mov	r2, r5
   843ba:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   843be:	4650      	mov	r0, sl
   843c0:	4659      	mov	r1, fp
   843c2:	f002 f899 	bl	864f8 <__aeabi_dcmplt>
   843c6:	b118      	cbz	r0, 843d0 <_dtoa_r+0xad0>
   843c8:	4646      	mov	r6, r8
   843ca:	e770      	b.n	842ae <_dtoa_r+0x9ae>
   843cc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   843d0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   843d4:	f7ff bb8f 	b.w	83af6 <_dtoa_r+0x1f6>
   843d8:	9804      	ldr	r0, [sp, #16]
   843da:	f7ff bac0 	b.w	8395e <_dtoa_r+0x5e>
   843de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   843e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   843e2:	1afb      	subs	r3, r7, r3
   843e4:	441a      	add	r2, r3
   843e6:	970c      	str	r7, [sp, #48]	; 0x30
   843e8:	920d      	str	r2, [sp, #52]	; 0x34
   843ea:	2700      	movs	r7, #0
   843ec:	e468      	b.n	83cc0 <_dtoa_r+0x3c0>
   843ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   843f2:	f04f 0a02 	mov.w	sl, #2
   843f6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   843fa:	e656      	b.n	840aa <_dtoa_r+0x7aa>
   843fc:	2100      	movs	r1, #0
   843fe:	2301      	movs	r3, #1
   84400:	4620      	mov	r0, r4
   84402:	6461      	str	r1, [r4, #68]	; 0x44
   84404:	9325      	str	r3, [sp, #148]	; 0x94
   84406:	f000 fcd3 	bl	84db0 <_Balloc>
   8440a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8440c:	9004      	str	r0, [sp, #16]
   8440e:	9307      	str	r3, [sp, #28]
   84410:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84412:	6420      	str	r0, [r4, #64]	; 0x40
   84414:	930f      	str	r3, [sp, #60]	; 0x3c
   84416:	e627      	b.n	84068 <_dtoa_r+0x768>
   84418:	2a00      	cmp	r2, #0
   8441a:	46d0      	mov	r8, sl
   8441c:	f8cd b020 	str.w	fp, [sp, #32]
   84420:	469a      	mov	sl, r3
   84422:	dd11      	ble.n	84448 <_dtoa_r+0xb48>
   84424:	4649      	mov	r1, r9
   84426:	2201      	movs	r2, #1
   84428:	4620      	mov	r0, r4
   8442a:	f000 fe6f 	bl	8510c <__lshift>
   8442e:	4641      	mov	r1, r8
   84430:	4681      	mov	r9, r0
   84432:	f000 febb 	bl	851ac <__mcmp>
   84436:	2800      	cmp	r0, #0
   84438:	f340 8145 	ble.w	846c6 <_dtoa_r+0xdc6>
   8443c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   84440:	f000 8105 	beq.w	8464e <_dtoa_r+0xd4e>
   84444:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   84448:	46b3      	mov	fp, r6
   8444a:	f887 a000 	strb.w	sl, [r7]
   8444e:	1c7d      	adds	r5, r7, #1
   84450:	9e08      	ldr	r6, [sp, #32]
   84452:	e5d0      	b.n	83ff6 <_dtoa_r+0x6f6>
   84454:	d104      	bne.n	84460 <_dtoa_r+0xb60>
   84456:	f01a 0f01 	tst.w	sl, #1
   8445a:	d001      	beq.n	84460 <_dtoa_r+0xb60>
   8445c:	e5bb      	b.n	83fd6 <_dtoa_r+0x6d6>
   8445e:	4615      	mov	r5, r2
   84460:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   84464:	1e6a      	subs	r2, r5, #1
   84466:	2b30      	cmp	r3, #48	; 0x30
   84468:	d0f9      	beq.n	8445e <_dtoa_r+0xb5e>
   8446a:	e5c4      	b.n	83ff6 <_dtoa_r+0x6f6>
   8446c:	2230      	movs	r2, #48	; 0x30
   8446e:	9904      	ldr	r1, [sp, #16]
   84470:	700a      	strb	r2, [r1, #0]
   84472:	9a02      	ldr	r2, [sp, #8]
   84474:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   84478:	3201      	adds	r2, #1
   8447a:	9202      	str	r2, [sp, #8]
   8447c:	f7ff bbfb 	b.w	83c76 <_dtoa_r+0x376>
   84480:	f000 80bb 	beq.w	845fa <_dtoa_r+0xcfa>
   84484:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   84488:	9b02      	ldr	r3, [sp, #8]
   8448a:	f04f 0a02 	mov.w	sl, #2
   8448e:	425d      	negs	r5, r3
   84490:	4b82      	ldr	r3, [pc, #520]	; (8469c <_dtoa_r+0xd9c>)
   84492:	f005 020f 	and.w	r2, r5, #15
   84496:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8449a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8449e:	f001 fdb9 	bl	86014 <__aeabi_dmul>
   844a2:	112d      	asrs	r5, r5, #4
   844a4:	4607      	mov	r7, r0
   844a6:	4688      	mov	r8, r1
   844a8:	f43f ae1a 	beq.w	840e0 <_dtoa_r+0x7e0>
   844ac:	4e7c      	ldr	r6, [pc, #496]	; (846a0 <_dtoa_r+0xda0>)
   844ae:	07eb      	lsls	r3, r5, #31
   844b0:	d509      	bpl.n	844c6 <_dtoa_r+0xbc6>
   844b2:	e9d6 2300 	ldrd	r2, r3, [r6]
   844b6:	4638      	mov	r0, r7
   844b8:	4641      	mov	r1, r8
   844ba:	f001 fdab 	bl	86014 <__aeabi_dmul>
   844be:	4607      	mov	r7, r0
   844c0:	4688      	mov	r8, r1
   844c2:	f10a 0a01 	add.w	sl, sl, #1
   844c6:	106d      	asrs	r5, r5, #1
   844c8:	f106 0608 	add.w	r6, r6, #8
   844cc:	d1ef      	bne.n	844ae <_dtoa_r+0xbae>
   844ce:	e607      	b.n	840e0 <_dtoa_r+0x7e0>
   844d0:	6871      	ldr	r1, [r6, #4]
   844d2:	4620      	mov	r0, r4
   844d4:	f000 fc6c 	bl	84db0 <_Balloc>
   844d8:	4605      	mov	r5, r0
   844da:	6933      	ldr	r3, [r6, #16]
   844dc:	f106 010c 	add.w	r1, r6, #12
   844e0:	3302      	adds	r3, #2
   844e2:	009a      	lsls	r2, r3, #2
   844e4:	300c      	adds	r0, #12
   844e6:	f7fd fd93 	bl	82010 <memcpy>
   844ea:	4629      	mov	r1, r5
   844ec:	2201      	movs	r2, #1
   844ee:	4620      	mov	r0, r4
   844f0:	f000 fe0c 	bl	8510c <__lshift>
   844f4:	9008      	str	r0, [sp, #32]
   844f6:	e4b6      	b.n	83e66 <_dtoa_r+0x566>
   844f8:	2b39      	cmp	r3, #57	; 0x39
   844fa:	f8cd b020 	str.w	fp, [sp, #32]
   844fe:	46d0      	mov	r8, sl
   84500:	f000 80a5 	beq.w	8464e <_dtoa_r+0xd4e>
   84504:	f103 0a01 	add.w	sl, r3, #1
   84508:	46b3      	mov	fp, r6
   8450a:	f887 a000 	strb.w	sl, [r7]
   8450e:	1c7d      	adds	r5, r7, #1
   84510:	9e08      	ldr	r6, [sp, #32]
   84512:	e570      	b.n	83ff6 <_dtoa_r+0x6f6>
   84514:	465a      	mov	r2, fp
   84516:	46d0      	mov	r8, sl
   84518:	46b3      	mov	fp, r6
   8451a:	469a      	mov	sl, r3
   8451c:	4616      	mov	r6, r2
   8451e:	e54e      	b.n	83fbe <_dtoa_r+0x6be>
   84520:	9812      	ldr	r0, [sp, #72]	; 0x48
   84522:	495e      	ldr	r1, [pc, #376]	; (8469c <_dtoa_r+0xd9c>)
   84524:	462a      	mov	r2, r5
   84526:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8452a:	4633      	mov	r3, r6
   8452c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   84530:	f001 fd70 	bl	86014 <__aeabi_dmul>
   84534:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   84538:	4638      	mov	r0, r7
   8453a:	4641      	mov	r1, r8
   8453c:	f002 f81a 	bl	86574 <__aeabi_d2iz>
   84540:	4605      	mov	r5, r0
   84542:	f001 fd01 	bl	85f48 <__aeabi_i2d>
   84546:	4602      	mov	r2, r0
   84548:	460b      	mov	r3, r1
   8454a:	4638      	mov	r0, r7
   8454c:	4641      	mov	r1, r8
   8454e:	f001 fbad 	bl	85cac <__aeabi_dsub>
   84552:	4606      	mov	r6, r0
   84554:	9812      	ldr	r0, [sp, #72]	; 0x48
   84556:	9a04      	ldr	r2, [sp, #16]
   84558:	3530      	adds	r5, #48	; 0x30
   8455a:	2801      	cmp	r0, #1
   8455c:	7015      	strb	r5, [r2, #0]
   8455e:	460f      	mov	r7, r1
   84560:	f102 0501 	add.w	r5, r2, #1
   84564:	d026      	beq.n	845b4 <_dtoa_r+0xcb4>
   84566:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84568:	9a04      	ldr	r2, [sp, #16]
   8456a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8456e:	4413      	add	r3, r2
   84570:	f04f 0a00 	mov.w	sl, #0
   84574:	4699      	mov	r9, r3
   84576:	f8df b130 	ldr.w	fp, [pc, #304]	; 846a8 <_dtoa_r+0xda8>
   8457a:	4652      	mov	r2, sl
   8457c:	465b      	mov	r3, fp
   8457e:	4630      	mov	r0, r6
   84580:	4639      	mov	r1, r7
   84582:	f001 fd47 	bl	86014 <__aeabi_dmul>
   84586:	460f      	mov	r7, r1
   84588:	4606      	mov	r6, r0
   8458a:	f001 fff3 	bl	86574 <__aeabi_d2iz>
   8458e:	4680      	mov	r8, r0
   84590:	f001 fcda 	bl	85f48 <__aeabi_i2d>
   84594:	4602      	mov	r2, r0
   84596:	460b      	mov	r3, r1
   84598:	4630      	mov	r0, r6
   8459a:	4639      	mov	r1, r7
   8459c:	f001 fb86 	bl	85cac <__aeabi_dsub>
   845a0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   845a4:	f805 8b01 	strb.w	r8, [r5], #1
   845a8:	454d      	cmp	r5, r9
   845aa:	4606      	mov	r6, r0
   845ac:	460f      	mov	r7, r1
   845ae:	d1e4      	bne.n	8457a <_dtoa_r+0xc7a>
   845b0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   845b4:	2200      	movs	r2, #0
   845b6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   845ba:	4b3a      	ldr	r3, [pc, #232]	; (846a4 <_dtoa_r+0xda4>)
   845bc:	f001 fb78 	bl	85cb0 <__adddf3>
   845c0:	4632      	mov	r2, r6
   845c2:	463b      	mov	r3, r7
   845c4:	f001 ff98 	bl	864f8 <__aeabi_dcmplt>
   845c8:	2800      	cmp	r0, #0
   845ca:	d046      	beq.n	8465a <_dtoa_r+0xd5a>
   845cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   845ce:	9302      	str	r3, [sp, #8]
   845d0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   845d4:	f7ff bb42 	b.w	83c5c <_dtoa_r+0x35c>
   845d8:	f04f 0800 	mov.w	r8, #0
   845dc:	4646      	mov	r6, r8
   845de:	e6a8      	b.n	84332 <_dtoa_r+0xa32>
   845e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   845e2:	9a07      	ldr	r2, [sp, #28]
   845e4:	1a9d      	subs	r5, r3, r2
   845e6:	2300      	movs	r3, #0
   845e8:	f7ff bb70 	b.w	83ccc <_dtoa_r+0x3cc>
   845ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
   845ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   845f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   845f4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   845f6:	f7ff bb69 	b.w	83ccc <_dtoa_r+0x3cc>
   845fa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   845fe:	f04f 0a02 	mov.w	sl, #2
   84602:	e56d      	b.n	840e0 <_dtoa_r+0x7e0>
   84604:	9b07      	ldr	r3, [sp, #28]
   84606:	2b00      	cmp	r3, #0
   84608:	f43f aeb8 	beq.w	8437c <_dtoa_r+0xa7c>
   8460c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8460e:	2b00      	cmp	r3, #0
   84610:	f77f aede 	ble.w	843d0 <_dtoa_r+0xad0>
   84614:	2200      	movs	r2, #0
   84616:	4b24      	ldr	r3, [pc, #144]	; (846a8 <_dtoa_r+0xda8>)
   84618:	4638      	mov	r0, r7
   8461a:	4641      	mov	r1, r8
   8461c:	f001 fcfa 	bl	86014 <__aeabi_dmul>
   84620:	4607      	mov	r7, r0
   84622:	4688      	mov	r8, r1
   84624:	f10a 0001 	add.w	r0, sl, #1
   84628:	f001 fc8e 	bl	85f48 <__aeabi_i2d>
   8462c:	463a      	mov	r2, r7
   8462e:	4643      	mov	r3, r8
   84630:	f001 fcf0 	bl	86014 <__aeabi_dmul>
   84634:	2200      	movs	r2, #0
   84636:	4b17      	ldr	r3, [pc, #92]	; (84694 <_dtoa_r+0xd94>)
   84638:	f001 fb3a 	bl	85cb0 <__adddf3>
   8463c:	9a02      	ldr	r2, [sp, #8]
   8463e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84640:	3a01      	subs	r2, #1
   84642:	4605      	mov	r5, r0
   84644:	9215      	str	r2, [sp, #84]	; 0x54
   84646:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8464a:	9312      	str	r3, [sp, #72]	; 0x48
   8464c:	e569      	b.n	84122 <_dtoa_r+0x822>
   8464e:	2239      	movs	r2, #57	; 0x39
   84650:	46b3      	mov	fp, r6
   84652:	703a      	strb	r2, [r7, #0]
   84654:	9e08      	ldr	r6, [sp, #32]
   84656:	1c7d      	adds	r5, r7, #1
   84658:	e4bf      	b.n	83fda <_dtoa_r+0x6da>
   8465a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   8465e:	2000      	movs	r0, #0
   84660:	4910      	ldr	r1, [pc, #64]	; (846a4 <_dtoa_r+0xda4>)
   84662:	f001 fb23 	bl	85cac <__aeabi_dsub>
   84666:	4632      	mov	r2, r6
   84668:	463b      	mov	r3, r7
   8466a:	f001 ff63 	bl	86534 <__aeabi_dcmpgt>
   8466e:	b908      	cbnz	r0, 84674 <_dtoa_r+0xd74>
   84670:	e6ae      	b.n	843d0 <_dtoa_r+0xad0>
   84672:	4615      	mov	r5, r2
   84674:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   84678:	1e6a      	subs	r2, r5, #1
   8467a:	2b30      	cmp	r3, #48	; 0x30
   8467c:	d0f9      	beq.n	84672 <_dtoa_r+0xd72>
   8467e:	e5d7      	b.n	84230 <_dtoa_r+0x930>
   84680:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   84684:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84686:	9302      	str	r3, [sp, #8]
   84688:	f7ff bae8 	b.w	83c5c <_dtoa_r+0x35c>
   8468c:	970c      	str	r7, [sp, #48]	; 0x30
   8468e:	f7ff bba7 	b.w	83de0 <_dtoa_r+0x4e0>
   84692:	bf00      	nop
   84694:	401c0000 	.word	0x401c0000
   84698:	40140000 	.word	0x40140000
   8469c:	00086b60 	.word	0x00086b60
   846a0:	00086b38 	.word	0x00086b38
   846a4:	3fe00000 	.word	0x3fe00000
   846a8:	40240000 	.word	0x40240000
   846ac:	2b39      	cmp	r3, #57	; 0x39
   846ae:	f8cd b020 	str.w	fp, [sp, #32]
   846b2:	46d0      	mov	r8, sl
   846b4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   846b8:	469a      	mov	sl, r3
   846ba:	d0c8      	beq.n	8464e <_dtoa_r+0xd4e>
   846bc:	f1bb 0f00 	cmp.w	fp, #0
   846c0:	f73f aec0 	bgt.w	84444 <_dtoa_r+0xb44>
   846c4:	e6c0      	b.n	84448 <_dtoa_r+0xb48>
   846c6:	f47f aebf 	bne.w	84448 <_dtoa_r+0xb48>
   846ca:	f01a 0f01 	tst.w	sl, #1
   846ce:	f43f aebb 	beq.w	84448 <_dtoa_r+0xb48>
   846d2:	e6b3      	b.n	8443c <_dtoa_r+0xb3c>
   846d4:	f04f 0800 	mov.w	r8, #0
   846d8:	4646      	mov	r6, r8
   846da:	e5e8      	b.n	842ae <_dtoa_r+0x9ae>
   846dc:	4631      	mov	r1, r6
   846de:	2300      	movs	r3, #0
   846e0:	220a      	movs	r2, #10
   846e2:	4620      	mov	r0, r4
   846e4:	f000 fb94 	bl	84e10 <__multadd>
   846e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   846ea:	4606      	mov	r6, r0
   846ec:	2b00      	cmp	r3, #0
   846ee:	dd07      	ble.n	84700 <_dtoa_r+0xe00>
   846f0:	9307      	str	r3, [sp, #28]
   846f2:	f7ff bbab 	b.w	83e4c <_dtoa_r+0x54c>
   846f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   846f8:	2b02      	cmp	r3, #2
   846fa:	dc1f      	bgt.n	8473c <_dtoa_r+0xe3c>
   846fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   846fe:	e43c      	b.n	83f7a <_dtoa_r+0x67a>
   84700:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84702:	2b02      	cmp	r3, #2
   84704:	dc1a      	bgt.n	8473c <_dtoa_r+0xe3c>
   84706:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84708:	e7f2      	b.n	846f0 <_dtoa_r+0xdf0>
   8470a:	f43f ab81 	beq.w	83e10 <_dtoa_r+0x510>
   8470e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   84712:	e411      	b.n	83f38 <_dtoa_r+0x638>
   84714:	2500      	movs	r5, #0
   84716:	4620      	mov	r0, r4
   84718:	6465      	str	r5, [r4, #68]	; 0x44
   8471a:	4629      	mov	r1, r5
   8471c:	f000 fb48 	bl	84db0 <_Balloc>
   84720:	f04f 33ff 	mov.w	r3, #4294967295
   84724:	9307      	str	r3, [sp, #28]
   84726:	930f      	str	r3, [sp, #60]	; 0x3c
   84728:	2301      	movs	r3, #1
   8472a:	9004      	str	r0, [sp, #16]
   8472c:	9525      	str	r5, [sp, #148]	; 0x94
   8472e:	6420      	str	r0, [r4, #64]	; 0x40
   84730:	930b      	str	r3, [sp, #44]	; 0x2c
   84732:	f7ff b9e0 	b.w	83af6 <_dtoa_r+0x1f6>
   84736:	2501      	movs	r5, #1
   84738:	f7ff b9a8 	b.w	83a8c <_dtoa_r+0x18c>
   8473c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8473e:	9307      	str	r3, [sp, #28]
   84740:	e5e8      	b.n	84314 <_dtoa_r+0xa14>
   84742:	bf00      	nop

00084744 <__libc_fini_array>:
   84744:	b538      	push	{r3, r4, r5, lr}
   84746:	4c0a      	ldr	r4, [pc, #40]	; (84770 <__libc_fini_array+0x2c>)
   84748:	4d0a      	ldr	r5, [pc, #40]	; (84774 <__libc_fini_array+0x30>)
   8474a:	1b64      	subs	r4, r4, r5
   8474c:	10a4      	asrs	r4, r4, #2
   8474e:	d00a      	beq.n	84766 <__libc_fini_array+0x22>
   84750:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   84754:	3b01      	subs	r3, #1
   84756:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8475a:	3c01      	subs	r4, #1
   8475c:	f855 3904 	ldr.w	r3, [r5], #-4
   84760:	4798      	blx	r3
   84762:	2c00      	cmp	r4, #0
   84764:	d1f9      	bne.n	8475a <__libc_fini_array+0x16>
   84766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8476a:	f002 baef 	b.w	86d4c <_fini>
   8476e:	bf00      	nop
   84770:	00086d5c 	.word	0x00086d5c
   84774:	00086d58 	.word	0x00086d58

00084778 <_localeconv_r>:
   84778:	4a04      	ldr	r2, [pc, #16]	; (8478c <_localeconv_r+0x14>)
   8477a:	4b05      	ldr	r3, [pc, #20]	; (84790 <_localeconv_r+0x18>)
   8477c:	6812      	ldr	r2, [r2, #0]
   8477e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   84780:	2800      	cmp	r0, #0
   84782:	bf08      	it	eq
   84784:	4618      	moveq	r0, r3
   84786:	30f0      	adds	r0, #240	; 0xf0
   84788:	4770      	bx	lr
   8478a:	bf00      	nop
   8478c:	20000580 	.word	0x20000580
   84790:	200009b4 	.word	0x200009b4

00084794 <__retarget_lock_acquire_recursive>:
   84794:	4770      	bx	lr
   84796:	bf00      	nop

00084798 <__retarget_lock_release_recursive>:
   84798:	4770      	bx	lr
   8479a:	bf00      	nop

0008479c <_malloc_r>:
   8479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   847a0:	f101 060b 	add.w	r6, r1, #11
   847a4:	2e16      	cmp	r6, #22
   847a6:	b083      	sub	sp, #12
   847a8:	4605      	mov	r5, r0
   847aa:	f240 809e 	bls.w	848ea <_malloc_r+0x14e>
   847ae:	f036 0607 	bics.w	r6, r6, #7
   847b2:	f100 80bd 	bmi.w	84930 <_malloc_r+0x194>
   847b6:	42b1      	cmp	r1, r6
   847b8:	f200 80ba 	bhi.w	84930 <_malloc_r+0x194>
   847bc:	f000 faec 	bl	84d98 <__malloc_lock>
   847c0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   847c4:	f0c0 8285 	bcc.w	84cd2 <_malloc_r+0x536>
   847c8:	0a73      	lsrs	r3, r6, #9
   847ca:	f000 80b8 	beq.w	8493e <_malloc_r+0x1a2>
   847ce:	2b04      	cmp	r3, #4
   847d0:	f200 816c 	bhi.w	84aac <_malloc_r+0x310>
   847d4:	09b3      	lsrs	r3, r6, #6
   847d6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   847da:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   847de:	00c1      	lsls	r1, r0, #3
   847e0:	4fb8      	ldr	r7, [pc, #736]	; (84ac4 <_malloc_r+0x328>)
   847e2:	4439      	add	r1, r7
   847e4:	684c      	ldr	r4, [r1, #4]
   847e6:	3908      	subs	r1, #8
   847e8:	42a1      	cmp	r1, r4
   847ea:	d106      	bne.n	847fa <_malloc_r+0x5e>
   847ec:	e00c      	b.n	84808 <_malloc_r+0x6c>
   847ee:	2a00      	cmp	r2, #0
   847f0:	f280 80ab 	bge.w	8494a <_malloc_r+0x1ae>
   847f4:	68e4      	ldr	r4, [r4, #12]
   847f6:	42a1      	cmp	r1, r4
   847f8:	d006      	beq.n	84808 <_malloc_r+0x6c>
   847fa:	6863      	ldr	r3, [r4, #4]
   847fc:	f023 0303 	bic.w	r3, r3, #3
   84800:	1b9a      	subs	r2, r3, r6
   84802:	2a0f      	cmp	r2, #15
   84804:	ddf3      	ble.n	847ee <_malloc_r+0x52>
   84806:	4670      	mov	r0, lr
   84808:	693c      	ldr	r4, [r7, #16]
   8480a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 84ad8 <_malloc_r+0x33c>
   8480e:	4574      	cmp	r4, lr
   84810:	f000 819e 	beq.w	84b50 <_malloc_r+0x3b4>
   84814:	6863      	ldr	r3, [r4, #4]
   84816:	f023 0303 	bic.w	r3, r3, #3
   8481a:	1b9a      	subs	r2, r3, r6
   8481c:	2a0f      	cmp	r2, #15
   8481e:	f300 8183 	bgt.w	84b28 <_malloc_r+0x38c>
   84822:	2a00      	cmp	r2, #0
   84824:	f8c7 e014 	str.w	lr, [r7, #20]
   84828:	f8c7 e010 	str.w	lr, [r7, #16]
   8482c:	f280 8091 	bge.w	84952 <_malloc_r+0x1b6>
   84830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84834:	f080 8154 	bcs.w	84ae0 <_malloc_r+0x344>
   84838:	2201      	movs	r2, #1
   8483a:	08db      	lsrs	r3, r3, #3
   8483c:	6879      	ldr	r1, [r7, #4]
   8483e:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   84842:	4413      	add	r3, r2
   84844:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   84848:	fa02 f20c 	lsl.w	r2, r2, ip
   8484c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   84850:	430a      	orrs	r2, r1
   84852:	f1ac 0108 	sub.w	r1, ip, #8
   84856:	60e1      	str	r1, [r4, #12]
   84858:	f8c4 8008 	str.w	r8, [r4, #8]
   8485c:	607a      	str	r2, [r7, #4]
   8485e:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   84862:	f8c8 400c 	str.w	r4, [r8, #12]
   84866:	2401      	movs	r4, #1
   84868:	1083      	asrs	r3, r0, #2
   8486a:	409c      	lsls	r4, r3
   8486c:	4294      	cmp	r4, r2
   8486e:	d87d      	bhi.n	8496c <_malloc_r+0x1d0>
   84870:	4214      	tst	r4, r2
   84872:	d106      	bne.n	84882 <_malloc_r+0xe6>
   84874:	f020 0003 	bic.w	r0, r0, #3
   84878:	0064      	lsls	r4, r4, #1
   8487a:	4214      	tst	r4, r2
   8487c:	f100 0004 	add.w	r0, r0, #4
   84880:	d0fa      	beq.n	84878 <_malloc_r+0xdc>
   84882:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   84886:	46cc      	mov	ip, r9
   84888:	4680      	mov	r8, r0
   8488a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8488e:	459c      	cmp	ip, r3
   84890:	d107      	bne.n	848a2 <_malloc_r+0x106>
   84892:	e15f      	b.n	84b54 <_malloc_r+0x3b8>
   84894:	2a00      	cmp	r2, #0
   84896:	f280 816d 	bge.w	84b74 <_malloc_r+0x3d8>
   8489a:	68db      	ldr	r3, [r3, #12]
   8489c:	459c      	cmp	ip, r3
   8489e:	f000 8159 	beq.w	84b54 <_malloc_r+0x3b8>
   848a2:	6859      	ldr	r1, [r3, #4]
   848a4:	f021 0103 	bic.w	r1, r1, #3
   848a8:	1b8a      	subs	r2, r1, r6
   848aa:	2a0f      	cmp	r2, #15
   848ac:	ddf2      	ble.n	84894 <_malloc_r+0xf8>
   848ae:	68dc      	ldr	r4, [r3, #12]
   848b0:	f8d3 c008 	ldr.w	ip, [r3, #8]
   848b4:	f046 0801 	orr.w	r8, r6, #1
   848b8:	4628      	mov	r0, r5
   848ba:	441e      	add	r6, r3
   848bc:	f042 0501 	orr.w	r5, r2, #1
   848c0:	f8c3 8004 	str.w	r8, [r3, #4]
   848c4:	f8cc 400c 	str.w	r4, [ip, #12]
   848c8:	f8c4 c008 	str.w	ip, [r4, #8]
   848cc:	617e      	str	r6, [r7, #20]
   848ce:	613e      	str	r6, [r7, #16]
   848d0:	f8c6 e00c 	str.w	lr, [r6, #12]
   848d4:	f8c6 e008 	str.w	lr, [r6, #8]
   848d8:	6075      	str	r5, [r6, #4]
   848da:	505a      	str	r2, [r3, r1]
   848dc:	9300      	str	r3, [sp, #0]
   848de:	f000 fa61 	bl	84da4 <__malloc_unlock>
   848e2:	9b00      	ldr	r3, [sp, #0]
   848e4:	f103 0408 	add.w	r4, r3, #8
   848e8:	e01e      	b.n	84928 <_malloc_r+0x18c>
   848ea:	2910      	cmp	r1, #16
   848ec:	d820      	bhi.n	84930 <_malloc_r+0x194>
   848ee:	f000 fa53 	bl	84d98 <__malloc_lock>
   848f2:	2610      	movs	r6, #16
   848f4:	2318      	movs	r3, #24
   848f6:	2002      	movs	r0, #2
   848f8:	4f72      	ldr	r7, [pc, #456]	; (84ac4 <_malloc_r+0x328>)
   848fa:	443b      	add	r3, r7
   848fc:	685c      	ldr	r4, [r3, #4]
   848fe:	f1a3 0208 	sub.w	r2, r3, #8
   84902:	4294      	cmp	r4, r2
   84904:	f000 812f 	beq.w	84b66 <_malloc_r+0x3ca>
   84908:	6863      	ldr	r3, [r4, #4]
   8490a:	68e1      	ldr	r1, [r4, #12]
   8490c:	f023 0303 	bic.w	r3, r3, #3
   84910:	4423      	add	r3, r4
   84912:	685a      	ldr	r2, [r3, #4]
   84914:	68a6      	ldr	r6, [r4, #8]
   84916:	f042 0201 	orr.w	r2, r2, #1
   8491a:	60f1      	str	r1, [r6, #12]
   8491c:	4628      	mov	r0, r5
   8491e:	608e      	str	r6, [r1, #8]
   84920:	605a      	str	r2, [r3, #4]
   84922:	f000 fa3f 	bl	84da4 <__malloc_unlock>
   84926:	3408      	adds	r4, #8
   84928:	4620      	mov	r0, r4
   8492a:	b003      	add	sp, #12
   8492c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84930:	2400      	movs	r4, #0
   84932:	230c      	movs	r3, #12
   84934:	4620      	mov	r0, r4
   84936:	602b      	str	r3, [r5, #0]
   84938:	b003      	add	sp, #12
   8493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8493e:	2040      	movs	r0, #64	; 0x40
   84940:	f44f 7100 	mov.w	r1, #512	; 0x200
   84944:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   84948:	e74a      	b.n	847e0 <_malloc_r+0x44>
   8494a:	4423      	add	r3, r4
   8494c:	685a      	ldr	r2, [r3, #4]
   8494e:	68e1      	ldr	r1, [r4, #12]
   84950:	e7e0      	b.n	84914 <_malloc_r+0x178>
   84952:	4423      	add	r3, r4
   84954:	685a      	ldr	r2, [r3, #4]
   84956:	4628      	mov	r0, r5
   84958:	f042 0201 	orr.w	r2, r2, #1
   8495c:	605a      	str	r2, [r3, #4]
   8495e:	3408      	adds	r4, #8
   84960:	f000 fa20 	bl	84da4 <__malloc_unlock>
   84964:	4620      	mov	r0, r4
   84966:	b003      	add	sp, #12
   84968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8496c:	68bc      	ldr	r4, [r7, #8]
   8496e:	6863      	ldr	r3, [r4, #4]
   84970:	f023 0803 	bic.w	r8, r3, #3
   84974:	45b0      	cmp	r8, r6
   84976:	d304      	bcc.n	84982 <_malloc_r+0x1e6>
   84978:	eba8 0306 	sub.w	r3, r8, r6
   8497c:	2b0f      	cmp	r3, #15
   8497e:	f300 8085 	bgt.w	84a8c <_malloc_r+0x2f0>
   84982:	f8df 9158 	ldr.w	r9, [pc, #344]	; 84adc <_malloc_r+0x340>
   84986:	4b50      	ldr	r3, [pc, #320]	; (84ac8 <_malloc_r+0x32c>)
   84988:	f8d9 2000 	ldr.w	r2, [r9]
   8498c:	681b      	ldr	r3, [r3, #0]
   8498e:	3201      	adds	r2, #1
   84990:	4433      	add	r3, r6
   84992:	eb04 0a08 	add.w	sl, r4, r8
   84996:	f000 8154 	beq.w	84c42 <_malloc_r+0x4a6>
   8499a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8499e:	330f      	adds	r3, #15
   849a0:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   849a4:	f02b 0b0f 	bic.w	fp, fp, #15
   849a8:	4659      	mov	r1, fp
   849aa:	4628      	mov	r0, r5
   849ac:	f000 fcfc 	bl	853a8 <_sbrk_r>
   849b0:	1c41      	adds	r1, r0, #1
   849b2:	4602      	mov	r2, r0
   849b4:	f000 80fb 	beq.w	84bae <_malloc_r+0x412>
   849b8:	4582      	cmp	sl, r0
   849ba:	f200 80f6 	bhi.w	84baa <_malloc_r+0x40e>
   849be:	4b43      	ldr	r3, [pc, #268]	; (84acc <_malloc_r+0x330>)
   849c0:	6819      	ldr	r1, [r3, #0]
   849c2:	4459      	add	r1, fp
   849c4:	6019      	str	r1, [r3, #0]
   849c6:	f000 814c 	beq.w	84c62 <_malloc_r+0x4c6>
   849ca:	f8d9 0000 	ldr.w	r0, [r9]
   849ce:	3001      	adds	r0, #1
   849d0:	bf1b      	ittet	ne
   849d2:	eba2 0a0a 	subne.w	sl, r2, sl
   849d6:	4451      	addne	r1, sl
   849d8:	f8c9 2000 	streq.w	r2, [r9]
   849dc:	6019      	strne	r1, [r3, #0]
   849de:	f012 0107 	ands.w	r1, r2, #7
   849e2:	f000 8114 	beq.w	84c0e <_malloc_r+0x472>
   849e6:	f1c1 0008 	rsb	r0, r1, #8
   849ea:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   849ee:	4402      	add	r2, r0
   849f0:	3108      	adds	r1, #8
   849f2:	eb02 090b 	add.w	r9, r2, fp
   849f6:	f3c9 090b 	ubfx	r9, r9, #0, #12
   849fa:	eba1 0909 	sub.w	r9, r1, r9
   849fe:	4649      	mov	r1, r9
   84a00:	4628      	mov	r0, r5
   84a02:	9301      	str	r3, [sp, #4]
   84a04:	9200      	str	r2, [sp, #0]
   84a06:	f000 fccf 	bl	853a8 <_sbrk_r>
   84a0a:	1c43      	adds	r3, r0, #1
   84a0c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   84a10:	f000 8142 	beq.w	84c98 <_malloc_r+0x4fc>
   84a14:	1a80      	subs	r0, r0, r2
   84a16:	4448      	add	r0, r9
   84a18:	f040 0001 	orr.w	r0, r0, #1
   84a1c:	6819      	ldr	r1, [r3, #0]
   84a1e:	42bc      	cmp	r4, r7
   84a20:	4449      	add	r1, r9
   84a22:	60ba      	str	r2, [r7, #8]
   84a24:	6019      	str	r1, [r3, #0]
   84a26:	6050      	str	r0, [r2, #4]
   84a28:	d017      	beq.n	84a5a <_malloc_r+0x2be>
   84a2a:	f1b8 0f0f 	cmp.w	r8, #15
   84a2e:	f240 80fa 	bls.w	84c26 <_malloc_r+0x48a>
   84a32:	f04f 0c05 	mov.w	ip, #5
   84a36:	6862      	ldr	r2, [r4, #4]
   84a38:	f1a8 000c 	sub.w	r0, r8, #12
   84a3c:	f020 0007 	bic.w	r0, r0, #7
   84a40:	f002 0201 	and.w	r2, r2, #1
   84a44:	eb04 0e00 	add.w	lr, r4, r0
   84a48:	4302      	orrs	r2, r0
   84a4a:	280f      	cmp	r0, #15
   84a4c:	6062      	str	r2, [r4, #4]
   84a4e:	f8ce c004 	str.w	ip, [lr, #4]
   84a52:	f8ce c008 	str.w	ip, [lr, #8]
   84a56:	f200 8116 	bhi.w	84c86 <_malloc_r+0x4ea>
   84a5a:	4b1d      	ldr	r3, [pc, #116]	; (84ad0 <_malloc_r+0x334>)
   84a5c:	68bc      	ldr	r4, [r7, #8]
   84a5e:	681a      	ldr	r2, [r3, #0]
   84a60:	4291      	cmp	r1, r2
   84a62:	bf88      	it	hi
   84a64:	6019      	strhi	r1, [r3, #0]
   84a66:	4b1b      	ldr	r3, [pc, #108]	; (84ad4 <_malloc_r+0x338>)
   84a68:	681a      	ldr	r2, [r3, #0]
   84a6a:	4291      	cmp	r1, r2
   84a6c:	6862      	ldr	r2, [r4, #4]
   84a6e:	bf88      	it	hi
   84a70:	6019      	strhi	r1, [r3, #0]
   84a72:	f022 0203 	bic.w	r2, r2, #3
   84a76:	4296      	cmp	r6, r2
   84a78:	eba2 0306 	sub.w	r3, r2, r6
   84a7c:	d801      	bhi.n	84a82 <_malloc_r+0x2e6>
   84a7e:	2b0f      	cmp	r3, #15
   84a80:	dc04      	bgt.n	84a8c <_malloc_r+0x2f0>
   84a82:	4628      	mov	r0, r5
   84a84:	f000 f98e 	bl	84da4 <__malloc_unlock>
   84a88:	2400      	movs	r4, #0
   84a8a:	e74d      	b.n	84928 <_malloc_r+0x18c>
   84a8c:	f046 0201 	orr.w	r2, r6, #1
   84a90:	f043 0301 	orr.w	r3, r3, #1
   84a94:	4426      	add	r6, r4
   84a96:	6062      	str	r2, [r4, #4]
   84a98:	4628      	mov	r0, r5
   84a9a:	60be      	str	r6, [r7, #8]
   84a9c:	3408      	adds	r4, #8
   84a9e:	6073      	str	r3, [r6, #4]
   84aa0:	f000 f980 	bl	84da4 <__malloc_unlock>
   84aa4:	4620      	mov	r0, r4
   84aa6:	b003      	add	sp, #12
   84aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84aac:	2b14      	cmp	r3, #20
   84aae:	d970      	bls.n	84b92 <_malloc_r+0x3f6>
   84ab0:	2b54      	cmp	r3, #84	; 0x54
   84ab2:	f200 80a2 	bhi.w	84bfa <_malloc_r+0x45e>
   84ab6:	0b33      	lsrs	r3, r6, #12
   84ab8:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   84abc:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   84ac0:	00c1      	lsls	r1, r0, #3
   84ac2:	e68d      	b.n	847e0 <_malloc_r+0x44>
   84ac4:	20000b20 	.word	0x20000b20
   84ac8:	200010b8 	.word	0x200010b8
   84acc:	20001088 	.word	0x20001088
   84ad0:	200010b0 	.word	0x200010b0
   84ad4:	200010b4 	.word	0x200010b4
   84ad8:	20000b28 	.word	0x20000b28
   84adc:	20000f28 	.word	0x20000f28
   84ae0:	0a5a      	lsrs	r2, r3, #9
   84ae2:	2a04      	cmp	r2, #4
   84ae4:	d95b      	bls.n	84b9e <_malloc_r+0x402>
   84ae6:	2a14      	cmp	r2, #20
   84ae8:	f200 80ae 	bhi.w	84c48 <_malloc_r+0x4ac>
   84aec:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   84af0:	00c9      	lsls	r1, r1, #3
   84af2:	325b      	adds	r2, #91	; 0x5b
   84af4:	eb07 0c01 	add.w	ip, r7, r1
   84af8:	5879      	ldr	r1, [r7, r1]
   84afa:	f1ac 0c08 	sub.w	ip, ip, #8
   84afe:	458c      	cmp	ip, r1
   84b00:	f000 8088 	beq.w	84c14 <_malloc_r+0x478>
   84b04:	684a      	ldr	r2, [r1, #4]
   84b06:	f022 0203 	bic.w	r2, r2, #3
   84b0a:	4293      	cmp	r3, r2
   84b0c:	d273      	bcs.n	84bf6 <_malloc_r+0x45a>
   84b0e:	6889      	ldr	r1, [r1, #8]
   84b10:	458c      	cmp	ip, r1
   84b12:	d1f7      	bne.n	84b04 <_malloc_r+0x368>
   84b14:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84b18:	687a      	ldr	r2, [r7, #4]
   84b1a:	60e3      	str	r3, [r4, #12]
   84b1c:	f8c4 c008 	str.w	ip, [r4, #8]
   84b20:	609c      	str	r4, [r3, #8]
   84b22:	f8cc 400c 	str.w	r4, [ip, #12]
   84b26:	e69e      	b.n	84866 <_malloc_r+0xca>
   84b28:	f046 0c01 	orr.w	ip, r6, #1
   84b2c:	f042 0101 	orr.w	r1, r2, #1
   84b30:	4426      	add	r6, r4
   84b32:	f8c4 c004 	str.w	ip, [r4, #4]
   84b36:	4628      	mov	r0, r5
   84b38:	617e      	str	r6, [r7, #20]
   84b3a:	613e      	str	r6, [r7, #16]
   84b3c:	f8c6 e00c 	str.w	lr, [r6, #12]
   84b40:	f8c6 e008 	str.w	lr, [r6, #8]
   84b44:	6071      	str	r1, [r6, #4]
   84b46:	50e2      	str	r2, [r4, r3]
   84b48:	f000 f92c 	bl	84da4 <__malloc_unlock>
   84b4c:	3408      	adds	r4, #8
   84b4e:	e6eb      	b.n	84928 <_malloc_r+0x18c>
   84b50:	687a      	ldr	r2, [r7, #4]
   84b52:	e688      	b.n	84866 <_malloc_r+0xca>
   84b54:	f108 0801 	add.w	r8, r8, #1
   84b58:	f018 0f03 	tst.w	r8, #3
   84b5c:	f10c 0c08 	add.w	ip, ip, #8
   84b60:	f47f ae93 	bne.w	8488a <_malloc_r+0xee>
   84b64:	e02d      	b.n	84bc2 <_malloc_r+0x426>
   84b66:	68dc      	ldr	r4, [r3, #12]
   84b68:	42a3      	cmp	r3, r4
   84b6a:	bf08      	it	eq
   84b6c:	3002      	addeq	r0, #2
   84b6e:	f43f ae4b 	beq.w	84808 <_malloc_r+0x6c>
   84b72:	e6c9      	b.n	84908 <_malloc_r+0x16c>
   84b74:	461c      	mov	r4, r3
   84b76:	4419      	add	r1, r3
   84b78:	684a      	ldr	r2, [r1, #4]
   84b7a:	68db      	ldr	r3, [r3, #12]
   84b7c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   84b80:	f042 0201 	orr.w	r2, r2, #1
   84b84:	604a      	str	r2, [r1, #4]
   84b86:	4628      	mov	r0, r5
   84b88:	60f3      	str	r3, [r6, #12]
   84b8a:	609e      	str	r6, [r3, #8]
   84b8c:	f000 f90a 	bl	84da4 <__malloc_unlock>
   84b90:	e6ca      	b.n	84928 <_malloc_r+0x18c>
   84b92:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   84b96:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   84b9a:	00c1      	lsls	r1, r0, #3
   84b9c:	e620      	b.n	847e0 <_malloc_r+0x44>
   84b9e:	099a      	lsrs	r2, r3, #6
   84ba0:	f102 0139 	add.w	r1, r2, #57	; 0x39
   84ba4:	00c9      	lsls	r1, r1, #3
   84ba6:	3238      	adds	r2, #56	; 0x38
   84ba8:	e7a4      	b.n	84af4 <_malloc_r+0x358>
   84baa:	42bc      	cmp	r4, r7
   84bac:	d054      	beq.n	84c58 <_malloc_r+0x4bc>
   84bae:	68bc      	ldr	r4, [r7, #8]
   84bb0:	6862      	ldr	r2, [r4, #4]
   84bb2:	f022 0203 	bic.w	r2, r2, #3
   84bb6:	e75e      	b.n	84a76 <_malloc_r+0x2da>
   84bb8:	f859 3908 	ldr.w	r3, [r9], #-8
   84bbc:	4599      	cmp	r9, r3
   84bbe:	f040 8086 	bne.w	84cce <_malloc_r+0x532>
   84bc2:	f010 0f03 	tst.w	r0, #3
   84bc6:	f100 30ff 	add.w	r0, r0, #4294967295
   84bca:	d1f5      	bne.n	84bb8 <_malloc_r+0x41c>
   84bcc:	687b      	ldr	r3, [r7, #4]
   84bce:	ea23 0304 	bic.w	r3, r3, r4
   84bd2:	607b      	str	r3, [r7, #4]
   84bd4:	0064      	lsls	r4, r4, #1
   84bd6:	429c      	cmp	r4, r3
   84bd8:	f63f aec8 	bhi.w	8496c <_malloc_r+0x1d0>
   84bdc:	2c00      	cmp	r4, #0
   84bde:	f43f aec5 	beq.w	8496c <_malloc_r+0x1d0>
   84be2:	421c      	tst	r4, r3
   84be4:	4640      	mov	r0, r8
   84be6:	f47f ae4c 	bne.w	84882 <_malloc_r+0xe6>
   84bea:	0064      	lsls	r4, r4, #1
   84bec:	421c      	tst	r4, r3
   84bee:	f100 0004 	add.w	r0, r0, #4
   84bf2:	d0fa      	beq.n	84bea <_malloc_r+0x44e>
   84bf4:	e645      	b.n	84882 <_malloc_r+0xe6>
   84bf6:	468c      	mov	ip, r1
   84bf8:	e78c      	b.n	84b14 <_malloc_r+0x378>
   84bfa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   84bfe:	d815      	bhi.n	84c2c <_malloc_r+0x490>
   84c00:	0bf3      	lsrs	r3, r6, #15
   84c02:	f103 0078 	add.w	r0, r3, #120	; 0x78
   84c06:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   84c0a:	00c1      	lsls	r1, r0, #3
   84c0c:	e5e8      	b.n	847e0 <_malloc_r+0x44>
   84c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   84c12:	e6ee      	b.n	849f2 <_malloc_r+0x256>
   84c14:	2101      	movs	r1, #1
   84c16:	687b      	ldr	r3, [r7, #4]
   84c18:	1092      	asrs	r2, r2, #2
   84c1a:	fa01 f202 	lsl.w	r2, r1, r2
   84c1e:	431a      	orrs	r2, r3
   84c20:	607a      	str	r2, [r7, #4]
   84c22:	4663      	mov	r3, ip
   84c24:	e779      	b.n	84b1a <_malloc_r+0x37e>
   84c26:	2301      	movs	r3, #1
   84c28:	6053      	str	r3, [r2, #4]
   84c2a:	e72a      	b.n	84a82 <_malloc_r+0x2e6>
   84c2c:	f240 5254 	movw	r2, #1364	; 0x554
   84c30:	4293      	cmp	r3, r2
   84c32:	d822      	bhi.n	84c7a <_malloc_r+0x4de>
   84c34:	0cb3      	lsrs	r3, r6, #18
   84c36:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   84c3a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   84c3e:	00c1      	lsls	r1, r0, #3
   84c40:	e5ce      	b.n	847e0 <_malloc_r+0x44>
   84c42:	f103 0b10 	add.w	fp, r3, #16
   84c46:	e6af      	b.n	849a8 <_malloc_r+0x20c>
   84c48:	2a54      	cmp	r2, #84	; 0x54
   84c4a:	d829      	bhi.n	84ca0 <_malloc_r+0x504>
   84c4c:	0b1a      	lsrs	r2, r3, #12
   84c4e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   84c52:	00c9      	lsls	r1, r1, #3
   84c54:	326e      	adds	r2, #110	; 0x6e
   84c56:	e74d      	b.n	84af4 <_malloc_r+0x358>
   84c58:	4b20      	ldr	r3, [pc, #128]	; (84cdc <_malloc_r+0x540>)
   84c5a:	6819      	ldr	r1, [r3, #0]
   84c5c:	4459      	add	r1, fp
   84c5e:	6019      	str	r1, [r3, #0]
   84c60:	e6b3      	b.n	849ca <_malloc_r+0x22e>
   84c62:	f3ca 000b 	ubfx	r0, sl, #0, #12
   84c66:	2800      	cmp	r0, #0
   84c68:	f47f aeaf 	bne.w	849ca <_malloc_r+0x22e>
   84c6c:	eb08 030b 	add.w	r3, r8, fp
   84c70:	68ba      	ldr	r2, [r7, #8]
   84c72:	f043 0301 	orr.w	r3, r3, #1
   84c76:	6053      	str	r3, [r2, #4]
   84c78:	e6ef      	b.n	84a5a <_malloc_r+0x2be>
   84c7a:	207f      	movs	r0, #127	; 0x7f
   84c7c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84c80:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   84c84:	e5ac      	b.n	847e0 <_malloc_r+0x44>
   84c86:	f104 0108 	add.w	r1, r4, #8
   84c8a:	4628      	mov	r0, r5
   84c8c:	9300      	str	r3, [sp, #0]
   84c8e:	f000 fd09 	bl	856a4 <_free_r>
   84c92:	9b00      	ldr	r3, [sp, #0]
   84c94:	6819      	ldr	r1, [r3, #0]
   84c96:	e6e0      	b.n	84a5a <_malloc_r+0x2be>
   84c98:	2001      	movs	r0, #1
   84c9a:	f04f 0900 	mov.w	r9, #0
   84c9e:	e6bd      	b.n	84a1c <_malloc_r+0x280>
   84ca0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84ca4:	d805      	bhi.n	84cb2 <_malloc_r+0x516>
   84ca6:	0bda      	lsrs	r2, r3, #15
   84ca8:	f102 0178 	add.w	r1, r2, #120	; 0x78
   84cac:	00c9      	lsls	r1, r1, #3
   84cae:	3277      	adds	r2, #119	; 0x77
   84cb0:	e720      	b.n	84af4 <_malloc_r+0x358>
   84cb2:	f240 5154 	movw	r1, #1364	; 0x554
   84cb6:	428a      	cmp	r2, r1
   84cb8:	d805      	bhi.n	84cc6 <_malloc_r+0x52a>
   84cba:	0c9a      	lsrs	r2, r3, #18
   84cbc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   84cc0:	00c9      	lsls	r1, r1, #3
   84cc2:	327c      	adds	r2, #124	; 0x7c
   84cc4:	e716      	b.n	84af4 <_malloc_r+0x358>
   84cc6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84cca:	227e      	movs	r2, #126	; 0x7e
   84ccc:	e712      	b.n	84af4 <_malloc_r+0x358>
   84cce:	687b      	ldr	r3, [r7, #4]
   84cd0:	e780      	b.n	84bd4 <_malloc_r+0x438>
   84cd2:	08f0      	lsrs	r0, r6, #3
   84cd4:	f106 0308 	add.w	r3, r6, #8
   84cd8:	e60e      	b.n	848f8 <_malloc_r+0x15c>
   84cda:	bf00      	nop
   84cdc:	20001088 	.word	0x20001088

00084ce0 <__ascii_mbtowc>:
   84ce0:	b082      	sub	sp, #8
   84ce2:	b149      	cbz	r1, 84cf8 <__ascii_mbtowc+0x18>
   84ce4:	b15a      	cbz	r2, 84cfe <__ascii_mbtowc+0x1e>
   84ce6:	b16b      	cbz	r3, 84d04 <__ascii_mbtowc+0x24>
   84ce8:	7813      	ldrb	r3, [r2, #0]
   84cea:	600b      	str	r3, [r1, #0]
   84cec:	7812      	ldrb	r2, [r2, #0]
   84cee:	1c10      	adds	r0, r2, #0
   84cf0:	bf18      	it	ne
   84cf2:	2001      	movne	r0, #1
   84cf4:	b002      	add	sp, #8
   84cf6:	4770      	bx	lr
   84cf8:	a901      	add	r1, sp, #4
   84cfa:	2a00      	cmp	r2, #0
   84cfc:	d1f3      	bne.n	84ce6 <__ascii_mbtowc+0x6>
   84cfe:	4610      	mov	r0, r2
   84d00:	b002      	add	sp, #8
   84d02:	4770      	bx	lr
   84d04:	f06f 0001 	mvn.w	r0, #1
   84d08:	e7f4      	b.n	84cf4 <__ascii_mbtowc+0x14>
   84d0a:	bf00      	nop

00084d0c <memchr>:
   84d0c:	0783      	lsls	r3, r0, #30
   84d0e:	b470      	push	{r4, r5, r6}
   84d10:	b2cd      	uxtb	r5, r1
   84d12:	d03d      	beq.n	84d90 <memchr+0x84>
   84d14:	1e54      	subs	r4, r2, #1
   84d16:	b30a      	cbz	r2, 84d5c <memchr+0x50>
   84d18:	7803      	ldrb	r3, [r0, #0]
   84d1a:	42ab      	cmp	r3, r5
   84d1c:	d01f      	beq.n	84d5e <memchr+0x52>
   84d1e:	1c43      	adds	r3, r0, #1
   84d20:	e005      	b.n	84d2e <memchr+0x22>
   84d22:	f114 34ff 	adds.w	r4, r4, #4294967295
   84d26:	d319      	bcc.n	84d5c <memchr+0x50>
   84d28:	7802      	ldrb	r2, [r0, #0]
   84d2a:	42aa      	cmp	r2, r5
   84d2c:	d017      	beq.n	84d5e <memchr+0x52>
   84d2e:	f013 0f03 	tst.w	r3, #3
   84d32:	4618      	mov	r0, r3
   84d34:	f103 0301 	add.w	r3, r3, #1
   84d38:	d1f3      	bne.n	84d22 <memchr+0x16>
   84d3a:	2c03      	cmp	r4, #3
   84d3c:	d811      	bhi.n	84d62 <memchr+0x56>
   84d3e:	b34c      	cbz	r4, 84d94 <memchr+0x88>
   84d40:	7803      	ldrb	r3, [r0, #0]
   84d42:	42ab      	cmp	r3, r5
   84d44:	d00b      	beq.n	84d5e <memchr+0x52>
   84d46:	4404      	add	r4, r0
   84d48:	1c43      	adds	r3, r0, #1
   84d4a:	e002      	b.n	84d52 <memchr+0x46>
   84d4c:	7802      	ldrb	r2, [r0, #0]
   84d4e:	42aa      	cmp	r2, r5
   84d50:	d005      	beq.n	84d5e <memchr+0x52>
   84d52:	429c      	cmp	r4, r3
   84d54:	4618      	mov	r0, r3
   84d56:	f103 0301 	add.w	r3, r3, #1
   84d5a:	d1f7      	bne.n	84d4c <memchr+0x40>
   84d5c:	2000      	movs	r0, #0
   84d5e:	bc70      	pop	{r4, r5, r6}
   84d60:	4770      	bx	lr
   84d62:	0209      	lsls	r1, r1, #8
   84d64:	b289      	uxth	r1, r1
   84d66:	4329      	orrs	r1, r5
   84d68:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   84d6c:	6803      	ldr	r3, [r0, #0]
   84d6e:	4606      	mov	r6, r0
   84d70:	404b      	eors	r3, r1
   84d72:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   84d76:	ea22 0303 	bic.w	r3, r2, r3
   84d7a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   84d7e:	f100 0004 	add.w	r0, r0, #4
   84d82:	d103      	bne.n	84d8c <memchr+0x80>
   84d84:	3c04      	subs	r4, #4
   84d86:	2c03      	cmp	r4, #3
   84d88:	d8f0      	bhi.n	84d6c <memchr+0x60>
   84d8a:	e7d8      	b.n	84d3e <memchr+0x32>
   84d8c:	4630      	mov	r0, r6
   84d8e:	e7d7      	b.n	84d40 <memchr+0x34>
   84d90:	4614      	mov	r4, r2
   84d92:	e7d2      	b.n	84d3a <memchr+0x2e>
   84d94:	4620      	mov	r0, r4
   84d96:	e7e2      	b.n	84d5e <memchr+0x52>

00084d98 <__malloc_lock>:
   84d98:	4801      	ldr	r0, [pc, #4]	; (84da0 <__malloc_lock+0x8>)
   84d9a:	f7ff bcfb 	b.w	84794 <__retarget_lock_acquire_recursive>
   84d9e:	bf00      	nop
   84da0:	20001644 	.word	0x20001644

00084da4 <__malloc_unlock>:
   84da4:	4801      	ldr	r0, [pc, #4]	; (84dac <__malloc_unlock+0x8>)
   84da6:	f7ff bcf7 	b.w	84798 <__retarget_lock_release_recursive>
   84daa:	bf00      	nop
   84dac:	20001644 	.word	0x20001644

00084db0 <_Balloc>:
   84db0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   84db2:	b570      	push	{r4, r5, r6, lr}
   84db4:	4605      	mov	r5, r0
   84db6:	460c      	mov	r4, r1
   84db8:	b14b      	cbz	r3, 84dce <_Balloc+0x1e>
   84dba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   84dbe:	b180      	cbz	r0, 84de2 <_Balloc+0x32>
   84dc0:	6802      	ldr	r2, [r0, #0]
   84dc2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   84dc6:	2300      	movs	r3, #0
   84dc8:	6103      	str	r3, [r0, #16]
   84dca:	60c3      	str	r3, [r0, #12]
   84dcc:	bd70      	pop	{r4, r5, r6, pc}
   84dce:	2221      	movs	r2, #33	; 0x21
   84dd0:	2104      	movs	r1, #4
   84dd2:	f000 fbe7 	bl	855a4 <_calloc_r>
   84dd6:	64e8      	str	r0, [r5, #76]	; 0x4c
   84dd8:	4603      	mov	r3, r0
   84dda:	2800      	cmp	r0, #0
   84ddc:	d1ed      	bne.n	84dba <_Balloc+0xa>
   84dde:	2000      	movs	r0, #0
   84de0:	bd70      	pop	{r4, r5, r6, pc}
   84de2:	2101      	movs	r1, #1
   84de4:	fa01 f604 	lsl.w	r6, r1, r4
   84de8:	1d72      	adds	r2, r6, #5
   84dea:	4628      	mov	r0, r5
   84dec:	0092      	lsls	r2, r2, #2
   84dee:	f000 fbd9 	bl	855a4 <_calloc_r>
   84df2:	2800      	cmp	r0, #0
   84df4:	d0f3      	beq.n	84dde <_Balloc+0x2e>
   84df6:	6044      	str	r4, [r0, #4]
   84df8:	6086      	str	r6, [r0, #8]
   84dfa:	e7e4      	b.n	84dc6 <_Balloc+0x16>

00084dfc <_Bfree>:
   84dfc:	b131      	cbz	r1, 84e0c <_Bfree+0x10>
   84dfe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   84e00:	684a      	ldr	r2, [r1, #4]
   84e02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   84e06:	6008      	str	r0, [r1, #0]
   84e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   84e0c:	4770      	bx	lr
   84e0e:	bf00      	nop

00084e10 <__multadd>:
   84e10:	b5f0      	push	{r4, r5, r6, r7, lr}
   84e12:	460c      	mov	r4, r1
   84e14:	4605      	mov	r5, r0
   84e16:	f04f 0e00 	mov.w	lr, #0
   84e1a:	690e      	ldr	r6, [r1, #16]
   84e1c:	b083      	sub	sp, #12
   84e1e:	f101 0714 	add.w	r7, r1, #20
   84e22:	6838      	ldr	r0, [r7, #0]
   84e24:	f10e 0e01 	add.w	lr, lr, #1
   84e28:	b281      	uxth	r1, r0
   84e2a:	fb02 3301 	mla	r3, r2, r1, r3
   84e2e:	0c01      	lsrs	r1, r0, #16
   84e30:	0c18      	lsrs	r0, r3, #16
   84e32:	fb02 0101 	mla	r1, r2, r1, r0
   84e36:	b29b      	uxth	r3, r3
   84e38:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   84e3c:	4576      	cmp	r6, lr
   84e3e:	f847 3b04 	str.w	r3, [r7], #4
   84e42:	ea4f 4311 	mov.w	r3, r1, lsr #16
   84e46:	dcec      	bgt.n	84e22 <__multadd+0x12>
   84e48:	b13b      	cbz	r3, 84e5a <__multadd+0x4a>
   84e4a:	68a2      	ldr	r2, [r4, #8]
   84e4c:	4296      	cmp	r6, r2
   84e4e:	da07      	bge.n	84e60 <__multadd+0x50>
   84e50:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   84e54:	3601      	adds	r6, #1
   84e56:	6153      	str	r3, [r2, #20]
   84e58:	6126      	str	r6, [r4, #16]
   84e5a:	4620      	mov	r0, r4
   84e5c:	b003      	add	sp, #12
   84e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84e60:	6861      	ldr	r1, [r4, #4]
   84e62:	4628      	mov	r0, r5
   84e64:	3101      	adds	r1, #1
   84e66:	9301      	str	r3, [sp, #4]
   84e68:	f7ff ffa2 	bl	84db0 <_Balloc>
   84e6c:	4607      	mov	r7, r0
   84e6e:	6922      	ldr	r2, [r4, #16]
   84e70:	f104 010c 	add.w	r1, r4, #12
   84e74:	3202      	adds	r2, #2
   84e76:	0092      	lsls	r2, r2, #2
   84e78:	300c      	adds	r0, #12
   84e7a:	f7fd f8c9 	bl	82010 <memcpy>
   84e7e:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   84e80:	6861      	ldr	r1, [r4, #4]
   84e82:	9b01      	ldr	r3, [sp, #4]
   84e84:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   84e88:	6020      	str	r0, [r4, #0]
   84e8a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   84e8e:	463c      	mov	r4, r7
   84e90:	e7de      	b.n	84e50 <__multadd+0x40>
   84e92:	bf00      	nop

00084e94 <__hi0bits>:
   84e94:	0c02      	lsrs	r2, r0, #16
   84e96:	0412      	lsls	r2, r2, #16
   84e98:	4603      	mov	r3, r0
   84e9a:	b9b2      	cbnz	r2, 84eca <__hi0bits+0x36>
   84e9c:	0403      	lsls	r3, r0, #16
   84e9e:	2010      	movs	r0, #16
   84ea0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   84ea4:	bf04      	itt	eq
   84ea6:	021b      	lsleq	r3, r3, #8
   84ea8:	3008      	addeq	r0, #8
   84eaa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   84eae:	bf04      	itt	eq
   84eb0:	011b      	lsleq	r3, r3, #4
   84eb2:	3004      	addeq	r0, #4
   84eb4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   84eb8:	bf04      	itt	eq
   84eba:	009b      	lsleq	r3, r3, #2
   84ebc:	3002      	addeq	r0, #2
   84ebe:	2b00      	cmp	r3, #0
   84ec0:	db02      	blt.n	84ec8 <__hi0bits+0x34>
   84ec2:	005b      	lsls	r3, r3, #1
   84ec4:	d403      	bmi.n	84ece <__hi0bits+0x3a>
   84ec6:	2020      	movs	r0, #32
   84ec8:	4770      	bx	lr
   84eca:	2000      	movs	r0, #0
   84ecc:	e7e8      	b.n	84ea0 <__hi0bits+0xc>
   84ece:	3001      	adds	r0, #1
   84ed0:	4770      	bx	lr
   84ed2:	bf00      	nop

00084ed4 <__lo0bits>:
   84ed4:	6803      	ldr	r3, [r0, #0]
   84ed6:	4601      	mov	r1, r0
   84ed8:	f013 0207 	ands.w	r2, r3, #7
   84edc:	d007      	beq.n	84eee <__lo0bits+0x1a>
   84ede:	07da      	lsls	r2, r3, #31
   84ee0:	d421      	bmi.n	84f26 <__lo0bits+0x52>
   84ee2:	0798      	lsls	r0, r3, #30
   84ee4:	d421      	bmi.n	84f2a <__lo0bits+0x56>
   84ee6:	089b      	lsrs	r3, r3, #2
   84ee8:	600b      	str	r3, [r1, #0]
   84eea:	2002      	movs	r0, #2
   84eec:	4770      	bx	lr
   84eee:	b298      	uxth	r0, r3
   84ef0:	b198      	cbz	r0, 84f1a <__lo0bits+0x46>
   84ef2:	4610      	mov	r0, r2
   84ef4:	f013 0fff 	tst.w	r3, #255	; 0xff
   84ef8:	bf04      	itt	eq
   84efa:	0a1b      	lsreq	r3, r3, #8
   84efc:	3008      	addeq	r0, #8
   84efe:	071a      	lsls	r2, r3, #28
   84f00:	bf04      	itt	eq
   84f02:	091b      	lsreq	r3, r3, #4
   84f04:	3004      	addeq	r0, #4
   84f06:	079a      	lsls	r2, r3, #30
   84f08:	bf04      	itt	eq
   84f0a:	089b      	lsreq	r3, r3, #2
   84f0c:	3002      	addeq	r0, #2
   84f0e:	07da      	lsls	r2, r3, #31
   84f10:	d407      	bmi.n	84f22 <__lo0bits+0x4e>
   84f12:	085b      	lsrs	r3, r3, #1
   84f14:	d104      	bne.n	84f20 <__lo0bits+0x4c>
   84f16:	2020      	movs	r0, #32
   84f18:	4770      	bx	lr
   84f1a:	0c1b      	lsrs	r3, r3, #16
   84f1c:	2010      	movs	r0, #16
   84f1e:	e7e9      	b.n	84ef4 <__lo0bits+0x20>
   84f20:	3001      	adds	r0, #1
   84f22:	600b      	str	r3, [r1, #0]
   84f24:	4770      	bx	lr
   84f26:	2000      	movs	r0, #0
   84f28:	4770      	bx	lr
   84f2a:	085b      	lsrs	r3, r3, #1
   84f2c:	600b      	str	r3, [r1, #0]
   84f2e:	2001      	movs	r0, #1
   84f30:	4770      	bx	lr
   84f32:	bf00      	nop

00084f34 <__i2b>:
   84f34:	b510      	push	{r4, lr}
   84f36:	460c      	mov	r4, r1
   84f38:	2101      	movs	r1, #1
   84f3a:	f7ff ff39 	bl	84db0 <_Balloc>
   84f3e:	2201      	movs	r2, #1
   84f40:	6144      	str	r4, [r0, #20]
   84f42:	6102      	str	r2, [r0, #16]
   84f44:	bd10      	pop	{r4, pc}
   84f46:	bf00      	nop

00084f48 <__multiply>:
   84f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84f4c:	690c      	ldr	r4, [r1, #16]
   84f4e:	6915      	ldr	r5, [r2, #16]
   84f50:	b083      	sub	sp, #12
   84f52:	42ac      	cmp	r4, r5
   84f54:	468b      	mov	fp, r1
   84f56:	4616      	mov	r6, r2
   84f58:	da04      	bge.n	84f64 <__multiply+0x1c>
   84f5a:	4622      	mov	r2, r4
   84f5c:	46b3      	mov	fp, r6
   84f5e:	462c      	mov	r4, r5
   84f60:	460e      	mov	r6, r1
   84f62:	4615      	mov	r5, r2
   84f64:	f8db 3008 	ldr.w	r3, [fp, #8]
   84f68:	eb04 0805 	add.w	r8, r4, r5
   84f6c:	f8db 1004 	ldr.w	r1, [fp, #4]
   84f70:	4598      	cmp	r8, r3
   84f72:	bfc8      	it	gt
   84f74:	3101      	addgt	r1, #1
   84f76:	f7ff ff1b 	bl	84db0 <_Balloc>
   84f7a:	f100 0914 	add.w	r9, r0, #20
   84f7e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   84f82:	45d1      	cmp	r9, sl
   84f84:	9000      	str	r0, [sp, #0]
   84f86:	d205      	bcs.n	84f94 <__multiply+0x4c>
   84f88:	464b      	mov	r3, r9
   84f8a:	2100      	movs	r1, #0
   84f8c:	f843 1b04 	str.w	r1, [r3], #4
   84f90:	459a      	cmp	sl, r3
   84f92:	d8fb      	bhi.n	84f8c <__multiply+0x44>
   84f94:	f106 0c14 	add.w	ip, r6, #20
   84f98:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   84f9c:	f10b 0b14 	add.w	fp, fp, #20
   84fa0:	459c      	cmp	ip, r3
   84fa2:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   84fa6:	d24b      	bcs.n	85040 <__multiply+0xf8>
   84fa8:	f8cd a004 	str.w	sl, [sp, #4]
   84fac:	469a      	mov	sl, r3
   84fae:	f8dc 5000 	ldr.w	r5, [ip]
   84fb2:	b2af      	uxth	r7, r5
   84fb4:	b1e7      	cbz	r7, 84ff0 <__multiply+0xa8>
   84fb6:	464d      	mov	r5, r9
   84fb8:	465e      	mov	r6, fp
   84fba:	2100      	movs	r1, #0
   84fbc:	f856 2b04 	ldr.w	r2, [r6], #4
   84fc0:	6828      	ldr	r0, [r5, #0]
   84fc2:	b293      	uxth	r3, r2
   84fc4:	b284      	uxth	r4, r0
   84fc6:	0c12      	lsrs	r2, r2, #16
   84fc8:	fb07 4303 	mla	r3, r7, r3, r4
   84fcc:	0c00      	lsrs	r0, r0, #16
   84fce:	fb07 0202 	mla	r2, r7, r2, r0
   84fd2:	440b      	add	r3, r1
   84fd4:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   84fd8:	b29b      	uxth	r3, r3
   84fda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   84fde:	45b6      	cmp	lr, r6
   84fe0:	f845 3b04 	str.w	r3, [r5], #4
   84fe4:	ea4f 4111 	mov.w	r1, r1, lsr #16
   84fe8:	d8e8      	bhi.n	84fbc <__multiply+0x74>
   84fea:	6029      	str	r1, [r5, #0]
   84fec:	f8dc 5000 	ldr.w	r5, [ip]
   84ff0:	0c2d      	lsrs	r5, r5, #16
   84ff2:	d01d      	beq.n	85030 <__multiply+0xe8>
   84ff4:	f8d9 3000 	ldr.w	r3, [r9]
   84ff8:	4648      	mov	r0, r9
   84ffa:	461c      	mov	r4, r3
   84ffc:	4659      	mov	r1, fp
   84ffe:	2200      	movs	r2, #0
   85000:	880e      	ldrh	r6, [r1, #0]
   85002:	0c24      	lsrs	r4, r4, #16
   85004:	fb05 4406 	mla	r4, r5, r6, r4
   85008:	b29b      	uxth	r3, r3
   8500a:	4422      	add	r2, r4
   8500c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   85010:	f840 3b04 	str.w	r3, [r0], #4
   85014:	f851 3b04 	ldr.w	r3, [r1], #4
   85018:	6804      	ldr	r4, [r0, #0]
   8501a:	0c1b      	lsrs	r3, r3, #16
   8501c:	b2a6      	uxth	r6, r4
   8501e:	fb05 6303 	mla	r3, r5, r3, r6
   85022:	458e      	cmp	lr, r1
   85024:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   85028:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8502c:	d8e8      	bhi.n	85000 <__multiply+0xb8>
   8502e:	6003      	str	r3, [r0, #0]
   85030:	f10c 0c04 	add.w	ip, ip, #4
   85034:	45e2      	cmp	sl, ip
   85036:	f109 0904 	add.w	r9, r9, #4
   8503a:	d8b8      	bhi.n	84fae <__multiply+0x66>
   8503c:	f8dd a004 	ldr.w	sl, [sp, #4]
   85040:	f1b8 0f00 	cmp.w	r8, #0
   85044:	dd0b      	ble.n	8505e <__multiply+0x116>
   85046:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   8504a:	f1aa 0a04 	sub.w	sl, sl, #4
   8504e:	b11b      	cbz	r3, 85058 <__multiply+0x110>
   85050:	e005      	b.n	8505e <__multiply+0x116>
   85052:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   85056:	b913      	cbnz	r3, 8505e <__multiply+0x116>
   85058:	f1b8 0801 	subs.w	r8, r8, #1
   8505c:	d1f9      	bne.n	85052 <__multiply+0x10a>
   8505e:	9800      	ldr	r0, [sp, #0]
   85060:	f8c0 8010 	str.w	r8, [r0, #16]
   85064:	b003      	add	sp, #12
   85066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8506a:	bf00      	nop

0008506c <__pow5mult>:
   8506c:	f012 0303 	ands.w	r3, r2, #3
   85070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85074:	4614      	mov	r4, r2
   85076:	4607      	mov	r7, r0
   85078:	d12e      	bne.n	850d8 <__pow5mult+0x6c>
   8507a:	460d      	mov	r5, r1
   8507c:	10a4      	asrs	r4, r4, #2
   8507e:	d01c      	beq.n	850ba <__pow5mult+0x4e>
   85080:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   85082:	b396      	cbz	r6, 850ea <__pow5mult+0x7e>
   85084:	07e3      	lsls	r3, r4, #31
   85086:	f04f 0800 	mov.w	r8, #0
   8508a:	d406      	bmi.n	8509a <__pow5mult+0x2e>
   8508c:	1064      	asrs	r4, r4, #1
   8508e:	d014      	beq.n	850ba <__pow5mult+0x4e>
   85090:	6830      	ldr	r0, [r6, #0]
   85092:	b1a8      	cbz	r0, 850c0 <__pow5mult+0x54>
   85094:	4606      	mov	r6, r0
   85096:	07e3      	lsls	r3, r4, #31
   85098:	d5f8      	bpl.n	8508c <__pow5mult+0x20>
   8509a:	4632      	mov	r2, r6
   8509c:	4629      	mov	r1, r5
   8509e:	4638      	mov	r0, r7
   850a0:	f7ff ff52 	bl	84f48 <__multiply>
   850a4:	b1b5      	cbz	r5, 850d4 <__pow5mult+0x68>
   850a6:	686a      	ldr	r2, [r5, #4]
   850a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   850aa:	1064      	asrs	r4, r4, #1
   850ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   850b0:	6029      	str	r1, [r5, #0]
   850b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   850b6:	4605      	mov	r5, r0
   850b8:	d1ea      	bne.n	85090 <__pow5mult+0x24>
   850ba:	4628      	mov	r0, r5
   850bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   850c0:	4632      	mov	r2, r6
   850c2:	4631      	mov	r1, r6
   850c4:	4638      	mov	r0, r7
   850c6:	f7ff ff3f 	bl	84f48 <__multiply>
   850ca:	6030      	str	r0, [r6, #0]
   850cc:	f8c0 8000 	str.w	r8, [r0]
   850d0:	4606      	mov	r6, r0
   850d2:	e7e0      	b.n	85096 <__pow5mult+0x2a>
   850d4:	4605      	mov	r5, r0
   850d6:	e7d9      	b.n	8508c <__pow5mult+0x20>
   850d8:	4a0b      	ldr	r2, [pc, #44]	; (85108 <__pow5mult+0x9c>)
   850da:	3b01      	subs	r3, #1
   850dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   850e0:	2300      	movs	r3, #0
   850e2:	f7ff fe95 	bl	84e10 <__multadd>
   850e6:	4605      	mov	r5, r0
   850e8:	e7c8      	b.n	8507c <__pow5mult+0x10>
   850ea:	2101      	movs	r1, #1
   850ec:	4638      	mov	r0, r7
   850ee:	f7ff fe5f 	bl	84db0 <_Balloc>
   850f2:	f240 2171 	movw	r1, #625	; 0x271
   850f6:	2201      	movs	r2, #1
   850f8:	2300      	movs	r3, #0
   850fa:	6141      	str	r1, [r0, #20]
   850fc:	6102      	str	r2, [r0, #16]
   850fe:	4606      	mov	r6, r0
   85100:	64b8      	str	r0, [r7, #72]	; 0x48
   85102:	6003      	str	r3, [r0, #0]
   85104:	e7be      	b.n	85084 <__pow5mult+0x18>
   85106:	bf00      	nop
   85108:	00086c28 	.word	0x00086c28

0008510c <__lshift>:
   8510c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85110:	690b      	ldr	r3, [r1, #16]
   85112:	1154      	asrs	r4, r2, #5
   85114:	eb04 0803 	add.w	r8, r4, r3
   85118:	688b      	ldr	r3, [r1, #8]
   8511a:	f108 0501 	add.w	r5, r8, #1
   8511e:	429d      	cmp	r5, r3
   85120:	460e      	mov	r6, r1
   85122:	4691      	mov	r9, r2
   85124:	4607      	mov	r7, r0
   85126:	6849      	ldr	r1, [r1, #4]
   85128:	dd04      	ble.n	85134 <__lshift+0x28>
   8512a:	005b      	lsls	r3, r3, #1
   8512c:	429d      	cmp	r5, r3
   8512e:	f101 0101 	add.w	r1, r1, #1
   85132:	dcfa      	bgt.n	8512a <__lshift+0x1e>
   85134:	4638      	mov	r0, r7
   85136:	f7ff fe3b 	bl	84db0 <_Balloc>
   8513a:	2c00      	cmp	r4, #0
   8513c:	f100 0314 	add.w	r3, r0, #20
   85140:	dd06      	ble.n	85150 <__lshift+0x44>
   85142:	2100      	movs	r1, #0
   85144:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   85148:	f843 1b04 	str.w	r1, [r3], #4
   8514c:	429a      	cmp	r2, r3
   8514e:	d1fb      	bne.n	85148 <__lshift+0x3c>
   85150:	6934      	ldr	r4, [r6, #16]
   85152:	f106 0114 	add.w	r1, r6, #20
   85156:	f019 091f 	ands.w	r9, r9, #31
   8515a:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   8515e:	d01d      	beq.n	8519c <__lshift+0x90>
   85160:	2200      	movs	r2, #0
   85162:	f1c9 0c20 	rsb	ip, r9, #32
   85166:	680c      	ldr	r4, [r1, #0]
   85168:	fa04 f409 	lsl.w	r4, r4, r9
   8516c:	4314      	orrs	r4, r2
   8516e:	f843 4b04 	str.w	r4, [r3], #4
   85172:	f851 2b04 	ldr.w	r2, [r1], #4
   85176:	458e      	cmp	lr, r1
   85178:	fa22 f20c 	lsr.w	r2, r2, ip
   8517c:	d8f3      	bhi.n	85166 <__lshift+0x5a>
   8517e:	601a      	str	r2, [r3, #0]
   85180:	b10a      	cbz	r2, 85186 <__lshift+0x7a>
   85182:	f108 0502 	add.w	r5, r8, #2
   85186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   85188:	6872      	ldr	r2, [r6, #4]
   8518a:	3d01      	subs	r5, #1
   8518c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   85190:	6105      	str	r5, [r0, #16]
   85192:	6031      	str	r1, [r6, #0]
   85194:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   85198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8519c:	3b04      	subs	r3, #4
   8519e:	f851 2b04 	ldr.w	r2, [r1], #4
   851a2:	458e      	cmp	lr, r1
   851a4:	f843 2f04 	str.w	r2, [r3, #4]!
   851a8:	d8f9      	bhi.n	8519e <__lshift+0x92>
   851aa:	e7ec      	b.n	85186 <__lshift+0x7a>

000851ac <__mcmp>:
   851ac:	b430      	push	{r4, r5}
   851ae:	690b      	ldr	r3, [r1, #16]
   851b0:	4605      	mov	r5, r0
   851b2:	6900      	ldr	r0, [r0, #16]
   851b4:	1ac0      	subs	r0, r0, r3
   851b6:	d10f      	bne.n	851d8 <__mcmp+0x2c>
   851b8:	009b      	lsls	r3, r3, #2
   851ba:	3514      	adds	r5, #20
   851bc:	3114      	adds	r1, #20
   851be:	4419      	add	r1, r3
   851c0:	442b      	add	r3, r5
   851c2:	e001      	b.n	851c8 <__mcmp+0x1c>
   851c4:	429d      	cmp	r5, r3
   851c6:	d207      	bcs.n	851d8 <__mcmp+0x2c>
   851c8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   851cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   851d0:	4294      	cmp	r4, r2
   851d2:	d0f7      	beq.n	851c4 <__mcmp+0x18>
   851d4:	d302      	bcc.n	851dc <__mcmp+0x30>
   851d6:	2001      	movs	r0, #1
   851d8:	bc30      	pop	{r4, r5}
   851da:	4770      	bx	lr
   851dc:	f04f 30ff 	mov.w	r0, #4294967295
   851e0:	e7fa      	b.n	851d8 <__mcmp+0x2c>
   851e2:	bf00      	nop

000851e4 <__mdiff>:
   851e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   851e8:	690c      	ldr	r4, [r1, #16]
   851ea:	4689      	mov	r9, r1
   851ec:	6911      	ldr	r1, [r2, #16]
   851ee:	4692      	mov	sl, r2
   851f0:	1a64      	subs	r4, r4, r1
   851f2:	2c00      	cmp	r4, #0
   851f4:	d117      	bne.n	85226 <__mdiff+0x42>
   851f6:	0089      	lsls	r1, r1, #2
   851f8:	f109 0714 	add.w	r7, r9, #20
   851fc:	f102 0614 	add.w	r6, r2, #20
   85200:	187b      	adds	r3, r7, r1
   85202:	4431      	add	r1, r6
   85204:	e001      	b.n	8520a <__mdiff+0x26>
   85206:	429f      	cmp	r7, r3
   85208:	d265      	bcs.n	852d6 <__mdiff+0xf2>
   8520a:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8520e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   85212:	4295      	cmp	r5, r2
   85214:	d0f7      	beq.n	85206 <__mdiff+0x22>
   85216:	d267      	bcs.n	852e8 <__mdiff+0x104>
   85218:	464b      	mov	r3, r9
   8521a:	46bb      	mov	fp, r7
   8521c:	46d1      	mov	r9, sl
   8521e:	4637      	mov	r7, r6
   85220:	469a      	mov	sl, r3
   85222:	2401      	movs	r4, #1
   85224:	e005      	b.n	85232 <__mdiff+0x4e>
   85226:	db61      	blt.n	852ec <__mdiff+0x108>
   85228:	2400      	movs	r4, #0
   8522a:	f109 0714 	add.w	r7, r9, #20
   8522e:	f10a 0b14 	add.w	fp, sl, #20
   85232:	f8d9 1004 	ldr.w	r1, [r9, #4]
   85236:	f7ff fdbb 	bl	84db0 <_Balloc>
   8523a:	465d      	mov	r5, fp
   8523c:	f04f 0800 	mov.w	r8, #0
   85240:	f8d9 e010 	ldr.w	lr, [r9, #16]
   85244:	f8da 3010 	ldr.w	r3, [sl, #16]
   85248:	463e      	mov	r6, r7
   8524a:	60c4      	str	r4, [r0, #12]
   8524c:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   85250:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   85254:	f100 0414 	add.w	r4, r0, #20
   85258:	f856 9b04 	ldr.w	r9, [r6], #4
   8525c:	f855 2b04 	ldr.w	r2, [r5], #4
   85260:	fa1f f389 	uxth.w	r3, r9
   85264:	4443      	add	r3, r8
   85266:	fa1f f882 	uxth.w	r8, r2
   8526a:	0c12      	lsrs	r2, r2, #16
   8526c:	eba3 0308 	sub.w	r3, r3, r8
   85270:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   85274:	eb02 4223 	add.w	r2, r2, r3, asr #16
   85278:	b29b      	uxth	r3, r3
   8527a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8527e:	45ac      	cmp	ip, r5
   85280:	f844 3b04 	str.w	r3, [r4], #4
   85284:	ea4f 4822 	mov.w	r8, r2, asr #16
   85288:	d8e6      	bhi.n	85258 <__mdiff+0x74>
   8528a:	42b7      	cmp	r7, r6
   8528c:	d917      	bls.n	852be <__mdiff+0xda>
   8528e:	46a4      	mov	ip, r4
   85290:	4635      	mov	r5, r6
   85292:	f855 3b04 	ldr.w	r3, [r5], #4
   85296:	b299      	uxth	r1, r3
   85298:	4441      	add	r1, r8
   8529a:	140a      	asrs	r2, r1, #16
   8529c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   852a0:	b289      	uxth	r1, r1
   852a2:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   852a6:	42af      	cmp	r7, r5
   852a8:	f84c 3b04 	str.w	r3, [ip], #4
   852ac:	ea4f 4822 	mov.w	r8, r2, asr #16
   852b0:	d8ef      	bhi.n	85292 <__mdiff+0xae>
   852b2:	43f6      	mvns	r6, r6
   852b4:	4437      	add	r7, r6
   852b6:	f027 0703 	bic.w	r7, r7, #3
   852ba:	3704      	adds	r7, #4
   852bc:	443c      	add	r4, r7
   852be:	3c04      	subs	r4, #4
   852c0:	b92b      	cbnz	r3, 852ce <__mdiff+0xea>
   852c2:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   852c6:	f10e 3eff 	add.w	lr, lr, #4294967295
   852ca:	2b00      	cmp	r3, #0
   852cc:	d0f9      	beq.n	852c2 <__mdiff+0xde>
   852ce:	f8c0 e010 	str.w	lr, [r0, #16]
   852d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   852d6:	2100      	movs	r1, #0
   852d8:	f7ff fd6a 	bl	84db0 <_Balloc>
   852dc:	2201      	movs	r2, #1
   852de:	2300      	movs	r3, #0
   852e0:	6102      	str	r2, [r0, #16]
   852e2:	6143      	str	r3, [r0, #20]
   852e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   852e8:	46b3      	mov	fp, r6
   852ea:	e7a2      	b.n	85232 <__mdiff+0x4e>
   852ec:	464b      	mov	r3, r9
   852ee:	f109 0b14 	add.w	fp, r9, #20
   852f2:	f102 0714 	add.w	r7, r2, #20
   852f6:	4691      	mov	r9, r2
   852f8:	2401      	movs	r4, #1
   852fa:	469a      	mov	sl, r3
   852fc:	e799      	b.n	85232 <__mdiff+0x4e>
   852fe:	bf00      	nop

00085300 <__d2b>:
   85300:	b5f0      	push	{r4, r5, r6, r7, lr}
   85302:	2101      	movs	r1, #1
   85304:	b083      	sub	sp, #12
   85306:	461c      	mov	r4, r3
   85308:	f3c3 550a 	ubfx	r5, r3, #20, #11
   8530c:	4616      	mov	r6, r2
   8530e:	f7ff fd4f 	bl	84db0 <_Balloc>
   85312:	f3c4 0413 	ubfx	r4, r4, #0, #20
   85316:	4607      	mov	r7, r0
   85318:	b10d      	cbz	r5, 8531e <__d2b+0x1e>
   8531a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8531e:	9401      	str	r4, [sp, #4]
   85320:	b306      	cbz	r6, 85364 <__d2b+0x64>
   85322:	a802      	add	r0, sp, #8
   85324:	f840 6d08 	str.w	r6, [r0, #-8]!
   85328:	f7ff fdd4 	bl	84ed4 <__lo0bits>
   8532c:	2800      	cmp	r0, #0
   8532e:	d130      	bne.n	85392 <__d2b+0x92>
   85330:	e89d 000c 	ldmia.w	sp, {r2, r3}
   85334:	617a      	str	r2, [r7, #20]
   85336:	2b00      	cmp	r3, #0
   85338:	bf0c      	ite	eq
   8533a:	2101      	moveq	r1, #1
   8533c:	2102      	movne	r1, #2
   8533e:	61bb      	str	r3, [r7, #24]
   85340:	6139      	str	r1, [r7, #16]
   85342:	b9d5      	cbnz	r5, 8537a <__d2b+0x7a>
   85344:	9a08      	ldr	r2, [sp, #32]
   85346:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   8534a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8534e:	6010      	str	r0, [r2, #0]
   85350:	6918      	ldr	r0, [r3, #16]
   85352:	f7ff fd9f 	bl	84e94 <__hi0bits>
   85356:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85358:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   8535c:	6018      	str	r0, [r3, #0]
   8535e:	4638      	mov	r0, r7
   85360:	b003      	add	sp, #12
   85362:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85364:	a801      	add	r0, sp, #4
   85366:	f7ff fdb5 	bl	84ed4 <__lo0bits>
   8536a:	2201      	movs	r2, #1
   8536c:	9b01      	ldr	r3, [sp, #4]
   8536e:	4611      	mov	r1, r2
   85370:	3020      	adds	r0, #32
   85372:	613a      	str	r2, [r7, #16]
   85374:	617b      	str	r3, [r7, #20]
   85376:	2d00      	cmp	r5, #0
   85378:	d0e4      	beq.n	85344 <__d2b+0x44>
   8537a:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8537e:	9a08      	ldr	r2, [sp, #32]
   85380:	4403      	add	r3, r0
   85382:	6013      	str	r3, [r2, #0]
   85384:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85386:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8538a:	6018      	str	r0, [r3, #0]
   8538c:	4638      	mov	r0, r7
   8538e:	b003      	add	sp, #12
   85390:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85392:	9b01      	ldr	r3, [sp, #4]
   85394:	f1c0 0220 	rsb	r2, r0, #32
   85398:	9900      	ldr	r1, [sp, #0]
   8539a:	fa03 f202 	lsl.w	r2, r3, r2
   8539e:	430a      	orrs	r2, r1
   853a0:	40c3      	lsrs	r3, r0
   853a2:	9301      	str	r3, [sp, #4]
   853a4:	617a      	str	r2, [r7, #20]
   853a6:	e7c6      	b.n	85336 <__d2b+0x36>

000853a8 <_sbrk_r>:
   853a8:	b538      	push	{r3, r4, r5, lr}
   853aa:	2300      	movs	r3, #0
   853ac:	4c06      	ldr	r4, [pc, #24]	; (853c8 <_sbrk_r+0x20>)
   853ae:	4605      	mov	r5, r0
   853b0:	4608      	mov	r0, r1
   853b2:	6023      	str	r3, [r4, #0]
   853b4:	f7fc fde8 	bl	81f88 <_sbrk>
   853b8:	1c43      	adds	r3, r0, #1
   853ba:	d000      	beq.n	853be <_sbrk_r+0x16>
   853bc:	bd38      	pop	{r3, r4, r5, pc}
   853be:	6823      	ldr	r3, [r4, #0]
   853c0:	2b00      	cmp	r3, #0
   853c2:	d0fb      	beq.n	853bc <_sbrk_r+0x14>
   853c4:	602b      	str	r3, [r5, #0]
   853c6:	bd38      	pop	{r3, r4, r5, pc}
   853c8:	20001658 	.word	0x20001658

000853cc <__ssprint_r>:
   853cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   853d0:	6893      	ldr	r3, [r2, #8]
   853d2:	b083      	sub	sp, #12
   853d4:	4690      	mov	r8, r2
   853d6:	2b00      	cmp	r3, #0
   853d8:	d070      	beq.n	854bc <__ssprint_r+0xf0>
   853da:	4682      	mov	sl, r0
   853dc:	460c      	mov	r4, r1
   853de:	6817      	ldr	r7, [r2, #0]
   853e0:	688d      	ldr	r5, [r1, #8]
   853e2:	6808      	ldr	r0, [r1, #0]
   853e4:	e042      	b.n	8546c <__ssprint_r+0xa0>
   853e6:	89a3      	ldrh	r3, [r4, #12]
   853e8:	f413 6f90 	tst.w	r3, #1152	; 0x480
   853ec:	d02e      	beq.n	8544c <__ssprint_r+0x80>
   853ee:	6965      	ldr	r5, [r4, #20]
   853f0:	6921      	ldr	r1, [r4, #16]
   853f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   853f6:	eba0 0b01 	sub.w	fp, r0, r1
   853fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   853fe:	f10b 0001 	add.w	r0, fp, #1
   85402:	106d      	asrs	r5, r5, #1
   85404:	4430      	add	r0, r6
   85406:	42a8      	cmp	r0, r5
   85408:	462a      	mov	r2, r5
   8540a:	bf84      	itt	hi
   8540c:	4605      	movhi	r5, r0
   8540e:	462a      	movhi	r2, r5
   85410:	055b      	lsls	r3, r3, #21
   85412:	d538      	bpl.n	85486 <__ssprint_r+0xba>
   85414:	4611      	mov	r1, r2
   85416:	4650      	mov	r0, sl
   85418:	f7ff f9c0 	bl	8479c <_malloc_r>
   8541c:	2800      	cmp	r0, #0
   8541e:	d03c      	beq.n	8549a <__ssprint_r+0xce>
   85420:	465a      	mov	r2, fp
   85422:	6921      	ldr	r1, [r4, #16]
   85424:	9001      	str	r0, [sp, #4]
   85426:	f7fc fdf3 	bl	82010 <memcpy>
   8542a:	89a2      	ldrh	r2, [r4, #12]
   8542c:	9b01      	ldr	r3, [sp, #4]
   8542e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   85432:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   85436:	81a2      	strh	r2, [r4, #12]
   85438:	eba5 020b 	sub.w	r2, r5, fp
   8543c:	eb03 000b 	add.w	r0, r3, fp
   85440:	6165      	str	r5, [r4, #20]
   85442:	46b3      	mov	fp, r6
   85444:	4635      	mov	r5, r6
   85446:	6123      	str	r3, [r4, #16]
   85448:	6020      	str	r0, [r4, #0]
   8544a:	60a2      	str	r2, [r4, #8]
   8544c:	465a      	mov	r2, fp
   8544e:	4649      	mov	r1, r9
   85450:	f000 fa0e 	bl	85870 <memmove>
   85454:	f8d8 3008 	ldr.w	r3, [r8, #8]
   85458:	68a2      	ldr	r2, [r4, #8]
   8545a:	6820      	ldr	r0, [r4, #0]
   8545c:	1b55      	subs	r5, r2, r5
   8545e:	4458      	add	r0, fp
   85460:	1b9e      	subs	r6, r3, r6
   85462:	60a5      	str	r5, [r4, #8]
   85464:	6020      	str	r0, [r4, #0]
   85466:	f8c8 6008 	str.w	r6, [r8, #8]
   8546a:	b33e      	cbz	r6, 854bc <__ssprint_r+0xf0>
   8546c:	687e      	ldr	r6, [r7, #4]
   8546e:	463b      	mov	r3, r7
   85470:	3708      	adds	r7, #8
   85472:	2e00      	cmp	r6, #0
   85474:	d0fa      	beq.n	8546c <__ssprint_r+0xa0>
   85476:	42ae      	cmp	r6, r5
   85478:	f8d3 9000 	ldr.w	r9, [r3]
   8547c:	46ab      	mov	fp, r5
   8547e:	d2b2      	bcs.n	853e6 <__ssprint_r+0x1a>
   85480:	4635      	mov	r5, r6
   85482:	46b3      	mov	fp, r6
   85484:	e7e2      	b.n	8544c <__ssprint_r+0x80>
   85486:	4650      	mov	r0, sl
   85488:	f000 fa56 	bl	85938 <_realloc_r>
   8548c:	4603      	mov	r3, r0
   8548e:	2800      	cmp	r0, #0
   85490:	d1d2      	bne.n	85438 <__ssprint_r+0x6c>
   85492:	6921      	ldr	r1, [r4, #16]
   85494:	4650      	mov	r0, sl
   85496:	f000 f905 	bl	856a4 <_free_r>
   8549a:	230c      	movs	r3, #12
   8549c:	2200      	movs	r2, #0
   8549e:	f04f 30ff 	mov.w	r0, #4294967295
   854a2:	f8ca 3000 	str.w	r3, [sl]
   854a6:	89a3      	ldrh	r3, [r4, #12]
   854a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   854ac:	81a3      	strh	r3, [r4, #12]
   854ae:	f8c8 2008 	str.w	r2, [r8, #8]
   854b2:	f8c8 2004 	str.w	r2, [r8, #4]
   854b6:	b003      	add	sp, #12
   854b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   854bc:	2000      	movs	r0, #0
   854be:	f8c8 0004 	str.w	r0, [r8, #4]
   854c2:	b003      	add	sp, #12
   854c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000854c8 <__ascii_wctomb>:
   854c8:	b119      	cbz	r1, 854d2 <__ascii_wctomb+0xa>
   854ca:	2aff      	cmp	r2, #255	; 0xff
   854cc:	d803      	bhi.n	854d6 <__ascii_wctomb+0xe>
   854ce:	700a      	strb	r2, [r1, #0]
   854d0:	2101      	movs	r1, #1
   854d2:	4608      	mov	r0, r1
   854d4:	4770      	bx	lr
   854d6:	238a      	movs	r3, #138	; 0x8a
   854d8:	f04f 31ff 	mov.w	r1, #4294967295
   854dc:	6003      	str	r3, [r0, #0]
   854de:	e7f8      	b.n	854d2 <__ascii_wctomb+0xa>

000854e0 <__register_exitproc>:
   854e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   854e4:	4d2c      	ldr	r5, [pc, #176]	; (85598 <__register_exitproc+0xb8>)
   854e6:	4606      	mov	r6, r0
   854e8:	6828      	ldr	r0, [r5, #0]
   854ea:	4698      	mov	r8, r3
   854ec:	460f      	mov	r7, r1
   854ee:	4691      	mov	r9, r2
   854f0:	f7ff f950 	bl	84794 <__retarget_lock_acquire_recursive>
   854f4:	4b29      	ldr	r3, [pc, #164]	; (8559c <__register_exitproc+0xbc>)
   854f6:	681c      	ldr	r4, [r3, #0]
   854f8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   854fc:	2b00      	cmp	r3, #0
   854fe:	d03e      	beq.n	8557e <__register_exitproc+0x9e>
   85500:	685a      	ldr	r2, [r3, #4]
   85502:	2a1f      	cmp	r2, #31
   85504:	dc1c      	bgt.n	85540 <__register_exitproc+0x60>
   85506:	f102 0e01 	add.w	lr, r2, #1
   8550a:	b176      	cbz	r6, 8552a <__register_exitproc+0x4a>
   8550c:	2101      	movs	r1, #1
   8550e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   85512:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   85516:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8551a:	4091      	lsls	r1, r2
   8551c:	4308      	orrs	r0, r1
   8551e:	2e02      	cmp	r6, #2
   85520:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85524:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   85528:	d023      	beq.n	85572 <__register_exitproc+0x92>
   8552a:	3202      	adds	r2, #2
   8552c:	f8c3 e004 	str.w	lr, [r3, #4]
   85530:	6828      	ldr	r0, [r5, #0]
   85532:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   85536:	f7ff f92f 	bl	84798 <__retarget_lock_release_recursive>
   8553a:	2000      	movs	r0, #0
   8553c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85540:	4b17      	ldr	r3, [pc, #92]	; (855a0 <__register_exitproc+0xc0>)
   85542:	b30b      	cbz	r3, 85588 <__register_exitproc+0xa8>
   85544:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85548:	f3af 8000 	nop.w
   8554c:	4603      	mov	r3, r0
   8554e:	b1d8      	cbz	r0, 85588 <__register_exitproc+0xa8>
   85550:	2000      	movs	r0, #0
   85552:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   85556:	f04f 0e01 	mov.w	lr, #1
   8555a:	6058      	str	r0, [r3, #4]
   8555c:	6019      	str	r1, [r3, #0]
   8555e:	4602      	mov	r2, r0
   85560:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85564:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85568:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   8556c:	2e00      	cmp	r6, #0
   8556e:	d0dc      	beq.n	8552a <__register_exitproc+0x4a>
   85570:	e7cc      	b.n	8550c <__register_exitproc+0x2c>
   85572:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   85576:	4301      	orrs	r1, r0
   85578:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   8557c:	e7d5      	b.n	8552a <__register_exitproc+0x4a>
   8557e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   85582:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85586:	e7bb      	b.n	85500 <__register_exitproc+0x20>
   85588:	6828      	ldr	r0, [r5, #0]
   8558a:	f7ff f905 	bl	84798 <__retarget_lock_release_recursive>
   8558e:	f04f 30ff 	mov.w	r0, #4294967295
   85592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85596:	bf00      	nop
   85598:	200009b0 	.word	0x200009b0
   8559c:	00086ab0 	.word	0x00086ab0
   855a0:	00000000 	.word	0x00000000

000855a4 <_calloc_r>:
   855a4:	b510      	push	{r4, lr}
   855a6:	fb02 f101 	mul.w	r1, r2, r1
   855aa:	f7ff f8f7 	bl	8479c <_malloc_r>
   855ae:	4604      	mov	r4, r0
   855b0:	b1d8      	cbz	r0, 855ea <_calloc_r+0x46>
   855b2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   855b6:	f022 0203 	bic.w	r2, r2, #3
   855ba:	3a04      	subs	r2, #4
   855bc:	2a24      	cmp	r2, #36	; 0x24
   855be:	d818      	bhi.n	855f2 <_calloc_r+0x4e>
   855c0:	2a13      	cmp	r2, #19
   855c2:	d914      	bls.n	855ee <_calloc_r+0x4a>
   855c4:	2300      	movs	r3, #0
   855c6:	2a1b      	cmp	r2, #27
   855c8:	6003      	str	r3, [r0, #0]
   855ca:	6043      	str	r3, [r0, #4]
   855cc:	d916      	bls.n	855fc <_calloc_r+0x58>
   855ce:	2a24      	cmp	r2, #36	; 0x24
   855d0:	6083      	str	r3, [r0, #8]
   855d2:	60c3      	str	r3, [r0, #12]
   855d4:	bf11      	iteee	ne
   855d6:	f100 0210 	addne.w	r2, r0, #16
   855da:	6103      	streq	r3, [r0, #16]
   855dc:	6143      	streq	r3, [r0, #20]
   855de:	f100 0218 	addeq.w	r2, r0, #24
   855e2:	2300      	movs	r3, #0
   855e4:	6013      	str	r3, [r2, #0]
   855e6:	6053      	str	r3, [r2, #4]
   855e8:	6093      	str	r3, [r2, #8]
   855ea:	4620      	mov	r0, r4
   855ec:	bd10      	pop	{r4, pc}
   855ee:	4602      	mov	r2, r0
   855f0:	e7f7      	b.n	855e2 <_calloc_r+0x3e>
   855f2:	2100      	movs	r1, #0
   855f4:	f7fc fd82 	bl	820fc <memset>
   855f8:	4620      	mov	r0, r4
   855fa:	bd10      	pop	{r4, pc}
   855fc:	f100 0208 	add.w	r2, r0, #8
   85600:	e7ef      	b.n	855e2 <_calloc_r+0x3e>
   85602:	bf00      	nop

00085604 <_malloc_trim_r>:
   85604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85606:	460c      	mov	r4, r1
   85608:	4f23      	ldr	r7, [pc, #140]	; (85698 <_malloc_trim_r+0x94>)
   8560a:	4606      	mov	r6, r0
   8560c:	f7ff fbc4 	bl	84d98 <__malloc_lock>
   85610:	68bb      	ldr	r3, [r7, #8]
   85612:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   85616:	685d      	ldr	r5, [r3, #4]
   85618:	310f      	adds	r1, #15
   8561a:	f025 0503 	bic.w	r5, r5, #3
   8561e:	4429      	add	r1, r5
   85620:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   85624:	f021 010f 	bic.w	r1, r1, #15
   85628:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8562c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   85630:	db07      	blt.n	85642 <_malloc_trim_r+0x3e>
   85632:	2100      	movs	r1, #0
   85634:	4630      	mov	r0, r6
   85636:	f7ff feb7 	bl	853a8 <_sbrk_r>
   8563a:	68bb      	ldr	r3, [r7, #8]
   8563c:	442b      	add	r3, r5
   8563e:	4298      	cmp	r0, r3
   85640:	d004      	beq.n	8564c <_malloc_trim_r+0x48>
   85642:	4630      	mov	r0, r6
   85644:	f7ff fbae 	bl	84da4 <__malloc_unlock>
   85648:	2000      	movs	r0, #0
   8564a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8564c:	4261      	negs	r1, r4
   8564e:	4630      	mov	r0, r6
   85650:	f7ff feaa 	bl	853a8 <_sbrk_r>
   85654:	3001      	adds	r0, #1
   85656:	d00d      	beq.n	85674 <_malloc_trim_r+0x70>
   85658:	4b10      	ldr	r3, [pc, #64]	; (8569c <_malloc_trim_r+0x98>)
   8565a:	68ba      	ldr	r2, [r7, #8]
   8565c:	6819      	ldr	r1, [r3, #0]
   8565e:	1b2d      	subs	r5, r5, r4
   85660:	f045 0501 	orr.w	r5, r5, #1
   85664:	4630      	mov	r0, r6
   85666:	1b09      	subs	r1, r1, r4
   85668:	6055      	str	r5, [r2, #4]
   8566a:	6019      	str	r1, [r3, #0]
   8566c:	f7ff fb9a 	bl	84da4 <__malloc_unlock>
   85670:	2001      	movs	r0, #1
   85672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85674:	2100      	movs	r1, #0
   85676:	4630      	mov	r0, r6
   85678:	f7ff fe96 	bl	853a8 <_sbrk_r>
   8567c:	68ba      	ldr	r2, [r7, #8]
   8567e:	1a83      	subs	r3, r0, r2
   85680:	2b0f      	cmp	r3, #15
   85682:	ddde      	ble.n	85642 <_malloc_trim_r+0x3e>
   85684:	4c06      	ldr	r4, [pc, #24]	; (856a0 <_malloc_trim_r+0x9c>)
   85686:	4905      	ldr	r1, [pc, #20]	; (8569c <_malloc_trim_r+0x98>)
   85688:	6824      	ldr	r4, [r4, #0]
   8568a:	f043 0301 	orr.w	r3, r3, #1
   8568e:	1b00      	subs	r0, r0, r4
   85690:	6053      	str	r3, [r2, #4]
   85692:	6008      	str	r0, [r1, #0]
   85694:	e7d5      	b.n	85642 <_malloc_trim_r+0x3e>
   85696:	bf00      	nop
   85698:	20000b20 	.word	0x20000b20
   8569c:	20001088 	.word	0x20001088
   856a0:	20000f28 	.word	0x20000f28

000856a4 <_free_r>:
   856a4:	2900      	cmp	r1, #0
   856a6:	d044      	beq.n	85732 <_free_r+0x8e>
   856a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   856ac:	460d      	mov	r5, r1
   856ae:	4680      	mov	r8, r0
   856b0:	f7ff fb72 	bl	84d98 <__malloc_lock>
   856b4:	f855 7c04 	ldr.w	r7, [r5, #-4]
   856b8:	4969      	ldr	r1, [pc, #420]	; (85860 <_free_r+0x1bc>)
   856ba:	f1a5 0408 	sub.w	r4, r5, #8
   856be:	f027 0301 	bic.w	r3, r7, #1
   856c2:	18e2      	adds	r2, r4, r3
   856c4:	688e      	ldr	r6, [r1, #8]
   856c6:	6850      	ldr	r0, [r2, #4]
   856c8:	42b2      	cmp	r2, r6
   856ca:	f020 0003 	bic.w	r0, r0, #3
   856ce:	d05e      	beq.n	8578e <_free_r+0xea>
   856d0:	07fe      	lsls	r6, r7, #31
   856d2:	6050      	str	r0, [r2, #4]
   856d4:	d40b      	bmi.n	856ee <_free_r+0x4a>
   856d6:	f855 7c08 	ldr.w	r7, [r5, #-8]
   856da:	f101 0e08 	add.w	lr, r1, #8
   856de:	1be4      	subs	r4, r4, r7
   856e0:	68a5      	ldr	r5, [r4, #8]
   856e2:	443b      	add	r3, r7
   856e4:	4575      	cmp	r5, lr
   856e6:	d06d      	beq.n	857c4 <_free_r+0x120>
   856e8:	68e7      	ldr	r7, [r4, #12]
   856ea:	60ef      	str	r7, [r5, #12]
   856ec:	60bd      	str	r5, [r7, #8]
   856ee:	1815      	adds	r5, r2, r0
   856f0:	686d      	ldr	r5, [r5, #4]
   856f2:	07ed      	lsls	r5, r5, #31
   856f4:	d53e      	bpl.n	85774 <_free_r+0xd0>
   856f6:	f043 0201 	orr.w	r2, r3, #1
   856fa:	6062      	str	r2, [r4, #4]
   856fc:	50e3      	str	r3, [r4, r3]
   856fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85702:	d217      	bcs.n	85734 <_free_r+0x90>
   85704:	2201      	movs	r2, #1
   85706:	08db      	lsrs	r3, r3, #3
   85708:	1098      	asrs	r0, r3, #2
   8570a:	684d      	ldr	r5, [r1, #4]
   8570c:	4413      	add	r3, r2
   8570e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   85712:	4082      	lsls	r2, r0
   85714:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   85718:	432a      	orrs	r2, r5
   8571a:	3808      	subs	r0, #8
   8571c:	60e0      	str	r0, [r4, #12]
   8571e:	60a7      	str	r7, [r4, #8]
   85720:	604a      	str	r2, [r1, #4]
   85722:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85726:	60fc      	str	r4, [r7, #12]
   85728:	4640      	mov	r0, r8
   8572a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8572e:	f7ff bb39 	b.w	84da4 <__malloc_unlock>
   85732:	4770      	bx	lr
   85734:	0a5a      	lsrs	r2, r3, #9
   85736:	2a04      	cmp	r2, #4
   85738:	d852      	bhi.n	857e0 <_free_r+0x13c>
   8573a:	099a      	lsrs	r2, r3, #6
   8573c:	f102 0739 	add.w	r7, r2, #57	; 0x39
   85740:	00ff      	lsls	r7, r7, #3
   85742:	f102 0538 	add.w	r5, r2, #56	; 0x38
   85746:	19c8      	adds	r0, r1, r7
   85748:	59ca      	ldr	r2, [r1, r7]
   8574a:	3808      	subs	r0, #8
   8574c:	4290      	cmp	r0, r2
   8574e:	d04f      	beq.n	857f0 <_free_r+0x14c>
   85750:	6851      	ldr	r1, [r2, #4]
   85752:	f021 0103 	bic.w	r1, r1, #3
   85756:	428b      	cmp	r3, r1
   85758:	d232      	bcs.n	857c0 <_free_r+0x11c>
   8575a:	6892      	ldr	r2, [r2, #8]
   8575c:	4290      	cmp	r0, r2
   8575e:	d1f7      	bne.n	85750 <_free_r+0xac>
   85760:	68c3      	ldr	r3, [r0, #12]
   85762:	60a0      	str	r0, [r4, #8]
   85764:	60e3      	str	r3, [r4, #12]
   85766:	609c      	str	r4, [r3, #8]
   85768:	60c4      	str	r4, [r0, #12]
   8576a:	4640      	mov	r0, r8
   8576c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85770:	f7ff bb18 	b.w	84da4 <__malloc_unlock>
   85774:	6895      	ldr	r5, [r2, #8]
   85776:	4f3b      	ldr	r7, [pc, #236]	; (85864 <_free_r+0x1c0>)
   85778:	4403      	add	r3, r0
   8577a:	42bd      	cmp	r5, r7
   8577c:	d040      	beq.n	85800 <_free_r+0x15c>
   8577e:	68d0      	ldr	r0, [r2, #12]
   85780:	f043 0201 	orr.w	r2, r3, #1
   85784:	60e8      	str	r0, [r5, #12]
   85786:	6085      	str	r5, [r0, #8]
   85788:	6062      	str	r2, [r4, #4]
   8578a:	50e3      	str	r3, [r4, r3]
   8578c:	e7b7      	b.n	856fe <_free_r+0x5a>
   8578e:	07ff      	lsls	r7, r7, #31
   85790:	4403      	add	r3, r0
   85792:	d407      	bmi.n	857a4 <_free_r+0x100>
   85794:	f855 5c08 	ldr.w	r5, [r5, #-8]
   85798:	1b64      	subs	r4, r4, r5
   8579a:	68e2      	ldr	r2, [r4, #12]
   8579c:	68a0      	ldr	r0, [r4, #8]
   8579e:	442b      	add	r3, r5
   857a0:	60c2      	str	r2, [r0, #12]
   857a2:	6090      	str	r0, [r2, #8]
   857a4:	4a30      	ldr	r2, [pc, #192]	; (85868 <_free_r+0x1c4>)
   857a6:	f043 0001 	orr.w	r0, r3, #1
   857aa:	6812      	ldr	r2, [r2, #0]
   857ac:	6060      	str	r0, [r4, #4]
   857ae:	4293      	cmp	r3, r2
   857b0:	608c      	str	r4, [r1, #8]
   857b2:	d3b9      	bcc.n	85728 <_free_r+0x84>
   857b4:	4b2d      	ldr	r3, [pc, #180]	; (8586c <_free_r+0x1c8>)
   857b6:	4640      	mov	r0, r8
   857b8:	6819      	ldr	r1, [r3, #0]
   857ba:	f7ff ff23 	bl	85604 <_malloc_trim_r>
   857be:	e7b3      	b.n	85728 <_free_r+0x84>
   857c0:	4610      	mov	r0, r2
   857c2:	e7cd      	b.n	85760 <_free_r+0xbc>
   857c4:	1811      	adds	r1, r2, r0
   857c6:	6849      	ldr	r1, [r1, #4]
   857c8:	07c9      	lsls	r1, r1, #31
   857ca:	d444      	bmi.n	85856 <_free_r+0x1b2>
   857cc:	6891      	ldr	r1, [r2, #8]
   857ce:	4403      	add	r3, r0
   857d0:	68d2      	ldr	r2, [r2, #12]
   857d2:	f043 0001 	orr.w	r0, r3, #1
   857d6:	60ca      	str	r2, [r1, #12]
   857d8:	6091      	str	r1, [r2, #8]
   857da:	6060      	str	r0, [r4, #4]
   857dc:	50e3      	str	r3, [r4, r3]
   857de:	e7a3      	b.n	85728 <_free_r+0x84>
   857e0:	2a14      	cmp	r2, #20
   857e2:	d816      	bhi.n	85812 <_free_r+0x16e>
   857e4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   857e8:	00ff      	lsls	r7, r7, #3
   857ea:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   857ee:	e7aa      	b.n	85746 <_free_r+0xa2>
   857f0:	2301      	movs	r3, #1
   857f2:	10aa      	asrs	r2, r5, #2
   857f4:	684d      	ldr	r5, [r1, #4]
   857f6:	4093      	lsls	r3, r2
   857f8:	432b      	orrs	r3, r5
   857fa:	604b      	str	r3, [r1, #4]
   857fc:	4603      	mov	r3, r0
   857fe:	e7b0      	b.n	85762 <_free_r+0xbe>
   85800:	f043 0201 	orr.w	r2, r3, #1
   85804:	614c      	str	r4, [r1, #20]
   85806:	610c      	str	r4, [r1, #16]
   85808:	60e5      	str	r5, [r4, #12]
   8580a:	60a5      	str	r5, [r4, #8]
   8580c:	6062      	str	r2, [r4, #4]
   8580e:	50e3      	str	r3, [r4, r3]
   85810:	e78a      	b.n	85728 <_free_r+0x84>
   85812:	2a54      	cmp	r2, #84	; 0x54
   85814:	d806      	bhi.n	85824 <_free_r+0x180>
   85816:	0b1a      	lsrs	r2, r3, #12
   85818:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8581c:	00ff      	lsls	r7, r7, #3
   8581e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   85822:	e790      	b.n	85746 <_free_r+0xa2>
   85824:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85828:	d806      	bhi.n	85838 <_free_r+0x194>
   8582a:	0bda      	lsrs	r2, r3, #15
   8582c:	f102 0778 	add.w	r7, r2, #120	; 0x78
   85830:	00ff      	lsls	r7, r7, #3
   85832:	f102 0577 	add.w	r5, r2, #119	; 0x77
   85836:	e786      	b.n	85746 <_free_r+0xa2>
   85838:	f240 5054 	movw	r0, #1364	; 0x554
   8583c:	4282      	cmp	r2, r0
   8583e:	d806      	bhi.n	8584e <_free_r+0x1aa>
   85840:	0c9a      	lsrs	r2, r3, #18
   85842:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   85846:	00ff      	lsls	r7, r7, #3
   85848:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8584c:	e77b      	b.n	85746 <_free_r+0xa2>
   8584e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   85852:	257e      	movs	r5, #126	; 0x7e
   85854:	e777      	b.n	85746 <_free_r+0xa2>
   85856:	f043 0101 	orr.w	r1, r3, #1
   8585a:	6061      	str	r1, [r4, #4]
   8585c:	6013      	str	r3, [r2, #0]
   8585e:	e763      	b.n	85728 <_free_r+0x84>
   85860:	20000b20 	.word	0x20000b20
   85864:	20000b28 	.word	0x20000b28
   85868:	20000f2c 	.word	0x20000f2c
   8586c:	200010b8 	.word	0x200010b8

00085870 <memmove>:
   85870:	4288      	cmp	r0, r1
   85872:	b5f0      	push	{r4, r5, r6, r7, lr}
   85874:	d90d      	bls.n	85892 <memmove+0x22>
   85876:	188b      	adds	r3, r1, r2
   85878:	4298      	cmp	r0, r3
   8587a:	d20a      	bcs.n	85892 <memmove+0x22>
   8587c:	1884      	adds	r4, r0, r2
   8587e:	2a00      	cmp	r2, #0
   85880:	d051      	beq.n	85926 <memmove+0xb6>
   85882:	4622      	mov	r2, r4
   85884:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85888:	4299      	cmp	r1, r3
   8588a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8588e:	d1f9      	bne.n	85884 <memmove+0x14>
   85890:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85892:	2a0f      	cmp	r2, #15
   85894:	d948      	bls.n	85928 <memmove+0xb8>
   85896:	ea41 0300 	orr.w	r3, r1, r0
   8589a:	079b      	lsls	r3, r3, #30
   8589c:	d146      	bne.n	8592c <memmove+0xbc>
   8589e:	4615      	mov	r5, r2
   858a0:	f100 0410 	add.w	r4, r0, #16
   858a4:	f101 0310 	add.w	r3, r1, #16
   858a8:	f853 6c10 	ldr.w	r6, [r3, #-16]
   858ac:	3d10      	subs	r5, #16
   858ae:	f844 6c10 	str.w	r6, [r4, #-16]
   858b2:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   858b6:	2d0f      	cmp	r5, #15
   858b8:	f844 6c0c 	str.w	r6, [r4, #-12]
   858bc:	f853 6c08 	ldr.w	r6, [r3, #-8]
   858c0:	f104 0410 	add.w	r4, r4, #16
   858c4:	f844 6c18 	str.w	r6, [r4, #-24]
   858c8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   858cc:	f103 0310 	add.w	r3, r3, #16
   858d0:	f844 6c14 	str.w	r6, [r4, #-20]
   858d4:	d8e8      	bhi.n	858a8 <memmove+0x38>
   858d6:	f1a2 0310 	sub.w	r3, r2, #16
   858da:	f023 030f 	bic.w	r3, r3, #15
   858de:	f002 0e0f 	and.w	lr, r2, #15
   858e2:	3310      	adds	r3, #16
   858e4:	f1be 0f03 	cmp.w	lr, #3
   858e8:	4419      	add	r1, r3
   858ea:	4403      	add	r3, r0
   858ec:	d921      	bls.n	85932 <memmove+0xc2>
   858ee:	460e      	mov	r6, r1
   858f0:	4674      	mov	r4, lr
   858f2:	1f1d      	subs	r5, r3, #4
   858f4:	f856 7b04 	ldr.w	r7, [r6], #4
   858f8:	3c04      	subs	r4, #4
   858fa:	2c03      	cmp	r4, #3
   858fc:	f845 7f04 	str.w	r7, [r5, #4]!
   85900:	d8f8      	bhi.n	858f4 <memmove+0x84>
   85902:	f1ae 0404 	sub.w	r4, lr, #4
   85906:	f024 0403 	bic.w	r4, r4, #3
   8590a:	3404      	adds	r4, #4
   8590c:	4421      	add	r1, r4
   8590e:	4423      	add	r3, r4
   85910:	f002 0203 	and.w	r2, r2, #3
   85914:	b162      	cbz	r2, 85930 <memmove+0xc0>
   85916:	3b01      	subs	r3, #1
   85918:	440a      	add	r2, r1
   8591a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8591e:	428a      	cmp	r2, r1
   85920:	f803 4f01 	strb.w	r4, [r3, #1]!
   85924:	d1f9      	bne.n	8591a <memmove+0xaa>
   85926:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85928:	4603      	mov	r3, r0
   8592a:	e7f3      	b.n	85914 <memmove+0xa4>
   8592c:	4603      	mov	r3, r0
   8592e:	e7f2      	b.n	85916 <memmove+0xa6>
   85930:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85932:	4672      	mov	r2, lr
   85934:	e7ee      	b.n	85914 <memmove+0xa4>
   85936:	bf00      	nop

00085938 <_realloc_r>:
   85938:	2900      	cmp	r1, #0
   8593a:	f000 8094 	beq.w	85a66 <_realloc_r+0x12e>
   8593e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85942:	460c      	mov	r4, r1
   85944:	4615      	mov	r5, r2
   85946:	b083      	sub	sp, #12
   85948:	4680      	mov	r8, r0
   8594a:	f105 060b 	add.w	r6, r5, #11
   8594e:	f7ff fa23 	bl	84d98 <__malloc_lock>
   85952:	f854 ec04 	ldr.w	lr, [r4, #-4]
   85956:	2e16      	cmp	r6, #22
   85958:	f02e 0703 	bic.w	r7, lr, #3
   8595c:	f1a4 0908 	sub.w	r9, r4, #8
   85960:	d83c      	bhi.n	859dc <_realloc_r+0xa4>
   85962:	2210      	movs	r2, #16
   85964:	4616      	mov	r6, r2
   85966:	42b5      	cmp	r5, r6
   85968:	d83d      	bhi.n	859e6 <_realloc_r+0xae>
   8596a:	4297      	cmp	r7, r2
   8596c:	da43      	bge.n	859f6 <_realloc_r+0xbe>
   8596e:	4bc6      	ldr	r3, [pc, #792]	; (85c88 <_realloc_r+0x350>)
   85970:	eb09 0007 	add.w	r0, r9, r7
   85974:	6899      	ldr	r1, [r3, #8]
   85976:	4288      	cmp	r0, r1
   85978:	f000 80c3 	beq.w	85b02 <_realloc_r+0x1ca>
   8597c:	6843      	ldr	r3, [r0, #4]
   8597e:	f023 0101 	bic.w	r1, r3, #1
   85982:	4401      	add	r1, r0
   85984:	6849      	ldr	r1, [r1, #4]
   85986:	07c9      	lsls	r1, r1, #31
   85988:	d54d      	bpl.n	85a26 <_realloc_r+0xee>
   8598a:	f01e 0f01 	tst.w	lr, #1
   8598e:	f000 809b 	beq.w	85ac8 <_realloc_r+0x190>
   85992:	4629      	mov	r1, r5
   85994:	4640      	mov	r0, r8
   85996:	f7fe ff01 	bl	8479c <_malloc_r>
   8599a:	4605      	mov	r5, r0
   8599c:	2800      	cmp	r0, #0
   8599e:	d03b      	beq.n	85a18 <_realloc_r+0xe0>
   859a0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   859a4:	f1a0 0208 	sub.w	r2, r0, #8
   859a8:	f023 0301 	bic.w	r3, r3, #1
   859ac:	444b      	add	r3, r9
   859ae:	429a      	cmp	r2, r3
   859b0:	f000 812b 	beq.w	85c0a <_realloc_r+0x2d2>
   859b4:	1f3a      	subs	r2, r7, #4
   859b6:	2a24      	cmp	r2, #36	; 0x24
   859b8:	f200 8118 	bhi.w	85bec <_realloc_r+0x2b4>
   859bc:	2a13      	cmp	r2, #19
   859be:	f200 80eb 	bhi.w	85b98 <_realloc_r+0x260>
   859c2:	4603      	mov	r3, r0
   859c4:	4622      	mov	r2, r4
   859c6:	6811      	ldr	r1, [r2, #0]
   859c8:	6019      	str	r1, [r3, #0]
   859ca:	6851      	ldr	r1, [r2, #4]
   859cc:	6059      	str	r1, [r3, #4]
   859ce:	6892      	ldr	r2, [r2, #8]
   859d0:	609a      	str	r2, [r3, #8]
   859d2:	4621      	mov	r1, r4
   859d4:	4640      	mov	r0, r8
   859d6:	f7ff fe65 	bl	856a4 <_free_r>
   859da:	e01d      	b.n	85a18 <_realloc_r+0xe0>
   859dc:	f026 0607 	bic.w	r6, r6, #7
   859e0:	2e00      	cmp	r6, #0
   859e2:	4632      	mov	r2, r6
   859e4:	dabf      	bge.n	85966 <_realloc_r+0x2e>
   859e6:	2500      	movs	r5, #0
   859e8:	230c      	movs	r3, #12
   859ea:	4628      	mov	r0, r5
   859ec:	f8c8 3000 	str.w	r3, [r8]
   859f0:	b003      	add	sp, #12
   859f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   859f6:	4625      	mov	r5, r4
   859f8:	1bbb      	subs	r3, r7, r6
   859fa:	2b0f      	cmp	r3, #15
   859fc:	f8d9 2004 	ldr.w	r2, [r9, #4]
   85a00:	d81d      	bhi.n	85a3e <_realloc_r+0x106>
   85a02:	f002 0201 	and.w	r2, r2, #1
   85a06:	433a      	orrs	r2, r7
   85a08:	eb09 0107 	add.w	r1, r9, r7
   85a0c:	f8c9 2004 	str.w	r2, [r9, #4]
   85a10:	684b      	ldr	r3, [r1, #4]
   85a12:	f043 0301 	orr.w	r3, r3, #1
   85a16:	604b      	str	r3, [r1, #4]
   85a18:	4640      	mov	r0, r8
   85a1a:	f7ff f9c3 	bl	84da4 <__malloc_unlock>
   85a1e:	4628      	mov	r0, r5
   85a20:	b003      	add	sp, #12
   85a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85a26:	f023 0303 	bic.w	r3, r3, #3
   85a2a:	18f9      	adds	r1, r7, r3
   85a2c:	4291      	cmp	r1, r2
   85a2e:	db1d      	blt.n	85a6c <_realloc_r+0x134>
   85a30:	68c3      	ldr	r3, [r0, #12]
   85a32:	6882      	ldr	r2, [r0, #8]
   85a34:	4625      	mov	r5, r4
   85a36:	60d3      	str	r3, [r2, #12]
   85a38:	460f      	mov	r7, r1
   85a3a:	609a      	str	r2, [r3, #8]
   85a3c:	e7dc      	b.n	859f8 <_realloc_r+0xc0>
   85a3e:	f002 0201 	and.w	r2, r2, #1
   85a42:	eb09 0106 	add.w	r1, r9, r6
   85a46:	f043 0301 	orr.w	r3, r3, #1
   85a4a:	4332      	orrs	r2, r6
   85a4c:	f8c9 2004 	str.w	r2, [r9, #4]
   85a50:	444f      	add	r7, r9
   85a52:	604b      	str	r3, [r1, #4]
   85a54:	687b      	ldr	r3, [r7, #4]
   85a56:	3108      	adds	r1, #8
   85a58:	f043 0301 	orr.w	r3, r3, #1
   85a5c:	607b      	str	r3, [r7, #4]
   85a5e:	4640      	mov	r0, r8
   85a60:	f7ff fe20 	bl	856a4 <_free_r>
   85a64:	e7d8      	b.n	85a18 <_realloc_r+0xe0>
   85a66:	4611      	mov	r1, r2
   85a68:	f7fe be98 	b.w	8479c <_malloc_r>
   85a6c:	f01e 0f01 	tst.w	lr, #1
   85a70:	d18f      	bne.n	85992 <_realloc_r+0x5a>
   85a72:	f854 1c08 	ldr.w	r1, [r4, #-8]
   85a76:	eba9 0a01 	sub.w	sl, r9, r1
   85a7a:	f8da 1004 	ldr.w	r1, [sl, #4]
   85a7e:	f021 0103 	bic.w	r1, r1, #3
   85a82:	440b      	add	r3, r1
   85a84:	443b      	add	r3, r7
   85a86:	4293      	cmp	r3, r2
   85a88:	db26      	blt.n	85ad8 <_realloc_r+0x1a0>
   85a8a:	4655      	mov	r5, sl
   85a8c:	68c1      	ldr	r1, [r0, #12]
   85a8e:	6880      	ldr	r0, [r0, #8]
   85a90:	1f3a      	subs	r2, r7, #4
   85a92:	60c1      	str	r1, [r0, #12]
   85a94:	6088      	str	r0, [r1, #8]
   85a96:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85a9a:	f8da 100c 	ldr.w	r1, [sl, #12]
   85a9e:	2a24      	cmp	r2, #36	; 0x24
   85aa0:	60c1      	str	r1, [r0, #12]
   85aa2:	6088      	str	r0, [r1, #8]
   85aa4:	d826      	bhi.n	85af4 <_realloc_r+0x1bc>
   85aa6:	2a13      	cmp	r2, #19
   85aa8:	f240 8081 	bls.w	85bae <_realloc_r+0x276>
   85aac:	6821      	ldr	r1, [r4, #0]
   85aae:	2a1b      	cmp	r2, #27
   85ab0:	f8ca 1008 	str.w	r1, [sl, #8]
   85ab4:	6861      	ldr	r1, [r4, #4]
   85ab6:	f8ca 100c 	str.w	r1, [sl, #12]
   85aba:	f200 80ad 	bhi.w	85c18 <_realloc_r+0x2e0>
   85abe:	f104 0008 	add.w	r0, r4, #8
   85ac2:	f10a 0210 	add.w	r2, sl, #16
   85ac6:	e074      	b.n	85bb2 <_realloc_r+0x27a>
   85ac8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   85acc:	eba9 0a03 	sub.w	sl, r9, r3
   85ad0:	f8da 1004 	ldr.w	r1, [sl, #4]
   85ad4:	f021 0103 	bic.w	r1, r1, #3
   85ad8:	187b      	adds	r3, r7, r1
   85ada:	4293      	cmp	r3, r2
   85adc:	f6ff af59 	blt.w	85992 <_realloc_r+0x5a>
   85ae0:	4655      	mov	r5, sl
   85ae2:	f8da 100c 	ldr.w	r1, [sl, #12]
   85ae6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85aea:	1f3a      	subs	r2, r7, #4
   85aec:	2a24      	cmp	r2, #36	; 0x24
   85aee:	60c1      	str	r1, [r0, #12]
   85af0:	6088      	str	r0, [r1, #8]
   85af2:	d9d8      	bls.n	85aa6 <_realloc_r+0x16e>
   85af4:	4621      	mov	r1, r4
   85af6:	4628      	mov	r0, r5
   85af8:	461f      	mov	r7, r3
   85afa:	46d1      	mov	r9, sl
   85afc:	f7ff feb8 	bl	85870 <memmove>
   85b00:	e77a      	b.n	859f8 <_realloc_r+0xc0>
   85b02:	6841      	ldr	r1, [r0, #4]
   85b04:	f106 0010 	add.w	r0, r6, #16
   85b08:	f021 0b03 	bic.w	fp, r1, #3
   85b0c:	44bb      	add	fp, r7
   85b0e:	4583      	cmp	fp, r0
   85b10:	da58      	bge.n	85bc4 <_realloc_r+0x28c>
   85b12:	f01e 0f01 	tst.w	lr, #1
   85b16:	f47f af3c 	bne.w	85992 <_realloc_r+0x5a>
   85b1a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   85b1e:	eba9 0a01 	sub.w	sl, r9, r1
   85b22:	f8da 1004 	ldr.w	r1, [sl, #4]
   85b26:	f021 0103 	bic.w	r1, r1, #3
   85b2a:	448b      	add	fp, r1
   85b2c:	4558      	cmp	r0, fp
   85b2e:	dcd3      	bgt.n	85ad8 <_realloc_r+0x1a0>
   85b30:	4655      	mov	r5, sl
   85b32:	f8da 100c 	ldr.w	r1, [sl, #12]
   85b36:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85b3a:	1f3a      	subs	r2, r7, #4
   85b3c:	2a24      	cmp	r2, #36	; 0x24
   85b3e:	60c1      	str	r1, [r0, #12]
   85b40:	6088      	str	r0, [r1, #8]
   85b42:	f200 808d 	bhi.w	85c60 <_realloc_r+0x328>
   85b46:	2a13      	cmp	r2, #19
   85b48:	f240 8087 	bls.w	85c5a <_realloc_r+0x322>
   85b4c:	6821      	ldr	r1, [r4, #0]
   85b4e:	2a1b      	cmp	r2, #27
   85b50:	f8ca 1008 	str.w	r1, [sl, #8]
   85b54:	6861      	ldr	r1, [r4, #4]
   85b56:	f8ca 100c 	str.w	r1, [sl, #12]
   85b5a:	f200 8088 	bhi.w	85c6e <_realloc_r+0x336>
   85b5e:	f104 0108 	add.w	r1, r4, #8
   85b62:	f10a 0210 	add.w	r2, sl, #16
   85b66:	6808      	ldr	r0, [r1, #0]
   85b68:	6010      	str	r0, [r2, #0]
   85b6a:	6848      	ldr	r0, [r1, #4]
   85b6c:	6050      	str	r0, [r2, #4]
   85b6e:	6889      	ldr	r1, [r1, #8]
   85b70:	6091      	str	r1, [r2, #8]
   85b72:	ebab 0206 	sub.w	r2, fp, r6
   85b76:	eb0a 0106 	add.w	r1, sl, r6
   85b7a:	f042 0201 	orr.w	r2, r2, #1
   85b7e:	6099      	str	r1, [r3, #8]
   85b80:	604a      	str	r2, [r1, #4]
   85b82:	f8da 3004 	ldr.w	r3, [sl, #4]
   85b86:	4640      	mov	r0, r8
   85b88:	f003 0301 	and.w	r3, r3, #1
   85b8c:	431e      	orrs	r6, r3
   85b8e:	f8ca 6004 	str.w	r6, [sl, #4]
   85b92:	f7ff f907 	bl	84da4 <__malloc_unlock>
   85b96:	e742      	b.n	85a1e <_realloc_r+0xe6>
   85b98:	6823      	ldr	r3, [r4, #0]
   85b9a:	2a1b      	cmp	r2, #27
   85b9c:	6003      	str	r3, [r0, #0]
   85b9e:	6863      	ldr	r3, [r4, #4]
   85ba0:	6043      	str	r3, [r0, #4]
   85ba2:	d827      	bhi.n	85bf4 <_realloc_r+0x2bc>
   85ba4:	f100 0308 	add.w	r3, r0, #8
   85ba8:	f104 0208 	add.w	r2, r4, #8
   85bac:	e70b      	b.n	859c6 <_realloc_r+0x8e>
   85bae:	4620      	mov	r0, r4
   85bb0:	462a      	mov	r2, r5
   85bb2:	6801      	ldr	r1, [r0, #0]
   85bb4:	461f      	mov	r7, r3
   85bb6:	6011      	str	r1, [r2, #0]
   85bb8:	6841      	ldr	r1, [r0, #4]
   85bba:	46d1      	mov	r9, sl
   85bbc:	6051      	str	r1, [r2, #4]
   85bbe:	6883      	ldr	r3, [r0, #8]
   85bc0:	6093      	str	r3, [r2, #8]
   85bc2:	e719      	b.n	859f8 <_realloc_r+0xc0>
   85bc4:	ebab 0b06 	sub.w	fp, fp, r6
   85bc8:	eb09 0106 	add.w	r1, r9, r6
   85bcc:	f04b 0201 	orr.w	r2, fp, #1
   85bd0:	6099      	str	r1, [r3, #8]
   85bd2:	604a      	str	r2, [r1, #4]
   85bd4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85bd8:	4640      	mov	r0, r8
   85bda:	f003 0301 	and.w	r3, r3, #1
   85bde:	431e      	orrs	r6, r3
   85be0:	f844 6c04 	str.w	r6, [r4, #-4]
   85be4:	f7ff f8de 	bl	84da4 <__malloc_unlock>
   85be8:	4625      	mov	r5, r4
   85bea:	e718      	b.n	85a1e <_realloc_r+0xe6>
   85bec:	4621      	mov	r1, r4
   85bee:	f7ff fe3f 	bl	85870 <memmove>
   85bf2:	e6ee      	b.n	859d2 <_realloc_r+0x9a>
   85bf4:	68a3      	ldr	r3, [r4, #8]
   85bf6:	2a24      	cmp	r2, #36	; 0x24
   85bf8:	6083      	str	r3, [r0, #8]
   85bfa:	68e3      	ldr	r3, [r4, #12]
   85bfc:	60c3      	str	r3, [r0, #12]
   85bfe:	d018      	beq.n	85c32 <_realloc_r+0x2fa>
   85c00:	f100 0310 	add.w	r3, r0, #16
   85c04:	f104 0210 	add.w	r2, r4, #16
   85c08:	e6dd      	b.n	859c6 <_realloc_r+0x8e>
   85c0a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   85c0e:	4625      	mov	r5, r4
   85c10:	f023 0303 	bic.w	r3, r3, #3
   85c14:	441f      	add	r7, r3
   85c16:	e6ef      	b.n	859f8 <_realloc_r+0xc0>
   85c18:	68a1      	ldr	r1, [r4, #8]
   85c1a:	2a24      	cmp	r2, #36	; 0x24
   85c1c:	f8ca 1010 	str.w	r1, [sl, #16]
   85c20:	68e1      	ldr	r1, [r4, #12]
   85c22:	f8ca 1014 	str.w	r1, [sl, #20]
   85c26:	d00d      	beq.n	85c44 <_realloc_r+0x30c>
   85c28:	f104 0010 	add.w	r0, r4, #16
   85c2c:	f10a 0218 	add.w	r2, sl, #24
   85c30:	e7bf      	b.n	85bb2 <_realloc_r+0x27a>
   85c32:	6922      	ldr	r2, [r4, #16]
   85c34:	f100 0318 	add.w	r3, r0, #24
   85c38:	6102      	str	r2, [r0, #16]
   85c3a:	6961      	ldr	r1, [r4, #20]
   85c3c:	f104 0218 	add.w	r2, r4, #24
   85c40:	6141      	str	r1, [r0, #20]
   85c42:	e6c0      	b.n	859c6 <_realloc_r+0x8e>
   85c44:	6922      	ldr	r2, [r4, #16]
   85c46:	f104 0018 	add.w	r0, r4, #24
   85c4a:	f8ca 2018 	str.w	r2, [sl, #24]
   85c4e:	6961      	ldr	r1, [r4, #20]
   85c50:	f10a 0220 	add.w	r2, sl, #32
   85c54:	f8ca 101c 	str.w	r1, [sl, #28]
   85c58:	e7ab      	b.n	85bb2 <_realloc_r+0x27a>
   85c5a:	4621      	mov	r1, r4
   85c5c:	462a      	mov	r2, r5
   85c5e:	e782      	b.n	85b66 <_realloc_r+0x22e>
   85c60:	4621      	mov	r1, r4
   85c62:	4628      	mov	r0, r5
   85c64:	9301      	str	r3, [sp, #4]
   85c66:	f7ff fe03 	bl	85870 <memmove>
   85c6a:	9b01      	ldr	r3, [sp, #4]
   85c6c:	e781      	b.n	85b72 <_realloc_r+0x23a>
   85c6e:	68a1      	ldr	r1, [r4, #8]
   85c70:	2a24      	cmp	r2, #36	; 0x24
   85c72:	f8ca 1010 	str.w	r1, [sl, #16]
   85c76:	68e1      	ldr	r1, [r4, #12]
   85c78:	f8ca 1014 	str.w	r1, [sl, #20]
   85c7c:	d006      	beq.n	85c8c <_realloc_r+0x354>
   85c7e:	f104 0110 	add.w	r1, r4, #16
   85c82:	f10a 0218 	add.w	r2, sl, #24
   85c86:	e76e      	b.n	85b66 <_realloc_r+0x22e>
   85c88:	20000b20 	.word	0x20000b20
   85c8c:	6922      	ldr	r2, [r4, #16]
   85c8e:	f104 0118 	add.w	r1, r4, #24
   85c92:	f8ca 2018 	str.w	r2, [sl, #24]
   85c96:	6960      	ldr	r0, [r4, #20]
   85c98:	f10a 0220 	add.w	r2, sl, #32
   85c9c:	f8ca 001c 	str.w	r0, [sl, #28]
   85ca0:	e761      	b.n	85b66 <_realloc_r+0x22e>
   85ca2:	bf00      	nop

00085ca4 <__aeabi_drsub>:
   85ca4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   85ca8:	e002      	b.n	85cb0 <__adddf3>
   85caa:	bf00      	nop

00085cac <__aeabi_dsub>:
   85cac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00085cb0 <__adddf3>:
   85cb0:	b530      	push	{r4, r5, lr}
   85cb2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   85cb6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   85cba:	ea94 0f05 	teq	r4, r5
   85cbe:	bf08      	it	eq
   85cc0:	ea90 0f02 	teqeq	r0, r2
   85cc4:	bf1f      	itttt	ne
   85cc6:	ea54 0c00 	orrsne.w	ip, r4, r0
   85cca:	ea55 0c02 	orrsne.w	ip, r5, r2
   85cce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   85cd2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   85cd6:	f000 80e2 	beq.w	85e9e <__adddf3+0x1ee>
   85cda:	ea4f 5454 	mov.w	r4, r4, lsr #21
   85cde:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   85ce2:	bfb8      	it	lt
   85ce4:	426d      	neglt	r5, r5
   85ce6:	dd0c      	ble.n	85d02 <__adddf3+0x52>
   85ce8:	442c      	add	r4, r5
   85cea:	ea80 0202 	eor.w	r2, r0, r2
   85cee:	ea81 0303 	eor.w	r3, r1, r3
   85cf2:	ea82 0000 	eor.w	r0, r2, r0
   85cf6:	ea83 0101 	eor.w	r1, r3, r1
   85cfa:	ea80 0202 	eor.w	r2, r0, r2
   85cfe:	ea81 0303 	eor.w	r3, r1, r3
   85d02:	2d36      	cmp	r5, #54	; 0x36
   85d04:	bf88      	it	hi
   85d06:	bd30      	pophi	{r4, r5, pc}
   85d08:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   85d0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   85d10:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   85d14:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   85d18:	d002      	beq.n	85d20 <__adddf3+0x70>
   85d1a:	4240      	negs	r0, r0
   85d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85d20:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   85d24:	ea4f 3303 	mov.w	r3, r3, lsl #12
   85d28:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   85d2c:	d002      	beq.n	85d34 <__adddf3+0x84>
   85d2e:	4252      	negs	r2, r2
   85d30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85d34:	ea94 0f05 	teq	r4, r5
   85d38:	f000 80a7 	beq.w	85e8a <__adddf3+0x1da>
   85d3c:	f1a4 0401 	sub.w	r4, r4, #1
   85d40:	f1d5 0e20 	rsbs	lr, r5, #32
   85d44:	db0d      	blt.n	85d62 <__adddf3+0xb2>
   85d46:	fa02 fc0e 	lsl.w	ip, r2, lr
   85d4a:	fa22 f205 	lsr.w	r2, r2, r5
   85d4e:	1880      	adds	r0, r0, r2
   85d50:	f141 0100 	adc.w	r1, r1, #0
   85d54:	fa03 f20e 	lsl.w	r2, r3, lr
   85d58:	1880      	adds	r0, r0, r2
   85d5a:	fa43 f305 	asr.w	r3, r3, r5
   85d5e:	4159      	adcs	r1, r3
   85d60:	e00e      	b.n	85d80 <__adddf3+0xd0>
   85d62:	f1a5 0520 	sub.w	r5, r5, #32
   85d66:	f10e 0e20 	add.w	lr, lr, #32
   85d6a:	2a01      	cmp	r2, #1
   85d6c:	fa03 fc0e 	lsl.w	ip, r3, lr
   85d70:	bf28      	it	cs
   85d72:	f04c 0c02 	orrcs.w	ip, ip, #2
   85d76:	fa43 f305 	asr.w	r3, r3, r5
   85d7a:	18c0      	adds	r0, r0, r3
   85d7c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   85d80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85d84:	d507      	bpl.n	85d96 <__adddf3+0xe6>
   85d86:	f04f 0e00 	mov.w	lr, #0
   85d8a:	f1dc 0c00 	rsbs	ip, ip, #0
   85d8e:	eb7e 0000 	sbcs.w	r0, lr, r0
   85d92:	eb6e 0101 	sbc.w	r1, lr, r1
   85d96:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   85d9a:	d31b      	bcc.n	85dd4 <__adddf3+0x124>
   85d9c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   85da0:	d30c      	bcc.n	85dbc <__adddf3+0x10c>
   85da2:	0849      	lsrs	r1, r1, #1
   85da4:	ea5f 0030 	movs.w	r0, r0, rrx
   85da8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   85dac:	f104 0401 	add.w	r4, r4, #1
   85db0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   85db4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   85db8:	f080 809a 	bcs.w	85ef0 <__adddf3+0x240>
   85dbc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   85dc0:	bf08      	it	eq
   85dc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   85dc6:	f150 0000 	adcs.w	r0, r0, #0
   85dca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   85dce:	ea41 0105 	orr.w	r1, r1, r5
   85dd2:	bd30      	pop	{r4, r5, pc}
   85dd4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   85dd8:	4140      	adcs	r0, r0
   85dda:	eb41 0101 	adc.w	r1, r1, r1
   85dde:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85de2:	f1a4 0401 	sub.w	r4, r4, #1
   85de6:	d1e9      	bne.n	85dbc <__adddf3+0x10c>
   85de8:	f091 0f00 	teq	r1, #0
   85dec:	bf04      	itt	eq
   85dee:	4601      	moveq	r1, r0
   85df0:	2000      	moveq	r0, #0
   85df2:	fab1 f381 	clz	r3, r1
   85df6:	bf08      	it	eq
   85df8:	3320      	addeq	r3, #32
   85dfa:	f1a3 030b 	sub.w	r3, r3, #11
   85dfe:	f1b3 0220 	subs.w	r2, r3, #32
   85e02:	da0c      	bge.n	85e1e <__adddf3+0x16e>
   85e04:	320c      	adds	r2, #12
   85e06:	dd08      	ble.n	85e1a <__adddf3+0x16a>
   85e08:	f102 0c14 	add.w	ip, r2, #20
   85e0c:	f1c2 020c 	rsb	r2, r2, #12
   85e10:	fa01 f00c 	lsl.w	r0, r1, ip
   85e14:	fa21 f102 	lsr.w	r1, r1, r2
   85e18:	e00c      	b.n	85e34 <__adddf3+0x184>
   85e1a:	f102 0214 	add.w	r2, r2, #20
   85e1e:	bfd8      	it	le
   85e20:	f1c2 0c20 	rsble	ip, r2, #32
   85e24:	fa01 f102 	lsl.w	r1, r1, r2
   85e28:	fa20 fc0c 	lsr.w	ip, r0, ip
   85e2c:	bfdc      	itt	le
   85e2e:	ea41 010c 	orrle.w	r1, r1, ip
   85e32:	4090      	lslle	r0, r2
   85e34:	1ae4      	subs	r4, r4, r3
   85e36:	bfa2      	ittt	ge
   85e38:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   85e3c:	4329      	orrge	r1, r5
   85e3e:	bd30      	popge	{r4, r5, pc}
   85e40:	ea6f 0404 	mvn.w	r4, r4
   85e44:	3c1f      	subs	r4, #31
   85e46:	da1c      	bge.n	85e82 <__adddf3+0x1d2>
   85e48:	340c      	adds	r4, #12
   85e4a:	dc0e      	bgt.n	85e6a <__adddf3+0x1ba>
   85e4c:	f104 0414 	add.w	r4, r4, #20
   85e50:	f1c4 0220 	rsb	r2, r4, #32
   85e54:	fa20 f004 	lsr.w	r0, r0, r4
   85e58:	fa01 f302 	lsl.w	r3, r1, r2
   85e5c:	ea40 0003 	orr.w	r0, r0, r3
   85e60:	fa21 f304 	lsr.w	r3, r1, r4
   85e64:	ea45 0103 	orr.w	r1, r5, r3
   85e68:	bd30      	pop	{r4, r5, pc}
   85e6a:	f1c4 040c 	rsb	r4, r4, #12
   85e6e:	f1c4 0220 	rsb	r2, r4, #32
   85e72:	fa20 f002 	lsr.w	r0, r0, r2
   85e76:	fa01 f304 	lsl.w	r3, r1, r4
   85e7a:	ea40 0003 	orr.w	r0, r0, r3
   85e7e:	4629      	mov	r1, r5
   85e80:	bd30      	pop	{r4, r5, pc}
   85e82:	fa21 f004 	lsr.w	r0, r1, r4
   85e86:	4629      	mov	r1, r5
   85e88:	bd30      	pop	{r4, r5, pc}
   85e8a:	f094 0f00 	teq	r4, #0
   85e8e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   85e92:	bf06      	itte	eq
   85e94:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   85e98:	3401      	addeq	r4, #1
   85e9a:	3d01      	subne	r5, #1
   85e9c:	e74e      	b.n	85d3c <__adddf3+0x8c>
   85e9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   85ea2:	bf18      	it	ne
   85ea4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   85ea8:	d029      	beq.n	85efe <__adddf3+0x24e>
   85eaa:	ea94 0f05 	teq	r4, r5
   85eae:	bf08      	it	eq
   85eb0:	ea90 0f02 	teqeq	r0, r2
   85eb4:	d005      	beq.n	85ec2 <__adddf3+0x212>
   85eb6:	ea54 0c00 	orrs.w	ip, r4, r0
   85eba:	bf04      	itt	eq
   85ebc:	4619      	moveq	r1, r3
   85ebe:	4610      	moveq	r0, r2
   85ec0:	bd30      	pop	{r4, r5, pc}
   85ec2:	ea91 0f03 	teq	r1, r3
   85ec6:	bf1e      	ittt	ne
   85ec8:	2100      	movne	r1, #0
   85eca:	2000      	movne	r0, #0
   85ecc:	bd30      	popne	{r4, r5, pc}
   85ece:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   85ed2:	d105      	bne.n	85ee0 <__adddf3+0x230>
   85ed4:	0040      	lsls	r0, r0, #1
   85ed6:	4149      	adcs	r1, r1
   85ed8:	bf28      	it	cs
   85eda:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   85ede:	bd30      	pop	{r4, r5, pc}
   85ee0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   85ee4:	bf3c      	itt	cc
   85ee6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   85eea:	bd30      	popcc	{r4, r5, pc}
   85eec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85ef0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   85ef4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   85ef8:	f04f 0000 	mov.w	r0, #0
   85efc:	bd30      	pop	{r4, r5, pc}
   85efe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   85f02:	bf1a      	itte	ne
   85f04:	4619      	movne	r1, r3
   85f06:	4610      	movne	r0, r2
   85f08:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   85f0c:	bf1c      	itt	ne
   85f0e:	460b      	movne	r3, r1
   85f10:	4602      	movne	r2, r0
   85f12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   85f16:	bf06      	itte	eq
   85f18:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   85f1c:	ea91 0f03 	teqeq	r1, r3
   85f20:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   85f24:	bd30      	pop	{r4, r5, pc}
   85f26:	bf00      	nop

00085f28 <__aeabi_ui2d>:
   85f28:	f090 0f00 	teq	r0, #0
   85f2c:	bf04      	itt	eq
   85f2e:	2100      	moveq	r1, #0
   85f30:	4770      	bxeq	lr
   85f32:	b530      	push	{r4, r5, lr}
   85f34:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85f38:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85f3c:	f04f 0500 	mov.w	r5, #0
   85f40:	f04f 0100 	mov.w	r1, #0
   85f44:	e750      	b.n	85de8 <__adddf3+0x138>
   85f46:	bf00      	nop

00085f48 <__aeabi_i2d>:
   85f48:	f090 0f00 	teq	r0, #0
   85f4c:	bf04      	itt	eq
   85f4e:	2100      	moveq	r1, #0
   85f50:	4770      	bxeq	lr
   85f52:	b530      	push	{r4, r5, lr}
   85f54:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85f58:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85f5c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   85f60:	bf48      	it	mi
   85f62:	4240      	negmi	r0, r0
   85f64:	f04f 0100 	mov.w	r1, #0
   85f68:	e73e      	b.n	85de8 <__adddf3+0x138>
   85f6a:	bf00      	nop

00085f6c <__aeabi_f2d>:
   85f6c:	0042      	lsls	r2, r0, #1
   85f6e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   85f72:	ea4f 0131 	mov.w	r1, r1, rrx
   85f76:	ea4f 7002 	mov.w	r0, r2, lsl #28
   85f7a:	bf1f      	itttt	ne
   85f7c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   85f80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   85f84:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   85f88:	4770      	bxne	lr
   85f8a:	f092 0f00 	teq	r2, #0
   85f8e:	bf14      	ite	ne
   85f90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   85f94:	4770      	bxeq	lr
   85f96:	b530      	push	{r4, r5, lr}
   85f98:	f44f 7460 	mov.w	r4, #896	; 0x380
   85f9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85fa0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   85fa4:	e720      	b.n	85de8 <__adddf3+0x138>
   85fa6:	bf00      	nop

00085fa8 <__aeabi_ul2d>:
   85fa8:	ea50 0201 	orrs.w	r2, r0, r1
   85fac:	bf08      	it	eq
   85fae:	4770      	bxeq	lr
   85fb0:	b530      	push	{r4, r5, lr}
   85fb2:	f04f 0500 	mov.w	r5, #0
   85fb6:	e00a      	b.n	85fce <__aeabi_l2d+0x16>

00085fb8 <__aeabi_l2d>:
   85fb8:	ea50 0201 	orrs.w	r2, r0, r1
   85fbc:	bf08      	it	eq
   85fbe:	4770      	bxeq	lr
   85fc0:	b530      	push	{r4, r5, lr}
   85fc2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   85fc6:	d502      	bpl.n	85fce <__aeabi_l2d+0x16>
   85fc8:	4240      	negs	r0, r0
   85fca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85fce:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85fd2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85fd6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   85fda:	f43f aedc 	beq.w	85d96 <__adddf3+0xe6>
   85fde:	f04f 0203 	mov.w	r2, #3
   85fe2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   85fe6:	bf18      	it	ne
   85fe8:	3203      	addne	r2, #3
   85fea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   85fee:	bf18      	it	ne
   85ff0:	3203      	addne	r2, #3
   85ff2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   85ff6:	f1c2 0320 	rsb	r3, r2, #32
   85ffa:	fa00 fc03 	lsl.w	ip, r0, r3
   85ffe:	fa20 f002 	lsr.w	r0, r0, r2
   86002:	fa01 fe03 	lsl.w	lr, r1, r3
   86006:	ea40 000e 	orr.w	r0, r0, lr
   8600a:	fa21 f102 	lsr.w	r1, r1, r2
   8600e:	4414      	add	r4, r2
   86010:	e6c1      	b.n	85d96 <__adddf3+0xe6>
   86012:	bf00      	nop

00086014 <__aeabi_dmul>:
   86014:	b570      	push	{r4, r5, r6, lr}
   86016:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8601a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8601e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   86022:	bf1d      	ittte	ne
   86024:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   86028:	ea94 0f0c 	teqne	r4, ip
   8602c:	ea95 0f0c 	teqne	r5, ip
   86030:	f000 f8de 	bleq	861f0 <__aeabi_dmul+0x1dc>
   86034:	442c      	add	r4, r5
   86036:	ea81 0603 	eor.w	r6, r1, r3
   8603a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8603e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   86042:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   86046:	bf18      	it	ne
   86048:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8604c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   86050:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   86054:	d038      	beq.n	860c8 <__aeabi_dmul+0xb4>
   86056:	fba0 ce02 	umull	ip, lr, r0, r2
   8605a:	f04f 0500 	mov.w	r5, #0
   8605e:	fbe1 e502 	umlal	lr, r5, r1, r2
   86062:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   86066:	fbe0 e503 	umlal	lr, r5, r0, r3
   8606a:	f04f 0600 	mov.w	r6, #0
   8606e:	fbe1 5603 	umlal	r5, r6, r1, r3
   86072:	f09c 0f00 	teq	ip, #0
   86076:	bf18      	it	ne
   86078:	f04e 0e01 	orrne.w	lr, lr, #1
   8607c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   86080:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   86084:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   86088:	d204      	bcs.n	86094 <__aeabi_dmul+0x80>
   8608a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8608e:	416d      	adcs	r5, r5
   86090:	eb46 0606 	adc.w	r6, r6, r6
   86094:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   86098:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8609c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   860a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   860a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   860a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   860ac:	bf88      	it	hi
   860ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   860b2:	d81e      	bhi.n	860f2 <__aeabi_dmul+0xde>
   860b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   860b8:	bf08      	it	eq
   860ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   860be:	f150 0000 	adcs.w	r0, r0, #0
   860c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   860c6:	bd70      	pop	{r4, r5, r6, pc}
   860c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   860cc:	ea46 0101 	orr.w	r1, r6, r1
   860d0:	ea40 0002 	orr.w	r0, r0, r2
   860d4:	ea81 0103 	eor.w	r1, r1, r3
   860d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   860dc:	bfc2      	ittt	gt
   860de:	ebd4 050c 	rsbsgt	r5, r4, ip
   860e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   860e6:	bd70      	popgt	{r4, r5, r6, pc}
   860e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   860ec:	f04f 0e00 	mov.w	lr, #0
   860f0:	3c01      	subs	r4, #1
   860f2:	f300 80ab 	bgt.w	8624c <__aeabi_dmul+0x238>
   860f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   860fa:	bfde      	ittt	le
   860fc:	2000      	movle	r0, #0
   860fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   86102:	bd70      	pople	{r4, r5, r6, pc}
   86104:	f1c4 0400 	rsb	r4, r4, #0
   86108:	3c20      	subs	r4, #32
   8610a:	da35      	bge.n	86178 <__aeabi_dmul+0x164>
   8610c:	340c      	adds	r4, #12
   8610e:	dc1b      	bgt.n	86148 <__aeabi_dmul+0x134>
   86110:	f104 0414 	add.w	r4, r4, #20
   86114:	f1c4 0520 	rsb	r5, r4, #32
   86118:	fa00 f305 	lsl.w	r3, r0, r5
   8611c:	fa20 f004 	lsr.w	r0, r0, r4
   86120:	fa01 f205 	lsl.w	r2, r1, r5
   86124:	ea40 0002 	orr.w	r0, r0, r2
   86128:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8612c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   86130:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   86134:	fa21 f604 	lsr.w	r6, r1, r4
   86138:	eb42 0106 	adc.w	r1, r2, r6
   8613c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   86140:	bf08      	it	eq
   86142:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   86146:	bd70      	pop	{r4, r5, r6, pc}
   86148:	f1c4 040c 	rsb	r4, r4, #12
   8614c:	f1c4 0520 	rsb	r5, r4, #32
   86150:	fa00 f304 	lsl.w	r3, r0, r4
   86154:	fa20 f005 	lsr.w	r0, r0, r5
   86158:	fa01 f204 	lsl.w	r2, r1, r4
   8615c:	ea40 0002 	orr.w	r0, r0, r2
   86160:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   86164:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   86168:	f141 0100 	adc.w	r1, r1, #0
   8616c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   86170:	bf08      	it	eq
   86172:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   86176:	bd70      	pop	{r4, r5, r6, pc}
   86178:	f1c4 0520 	rsb	r5, r4, #32
   8617c:	fa00 f205 	lsl.w	r2, r0, r5
   86180:	ea4e 0e02 	orr.w	lr, lr, r2
   86184:	fa20 f304 	lsr.w	r3, r0, r4
   86188:	fa01 f205 	lsl.w	r2, r1, r5
   8618c:	ea43 0302 	orr.w	r3, r3, r2
   86190:	fa21 f004 	lsr.w	r0, r1, r4
   86194:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   86198:	fa21 f204 	lsr.w	r2, r1, r4
   8619c:	ea20 0002 	bic.w	r0, r0, r2
   861a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   861a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   861a8:	bf08      	it	eq
   861aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   861ae:	bd70      	pop	{r4, r5, r6, pc}
   861b0:	f094 0f00 	teq	r4, #0
   861b4:	d10f      	bne.n	861d6 <__aeabi_dmul+0x1c2>
   861b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   861ba:	0040      	lsls	r0, r0, #1
   861bc:	eb41 0101 	adc.w	r1, r1, r1
   861c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   861c4:	bf08      	it	eq
   861c6:	3c01      	subeq	r4, #1
   861c8:	d0f7      	beq.n	861ba <__aeabi_dmul+0x1a6>
   861ca:	ea41 0106 	orr.w	r1, r1, r6
   861ce:	f095 0f00 	teq	r5, #0
   861d2:	bf18      	it	ne
   861d4:	4770      	bxne	lr
   861d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   861da:	0052      	lsls	r2, r2, #1
   861dc:	eb43 0303 	adc.w	r3, r3, r3
   861e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   861e4:	bf08      	it	eq
   861e6:	3d01      	subeq	r5, #1
   861e8:	d0f7      	beq.n	861da <__aeabi_dmul+0x1c6>
   861ea:	ea43 0306 	orr.w	r3, r3, r6
   861ee:	4770      	bx	lr
   861f0:	ea94 0f0c 	teq	r4, ip
   861f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   861f8:	bf18      	it	ne
   861fa:	ea95 0f0c 	teqne	r5, ip
   861fe:	d00c      	beq.n	8621a <__aeabi_dmul+0x206>
   86200:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   86204:	bf18      	it	ne
   86206:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8620a:	d1d1      	bne.n	861b0 <__aeabi_dmul+0x19c>
   8620c:	ea81 0103 	eor.w	r1, r1, r3
   86210:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   86214:	f04f 0000 	mov.w	r0, #0
   86218:	bd70      	pop	{r4, r5, r6, pc}
   8621a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8621e:	bf06      	itte	eq
   86220:	4610      	moveq	r0, r2
   86222:	4619      	moveq	r1, r3
   86224:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   86228:	d019      	beq.n	8625e <__aeabi_dmul+0x24a>
   8622a:	ea94 0f0c 	teq	r4, ip
   8622e:	d102      	bne.n	86236 <__aeabi_dmul+0x222>
   86230:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   86234:	d113      	bne.n	8625e <__aeabi_dmul+0x24a>
   86236:	ea95 0f0c 	teq	r5, ip
   8623a:	d105      	bne.n	86248 <__aeabi_dmul+0x234>
   8623c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   86240:	bf1c      	itt	ne
   86242:	4610      	movne	r0, r2
   86244:	4619      	movne	r1, r3
   86246:	d10a      	bne.n	8625e <__aeabi_dmul+0x24a>
   86248:	ea81 0103 	eor.w	r1, r1, r3
   8624c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   86250:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   86254:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   86258:	f04f 0000 	mov.w	r0, #0
   8625c:	bd70      	pop	{r4, r5, r6, pc}
   8625e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   86262:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   86266:	bd70      	pop	{r4, r5, r6, pc}

00086268 <__aeabi_ddiv>:
   86268:	b570      	push	{r4, r5, r6, lr}
   8626a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8626e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   86272:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   86276:	bf1d      	ittte	ne
   86278:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8627c:	ea94 0f0c 	teqne	r4, ip
   86280:	ea95 0f0c 	teqne	r5, ip
   86284:	f000 f8a7 	bleq	863d6 <__aeabi_ddiv+0x16e>
   86288:	eba4 0405 	sub.w	r4, r4, r5
   8628c:	ea81 0e03 	eor.w	lr, r1, r3
   86290:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   86294:	ea4f 3101 	mov.w	r1, r1, lsl #12
   86298:	f000 8088 	beq.w	863ac <__aeabi_ddiv+0x144>
   8629c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   862a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   862a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   862a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   862ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
   862b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   862b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   862b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   862bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   862c0:	429d      	cmp	r5, r3
   862c2:	bf08      	it	eq
   862c4:	4296      	cmpeq	r6, r2
   862c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   862ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
   862ce:	d202      	bcs.n	862d6 <__aeabi_ddiv+0x6e>
   862d0:	085b      	lsrs	r3, r3, #1
   862d2:	ea4f 0232 	mov.w	r2, r2, rrx
   862d6:	1ab6      	subs	r6, r6, r2
   862d8:	eb65 0503 	sbc.w	r5, r5, r3
   862dc:	085b      	lsrs	r3, r3, #1
   862de:	ea4f 0232 	mov.w	r2, r2, rrx
   862e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   862e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   862ea:	ebb6 0e02 	subs.w	lr, r6, r2
   862ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   862f2:	bf22      	ittt	cs
   862f4:	1ab6      	subcs	r6, r6, r2
   862f6:	4675      	movcs	r5, lr
   862f8:	ea40 000c 	orrcs.w	r0, r0, ip
   862fc:	085b      	lsrs	r3, r3, #1
   862fe:	ea4f 0232 	mov.w	r2, r2, rrx
   86302:	ebb6 0e02 	subs.w	lr, r6, r2
   86306:	eb75 0e03 	sbcs.w	lr, r5, r3
   8630a:	bf22      	ittt	cs
   8630c:	1ab6      	subcs	r6, r6, r2
   8630e:	4675      	movcs	r5, lr
   86310:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   86314:	085b      	lsrs	r3, r3, #1
   86316:	ea4f 0232 	mov.w	r2, r2, rrx
   8631a:	ebb6 0e02 	subs.w	lr, r6, r2
   8631e:	eb75 0e03 	sbcs.w	lr, r5, r3
   86322:	bf22      	ittt	cs
   86324:	1ab6      	subcs	r6, r6, r2
   86326:	4675      	movcs	r5, lr
   86328:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8632c:	085b      	lsrs	r3, r3, #1
   8632e:	ea4f 0232 	mov.w	r2, r2, rrx
   86332:	ebb6 0e02 	subs.w	lr, r6, r2
   86336:	eb75 0e03 	sbcs.w	lr, r5, r3
   8633a:	bf22      	ittt	cs
   8633c:	1ab6      	subcs	r6, r6, r2
   8633e:	4675      	movcs	r5, lr
   86340:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   86344:	ea55 0e06 	orrs.w	lr, r5, r6
   86348:	d018      	beq.n	8637c <__aeabi_ddiv+0x114>
   8634a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8634e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   86352:	ea4f 1606 	mov.w	r6, r6, lsl #4
   86356:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8635a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8635e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   86362:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   86366:	d1c0      	bne.n	862ea <__aeabi_ddiv+0x82>
   86368:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8636c:	d10b      	bne.n	86386 <__aeabi_ddiv+0x11e>
   8636e:	ea41 0100 	orr.w	r1, r1, r0
   86372:	f04f 0000 	mov.w	r0, #0
   86376:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8637a:	e7b6      	b.n	862ea <__aeabi_ddiv+0x82>
   8637c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   86380:	bf04      	itt	eq
   86382:	4301      	orreq	r1, r0
   86384:	2000      	moveq	r0, #0
   86386:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8638a:	bf88      	it	hi
   8638c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   86390:	f63f aeaf 	bhi.w	860f2 <__aeabi_dmul+0xde>
   86394:	ebb5 0c03 	subs.w	ip, r5, r3
   86398:	bf04      	itt	eq
   8639a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8639e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   863a2:	f150 0000 	adcs.w	r0, r0, #0
   863a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   863aa:	bd70      	pop	{r4, r5, r6, pc}
   863ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   863b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   863b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   863b8:	bfc2      	ittt	gt
   863ba:	ebd4 050c 	rsbsgt	r5, r4, ip
   863be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   863c2:	bd70      	popgt	{r4, r5, r6, pc}
   863c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   863c8:	f04f 0e00 	mov.w	lr, #0
   863cc:	3c01      	subs	r4, #1
   863ce:	e690      	b.n	860f2 <__aeabi_dmul+0xde>
   863d0:	ea45 0e06 	orr.w	lr, r5, r6
   863d4:	e68d      	b.n	860f2 <__aeabi_dmul+0xde>
   863d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   863da:	ea94 0f0c 	teq	r4, ip
   863de:	bf08      	it	eq
   863e0:	ea95 0f0c 	teqeq	r5, ip
   863e4:	f43f af3b 	beq.w	8625e <__aeabi_dmul+0x24a>
   863e8:	ea94 0f0c 	teq	r4, ip
   863ec:	d10a      	bne.n	86404 <__aeabi_ddiv+0x19c>
   863ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   863f2:	f47f af34 	bne.w	8625e <__aeabi_dmul+0x24a>
   863f6:	ea95 0f0c 	teq	r5, ip
   863fa:	f47f af25 	bne.w	86248 <__aeabi_dmul+0x234>
   863fe:	4610      	mov	r0, r2
   86400:	4619      	mov	r1, r3
   86402:	e72c      	b.n	8625e <__aeabi_dmul+0x24a>
   86404:	ea95 0f0c 	teq	r5, ip
   86408:	d106      	bne.n	86418 <__aeabi_ddiv+0x1b0>
   8640a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8640e:	f43f aefd 	beq.w	8620c <__aeabi_dmul+0x1f8>
   86412:	4610      	mov	r0, r2
   86414:	4619      	mov	r1, r3
   86416:	e722      	b.n	8625e <__aeabi_dmul+0x24a>
   86418:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8641c:	bf18      	it	ne
   8641e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   86422:	f47f aec5 	bne.w	861b0 <__aeabi_dmul+0x19c>
   86426:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8642a:	f47f af0d 	bne.w	86248 <__aeabi_dmul+0x234>
   8642e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   86432:	f47f aeeb 	bne.w	8620c <__aeabi_dmul+0x1f8>
   86436:	e712      	b.n	8625e <__aeabi_dmul+0x24a>

00086438 <__gedf2>:
   86438:	f04f 3cff 	mov.w	ip, #4294967295
   8643c:	e006      	b.n	8644c <__cmpdf2+0x4>
   8643e:	bf00      	nop

00086440 <__ledf2>:
   86440:	f04f 0c01 	mov.w	ip, #1
   86444:	e002      	b.n	8644c <__cmpdf2+0x4>
   86446:	bf00      	nop

00086448 <__cmpdf2>:
   86448:	f04f 0c01 	mov.w	ip, #1
   8644c:	f84d cd04 	str.w	ip, [sp, #-4]!
   86450:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   86454:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   86458:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8645c:	bf18      	it	ne
   8645e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   86462:	d01b      	beq.n	8649c <__cmpdf2+0x54>
   86464:	b001      	add	sp, #4
   86466:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8646a:	bf0c      	ite	eq
   8646c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   86470:	ea91 0f03 	teqne	r1, r3
   86474:	bf02      	ittt	eq
   86476:	ea90 0f02 	teqeq	r0, r2
   8647a:	2000      	moveq	r0, #0
   8647c:	4770      	bxeq	lr
   8647e:	f110 0f00 	cmn.w	r0, #0
   86482:	ea91 0f03 	teq	r1, r3
   86486:	bf58      	it	pl
   86488:	4299      	cmppl	r1, r3
   8648a:	bf08      	it	eq
   8648c:	4290      	cmpeq	r0, r2
   8648e:	bf2c      	ite	cs
   86490:	17d8      	asrcs	r0, r3, #31
   86492:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   86496:	f040 0001 	orr.w	r0, r0, #1
   8649a:	4770      	bx	lr
   8649c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   864a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   864a4:	d102      	bne.n	864ac <__cmpdf2+0x64>
   864a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   864aa:	d107      	bne.n	864bc <__cmpdf2+0x74>
   864ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   864b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   864b4:	d1d6      	bne.n	86464 <__cmpdf2+0x1c>
   864b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   864ba:	d0d3      	beq.n	86464 <__cmpdf2+0x1c>
   864bc:	f85d 0b04 	ldr.w	r0, [sp], #4
   864c0:	4770      	bx	lr
   864c2:	bf00      	nop

000864c4 <__aeabi_cdrcmple>:
   864c4:	4684      	mov	ip, r0
   864c6:	4610      	mov	r0, r2
   864c8:	4662      	mov	r2, ip
   864ca:	468c      	mov	ip, r1
   864cc:	4619      	mov	r1, r3
   864ce:	4663      	mov	r3, ip
   864d0:	e000      	b.n	864d4 <__aeabi_cdcmpeq>
   864d2:	bf00      	nop

000864d4 <__aeabi_cdcmpeq>:
   864d4:	b501      	push	{r0, lr}
   864d6:	f7ff ffb7 	bl	86448 <__cmpdf2>
   864da:	2800      	cmp	r0, #0
   864dc:	bf48      	it	mi
   864de:	f110 0f00 	cmnmi.w	r0, #0
   864e2:	bd01      	pop	{r0, pc}

000864e4 <__aeabi_dcmpeq>:
   864e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   864e8:	f7ff fff4 	bl	864d4 <__aeabi_cdcmpeq>
   864ec:	bf0c      	ite	eq
   864ee:	2001      	moveq	r0, #1
   864f0:	2000      	movne	r0, #0
   864f2:	f85d fb08 	ldr.w	pc, [sp], #8
   864f6:	bf00      	nop

000864f8 <__aeabi_dcmplt>:
   864f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   864fc:	f7ff ffea 	bl	864d4 <__aeabi_cdcmpeq>
   86500:	bf34      	ite	cc
   86502:	2001      	movcc	r0, #1
   86504:	2000      	movcs	r0, #0
   86506:	f85d fb08 	ldr.w	pc, [sp], #8
   8650a:	bf00      	nop

0008650c <__aeabi_dcmple>:
   8650c:	f84d ed08 	str.w	lr, [sp, #-8]!
   86510:	f7ff ffe0 	bl	864d4 <__aeabi_cdcmpeq>
   86514:	bf94      	ite	ls
   86516:	2001      	movls	r0, #1
   86518:	2000      	movhi	r0, #0
   8651a:	f85d fb08 	ldr.w	pc, [sp], #8
   8651e:	bf00      	nop

00086520 <__aeabi_dcmpge>:
   86520:	f84d ed08 	str.w	lr, [sp, #-8]!
   86524:	f7ff ffce 	bl	864c4 <__aeabi_cdrcmple>
   86528:	bf94      	ite	ls
   8652a:	2001      	movls	r0, #1
   8652c:	2000      	movhi	r0, #0
   8652e:	f85d fb08 	ldr.w	pc, [sp], #8
   86532:	bf00      	nop

00086534 <__aeabi_dcmpgt>:
   86534:	f84d ed08 	str.w	lr, [sp, #-8]!
   86538:	f7ff ffc4 	bl	864c4 <__aeabi_cdrcmple>
   8653c:	bf34      	ite	cc
   8653e:	2001      	movcc	r0, #1
   86540:	2000      	movcs	r0, #0
   86542:	f85d fb08 	ldr.w	pc, [sp], #8
   86546:	bf00      	nop

00086548 <__aeabi_dcmpun>:
   86548:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8654c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   86550:	d102      	bne.n	86558 <__aeabi_dcmpun+0x10>
   86552:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   86556:	d10a      	bne.n	8656e <__aeabi_dcmpun+0x26>
   86558:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8655c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   86560:	d102      	bne.n	86568 <__aeabi_dcmpun+0x20>
   86562:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   86566:	d102      	bne.n	8656e <__aeabi_dcmpun+0x26>
   86568:	f04f 0000 	mov.w	r0, #0
   8656c:	4770      	bx	lr
   8656e:	f04f 0001 	mov.w	r0, #1
   86572:	4770      	bx	lr

00086574 <__aeabi_d2iz>:
   86574:	ea4f 0241 	mov.w	r2, r1, lsl #1
   86578:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8657c:	d215      	bcs.n	865aa <__aeabi_d2iz+0x36>
   8657e:	d511      	bpl.n	865a4 <__aeabi_d2iz+0x30>
   86580:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   86584:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   86588:	d912      	bls.n	865b0 <__aeabi_d2iz+0x3c>
   8658a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8658e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   86592:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   86596:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8659a:	fa23 f002 	lsr.w	r0, r3, r2
   8659e:	bf18      	it	ne
   865a0:	4240      	negne	r0, r0
   865a2:	4770      	bx	lr
   865a4:	f04f 0000 	mov.w	r0, #0
   865a8:	4770      	bx	lr
   865aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   865ae:	d105      	bne.n	865bc <__aeabi_d2iz+0x48>
   865b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   865b4:	bf08      	it	eq
   865b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   865ba:	4770      	bx	lr
   865bc:	f04f 0000 	mov.w	r0, #0
   865c0:	4770      	bx	lr
   865c2:	bf00      	nop

000865c4 <__aeabi_uldivmod>:
   865c4:	b953      	cbnz	r3, 865dc <__aeabi_uldivmod+0x18>
   865c6:	b94a      	cbnz	r2, 865dc <__aeabi_uldivmod+0x18>
   865c8:	2900      	cmp	r1, #0
   865ca:	bf08      	it	eq
   865cc:	2800      	cmpeq	r0, #0
   865ce:	bf1c      	itt	ne
   865d0:	f04f 31ff 	movne.w	r1, #4294967295
   865d4:	f04f 30ff 	movne.w	r0, #4294967295
   865d8:	f000 b97a 	b.w	868d0 <__aeabi_idiv0>
   865dc:	f1ad 0c08 	sub.w	ip, sp, #8
   865e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   865e4:	f000 f806 	bl	865f4 <__udivmoddi4>
   865e8:	f8dd e004 	ldr.w	lr, [sp, #4]
   865ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   865f0:	b004      	add	sp, #16
   865f2:	4770      	bx	lr

000865f4 <__udivmoddi4>:
   865f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   865f8:	468c      	mov	ip, r1
   865fa:	460e      	mov	r6, r1
   865fc:	4604      	mov	r4, r0
   865fe:	9d08      	ldr	r5, [sp, #32]
   86600:	2b00      	cmp	r3, #0
   86602:	d150      	bne.n	866a6 <__udivmoddi4+0xb2>
   86604:	428a      	cmp	r2, r1
   86606:	4617      	mov	r7, r2
   86608:	d96c      	bls.n	866e4 <__udivmoddi4+0xf0>
   8660a:	fab2 fe82 	clz	lr, r2
   8660e:	f1be 0f00 	cmp.w	lr, #0
   86612:	d00b      	beq.n	8662c <__udivmoddi4+0x38>
   86614:	f1ce 0c20 	rsb	ip, lr, #32
   86618:	fa01 f60e 	lsl.w	r6, r1, lr
   8661c:	fa20 fc0c 	lsr.w	ip, r0, ip
   86620:	fa02 f70e 	lsl.w	r7, r2, lr
   86624:	ea4c 0c06 	orr.w	ip, ip, r6
   86628:	fa00 f40e 	lsl.w	r4, r0, lr
   8662c:	0c3a      	lsrs	r2, r7, #16
   8662e:	fbbc f9f2 	udiv	r9, ip, r2
   86632:	b2bb      	uxth	r3, r7
   86634:	fb02 cc19 	mls	ip, r2, r9, ip
   86638:	fb09 fa03 	mul.w	sl, r9, r3
   8663c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   86640:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   86644:	45b2      	cmp	sl, r6
   86646:	d90a      	bls.n	8665e <__udivmoddi4+0x6a>
   86648:	19f6      	adds	r6, r6, r7
   8664a:	f109 31ff 	add.w	r1, r9, #4294967295
   8664e:	f080 8125 	bcs.w	8689c <__udivmoddi4+0x2a8>
   86652:	45b2      	cmp	sl, r6
   86654:	f240 8122 	bls.w	8689c <__udivmoddi4+0x2a8>
   86658:	f1a9 0902 	sub.w	r9, r9, #2
   8665c:	443e      	add	r6, r7
   8665e:	eba6 060a 	sub.w	r6, r6, sl
   86662:	fbb6 f0f2 	udiv	r0, r6, r2
   86666:	fb02 6610 	mls	r6, r2, r0, r6
   8666a:	fb00 f303 	mul.w	r3, r0, r3
   8666e:	b2a4      	uxth	r4, r4
   86670:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   86674:	42a3      	cmp	r3, r4
   86676:	d909      	bls.n	8668c <__udivmoddi4+0x98>
   86678:	19e4      	adds	r4, r4, r7
   8667a:	f100 32ff 	add.w	r2, r0, #4294967295
   8667e:	f080 810b 	bcs.w	86898 <__udivmoddi4+0x2a4>
   86682:	42a3      	cmp	r3, r4
   86684:	f240 8108 	bls.w	86898 <__udivmoddi4+0x2a4>
   86688:	3802      	subs	r0, #2
   8668a:	443c      	add	r4, r7
   8668c:	2100      	movs	r1, #0
   8668e:	1ae4      	subs	r4, r4, r3
   86690:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86694:	2d00      	cmp	r5, #0
   86696:	d062      	beq.n	8675e <__udivmoddi4+0x16a>
   86698:	2300      	movs	r3, #0
   8669a:	fa24 f40e 	lsr.w	r4, r4, lr
   8669e:	602c      	str	r4, [r5, #0]
   866a0:	606b      	str	r3, [r5, #4]
   866a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   866a6:	428b      	cmp	r3, r1
   866a8:	d907      	bls.n	866ba <__udivmoddi4+0xc6>
   866aa:	2d00      	cmp	r5, #0
   866ac:	d055      	beq.n	8675a <__udivmoddi4+0x166>
   866ae:	2100      	movs	r1, #0
   866b0:	e885 0041 	stmia.w	r5, {r0, r6}
   866b4:	4608      	mov	r0, r1
   866b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   866ba:	fab3 f183 	clz	r1, r3
   866be:	2900      	cmp	r1, #0
   866c0:	f040 808f 	bne.w	867e2 <__udivmoddi4+0x1ee>
   866c4:	42b3      	cmp	r3, r6
   866c6:	d302      	bcc.n	866ce <__udivmoddi4+0xda>
   866c8:	4282      	cmp	r2, r0
   866ca:	f200 80fc 	bhi.w	868c6 <__udivmoddi4+0x2d2>
   866ce:	1a84      	subs	r4, r0, r2
   866d0:	eb66 0603 	sbc.w	r6, r6, r3
   866d4:	2001      	movs	r0, #1
   866d6:	46b4      	mov	ip, r6
   866d8:	2d00      	cmp	r5, #0
   866da:	d040      	beq.n	8675e <__udivmoddi4+0x16a>
   866dc:	e885 1010 	stmia.w	r5, {r4, ip}
   866e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   866e4:	b912      	cbnz	r2, 866ec <__udivmoddi4+0xf8>
   866e6:	2701      	movs	r7, #1
   866e8:	fbb7 f7f2 	udiv	r7, r7, r2
   866ec:	fab7 fe87 	clz	lr, r7
   866f0:	f1be 0f00 	cmp.w	lr, #0
   866f4:	d135      	bne.n	86762 <__udivmoddi4+0x16e>
   866f6:	2101      	movs	r1, #1
   866f8:	1bf6      	subs	r6, r6, r7
   866fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   866fe:	fa1f f887 	uxth.w	r8, r7
   86702:	fbb6 f2fc 	udiv	r2, r6, ip
   86706:	fb0c 6612 	mls	r6, ip, r2, r6
   8670a:	fb08 f002 	mul.w	r0, r8, r2
   8670e:	0c23      	lsrs	r3, r4, #16
   86710:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   86714:	42b0      	cmp	r0, r6
   86716:	d907      	bls.n	86728 <__udivmoddi4+0x134>
   86718:	19f6      	adds	r6, r6, r7
   8671a:	f102 33ff 	add.w	r3, r2, #4294967295
   8671e:	d202      	bcs.n	86726 <__udivmoddi4+0x132>
   86720:	42b0      	cmp	r0, r6
   86722:	f200 80d2 	bhi.w	868ca <__udivmoddi4+0x2d6>
   86726:	461a      	mov	r2, r3
   86728:	1a36      	subs	r6, r6, r0
   8672a:	fbb6 f0fc 	udiv	r0, r6, ip
   8672e:	fb0c 6610 	mls	r6, ip, r0, r6
   86732:	fb08 f800 	mul.w	r8, r8, r0
   86736:	b2a3      	uxth	r3, r4
   86738:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   8673c:	45a0      	cmp	r8, r4
   8673e:	d907      	bls.n	86750 <__udivmoddi4+0x15c>
   86740:	19e4      	adds	r4, r4, r7
   86742:	f100 33ff 	add.w	r3, r0, #4294967295
   86746:	d202      	bcs.n	8674e <__udivmoddi4+0x15a>
   86748:	45a0      	cmp	r8, r4
   8674a:	f200 80b9 	bhi.w	868c0 <__udivmoddi4+0x2cc>
   8674e:	4618      	mov	r0, r3
   86750:	eba4 0408 	sub.w	r4, r4, r8
   86754:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   86758:	e79c      	b.n	86694 <__udivmoddi4+0xa0>
   8675a:	4629      	mov	r1, r5
   8675c:	4628      	mov	r0, r5
   8675e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86762:	fa07 f70e 	lsl.w	r7, r7, lr
   86766:	f1ce 0320 	rsb	r3, lr, #32
   8676a:	fa26 f203 	lsr.w	r2, r6, r3
   8676e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86772:	fbb2 f1fc 	udiv	r1, r2, ip
   86776:	fa1f f887 	uxth.w	r8, r7
   8677a:	fb0c 2211 	mls	r2, ip, r1, r2
   8677e:	fa06 f60e 	lsl.w	r6, r6, lr
   86782:	fa20 f303 	lsr.w	r3, r0, r3
   86786:	fb01 f908 	mul.w	r9, r1, r8
   8678a:	4333      	orrs	r3, r6
   8678c:	0c1e      	lsrs	r6, r3, #16
   8678e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   86792:	45b1      	cmp	r9, r6
   86794:	fa00 f40e 	lsl.w	r4, r0, lr
   86798:	d909      	bls.n	867ae <__udivmoddi4+0x1ba>
   8679a:	19f6      	adds	r6, r6, r7
   8679c:	f101 32ff 	add.w	r2, r1, #4294967295
   867a0:	f080 808c 	bcs.w	868bc <__udivmoddi4+0x2c8>
   867a4:	45b1      	cmp	r9, r6
   867a6:	f240 8089 	bls.w	868bc <__udivmoddi4+0x2c8>
   867aa:	3902      	subs	r1, #2
   867ac:	443e      	add	r6, r7
   867ae:	eba6 0609 	sub.w	r6, r6, r9
   867b2:	fbb6 f0fc 	udiv	r0, r6, ip
   867b6:	fb0c 6210 	mls	r2, ip, r0, r6
   867ba:	fb00 f908 	mul.w	r9, r0, r8
   867be:	b29e      	uxth	r6, r3
   867c0:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   867c4:	45b1      	cmp	r9, r6
   867c6:	d907      	bls.n	867d8 <__udivmoddi4+0x1e4>
   867c8:	19f6      	adds	r6, r6, r7
   867ca:	f100 33ff 	add.w	r3, r0, #4294967295
   867ce:	d271      	bcs.n	868b4 <__udivmoddi4+0x2c0>
   867d0:	45b1      	cmp	r9, r6
   867d2:	d96f      	bls.n	868b4 <__udivmoddi4+0x2c0>
   867d4:	3802      	subs	r0, #2
   867d6:	443e      	add	r6, r7
   867d8:	eba6 0609 	sub.w	r6, r6, r9
   867dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   867e0:	e78f      	b.n	86702 <__udivmoddi4+0x10e>
   867e2:	f1c1 0720 	rsb	r7, r1, #32
   867e6:	fa22 f807 	lsr.w	r8, r2, r7
   867ea:	408b      	lsls	r3, r1
   867ec:	ea48 0303 	orr.w	r3, r8, r3
   867f0:	fa26 f407 	lsr.w	r4, r6, r7
   867f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   867f8:	fbb4 f9fe 	udiv	r9, r4, lr
   867fc:	fa1f fc83 	uxth.w	ip, r3
   86800:	fb0e 4419 	mls	r4, lr, r9, r4
   86804:	408e      	lsls	r6, r1
   86806:	fa20 f807 	lsr.w	r8, r0, r7
   8680a:	fb09 fa0c 	mul.w	sl, r9, ip
   8680e:	ea48 0806 	orr.w	r8, r8, r6
   86812:	ea4f 4618 	mov.w	r6, r8, lsr #16
   86816:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   8681a:	45a2      	cmp	sl, r4
   8681c:	fa02 f201 	lsl.w	r2, r2, r1
   86820:	fa00 f601 	lsl.w	r6, r0, r1
   86824:	d908      	bls.n	86838 <__udivmoddi4+0x244>
   86826:	18e4      	adds	r4, r4, r3
   86828:	f109 30ff 	add.w	r0, r9, #4294967295
   8682c:	d244      	bcs.n	868b8 <__udivmoddi4+0x2c4>
   8682e:	45a2      	cmp	sl, r4
   86830:	d942      	bls.n	868b8 <__udivmoddi4+0x2c4>
   86832:	f1a9 0902 	sub.w	r9, r9, #2
   86836:	441c      	add	r4, r3
   86838:	eba4 040a 	sub.w	r4, r4, sl
   8683c:	fbb4 f0fe 	udiv	r0, r4, lr
   86840:	fb0e 4410 	mls	r4, lr, r0, r4
   86844:	fb00 fc0c 	mul.w	ip, r0, ip
   86848:	fa1f f888 	uxth.w	r8, r8
   8684c:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   86850:	45a4      	cmp	ip, r4
   86852:	d907      	bls.n	86864 <__udivmoddi4+0x270>
   86854:	18e4      	adds	r4, r4, r3
   86856:	f100 3eff 	add.w	lr, r0, #4294967295
   8685a:	d229      	bcs.n	868b0 <__udivmoddi4+0x2bc>
   8685c:	45a4      	cmp	ip, r4
   8685e:	d927      	bls.n	868b0 <__udivmoddi4+0x2bc>
   86860:	3802      	subs	r0, #2
   86862:	441c      	add	r4, r3
   86864:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86868:	fba0 8902 	umull	r8, r9, r0, r2
   8686c:	eba4 0c0c 	sub.w	ip, r4, ip
   86870:	45cc      	cmp	ip, r9
   86872:	46c2      	mov	sl, r8
   86874:	46ce      	mov	lr, r9
   86876:	d315      	bcc.n	868a4 <__udivmoddi4+0x2b0>
   86878:	d012      	beq.n	868a0 <__udivmoddi4+0x2ac>
   8687a:	b155      	cbz	r5, 86892 <__udivmoddi4+0x29e>
   8687c:	ebb6 030a 	subs.w	r3, r6, sl
   86880:	eb6c 060e 	sbc.w	r6, ip, lr
   86884:	fa06 f707 	lsl.w	r7, r6, r7
   86888:	40cb      	lsrs	r3, r1
   8688a:	431f      	orrs	r7, r3
   8688c:	40ce      	lsrs	r6, r1
   8688e:	602f      	str	r7, [r5, #0]
   86890:	606e      	str	r6, [r5, #4]
   86892:	2100      	movs	r1, #0
   86894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86898:	4610      	mov	r0, r2
   8689a:	e6f7      	b.n	8668c <__udivmoddi4+0x98>
   8689c:	4689      	mov	r9, r1
   8689e:	e6de      	b.n	8665e <__udivmoddi4+0x6a>
   868a0:	4546      	cmp	r6, r8
   868a2:	d2ea      	bcs.n	8687a <__udivmoddi4+0x286>
   868a4:	ebb8 0a02 	subs.w	sl, r8, r2
   868a8:	eb69 0e03 	sbc.w	lr, r9, r3
   868ac:	3801      	subs	r0, #1
   868ae:	e7e4      	b.n	8687a <__udivmoddi4+0x286>
   868b0:	4670      	mov	r0, lr
   868b2:	e7d7      	b.n	86864 <__udivmoddi4+0x270>
   868b4:	4618      	mov	r0, r3
   868b6:	e78f      	b.n	867d8 <__udivmoddi4+0x1e4>
   868b8:	4681      	mov	r9, r0
   868ba:	e7bd      	b.n	86838 <__udivmoddi4+0x244>
   868bc:	4611      	mov	r1, r2
   868be:	e776      	b.n	867ae <__udivmoddi4+0x1ba>
   868c0:	3802      	subs	r0, #2
   868c2:	443c      	add	r4, r7
   868c4:	e744      	b.n	86750 <__udivmoddi4+0x15c>
   868c6:	4608      	mov	r0, r1
   868c8:	e706      	b.n	866d8 <__udivmoddi4+0xe4>
   868ca:	3a02      	subs	r2, #2
   868cc:	443e      	add	r6, r7
   868ce:	e72b      	b.n	86728 <__udivmoddi4+0x134>

000868d0 <__aeabi_idiv0>:
   868d0:	4770      	bx	lr
   868d2:	bf00      	nop

000868d4 <all_uart_definitions>:
   868d4:	0600 400e 0700 400e 0008 0000 0008 0000     ...@...@........

000868e4 <line2addr>:
   868e4:	4000 5414 0a0d 003e 0a0d 3e3e 003e 0000     .@.T..>...>>>...
   868f4:	0d20 000a 2e25 7333 2520 3230 2064 2e25      ...%.3s %02d %.
   86904:	7333 2520 3230 0064 3025 6432 253a 3230     3s %02d.%02d:%02
   86914:	3a64 3025 6432 0020                         d:%02d .

0008691c <flashSequ>:
   8691c:	0032 0000 01f4 0000 0032 0000 04b0 0000     2.......2.......
   8692c:	0000 0000 6874 0000 646e 0000 6472 0000     ....th..nd..rd..
   8693c:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
   8694c:	0000 0000 614d 6372 0068 0000 7041 6972     ....March...Apri
   8695c:	006c 0000 614d 0079 754a 656e 0000 0000     l...May.June....
   8696c:	754a 796c 0000 0000 7541 7567 7473 0000     July....August..
   8697c:	6553 7470 6d65 6562 0072 0000 634f 6f74     September...Octo
   8698c:	6562 0072 6f4e 6576 626d 7265 0000 0000     ber.November....
   8699c:	6544 6563 626d 7265 0000 0000 7553 646e     December....Sund
   869ac:	7961 0000 6f4d 646e 7961 0000 7554 7365     ay..Monday..Tues
   869bc:	6164 0079 6557 6e64 7365 6164 0079 0000     day.Wednesday...
   869cc:	6854 7275 6473 7961 0000 0000 7246 6469     Thursday....Frid
   869dc:	7961 0000 6153 7574 6472 7961 0000 0000     ay..Saturday....

000869ec <uart_opt>:
   869ec:	d800 05b8 c200 0001 0800 0000 0a0d 090a     ................
   869fc:	5f2a 5f5f 5f5f 5f5f 5f5f 5f5f 5f5f 205f     *______________ 
   86a0c:	5043 2e55 4341 2d58 5441 4153 334d 3455     CPU.ACX-ATSAM3U4
   86a1c:	4143 412d 2055 5f5f 5f5f 5f5f 5f5f 5f5f     CA-AU __________
   86a2c:	5f5f 5f5f 0d2a 0a0a 0000 0000 5043 2e55     ____*.......CPU.
   86a3c:	4341 2058 4120 5354 4d41 5533 4334 0000     ACX  ATSAM3U4C..
   86a4c:	7777 2e77 2d61 2d32 2e73 7266 0000 0000     www.a-2-s.fr....
   86a5c:	6548 6c6c 206f 6f57 6c72 2064 0030 0000     Hello World 0...
   86a6c:	6548 6c6c 206f 6f57 6c72 2064 0031 0000     Hello World 1...
   86a7c:	6548 6c6c 206f 6f57 6c72 2064 0032 0000     Hello World 2...
   86a8c:	6548 6c6c 206f 6f57 6c72 2064 0033 0000     Hello World 3...
   86a9c:	434c 2044 6548 6c6c 206f 6f57 6c72 2164     LCD Hello World!
   86aac:	0a0d 0000                                   ....

00086ab0 <_global_impure_ptr>:
   86ab0:	0588 2000 4e49 0046 6e69 0066 414e 004e     ... INF.inf.NAN.
   86ac0:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
   86ad0:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
   86ae0:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
   86af0:	296c 0000                                   l)..

00086af4 <blanks.7223>:
   86af4:	2020 2020 2020 2020 2020 2020 2020 2020                     

00086b04 <zeroes.7224>:
   86b04:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   86b14:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
   86b24:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......
   86b34:	0000 0000                                   ....

00086b38 <__mprec_bigtens>:
   86b38:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   86b48:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   86b58:	bf3c 7f73 4fdd 7515                         <.s..O.u

00086b60 <__mprec_tens>:
   86b60:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   86b70:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   86b80:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   86b90:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   86ba0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   86bb0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   86bc0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   86bd0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   86be0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   86bf0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   86c00:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   86c10:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   86c20:	9db4 79d9 7843 44ea                         ...yCx.D

00086c28 <p05.6055>:
   86c28:	0005 0000 0019 0000 007d 0000               ........}...

00086c34 <_ctype_>:
   86c34:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   86c44:	2020 2020 2020 2020 2020 2020 2020 2020                     
   86c54:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   86c64:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   86c74:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   86c84:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   86c94:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   86ca4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   86cb4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00086d38 <_init>:
   86d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86d3a:	bf00      	nop
   86d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86d3e:	bc08      	pop	{r3}
   86d40:	469e      	mov	lr, r3
   86d42:	4770      	bx	lr

00086d44 <__init_array_start>:
   86d44:	000837b5 	.word	0x000837b5

00086d48 <__frame_dummy_init_array_entry>:
   86d48:	000800e1                                ....

00086d4c <_fini>:
   86d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86d4e:	bf00      	nop
   86d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86d52:	bc08      	pop	{r3}
   86d54:	469e      	mov	lr, r3
   86d56:	4770      	bx	lr

00086d58 <__fini_array_start>:
   86d58:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000010:	4a21      	ldr	r2, [pc, #132]	; (20000098 <SystemInit+0x8c>)
20000012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2000001a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
2000001e:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
20000022:	6a1b      	ldr	r3, [r3, #32]
20000024:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20000028:	d107      	bne.n	2000003a <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000002a:	4a1c      	ldr	r2, [pc, #112]	; (2000009c <SystemInit+0x90>)
2000002c:	4b1c      	ldr	r3, [pc, #112]	; (200000a0 <SystemInit+0x94>)
2000002e:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000030:	461a      	mov	r2, r3
20000032:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000034:	f013 0f01 	tst.w	r3, #1
20000038:	d0fb      	beq.n	20000032 <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000003a:	4a1a      	ldr	r2, [pc, #104]	; (200000a4 <SystemInit+0x98>)
2000003c:	4b18      	ldr	r3, [pc, #96]	; (200000a0 <SystemInit+0x94>)
2000003e:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000040:	461a      	mov	r2, r3
20000042:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000044:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20000048:	d0fb      	beq.n	20000042 <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2000004a:	4a15      	ldr	r2, [pc, #84]	; (200000a0 <SystemInit+0x94>)
2000004c:	6b13      	ldr	r3, [r2, #48]	; 0x30
2000004e:	f023 0303 	bic.w	r3, r3, #3
20000052:	f043 0301 	orr.w	r3, r3, #1
20000056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000005a:	f013 0f08 	tst.w	r3, #8
2000005e:	d0fb      	beq.n	20000058 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000060:	4a11      	ldr	r2, [pc, #68]	; (200000a8 <SystemInit+0x9c>)
20000062:	4b0f      	ldr	r3, [pc, #60]	; (200000a0 <SystemInit+0x94>)
20000064:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000066:	461a      	mov	r2, r3
20000068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000006a:	f013 0f02 	tst.w	r3, #2
2000006e:	d0fb      	beq.n	20000068 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000070:	2211      	movs	r2, #17
20000072:	4b0b      	ldr	r3, [pc, #44]	; (200000a0 <SystemInit+0x94>)
20000074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000076:	461a      	mov	r2, r3
20000078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000007a:	f013 0f08 	tst.w	r3, #8
2000007e:	d0fb      	beq.n	20000078 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000080:	2212      	movs	r2, #18
20000082:	4b07      	ldr	r3, [pc, #28]	; (200000a0 <SystemInit+0x94>)
20000084:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000086:	461a      	mov	r2, r3
20000088:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000008a:	f013 0f08 	tst.w	r3, #8
2000008e:	d0fb      	beq.n	20000088 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000090:	4a06      	ldr	r2, [pc, #24]	; (200000ac <SystemInit+0xa0>)
20000092:	4b07      	ldr	r3, [pc, #28]	; (200000b0 <SystemInit+0xa4>)
20000094:	601a      	str	r2, [r3, #0]
20000096:	4770      	bx	lr
20000098:	400e0800 	.word	0x400e0800
2000009c:	00370809 	.word	0x00370809
200000a0:	400e0400 	.word	0x400e0400
200000a4:	01370809 	.word	0x01370809
200000a8:	200f3f01 	.word	0x200f3f01
200000ac:	05b8d800 	.word	0x05b8d800
200000b0:	2000057c 	.word	0x2000057c

200000b4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000b4:	4b16      	ldr	r3, [pc, #88]	; (20000110 <system_init_flash+0x5c>)
200000b6:	4298      	cmp	r0, r3
200000b8:	d912      	bls.n	200000e0 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000ba:	4b16      	ldr	r3, [pc, #88]	; (20000114 <system_init_flash+0x60>)
200000bc:	4298      	cmp	r0, r3
200000be:	d916      	bls.n	200000ee <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200000c0:	4b15      	ldr	r3, [pc, #84]	; (20000118 <system_init_flash+0x64>)
200000c2:	4298      	cmp	r0, r3
200000c4:	d91b      	bls.n	200000fe <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200000c6:	4b15      	ldr	r3, [pc, #84]	; (2000011c <system_init_flash+0x68>)
200000c8:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200000ca:	bf94      	ite	ls
200000cc:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000d0:	f44f 6380 	movhi.w	r3, #1024	; 0x400
200000d4:	4a12      	ldr	r2, [pc, #72]	; (20000120 <system_init_flash+0x6c>)
200000d6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000dc:	6013      	str	r3, [r2, #0]
200000de:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200000e0:	2300      	movs	r3, #0
200000e2:	4a0f      	ldr	r2, [pc, #60]	; (20000120 <system_init_flash+0x6c>)
200000e4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200000e6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000ea:	6013      	str	r3, [r2, #0]
200000ec:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200000ee:	f44f 7380 	mov.w	r3, #256	; 0x100
200000f2:	4a0b      	ldr	r2, [pc, #44]	; (20000120 <system_init_flash+0x6c>)
200000f4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200000f6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000fa:	6013      	str	r3, [r2, #0]
200000fc:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200000fe:	f44f 7300 	mov.w	r3, #512	; 0x200
20000102:	4a07      	ldr	r2, [pc, #28]	; (20000120 <system_init_flash+0x6c>)
20000104:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000106:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000010a:	6013      	str	r3, [r2, #0]
2000010c:	4770      	bx	lr
2000010e:	bf00      	nop
20000110:	016e35ff 	.word	0x016e35ff
20000114:	026259ff 	.word	0x026259ff
20000118:	044aa1ff 	.word	0x044aa1ff
2000011c:	0501bcff 	.word	0x0501bcff
20000120:	400e0800 	.word	0x400e0800

20000124 <xNextTaskUnblockTime>:
20000124:	ffffffff                                ....

20000128 <wCRCTable>:
20000128:	00000000 0000c0c1 0000c181 00000140     ............@...
20000138:	0000c301 000003c0 00000280 0000c241     ............A...
20000148:	0000c601 000006c0 00000780 0000c741     ............A...
20000158:	00000500 0000c5c1 0000c481 00000440     ............@...
20000168:	0000cc01 00000cc0 00000d80 0000cd41     ............A...
20000178:	00000f00 0000cfc1 0000ce81 00000e40     ............@...
20000188:	00000a00 0000cac1 0000cb81 00000b40     ............@...
20000198:	0000c901 000009c0 00000880 0000c841     ............A...
200001a8:	0000d801 000018c0 00001980 0000d941     ............A...
200001b8:	00001b00 0000dbc1 0000da81 00001a40     ............@...
200001c8:	00001e00 0000dec1 0000df81 00001f40     ............@...
200001d8:	0000dd01 00001dc0 00001c80 0000dc41     ............A...
200001e8:	00001400 0000d4c1 0000d581 00001540     ............@...
200001f8:	0000d701 000017c0 00001680 0000d641     ............A...
20000208:	0000d201 000012c0 00001380 0000d341     ............A...
20000218:	00001100 0000d1c1 0000d081 00001040     ............@...
20000228:	0000f001 000030c0 00003180 0000f141     .....0...1..A...
20000238:	00003300 0000f3c1 0000f281 00003240     .3..........@2..
20000248:	00003600 0000f6c1 0000f781 00003740     .6..........@7..
20000258:	0000f501 000035c0 00003480 0000f441     .....5...4..A...
20000268:	00003c00 0000fcc1 0000fd81 00003d40     .<..........@=..
20000278:	0000ff01 00003fc0 00003e80 0000fe41     .....?...>..A...
20000288:	0000fa01 00003ac0 00003b80 0000fb41     .....:...;..A...
20000298:	00003900 0000f9c1 0000f881 00003840     .9..........@8..
200002a8:	00002800 0000e8c1 0000e981 00002940     .(..........@)..
200002b8:	0000eb01 00002bc0 00002a80 0000ea41     .....+...*..A...
200002c8:	0000ee01 00002ec0 00002f80 0000ef41     ........./..A...
200002d8:	00002d00 0000edc1 0000ec81 00002c40     .-..........@,..
200002e8:	0000e401 000024c0 00002580 0000e541     .....$...%..A...
200002f8:	00002700 0000e7c1 0000e681 00002640     .'..........@&..
20000308:	00002200 0000e2c1 0000e381 00002340     ."..........@#..
20000318:	0000e101 000021c0 00002080 0000e041     .....!... ..A...
20000328:	0000a001 000060c0 00006180 0000a141     .....`...a..A...
20000338:	00006300 0000a3c1 0000a281 00006240     .c..........@b..
20000348:	00006600 0000a6c1 0000a781 00006740     .f..........@g..
20000358:	0000a501 000065c0 00006480 0000a441     .....e...d..A...
20000368:	00006c00 0000acc1 0000ad81 00006d40     .l..........@m..
20000378:	0000af01 00006fc0 00006e80 0000ae41     .....o...n..A...
20000388:	0000aa01 00006ac0 00006b80 0000ab41     .....j...k..A...
20000398:	00006900 0000a9c1 0000a881 00006840     .i..........@h..
200003a8:	00007800 0000b8c1 0000b981 00007940     .x..........@y..
200003b8:	0000bb01 00007bc0 00007a80 0000ba41     .....{...z..A...
200003c8:	0000be01 00007ec0 00007f80 0000bf41     .....~......A...
200003d8:	00007d00 0000bdc1 0000bc81 00007c40     .}..........@|..
200003e8:	0000b401 000074c0 00007580 0000b541     .....t...u..A...
200003f8:	00007700 0000b7c1 0000b681 00007640     .w..........@v..
20000408:	00007200 0000b2c1 0000b381 00007340     .r..........@s..
20000418:	0000b101 000071c0 00007080 0000b041     .....q...p..A...
20000428:	00005000 000090c1 00009181 00005140     .P..........@Q..
20000438:	00009301 000053c0 00005280 00009241     .....S...R..A...
20000448:	00009601 000056c0 00005780 00009741     .....V...W..A...
20000458:	00005500 000095c1 00009481 00005440     .U..........@T..
20000468:	00009c01 00005cc0 00005d80 00009d41     .....\...]..A...
20000478:	00005f00 00009fc1 00009e81 00005e40     ._..........@^..
20000488:	00005a00 00009ac1 00009b81 00005b40     .Z..........@[..
20000498:	00009901 000059c0 00005880 00009841     .....Y...X..A...
200004a8:	00008801 000048c0 00004980 00008941     .....H...I..A...
200004b8:	00004b00 00008bc1 00008a81 00004a40     .K..........@J..
200004c8:	00004e00 00008ec1 00008f81 00004f40     .N..........@O..
200004d8:	00008d01 00004dc0 00004c80 00008c41     .....M...L..A...
200004e8:	00004400 000084c1 00008581 00004540     .D..........@E..
200004f8:	00008701 000047c0 00004680 00008641     .....G...F..A...
20000508:	00008201 000042c0 00004380 00008341     .....B...C..A...
20000518:	00004100 000081c1 00008081 00004040     .A..........@@..

20000528 <pErrorFunc>:
20000528:	00080871                                q...

2000052c <daysOfWeek>:
2000052c:	000869a8 000869b0 000869b8 000869c0     .i...i...i...i..
2000053c:	000869cc 000869d8 000869e0              .i...i...i..

20000548 <months>:
20000548:	0008693c 00086944 00086950 00086958     <i..Di..Pi..Xi..
20000558:	00086960 00086964 0008696c 00086974     `i..di..li..ti..
20000568:	0008697c 00086988 00086990 0008699c     |i...i...i...i..

20000578 <g_interrupt_enabled>:
20000578:	00000001                                ....

2000057c <SystemCoreClock>:
2000057c:	003d0900                                ..=.

20000580 <_impure_ptr>:
20000580:	20000588 00000000                       ... ....

20000588 <impure_data>:
20000588:	00000000 20000874 200008dc 20000944     ....t.. ... D.. 
	...
20000630:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000640:	0005deec 0000000b 00000000 00000000     ................
	...

200009b0 <__atexit_recursive_mutex>:
200009b0:	20001634                                4.. 

200009b4 <__global_locale>:
200009b4:	00000043 00000000 00000000 00000000     C...............
	...
200009d4:	00000043 00000000 00000000 00000000     C...............
	...
200009f4:	00000043 00000000 00000000 00000000     C...............
	...
20000a14:	00000043 00000000 00000000 00000000     C...............
	...
20000a34:	00000043 00000000 00000000 00000000     C...............
	...
20000a54:	00000043 00000000 00000000 00000000     C...............
	...
20000a74:	00000043 00000000 00000000 00000000     C...............
	...
20000a94:	000854c9 00084ce1 00000000 00086c34     .T...L......4l..
20000aa4:	00086b30 00086a34 00086a34 00086a34     0k..4j..4j..4j..
20000ab4:	00086a34 00086a34 00086a34 00086a34     4j..4j..4j..4j..
20000ac4:	00086a34 00086a34 ffffffff ffffffff     4j..4j..........
20000ad4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000afc:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000b20 <__malloc_av_>:
	...
20000b28:	20000b20 20000b20 20000b28 20000b28      ..  .. (.. (.. 
20000b38:	20000b30 20000b30 20000b38 20000b38     0.. 0.. 8.. 8.. 
20000b48:	20000b40 20000b40 20000b48 20000b48     @.. @.. H.. H.. 
20000b58:	20000b50 20000b50 20000b58 20000b58     P.. P.. X.. X.. 
20000b68:	20000b60 20000b60 20000b68 20000b68     `.. `.. h.. h.. 
20000b78:	20000b70 20000b70 20000b78 20000b78     p.. p.. x.. x.. 
20000b88:	20000b80 20000b80 20000b88 20000b88     ... ... ... ... 
20000b98:	20000b90 20000b90 20000b98 20000b98     ... ... ... ... 
20000ba8:	20000ba0 20000ba0 20000ba8 20000ba8     ... ... ... ... 
20000bb8:	20000bb0 20000bb0 20000bb8 20000bb8     ... ... ... ... 
20000bc8:	20000bc0 20000bc0 20000bc8 20000bc8     ... ... ... ... 
20000bd8:	20000bd0 20000bd0 20000bd8 20000bd8     ... ... ... ... 
20000be8:	20000be0 20000be0 20000be8 20000be8     ... ... ... ... 
20000bf8:	20000bf0 20000bf0 20000bf8 20000bf8     ... ... ... ... 
20000c08:	20000c00 20000c00 20000c08 20000c08     ... ... ... ... 
20000c18:	20000c10 20000c10 20000c18 20000c18     ... ... ... ... 
20000c28:	20000c20 20000c20 20000c28 20000c28      ..  .. (.. (.. 
20000c38:	20000c30 20000c30 20000c38 20000c38     0.. 0.. 8.. 8.. 
20000c48:	20000c40 20000c40 20000c48 20000c48     @.. @.. H.. H.. 
20000c58:	20000c50 20000c50 20000c58 20000c58     P.. P.. X.. X.. 
20000c68:	20000c60 20000c60 20000c68 20000c68     `.. `.. h.. h.. 
20000c78:	20000c70 20000c70 20000c78 20000c78     p.. p.. x.. x.. 
20000c88:	20000c80 20000c80 20000c88 20000c88     ... ... ... ... 
20000c98:	20000c90 20000c90 20000c98 20000c98     ... ... ... ... 
20000ca8:	20000ca0 20000ca0 20000ca8 20000ca8     ... ... ... ... 
20000cb8:	20000cb0 20000cb0 20000cb8 20000cb8     ... ... ... ... 
20000cc8:	20000cc0 20000cc0 20000cc8 20000cc8     ... ... ... ... 
20000cd8:	20000cd0 20000cd0 20000cd8 20000cd8     ... ... ... ... 
20000ce8:	20000ce0 20000ce0 20000ce8 20000ce8     ... ... ... ... 
20000cf8:	20000cf0 20000cf0 20000cf8 20000cf8     ... ... ... ... 
20000d08:	20000d00 20000d00 20000d08 20000d08     ... ... ... ... 
20000d18:	20000d10 20000d10 20000d18 20000d18     ... ... ... ... 
20000d28:	20000d20 20000d20 20000d28 20000d28      ..  .. (.. (.. 
20000d38:	20000d30 20000d30 20000d38 20000d38     0.. 0.. 8.. 8.. 
20000d48:	20000d40 20000d40 20000d48 20000d48     @.. @.. H.. H.. 
20000d58:	20000d50 20000d50 20000d58 20000d58     P.. P.. X.. X.. 
20000d68:	20000d60 20000d60 20000d68 20000d68     `.. `.. h.. h.. 
20000d78:	20000d70 20000d70 20000d78 20000d78     p.. p.. x.. x.. 
20000d88:	20000d80 20000d80 20000d88 20000d88     ... ... ... ... 
20000d98:	20000d90 20000d90 20000d98 20000d98     ... ... ... ... 
20000da8:	20000da0 20000da0 20000da8 20000da8     ... ... ... ... 
20000db8:	20000db0 20000db0 20000db8 20000db8     ... ... ... ... 
20000dc8:	20000dc0 20000dc0 20000dc8 20000dc8     ... ... ... ... 
20000dd8:	20000dd0 20000dd0 20000dd8 20000dd8     ... ... ... ... 
20000de8:	20000de0 20000de0 20000de8 20000de8     ... ... ... ... 
20000df8:	20000df0 20000df0 20000df8 20000df8     ... ... ... ... 
20000e08:	20000e00 20000e00 20000e08 20000e08     ... ... ... ... 
20000e18:	20000e10 20000e10 20000e18 20000e18     ... ... ... ... 
20000e28:	20000e20 20000e20 20000e28 20000e28      ..  .. (.. (.. 
20000e38:	20000e30 20000e30 20000e38 20000e38     0.. 0.. 8.. 8.. 
20000e48:	20000e40 20000e40 20000e48 20000e48     @.. @.. H.. H.. 
20000e58:	20000e50 20000e50 20000e58 20000e58     P.. P.. X.. X.. 
20000e68:	20000e60 20000e60 20000e68 20000e68     `.. `.. h.. h.. 
20000e78:	20000e70 20000e70 20000e78 20000e78     p.. p.. x.. x.. 
20000e88:	20000e80 20000e80 20000e88 20000e88     ... ... ... ... 
20000e98:	20000e90 20000e90 20000e98 20000e98     ... ... ... ... 
20000ea8:	20000ea0 20000ea0 20000ea8 20000ea8     ... ... ... ... 
20000eb8:	20000eb0 20000eb0 20000eb8 20000eb8     ... ... ... ... 
20000ec8:	20000ec0 20000ec0 20000ec8 20000ec8     ... ... ... ... 
20000ed8:	20000ed0 20000ed0 20000ed8 20000ed8     ... ... ... ... 
20000ee8:	20000ee0 20000ee0 20000ee8 20000ee8     ... ... ... ... 
20000ef8:	20000ef0 20000ef0 20000ef8 20000ef8     ... ... ... ... 
20000f08:	20000f00 20000f00 20000f08 20000f08     ... ... ... ... 
20000f18:	20000f10 20000f10 20000f18 20000f18     ... ... ... ... 

20000f28 <__malloc_sbrk_base>:
20000f28:	ffffffff                                ....

20000f2c <__malloc_trim_threshold>:
20000f2c:	00020000                                ....
