
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000aa84  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008aa84  0008aa84  0001aa84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000fd8  20000000  0008aa8c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001330  20000fd8  0008ba64  00020fd8  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020fd8  2**0
                  CONTENTS, READONLY
  6 .comment      000000b2  00000000  00000000  00021001  2**0
                  CONTENTS, READONLY
  7 .debug_info   00027f08  00000000  00000000  000210b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005aa5  00000000  00000000  00048fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000696b  00000000  00000000  0004ea60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000eb0  00000000  00000000  000553cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d18  00000000  00000000  0005627b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c2c5  00000000  00000000  00056f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001bfb8  00000000  00000000  00073258  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054045  00000000  00000000  0008f210  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002e04  00000000  00000000  000e3258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 3d 1b 08 00 39 1b 08 00 39 1b 08 00     .@. =...9...9...
   80010:	39 1b 08 00 39 1b 08 00 39 1b 08 00 00 00 00 00     9...9...9.......
	...
   8002c:	39 1b 08 00 39 1b 08 00 00 00 00 00 39 1b 08 00     9...9.......9...
   8003c:	39 1b 08 00 39 1b 08 00 39 1b 08 00 9d 29 08 00     9...9...9....)..
   8004c:	39 1b 08 00 39 1b 08 00 39 1b 08 00 39 1b 08 00     9...9...9...9...
   8005c:	39 1b 08 00 69 41 08 00 39 1b 08 00 4d 12 08 00     9...iA..9...M...
   8006c:	61 12 08 00 39 1b 08 00 1d 06 08 00 39 1b 08 00     a...9.......9...
   8007c:	39 1b 08 00 39 1b 08 00 39 1b 08 00 39 1b 08 00     9...9...9...9...
   8008c:	39 1b 08 00 39 1b 08 00 39 1b 08 00 e5 43 08 00     9...9...9....C..
   8009c:	39 1b 08 00 39 1b 08 00 39 1b 08 00 39 1b 08 00     9...9...9...9...
   800ac:	39 1b 08 00 39 1b 08 00 39 1b 08 00 39 1b 08 00     9...9...9...9...

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000fd8 	.word	0x20000fd8
   800d8:	00000000 	.word	0x00000000
   800dc:	0008aa8c 	.word	0x0008aa8c

000800e0 <frame_dummy>:
   800e0:	4b0c      	ldr	r3, [pc, #48]	; (80114 <frame_dummy+0x34>)
   800e2:	b143      	cbz	r3, 800f6 <frame_dummy+0x16>
   800e4:	480c      	ldr	r0, [pc, #48]	; (80118 <frame_dummy+0x38>)
   800e6:	b510      	push	{r4, lr}
   800e8:	490c      	ldr	r1, [pc, #48]	; (8011c <frame_dummy+0x3c>)
   800ea:	f3af 8000 	nop.w
   800ee:	480c      	ldr	r0, [pc, #48]	; (80120 <frame_dummy+0x40>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b923      	cbnz	r3, 800fe <frame_dummy+0x1e>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	480a      	ldr	r0, [pc, #40]	; (80120 <frame_dummy+0x40>)
   800f8:	6803      	ldr	r3, [r0, #0]
   800fa:	b933      	cbnz	r3, 8010a <frame_dummy+0x2a>
   800fc:	4770      	bx	lr
   800fe:	4b09      	ldr	r3, [pc, #36]	; (80124 <frame_dummy+0x44>)
   80100:	2b00      	cmp	r3, #0
   80102:	d0f7      	beq.n	800f4 <frame_dummy+0x14>
   80104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80108:	4718      	bx	r3
   8010a:	4b06      	ldr	r3, [pc, #24]	; (80124 <frame_dummy+0x44>)
   8010c:	2b00      	cmp	r3, #0
   8010e:	d0f5      	beq.n	800fc <frame_dummy+0x1c>
   80110:	4718      	bx	r3
   80112:	bf00      	nop
   80114:	00000000 	.word	0x00000000
   80118:	0008aa8c 	.word	0x0008aa8c
   8011c:	20000fdc 	.word	0x20000fdc
   80120:	0008aa8c 	.word	0x0008aa8c
   80124:	00000000 	.word	0x00000000

00080128 <Appli>:




uint32_t Appli(uint32_t sc, ...)
{
   80128:	b40f      	push	{r0, r1, r2, r3}
   8012a:	b538      	push	{r3, r4, r5, lr}
   8012c:	9904      	ldr	r1, [sp, #16]
	switch(sc)
   8012e:	2964      	cmp	r1, #100	; 0x64
   80130:	d005      	beq.n	8013e <Appli+0x16>
   80132:	2966      	cmp	r1, #102	; 0x66
   80134:	d059      	beq.n	801ea <Appli+0xc2>
//#endif
		break;


	default:
		Error(ERROR_APPLI_SWITCH_BAD_SC,sc);
   80136:	2010      	movs	r0, #16
   80138:	4b2e      	ldr	r3, [pc, #184]	; (801f4 <Appli+0xcc>)
   8013a:	4798      	blx	r3
   8013c:	e055      	b.n	801ea <Appli+0xc2>
		gpio_configure_pin(CMD_MOSFET,			CMD_MOSFET_FLAGS);
   8013e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80142:	2020      	movs	r0, #32
   80144:	4c2c      	ldr	r4, [pc, #176]	; (801f8 <Appli+0xd0>)
   80146:	47a0      	blx	r4
		gpio_configure_pin(CMD_MOT_SERRURE,		CMD_MOT_SERRURE_FLAGS);
   80148:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8014c:	2021      	movs	r0, #33	; 0x21
   8014e:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS,			CMD_RELAIS_FLAGS);
   80150:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80154:	2022      	movs	r0, #34	; 0x22
   80156:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS_1,		CMD_RELAIS_1_FLAGS);
   80158:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8015c:	2023      	movs	r0, #35	; 0x23
   8015e:	47a0      	blx	r4
		gpio_configure_pin(CMD_RELAIS_2,		CMD_RELAIS_2_FLAGS);
   80160:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80164:	2024      	movs	r0, #36	; 0x24
   80166:	47a0      	blx	r4
		pmc_enable_periph_clk(ID_PIOA);
   80168:	200a      	movs	r0, #10
   8016a:	4d24      	ldr	r5, [pc, #144]	; (801fc <Appli+0xd4>)
   8016c:	47a8      	blx	r5
		pmc_enable_periph_clk(ID_PIOB);
   8016e:	200b      	movs	r0, #11
   80170:	47a8      	blx	r5
		gpio_configure_pin(PENE_OUVERT,			PENE_OUVERT_FLAGS);
   80172:	4d23      	ldr	r5, [pc, #140]	; (80200 <Appli+0xd8>)
   80174:	4629      	mov	r1, r5
   80176:	200e      	movs	r0, #14
   80178:	47a0      	blx	r4
		gpio_configure_pin(PENE_FERME,			PENE_FERME_FLAGS);
   8017a:	4629      	mov	r1, r5
   8017c:	200f      	movs	r0, #15
   8017e:	47a0      	blx	r4
		gpio_configure_pin(IN_ILS,				IN_ILS_FLAGS);
   80180:	4629      	mov	r1, r5
   80182:	2010      	movs	r0, #16
   80184:	47a0      	blx	r4
		gpio_configure_pin(IN_SV,				IN_SV_FLAGS);
   80186:	4629      	mov	r1, r5
   80188:	2011      	movs	r0, #17
   8018a:	47a0      	blx	r4
		gpio_configure_pin(IN_RADAR,			IN_RADAR_FLAGS);
   8018c:	4629      	mov	r1, r5
   8018e:	2018      	movs	r0, #24
   80190:	47a0      	blx	r4
		gpio_configure_pin(IN_DVU,				IN_DVU_FLAGS);
   80192:	4629      	mov	r1, r5
   80194:	2019      	movs	r0, #25
   80196:	47a0      	blx	r4
		gpio_configure_pin(IN_PREMIERE_ENTREE,	IN_PREMIERE_ENTREE_FLAGS);
   80198:	4629      	mov	r1, r5
   8019a:	201a      	movs	r0, #26
   8019c:	47a0      	blx	r4
		gpio_configure_pin(IN_DVU_GENERAL,		IN_DVU_GENERAL_FLAGS);
   8019e:	4629      	mov	r1, r5
   801a0:	201b      	movs	r0, #27
   801a2:	47a0      	blx	r4
		gpio_configure_pin(IN_ENTREE_LIBRE,		IN_ENTREE_OPTION_FLAGS);
   801a4:	4629      	mov	r1, r5
   801a6:	201c      	movs	r0, #28
   801a8:	47a0      	blx	r4
		gpio_configure_pin(IN_ENTREE_OPTION,	IN_ENTREE_OPTION_FLAGS);
   801aa:	4629      	mov	r1, r5
   801ac:	201d      	movs	r0, #29
   801ae:	47a0      	blx	r4
		gpio_configure_pin(SW1_PUSHBUTTON,		SWS_PUSHBUTTON_FLAGS);
   801b0:	4629      	mov	r1, r5
   801b2:	2036      	movs	r0, #54	; 0x36
   801b4:	47a0      	blx	r4
		gpio_configure_pin(SW2_PUSHBUTTON,		SWS_PUSHBUTTON_FLAGS);
   801b6:	4629      	mov	r1, r5
   801b8:	2037      	movs	r0, #55	; 0x37
   801ba:	47a0      	blx	r4
		gpio_configure_pin(SW2_PUSHBUTTON,		SWS_PUSHBUTTON_FLAGS);
   801bc:	4629      	mov	r1, r5
   801be:	2037      	movs	r0, #55	; 0x37
   801c0:	47a0      	blx	r4
		Putstr(WELCOME_MSG);
   801c2:	4910      	ldr	r1, [pc, #64]	; (80204 <Appli+0xdc>)
   801c4:	2067      	movs	r0, #103	; 0x67
   801c6:	4b10      	ldr	r3, [pc, #64]	; (80208 <Appli+0xe0>)
   801c8:	4798      	blx	r3
		LcdPutstr("CPU.ACX  ATSAM3U4C",2,1);
   801ca:	2301      	movs	r3, #1
   801cc:	2202      	movs	r2, #2
   801ce:	490f      	ldr	r1, [pc, #60]	; (8020c <Appli+0xe4>)
   801d0:	2068      	movs	r0, #104	; 0x68
   801d2:	4c0f      	ldr	r4, [pc, #60]	; (80210 <Appli+0xe8>)
   801d4:	47a0      	blx	r4
		Menu(MENU_NEW);
   801d6:	2064      	movs	r0, #100	; 0x64
   801d8:	4b0e      	ldr	r3, [pc, #56]	; (80214 <Appli+0xec>)
   801da:	4798      	blx	r3
		ComRS485(COMRS485_NEW);
   801dc:	2064      	movs	r0, #100	; 0x64
   801de:	4b0e      	ldr	r3, [pc, #56]	; (80218 <Appli+0xf0>)
   801e0:	4798      	blx	r3
		ModbusNew(MODULE_ADDR);
   801e2:	2100      	movs	r1, #0
   801e4:	2064      	movs	r0, #100	; 0x64
   801e6:	4b0d      	ldr	r3, [pc, #52]	; (8021c <Appli+0xf4>)
   801e8:	4798      	blx	r3
	}
	return 0;
}
   801ea:	2000      	movs	r0, #0
   801ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   801f0:	b004      	add	sp, #16
   801f2:	4770      	bx	lr
   801f4:	00082481 	.word	0x00082481
   801f8:	00081431 	.word	0x00081431
   801fc:	00081631 	.word	0x00081631
   80200:	28000001 	.word	0x28000001
   80204:	000894c8 	.word	0x000894c8
   80208:	00083f55 	.word	0x00083f55
   8020c:	00089508 	.word	0x00089508
   80210:	000829cd 	.word	0x000829cd
   80214:	00080f39 	.word	0x00080f39
   80218:	0008038d 	.word	0x0008038d
   8021c:	00080715 	.word	0x00080715

00080220 <chipid_read>:
 *
 * \return 0 on success.
 */
uint32_t chipid_read(Chipid *p_chipid, chipid_data_t *p_chipid_data)
{
	if (NULL == p_chipid_data) {
   80220:	b311      	cbz	r1, 80268 <chipid_read+0x48>
		return 0xFFFFFFFF;
	}
	
	p_chipid_data->ul_version =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_VERSION_Msk) >>
   80222:	6802      	ldr	r2, [r0, #0]
   80224:	f002 021f 	and.w	r2, r2, #31
	p_chipid_data->ul_version =
   80228:	600a      	str	r2, [r1, #0]
			CHIPID_CIDR_VERSION_Pos;
	p_chipid_data->ul_eproc =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_EPROC_Msk) >>
   8022a:	6802      	ldr	r2, [r0, #0]
   8022c:	f3c2 1242 	ubfx	r2, r2, #5, #3
	p_chipid_data->ul_eproc =
   80230:	604a      	str	r2, [r1, #4]
			CHIPID_CIDR_EPROC_Pos;
	p_chipid_data->ul_nvpsiz =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_NVPSIZ_Msk) >>
   80232:	6802      	ldr	r2, [r0, #0]
   80234:	f3c2 2203 	ubfx	r2, r2, #8, #4
	p_chipid_data->ul_nvpsiz =
   80238:	608a      	str	r2, [r1, #8]
			CHIPID_CIDR_NVPSIZ_Pos;
	p_chipid_data->ul_nvpsiz2 =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_NVPSIZ2_Pos) >>
   8023a:	6802      	ldr	r2, [r0, #0]
	p_chipid_data->ul_nvpsiz2 =
   8023c:	2200      	movs	r2, #0
   8023e:	60ca      	str	r2, [r1, #12]
			CHIPID_CIDR_NVPSIZ2_Pos;
	p_chipid_data->ul_sramsiz =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_SRAMSIZ_Msk) >>
   80240:	6802      	ldr	r2, [r0, #0]
   80242:	f3c2 4203 	ubfx	r2, r2, #16, #4
	p_chipid_data->ul_sramsiz =
   80246:	610a      	str	r2, [r1, #16]
			CHIPID_CIDR_SRAMSIZ_Pos;
	p_chipid_data->ul_arch =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_ARCH_Msk) >>
   80248:	6802      	ldr	r2, [r0, #0]
   8024a:	f3c2 5207 	ubfx	r2, r2, #20, #8
	p_chipid_data->ul_arch =
   8024e:	614a      	str	r2, [r1, #20]
			CHIPID_CIDR_ARCH_Pos;
	p_chipid_data->ul_nvptyp =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_NVPTYP_Msk) >>
   80250:	6802      	ldr	r2, [r0, #0]
   80252:	f3c2 7202 	ubfx	r2, r2, #28, #3
	p_chipid_data->ul_nvptyp =
   80256:	618a      	str	r2, [r1, #24]
			CHIPID_CIDR_NVPTYP_Pos;
	p_chipid_data->ul_extflag =
		(p_chipid->CHIPID_CIDR & CHIPID_CIDR_EXT) >> 31;
   80258:	6802      	ldr	r2, [r0, #0]
   8025a:	0fd2      	lsrs	r2, r2, #31
	p_chipid_data->ul_extflag =
   8025c:	61ca      	str	r2, [r1, #28]
		
	if (p_chipid_data->ul_extflag) {
   8025e:	b132      	cbz	r2, 8026e <chipid_read+0x4e>
		p_chipid_data->ul_extid =
			p_chipid->CHIPID_EXID & CHIPID_EXID_EXID_Msk;
   80260:	6842      	ldr	r2, [r0, #4]
		p_chipid_data->ul_extid =
   80262:	620a      	str	r2, [r1, #32]
	}
	return 0;
   80264:	2000      	movs	r0, #0
   80266:	4770      	bx	lr
		return 0xFFFFFFFF;
   80268:	f04f 30ff 	mov.w	r0, #4294967295
   8026c:	4770      	bx	lr
	return 0;
   8026e:	2000      	movs	r0, #0
}
   80270:	4770      	bx	lr

00080272 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   80272:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   80274:	010b      	lsls	r3, r1, #4
   80276:	4293      	cmp	r3, r2
   80278:	d914      	bls.n	802a4 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   8027a:	00c9      	lsls	r1, r1, #3
   8027c:	084b      	lsrs	r3, r1, #1
   8027e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   80282:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   80286:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   80288:	1e5c      	subs	r4, r3, #1
   8028a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8028e:	428c      	cmp	r4, r1
   80290:	d901      	bls.n	80296 <usart_set_async_baudrate+0x24>
		return 1;
   80292:	2001      	movs	r0, #1
   80294:	e017      	b.n	802c6 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   80296:	6841      	ldr	r1, [r0, #4]
   80298:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   8029c:	6041      	str	r1, [r0, #4]
   8029e:	e00c      	b.n	802ba <usart_set_async_baudrate+0x48>
		return 1;
   802a0:	2001      	movs	r0, #1
   802a2:	e010      	b.n	802c6 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   802a4:	0859      	lsrs	r1, r3, #1
   802a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   802aa:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   802ae:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   802b0:	1e5c      	subs	r4, r3, #1
   802b2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   802b6:	428c      	cmp	r4, r1
   802b8:	d8f2      	bhi.n	802a0 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   802ba:	0412      	lsls	r2, r2, #16
   802bc:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   802c0:	431a      	orrs	r2, r3
   802c2:	6202      	str	r2, [r0, #32]

	return 0;
   802c4:	2000      	movs	r0, #0
}
   802c6:	bc10      	pop	{r4}
   802c8:	4770      	bx	lr
	...

000802cc <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   802cc:	4b0a      	ldr	r3, [pc, #40]	; (802f8 <usart_reset+0x2c>)
   802ce:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   802d2:	2300      	movs	r3, #0
   802d4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   802d6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   802d8:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   802da:	2388      	movs	r3, #136	; 0x88
   802dc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   802de:	2324      	movs	r3, #36	; 0x24
   802e0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   802e2:	f44f 7380 	mov.w	r3, #256	; 0x100
   802e6:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   802e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   802ec:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   802ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   802f2:	6003      	str	r3, [r0, #0]
   802f4:	4770      	bx	lr
   802f6:	bf00      	nop
   802f8:	55534100 	.word	0x55534100

000802fc <usart_init_rs232>:
{
   802fc:	b570      	push	{r4, r5, r6, lr}
   802fe:	4605      	mov	r5, r0
   80300:	460c      	mov	r4, r1
   80302:	4616      	mov	r6, r2
	usart_reset(p_usart);
   80304:	4b0f      	ldr	r3, [pc, #60]	; (80344 <usart_init_rs232+0x48>)
   80306:	4798      	blx	r3
	ul_reg_val = 0;
   80308:	2200      	movs	r2, #0
   8030a:	4b0f      	ldr	r3, [pc, #60]	; (80348 <usart_init_rs232+0x4c>)
   8030c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   8030e:	b1a4      	cbz	r4, 8033a <usart_init_rs232+0x3e>
   80310:	4632      	mov	r2, r6
   80312:	6821      	ldr	r1, [r4, #0]
   80314:	4628      	mov	r0, r5
   80316:	4b0d      	ldr	r3, [pc, #52]	; (8034c <usart_init_rs232+0x50>)
   80318:	4798      	blx	r3
   8031a:	4602      	mov	r2, r0
   8031c:	b978      	cbnz	r0, 8033e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8031e:	6863      	ldr	r3, [r4, #4]
   80320:	68a1      	ldr	r1, [r4, #8]
   80322:	430b      	orrs	r3, r1
   80324:	6921      	ldr	r1, [r4, #16]
   80326:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   80328:	68e1      	ldr	r1, [r4, #12]
   8032a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8032c:	4906      	ldr	r1, [pc, #24]	; (80348 <usart_init_rs232+0x4c>)
   8032e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   80330:	6869      	ldr	r1, [r5, #4]
   80332:	430b      	orrs	r3, r1
   80334:	606b      	str	r3, [r5, #4]
}
   80336:	4610      	mov	r0, r2
   80338:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   8033a:	2201      	movs	r2, #1
   8033c:	e7fb      	b.n	80336 <usart_init_rs232+0x3a>
   8033e:	2201      	movs	r2, #1
   80340:	e7f9      	b.n	80336 <usart_init_rs232+0x3a>
   80342:	bf00      	nop
   80344:	000802cd 	.word	0x000802cd
   80348:	20000ff4 	.word	0x20000ff4
   8034c:	00080273 	.word	0x00080273

00080350 <usart_init_rs485>:
{
   80350:	b510      	push	{r4, lr}
   80352:	4604      	mov	r4, r0
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
   80354:	4b06      	ldr	r3, [pc, #24]	; (80370 <usart_init_rs485+0x20>)
   80356:	4798      	blx	r3
   80358:	b940      	cbnz	r0, 8036c <usart_init_rs485+0x1c>
   8035a:	4602      	mov	r2, r0
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
   8035c:	6863      	ldr	r3, [r4, #4]
   8035e:	f023 030f 	bic.w	r3, r3, #15
   80362:	f043 0301 	orr.w	r3, r3, #1
   80366:	6063      	str	r3, [r4, #4]
}
   80368:	4610      	mov	r0, r2
   8036a:	bd10      	pop	{r4, pc}
		return 1;
   8036c:	2201      	movs	r2, #1
   8036e:	e7fb      	b.n	80368 <usart_init_rs485+0x18>
   80370:	000802fd 	.word	0x000802fd

00080374 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   80374:	2340      	movs	r3, #64	; 0x40
   80376:	6003      	str	r3, [r0, #0]
   80378:	4770      	bx	lr

0008037a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   8037a:	2310      	movs	r3, #16
   8037c:	6003      	str	r3, [r0, #0]
   8037e:	4770      	bx	lr

00080380 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   80380:	6081      	str	r1, [r0, #8]
   80382:	4770      	bx	lr

00080384 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   80384:	60c1      	str	r1, [r0, #12]
   80386:	4770      	bx	lr

00080388 <usart_get_status>:
	return p_usart->US_CSR;
   80388:	6940      	ldr	r0, [r0, #20]
}
   8038a:	4770      	bx	lr

0008038c <ComRS485>:

#define _rs485_Flush()					ComRS485(_COMRS485_FLUSH)


uint32_t ComRS485(uint32_t sc, ...)
{
   8038c:	b40f      	push	{r0, r1, r2, r3}
   8038e:	b5f0      	push	{r4, r5, r6, r7, lr}
   80390:	b083      	sub	sp, #12
	switch(sc)
   80392:	9908      	ldr	r1, [sp, #32]
   80394:	2964      	cmp	r1, #100	; 0x64
   80396:	d016      	beq.n	803c6 <ComRS485+0x3a>
   80398:	d80e      	bhi.n	803b8 <ComRS485+0x2c>
   8039a:	2901      	cmp	r1, #1
   8039c:	d07b      	beq.n	80496 <ComRS485+0x10a>
   8039e:	2902      	cmp	r1, #2
   803a0:	f040 80fb 	bne.w	8059a <ComRS485+0x20e>
		_MODBUS_SLAVE_NOT_ACK,
		_MODBUS_PROCESS_ACK_FRAME
	};

	case _COMRS485_FLUSH:
		comRS485.pRead=comRS485.pWrite=comRS485TxRxBuf;
   803a4:	4b81      	ldr	r3, [pc, #516]	; (805ac <ComRS485+0x220>)
   803a6:	4a82      	ldr	r2, [pc, #520]	; (805b0 <ComRS485+0x224>)
   803a8:	601a      	str	r2, [r3, #0]
   803aa:	605a      	str	r2, [r3, #4]
		comRS485.crcA=0xFFFF;
   803ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   803b0:	811a      	strh	r2, [r3, #8]
		comRS485.nChar=0;
   803b2:	2000      	movs	r0, #0
   803b4:	8298      	strh	r0, [r3, #20]
		break;
   803b6:	e03c      	b.n	80432 <ComRS485+0xa6>
	switch(sc)
   803b8:	2966      	cmp	r1, #102	; 0x66
   803ba:	d03f      	beq.n	8043c <ComRS485+0xb0>
   803bc:	2967      	cmp	r1, #103	; 0x67
   803be:	f040 80ec 	bne.w	8059a <ComRS485+0x20e>
		return comRS485TxRxBuf;
   803c2:	487b      	ldr	r0, [pc, #492]	; (805b0 <ComRS485+0x224>)
   803c4:	e035      	b.n	80432 <ComRS485+0xa6>
		comRS485.state = IDLE;
   803c6:	4d79      	ldr	r5, [pc, #484]	; (805ac <ComRS485+0x220>)
   803c8:	2701      	movs	r7, #1
   803ca:	74af      	strb	r7, [r5, #18]
		_rs485_Flush();
   803cc:	2002      	movs	r0, #2
   803ce:	f7ff ffdd 	bl	8038c <ComRS485>
		comRS485.timer = 0;
   803d2:	2400      	movs	r4, #0
   803d4:	822c      	strh	r4, [r5, #16]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   803d6:	200d      	movs	r0, #13
   803d8:	4b76      	ldr	r3, [pc, #472]	; (805b4 <ComRS485+0x228>)
   803da:	4798      	blx	r3
		usart_init_rs485(COMRS485_USART, &usart_console_settings, sysclk_get_cpu_hz());
   803dc:	4d76      	ldr	r5, [pc, #472]	; (805b8 <ComRS485+0x22c>)
   803de:	4a77      	ldr	r2, [pc, #476]	; (805bc <ComRS485+0x230>)
   803e0:	4977      	ldr	r1, [pc, #476]	; (805c0 <ComRS485+0x234>)
   803e2:	4628      	mov	r0, r5
   803e4:	4b77      	ldr	r3, [pc, #476]	; (805c4 <ComRS485+0x238>)
   803e6:	4798      	blx	r3
		gpio_configure_pin(COMRS485_TX,		COMRS485_TX_FLAGS);
   803e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803ec:	2012      	movs	r0, #18
   803ee:	4e76      	ldr	r6, [pc, #472]	; (805c8 <ComRS485+0x23c>)
   803f0:	47b0      	blx	r6
		gpio_configure_pin(COMRS485_RX,		COMRS485_RX_FLAGS);
   803f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803f6:	2013      	movs	r0, #19
   803f8:	47b0      	blx	r6
		gpio_configure_pin(COMRS485_TXEN,	COMRS485_TXEN_FLAGS);
   803fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803fe:	2027      	movs	r0, #39	; 0x27
   80400:	47b0      	blx	r6
		usart_disable_interrupt(COMRS485_USART,0xFFFFFFFF);
   80402:	f04f 31ff 	mov.w	r1, #4294967295
   80406:	4628      	mov	r0, r5
   80408:	4b70      	ldr	r3, [pc, #448]	; (805cc <ComRS485+0x240>)
   8040a:	4798      	blx	r3
		usart_enable_interrupt(COMRS485_USART, US_IER_RXRDY);
   8040c:	4639      	mov	r1, r7
   8040e:	4628      	mov	r0, r5
   80410:	4b6f      	ldr	r3, [pc, #444]	; (805d0 <ComRS485+0x244>)
   80412:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80414:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80418:	4b6e      	ldr	r3, [pc, #440]	; (805d4 <ComRS485+0x248>)
   8041a:	601a      	str	r2, [r3, #0]
		usart_enable_tx(COMRS485_USART);
   8041c:	4628      	mov	r0, r5
   8041e:	4b6e      	ldr	r3, [pc, #440]	; (805d8 <ComRS485+0x24c>)
   80420:	4798      	blx	r3
		usart_enable_rx(COMRS485_USART);
   80422:	4628      	mov	r0, r5
   80424:	4b6d      	ldr	r3, [pc, #436]	; (805dc <ComRS485+0x250>)
   80426:	4798      	blx	r3
		Putstr("\r\n\tCOMRS485_NEW:\r\n");
   80428:	496d      	ldr	r1, [pc, #436]	; (805e0 <ComRS485+0x254>)
   8042a:	2067      	movs	r0, #103	; 0x67
   8042c:	4b6d      	ldr	r3, [pc, #436]	; (805e4 <ComRS485+0x258>)
   8042e:	4798      	blx	r3
	default:
		Error(ERROR_COMRS485_SWITCH_BAD_SC, sc);
	}


	return 0;
   80430:	4620      	mov	r0, r4
}
   80432:	b003      	add	sp, #12
   80434:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   80438:	b004      	add	sp, #16
   8043a:	4770      	bx	lr
		sprintf(buf, "\r\nRS485 NEED ACK: %d\r\n", _needAck);
   8043c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   8043e:	4c6a      	ldr	r4, [pc, #424]	; (805e8 <ComRS485+0x25c>)
   80440:	4632      	mov	r2, r6
   80442:	496a      	ldr	r1, [pc, #424]	; (805ec <ComRS485+0x260>)
   80444:	4620      	mov	r0, r4
   80446:	4b6a      	ldr	r3, [pc, #424]	; (805f0 <ComRS485+0x264>)
   80448:	4798      	blx	r3
		Putstr(buf);
   8044a:	4621      	mov	r1, r4
   8044c:	2067      	movs	r0, #103	; 0x67
   8044e:	4c65      	ldr	r4, [pc, #404]	; (805e4 <ComRS485+0x258>)
   80450:	47a0      	blx	r4
		Putstr("\r\n========================================================\r\n");
   80452:	4f68      	ldr	r7, [pc, #416]	; (805f4 <ComRS485+0x268>)
   80454:	4639      	mov	r1, r7
   80456:	2067      	movs	r0, #103	; 0x67
   80458:	47a0      	blx	r4
		Puthexacode(comRS485TxRxBuf,_frameLen);
   8045a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8045c:	462a      	mov	r2, r5
   8045e:	4954      	ldr	r1, [pc, #336]	; (805b0 <ComRS485+0x224>)
   80460:	2069      	movs	r0, #105	; 0x69
   80462:	47a0      	blx	r4
		Putstr("\r\n========================================================\r\n");	
   80464:	4639      	mov	r1, r7
   80466:	2067      	movs	r0, #103	; 0x67
   80468:	47a0      	blx	r4
		_rs485_Flush();
   8046a:	2002      	movs	r0, #2
   8046c:	f7ff ff8e 	bl	8038c <ComRS485>
		if(_needAck)
   80470:	b13e      	cbz	r6, 80482 <ComRS485+0xf6>
			comRS485.frameLen = _frameLen;
   80472:	4b4e      	ldr	r3, [pc, #312]	; (805ac <ComRS485+0x220>)
   80474:	831d      	strh	r5, [r3, #24]
			comRS485.nbTries = COMRS485_NB_TRIES;
   80476:	2203      	movs	r2, #3
   80478:	759a      	strb	r2, [r3, #22]
			comRS485.state=	M_WAIT_ACK;
   8047a:	749a      	strb	r2, [r3, #18]
			comRS485.timer= COMRS485_TX_TRY_TIMEOUT_VAL;
   8047c:	f640 32b8 	movw	r2, #3000	; 0xbb8
   80480:	821a      	strh	r2, [r3, #16]
		comRS485.pWrite=comRS485TxRxBuf + _frameLen;
   80482:	4a4b      	ldr	r2, [pc, #300]	; (805b0 <ComRS485+0x224>)
   80484:	442a      	add	r2, r5
   80486:	4b49      	ldr	r3, [pc, #292]	; (805ac <ComRS485+0x220>)
   80488:	601a      	str	r2, [r3, #0]
		usart_enable_interrupt(COMRS485_USART,US_IER_TXRDY);
   8048a:	2102      	movs	r1, #2
   8048c:	484a      	ldr	r0, [pc, #296]	; (805b8 <ComRS485+0x22c>)
   8048e:	4b50      	ldr	r3, [pc, #320]	; (805d0 <ComRS485+0x244>)
   80490:	4798      	blx	r3
	return 0;
   80492:	2000      	movs	r0, #0
		break;
   80494:	e7cd      	b.n	80432 <ComRS485+0xa6>
		if(comRS485.timer)
   80496:	4b45      	ldr	r3, [pc, #276]	; (805ac <ComRS485+0x220>)
   80498:	8a1b      	ldrh	r3, [r3, #16]
   8049a:	2b00      	cmp	r3, #0
   8049c:	f000 8082 	beq.w	805a4 <ComRS485+0x218>
			if(--comRS485.timer==0)
   804a0:	3b01      	subs	r3, #1
   804a2:	b29b      	uxth	r3, r3
   804a4:	4a41      	ldr	r2, [pc, #260]	; (805ac <ComRS485+0x220>)
   804a6:	8213      	strh	r3, [r2, #16]
   804a8:	2b00      	cmp	r3, #0
   804aa:	d17d      	bne.n	805a8 <ComRS485+0x21c>
				switch(comRS485.state)
   804ac:	7c93      	ldrb	r3, [r2, #18]
   804ae:	2b04      	cmp	r3, #4
   804b0:	d00b      	beq.n	804ca <ComRS485+0x13e>
   804b2:	2b07      	cmp	r3, #7
   804b4:	d009      	beq.n	804ca <ComRS485+0x13e>
   804b6:	2b03      	cmp	r3, #3
   804b8:	d037      	beq.n	8052a <ComRS485+0x19e>
					comRS485.state = IDLE;
   804ba:	2201      	movs	r2, #1
   804bc:	4b3b      	ldr	r3, [pc, #236]	; (805ac <ComRS485+0x220>)
   804be:	749a      	strb	r2, [r3, #18]
					_rs485_Flush();
   804c0:	2002      	movs	r0, #2
   804c2:	f7ff ff63 	bl	8038c <ComRS485>
	return 0;
   804c6:	2000      	movs	r0, #0
					break;
   804c8:	e7b3      	b.n	80432 <ComRS485+0xa6>
					if(comRS485.recCrc==comRS485.crcC)
   804ca:	4b38      	ldr	r3, [pc, #224]	; (805ac <ComRS485+0x220>)
   804cc:	89da      	ldrh	r2, [r3, #14]
   804ce:	899b      	ldrh	r3, [r3, #12]
   804d0:	429a      	cmp	r2, r3
   804d2:	d007      	beq.n	804e4 <ComRS485+0x158>
						comRS485.state = IDLE;
   804d4:	2201      	movs	r2, #1
   804d6:	4b35      	ldr	r3, [pc, #212]	; (805ac <ComRS485+0x220>)
   804d8:	749a      	strb	r2, [r3, #18]
						_rs485_Flush();
   804da:	2002      	movs	r0, #2
   804dc:	f7ff ff56 	bl	8038c <ComRS485>
	return 0;
   804e0:	2000      	movs	r0, #0
   804e2:	e7a6      	b.n	80432 <ComRS485+0xa6>
						Putstr("\r\n=======================FRAME RECEIVED=================================\r\n");
   804e4:	4944      	ldr	r1, [pc, #272]	; (805f8 <ComRS485+0x26c>)
   804e6:	2067      	movs	r0, #103	; 0x67
   804e8:	4c3e      	ldr	r4, [pc, #248]	; (805e4 <ComRS485+0x258>)
   804ea:	47a0      	blx	r4
						Puthexacode(comRS485TxRxBuf,comRS485.nChar);
   804ec:	4d2f      	ldr	r5, [pc, #188]	; (805ac <ComRS485+0x220>)
   804ee:	8aaa      	ldrh	r2, [r5, #20]
   804f0:	492f      	ldr	r1, [pc, #188]	; (805b0 <ComRS485+0x224>)
   804f2:	2069      	movs	r0, #105	; 0x69
   804f4:	47a0      	blx	r4
						sprintf(buf,"\trecCrc:%04X crcC:%04X ",comRS485.recCrc,comRS485.crcC);
   804f6:	4e3c      	ldr	r6, [pc, #240]	; (805e8 <ComRS485+0x25c>)
   804f8:	89ab      	ldrh	r3, [r5, #12]
   804fa:	89ea      	ldrh	r2, [r5, #14]
   804fc:	493f      	ldr	r1, [pc, #252]	; (805fc <ComRS485+0x270>)
   804fe:	4630      	mov	r0, r6
   80500:	4d3b      	ldr	r5, [pc, #236]	; (805f0 <ComRS485+0x264>)
   80502:	47a8      	blx	r5
						Putstr(buf);
   80504:	4631      	mov	r1, r6
   80506:	2067      	movs	r0, #103	; 0x67
   80508:	47a0      	blx	r4
						Putstr("\r\n======================================================================\r\n");
   8050a:	493d      	ldr	r1, [pc, #244]	; (80600 <ComRS485+0x274>)
   8050c:	2067      	movs	r0, #103	; 0x67
   8050e:	47a0      	blx	r4
						PushTask(Modbus,_MODBUS_PROCESS_RECEIVED_FRAME,0,0);
   80510:	2400      	movs	r4, #0
   80512:	9400      	str	r4, [sp, #0]
   80514:	4623      	mov	r3, r4
   80516:	2201      	movs	r2, #1
   80518:	493a      	ldr	r1, [pc, #232]	; (80604 <ComRS485+0x278>)
   8051a:	2066      	movs	r0, #102	; 0x66
   8051c:	4d3a      	ldr	r5, [pc, #232]	; (80608 <ComRS485+0x27c>)
   8051e:	47a8      	blx	r5
						_rs485_Flush();
   80520:	2002      	movs	r0, #2
   80522:	f7ff ff33 	bl	8038c <ComRS485>
	return 0;
   80526:	4620      	mov	r0, r4
   80528:	e783      	b.n	80432 <ComRS485+0xa6>
					if(--comRS485.nbTries)
   8052a:	4a20      	ldr	r2, [pc, #128]	; (805ac <ComRS485+0x220>)
   8052c:	7d93      	ldrb	r3, [r2, #22]
   8052e:	3b01      	subs	r3, #1
   80530:	b2db      	uxtb	r3, r3
   80532:	7593      	strb	r3, [r2, #22]
   80534:	b193      	cbz	r3, 8055c <ComRS485+0x1d0>
						Putstr("\r\nm_WAIT_ACK\r\n");
   80536:	4935      	ldr	r1, [pc, #212]	; (8060c <ComRS485+0x280>)
   80538:	2067      	movs	r0, #103	; 0x67
   8053a:	4b2a      	ldr	r3, [pc, #168]	; (805e4 <ComRS485+0x258>)
   8053c:	4798      	blx	r3
						comRS485.pRead = comRS485TxRxBuf;
   8053e:	4b1b      	ldr	r3, [pc, #108]	; (805ac <ComRS485+0x220>)
   80540:	4a1b      	ldr	r2, [pc, #108]	; (805b0 <ComRS485+0x224>)
   80542:	605a      	str	r2, [r3, #4]
						comRS485.pWrite=comRS485TxRxBuf + comRS485.frameLen;
   80544:	8b19      	ldrh	r1, [r3, #24]
   80546:	440a      	add	r2, r1
   80548:	601a      	str	r2, [r3, #0]
						comRS485.timer=COMRS485_TX_TRY_TIMEOUT_VAL;
   8054a:	f640 32b8 	movw	r2, #3000	; 0xbb8
   8054e:	821a      	strh	r2, [r3, #16]
						usart_enable_interrupt(COMRS485_USART,US_IER_TXRDY);
   80550:	2102      	movs	r1, #2
   80552:	4819      	ldr	r0, [pc, #100]	; (805b8 <ComRS485+0x22c>)
   80554:	4b1e      	ldr	r3, [pc, #120]	; (805d0 <ComRS485+0x244>)
   80556:	4798      	blx	r3
	return 0;
   80558:	2000      	movs	r0, #0
   8055a:	e76a      	b.n	80432 <ComRS485+0xa6>
						Putstr("\r\n\t***** COMRS485 NO ACK FROM SLAVE #");
   8055c:	492c      	ldr	r1, [pc, #176]	; (80610 <ComRS485+0x284>)
   8055e:	2067      	movs	r0, #103	; 0x67
   80560:	4d20      	ldr	r5, [pc, #128]	; (805e4 <ComRS485+0x258>)
   80562:	47a8      	blx	r5
						sprintf(buf, "%02X by %d tries *****\r\n", comRS485TxRxBuf[0], COMRS485_NB_TRIES);
   80564:	4c12      	ldr	r4, [pc, #72]	; (805b0 <ComRS485+0x224>)
   80566:	4e20      	ldr	r6, [pc, #128]	; (805e8 <ComRS485+0x25c>)
   80568:	2303      	movs	r3, #3
   8056a:	7822      	ldrb	r2, [r4, #0]
   8056c:	4929      	ldr	r1, [pc, #164]	; (80614 <ComRS485+0x288>)
   8056e:	4630      	mov	r0, r6
   80570:	4f1f      	ldr	r7, [pc, #124]	; (805f0 <ComRS485+0x264>)
   80572:	47b8      	blx	r7
						Putstr(buf);
   80574:	4631      	mov	r1, r6
   80576:	2067      	movs	r0, #103	; 0x67
   80578:	47a8      	blx	r5
						PushTask(Modbus, _MODBUS_SLAVE_NOT_ACK, comRS485TxRxBuf[0], 0);
   8057a:	7823      	ldrb	r3, [r4, #0]
   8057c:	2400      	movs	r4, #0
   8057e:	9400      	str	r4, [sp, #0]
   80580:	2202      	movs	r2, #2
   80582:	4920      	ldr	r1, [pc, #128]	; (80604 <ComRS485+0x278>)
   80584:	2066      	movs	r0, #102	; 0x66
   80586:	4d20      	ldr	r5, [pc, #128]	; (80608 <ComRS485+0x27c>)
   80588:	47a8      	blx	r5
						comRS485.state = IDLE;
   8058a:	2201      	movs	r2, #1
   8058c:	4b07      	ldr	r3, [pc, #28]	; (805ac <ComRS485+0x220>)
   8058e:	749a      	strb	r2, [r3, #18]
						_rs485_Flush();
   80590:	2002      	movs	r0, #2
   80592:	f7ff fefb 	bl	8038c <ComRS485>
	return 0;
   80596:	4620      	mov	r0, r4
   80598:	e74b      	b.n	80432 <ComRS485+0xa6>
		Error(ERROR_COMRS485_SWITCH_BAD_SC, sc);
   8059a:	2020      	movs	r0, #32
   8059c:	4b1e      	ldr	r3, [pc, #120]	; (80618 <ComRS485+0x28c>)
   8059e:	4798      	blx	r3
	return 0;
   805a0:	2000      	movs	r0, #0
   805a2:	e746      	b.n	80432 <ComRS485+0xa6>
   805a4:	2000      	movs	r0, #0
   805a6:	e744      	b.n	80432 <ComRS485+0xa6>
   805a8:	2000      	movs	r0, #0
   805aa:	e742      	b.n	80432 <ComRS485+0xa6>
   805ac:	200011bc 	.word	0x200011bc
   805b0:	20000ff8 	.word	0x20000ff8
   805b4:	00081631 	.word	0x00081631
   805b8:	40090000 	.word	0x40090000
   805bc:	05b8d800 	.word	0x05b8d800
   805c0:	0008968c 	.word	0x0008968c
   805c4:	00080351 	.word	0x00080351
   805c8:	00081431 	.word	0x00081431
   805cc:	00080385 	.word	0x00080385
   805d0:	00080381 	.word	0x00080381
   805d4:	e000e100 	.word	0xe000e100
   805d8:	00080375 	.word	0x00080375
   805dc:	0008037b 	.word	0x0008037b
   805e0:	0008951c 	.word	0x0008951c
   805e4:	00083f55 	.word	0x00083f55
   805e8:	200012ec 	.word	0x200012ec
   805ec:	00089530 	.word	0x00089530
   805f0:	00084b49 	.word	0x00084b49
   805f4:	00089548 	.word	0x00089548
   805f8:	00089588 	.word	0x00089588
   805fc:	000895d4 	.word	0x000895d4
   80600:	000895ec 	.word	0x000895ec
   80604:	00080715 	.word	0x00080715
   80608:	000841e5 	.word	0x000841e5
   8060c:	00089638 	.word	0x00089638
   80610:	00089648 	.word	0x00089648
   80614:	00089670 	.word	0x00089670
   80618:	00082481 	.word	0x00082481

0008061c <USART0_Handler>:


void COMRS485_Handler()
{
   8061c:	b538      	push	{r3, r4, r5, lr}
	uint32_t dw_status = usart_get_status(COMRS485_USART);
   8061e:	4c35      	ldr	r4, [pc, #212]	; (806f4 <USART0_Handler+0xd8>)
   80620:	4620      	mov	r0, r4
   80622:	4b35      	ldr	r3, [pc, #212]	; (806f8 <USART0_Handler+0xdc>)
   80624:	4798      	blx	r3
   80626:	4605      	mov	r5, r0
	uint8_t dummy;
	
	if((mIsBitsSet(COMRS485_USART->US_IMR,US_IMR_RXRDY))&&(dw_status & US_CSR_RXRDY))
   80628:	6923      	ldr	r3, [r4, #16]
   8062a:	f013 0f01 	tst.w	r3, #1
   8062e:	d035      	beq.n	8069c <USART0_Handler+0x80>
   80630:	f010 0f01 	tst.w	r0, #1
   80634:	d032      	beq.n	8069c <USART0_Handler+0x80>
	{
#ifdef MASTER
		switch(comRS485.state)
   80636:	4b31      	ldr	r3, [pc, #196]	; (806fc <USART0_Handler+0xe0>)
   80638:	7c9b      	ldrb	r3, [r3, #18]
   8063a:	2b03      	cmp	r3, #3
   8063c:	d00a      	beq.n	80654 <USART0_Handler+0x38>
   8063e:	2b04      	cmp	r3, #4
   80640:	d00b      	beq.n	8065a <USART0_Handler+0x3e>
			if(++comRS485.pWrite>=comRS485TxRxBuf+COMRS485_TXRX_BUFFER_LEN+COMRS485_BUFFER_GUARD) /*comRS485.pWrite=comRS485TxRxBuf;*/
			Error(ERROR_COMRS485_RX_BUFFER_FULL,0);
			break;
		case IDLE:
		default:
			dummy = COMRS485_USART->US_RHR & US_RHR_RXCHR_Msk;
   80642:	4b2c      	ldr	r3, [pc, #176]	; (806f4 <USART0_Handler+0xd8>)
   80644:	699b      	ldr	r3, [r3, #24]
			_rs485_Flush();
   80646:	2002      	movs	r0, #2
   80648:	4b2d      	ldr	r3, [pc, #180]	; (80700 <USART0_Handler+0xe4>)
   8064a:	4798      	blx	r3
			comRS485.state = IDLE;
   8064c:	2201      	movs	r2, #1
   8064e:	4b2b      	ldr	r3, [pc, #172]	; (806fc <USART0_Handler+0xe0>)
   80650:	749a      	strb	r2, [r3, #18]
			break;
   80652:	e023      	b.n	8069c <USART0_Handler+0x80>
			comRS485.state=M_WAIT_END_ACK_FRAME;
   80654:	2204      	movs	r2, #4
   80656:	4b29      	ldr	r3, [pc, #164]	; (806fc <USART0_Handler+0xe0>)
   80658:	749a      	strb	r2, [r3, #18]
			comRS485.timer=COMRS485_RX_TIMEOUT_VAL;
   8065a:	4c28      	ldr	r4, [pc, #160]	; (806fc <USART0_Handler+0xe0>)
   8065c:	f44f 7348 	mov.w	r3, #800	; 0x320
   80660:	8223      	strh	r3, [r4, #16]
			*comRS485.pWrite=COMRS485_USART->US_RHR & US_RHR_RXCHR_Msk;
   80662:	6823      	ldr	r3, [r4, #0]
   80664:	4a23      	ldr	r2, [pc, #140]	; (806f4 <USART0_Handler+0xd8>)
   80666:	6992      	ldr	r2, [r2, #24]
   80668:	701a      	strb	r2, [r3, #0]
			comRS485.crcC=comRS485.crcB;
   8066a:	8963      	ldrh	r3, [r4, #10]
   8066c:	81a3      	strh	r3, [r4, #12]
			comRS485.crcB=comRS485.crcA;
   8066e:	8921      	ldrh	r1, [r4, #8]
   80670:	8161      	strh	r1, [r4, #10]
			comRS485.crcA=CRC16MODBUSbyte(*comRS485.pWrite,comRS485.crcA);
   80672:	6823      	ldr	r3, [r4, #0]
   80674:	7818      	ldrb	r0, [r3, #0]
   80676:	4b23      	ldr	r3, [pc, #140]	; (80704 <USART0_Handler+0xe8>)
   80678:	4798      	blx	r3
   8067a:	8120      	strh	r0, [r4, #8]
			comRS485.recCrc<<=8;
   8067c:	89e3      	ldrh	r3, [r4, #14]
   8067e:	021b      	lsls	r3, r3, #8
   80680:	b29b      	uxth	r3, r3
   80682:	81e3      	strh	r3, [r4, #14]
			comRS485.recCrc|=*comRS485.pWrite;
   80684:	6822      	ldr	r2, [r4, #0]
   80686:	f812 1b01 	ldrb.w	r1, [r2], #1
   8068a:	430b      	orrs	r3, r1
   8068c:	81e3      	strh	r3, [r4, #14]
			comRS485.nChar++;
   8068e:	8aa3      	ldrh	r3, [r4, #20]
   80690:	3301      	adds	r3, #1
   80692:	82a3      	strh	r3, [r4, #20]
			if(++comRS485.pWrite>=comRS485TxRxBuf+COMRS485_TXRX_BUFFER_LEN+COMRS485_BUFFER_GUARD) /*comRS485.pWrite=comRS485TxRxBuf;*/
   80694:	6022      	str	r2, [r4, #0]
   80696:	4b1c      	ldr	r3, [pc, #112]	; (80708 <USART0_Handler+0xec>)
   80698:	429a      	cmp	r2, r3
   8069a:	d216      	bcs.n	806ca <USART0_Handler+0xae>
		}
#endif	//MASTER
	}

	
	if((mIsBitsSet(COMRS485_USART->US_IMR,US_IMR_TXRDY))&&(dw_status & US_CSR_TXRDY))
   8069c:	4b15      	ldr	r3, [pc, #84]	; (806f4 <USART0_Handler+0xd8>)
   8069e:	691b      	ldr	r3, [r3, #16]
   806a0:	f013 0f02 	tst.w	r3, #2
   806a4:	d010      	beq.n	806c8 <USART0_Handler+0xac>
   806a6:	f015 0f02 	tst.w	r5, #2
   806aa:	d00d      	beq.n	806c8 <USART0_Handler+0xac>
	{
		if(comRS485.pRead!=comRS485.pWrite)
   806ac:	4a13      	ldr	r2, [pc, #76]	; (806fc <USART0_Handler+0xe0>)
   806ae:	6853      	ldr	r3, [r2, #4]
   806b0:	6812      	ldr	r2, [r2, #0]
   806b2:	4293      	cmp	r3, r2
   806b4:	d016      	beq.n	806e4 <USART0_Handler+0xc8>
		{
			COMRS485_USART->US_THR = US_THR_TXCHR(*comRS485.pRead++);
   806b6:	1c5a      	adds	r2, r3, #1
   806b8:	4910      	ldr	r1, [pc, #64]	; (806fc <USART0_Handler+0xe0>)
   806ba:	604a      	str	r2, [r1, #4]
   806bc:	7819      	ldrb	r1, [r3, #0]
   806be:	4b0d      	ldr	r3, [pc, #52]	; (806f4 <USART0_Handler+0xd8>)
   806c0:	61d9      	str	r1, [r3, #28]
			if(comRS485.pRead>=comRS485TxRxBuf+COMRS485_TXRX_BUFFER_LEN+COMRS485_BUFFER_GUARD) /* comRS485.pRead=comRS485TxRxBuf;*/
   806c2:	4b11      	ldr	r3, [pc, #68]	; (80708 <USART0_Handler+0xec>)
   806c4:	429a      	cmp	r2, r3
   806c6:	d205      	bcs.n	806d4 <USART0_Handler+0xb8>
   806c8:	bd38      	pop	{r3, r4, r5, pc}
			Error(ERROR_COMRS485_RX_BUFFER_FULL,0);
   806ca:	2100      	movs	r1, #0
   806cc:	2023      	movs	r0, #35	; 0x23
   806ce:	4b0f      	ldr	r3, [pc, #60]	; (8070c <USART0_Handler+0xf0>)
   806d0:	4798      	blx	r3
   806d2:	e7e3      	b.n	8069c <USART0_Handler+0x80>
			{
				usart_disable_interrupt(COMRS485_USART,US_IER_TXRDY);
   806d4:	2102      	movs	r1, #2
   806d6:	4807      	ldr	r0, [pc, #28]	; (806f4 <USART0_Handler+0xd8>)
   806d8:	4b0d      	ldr	r3, [pc, #52]	; (80710 <USART0_Handler+0xf4>)
   806da:	4798      	blx	r3
				_rs485_Flush();
   806dc:	2002      	movs	r0, #2
   806de:	4b08      	ldr	r3, [pc, #32]	; (80700 <USART0_Handler+0xe4>)
   806e0:	4798      	blx	r3
   806e2:	bd38      	pop	{r3, r4, r5, pc}
			}
		}
		else
		{
			usart_disable_interrupt(COMRS485_USART,US_IER_TXRDY);
   806e4:	2102      	movs	r1, #2
   806e6:	4803      	ldr	r0, [pc, #12]	; (806f4 <USART0_Handler+0xd8>)
   806e8:	4b09      	ldr	r3, [pc, #36]	; (80710 <USART0_Handler+0xf4>)
   806ea:	4798      	blx	r3
			_rs485_Flush();
   806ec:	2002      	movs	r0, #2
   806ee:	4b04      	ldr	r3, [pc, #16]	; (80700 <USART0_Handler+0xe4>)
   806f0:	4798      	blx	r3
		}
	}
   806f2:	e7e9      	b.n	806c8 <USART0_Handler+0xac>
   806f4:	40090000 	.word	0x40090000
   806f8:	00080389 	.word	0x00080389
   806fc:	200011bc 	.word	0x200011bc
   80700:	0008038d 	.word	0x0008038d
   80704:	00082449 	.word	0x00082449
   80708:	200010fa 	.word	0x200010fa
   8070c:	00082481 	.word	0x00082481
   80710:	00080385 	.word	0x00080385

00080714 <Modbus>:
};

t_modbusFrame tempFrame;

uint32_t Modbus(uint32_t sc,...)
{
   80714:	b40f      	push	{r0, r1, r2, r3}
   80716:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8071a:	b083      	sub	sp, #12
	switch(sc)
   8071c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8071e:	2905      	cmp	r1, #5
   80720:	f000 82a8 	beq.w	80c74 <Modbus+0x560>
   80724:	d94c      	bls.n	807c0 <Modbus+0xac>
   80726:	2964      	cmp	r1, #100	; 0x64
   80728:	d05f      	beq.n	807ea <Modbus+0xd6>
   8072a:	d956      	bls.n	807da <Modbus+0xc6>
   8072c:	2966      	cmp	r1, #102	; 0x66
   8072e:	d079      	beq.n	80824 <Modbus+0x110>
   80730:	2967      	cmp	r1, #103	; 0x67
   80732:	d14e      	bne.n	807d2 <Modbus+0xbe>
#define _outputAddr			((uint16_t)pa2)
#define _outputValue		((uint16_t)pa3)
#define _pModbusTxFramePtr	((t_modbusFrame*)sc)
#define _modbusOutputAddr	modbus.startAddr
#define _modbusOutputValue	modbus.regQty
		sc=rs485_GetBufPtr();
   80734:	2067      	movs	r0, #103	; 0x67
   80736:	4fa9      	ldr	r7, [pc, #676]	; (809dc <Modbus+0x2c8>)
   80738:	47b8      	blx	r7
   8073a:	4605      	mov	r5, r0
		modbus.crc=CRC16MODBUSbyte((modbus.destAddr = _pModbusTxFramePtr->moduleAddr=_slaveAddr),0xFFFF);
   8073c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
   80740:	7006      	strb	r6, [r0, #0]
   80742:	4ca7      	ldr	r4, [pc, #668]	; (809e0 <Modbus+0x2cc>)
   80744:	7366      	strb	r6, [r4, #13]
   80746:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8074a:	4630      	mov	r0, r6
   8074c:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 80a1c <Modbus+0x308>
   80750:	47c0      	blx	r8
   80752:	8120      	strh	r0, [r4, #8]
		modbus.crc=CRC16MODBUSbyte((modbus.functionCode = _pModbusTxFramePtr->functionCode = WRITE_SINGLE_COIL), modbus.crc);
   80754:	2005      	movs	r0, #5
   80756:	7068      	strb	r0, [r5, #1]
   80758:	72a0      	strb	r0, [r4, #10]
   8075a:	8921      	ldrh	r1, [r4, #8]
   8075c:	47c0      	blx	r8
   8075e:	8120      	strh	r0, [r4, #8]
		modbus.crc=CRC16MODBUSword((_modbusOutputAddr = _pModbusTxFramePtr->writeSingleCoil_header.outputAddr= swap16(_outputAddr)),modbus.crc);
   80760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   80762:	0218      	lsls	r0, r3, #8
   80764:	f3c3 2307 	ubfx	r3, r3, #8, #8
   80768:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   8076c:	4318      	orrs	r0, r3
   8076e:	8068      	strh	r0, [r5, #2]
   80770:	81e0      	strh	r0, [r4, #14]
   80772:	8921      	ldrh	r1, [r4, #8]
   80774:	f8df 8284 	ldr.w	r8, [pc, #644]	; 809fc <Modbus+0x2e8>
   80778:	47c0      	blx	r8
   8077a:	8120      	strh	r0, [r4, #8]
		modbus.crc=CRC16MODBUSword((_modbusOutputValue = _pModbusTxFramePtr->writeSingleCoil_header.outputValue=swap16(_outputValue)),modbus.crc);
   8077c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8077e:	0218      	lsls	r0, r3, #8
   80780:	f3c3 2307 	ubfx	r3, r3, #8, #8
   80784:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   80788:	4318      	orrs	r0, r3
   8078a:	80a8      	strh	r0, [r5, #4]
   8078c:	8220      	strh	r0, [r4, #16]
   8078e:	8921      	ldrh	r1, [r4, #8]
   80790:	47c0      	blx	r8
   80792:	b283      	uxth	r3, r0
   80794:	8123      	strh	r3, [r4, #8]
		_pModbusTxFramePtr->writeSingleCoil_header.writeSingleCoil_crc=swap16(modbus.crc);
   80796:	0200      	lsls	r0, r0, #8
   80798:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8079c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   807a0:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   807a4:	80e8      	strh	r0, [r5, #6]
		mBitsSet(modbus.status, ST_FRAME_ACK_REQ);
   807a6:	7823      	ldrb	r3, [r4, #0]
   807a8:	f043 0302 	orr.w	r3, r3, #2
   807ac:	7023      	strb	r3, [r4, #0]
		rs485_Send((modbus.frameLen = MODBUS_WRITE_SINGLE_COIL_FRAME_LEN),(_slaveAddr!=MODBUS_BROADCAST_ADDRESS));
   807ae:	2108      	movs	r1, #8
   807b0:	8261      	strh	r1, [r4, #18]
   807b2:	f1b6 027f 	subs.w	r2, r6, #127	; 0x7f
   807b6:	bf18      	it	ne
   807b8:	2201      	movne	r2, #1
   807ba:	2066      	movs	r0, #102	; 0x66
   807bc:	47b8      	blx	r7
#undef _outputAddr
#undef _outputValue
#undef _pModbusTxFramePtr
#undef _modbusOutputAddr
#undef _modbusOutputValue
		break;
   807be:	e00e      	b.n	807de <Modbus+0xca>
	switch(sc)
   807c0:	2902      	cmp	r1, #2
   807c2:	f000 8263 	beq.w	80c8c <Modbus+0x578>
   807c6:	2904      	cmp	r1, #4
   807c8:	f000 822e 	beq.w	80c28 <Modbus+0x514>
   807cc:	2901      	cmp	r1, #1
   807ce:	f000 80cc 	beq.w	8096a <Modbus+0x256>
#undef _slaveAddr
		break;

	///// DEFAULT SWITCH BAD SC ERROR TRAP ////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_MODBUS_SWITCH_BAD_SC,sc);
   807d2:	2021      	movs	r0, #33	; 0x21
   807d4:	4b83      	ldr	r3, [pc, #524]	; (809e4 <Modbus+0x2d0>)
   807d6:	4798      	blx	r3
   807d8:	e001      	b.n	807de <Modbus+0xca>
	switch(sc)
   807da:	2906      	cmp	r1, #6
   807dc:	d1f9      	bne.n	807d2 <Modbus+0xbe>
	}


	return 0;
}
   807de:	2000      	movs	r0, #0
   807e0:	b003      	add	sp, #12
   807e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   807e6:	b004      	add	sp, #16
   807e8:	4770      	bx	lr
		modbus.reg=0;
   807ea:	497d      	ldr	r1, [pc, #500]	; (809e0 <Modbus+0x2cc>)
   807ec:	2300      	movs	r3, #0
   807ee:	600b      	str	r3, [r1, #0]
		if((modbus.moduleAddr=_moduleAddr)==0) 
   807f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   807f2:	b2d3      	uxtb	r3, r2
   807f4:	730b      	strb	r3, [r1, #12]
   807f6:	b943      	cbnz	r3, 8080a <Modbus+0xf6>
			mBitsSet(modbus.status,ST_MODULE_IS_MASTER);
   807f8:	2201      	movs	r2, #1
   807fa:	700a      	strb	r2, [r1, #0]
			LcdPutstr("MASTER", 3, 6);
   807fc:	2306      	movs	r3, #6
   807fe:	2203      	movs	r2, #3
   80800:	4979      	ldr	r1, [pc, #484]	; (809e8 <Modbus+0x2d4>)
   80802:	2068      	movs	r0, #104	; 0x68
   80804:	4c79      	ldr	r4, [pc, #484]	; (809ec <Modbus+0x2d8>)
   80806:	47a0      	blx	r4
   80808:	e7e9      	b.n	807de <Modbus+0xca>
			sprintf(buf,"Slave ADD:%x", _moduleAddr);
   8080a:	4c79      	ldr	r4, [pc, #484]	; (809f0 <Modbus+0x2dc>)
   8080c:	b2d2      	uxtb	r2, r2
   8080e:	4979      	ldr	r1, [pc, #484]	; (809f4 <Modbus+0x2e0>)
   80810:	4620      	mov	r0, r4
   80812:	4b79      	ldr	r3, [pc, #484]	; (809f8 <Modbus+0x2e4>)
   80814:	4798      	blx	r3
			LcdPutstr(buf, 3, 3);
   80816:	2303      	movs	r3, #3
   80818:	461a      	mov	r2, r3
   8081a:	4621      	mov	r1, r4
   8081c:	2068      	movs	r0, #104	; 0x68
   8081e:	4c73      	ldr	r4, [pc, #460]	; (809ec <Modbus+0x2d8>)
   80820:	47a0      	blx	r4
   80822:	e7dc      	b.n	807de <Modbus+0xca>
		sc=rs485_GetBufPtr();
   80824:	2067      	movs	r0, #103	; 0x67
   80826:	4b6d      	ldr	r3, [pc, #436]	; (809dc <Modbus+0x2c8>)
   80828:	4798      	blx	r3
   8082a:	4680      	mov	r8, r0
   8082c:	900c      	str	r0, [sp, #48]	; 0x30
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->moduleAddr=_slaveAddr),0xFFFF);
   8082e:	4606      	mov	r6, r0
   80830:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
   80834:	f880 a000 	strb.w	sl, [r0]
   80838:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8083c:	4650      	mov	r0, sl
   8083e:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 80a1c <Modbus+0x308>
   80842:	47d8      	blx	fp
   80844:	4f66      	ldr	r7, [pc, #408]	; (809e0 <Modbus+0x2cc>)
   80846:	8138      	strh	r0, [r7, #8]
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->functionCode=_startingAddr),modbus.crc);
   80848:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8084a:	b2e0      	uxtb	r0, r4
   8084c:	f888 0001 	strb.w	r0, [r8, #1]
   80850:	8939      	ldrh	r1, [r7, #8]
   80852:	47d8      	blx	fp
   80854:	8138      	strh	r0, [r7, #8]
		modbus.crc=CRC16MODBUSword((_pModbusTxFramePtr->writeMultipleRegister_header.startingAddr=swap16(_startingAddr)),modbus.crc);
   80856:	0220      	lsls	r0, r4, #8
   80858:	f3c4 2407 	ubfx	r4, r4, #8, #8
   8085c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
   80860:	4320      	orrs	r0, r4
   80862:	f8a8 0002 	strh.w	r0, [r8, #2]
   80866:	8939      	ldrh	r1, [r7, #8]
   80868:	4b64      	ldr	r3, [pc, #400]	; (809fc <Modbus+0x2e8>)
   8086a:	4798      	blx	r3
   8086c:	8138      	strh	r0, [r7, #8]
		modbus.crc=CRC16MODBUSword((_pModbusTxFramePtr->writeMultipleRegister_header.registerQty=swap16(_registerQty)),modbus.crc);
   8086e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   80872:	fa1f f489 	uxth.w	r4, r9
   80876:	4625      	mov	r5, r4
   80878:	ea4f 2009 	mov.w	r0, r9, lsl #8
   8087c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80880:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   80884:	ea40 2014 	orr.w	r0, r0, r4, lsr #8
   80888:	b280      	uxth	r0, r0
   8088a:	f8a8 0004 	strh.w	r0, [r8, #4]
   8088e:	8939      	ldrh	r1, [r7, #8]
   80890:	4b5a      	ldr	r3, [pc, #360]	; (809fc <Modbus+0x2e8>)
   80892:	4798      	blx	r3
   80894:	8138      	strh	r0, [r7, #8]
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->writeMultipleRegister_header.byteCount=_registerQty*2),modbus.crc);
   80896:	ea4f 0049 	mov.w	r0, r9, lsl #1
   8089a:	b2c0      	uxtb	r0, r0
   8089c:	f888 0006 	strb.w	r0, [r8, #6]
   808a0:	8939      	ldrh	r1, [r7, #8]
   808a2:	47d8      	blx	fp
   808a4:	8138      	strh	r0, [r7, #8]
		for (_k=0;_k<_registerQty;_k++)
   808a6:	2300      	movs	r3, #0
   808a8:	930e      	str	r3, [sp, #56]	; 0x38
   808aa:	b1c4      	cbz	r4, 808de <Modbus+0x1ca>
   808ac:	461f      	mov	r7, r3
			modbus.crc=CRC16MODBUSword((_pModbusTxFramePtr->writeMultipleRegister_header.dataField[_k]=swap16(_dataPtr[_k])),modbus.crc);
   808ae:	f8df 9130 	ldr.w	r9, [pc, #304]	; 809e0 <Modbus+0x2cc>
   808b2:	f8df b148 	ldr.w	fp, [pc, #328]	; 809fc <Modbus+0x2e8>
   808b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   808b8:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
   808bc:	0218      	lsls	r0, r3, #8
   808be:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   808c2:	b280      	uxth	r0, r0
   808c4:	eb06 0347 	add.w	r3, r6, r7, lsl #1
   808c8:	f8a3 0007 	strh.w	r0, [r3, #7]
   808cc:	f8b9 1008 	ldrh.w	r1, [r9, #8]
   808d0:	47d8      	blx	fp
   808d2:	f8a9 0008 	strh.w	r0, [r9, #8]
		for (_k=0;_k<_registerQty;_k++)
   808d6:	3701      	adds	r7, #1
   808d8:	970e      	str	r7, [sp, #56]	; 0x38
   808da:	42bd      	cmp	r5, r7
   808dc:	d1eb      	bne.n	808b6 <Modbus+0x1a2>
		_pModbusTxFramePtr->writeMultipleRegister_header.dataField[_k]=swap16(modbus.crc);
   808de:	4b40      	ldr	r3, [pc, #256]	; (809e0 <Modbus+0x2cc>)
   808e0:	8919      	ldrh	r1, [r3, #8]
   808e2:	020a      	lsls	r2, r1, #8
   808e4:	eb08 0344 	add.w	r3, r8, r4, lsl #1
   808e8:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   808ec:	f8a3 2007 	strh.w	r2, [r3, #7]
		(_slaveAddr!=MODBUS_BROADCAST_ADDRESS)?	mBitsSet(modbus.status, ST_FRAME_ACK_REQ) : mBitsClr(modbus.status, ST_FRAME_ACK_REQ);
   808f0:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
   808f4:	4a3a      	ldr	r2, [pc, #232]	; (809e0 <Modbus+0x2cc>)
   808f6:	7813      	ldrb	r3, [r2, #0]
   808f8:	bf14      	ite	ne
   808fa:	f043 0302 	orrne.w	r3, r3, #2
   808fe:	f023 0302 	biceq.w	r3, r3, #2
   80902:	7013      	strb	r3, [r2, #0]
		if(IsAckReq())
   80904:	4b36      	ldr	r3, [pc, #216]	; (809e0 <Modbus+0x2cc>)
   80906:	781b      	ldrb	r3, [r3, #0]
   80908:	f013 0f02 	tst.w	r3, #2
   8090c:	d10b      	bne.n	80926 <Modbus+0x212>
		rs485_Send((modbus.frameLen = _registerQty*2+9), IsAckReq());
   8090e:	0061      	lsls	r1, r4, #1
   80910:	3109      	adds	r1, #9
   80912:	b289      	uxth	r1, r1
   80914:	4b32      	ldr	r3, [pc, #200]	; (809e0 <Modbus+0x2cc>)
   80916:	8259      	strh	r1, [r3, #18]
   80918:	781a      	ldrb	r2, [r3, #0]
   8091a:	f3c2 0240 	ubfx	r2, r2, #1, #1
   8091e:	2066      	movs	r0, #102	; 0x66
   80920:	4b2e      	ldr	r3, [pc, #184]	; (809dc <Modbus+0x2c8>)
   80922:	4798      	blx	r3
		break;
   80924:	e75b      	b.n	807de <Modbus+0xca>
			sprintf(buf, "\r\nSlave com: %x			Slave add:%x\r\n", _pModbusTxFramePtr->moduleAddr, modbus.moduleAddr);
   80926:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 809e0 <Modbus+0x2cc>
   8092a:	4d31      	ldr	r5, [pc, #196]	; (809f0 <Modbus+0x2dc>)
   8092c:	f899 300c 	ldrb.w	r3, [r9, #12]
   80930:	f898 2000 	ldrb.w	r2, [r8]
   80934:	4932      	ldr	r1, [pc, #200]	; (80a00 <Modbus+0x2ec>)
   80936:	4628      	mov	r0, r5
   80938:	4f2f      	ldr	r7, [pc, #188]	; (809f8 <Modbus+0x2e4>)
   8093a:	47b8      	blx	r7
			Putstr(buf);
   8093c:	4629      	mov	r1, r5
   8093e:	2067      	movs	r0, #103	; 0x67
   80940:	4e30      	ldr	r6, [pc, #192]	; (80a04 <Modbus+0x2f0>)
   80942:	47b0      	blx	r6
			sprintf(buf, "\r\nFunc: %x\r\n", _pModbusTxFramePtr->functionCode);
   80944:	f898 2001 	ldrb.w	r2, [r8, #1]
   80948:	492f      	ldr	r1, [pc, #188]	; (80a08 <Modbus+0x2f4>)
   8094a:	4628      	mov	r0, r5
   8094c:	47b8      	blx	r7
			Putstr(buf);
   8094e:	4629      	mov	r1, r5
   80950:	2067      	movs	r0, #103	; 0x67
   80952:	47b0      	blx	r6
			sprintf(buf, "\r\nIsAckReq: %d\r\n", IsAckReq());
   80954:	f899 2000 	ldrb.w	r2, [r9]
   80958:	f3c2 0240 	ubfx	r2, r2, #1, #1
   8095c:	492b      	ldr	r1, [pc, #172]	; (80a0c <Modbus+0x2f8>)
   8095e:	4628      	mov	r0, r5
   80960:	47b8      	blx	r7
			Putstr(buf);
   80962:	4629      	mov	r1, r5
   80964:	2067      	movs	r0, #103	; 0x67
   80966:	47b0      	blx	r6
   80968:	e7d1      	b.n	8090e <Modbus+0x1fa>
		if(IsMaster())
   8096a:	4b1d      	ldr	r3, [pc, #116]	; (809e0 <Modbus+0x2cc>)
   8096c:	781b      	ldrb	r3, [r3, #0]
   8096e:	f013 0f01 	tst.w	r3, #1
   80972:	d055      	beq.n	80a20 <Modbus+0x30c>
			Putstr("\r\n\tIs MASTER\r\n");
   80974:	4926      	ldr	r1, [pc, #152]	; (80a10 <Modbus+0x2fc>)
   80976:	2067      	movs	r0, #103	; 0x67
   80978:	4d22      	ldr	r5, [pc, #136]	; (80a04 <Modbus+0x2f0>)
   8097a:	47a8      	blx	r5
			sprintf(buf, "\r\n\tACK REQUIRED: %d", IsAckReq());
   8097c:	4c18      	ldr	r4, [pc, #96]	; (809e0 <Modbus+0x2cc>)
   8097e:	7822      	ldrb	r2, [r4, #0]
   80980:	4e1b      	ldr	r6, [pc, #108]	; (809f0 <Modbus+0x2dc>)
   80982:	f3c2 0240 	ubfx	r2, r2, #1, #1
   80986:	4923      	ldr	r1, [pc, #140]	; (80a14 <Modbus+0x300>)
   80988:	4630      	mov	r0, r6
   8098a:	4b1b      	ldr	r3, [pc, #108]	; (809f8 <Modbus+0x2e4>)
   8098c:	4798      	blx	r3
			Putstr(buf);
   8098e:	4631      	mov	r1, r6
   80990:	2067      	movs	r0, #103	; 0x67
   80992:	47a8      	blx	r5
			if(IsAckReq())
   80994:	7823      	ldrb	r3, [r4, #0]
   80996:	f013 0f02 	tst.w	r3, #2
   8099a:	f43f af20 	beq.w	807de <Modbus+0xca>
				sc=rs485_GetBufPtr();
   8099e:	2067      	movs	r0, #103	; 0x67
   809a0:	4b0e      	ldr	r3, [pc, #56]	; (809dc <Modbus+0x2c8>)
   809a2:	4798      	blx	r3
   809a4:	4604      	mov	r4, r0
   809a6:	900c      	str	r0, [sp, #48]	; 0x30
				switch(_pModbusRxFramePtr->functionCode)
   809a8:	7841      	ldrb	r1, [r0, #1]
   809aa:	2905      	cmp	r1, #5
   809ac:	d10c      	bne.n	809c8 <Modbus+0x2b4>
					Putstr("\r\n\tWRITE_SINGLE_COIL_ACK_OK\r\n");
   809ae:	491a      	ldr	r1, [pc, #104]	; (80a18 <Modbus+0x304>)
   809b0:	2067      	movs	r0, #103	; 0x67
   809b2:	47a8      	blx	r5
					if(_pModbusRxFramePtr->moduleAddr == 0x16)
   809b4:	7823      	ldrb	r3, [r4, #0]
   809b6:	2b16      	cmp	r3, #22
   809b8:	d109      	bne.n	809ce <Modbus+0x2ba>
						WriteSingleCoil(0x20, 0x01, 0x01);
   809ba:	2301      	movs	r3, #1
   809bc:	461a      	mov	r2, r3
   809be:	2120      	movs	r1, #32
   809c0:	2067      	movs	r0, #103	; 0x67
   809c2:	f7ff fea7 	bl	80714 <Modbus>
   809c6:	e002      	b.n	809ce <Modbus+0x2ba>
					Error(ERROR_MODBUS_PROCESS_ACK_FRAME_SWITCH_BAD_SC, _pModbusRxFramePtr->functionCode);
   809c8:	2012      	movs	r0, #18
   809ca:	4b06      	ldr	r3, [pc, #24]	; (809e4 <Modbus+0x2d0>)
   809cc:	4798      	blx	r3
				mBitsClr(modbus.status, ST_FRAME_ACK_REQ);
   809ce:	4a04      	ldr	r2, [pc, #16]	; (809e0 <Modbus+0x2cc>)
   809d0:	7813      	ldrb	r3, [r2, #0]
   809d2:	f023 0302 	bic.w	r3, r3, #2
   809d6:	7013      	strb	r3, [r2, #0]
   809d8:	e701      	b.n	807de <Modbus+0xca>
   809da:	bf00      	nop
   809dc:	0008038d 	.word	0x0008038d
   809e0:	200012d8 	.word	0x200012d8
   809e4:	00082481 	.word	0x00082481
   809e8:	000896a4 	.word	0x000896a4
   809ec:	000829cd 	.word	0x000829cd
   809f0:	200012ec 	.word	0x200012ec
   809f4:	000896ac 	.word	0x000896ac
   809f8:	00084b49 	.word	0x00084b49
   809fc:	0008245d 	.word	0x0008245d
   80a00:	000896bc 	.word	0x000896bc
   80a04:	00083f55 	.word	0x00083f55
   80a08:	000896e0 	.word	0x000896e0
   80a0c:	000896f0 	.word	0x000896f0
   80a10:	00089704 	.word	0x00089704
   80a14:	00089714 	.word	0x00089714
   80a18:	00089728 	.word	0x00089728
   80a1c:	00082449 	.word	0x00082449
			sc=rs485_GetBufPtr();
   80a20:	2067      	movs	r0, #103	; 0x67
   80a22:	4ba1      	ldr	r3, [pc, #644]	; (80ca8 <Modbus+0x594>)
   80a24:	4798      	blx	r3
   80a26:	4604      	mov	r4, r0
   80a28:	900c      	str	r0, [sp, #48]	; 0x30
			if((_pModbusRxFramePtr->moduleAddr!=modbus.moduleAddr)&&(_pModbusRxFramePtr->moduleAddr!=MODBUS_BROADCAST_ADDRESS))
   80a2a:	4606      	mov	r6, r0
   80a2c:	7802      	ldrb	r2, [r0, #0]
   80a2e:	4b9f      	ldr	r3, [pc, #636]	; (80cac <Modbus+0x598>)
   80a30:	7b1b      	ldrb	r3, [r3, #12]
   80a32:	429a      	cmp	r2, r3
   80a34:	d001      	beq.n	80a3a <Modbus+0x326>
   80a36:	2a7f      	cmp	r2, #127	; 0x7f
   80a38:	d138      	bne.n	80aac <Modbus+0x398>
			sprintf(buf, "\r\nSlave com: %x			Slave add:%x\r\n", _pModbusRxFramePtr->moduleAddr, modbus.moduleAddr);
   80a3a:	4d9d      	ldr	r5, [pc, #628]	; (80cb0 <Modbus+0x59c>)
   80a3c:	499d      	ldr	r1, [pc, #628]	; (80cb4 <Modbus+0x5a0>)
   80a3e:	4628      	mov	r0, r5
   80a40:	f8df 827c 	ldr.w	r8, [pc, #636]	; 80cc0 <Modbus+0x5ac>
   80a44:	47c0      	blx	r8
			Putstr(buf);
   80a46:	4629      	mov	r1, r5
   80a48:	2067      	movs	r0, #103	; 0x67
   80a4a:	4f9b      	ldr	r7, [pc, #620]	; (80cb8 <Modbus+0x5a4>)
   80a4c:	47b8      	blx	r7
			sprintf(buf, "\r\nFunc: %x\r\n", _pModbusRxFramePtr->functionCode);
   80a4e:	7862      	ldrb	r2, [r4, #1]
   80a50:	499a      	ldr	r1, [pc, #616]	; (80cbc <Modbus+0x5a8>)
   80a52:	4628      	mov	r0, r5
   80a54:	47c0      	blx	r8
			Putstr(buf);
   80a56:	4629      	mov	r1, r5
   80a58:	2067      	movs	r0, #103	; 0x67
   80a5a:	47b8      	blx	r7
			switch(_pModbusRxFramePtr->functionCode)
   80a5c:	7863      	ldrb	r3, [r4, #1]
   80a5e:	3b01      	subs	r3, #1
   80a60:	2b0f      	cmp	r3, #15
   80a62:	f200 80d8 	bhi.w	80c16 <Modbus+0x502>
   80a66:	a201      	add	r2, pc, #4	; (adr r2, 80a6c <Modbus+0x358>)
   80a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80a6c:	00080bd3 	.word	0x00080bd3
   80a70:	00080c17 	.word	0x00080c17
   80a74:	000807df 	.word	0x000807df
   80a78:	00080c17 	.word	0x00080c17
   80a7c:	00080b83 	.word	0x00080b83
   80a80:	00080c17 	.word	0x00080c17
   80a84:	00080c17 	.word	0x00080c17
   80a88:	00080c17 	.word	0x00080c17
   80a8c:	00080c17 	.word	0x00080c17
   80a90:	00080c17 	.word	0x00080c17
   80a94:	00080c17 	.word	0x00080c17
   80a98:	00080c17 	.word	0x00080c17
   80a9c:	00080c17 	.word	0x00080c17
   80aa0:	00080c17 	.word	0x00080c17
   80aa4:	00080c17 	.word	0x00080c17
   80aa8:	00080ac1 	.word	0x00080ac1
				sprintf(buf, "\r\nSlave com: %x			Slave add:%x\r\n", _pModbusRxFramePtr->moduleAddr, modbus.moduleAddr);
   80aac:	4c80      	ldr	r4, [pc, #512]	; (80cb0 <Modbus+0x59c>)
   80aae:	4981      	ldr	r1, [pc, #516]	; (80cb4 <Modbus+0x5a0>)
   80ab0:	4620      	mov	r0, r4
   80ab2:	4d83      	ldr	r5, [pc, #524]	; (80cc0 <Modbus+0x5ac>)
   80ab4:	47a8      	blx	r5
				Putstr(buf);
   80ab6:	4621      	mov	r1, r4
   80ab8:	2067      	movs	r0, #103	; 0x67
   80aba:	4b7f      	ldr	r3, [pc, #508]	; (80cb8 <Modbus+0x5a4>)
   80abc:	4798      	blx	r3
				return 0;
   80abe:	e68e      	b.n	807de <Modbus+0xca>
				switch(swap16(_pModbusRxFramePtr->writeMultipleRegister_header.startingAddr))
   80ac0:	8872      	ldrh	r2, [r6, #2]
   80ac2:	0213      	lsls	r3, r2, #8
   80ac4:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   80ac8:	b21b      	sxth	r3, r3
   80aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   80ace:	d14f      	bne.n	80b70 <Modbus+0x45c>
					if((_pModbusRxFramePtr->writeMultipleRegister_header.startingAddr == modbus.startAddr) &&
   80ad0:	4b76      	ldr	r3, [pc, #472]	; (80cac <Modbus+0x598>)
   80ad2:	89db      	ldrh	r3, [r3, #14]
   80ad4:	4293      	cmp	r3, r2
   80ad6:	d03b      	beq.n	80b50 <Modbus+0x43c>
					while ((RTC->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   80ad8:	4a7a      	ldr	r2, [pc, #488]	; (80cc4 <Modbus+0x5b0>)
   80ada:	6993      	ldr	r3, [r2, #24]
   80adc:	f013 0f04 	tst.w	r3, #4
   80ae0:	d0fb      	beq.n	80ada <Modbus+0x3c6>
					RTC->RTC_CR |= (RTC_CR_UPDTIM | RTC_CR_UPDCAL) ;
   80ae2:	4a78      	ldr	r2, [pc, #480]	; (80cc4 <Modbus+0x5b0>)
   80ae4:	6813      	ldr	r3, [r2, #0]
   80ae6:	f043 0303 	orr.w	r3, r3, #3
   80aea:	6013      	str	r3, [r2, #0]
					while ((RTC->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   80aec:	6993      	ldr	r3, [r2, #24]
   80aee:	f013 0f01 	tst.w	r3, #1
   80af2:	d0fb      	beq.n	80aec <Modbus+0x3d8>
					RTC->RTC_SCCR = RTC_SCCR_ACKCLR;
   80af4:	4a73      	ldr	r2, [pc, #460]	; (80cc4 <Modbus+0x5b0>)
   80af6:	2301      	movs	r3, #1
   80af8:	61d3      	str	r3, [r2, #28]
					_pModbusRxFramePtr->writeMultipleRegister_header.dataField[0]=swap16(_pModbusRxFramePtr->writeMultipleRegister_header.dataField[0]);
   80afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   80afc:	f8b3 0007 	ldrh.w	r0, [r3, #7]
   80b00:	0201      	lsls	r1, r0, #8
   80b02:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
   80b06:	f8a3 1007 	strh.w	r1, [r3, #7]
					_pModbusRxFramePtr->writeMultipleRegister_header.dataField[1]=swap16(_pModbusRxFramePtr->writeMultipleRegister_header.dataField[1]);
   80b0a:	f8b3 0009 	ldrh.w	r0, [r3, #9]
   80b0e:	0201      	lsls	r1, r0, #8
   80b10:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
   80b14:	f8a3 1009 	strh.w	r1, [r3, #9]
					_pModbusRxFramePtr->writeMultipleRegister_header.dataField[2]=swap16(_pModbusRxFramePtr->writeMultipleRegister_header.dataField[2]);
   80b18:	f8b3 000b 	ldrh.w	r0, [r3, #11]
   80b1c:	0201      	lsls	r1, r0, #8
   80b1e:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
   80b22:	f8a3 100b 	strh.w	r1, [r3, #11]
					_pModbusRxFramePtr->writeMultipleRegister_header.dataField[3]=swap16(_pModbusRxFramePtr->writeMultipleRegister_header.dataField[3]);
   80b26:	f8b3 000d 	ldrh.w	r0, [r3, #13]
   80b2a:	0201      	lsls	r1, r0, #8
   80b2c:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
   80b30:	f8a3 100d 	strh.w	r1, [r3, #13]
					*registerMap[0]=*(uint32_t*)&_pModbusRxFramePtr->writeMultipleRegister_header.dataField[0];
   80b34:	f8d3 1007 	ldr.w	r1, [r3, #7]
   80b38:	4b63      	ldr	r3, [pc, #396]	; (80cc8 <Modbus+0x5b4>)
   80b3a:	6019      	str	r1, [r3, #0]
					*registerMap[1]=*(uint32_t*)&_pModbusRxFramePtr->writeMultipleRegister_header.dataField[2];
   80b3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   80b3e:	f8d3 100b 	ldr.w	r1, [r3, #11]
   80b42:	4b62      	ldr	r3, [pc, #392]	; (80ccc <Modbus+0x5b8>)
   80b44:	6019      	str	r1, [r3, #0]
					RTC->RTC_CR &= ((~RTC_CR_UPDTIM)&(~RTC_CR_UPDCAL));
   80b46:	6813      	ldr	r3, [r2, #0]
   80b48:	f023 0303 	bic.w	r3, r3, #3
   80b4c:	6013      	str	r3, [r2, #0]
   80b4e:	e646      	b.n	807de <Modbus+0xca>
						((_pModbusRxFramePtr->writeMultipleRegister_header.startingAddr + _pModbusRxFramePtr->writeMultipleRegister_header.registerQty) >= modbus.startAddr + modbus.regQty))
   80b50:	88b1      	ldrh	r1, [r6, #4]
   80b52:	4411      	add	r1, r2
   80b54:	4b55      	ldr	r3, [pc, #340]	; (80cac <Modbus+0x598>)
   80b56:	8a1b      	ldrh	r3, [r3, #16]
   80b58:	441a      	add	r2, r3
					if((_pModbusRxFramePtr->writeMultipleRegister_header.startingAddr == modbus.startAddr) &&
   80b5a:	4291      	cmp	r1, r2
   80b5c:	dbbc      	blt.n	80ad8 <Modbus+0x3c4>
						PushTask(Modbus,_MODBUS_RETURN_ERROR_CODE,2,0);
   80b5e:	2300      	movs	r3, #0
   80b60:	9300      	str	r3, [sp, #0]
   80b62:	2302      	movs	r3, #2
   80b64:	2204      	movs	r2, #4
   80b66:	495a      	ldr	r1, [pc, #360]	; (80cd0 <Modbus+0x5bc>)
   80b68:	2066      	movs	r0, #102	; 0x66
   80b6a:	4c5a      	ldr	r4, [pc, #360]	; (80cd4 <Modbus+0x5c0>)
   80b6c:	47a0      	blx	r4
						return 0;
   80b6e:	e636      	b.n	807de <Modbus+0xca>
					PushTask(Modbus,_MODBUS_RETURN_ERROR_CODE,2,0);
   80b70:	2300      	movs	r3, #0
   80b72:	9300      	str	r3, [sp, #0]
   80b74:	2302      	movs	r3, #2
   80b76:	2204      	movs	r2, #4
   80b78:	4955      	ldr	r1, [pc, #340]	; (80cd0 <Modbus+0x5bc>)
   80b7a:	2066      	movs	r0, #102	; 0x66
   80b7c:	4c55      	ldr	r4, [pc, #340]	; (80cd4 <Modbus+0x5c0>)
   80b7e:	47a0      	blx	r4
					break;
   80b80:	e62d      	b.n	807de <Modbus+0xca>
				gpio_toggle_pin(CMD_MOSFET);
   80b82:	2020      	movs	r0, #32
   80b84:	4f54      	ldr	r7, [pc, #336]	; (80cd8 <Modbus+0x5c4>)
   80b86:	47b8      	blx	r7
				gpio_toggle_pin(CMD_MOT_SERRURE);
   80b88:	2021      	movs	r0, #33	; 0x21
   80b8a:	47b8      	blx	r7
					swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputAddr), swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputValue));
   80b8c:	8872      	ldrh	r2, [r6, #2]
   80b8e:	88b0      	ldrh	r0, [r6, #4]
   80b90:	0213      	lsls	r3, r2, #8
   80b92:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
				sprintf(buf, "\r\nWRITE SINGLE COIL\r\nFunctionCode: %X\r\nOUTPUT ADDR: %X OUTPUT VALUE: %X",_pModbusRxFramePtr->functionCode, 
   80b96:	7862      	ldrb	r2, [r4, #1]
					swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputAddr), swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputValue));
   80b98:	0201      	lsls	r1, r0, #8
   80b9a:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
				sprintf(buf, "\r\nWRITE SINGLE COIL\r\nFunctionCode: %X\r\nOUTPUT ADDR: %X OUTPUT VALUE: %X",_pModbusRxFramePtr->functionCode, 
   80b9e:	b289      	uxth	r1, r1
   80ba0:	9100      	str	r1, [sp, #0]
   80ba2:	b29b      	uxth	r3, r3
   80ba4:	494d      	ldr	r1, [pc, #308]	; (80cdc <Modbus+0x5c8>)
   80ba6:	4842      	ldr	r0, [pc, #264]	; (80cb0 <Modbus+0x59c>)
   80ba8:	4f45      	ldr	r7, [pc, #276]	; (80cc0 <Modbus+0x5ac>)
   80baa:	47b8      	blx	r7
				Putstr(buf);
   80bac:	4629      	mov	r1, r5
   80bae:	2067      	movs	r0, #103	; 0x67
   80bb0:	4b41      	ldr	r3, [pc, #260]	; (80cb8 <Modbus+0x5a4>)
   80bb2:	4798      	blx	r3
				WriteSingleCoilAck(_pModbusRxFramePtr->functionCode, swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputAddr), swap16(_pModbusRxFramePtr->writeSingleCoil_header.outputValue));
   80bb4:	8871      	ldrh	r1, [r6, #2]
   80bb6:	88b2      	ldrh	r2, [r6, #4]
   80bb8:	0213      	lsls	r3, r2, #8
   80bba:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   80bbe:	020a      	lsls	r2, r1, #8
   80bc0:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
   80bc4:	b29b      	uxth	r3, r3
   80bc6:	b292      	uxth	r2, r2
   80bc8:	7861      	ldrb	r1, [r4, #1]
   80bca:	2005      	movs	r0, #5
   80bcc:	f7ff fda2 	bl	80714 <Modbus>
				break;
   80bd0:	e605      	b.n	807de <Modbus+0xca>
				_pModbusRxFramePtr->writeMultipleRegister_header.dataField[0]=swap16(_pModbusRxFramePtr->writeMultipleRegister_header.dataField[0]);
   80bd2:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   80bd6:	0213      	lsls	r3, r2, #8
   80bd8:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   80bdc:	f8a4 3007 	strh.w	r3, [r4, #7]
				gpio_toggle_pin(CMD_MOSFET);
   80be0:	2020      	movs	r0, #32
   80be2:	4c3d      	ldr	r4, [pc, #244]	; (80cd8 <Modbus+0x5c4>)
   80be4:	47a0      	blx	r4
				gpio_toggle_pin(CMD_MOT_SERRURE);
   80be6:	2021      	movs	r0, #33	; 0x21
   80be8:	47a0      	blx	r4
				(_pModbusRxFramePtr->writeMultipleRegister_header.dataField[0]), swap16(_pModbusRxFramePtr->writeMultipleRegister_header.dataField[0]));
   80bea:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   80bee:	0213      	lsls	r3, r2, #8
   80bf0:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
				sprintf(buf, "\r\n%c%c\r\n",
   80bf4:	b29b      	uxth	r3, r3
   80bf6:	493a      	ldr	r1, [pc, #232]	; (80ce0 <Modbus+0x5cc>)
   80bf8:	482d      	ldr	r0, [pc, #180]	; (80cb0 <Modbus+0x59c>)
   80bfa:	4c31      	ldr	r4, [pc, #196]	; (80cc0 <Modbus+0x5ac>)
   80bfc:	47a0      	blx	r4
				Putstr(buf);
   80bfe:	4629      	mov	r1, r5
   80c00:	2067      	movs	r0, #103	; 0x67
   80c02:	4b2d      	ldr	r3, [pc, #180]	; (80cb8 <Modbus+0x5a4>)
   80c04:	4798      	blx	r3
				PushTask(Modbus, _MODBUS_RETURN_ERROR_CODE,0 , 0);
   80c06:	2300      	movs	r3, #0
   80c08:	9300      	str	r3, [sp, #0]
   80c0a:	2204      	movs	r2, #4
   80c0c:	4930      	ldr	r1, [pc, #192]	; (80cd0 <Modbus+0x5bc>)
   80c0e:	2066      	movs	r0, #102	; 0x66
   80c10:	4c30      	ldr	r4, [pc, #192]	; (80cd4 <Modbus+0x5c0>)
   80c12:	47a0      	blx	r4
				break;
   80c14:	e5e3      	b.n	807de <Modbus+0xca>
				PushTask(Modbus,_MODBUS_RETURN_ERROR_CODE,1,0);
   80c16:	2300      	movs	r3, #0
   80c18:	9300      	str	r3, [sp, #0]
   80c1a:	2301      	movs	r3, #1
   80c1c:	2204      	movs	r2, #4
   80c1e:	492c      	ldr	r1, [pc, #176]	; (80cd0 <Modbus+0x5bc>)
   80c20:	2066      	movs	r0, #102	; 0x66
   80c22:	4c2c      	ldr	r4, [pc, #176]	; (80cd4 <Modbus+0x5c0>)
   80c24:	47a0      	blx	r4
				break;
   80c26:	e5da      	b.n	807de <Modbus+0xca>
		sc=rs485_GetBufPtr();
   80c28:	2067      	movs	r0, #103	; 0x67
   80c2a:	4f1f      	ldr	r7, [pc, #124]	; (80ca8 <Modbus+0x594>)
   80c2c:	47b8      	blx	r7
   80c2e:	4604      	mov	r4, r0
		modbus.crc=CRC16MODBUSbyte(_pModbusTxFramePtr->moduleAddr,0xFFFF);
   80c30:	f64f 71ff 	movw	r1, #65535	; 0xffff
   80c34:	7800      	ldrb	r0, [r0, #0]
   80c36:	4e2b      	ldr	r6, [pc, #172]	; (80ce4 <Modbus+0x5d0>)
   80c38:	47b0      	blx	r6
   80c3a:	4d1c      	ldr	r5, [pc, #112]	; (80cac <Modbus+0x598>)
   80c3c:	8128      	strh	r0, [r5, #8]
		modbus.crc=CRC16MODBUSbyte(_pModbusTxFramePtr->functionCode|0x80,modbus.crc);
   80c3e:	7863      	ldrb	r3, [r4, #1]
   80c40:	b281      	uxth	r1, r0
   80c42:	f043 0080 	orr.w	r0, r3, #128	; 0x80
   80c46:	47b0      	blx	r6
   80c48:	8128      	strh	r0, [r5, #8]
		modbus.crc=CRC16MODBUSbyte((_pModbusTxFramePtr->errorFrame.exceptionCode=_exceptionCode),modbus.crc);
   80c4a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
   80c4e:	70a0      	strb	r0, [r4, #2]
   80c50:	8929      	ldrh	r1, [r5, #8]
   80c52:	47b0      	blx	r6
   80c54:	b283      	uxth	r3, r0
   80c56:	812b      	strh	r3, [r5, #8]
		_pModbusTxFramePtr->errorFrame.exceptionCode_crc=swap16(modbus.crc);
   80c58:	0200      	lsls	r0, r0, #8
   80c5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80c5e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   80c62:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   80c66:	f8a4 0003 	strh.w	r0, [r4, #3]
		rs485_Send(MODBUS_EXCEPTION_ERROR_FRAME_LEN, MODBUS_NEED_NO_ACK);
   80c6a:	2200      	movs	r2, #0
   80c6c:	2105      	movs	r1, #5
   80c6e:	2066      	movs	r0, #102	; 0x66
   80c70:	47b8      	blx	r7
		break;
   80c72:	e5b4      	b.n	807de <Modbus+0xca>
		Putstr("\r\n\nWRITE SINGLE COIL ACK!!\r\n");
   80c74:	491c      	ldr	r1, [pc, #112]	; (80ce8 <Modbus+0x5d4>)
   80c76:	2067      	movs	r0, #103	; 0x67
   80c78:	4b0f      	ldr	r3, [pc, #60]	; (80cb8 <Modbus+0x5a4>)
   80c7a:	4798      	blx	r3
		rs485_Send(modbus.frameLen = MODBUS_WRITE_SINGLE_COIL_FRAME_LEN, 0);
   80c7c:	2108      	movs	r1, #8
   80c7e:	4b0b      	ldr	r3, [pc, #44]	; (80cac <Modbus+0x598>)
   80c80:	8259      	strh	r1, [r3, #18]
   80c82:	2200      	movs	r2, #0
   80c84:	2066      	movs	r0, #102	; 0x66
   80c86:	4b08      	ldr	r3, [pc, #32]	; (80ca8 <Modbus+0x594>)
   80c88:	4798      	blx	r3
		break;
   80c8a:	e5a8      	b.n	807de <Modbus+0xca>
		Putstr("\r\n\t***** MODBUS_SLAVE_NOT_ACK FROM SLAVE #");
   80c8c:	4917      	ldr	r1, [pc, #92]	; (80cec <Modbus+0x5d8>)
   80c8e:	2067      	movs	r0, #103	; 0x67
   80c90:	4c09      	ldr	r4, [pc, #36]	; (80cb8 <Modbus+0x5a4>)
   80c92:	47a0      	blx	r4
		sprintf(buf, "%02x *****\r\n", _slaveAddr);
   80c94:	4d06      	ldr	r5, [pc, #24]	; (80cb0 <Modbus+0x59c>)
   80c96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   80c98:	4915      	ldr	r1, [pc, #84]	; (80cf0 <Modbus+0x5dc>)
   80c9a:	4628      	mov	r0, r5
   80c9c:	4b08      	ldr	r3, [pc, #32]	; (80cc0 <Modbus+0x5ac>)
   80c9e:	4798      	blx	r3
		Putstr(buf);
   80ca0:	4629      	mov	r1, r5
   80ca2:	2067      	movs	r0, #103	; 0x67
   80ca4:	47a0      	blx	r4
		break;
   80ca6:	e59a      	b.n	807de <Modbus+0xca>
   80ca8:	0008038d 	.word	0x0008038d
   80cac:	200012d8 	.word	0x200012d8
   80cb0:	200012ec 	.word	0x200012ec
   80cb4:	000896bc 	.word	0x000896bc
   80cb8:	00083f55 	.word	0x00083f55
   80cbc:	000896e0 	.word	0x000896e0
   80cc0:	00084b49 	.word	0x00084b49
   80cc4:	400e1260 	.word	0x400e1260
   80cc8:	400e1268 	.word	0x400e1268
   80ccc:	400e126c 	.word	0x400e126c
   80cd0:	00080715 	.word	0x00080715
   80cd4:	000841e5 	.word	0x000841e5
   80cd8:	00081411 	.word	0x00081411
   80cdc:	00089748 	.word	0x00089748
   80ce0:	00089790 	.word	0x00089790
   80ce4:	00082449 	.word	0x00082449
   80ce8:	0008979c 	.word	0x0008979c
   80cec:	000897bc 	.word	0x000897bc
   80cf0:	000897e8 	.word	0x000897e8

00080cf4 <Stack>:
 */ 

 #include "kernel.h"
 #define STACK_SIGNATURE		0xabcd
 uint32_t Stack(uint32_t sc, ...)
 {
   80cf4:	b40f      	push	{r0, r1, r2, r3}
   80cf6:	b510      	push	{r4, lr}
	switch(sc)
   80cf8:	9902      	ldr	r1, [sp, #8]
   80cfa:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   80cfe:	2b04      	cmp	r3, #4
   80d00:	d873      	bhi.n	80dea <Stack+0xf6>
   80d02:	e8df f003 	tbb	[pc, r3]
   80d06:	7203      	.short	0x7203
   80d08:	3f13      	.short	0x3f13
   80d0a:	65          	.byte	0x65
   80d0b:	00          	.byte	0x00
#define _stack		((t_stack*)pa1)
#define _org		((char*)pa2)
#define _size		((uint16_t)pa3)
#define _elemSize	((uint8_t)pa4)
	case STACK_NEW:
		_stack->size = _size;
   80d0c:	9b03      	ldr	r3, [sp, #12]
   80d0e:	9a05      	ldr	r2, [sp, #20]
   80d10:	811a      	strh	r2, [r3, #8]
		_stack->org = _org;
   80d12:	9a04      	ldr	r2, [sp, #16]
   80d14:	605a      	str	r2, [r3, #4]
		_stack->sp = _org;
   80d16:	601a      	str	r2, [r3, #0]
		_stack->elemSize = _elemSize;
   80d18:	9a06      	ldr	r2, [sp, #24]
   80d1a:	729a      	strb	r2, [r3, #10]
		_stack->status = STACK_SIGNATURE; 
   80d1c:	f64a 32cd 	movw	r2, #43981	; 0xabcd
   80d20:	819a      	strh	r2, [r3, #12]
	default:
		Error(ERROR_STACK_SWITCH_BAD_SC, sc);
		
	}
	return 0;
   80d22:	2000      	movs	r0, #0
   80d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80d28:	b004      	add	sp, #16
   80d2a:	4770      	bx	lr
		if(_stack->status != STACK_SIGNATURE) Error(ERROR_STACK_NOT_INIT, sc);
   80d2c:	9c03      	ldr	r4, [sp, #12]
   80d2e:	89a2      	ldrh	r2, [r4, #12]
   80d30:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80d34:	429a      	cmp	r2, r3
   80d36:	d003      	beq.n	80d40 <Stack+0x4c>
   80d38:	2166      	movs	r1, #102	; 0x66
   80d3a:	2033      	movs	r0, #51	; 0x33
   80d3c:	4b2d      	ldr	r3, [pc, #180]	; (80df4 <Stack+0x100>)
   80d3e:	4798      	blx	r3
		if(_stack->sp == (_stack->org + (_stack->size * _stack->elemSize))) Error(ERROR_STACK_PUSH_FULL, sc);
   80d40:	8923      	ldrh	r3, [r4, #8]
   80d42:	7aa1      	ldrb	r1, [r4, #10]
   80d44:	6862      	ldr	r2, [r4, #4]
   80d46:	fb01 2303 	mla	r3, r1, r3, r2
   80d4a:	6822      	ldr	r2, [r4, #0]
   80d4c:	429a      	cmp	r2, r3
   80d4e:	d012      	beq.n	80d76 <Stack+0x82>
		for(_k = 0; _k < _stack->elemSize; _k++)
   80d50:	2300      	movs	r3, #0
   80d52:	9302      	str	r3, [sp, #8]
   80d54:	7aa3      	ldrb	r3, [r4, #10]
   80d56:	b19b      	cbz	r3, 80d80 <Stack+0x8c>
   80d58:	9a04      	ldr	r2, [sp, #16]
   80d5a:	3a01      	subs	r2, #1
			_stack->sp[_k] = ((char*)_elem)[_k];
   80d5c:	2300      	movs	r3, #0
   80d5e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   80d62:	6821      	ldr	r1, [r4, #0]
   80d64:	54c8      	strb	r0, [r1, r3]
		for(_k = 0; _k < _stack->elemSize; _k++)
   80d66:	3301      	adds	r3, #1
   80d68:	7aa1      	ldrb	r1, [r4, #10]
   80d6a:	4299      	cmp	r1, r3
   80d6c:	d8f7      	bhi.n	80d5e <Stack+0x6a>
		_stack->sp+=_stack->elemSize;
   80d6e:	6823      	ldr	r3, [r4, #0]
   80d70:	4419      	add	r1, r3
   80d72:	6021      	str	r1, [r4, #0]
		break;
   80d74:	e7d5      	b.n	80d22 <Stack+0x2e>
		if(_stack->sp == (_stack->org + (_stack->size * _stack->elemSize))) Error(ERROR_STACK_PUSH_FULL, sc);
   80d76:	2166      	movs	r1, #102	; 0x66
   80d78:	2034      	movs	r0, #52	; 0x34
   80d7a:	4b1e      	ldr	r3, [pc, #120]	; (80df4 <Stack+0x100>)
   80d7c:	4798      	blx	r3
   80d7e:	e7e7      	b.n	80d50 <Stack+0x5c>
		for(_k = 0; _k < _stack->elemSize; _k++)
   80d80:	2100      	movs	r1, #0
   80d82:	e7f4      	b.n	80d6e <Stack+0x7a>
		if(_stack->status != STACK_SIGNATURE) Error(ERROR_STACK_NOT_INIT, sc);
   80d84:	9c03      	ldr	r4, [sp, #12]
   80d86:	89a2      	ldrh	r2, [r4, #12]
   80d88:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80d8c:	429a      	cmp	r2, r3
   80d8e:	d003      	beq.n	80d98 <Stack+0xa4>
   80d90:	2167      	movs	r1, #103	; 0x67
   80d92:	2033      	movs	r0, #51	; 0x33
   80d94:	4b17      	ldr	r3, [pc, #92]	; (80df4 <Stack+0x100>)
   80d96:	4798      	blx	r3
		if(_stack->sp == _stack->org) Error(ERROR_STACK_UNDERFLOW, sc);
   80d98:	6822      	ldr	r2, [r4, #0]
   80d9a:	6863      	ldr	r3, [r4, #4]
   80d9c:	429a      	cmp	r2, r3
   80d9e:	d012      	beq.n	80dc6 <Stack+0xd2>
		_stack->sp-=_stack->elemSize;
   80da0:	7aa2      	ldrb	r2, [r4, #10]
   80da2:	6823      	ldr	r3, [r4, #0]
   80da4:	1a9b      	subs	r3, r3, r2
   80da6:	6023      	str	r3, [r4, #0]
		for(_k = 0; _k < _stack->elemSize; _k++)
   80da8:	2300      	movs	r3, #0
   80daa:	9302      	str	r3, [sp, #8]
   80dac:	2a00      	cmp	r2, #0
   80dae:	d0b8      	beq.n	80d22 <Stack+0x2e>
   80db0:	9a04      	ldr	r2, [sp, #16]
   80db2:	3a01      	subs	r2, #1
			((char*)_elem)[_k] = _stack->sp[_k];
   80db4:	6821      	ldr	r1, [r4, #0]
   80db6:	5cc9      	ldrb	r1, [r1, r3]
   80db8:	f802 1f01 	strb.w	r1, [r2, #1]!
		for(_k = 0; _k < _stack->elemSize; _k++)
   80dbc:	3301      	adds	r3, #1
   80dbe:	7aa1      	ldrb	r1, [r4, #10]
   80dc0:	4299      	cmp	r1, r3
   80dc2:	d8f7      	bhi.n	80db4 <Stack+0xc0>
   80dc4:	e7ad      	b.n	80d22 <Stack+0x2e>
		if(_stack->sp == _stack->org) Error(ERROR_STACK_UNDERFLOW, sc);
   80dc6:	2167      	movs	r1, #103	; 0x67
   80dc8:	2035      	movs	r0, #53	; 0x35
   80dca:	4b0a      	ldr	r3, [pc, #40]	; (80df4 <Stack+0x100>)
   80dcc:	4798      	blx	r3
   80dce:	e7e7      	b.n	80da0 <Stack+0xac>
		if(_stack->status != STACK_SIGNATURE) Error(ERROR_STACK_NOT_INIT, sc);
   80dd0:	9c03      	ldr	r4, [sp, #12]
   80dd2:	89a2      	ldrh	r2, [r4, #12]
   80dd4:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80dd8:	429a      	cmp	r2, r3
   80dda:	d003      	beq.n	80de4 <Stack+0xf0>
   80ddc:	2168      	movs	r1, #104	; 0x68
   80dde:	2033      	movs	r0, #51	; 0x33
   80de0:	4b04      	ldr	r3, [pc, #16]	; (80df4 <Stack+0x100>)
   80de2:	4798      	blx	r3
		_stack->sp = _stack->org;
   80de4:	6863      	ldr	r3, [r4, #4]
   80de6:	6023      	str	r3, [r4, #0]
		break;
   80de8:	e79b      	b.n	80d22 <Stack+0x2e>
		Error(ERROR_STACK_SWITCH_BAD_SC, sc);
   80dea:	201f      	movs	r0, #31
   80dec:	4b01      	ldr	r3, [pc, #4]	; (80df4 <Stack+0x100>)
   80dee:	4798      	blx	r3
   80df0:	e797      	b.n	80d22 <Stack+0x2e>
   80df2:	bf00      	nop
   80df4:	00082481 	.word	0x00082481

00080df8 <_menuPorteFermer1>:

	return 0;
 }

uint32_t _menuPorteFermer1(uint32_t sc, ...)
{
   80df8:	b40f      	push	{r0, r1, r2, r3}
   80dfa:	b508      	push	{r3, lr}
	switch(sc)
	{
		default:
		Putstr("_menuPorteFermer1: BAD SC");
   80dfc:	4904      	ldr	r1, [pc, #16]	; (80e10 <_menuPorteFermer1+0x18>)
   80dfe:	2067      	movs	r0, #103	; 0x67
   80e00:	4b04      	ldr	r3, [pc, #16]	; (80e14 <_menuPorteFermer1+0x1c>)
   80e02:	4798      	blx	r3
		break;
	}

	return 0;
}
   80e04:	2000      	movs	r0, #0
   80e06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80e0a:	b004      	add	sp, #16
   80e0c:	4770      	bx	lr
   80e0e:	bf00      	nop
   80e10:	00089910 	.word	0x00089910
   80e14:	00083f55 	.word	0x00083f55

00080e18 <_menuPorteFermer2>:

uint32_t _menuPorteFermer2(uint32_t sc, ...)
{
   80e18:	b40f      	push	{r0, r1, r2, r3}
   80e1a:	b508      	push	{r3, lr}
	switch(sc)
	{
		default:
		Putstr("_menuPorteFermer2: BAD SC");
   80e1c:	4904      	ldr	r1, [pc, #16]	; (80e30 <_menuPorteFermer2+0x18>)
   80e1e:	2067      	movs	r0, #103	; 0x67
   80e20:	4b04      	ldr	r3, [pc, #16]	; (80e34 <_menuPorteFermer2+0x1c>)
   80e22:	4798      	blx	r3
		break;
	}

	return 0;
}
   80e24:	2000      	movs	r0, #0
   80e26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80e2a:	b004      	add	sp, #16
   80e2c:	4770      	bx	lr
   80e2e:	bf00      	nop
   80e30:	0008992c 	.word	0x0008992c
   80e34:	00083f55 	.word	0x00083f55

00080e38 <_menuOptionSasFunc>:
 {
   80e38:	b40f      	push	{r0, r1, r2, r3}
   80e3a:	b510      	push	{r4, lr}
		Putstr("_menuOptionSasFunc: BAD SC");
   80e3c:	4909      	ldr	r1, [pc, #36]	; (80e64 <_menuOptionSasFunc+0x2c>)
   80e3e:	2067      	movs	r0, #103	; 0x67
   80e40:	4b09      	ldr	r3, [pc, #36]	; (80e68 <_menuOptionSasFunc+0x30>)
   80e42:	4798      	blx	r3
		LcdPutstr("                     ", 3, 0);
   80e44:	2300      	movs	r3, #0
   80e46:	2203      	movs	r2, #3
   80e48:	4908      	ldr	r1, [pc, #32]	; (80e6c <_menuOptionSasFunc+0x34>)
   80e4a:	2068      	movs	r0, #104	; 0x68
   80e4c:	4c08      	ldr	r4, [pc, #32]	; (80e70 <_menuOptionSasFunc+0x38>)
   80e4e:	47a0      	blx	r4
		LcdPutstr("FERMETURE SAS",3,0);
   80e50:	2300      	movs	r3, #0
   80e52:	2203      	movs	r2, #3
   80e54:	4907      	ldr	r1, [pc, #28]	; (80e74 <_menuOptionSasFunc+0x3c>)
   80e56:	2068      	movs	r0, #104	; 0x68
   80e58:	47a0      	blx	r4
 }
   80e5a:	2000      	movs	r0, #0
   80e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80e60:	b004      	add	sp, #16
   80e62:	4770      	bx	lr
   80e64:	000898cc 	.word	0x000898cc
   80e68:	00083f55 	.word	0x00083f55
   80e6c:	000898e8 	.word	0x000898e8
   80e70:	000829cd 	.word	0x000829cd
   80e74:	00089900 	.word	0x00089900

00080e78 <_menuEtatPorte1>:

uint32_t _menuEtatPorte1(uint32_t sc, ...)
{
   80e78:	b40f      	push	{r0, r1, r2, r3}
   80e7a:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuOptionSasFunc: BAD SC");
   80e7c:	4909      	ldr	r1, [pc, #36]	; (80ea4 <_menuEtatPorte1+0x2c>)
   80e7e:	2067      	movs	r0, #103	; 0x67
   80e80:	4b09      	ldr	r3, [pc, #36]	; (80ea8 <_menuEtatPorte1+0x30>)
   80e82:	4798      	blx	r3
		LcdPutstr("                     ", 3, 0);
   80e84:	2300      	movs	r3, #0
   80e86:	2203      	movs	r2, #3
   80e88:	4908      	ldr	r1, [pc, #32]	; (80eac <_menuEtatPorte1+0x34>)
   80e8a:	2068      	movs	r0, #104	; 0x68
   80e8c:	4c08      	ldr	r4, [pc, #32]	; (80eb0 <_menuEtatPorte1+0x38>)
   80e8e:	47a0      	blx	r4
		LcdPutstr("ETAT PORTE 1",3,0);
   80e90:	2300      	movs	r3, #0
   80e92:	2203      	movs	r2, #3
   80e94:	4907      	ldr	r1, [pc, #28]	; (80eb4 <_menuEtatPorte1+0x3c>)
   80e96:	2068      	movs	r0, #104	; 0x68
   80e98:	47a0      	blx	r4
		break;
	}

	return 0;
}
   80e9a:	2000      	movs	r0, #0
   80e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80ea0:	b004      	add	sp, #16
   80ea2:	4770      	bx	lr
   80ea4:	000898cc 	.word	0x000898cc
   80ea8:	00083f55 	.word	0x00083f55
   80eac:	000898e8 	.word	0x000898e8
   80eb0:	000829cd 	.word	0x000829cd
   80eb4:	000898b0 	.word	0x000898b0

00080eb8 <_menuEtatPorte2>:

uint32_t _menuEtatPorte2(uint32_t sc, ...)
{
   80eb8:	b40f      	push	{r0, r1, r2, r3}
   80eba:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuOptionSasFunc: BAD SC");
   80ebc:	4909      	ldr	r1, [pc, #36]	; (80ee4 <_menuEtatPorte2+0x2c>)
   80ebe:	2067      	movs	r0, #103	; 0x67
   80ec0:	4b09      	ldr	r3, [pc, #36]	; (80ee8 <_menuEtatPorte2+0x30>)
   80ec2:	4798      	blx	r3
		LcdPutstr("                     ", 3, 0);
   80ec4:	2300      	movs	r3, #0
   80ec6:	2203      	movs	r2, #3
   80ec8:	4908      	ldr	r1, [pc, #32]	; (80eec <_menuEtatPorte2+0x34>)
   80eca:	2068      	movs	r0, #104	; 0x68
   80ecc:	4c08      	ldr	r4, [pc, #32]	; (80ef0 <_menuEtatPorte2+0x38>)
   80ece:	47a0      	blx	r4
		LcdPutstr("ETAT PORTE 1",3,0);
   80ed0:	2300      	movs	r3, #0
   80ed2:	2203      	movs	r2, #3
   80ed4:	4907      	ldr	r1, [pc, #28]	; (80ef4 <_menuEtatPorte2+0x3c>)
   80ed6:	2068      	movs	r0, #104	; 0x68
   80ed8:	47a0      	blx	r4
		break;
	}

	return 0;
}
   80eda:	2000      	movs	r0, #0
   80edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80ee0:	b004      	add	sp, #16
   80ee2:	4770      	bx	lr
   80ee4:	000898cc 	.word	0x000898cc
   80ee8:	00083f55 	.word	0x00083f55
   80eec:	000898e8 	.word	0x000898e8
   80ef0:	000829cd 	.word	0x000829cd
   80ef4:	000898b0 	.word	0x000898b0

00080ef8 <_menuEtatPortes>:

uint32_t _menuEtatPortes(uint32_t sc, ...)
{
   80ef8:	b40f      	push	{r0, r1, r2, r3}
   80efa:	b510      	push	{r4, lr}
	switch(sc)
	{
		default:
		Putstr("_menuOptionSasFunc: BAD SC");
   80efc:	4909      	ldr	r1, [pc, #36]	; (80f24 <_menuEtatPortes+0x2c>)
   80efe:	2067      	movs	r0, #103	; 0x67
   80f00:	4b09      	ldr	r3, [pc, #36]	; (80f28 <_menuEtatPortes+0x30>)
   80f02:	4798      	blx	r3
		LcdPutstr("                     ", 3, 0);
   80f04:	2300      	movs	r3, #0
   80f06:	2203      	movs	r2, #3
   80f08:	4908      	ldr	r1, [pc, #32]	; (80f2c <_menuEtatPortes+0x34>)
   80f0a:	2068      	movs	r0, #104	; 0x68
   80f0c:	4c08      	ldr	r4, [pc, #32]	; (80f30 <_menuEtatPortes+0x38>)
   80f0e:	47a0      	blx	r4
		LcdPutstr("ETAT PORTES",3,0);
   80f10:	2300      	movs	r3, #0
   80f12:	2203      	movs	r2, #3
   80f14:	4907      	ldr	r1, [pc, #28]	; (80f34 <_menuEtatPortes+0x3c>)
   80f16:	2068      	movs	r0, #104	; 0x68
   80f18:	47a0      	blx	r4
		break;
	}

	return 0;
   80f1a:	2000      	movs	r0, #0
   80f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80f20:	b004      	add	sp, #16
   80f22:	4770      	bx	lr
   80f24:	000898cc 	.word	0x000898cc
   80f28:	00083f55 	.word	0x00083f55
   80f2c:	000898e8 	.word	0x000898e8
   80f30:	000829cd 	.word	0x000829cd
   80f34:	000898c0 	.word	0x000898c0

00080f38 <Menu>:
{
   80f38:	b40f      	push	{r0, r1, r2, r3}
   80f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
   80f3c:	b083      	sub	sp, #12
   80f3e:	9908      	ldr	r1, [sp, #32]
	switch(sc)
   80f40:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   80f44:	2b07      	cmp	r3, #7
   80f46:	f200 80c2 	bhi.w	810ce <Menu+0x196>
   80f4a:	e8df f013 	tbh	[pc, r3, lsl #1]
   80f4e:	0008      	.short	0x0008
   80f50:	0070005a 	.word	0x0070005a
   80f54:	00c00095 	.word	0x00c00095
   80f58:	00c000aa 	.word	0x00c000aa
   80f5c:	0054      	.short	0x0054
			Putstr("\r\nMENU_NEW\r\n");
   80f5e:	495e      	ldr	r1, [pc, #376]	; (810d8 <Menu+0x1a0>)
   80f60:	2067      	movs	r0, #103	; 0x67
   80f62:	4b5e      	ldr	r3, [pc, #376]	; (810dc <Menu+0x1a4>)
   80f64:	4798      	blx	r3
			pio_set_input(PIOA, PIN_BUTTON_SWITCH, PIO_PULLUP); //A0 (Bouton Gauche)
   80f66:	4c5e      	ldr	r4, [pc, #376]	; (810e0 <Menu+0x1a8>)
   80f68:	2201      	movs	r2, #1
   80f6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80f6e:	4620      	mov	r0, r4
   80f70:	4f5c      	ldr	r7, [pc, #368]	; (810e4 <Menu+0x1ac>)
   80f72:	47b8      	blx	r7
			pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_SWITCH, PIO_IT_FALL_EDGE, ButtonSwitch_ISR_Handler);
   80f74:	4b5c      	ldr	r3, [pc, #368]	; (810e8 <Menu+0x1b0>)
   80f76:	9300      	str	r3, [sp, #0]
   80f78:	2350      	movs	r3, #80	; 0x50
   80f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80f7e:	210a      	movs	r1, #10
   80f80:	4620      	mov	r0, r4
   80f82:	4e5a      	ldr	r6, [pc, #360]	; (810ec <Menu+0x1b4>)
   80f84:	47b0      	blx	r6
			pio_enable_interrupt(PIOA, PIN_BUTTON_SWITCH);
   80f86:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80f8a:	4620      	mov	r0, r4
   80f8c:	4d58      	ldr	r5, [pc, #352]	; (810f0 <Menu+0x1b8>)
   80f8e:	47a8      	blx	r5
			pio_set_input(PIOA, PIN_BUTTON_SELECT, PIO_PULLUP); //A1 (Bouton Milieu)
   80f90:	2201      	movs	r2, #1
   80f92:	f44f 7100 	mov.w	r1, #512	; 0x200
   80f96:	4620      	mov	r0, r4
   80f98:	47b8      	blx	r7
			pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_SELECT, PIO_IT_FALL_EDGE, ButtonSelect_ISR_Handler);
   80f9a:	4b56      	ldr	r3, [pc, #344]	; (810f4 <Menu+0x1bc>)
   80f9c:	9300      	str	r3, [sp, #0]
   80f9e:	2350      	movs	r3, #80	; 0x50
   80fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
   80fa4:	210a      	movs	r1, #10
   80fa6:	4620      	mov	r0, r4
   80fa8:	47b0      	blx	r6
			pio_enable_interrupt(PIOA, PIN_BUTTON_SELECT);
   80faa:	f44f 7100 	mov.w	r1, #512	; 0x200
   80fae:	4620      	mov	r0, r4
   80fb0:	47a8      	blx	r5
			pio_set_input(PIOA, PIN_BUTTON_CLEAR, PIO_PULLUP); //A1 (Bouton Droite)
   80fb2:	2201      	movs	r2, #1
   80fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
   80fb8:	4620      	mov	r0, r4
   80fba:	47b8      	blx	r7
			pio_handler_set(PIOA, ID_PIOA, PIN_BUTTON_CLEAR, PIO_IT_FALL_EDGE, ButtonClear_ISR_Handler);
   80fbc:	4b4e      	ldr	r3, [pc, #312]	; (810f8 <Menu+0x1c0>)
   80fbe:	9300      	str	r3, [sp, #0]
   80fc0:	2350      	movs	r3, #80	; 0x50
   80fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
   80fc6:	210a      	movs	r1, #10
   80fc8:	4620      	mov	r0, r4
   80fca:	47b0      	blx	r6
			pio_enable_interrupt(PIOA, PIN_BUTTON_CLEAR);
   80fcc:	f44f 7180 	mov.w	r1, #256	; 0x100
   80fd0:	4620      	mov	r0, r4
   80fd2:	47a8      	blx	r5
   80fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80fd8:	4b48      	ldr	r3, [pc, #288]	; (810fc <Menu+0x1c4>)
   80fda:	601a      	str	r2, [r3, #0]
			stackNew(&menuStack, menus, MENU_DEPTH_VALUE, MENU_ELEM_SIZE);
   80fdc:	2308      	movs	r3, #8
   80fde:	9300      	str	r3, [sp, #0]
   80fe0:	230a      	movs	r3, #10
   80fe2:	4a47      	ldr	r2, [pc, #284]	; (81100 <Menu+0x1c8>)
   80fe4:	4947      	ldr	r1, [pc, #284]	; (81104 <Menu+0x1cc>)
   80fe6:	2064      	movs	r0, #100	; 0x64
   80fe8:	4c47      	ldr	r4, [pc, #284]	; (81108 <Menu+0x1d0>)
   80fea:	47a0      	blx	r4
			menuElem.iIndexMenu = 0;
   80fec:	4b47      	ldr	r3, [pc, #284]	; (8110c <Menu+0x1d4>)
   80fee:	2200      	movs	r2, #0
   80ff0:	601a      	str	r2, [r3, #0]
			menuElem.pCurrentMenu = _mainMenu;
   80ff2:	4a47      	ldr	r2, [pc, #284]	; (81110 <Menu+0x1d8>)
   80ff4:	605a      	str	r2, [r3, #4]
}
   80ff6:	2000      	movs	r0, #0
   80ff8:	b003      	add	sp, #12
   80ffa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   80ffe:	b004      	add	sp, #16
   81000:	4770      	bx	lr
			WriteSingleCoil(0x18, 0x01, 0x01);
   81002:	2301      	movs	r3, #1
   81004:	461a      	mov	r2, r3
   81006:	2118      	movs	r1, #24
   81008:	2067      	movs	r0, #103	; 0x67
   8100a:	4c42      	ldr	r4, [pc, #264]	; (81114 <Menu+0x1dc>)
   8100c:	47a0      	blx	r4
			menuElem.iIndexMenu++;
   8100e:	4a3f      	ldr	r2, [pc, #252]	; (8110c <Menu+0x1d4>)
   81010:	6813      	ldr	r3, [r2, #0]
   81012:	3301      	adds	r3, #1
   81014:	6013      	str	r3, [r2, #0]
			if(menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuLabel == NULL) menuElem.iIndexMenu = 0;
   81016:	6852      	ldr	r2, [r2, #4]
   81018:	011b      	lsls	r3, r3, #4
   8101a:	58d3      	ldr	r3, [r2, r3]
   8101c:	b11b      	cbz	r3, 81026 <Menu+0xee>
			Menu(MENU_PROMPT);
   8101e:	2069      	movs	r0, #105	; 0x69
   81020:	f7ff ff8a 	bl	80f38 <Menu>
			break;
   81024:	e7e7      	b.n	80ff6 <Menu+0xbe>
			if(menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuLabel == NULL) menuElem.iIndexMenu = 0;
   81026:	2200      	movs	r2, #0
   81028:	4b38      	ldr	r3, [pc, #224]	; (8110c <Menu+0x1d4>)
   8102a:	601a      	str	r2, [r3, #0]
   8102c:	e7f7      	b.n	8101e <Menu+0xe6>
			WriteSingleCoil(0x20, 0x01, 0x01);
   8102e:	2301      	movs	r3, #1
   81030:	461a      	mov	r2, r3
   81032:	2120      	movs	r1, #32
   81034:	2067      	movs	r0, #103	; 0x67
   81036:	4c37      	ldr	r4, [pc, #220]	; (81114 <Menu+0x1dc>)
   81038:	47a0      	blx	r4
			if(menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuFunc)
   8103a:	4a34      	ldr	r2, [pc, #208]	; (8110c <Menu+0x1d4>)
   8103c:	6811      	ldr	r1, [r2, #0]
   8103e:	6853      	ldr	r3, [r2, #4]
   81040:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   81044:	68da      	ldr	r2, [r3, #12]
   81046:	b112      	cbz	r2, 8104e <Menu+0x116>
				menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuFunc(0);
   81048:	2000      	movs	r0, #0
   8104a:	4790      	blx	r2
   8104c:	e7d3      	b.n	80ff6 <Menu+0xbe>
			else if(menuElem.pCurrentMenu[menuElem.iIndexMenu].pSubMenu)
   8104e:	689b      	ldr	r3, [r3, #8]
   81050:	2b00      	cmp	r3, #0
   81052:	d0d0      	beq.n	80ff6 <Menu+0xbe>
				stackPush(&menuStack, &menuElem);
   81054:	4c2d      	ldr	r4, [pc, #180]	; (8110c <Menu+0x1d4>)
   81056:	4622      	mov	r2, r4
   81058:	492a      	ldr	r1, [pc, #168]	; (81104 <Menu+0x1cc>)
   8105a:	2066      	movs	r0, #102	; 0x66
   8105c:	4b2a      	ldr	r3, [pc, #168]	; (81108 <Menu+0x1d0>)
   8105e:	4798      	blx	r3
				menuElem.pCurrentMenu = menuElem.pCurrentMenu[menuElem.iIndexMenu].pSubMenu;
   81060:	6822      	ldr	r2, [r4, #0]
   81062:	6863      	ldr	r3, [r4, #4]
   81064:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   81068:	689b      	ldr	r3, [r3, #8]
   8106a:	6063      	str	r3, [r4, #4]
				menuElem.iIndexMenu = 0;
   8106c:	2300      	movs	r3, #0
   8106e:	6023      	str	r3, [r4, #0]
				Menu(MENU_PROMPT);
   81070:	2069      	movs	r0, #105	; 0x69
   81072:	f7ff ff61 	bl	80f38 <Menu>
   81076:	e7be      	b.n	80ff6 <Menu+0xbe>
			if(menuElem.pCurrentMenu[menuElem.iIndexMenu].pParentMenu)
   81078:	4a24      	ldr	r2, [pc, #144]	; (8110c <Menu+0x1d4>)
   8107a:	6811      	ldr	r1, [r2, #0]
   8107c:	6853      	ldr	r3, [r2, #4]
   8107e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   81082:	685b      	ldr	r3, [r3, #4]
   81084:	b133      	cbz	r3, 81094 <Menu+0x15c>
				stackPop(&menuStack, &menuElem);
   81086:	491f      	ldr	r1, [pc, #124]	; (81104 <Menu+0x1cc>)
   81088:	2067      	movs	r0, #103	; 0x67
   8108a:	4b1f      	ldr	r3, [pc, #124]	; (81108 <Menu+0x1d0>)
   8108c:	4798      	blx	r3
				Menu(MENU_PROMPT);
   8108e:	2069      	movs	r0, #105	; 0x69
   81090:	f7ff ff52 	bl	80f38 <Menu>
			WriteSingleCoil(0x16, 0x01, 0x01);
   81094:	2301      	movs	r3, #1
   81096:	461a      	mov	r2, r3
   81098:	2116      	movs	r1, #22
   8109a:	2067      	movs	r0, #103	; 0x67
   8109c:	4c1d      	ldr	r4, [pc, #116]	; (81114 <Menu+0x1dc>)
   8109e:	47a0      	blx	r4
			break;
   810a0:	e7a9      	b.n	80ff6 <Menu+0xbe>
			LcdPutstr("                    ", 2, 0);
   810a2:	2300      	movs	r3, #0
   810a4:	2202      	movs	r2, #2
   810a6:	491c      	ldr	r1, [pc, #112]	; (81118 <Menu+0x1e0>)
   810a8:	2068      	movs	r0, #104	; 0x68
   810aa:	4c1c      	ldr	r4, [pc, #112]	; (8111c <Menu+0x1e4>)
   810ac:	47a0      	blx	r4
			LcdPutstr((menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuLabel),2,LcdFindHalf(strlen(menuElem.pCurrentMenu[menuElem.iIndexMenu].pMenuLabel)));
   810ae:	4a17      	ldr	r2, [pc, #92]	; (8110c <Menu+0x1d4>)
   810b0:	6813      	ldr	r3, [r2, #0]
   810b2:	6852      	ldr	r2, [r2, #4]
   810b4:	011b      	lsls	r3, r3, #4
   810b6:	58d5      	ldr	r5, [r2, r3]
   810b8:	4628      	mov	r0, r5
   810ba:	4b19      	ldr	r3, [pc, #100]	; (81120 <Menu+0x1e8>)
   810bc:	4798      	blx	r3
   810be:	4b19      	ldr	r3, [pc, #100]	; (81124 <Menu+0x1ec>)
   810c0:	4798      	blx	r3
   810c2:	4603      	mov	r3, r0
   810c4:	2202      	movs	r2, #2
   810c6:	4629      	mov	r1, r5
   810c8:	2068      	movs	r0, #104	; 0x68
   810ca:	47a0      	blx	r4
			break;
   810cc:	e793      	b.n	80ff6 <Menu+0xbe>
			Error(ERROR_MENU_SWITCH_BAD_SC, sc);
   810ce:	2011      	movs	r0, #17
   810d0:	4b15      	ldr	r3, [pc, #84]	; (81128 <Menu+0x1f0>)
   810d2:	4798      	blx	r3
   810d4:	e78f      	b.n	80ff6 <Menu+0xbe>
   810d6:	bf00      	nop
   810d8:	000897f8 	.word	0x000897f8
   810dc:	00083f55 	.word	0x00083f55
   810e0:	400e0c00 	.word	0x400e0c00
   810e4:	0008132f 	.word	0x0008132f
   810e8:	0008112d 	.word	0x0008112d
   810ec:	000811dd 	.word	0x000811dd
   810f0:	000813b5 	.word	0x000813b5
   810f4:	0008114d 	.word	0x0008114d
   810f8:	0008116d 	.word	0x0008116d
   810fc:	e000e100 	.word	0xe000e100
   81100:	200014ec 	.word	0x200014ec
   81104:	2000153c 	.word	0x2000153c
   81108:	00080cf5 	.word	0x00080cf5
   8110c:	2000154c 	.word	0x2000154c
   81110:	00089860 	.word	0x00089860
   81114:	00080715 	.word	0x00080715
   81118:	00089808 	.word	0x00089808
   8111c:	000829cd 	.word	0x000829cd
   81120:	00084b95 	.word	0x00084b95
   81124:	00082dfd 	.word	0x00082dfd
   81128:	00082481 	.word	0x00082481

0008112c <ButtonSwitch_ISR_Handler>:
{
   8112c:	b510      	push	{r4, lr}
   8112e:	b082      	sub	sp, #8
	PushTask(Menu, MENU_SWITCH_BUTTON,0,0);
   81130:	2300      	movs	r3, #0
   81132:	9300      	str	r3, [sp, #0]
   81134:	2265      	movs	r2, #101	; 0x65
   81136:	4903      	ldr	r1, [pc, #12]	; (81144 <ButtonSwitch_ISR_Handler+0x18>)
   81138:	2066      	movs	r0, #102	; 0x66
   8113a:	4c03      	ldr	r4, [pc, #12]	; (81148 <ButtonSwitch_ISR_Handler+0x1c>)
   8113c:	47a0      	blx	r4
}
   8113e:	b002      	add	sp, #8
   81140:	bd10      	pop	{r4, pc}
   81142:	bf00      	nop
   81144:	00080f39 	.word	0x00080f39
   81148:	000841e5 	.word	0x000841e5

0008114c <ButtonSelect_ISR_Handler>:
{
   8114c:	b510      	push	{r4, lr}
   8114e:	b082      	sub	sp, #8
	PushTask(Menu, MENU_SELECT_BUTTON,0,0);
   81150:	2300      	movs	r3, #0
   81152:	9300      	str	r3, [sp, #0]
   81154:	2266      	movs	r2, #102	; 0x66
   81156:	4903      	ldr	r1, [pc, #12]	; (81164 <ButtonSelect_ISR_Handler+0x18>)
   81158:	4610      	mov	r0, r2
   8115a:	4c03      	ldr	r4, [pc, #12]	; (81168 <ButtonSelect_ISR_Handler+0x1c>)
   8115c:	47a0      	blx	r4
}
   8115e:	b002      	add	sp, #8
   81160:	bd10      	pop	{r4, pc}
   81162:	bf00      	nop
   81164:	00080f39 	.word	0x00080f39
   81168:	000841e5 	.word	0x000841e5

0008116c <ButtonClear_ISR_Handler>:
{
   8116c:	b510      	push	{r4, lr}
   8116e:	b082      	sub	sp, #8
	PushTask(Menu, MENU_CLEAR_BUTTON,0,0);
   81170:	2300      	movs	r3, #0
   81172:	9300      	str	r3, [sp, #0]
   81174:	2267      	movs	r2, #103	; 0x67
   81176:	4903      	ldr	r1, [pc, #12]	; (81184 <ButtonClear_ISR_Handler+0x18>)
   81178:	2066      	movs	r0, #102	; 0x66
   8117a:	4c03      	ldr	r4, [pc, #12]	; (81188 <ButtonClear_ISR_Handler+0x1c>)
   8117c:	47a0      	blx	r4
}
   8117e:	b002      	add	sp, #8
   81180:	bd10      	pop	{r4, pc}
   81182:	bf00      	nop
   81184:	00080f39 	.word	0x00080f39
   81188:	000841e5 	.word	0x000841e5

0008118c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81190:	4604      	mov	r4, r0
   81192:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81194:	4b0e      	ldr	r3, [pc, #56]	; (811d0 <pio_handler_process+0x44>)
   81196:	4798      	blx	r3
   81198:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8119a:	4620      	mov	r0, r4
   8119c:	4b0d      	ldr	r3, [pc, #52]	; (811d4 <pio_handler_process+0x48>)
   8119e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   811a0:	4005      	ands	r5, r0
   811a2:	d013      	beq.n	811cc <pio_handler_process+0x40>
   811a4:	4c0c      	ldr	r4, [pc, #48]	; (811d8 <pio_handler_process+0x4c>)
   811a6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   811aa:	e003      	b.n	811b4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   811ac:	42b4      	cmp	r4, r6
   811ae:	d00d      	beq.n	811cc <pio_handler_process+0x40>
   811b0:	3410      	adds	r4, #16
		while (status != 0) {
   811b2:	b15d      	cbz	r5, 811cc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   811b4:	6820      	ldr	r0, [r4, #0]
   811b6:	4540      	cmp	r0, r8
   811b8:	d1f8      	bne.n	811ac <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   811ba:	6861      	ldr	r1, [r4, #4]
   811bc:	4229      	tst	r1, r5
   811be:	d0f5      	beq.n	811ac <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   811c0:	68e3      	ldr	r3, [r4, #12]
   811c2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   811c4:	6863      	ldr	r3, [r4, #4]
   811c6:	ea25 0503 	bic.w	r5, r5, r3
   811ca:	e7ef      	b.n	811ac <pio_handler_process+0x20>
   811cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   811d0:	000813b9 	.word	0x000813b9
   811d4:	000813bd 	.word	0x000813bd
   811d8:	200010fc 	.word	0x200010fc

000811dc <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   811dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   811de:	4c18      	ldr	r4, [pc, #96]	; (81240 <pio_handler_set+0x64>)
   811e0:	6826      	ldr	r6, [r4, #0]
   811e2:	2e06      	cmp	r6, #6
   811e4:	d829      	bhi.n	8123a <pio_handler_set+0x5e>
   811e6:	f04f 0c00 	mov.w	ip, #0
   811ea:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   811ec:	4f15      	ldr	r7, [pc, #84]	; (81244 <pio_handler_set+0x68>)
   811ee:	e004      	b.n	811fa <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   811f0:	3401      	adds	r4, #1
   811f2:	b2e4      	uxtb	r4, r4
   811f4:	46a4      	mov	ip, r4
   811f6:	42a6      	cmp	r6, r4
   811f8:	d309      	bcc.n	8120e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   811fa:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   811fc:	0125      	lsls	r5, r4, #4
   811fe:	597d      	ldr	r5, [r7, r5]
   81200:	428d      	cmp	r5, r1
   81202:	d1f5      	bne.n	811f0 <pio_handler_set+0x14>
   81204:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   81208:	686d      	ldr	r5, [r5, #4]
   8120a:	4295      	cmp	r5, r2
   8120c:	d1f0      	bne.n	811f0 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   8120e:	4d0d      	ldr	r5, [pc, #52]	; (81244 <pio_handler_set+0x68>)
   81210:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   81214:	eb05 040e 	add.w	r4, r5, lr
   81218:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   8121c:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   8121e:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   81220:	9906      	ldr	r1, [sp, #24]
   81222:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   81224:	3601      	adds	r6, #1
   81226:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   81228:	bf04      	itt	eq
   8122a:	4905      	ldreq	r1, [pc, #20]	; (81240 <pio_handler_set+0x64>)
   8122c:	600e      	streq	r6, [r1, #0]
   8122e:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   81230:	461a      	mov	r2, r3
   81232:	4b05      	ldr	r3, [pc, #20]	; (81248 <pio_handler_set+0x6c>)
   81234:	4798      	blx	r3

	return 0;
   81236:	2000      	movs	r0, #0
   81238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   8123a:	2001      	movs	r0, #1
}
   8123c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8123e:	bf00      	nop
   81240:	2000116c 	.word	0x2000116c
   81244:	200010fc 	.word	0x200010fc
   81248:	00081387 	.word	0x00081387

0008124c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8124c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8124e:	210a      	movs	r1, #10
   81250:	4801      	ldr	r0, [pc, #4]	; (81258 <PIOA_Handler+0xc>)
   81252:	4b02      	ldr	r3, [pc, #8]	; (8125c <PIOA_Handler+0x10>)
   81254:	4798      	blx	r3
   81256:	bd08      	pop	{r3, pc}
   81258:	400e0c00 	.word	0x400e0c00
   8125c:	0008118d 	.word	0x0008118d

00081260 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81260:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81262:	210b      	movs	r1, #11
   81264:	4801      	ldr	r0, [pc, #4]	; (8126c <PIOB_Handler+0xc>)
   81266:	4b02      	ldr	r3, [pc, #8]	; (81270 <PIOB_Handler+0x10>)
   81268:	4798      	blx	r3
   8126a:	bd08      	pop	{r3, pc}
   8126c:	400e0e00 	.word	0x400e0e00
   81270:	0008118d 	.word	0x0008118d

00081274 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   81274:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81276:	4812      	ldr	r0, [pc, #72]	; (812c0 <sysclk_init+0x4c>)
   81278:	4b12      	ldr	r3, [pc, #72]	; (812c4 <sysclk_init+0x50>)
   8127a:	4798      	blx	r3
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   8127c:	203e      	movs	r0, #62	; 0x3e
   8127e:	4b12      	ldr	r3, [pc, #72]	; (812c8 <sysclk_init+0x54>)
   81280:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   81282:	4c12      	ldr	r4, [pc, #72]	; (812cc <sysclk_init+0x58>)
   81284:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81286:	2800      	cmp	r0, #0
   81288:	d0fc      	beq.n	81284 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   8128a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   8128e:	4b10      	ldr	r3, [pc, #64]	; (812d0 <sysclk_init+0x5c>)
   81290:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   81292:	4c10      	ldr	r4, [pc, #64]	; (812d4 <sysclk_init+0x60>)
   81294:	47a0      	blx	r4
   81296:	2800      	cmp	r0, #0
   81298:	d0fc      	beq.n	81294 <sysclk_init+0x20>
		uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8129a:	4b0f      	ldr	r3, [pc, #60]	; (812d8 <sysclk_init+0x64>)
   8129c:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8129e:	4a0f      	ldr	r2, [pc, #60]	; (812dc <sysclk_init+0x68>)
   812a0:	4b0f      	ldr	r3, [pc, #60]	; (812e0 <sysclk_init+0x6c>)
   812a2:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   812a4:	4c0f      	ldr	r4, [pc, #60]	; (812e4 <sysclk_init+0x70>)
   812a6:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   812a8:	2800      	cmp	r0, #0
   812aa:	d0fc      	beq.n	812a6 <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   812ac:	2010      	movs	r0, #16
   812ae:	4b0e      	ldr	r3, [pc, #56]	; (812e8 <sysclk_init+0x74>)
   812b0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   812b2:	4b0e      	ldr	r3, [pc, #56]	; (812ec <sysclk_init+0x78>)
   812b4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   812b6:	4802      	ldr	r0, [pc, #8]	; (812c0 <sysclk_init+0x4c>)
   812b8:	4b02      	ldr	r3, [pc, #8]	; (812c4 <sysclk_init+0x50>)
   812ba:	4798      	blx	r3
   812bc:	bd10      	pop	{r4, pc}
   812be:	bf00      	nop
   812c0:	05b8d800 	.word	0x05b8d800
   812c4:	200000b5 	.word	0x200000b5
   812c8:	000815a9 	.word	0x000815a9
   812cc:	000815d1 	.word	0x000815d1
   812d0:	000815f1 	.word	0x000815f1
   812d4:	000815e1 	.word	0x000815e1
   812d8:	00081611 	.word	0x00081611
   812dc:	200f3f01 	.word	0x200f3f01
   812e0:	400e0400 	.word	0x400e0400
   812e4:	00081621 	.word	0x00081621
   812e8:	00081501 	.word	0x00081501
   812ec:	00081bd5 	.word	0x00081bd5

000812f0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   812f0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   812f2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   812f6:	d016      	beq.n	81326 <pio_set_peripheral+0x36>
   812f8:	d80b      	bhi.n	81312 <pio_set_peripheral+0x22>
   812fa:	b149      	cbz	r1, 81310 <pio_set_peripheral+0x20>
   812fc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81300:	d105      	bne.n	8130e <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81302:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81304:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81306:	400b      	ands	r3, r1
   81308:	ea23 0302 	bic.w	r3, r3, r2
   8130c:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8130e:	6042      	str	r2, [r0, #4]
   81310:	4770      	bx	lr
	switch (ul_type) {
   81312:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81316:	d0fb      	beq.n	81310 <pio_set_peripheral+0x20>
   81318:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8131c:	d0f8      	beq.n	81310 <pio_set_peripheral+0x20>
   8131e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81322:	d1f4      	bne.n	8130e <pio_set_peripheral+0x1e>
   81324:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81326:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81328:	4313      	orrs	r3, r2
   8132a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8132c:	e7ef      	b.n	8130e <pio_set_peripheral+0x1e>

0008132e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8132e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81330:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81334:	bf14      	ite	ne
   81336:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81338:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8133a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8133e:	bf14      	ite	ne
   81340:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   81342:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81344:	f012 0f02 	tst.w	r2, #2
   81348:	d107      	bne.n	8135a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8134a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8134e:	bf18      	it	ne
   81350:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81354:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81356:	6001      	str	r1, [r0, #0]
   81358:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8135a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8135e:	e7f9      	b.n	81354 <pio_set_input+0x26>

00081360 <pio_set_output>:
{
   81360:	b410      	push	{r4}
   81362:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81364:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81366:	b944      	cbnz	r4, 8137a <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   81368:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8136a:	b143      	cbz	r3, 8137e <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   8136c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8136e:	b942      	cbnz	r2, 81382 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   81370:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   81372:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81374:	6001      	str	r1, [r0, #0]
}
   81376:	bc10      	pop	{r4}
   81378:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8137a:	6641      	str	r1, [r0, #100]	; 0x64
   8137c:	e7f5      	b.n	8136a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8137e:	6541      	str	r1, [r0, #84]	; 0x54
   81380:	e7f5      	b.n	8136e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   81382:	6301      	str	r1, [r0, #48]	; 0x30
   81384:	e7f5      	b.n	81372 <pio_set_output+0x12>

00081386 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   81386:	f012 0f10 	tst.w	r2, #16
   8138a:	d010      	beq.n	813ae <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   8138c:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   81390:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   81394:	bf14      	ite	ne
   81396:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   8139a:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   8139e:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   813a2:	bf14      	ite	ne
   813a4:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   813a8:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   813ac:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   813ae:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   813b2:	4770      	bx	lr

000813b4 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   813b4:	6401      	str	r1, [r0, #64]	; 0x40
   813b6:	4770      	bx	lr

000813b8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   813b8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   813ba:	4770      	bx	lr

000813bc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   813bc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   813be:	4770      	bx	lr

000813c0 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   813c0:	0943      	lsrs	r3, r0, #5
   813c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   813c6:	f203 7306 	addw	r3, r3, #1798	; 0x706
   813ca:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   813cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   813ce:	f000 001f 	and.w	r0, r0, #31
   813d2:	fa23 f000 	lsr.w	r0, r3, r0
}
   813d6:	f000 0001 	and.w	r0, r0, #1
   813da:	4770      	bx	lr

000813dc <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   813dc:	0943      	lsrs	r3, r0, #5
   813de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   813e2:	f203 7306 	addw	r3, r3, #1798	; 0x706
   813e6:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   813e8:	f000 001f 	and.w	r0, r0, #31
   813ec:	2201      	movs	r2, #1
   813ee:	fa02 f000 	lsl.w	r0, r2, r0
   813f2:	6318      	str	r0, [r3, #48]	; 0x30
   813f4:	4770      	bx	lr

000813f6 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   813f6:	0943      	lsrs	r3, r0, #5
   813f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   813fc:	f203 7306 	addw	r3, r3, #1798	; 0x706
   81400:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81402:	f000 001f 	and.w	r0, r0, #31
   81406:	2201      	movs	r2, #1
   81408:	fa02 f000 	lsl.w	r0, r2, r0
   8140c:	6358      	str	r0, [r3, #52]	; 0x34
   8140e:	4770      	bx	lr

00081410 <pio_toggle_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81410:	0943      	lsrs	r3, r0, #5
   81412:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81416:	f203 7306 	addw	r3, r3, #1798	; 0x706
   8141a:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   8141c:	6b99      	ldr	r1, [r3, #56]	; 0x38
   8141e:	f000 021f 	and.w	r2, r0, #31
   81422:	2001      	movs	r0, #1
   81424:	4090      	lsls	r0, r2
   81426:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81428:	bf14      	ite	ne
   8142a:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8142c:	6318      	streq	r0, [r3, #48]	; 0x30
   8142e:	4770      	bx	lr

00081430 <pio_configure_pin>:
{
   81430:	b570      	push	{r4, r5, r6, lr}
   81432:	b082      	sub	sp, #8
   81434:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81436:	0943      	lsrs	r3, r0, #5
   81438:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8143c:	f203 7306 	addw	r3, r3, #1798	; 0x706
   81440:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81442:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81446:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8144a:	d031      	beq.n	814b0 <pio_configure_pin+0x80>
   8144c:	d816      	bhi.n	8147c <pio_configure_pin+0x4c>
   8144e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81452:	d01b      	beq.n	8148c <pio_configure_pin+0x5c>
   81454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81458:	d116      	bne.n	81488 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8145a:	f000 001f 	and.w	r0, r0, #31
   8145e:	2601      	movs	r6, #1
   81460:	4086      	lsls	r6, r0
   81462:	4632      	mov	r2, r6
   81464:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81468:	4620      	mov	r0, r4
   8146a:	4b22      	ldr	r3, [pc, #136]	; (814f4 <pio_configure_pin+0xc4>)
   8146c:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8146e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81472:	bf14      	ite	ne
   81474:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81476:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81478:	2001      	movs	r0, #1
   8147a:	e017      	b.n	814ac <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   8147c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81480:	d021      	beq.n	814c6 <pio_configure_pin+0x96>
   81482:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81486:	d01e      	beq.n	814c6 <pio_configure_pin+0x96>
		return 0;
   81488:	2000      	movs	r0, #0
   8148a:	e00f      	b.n	814ac <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8148c:	f000 001f 	and.w	r0, r0, #31
   81490:	2601      	movs	r6, #1
   81492:	4086      	lsls	r6, r0
   81494:	4632      	mov	r2, r6
   81496:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8149a:	4620      	mov	r0, r4
   8149c:	4b15      	ldr	r3, [pc, #84]	; (814f4 <pio_configure_pin+0xc4>)
   8149e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   814a0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   814a4:	bf14      	ite	ne
   814a6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   814a8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   814aa:	2001      	movs	r0, #1
}
   814ac:	b002      	add	sp, #8
   814ae:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   814b0:	f000 011f 	and.w	r1, r0, #31
   814b4:	2601      	movs	r6, #1
   814b6:	462a      	mov	r2, r5
   814b8:	fa06 f101 	lsl.w	r1, r6, r1
   814bc:	4620      	mov	r0, r4
   814be:	4b0e      	ldr	r3, [pc, #56]	; (814f8 <pio_configure_pin+0xc8>)
   814c0:	4798      	blx	r3
	return 1;
   814c2:	4630      	mov	r0, r6
		break;
   814c4:	e7f2      	b.n	814ac <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   814c6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   814ca:	f000 011f 	and.w	r1, r0, #31
   814ce:	2601      	movs	r6, #1
   814d0:	ea05 0306 	and.w	r3, r5, r6
   814d4:	9300      	str	r3, [sp, #0]
   814d6:	f3c5 0380 	ubfx	r3, r5, #2, #1
   814da:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   814de:	bf14      	ite	ne
   814e0:	2200      	movne	r2, #0
   814e2:	2201      	moveq	r2, #1
   814e4:	fa06 f101 	lsl.w	r1, r6, r1
   814e8:	4620      	mov	r0, r4
   814ea:	4c04      	ldr	r4, [pc, #16]	; (814fc <pio_configure_pin+0xcc>)
   814ec:	47a0      	blx	r4
	return 1;
   814ee:	4630      	mov	r0, r6
		break;
   814f0:	e7dc      	b.n	814ac <pio_configure_pin+0x7c>
   814f2:	bf00      	nop
   814f4:	000812f1 	.word	0x000812f1
   814f8:	0008132f 	.word	0x0008132f
   814fc:	00081361 	.word	0x00081361

00081500 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81500:	4a17      	ldr	r2, [pc, #92]	; (81560 <pmc_switch_mck_to_pllack+0x60>)
   81502:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81508:	4318      	orrs	r0, r3
   8150a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8150c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8150e:	f013 0f08 	tst.w	r3, #8
   81512:	d10a      	bne.n	8152a <pmc_switch_mck_to_pllack+0x2a>
   81514:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81518:	4911      	ldr	r1, [pc, #68]	; (81560 <pmc_switch_mck_to_pllack+0x60>)
   8151a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8151c:	f012 0f08 	tst.w	r2, #8
   81520:	d103      	bne.n	8152a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81522:	3b01      	subs	r3, #1
   81524:	d1f9      	bne.n	8151a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   81526:	2001      	movs	r0, #1
   81528:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8152a:	4a0d      	ldr	r2, [pc, #52]	; (81560 <pmc_switch_mck_to_pllack+0x60>)
   8152c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8152e:	f023 0303 	bic.w	r3, r3, #3
   81532:	f043 0302 	orr.w	r3, r3, #2
   81536:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81538:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8153a:	f013 0f08 	tst.w	r3, #8
   8153e:	d10a      	bne.n	81556 <pmc_switch_mck_to_pllack+0x56>
   81540:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81544:	4906      	ldr	r1, [pc, #24]	; (81560 <pmc_switch_mck_to_pllack+0x60>)
   81546:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81548:	f012 0f08 	tst.w	r2, #8
   8154c:	d105      	bne.n	8155a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8154e:	3b01      	subs	r3, #1
   81550:	d1f9      	bne.n	81546 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   81552:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81554:	4770      	bx	lr
	return 0;
   81556:	2000      	movs	r0, #0
   81558:	4770      	bx	lr
   8155a:	2000      	movs	r0, #0
   8155c:	4770      	bx	lr
   8155e:	bf00      	nop
   81560:	400e0400 	.word	0x400e0400

00081564 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   81564:	2801      	cmp	r0, #1
   81566:	d003      	beq.n	81570 <pmc_switch_sclk_to_32kxtal+0xc>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   81568:	4a05      	ldr	r2, [pc, #20]	; (81580 <pmc_switch_sclk_to_32kxtal+0x1c>)
   8156a:	4b06      	ldr	r3, [pc, #24]	; (81584 <pmc_switch_sclk_to_32kxtal+0x20>)
   8156c:	601a      	str	r2, [r3, #0]
   8156e:	4770      	bx	lr
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   81570:	4a04      	ldr	r2, [pc, #16]	; (81584 <pmc_switch_sclk_to_32kxtal+0x20>)
   81572:	6893      	ldr	r3, [r2, #8]
   81574:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8157c:	6093      	str	r3, [r2, #8]
   8157e:	e7f3      	b.n	81568 <pmc_switch_sclk_to_32kxtal+0x4>
   81580:	a5000008 	.word	0xa5000008
   81584:	400e1210 	.word	0x400e1210

00081588 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   81588:	4b05      	ldr	r3, [pc, #20]	; (815a0 <pmc_osc_is_ready_32kxtal+0x18>)
   8158a:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   8158c:	f013 0f80 	tst.w	r3, #128	; 0x80
   81590:	bf1d      	ittte	ne
   81592:	4b04      	ldrne	r3, [pc, #16]	; (815a4 <pmc_osc_is_ready_32kxtal+0x1c>)
   81594:	6e98      	ldrne	r0, [r3, #104]	; 0x68
   81596:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
   8159a:	2000      	moveq	r0, #0
}
   8159c:	4770      	bx	lr
   8159e:	bf00      	nop
   815a0:	400e1210 	.word	0x400e1210
   815a4:	400e0400 	.word	0x400e0400

000815a8 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   815a8:	4a08      	ldr	r2, [pc, #32]	; (815cc <pmc_osc_enable_main_xtal+0x24>)
   815aa:	6a13      	ldr	r3, [r2, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   815ac:	f023 0303 	bic.w	r3, r3, #3
   815b0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   815b4:	f043 0301 	orr.w	r3, r3, #1
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   815b8:	0200      	lsls	r0, r0, #8
   815ba:	b280      	uxth	r0, r0
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   815bc:	4303      	orrs	r3, r0
	PMC->CKGR_MOR = mor;
   815be:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   815c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   815c2:	f013 0f01 	tst.w	r3, #1
   815c6:	d0fb      	beq.n	815c0 <pmc_osc_enable_main_xtal+0x18>
}
   815c8:	4770      	bx	lr
   815ca:	bf00      	nop
   815cc:	400e0400 	.word	0x400e0400

000815d0 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   815d0:	4b02      	ldr	r3, [pc, #8]	; (815dc <pmc_osc_is_ready_main_xtal+0xc>)
   815d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   815d4:	f000 0001 	and.w	r0, r0, #1
   815d8:	4770      	bx	lr
   815da:	bf00      	nop
   815dc:	400e0400 	.word	0x400e0400

000815e0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   815e0:	4b02      	ldr	r3, [pc, #8]	; (815ec <pmc_osc_is_ready_mainck+0xc>)
   815e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   815e4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   815e8:	4770      	bx	lr
   815ea:	bf00      	nop
   815ec:	400e0400 	.word	0x400e0400

000815f0 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   815f0:	4b06      	ldr	r3, [pc, #24]	; (8160c <pmc_mainck_osc_select+0x1c>)
   815f2:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   815f4:	b930      	cbnz	r0, 81604 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   815f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   815fa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   815fe:	4a03      	ldr	r2, [pc, #12]	; (8160c <pmc_mainck_osc_select+0x1c>)
   81600:	6213      	str	r3, [r2, #32]
   81602:	4770      	bx	lr
		mor |=  CKGR_MOR_MOSCSEL;
   81604:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   81608:	e7f7      	b.n	815fa <pmc_mainck_osc_select+0xa>
   8160a:	bf00      	nop
   8160c:	400e0400 	.word	0x400e0400

00081610 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81610:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81614:	4b01      	ldr	r3, [pc, #4]	; (8161c <pmc_disable_pllack+0xc>)
   81616:	629a      	str	r2, [r3, #40]	; 0x28
   81618:	4770      	bx	lr
   8161a:	bf00      	nop
   8161c:	400e0400 	.word	0x400e0400

00081620 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81620:	4b02      	ldr	r3, [pc, #8]	; (8162c <pmc_is_locked_pllack+0xc>)
   81622:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81624:	f000 0002 	and.w	r0, r0, #2
   81628:	4770      	bx	lr
   8162a:	bf00      	nop
   8162c:	400e0400 	.word	0x400e0400

00081630 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81630:	281d      	cmp	r0, #29
   81632:	d80e      	bhi.n	81652 <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   81634:	281f      	cmp	r0, #31
   81636:	d80e      	bhi.n	81656 <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81638:	4b09      	ldr	r3, [pc, #36]	; (81660 <pmc_enable_periph_clk+0x30>)
   8163a:	699a      	ldr	r2, [r3, #24]
   8163c:	2301      	movs	r3, #1
   8163e:	4083      	lsls	r3, r0
   81640:	4393      	bics	r3, r2
   81642:	d00a      	beq.n	8165a <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   81644:	2301      	movs	r3, #1
   81646:	fa03 f000 	lsl.w	r0, r3, r0
   8164a:	4b05      	ldr	r3, [pc, #20]	; (81660 <pmc_enable_periph_clk+0x30>)
   8164c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8164e:	2000      	movs	r0, #0
   81650:	4770      	bx	lr
		return 1;
   81652:	2001      	movs	r0, #1
   81654:	4770      	bx	lr
	return 0;
   81656:	2000      	movs	r0, #0
   81658:	4770      	bx	lr
   8165a:	2000      	movs	r0, #0
}
   8165c:	4770      	bx	lr
   8165e:	bf00      	nop
   81660:	400e0400 	.word	0x400e0400

00081664 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
   81664:	4770      	bx	lr
	...

00081668 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   81668:	4b0b      	ldr	r3, [pc, #44]	; (81698 <cpu_irq_enter_critical+0x30>)
   8166a:	681b      	ldr	r3, [r3, #0]
   8166c:	b92b      	cbnz	r3, 8167a <cpu_irq_enter_critical+0x12>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8166e:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   81672:	b13b      	cbz	r3, 81684 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   81674:	2200      	movs	r2, #0
   81676:	4b09      	ldr	r3, [pc, #36]	; (8169c <cpu_irq_enter_critical+0x34>)
   81678:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   8167a:	4a07      	ldr	r2, [pc, #28]	; (81698 <cpu_irq_enter_critical+0x30>)
   8167c:	6813      	ldr	r3, [r2, #0]
   8167e:	3301      	adds	r3, #1
   81680:	6013      	str	r3, [r2, #0]
   81682:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
   81684:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   81686:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   8168a:	2200      	movs	r2, #0
   8168c:	4b04      	ldr	r3, [pc, #16]	; (816a0 <cpu_irq_enter_critical+0x38>)
   8168e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   81690:	2201      	movs	r2, #1
   81692:	4b02      	ldr	r3, [pc, #8]	; (8169c <cpu_irq_enter_critical+0x34>)
   81694:	701a      	strb	r2, [r3, #0]
   81696:	e7f0      	b.n	8167a <cpu_irq_enter_critical+0x12>
   81698:	20001170 	.word	0x20001170
   8169c:	20001174 	.word	0x20001174
   816a0:	20000124 	.word	0x20000124

000816a4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   816a4:	4b07      	ldr	r3, [pc, #28]	; (816c4 <cpu_irq_leave_critical+0x20>)
   816a6:	681a      	ldr	r2, [r3, #0]
   816a8:	3a01      	subs	r2, #1
   816aa:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   816ac:	681b      	ldr	r3, [r3, #0]
   816ae:	b943      	cbnz	r3, 816c2 <cpu_irq_leave_critical+0x1e>
   816b0:	4b05      	ldr	r3, [pc, #20]	; (816c8 <cpu_irq_leave_critical+0x24>)
   816b2:	781b      	ldrb	r3, [r3, #0]
   816b4:	b12b      	cbz	r3, 816c2 <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   816b6:	2201      	movs	r2, #1
   816b8:	4b04      	ldr	r3, [pc, #16]	; (816cc <cpu_irq_leave_critical+0x28>)
   816ba:	701a      	strb	r2, [r3, #0]
   816bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   816c0:	b662      	cpsie	i
   816c2:	4770      	bx	lr
   816c4:	20001170 	.word	0x20001170
   816c8:	20001174 	.word	0x20001174
   816cc:	20000124 	.word	0x20000124

000816d0 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   816d0:	b4f0      	push	{r4, r5, r6, r7}
   816d2:	b08c      	sub	sp, #48	; 0x30
   816d4:	4607      	mov	r7, r0
   816d6:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   816d8:	ac01      	add	r4, sp, #4
   816da:	4d11      	ldr	r5, [pc, #68]	; (81720 <pwm_clocks_generate+0x50>)
   816dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   816de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   816e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   816e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   816e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   816e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   816ec:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   816ee:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   816f0:	f852 0b04 	ldr.w	r0, [r2], #4
   816f4:	fbb6 f0f0 	udiv	r0, r6, r0
   816f8:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   816fc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   81700:	d907      	bls.n	81712 <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
   81702:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   81704:	2b0b      	cmp	r3, #11
   81706:	d1f3      	bne.n	816f0 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   81708:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   8170c:	b00c      	add	sp, #48	; 0x30
   8170e:	bcf0      	pop	{r4, r5, r6, r7}
   81710:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   81712:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
   81714:	bf94      	ite	ls
   81716:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
   8171a:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
   8171e:	e7f5      	b.n	8170c <pwm_clocks_generate+0x3c>
   81720:	00089a10 	.word	0x00089a10

00081724 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81724:	b570      	push	{r4, r5, r6, lr}
   81726:	4606      	mov	r6, r0
   81728:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8172a:	680c      	ldr	r4, [r1, #0]
   8172c:	b144      	cbz	r4, 81740 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8172e:	6889      	ldr	r1, [r1, #8]
   81730:	4620      	mov	r0, r4
   81732:	4b0c      	ldr	r3, [pc, #48]	; (81764 <pwm_init+0x40>)
   81734:	4798      	blx	r3
   81736:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
   81738:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8173c:	4298      	cmp	r0, r3
   8173e:	d00c      	beq.n	8175a <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81740:	6868      	ldr	r0, [r5, #4]
   81742:	b140      	cbz	r0, 81756 <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   81744:	68a9      	ldr	r1, [r5, #8]
   81746:	4b07      	ldr	r3, [pc, #28]	; (81764 <pwm_init+0x40>)
   81748:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   8174a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8174e:	4298      	cmp	r0, r3
   81750:	d005      	beq.n	8175e <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   81752:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   81756:	6034      	str	r4, [r6, #0]
#endif
	return 0;
   81758:	2400      	movs	r4, #0
}
   8175a:	4620      	mov	r0, r4
   8175c:	bd70      	pop	{r4, r5, r6, pc}
			return result;
   8175e:	4604      	mov	r4, r0
   81760:	e7fb      	b.n	8175a <pwm_init+0x36>
   81762:	bf00      	nop
   81764:	000816d1 	.word	0x000816d1

00081768 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   81768:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8176a:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8176c:	684b      	ldr	r3, [r1, #4]
   8176e:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   81772:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   81774:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
   81776:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   81778:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
   8177a:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8177c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   81780:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   81782:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   81786:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   81788:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   8178c:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8178e:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
   81792:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   81796:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   8179a:	68cb      	ldr	r3, [r1, #12]
   8179c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   817a0:	690b      	ldr	r3, [r1, #16]
   817a2:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   817a6:	7d8b      	ldrb	r3, [r1, #22]
   817a8:	b13b      	cbz	r3, 817ba <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   817aa:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   817ac:	8b4b      	ldrh	r3, [r1, #26]
   817ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   817b2:	eb00 1442 	add.w	r4, r0, r2, lsl #5
   817b6:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   817ba:	6c85      	ldr	r5, [r0, #72]	; 0x48
   817bc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   817c0:	4093      	lsls	r3, r2
   817c2:	43db      	mvns	r3, r3
   817c4:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   817c6:	7fcc      	ldrb	r4, [r1, #31]
   817c8:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   817cc:	7f8c      	ldrb	r4, [r1, #30]
   817ce:	4094      	lsls	r4, r2
   817d0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   817d4:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   817d6:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   817d8:	6c44      	ldr	r4, [r0, #68]	; 0x44
   817da:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   817dc:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
   817e0:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   817e4:	f891 4020 	ldrb.w	r4, [r1, #32]
   817e8:	4094      	lsls	r4, r2
   817ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   817ee:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   817f0:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   817f2:	2301      	movs	r3, #1
   817f4:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
   817f6:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   817fa:	b31c      	cbz	r4, 81844 <pwm_channel_init+0xdc>
		p_pwm->PWM_SCM |= channel;
   817fc:	6a04      	ldr	r4, [r0, #32]
   817fe:	431c      	orrs	r4, r3
   81800:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   81802:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   81806:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   81808:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8180a:	bf0c      	ite	eq
   8180c:	431c      	orreq	r4, r3
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   8180e:	439c      	bicne	r4, r3
   81810:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81812:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   81816:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   81818:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8181a:	bf0c      	ite	eq
   8181c:	ea44 4303 	orreq.w	r3, r4, r3, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   81820:	ea24 4303 	bicne.w	r3, r4, r3, lsl #16
   81824:	6683      	str	r3, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
   81826:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
   81828:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
   8182a:	23ff      	movs	r3, #255	; 0xff
   8182c:	4093      	lsls	r3, r2
   8182e:	ea24 0403 	bic.w	r4, r4, r3
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81832:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   81836:	fa03 f202 	lsl.w	r2, r3, r2
   8183a:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
   8183c:	66c2      	str	r2, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   8183e:	2000      	movs	r0, #0
   81840:	bc70      	pop	{r4, r5, r6}
   81842:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   81844:	6a04      	ldr	r4, [r0, #32]
   81846:	ea24 0403 	bic.w	r4, r4, r3
   8184a:	6204      	str	r4, [r0, #32]
   8184c:	e7d9      	b.n	81802 <pwm_channel_init+0x9a>

0008184e <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   8184e:	2301      	movs	r3, #1
   81850:	fa03 f101 	lsl.w	r1, r3, r1
   81854:	6041      	str	r1, [r0, #4]
   81856:	4770      	bx	lr

00081858 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   81858:	2301      	movs	r3, #1
   8185a:	fa03 f101 	lsl.w	r1, r3, r1
   8185e:	6081      	str	r1, [r0, #8]
   81860:	4770      	bx	lr
	...

00081864 <rstc_start_software_reset>:
		Rstc *p_rstc)
{
#if (SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST;
#else
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST | RSTC_CR_PERRST;
   81864:	4b01      	ldr	r3, [pc, #4]	; (8186c <rstc_start_software_reset+0x8>)
   81866:	6003      	str	r3, [r0, #0]
   81868:	4770      	bx	lr
   8186a:	bf00      	nop
   8186c:	a5000005 	.word	0xa5000005

00081870 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
   81870:	6201      	str	r1, [r0, #32]
   81872:	4770      	bx	lr

00081874 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
   81874:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
   81876:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   81878:	6884      	ldr	r4, [r0, #8]
   8187a:	42a5      	cmp	r5, r4
   8187c:	d003      	beq.n	81886 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
   8187e:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
   81880:	6884      	ldr	r4, [r0, #8]
   81882:	42ac      	cmp	r4, r5
   81884:	d1fb      	bne.n	8187e <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
   81886:	b161      	cbz	r1, 818a2 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   81888:	f3c4 5001 	ubfx	r0, r4, #20, #2
   8188c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   81890:	f3c4 4003 	ubfx	r0, r4, #16, #4
   81894:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
   81898:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
   8189c:	bf18      	it	ne
   8189e:	300c      	addne	r0, #12
   818a0:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
   818a2:	b142      	cbz	r2, 818b6 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
   818a4:	f3c4 3102 	ubfx	r1, r4, #12, #3
   818a8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   818ac:	f3c4 2003 	ubfx	r0, r4, #8, #4
   818b0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
   818b4:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
   818b6:	b143      	cbz	r3, 818ca <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   818b8:	f3c4 1202 	ubfx	r2, r4, #4, #3
   818bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   818c0:	f004 040f 	and.w	r4, r4, #15
   818c4:	eb04 0442 	add.w	r4, r4, r2, lsl #1
   818c8:	601c      	str	r4, [r3, #0]
	}
}
   818ca:	bc30      	pop	{r4, r5}
   818cc:	4770      	bx	lr
	...

000818d0 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
   818d0:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
   818d2:	6844      	ldr	r4, [r0, #4]
   818d4:	f014 0f01 	tst.w	r4, #1
   818d8:	d005      	beq.n	818e6 <rtc_set_time+0x16>
		if (ul_hour > 12) {
   818da:	290c      	cmp	r1, #12
   818dc:	d93d      	bls.n	8195a <rtc_set_time+0x8a>
			ul_hour -= 12;
   818de:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
   818e0:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   818e4:	e000      	b.n	818e8 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
   818e6:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   818e8:	4c1d      	ldr	r4, [pc, #116]	; (81960 <rtc_set_time+0x90>)
   818ea:	fba4 5603 	umull	r5, r6, r4, r3
   818ee:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
   818f0:	eb06 0586 	add.w	r5, r6, r6, lsl #2
   818f4:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
   818f8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
   818fc:	fba4 6502 	umull	r6, r5, r4, r2
   81900:	08ed      	lsrs	r5, r5, #3
   81902:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
   81906:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8190a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
   8190e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   81912:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
   81914:	fba4 4201 	umull	r4, r2, r4, r1
   81918:	08d2      	lsrs	r2, r2, #3
   8191a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
   8191e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81922:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
   81926:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   8192a:	6983      	ldr	r3, [r0, #24]
   8192c:	f013 0f04 	tst.w	r3, #4
   81930:	d0fb      	beq.n	8192a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
   81932:	6803      	ldr	r3, [r0, #0]
   81934:	f043 0301 	orr.w	r3, r3, #1
   81938:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   8193a:	6983      	ldr	r3, [r0, #24]
   8193c:	f013 0f01 	tst.w	r3, #1
   81940:	d0fb      	beq.n	8193a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
   81942:	2301      	movs	r3, #1
   81944:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
   81946:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
   81948:	6803      	ldr	r3, [r0, #0]
   8194a:	f023 0301 	bic.w	r3, r3, #1
   8194e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
   81950:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   81952:	f000 0001 	and.w	r0, r0, #1
   81956:	bcf0      	pop	{r4, r5, r6, r7}
   81958:	4770      	bx	lr
	uint32_t ul_time = 0;
   8195a:	2700      	movs	r7, #0
   8195c:	e7c4      	b.n	818e8 <rtc_set_time+0x18>
   8195e:	bf00      	nop
   81960:	cccccccd 	.word	0xcccccccd

00081964 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
   81964:	b4f0      	push	{r4, r5, r6, r7}
   81966:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
   81968:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   8196a:	68c4      	ldr	r4, [r0, #12]
   8196c:	42a5      	cmp	r5, r4
   8196e:	d003      	beq.n	81978 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
   81970:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
   81972:	68c4      	ldr	r4, [r0, #12]
   81974:	42ac      	cmp	r4, r5
   81976:	d1fb      	bne.n	81970 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
   81978:	b199      	cbz	r1, 819a2 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8197a:	f3c4 3003 	ubfx	r0, r4, #12, #4
   8197e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81982:	f3c4 2703 	ubfx	r7, r4, #8, #4
   81986:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8198a:	f3c4 1002 	ubfx	r0, r4, #4, #3
   8198e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   81992:	f004 000f 	and.w	r0, r4, #15
   81996:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   8199a:	2564      	movs	r5, #100	; 0x64
   8199c:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
   819a0:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
   819a2:	b142      	cbz	r2, 819b6 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   819a4:	f3c4 5000 	ubfx	r0, r4, #20, #1
   819a8:	0081      	lsls	r1, r0, #2
   819aa:	4408      	add	r0, r1
   819ac:	f3c4 4103 	ubfx	r1, r4, #16, #4
   819b0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
   819b4:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
   819b6:	b143      	cbz	r3, 819ca <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
   819b8:	f3c4 7201 	ubfx	r2, r4, #28, #2
   819bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   819c0:	f3c4 6103 	ubfx	r1, r4, #24, #4
   819c4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   819c8:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
   819ca:	b116      	cbz	r6, 819d2 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
   819cc:	f3c4 5442 	ubfx	r4, r4, #21, #3
   819d0:	6034      	str	r4, [r6, #0]
	}
}
   819d2:	bcf0      	pop	{r4, r5, r6, r7}
   819d4:	4770      	bx	lr
	...

000819d8 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
   819d8:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   819da:	4d2a      	ldr	r5, [pc, #168]	; (81a84 <rtc_set_date+0xac>)
   819dc:	fba5 4603 	umull	r4, r6, r5, r3
   819e0:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
   819e2:	9c03      	ldr	r4, [sp, #12]
   819e4:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   819e6:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
   819ea:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   819ee:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   819f2:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
   819f6:	fba5 6402 	umull	r6, r4, r5, r2
   819fa:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   819fc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
   81a00:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   81a04:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   81a08:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
   81a0c:	4b1e      	ldr	r3, [pc, #120]	; (81a88 <rtc_set_date+0xb0>)
   81a0e:	fba3 4301 	umull	r4, r3, r3, r1
   81a12:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   81a14:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
   81a18:	4b1c      	ldr	r3, [pc, #112]	; (81a8c <rtc_set_date+0xb4>)
   81a1a:	fba3 4301 	umull	r4, r3, r3, r1
   81a1e:	095b      	lsrs	r3, r3, #5
   81a20:	fba5 6403 	umull	r6, r4, r5, r3
   81a24:	08e4      	lsrs	r4, r4, #3
   81a26:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   81a2a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   81a2e:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
   81a30:	fba5 4301 	umull	r4, r3, r5, r1
   81a34:	08db      	lsrs	r3, r3, #3
   81a36:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   81a3a:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   81a3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
   81a42:	fba5 1503 	umull	r1, r5, r5, r3
   81a46:	08ed      	lsrs	r5, r5, #3
   81a48:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81a4c:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
   81a50:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
   81a54:	6983      	ldr	r3, [r0, #24]
   81a56:	f013 0f04 	tst.w	r3, #4
   81a5a:	d0fb      	beq.n	81a54 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
   81a5c:	6803      	ldr	r3, [r0, #0]
   81a5e:	f043 0302 	orr.w	r3, r3, #2
   81a62:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
   81a64:	6983      	ldr	r3, [r0, #24]
   81a66:	f013 0f01 	tst.w	r3, #1
   81a6a:	d0fb      	beq.n	81a64 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
   81a6c:	2301      	movs	r3, #1
   81a6e:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
   81a70:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
   81a72:	6803      	ldr	r3, [r0, #0]
   81a74:	f023 0302 	bic.w	r3, r3, #2
   81a78:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
   81a7a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   81a7c:	f000 0002 	and.w	r0, r0, #2
   81a80:	bc70      	pop	{r4, r5, r6}
   81a82:	4770      	bx	lr
   81a84:	cccccccd 	.word	0xcccccccd
   81a88:	10624dd3 	.word	0x10624dd3
   81a8c:	51eb851f 	.word	0x51eb851f

00081a90 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
   81a90:	61c1      	str	r1, [r0, #28]
   81a92:	4770      	bx	lr

00081a94 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   81a94:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81a96:	0189      	lsls	r1, r1, #6
   81a98:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   81a9a:	2402      	movs	r4, #2
   81a9c:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   81a9e:	f04f 31ff 	mov.w	r1, #4294967295
   81aa2:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81aa4:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81aa6:	605a      	str	r2, [r3, #4]
}
   81aa8:	bc10      	pop	{r4}
   81aaa:	4770      	bx	lr

00081aac <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   81aac:	0189      	lsls	r1, r1, #6
   81aae:	2305      	movs	r3, #5
   81ab0:	5043      	str	r3, [r0, r1]
   81ab2:	4770      	bx	lr

00081ab4 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
   81ab4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   81ab8:	614a      	str	r2, [r1, #20]
   81aba:	4770      	bx	lr

00081abc <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81abc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   81ac0:	61ca      	str	r2, [r1, #28]
   81ac2:	4770      	bx	lr

00081ac4 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81ac4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   81ac8:	624a      	str	r2, [r1, #36]	; 0x24
   81aca:	4770      	bx	lr

00081acc <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81acc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   81ad0:	6a08      	ldr	r0, [r1, #32]
}
   81ad2:	4770      	bx	lr

00081ad4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81ad4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81ad6:	23ac      	movs	r3, #172	; 0xac
   81ad8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81ada:	680b      	ldr	r3, [r1, #0]
   81adc:	684a      	ldr	r2, [r1, #4]
   81ade:	fbb3 f3f2 	udiv	r3, r3, r2
   81ae2:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81ae4:	1e5c      	subs	r4, r3, #1
   81ae6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81aea:	4294      	cmp	r4, r2
   81aec:	d80b      	bhi.n	81b06 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   81aee:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81af0:	688b      	ldr	r3, [r1, #8]
   81af2:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81af4:	f240 2302 	movw	r3, #514	; 0x202
   81af8:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81afc:	2350      	movs	r3, #80	; 0x50
   81afe:	6003      	str	r3, [r0, #0]

	return 0;
   81b00:	2000      	movs	r0, #0
}
   81b02:	bc10      	pop	{r4}
   81b04:	4770      	bx	lr
		return 1;
   81b06:	2001      	movs	r0, #1
   81b08:	e7fb      	b.n	81b02 <uart_init+0x2e>

00081b0a <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
   81b0a:	6081      	str	r1, [r0, #8]
   81b0c:	4770      	bx	lr

00081b0e <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
   81b0e:	60c1      	str	r1, [r0, #12]
   81b10:	4770      	bx	lr

00081b12 <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
   81b12:	6940      	ldr	r0, [r0, #20]
}
   81b14:	4770      	bx	lr

00081b16 <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
   81b16:	6940      	ldr	r0, [r0, #20]
}
   81b18:	f000 0001 	and.w	r0, r0, #1
   81b1c:	4770      	bx	lr

00081b1e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81b1e:	6943      	ldr	r3, [r0, #20]
   81b20:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81b24:	bf1d      	ittte	ne
   81b26:	6983      	ldrne	r3, [r0, #24]
   81b28:	700b      	strbne	r3, [r1, #0]
	return 0;
   81b2a:	2000      	movne	r0, #0
		return 1;
   81b2c:	2001      	moveq	r0, #1
}
   81b2e:	4770      	bx	lr

00081b30 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   81b30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81b34:	6043      	str	r3, [r0, #4]
   81b36:	4770      	bx	lr

00081b38 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81b38:	e7fe      	b.n	81b38 <Dummy_Handler>
	...

00081b3c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81b3c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81b3e:	4b1c      	ldr	r3, [pc, #112]	; (81bb0 <Reset_Handler+0x74>)
   81b40:	4a1c      	ldr	r2, [pc, #112]	; (81bb4 <Reset_Handler+0x78>)
   81b42:	429a      	cmp	r2, r3
   81b44:	d010      	beq.n	81b68 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   81b46:	4b1c      	ldr	r3, [pc, #112]	; (81bb8 <Reset_Handler+0x7c>)
   81b48:	4a19      	ldr	r2, [pc, #100]	; (81bb0 <Reset_Handler+0x74>)
   81b4a:	429a      	cmp	r2, r3
   81b4c:	d20c      	bcs.n	81b68 <Reset_Handler+0x2c>
   81b4e:	3b01      	subs	r3, #1
   81b50:	1a9b      	subs	r3, r3, r2
   81b52:	f023 0303 	bic.w	r3, r3, #3
   81b56:	3304      	adds	r3, #4
   81b58:	4413      	add	r3, r2
   81b5a:	4916      	ldr	r1, [pc, #88]	; (81bb4 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   81b5c:	f851 0b04 	ldr.w	r0, [r1], #4
   81b60:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   81b64:	429a      	cmp	r2, r3
   81b66:	d1f9      	bne.n	81b5c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81b68:	4b14      	ldr	r3, [pc, #80]	; (81bbc <Reset_Handler+0x80>)
   81b6a:	4a15      	ldr	r2, [pc, #84]	; (81bc0 <Reset_Handler+0x84>)
   81b6c:	429a      	cmp	r2, r3
   81b6e:	d20a      	bcs.n	81b86 <Reset_Handler+0x4a>
   81b70:	3b01      	subs	r3, #1
   81b72:	1a9b      	subs	r3, r3, r2
   81b74:	f023 0303 	bic.w	r3, r3, #3
   81b78:	3304      	adds	r3, #4
   81b7a:	4413      	add	r3, r2
		*pDest++ = 0;
   81b7c:	2100      	movs	r1, #0
   81b7e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   81b82:	4293      	cmp	r3, r2
   81b84:	d1fb      	bne.n	81b7e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81b86:	4b0f      	ldr	r3, [pc, #60]	; (81bc4 <Reset_Handler+0x88>)
   81b88:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81b8c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81b90:	490d      	ldr	r1, [pc, #52]	; (81bc8 <Reset_Handler+0x8c>)
   81b92:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   81b94:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81b98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
   81b9c:	d203      	bcs.n	81ba6 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81b9e:	688b      	ldr	r3, [r1, #8]
   81ba0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81ba4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81ba6:	4b09      	ldr	r3, [pc, #36]	; (81bcc <Reset_Handler+0x90>)
   81ba8:	4798      	blx	r3

	/* Branch to main function */
	main();
   81baa:	4b09      	ldr	r3, [pc, #36]	; (81bd0 <Reset_Handler+0x94>)
   81bac:	4798      	blx	r3
   81bae:	e7fe      	b.n	81bae <Reset_Handler+0x72>
   81bb0:	20000000 	.word	0x20000000
   81bb4:	0008aa8c 	.word	0x0008aa8c
   81bb8:	20000fd8 	.word	0x20000fd8
   81bbc:	20002308 	.word	0x20002308
   81bc0:	20000fd8 	.word	0x20000fd8
   81bc4:	00080000 	.word	0x00080000
   81bc8:	e000ed00 	.word	0xe000ed00
   81bcc:	00084a5d 	.word	0x00084a5d
   81bd0:	000844ed 	.word	0x000844ed

00081bd4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81bd4:	4b3d      	ldr	r3, [pc, #244]	; (81ccc <SystemCoreClockUpdate+0xf8>)
   81bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81bd8:	f003 0303 	and.w	r3, r3, #3
   81bdc:	2b03      	cmp	r3, #3
   81bde:	d80e      	bhi.n	81bfe <SystemCoreClockUpdate+0x2a>
   81be0:	e8df f003 	tbb	[pc, r3]
   81be4:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81be8:	4b39      	ldr	r3, [pc, #228]	; (81cd0 <SystemCoreClockUpdate+0xfc>)
   81bea:	695b      	ldr	r3, [r3, #20]
   81bec:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81bf0:	bf14      	ite	ne
   81bf2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81bf6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81bfa:	4b36      	ldr	r3, [pc, #216]	; (81cd4 <SystemCoreClockUpdate+0x100>)
   81bfc:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81bfe:	4b33      	ldr	r3, [pc, #204]	; (81ccc <SystemCoreClockUpdate+0xf8>)
   81c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81c02:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81c06:	2b70      	cmp	r3, #112	; 0x70
   81c08:	d057      	beq.n	81cba <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81c0a:	4b30      	ldr	r3, [pc, #192]	; (81ccc <SystemCoreClockUpdate+0xf8>)
   81c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81c0e:	4931      	ldr	r1, [pc, #196]	; (81cd4 <SystemCoreClockUpdate+0x100>)
   81c10:	f3c2 1202 	ubfx	r2, r2, #4, #3
   81c14:	680b      	ldr	r3, [r1, #0]
   81c16:	40d3      	lsrs	r3, r2
   81c18:	600b      	str	r3, [r1, #0]
   81c1a:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81c1c:	4b2b      	ldr	r3, [pc, #172]	; (81ccc <SystemCoreClockUpdate+0xf8>)
   81c1e:	6a1b      	ldr	r3, [r3, #32]
   81c20:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81c24:	d003      	beq.n	81c2e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81c26:	4a2c      	ldr	r2, [pc, #176]	; (81cd8 <SystemCoreClockUpdate+0x104>)
   81c28:	4b2a      	ldr	r3, [pc, #168]	; (81cd4 <SystemCoreClockUpdate+0x100>)
   81c2a:	601a      	str	r2, [r3, #0]
   81c2c:	e7e7      	b.n	81bfe <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81c2e:	4a2b      	ldr	r2, [pc, #172]	; (81cdc <SystemCoreClockUpdate+0x108>)
   81c30:	4b28      	ldr	r3, [pc, #160]	; (81cd4 <SystemCoreClockUpdate+0x100>)
   81c32:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81c34:	4b25      	ldr	r3, [pc, #148]	; (81ccc <SystemCoreClockUpdate+0xf8>)
   81c36:	6a1b      	ldr	r3, [r3, #32]
   81c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81c3c:	2b10      	cmp	r3, #16
   81c3e:	d005      	beq.n	81c4c <SystemCoreClockUpdate+0x78>
   81c40:	2b20      	cmp	r3, #32
   81c42:	d1dc      	bne.n	81bfe <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   81c44:	4a24      	ldr	r2, [pc, #144]	; (81cd8 <SystemCoreClockUpdate+0x104>)
   81c46:	4b23      	ldr	r3, [pc, #140]	; (81cd4 <SystemCoreClockUpdate+0x100>)
   81c48:	601a      	str	r2, [r3, #0]
				break;
   81c4a:	e7d8      	b.n	81bfe <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   81c4c:	4a24      	ldr	r2, [pc, #144]	; (81ce0 <SystemCoreClockUpdate+0x10c>)
   81c4e:	4b21      	ldr	r3, [pc, #132]	; (81cd4 <SystemCoreClockUpdate+0x100>)
   81c50:	601a      	str	r2, [r3, #0]
				break;
   81c52:	e7d4      	b.n	81bfe <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81c54:	4b1d      	ldr	r3, [pc, #116]	; (81ccc <SystemCoreClockUpdate+0xf8>)
   81c56:	6a1b      	ldr	r3, [r3, #32]
   81c58:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81c5c:	d00c      	beq.n	81c78 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81c5e:	4a1e      	ldr	r2, [pc, #120]	; (81cd8 <SystemCoreClockUpdate+0x104>)
   81c60:	4b1c      	ldr	r3, [pc, #112]	; (81cd4 <SystemCoreClockUpdate+0x100>)
   81c62:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81c64:	4b19      	ldr	r3, [pc, #100]	; (81ccc <SystemCoreClockUpdate+0xf8>)
   81c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81c68:	f003 0303 	and.w	r3, r3, #3
   81c6c:	2b02      	cmp	r3, #2
   81c6e:	d016      	beq.n	81c9e <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81c70:	4a1c      	ldr	r2, [pc, #112]	; (81ce4 <SystemCoreClockUpdate+0x110>)
   81c72:	4b18      	ldr	r3, [pc, #96]	; (81cd4 <SystemCoreClockUpdate+0x100>)
   81c74:	601a      	str	r2, [r3, #0]
   81c76:	e7c2      	b.n	81bfe <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81c78:	4a18      	ldr	r2, [pc, #96]	; (81cdc <SystemCoreClockUpdate+0x108>)
   81c7a:	4b16      	ldr	r3, [pc, #88]	; (81cd4 <SystemCoreClockUpdate+0x100>)
   81c7c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81c7e:	4b13      	ldr	r3, [pc, #76]	; (81ccc <SystemCoreClockUpdate+0xf8>)
   81c80:	6a1b      	ldr	r3, [r3, #32]
   81c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81c86:	2b10      	cmp	r3, #16
   81c88:	d005      	beq.n	81c96 <SystemCoreClockUpdate+0xc2>
   81c8a:	2b20      	cmp	r3, #32
   81c8c:	d1ea      	bne.n	81c64 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   81c8e:	4a12      	ldr	r2, [pc, #72]	; (81cd8 <SystemCoreClockUpdate+0x104>)
   81c90:	4b10      	ldr	r3, [pc, #64]	; (81cd4 <SystemCoreClockUpdate+0x100>)
   81c92:	601a      	str	r2, [r3, #0]
				break;
   81c94:	e7e6      	b.n	81c64 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   81c96:	4a12      	ldr	r2, [pc, #72]	; (81ce0 <SystemCoreClockUpdate+0x10c>)
   81c98:	4b0e      	ldr	r3, [pc, #56]	; (81cd4 <SystemCoreClockUpdate+0x100>)
   81c9a:	601a      	str	r2, [r3, #0]
				break;
   81c9c:	e7e2      	b.n	81c64 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81c9e:	4a0b      	ldr	r2, [pc, #44]	; (81ccc <SystemCoreClockUpdate+0xf8>)
   81ca0:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   81ca2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   81ca4:	480b      	ldr	r0, [pc, #44]	; (81cd4 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81ca6:	f3c1 410a 	ubfx	r1, r1, #16, #11
   81caa:	6803      	ldr	r3, [r0, #0]
   81cac:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   81cb0:	b2d2      	uxtb	r2, r2
   81cb2:	fbb3 f3f2 	udiv	r3, r3, r2
   81cb6:	6003      	str	r3, [r0, #0]
   81cb8:	e7a1      	b.n	81bfe <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   81cba:	4a06      	ldr	r2, [pc, #24]	; (81cd4 <SystemCoreClockUpdate+0x100>)
   81cbc:	6813      	ldr	r3, [r2, #0]
   81cbe:	490a      	ldr	r1, [pc, #40]	; (81ce8 <SystemCoreClockUpdate+0x114>)
   81cc0:	fba1 1303 	umull	r1, r3, r1, r3
   81cc4:	085b      	lsrs	r3, r3, #1
   81cc6:	6013      	str	r3, [r2, #0]
   81cc8:	4770      	bx	lr
   81cca:	bf00      	nop
   81ccc:	400e0400 	.word	0x400e0400
   81cd0:	400e1210 	.word	0x400e1210
   81cd4:	20000128 	.word	0x20000128
   81cd8:	00b71b00 	.word	0x00b71b00
   81cdc:	003d0900 	.word	0x003d0900
   81ce0:	007a1200 	.word	0x007a1200
   81ce4:	0e4e1c00 	.word	0x0e4e1c00
   81ce8:	aaaaaaab 	.word	0xaaaaaaab

00081cec <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81cec:	4b0a      	ldr	r3, [pc, #40]	; (81d18 <_sbrk+0x2c>)
   81cee:	681b      	ldr	r3, [r3, #0]
   81cf0:	b153      	cbz	r3, 81d08 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   81cf2:	4b09      	ldr	r3, [pc, #36]	; (81d18 <_sbrk+0x2c>)
   81cf4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81cf6:	181a      	adds	r2, r3, r0
   81cf8:	4908      	ldr	r1, [pc, #32]	; (81d1c <_sbrk+0x30>)
   81cfa:	4291      	cmp	r1, r2
   81cfc:	db08      	blt.n	81d10 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   81cfe:	4610      	mov	r0, r2
   81d00:	4a05      	ldr	r2, [pc, #20]	; (81d18 <_sbrk+0x2c>)
   81d02:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81d04:	4618      	mov	r0, r3
   81d06:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   81d08:	4a05      	ldr	r2, [pc, #20]	; (81d20 <_sbrk+0x34>)
   81d0a:	4b03      	ldr	r3, [pc, #12]	; (81d18 <_sbrk+0x2c>)
   81d0c:	601a      	str	r2, [r3, #0]
   81d0e:	e7f0      	b.n	81cf2 <_sbrk+0x6>
		return (caddr_t) -1;	
   81d10:	f04f 30ff 	mov.w	r0, #4294967295
}
   81d14:	4770      	bx	lr
   81d16:	bf00      	nop
   81d18:	20001178 	.word	0x20001178
   81d1c:	20083ffc 	.word	0x20083ffc
   81d20:	20084000 	.word	0x20084000

00081d24 <Test>:
	PH_CMD_RELAIS_1,
	PH_CMD_RELAIS_2
};

void Test(uint32_t sc, uint32_t phase)
{
   81d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81d28:	b084      	sub	sp, #16
   81d2a:	9103      	str	r1, [sp, #12]
	switch(sc)
   81d2c:	2864      	cmp	r0, #100	; 0x64
   81d2e:	f000 80dd 	beq.w	81eec <Test+0x1c8>
   81d32:	2866      	cmp	r0, #102	; 0x66
   81d34:	f040 8127 	bne.w	81f86 <Test+0x262>
		phase<<=8;
		phase&=0xFFFF00;
		phase|=PH_CMD_MOSFET;
		//no break;
	case TEST_RUN:
		sprintf(buf,"\r\nPH:%d--%d\r\n",*((uint16_t*)((uint8_t*)&phase+1)),*((char*)&phase));
   81d38:	f8bd 700d 	ldrh.w	r7, [sp, #13]
   81d3c:	4c9e      	ldr	r4, [pc, #632]	; (81fb8 <Test+0x294>)
   81d3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   81d42:	463a      	mov	r2, r7
   81d44:	499d      	ldr	r1, [pc, #628]	; (81fbc <Test+0x298>)
   81d46:	4620      	mov	r0, r4
   81d48:	4d9d      	ldr	r5, [pc, #628]	; (81fc0 <Test+0x29c>)
   81d4a:	47a8      	blx	r5
		Putstr(buf);
   81d4c:	4621      	mov	r1, r4
   81d4e:	2067      	movs	r0, #103	; 0x67
   81d50:	4c9c      	ldr	r4, [pc, #624]	; (81fc4 <Test+0x2a0>)
   81d52:	47a0      	blx	r4

		Putstr(PENE_OUVERT_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_OUVERT)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   81d54:	499c      	ldr	r1, [pc, #624]	; (81fc8 <Test+0x2a4>)
   81d56:	2067      	movs	r0, #103	; 0x67
   81d58:	47a0      	blx	r4
   81d5a:	4d9c      	ldr	r5, [pc, #624]	; (81fcc <Test+0x2a8>)
   81d5c:	4629      	mov	r1, r5
   81d5e:	2067      	movs	r0, #103	; 0x67
   81d60:	47a0      	blx	r4
   81d62:	200e      	movs	r0, #14
   81d64:	4b9a      	ldr	r3, [pc, #616]	; (81fd0 <Test+0x2ac>)
   81d66:	4798      	blx	r3
   81d68:	2800      	cmp	r0, #0
   81d6a:	f040 80cd 	bne.w	81f08 <Test+0x1e4>
   81d6e:	4999      	ldr	r1, [pc, #612]	; (81fd4 <Test+0x2b0>)
   81d70:	2067      	movs	r0, #103	; 0x67
   81d72:	47a0      	blx	r4
   81d74:	4c98      	ldr	r4, [pc, #608]	; (81fd8 <Test+0x2b4>)
   81d76:	4621      	mov	r1, r4
   81d78:	2067      	movs	r0, #103	; 0x67
   81d7a:	4e92      	ldr	r6, [pc, #584]	; (81fc4 <Test+0x2a0>)
   81d7c:	47b0      	blx	r6
		Putstr(PENE_FERME_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_FERME)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   81d7e:	4997      	ldr	r1, [pc, #604]	; (81fdc <Test+0x2b8>)
   81d80:	2067      	movs	r0, #103	; 0x67
   81d82:	47b0      	blx	r6
   81d84:	4629      	mov	r1, r5
   81d86:	2067      	movs	r0, #103	; 0x67
   81d88:	47b0      	blx	r6
   81d8a:	200f      	movs	r0, #15
   81d8c:	4b90      	ldr	r3, [pc, #576]	; (81fd0 <Test+0x2ac>)
   81d8e:	4798      	blx	r3
   81d90:	2800      	cmp	r0, #0
   81d92:	f040 80be 	bne.w	81f12 <Test+0x1ee>
   81d96:	498f      	ldr	r1, [pc, #572]	; (81fd4 <Test+0x2b0>)
   81d98:	2067      	movs	r0, #103	; 0x67
   81d9a:	47b0      	blx	r6
   81d9c:	4621      	mov	r1, r4
   81d9e:	2067      	movs	r0, #103	; 0x67
   81da0:	f8df 8220 	ldr.w	r8, [pc, #544]	; 81fc4 <Test+0x2a0>
   81da4:	47c0      	blx	r8
		Putstr(IN_ILS_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_ILS)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   81da6:	498e      	ldr	r1, [pc, #568]	; (81fe0 <Test+0x2bc>)
   81da8:	2067      	movs	r0, #103	; 0x67
   81daa:	47c0      	blx	r8
   81dac:	4e8d      	ldr	r6, [pc, #564]	; (81fe4 <Test+0x2c0>)
   81dae:	4631      	mov	r1, r6
   81db0:	2067      	movs	r0, #103	; 0x67
   81db2:	47c0      	blx	r8
   81db4:	2010      	movs	r0, #16
   81db6:	4b86      	ldr	r3, [pc, #536]	; (81fd0 <Test+0x2ac>)
   81db8:	4798      	blx	r3
   81dba:	2800      	cmp	r0, #0
   81dbc:	f040 80ae 	bne.w	81f1c <Test+0x1f8>
   81dc0:	4984      	ldr	r1, [pc, #528]	; (81fd4 <Test+0x2b0>)
   81dc2:	2067      	movs	r0, #103	; 0x67
   81dc4:	47c0      	blx	r8
   81dc6:	4621      	mov	r1, r4
   81dc8:	2067      	movs	r0, #103	; 0x67
   81dca:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 81fc4 <Test+0x2a0>
   81dce:	47c0      	blx	r8
		Putstr(IN_SV_NAME);					Putstr("\t\t: ");	gpio_pin_is_low(IN_SV)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   81dd0:	4985      	ldr	r1, [pc, #532]	; (81fe8 <Test+0x2c4>)
   81dd2:	2067      	movs	r0, #103	; 0x67
   81dd4:	47c0      	blx	r8
   81dd6:	4631      	mov	r1, r6
   81dd8:	2067      	movs	r0, #103	; 0x67
   81dda:	47c0      	blx	r8
   81ddc:	2011      	movs	r0, #17
   81dde:	4b7c      	ldr	r3, [pc, #496]	; (81fd0 <Test+0x2ac>)
   81de0:	4798      	blx	r3
   81de2:	2800      	cmp	r0, #0
   81de4:	f040 809f 	bne.w	81f26 <Test+0x202>
   81de8:	497a      	ldr	r1, [pc, #488]	; (81fd4 <Test+0x2b0>)
   81dea:	2067      	movs	r0, #103	; 0x67
   81dec:	47c0      	blx	r8
   81dee:	4621      	mov	r1, r4
   81df0:	2067      	movs	r0, #103	; 0x67
   81df2:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 81fc4 <Test+0x2a0>
   81df6:	47c0      	blx	r8
		Putstr(IN_RADAR_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_RADAR)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   81df8:	497c      	ldr	r1, [pc, #496]	; (81fec <Test+0x2c8>)
   81dfa:	2067      	movs	r0, #103	; 0x67
   81dfc:	47c0      	blx	r8
   81dfe:	4631      	mov	r1, r6
   81e00:	2067      	movs	r0, #103	; 0x67
   81e02:	47c0      	blx	r8
   81e04:	2018      	movs	r0, #24
   81e06:	4b72      	ldr	r3, [pc, #456]	; (81fd0 <Test+0x2ac>)
   81e08:	4798      	blx	r3
   81e0a:	2800      	cmp	r0, #0
   81e0c:	f040 8090 	bne.w	81f30 <Test+0x20c>
   81e10:	4970      	ldr	r1, [pc, #448]	; (81fd4 <Test+0x2b0>)
   81e12:	2067      	movs	r0, #103	; 0x67
   81e14:	47c0      	blx	r8
   81e16:	4621      	mov	r1, r4
   81e18:	2067      	movs	r0, #103	; 0x67
   81e1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 81fc4 <Test+0x2a0>
   81e1e:	47c0      	blx	r8
		Putstr(IN_DVU_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_DVU)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   81e20:	4973      	ldr	r1, [pc, #460]	; (81ff0 <Test+0x2cc>)
   81e22:	2067      	movs	r0, #103	; 0x67
   81e24:	47c0      	blx	r8
   81e26:	4631      	mov	r1, r6
   81e28:	2067      	movs	r0, #103	; 0x67
   81e2a:	47c0      	blx	r8
   81e2c:	2019      	movs	r0, #25
   81e2e:	4b68      	ldr	r3, [pc, #416]	; (81fd0 <Test+0x2ac>)
   81e30:	4798      	blx	r3
   81e32:	2800      	cmp	r0, #0
   81e34:	f040 8081 	bne.w	81f3a <Test+0x216>
   81e38:	4966      	ldr	r1, [pc, #408]	; (81fd4 <Test+0x2b0>)
   81e3a:	2067      	movs	r0, #103	; 0x67
   81e3c:	47c0      	blx	r8
   81e3e:	4621      	mov	r1, r4
   81e40:	2067      	movs	r0, #103	; 0x67
   81e42:	4e60      	ldr	r6, [pc, #384]	; (81fc4 <Test+0x2a0>)
   81e44:	47b0      	blx	r6
		Putstr(IN_PREMIERE_ENTREE_NAME);	Putstr("\t: ");		gpio_pin_is_low(IN_PREMIERE_ENTREE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   81e46:	496b      	ldr	r1, [pc, #428]	; (81ff4 <Test+0x2d0>)
   81e48:	2067      	movs	r0, #103	; 0x67
   81e4a:	47b0      	blx	r6
   81e4c:	4629      	mov	r1, r5
   81e4e:	2067      	movs	r0, #103	; 0x67
   81e50:	47b0      	blx	r6
   81e52:	201a      	movs	r0, #26
   81e54:	4b5e      	ldr	r3, [pc, #376]	; (81fd0 <Test+0x2ac>)
   81e56:	4798      	blx	r3
   81e58:	2800      	cmp	r0, #0
   81e5a:	d173      	bne.n	81f44 <Test+0x220>
   81e5c:	495d      	ldr	r1, [pc, #372]	; (81fd4 <Test+0x2b0>)
   81e5e:	2067      	movs	r0, #103	; 0x67
   81e60:	47b0      	blx	r6
   81e62:	4621      	mov	r1, r4
   81e64:	2067      	movs	r0, #103	; 0x67
   81e66:	4e57      	ldr	r6, [pc, #348]	; (81fc4 <Test+0x2a0>)
   81e68:	47b0      	blx	r6
		Putstr(IN_DVU_GENERAL_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_DVU_GENERAL)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   81e6a:	4963      	ldr	r1, [pc, #396]	; (81ff8 <Test+0x2d4>)
   81e6c:	2067      	movs	r0, #103	; 0x67
   81e6e:	47b0      	blx	r6
   81e70:	4629      	mov	r1, r5
   81e72:	2067      	movs	r0, #103	; 0x67
   81e74:	47b0      	blx	r6
   81e76:	201b      	movs	r0, #27
   81e78:	4b55      	ldr	r3, [pc, #340]	; (81fd0 <Test+0x2ac>)
   81e7a:	4798      	blx	r3
   81e7c:	2800      	cmp	r0, #0
   81e7e:	d166      	bne.n	81f4e <Test+0x22a>
   81e80:	4954      	ldr	r1, [pc, #336]	; (81fd4 <Test+0x2b0>)
   81e82:	2067      	movs	r0, #103	; 0x67
   81e84:	47b0      	blx	r6
   81e86:	4621      	mov	r1, r4
   81e88:	2067      	movs	r0, #103	; 0x67
   81e8a:	4e4e      	ldr	r6, [pc, #312]	; (81fc4 <Test+0x2a0>)
   81e8c:	47b0      	blx	r6
		Putstr(IN_ENTREE_LIBRE_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_LIBRE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   81e8e:	495b      	ldr	r1, [pc, #364]	; (81ffc <Test+0x2d8>)
   81e90:	2067      	movs	r0, #103	; 0x67
   81e92:	47b0      	blx	r6
   81e94:	4629      	mov	r1, r5
   81e96:	2067      	movs	r0, #103	; 0x67
   81e98:	47b0      	blx	r6
   81e9a:	201c      	movs	r0, #28
   81e9c:	4b4c      	ldr	r3, [pc, #304]	; (81fd0 <Test+0x2ac>)
   81e9e:	4798      	blx	r3
   81ea0:	2800      	cmp	r0, #0
   81ea2:	d159      	bne.n	81f58 <Test+0x234>
   81ea4:	494b      	ldr	r1, [pc, #300]	; (81fd4 <Test+0x2b0>)
   81ea6:	2067      	movs	r0, #103	; 0x67
   81ea8:	47b0      	blx	r6
   81eaa:	4621      	mov	r1, r4
   81eac:	2067      	movs	r0, #103	; 0x67
   81eae:	4e45      	ldr	r6, [pc, #276]	; (81fc4 <Test+0x2a0>)
   81eb0:	47b0      	blx	r6
		Putstr(IN_ENTREE_OPTION_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_OPTION)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   81eb2:	4953      	ldr	r1, [pc, #332]	; (82000 <Test+0x2dc>)
   81eb4:	2067      	movs	r0, #103	; 0x67
   81eb6:	47b0      	blx	r6
   81eb8:	4629      	mov	r1, r5
   81eba:	2067      	movs	r0, #103	; 0x67
   81ebc:	47b0      	blx	r6
   81ebe:	201d      	movs	r0, #29
   81ec0:	4b43      	ldr	r3, [pc, #268]	; (81fd0 <Test+0x2ac>)
   81ec2:	4798      	blx	r3
   81ec4:	2800      	cmp	r0, #0
   81ec6:	d14c      	bne.n	81f62 <Test+0x23e>
   81ec8:	4942      	ldr	r1, [pc, #264]	; (81fd4 <Test+0x2b0>)
   81eca:	2067      	movs	r0, #103	; 0x67
   81ecc:	47b0      	blx	r6
   81ece:	4621      	mov	r1, r4
   81ed0:	2067      	movs	r0, #103	; 0x67
   81ed2:	4b3c      	ldr	r3, [pc, #240]	; (81fc4 <Test+0x2a0>)
   81ed4:	4798      	blx	r3

		switch(mBitsMsk(phase,0xFF))
   81ed6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   81eda:	3b01      	subs	r3, #1
   81edc:	2b04      	cmp	r3, #4
   81ede:	f200 80a4 	bhi.w	8202a <Test+0x306>
   81ee2:	e8df f003 	tbb	[pc, r3]
   81ee6:	5343      	.short	0x5343
   81ee8:	615a      	.short	0x615a
   81eea:	9b          	.byte	0x9b
   81eeb:	00          	.byte	0x00
		Putstr("\r\nTest started...\r\n");
   81eec:	4945      	ldr	r1, [pc, #276]	; (82004 <Test+0x2e0>)
   81eee:	2067      	movs	r0, #103	; 0x67
   81ef0:	4b34      	ldr	r3, [pc, #208]	; (81fc4 <Test+0x2a0>)
   81ef2:	4798      	blx	r3
		phase<<=8;
   81ef4:	9b03      	ldr	r3, [sp, #12]
   81ef6:	021b      	lsls	r3, r3, #8
		phase&=0xFFFF00;
   81ef8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   81efc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
		phase|=PH_CMD_MOSFET;
   81f00:	f043 0301 	orr.w	r3, r3, #1
   81f04:	9303      	str	r3, [sp, #12]
   81f06:	e717      	b.n	81d38 <Test+0x14>
		Putstr(PENE_OUVERT_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_OUVERT)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   81f08:	493f      	ldr	r1, [pc, #252]	; (82008 <Test+0x2e4>)
   81f0a:	2067      	movs	r0, #103	; 0x67
   81f0c:	4b2d      	ldr	r3, [pc, #180]	; (81fc4 <Test+0x2a0>)
   81f0e:	4798      	blx	r3
   81f10:	e730      	b.n	81d74 <Test+0x50>
		Putstr(PENE_FERME_NAME);			Putstr("\t: ");		gpio_pin_is_low(PENE_FERME)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   81f12:	493d      	ldr	r1, [pc, #244]	; (82008 <Test+0x2e4>)
   81f14:	2067      	movs	r0, #103	; 0x67
   81f16:	4b2b      	ldr	r3, [pc, #172]	; (81fc4 <Test+0x2a0>)
   81f18:	4798      	blx	r3
   81f1a:	e73f      	b.n	81d9c <Test+0x78>
		Putstr(IN_ILS_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_ILS)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   81f1c:	493a      	ldr	r1, [pc, #232]	; (82008 <Test+0x2e4>)
   81f1e:	2067      	movs	r0, #103	; 0x67
   81f20:	4b28      	ldr	r3, [pc, #160]	; (81fc4 <Test+0x2a0>)
   81f22:	4798      	blx	r3
   81f24:	e74f      	b.n	81dc6 <Test+0xa2>
		Putstr(IN_SV_NAME);					Putstr("\t\t: ");	gpio_pin_is_low(IN_SV)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   81f26:	4938      	ldr	r1, [pc, #224]	; (82008 <Test+0x2e4>)
   81f28:	2067      	movs	r0, #103	; 0x67
   81f2a:	4b26      	ldr	r3, [pc, #152]	; (81fc4 <Test+0x2a0>)
   81f2c:	4798      	blx	r3
   81f2e:	e75e      	b.n	81dee <Test+0xca>
		Putstr(IN_RADAR_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_RADAR)?Putstr("ON"):Putstr("OFF");			Putstr("\r\n");
   81f30:	4935      	ldr	r1, [pc, #212]	; (82008 <Test+0x2e4>)
   81f32:	2067      	movs	r0, #103	; 0x67
   81f34:	4b23      	ldr	r3, [pc, #140]	; (81fc4 <Test+0x2a0>)
   81f36:	4798      	blx	r3
   81f38:	e76d      	b.n	81e16 <Test+0xf2>
		Putstr(IN_DVU_NAME);				Putstr("\t\t: ");	gpio_pin_is_low(IN_DVU)?Putstr("ON"):Putstr("OFF");				Putstr("\r\n");
   81f3a:	4933      	ldr	r1, [pc, #204]	; (82008 <Test+0x2e4>)
   81f3c:	2067      	movs	r0, #103	; 0x67
   81f3e:	4b21      	ldr	r3, [pc, #132]	; (81fc4 <Test+0x2a0>)
   81f40:	4798      	blx	r3
   81f42:	e77c      	b.n	81e3e <Test+0x11a>
		Putstr(IN_PREMIERE_ENTREE_NAME);	Putstr("\t: ");		gpio_pin_is_low(IN_PREMIERE_ENTREE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   81f44:	4930      	ldr	r1, [pc, #192]	; (82008 <Test+0x2e4>)
   81f46:	2067      	movs	r0, #103	; 0x67
   81f48:	4b1e      	ldr	r3, [pc, #120]	; (81fc4 <Test+0x2a0>)
   81f4a:	4798      	blx	r3
   81f4c:	e789      	b.n	81e62 <Test+0x13e>
		Putstr(IN_DVU_GENERAL_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_DVU_GENERAL)?Putstr("ON"):Putstr("OFF");		Putstr("\r\n");
   81f4e:	492e      	ldr	r1, [pc, #184]	; (82008 <Test+0x2e4>)
   81f50:	2067      	movs	r0, #103	; 0x67
   81f52:	4b1c      	ldr	r3, [pc, #112]	; (81fc4 <Test+0x2a0>)
   81f54:	4798      	blx	r3
   81f56:	e796      	b.n	81e86 <Test+0x162>
		Putstr(IN_ENTREE_LIBRE_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_LIBRE)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   81f58:	492b      	ldr	r1, [pc, #172]	; (82008 <Test+0x2e4>)
   81f5a:	2067      	movs	r0, #103	; 0x67
   81f5c:	4b19      	ldr	r3, [pc, #100]	; (81fc4 <Test+0x2a0>)
   81f5e:	4798      	blx	r3
   81f60:	e7a3      	b.n	81eaa <Test+0x186>
		Putstr(IN_ENTREE_OPTION_NAME);		Putstr("\t: ");		gpio_pin_is_low(IN_ENTREE_OPTION)?Putstr("ON"):Putstr("OFF");	Putstr("\r\n");
   81f62:	4929      	ldr	r1, [pc, #164]	; (82008 <Test+0x2e4>)
   81f64:	2067      	movs	r0, #103	; 0x67
   81f66:	4b17      	ldr	r3, [pc, #92]	; (81fc4 <Test+0x2a0>)
   81f68:	4798      	blx	r3
   81f6a:	e7b0      	b.n	81ece <Test+0x1aa>
		{
		case PH_CMD_MOSFET:
			gpio_set_pin_high(CMD_MOSFET);
   81f6c:	2020      	movs	r0, #32
   81f6e:	4b27      	ldr	r3, [pc, #156]	; (8200c <Test+0x2e8>)
   81f70:	4798      	blx	r3
		}
		break;
	default:
		return;
	}
	PushTask(Test,TEST_RUN,++phase,1000);
   81f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   81f76:	9300      	str	r3, [sp, #0]
   81f78:	9b03      	ldr	r3, [sp, #12]
   81f7a:	3301      	adds	r3, #1
   81f7c:	2266      	movs	r2, #102	; 0x66
   81f7e:	4924      	ldr	r1, [pc, #144]	; (82010 <Test+0x2ec>)
   81f80:	4610      	mov	r0, r2
   81f82:	4c24      	ldr	r4, [pc, #144]	; (82014 <Test+0x2f0>)
   81f84:	47a0      	blx	r4
}
   81f86:	b004      	add	sp, #16
   81f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			gpio_set_pin_low(CMD_MOSFET);
   81f8c:	2020      	movs	r0, #32
   81f8e:	4b22      	ldr	r3, [pc, #136]	; (82018 <Test+0x2f4>)
   81f90:	4798      	blx	r3
			gpio_set_pin_high(CMD_MOT_SERRURE);
   81f92:	2021      	movs	r0, #33	; 0x21
   81f94:	4b1d      	ldr	r3, [pc, #116]	; (8200c <Test+0x2e8>)
   81f96:	4798      	blx	r3
			break;
   81f98:	e7eb      	b.n	81f72 <Test+0x24e>
			gpio_set_pin_low(CMD_MOT_SERRURE);
   81f9a:	2021      	movs	r0, #33	; 0x21
   81f9c:	4b1e      	ldr	r3, [pc, #120]	; (82018 <Test+0x2f4>)
   81f9e:	4798      	blx	r3
			gpio_set_pin_high(CMD_RELAIS);
   81fa0:	2022      	movs	r0, #34	; 0x22
   81fa2:	4b1a      	ldr	r3, [pc, #104]	; (8200c <Test+0x2e8>)
   81fa4:	4798      	blx	r3
			break;
   81fa6:	e7e4      	b.n	81f72 <Test+0x24e>
			gpio_set_pin_low(CMD_RELAIS);
   81fa8:	2022      	movs	r0, #34	; 0x22
   81faa:	4b1b      	ldr	r3, [pc, #108]	; (82018 <Test+0x2f4>)
   81fac:	4798      	blx	r3
			gpio_set_pin_high(CMD_RELAIS_1);
   81fae:	2023      	movs	r0, #35	; 0x23
   81fb0:	4b16      	ldr	r3, [pc, #88]	; (8200c <Test+0x2e8>)
   81fb2:	4798      	blx	r3
			break;
   81fb4:	e7dd      	b.n	81f72 <Test+0x24e>
   81fb6:	bf00      	nop
   81fb8:	200012ec 	.word	0x200012ec
   81fbc:	00089a5c 	.word	0x00089a5c
   81fc0:	00084b49 	.word	0x00084b49
   81fc4:	00083f55 	.word	0x00083f55
   81fc8:	00089a6c 	.word	0x00089a6c
   81fcc:	00089a78 	.word	0x00089a78
   81fd0:	000813c1 	.word	0x000813c1
   81fd4:	00089a7c 	.word	0x00089a7c
   81fd8:	00089d08 	.word	0x00089d08
   81fdc:	00089a84 	.word	0x00089a84
   81fe0:	00089a90 	.word	0x00089a90
   81fe4:	00089a94 	.word	0x00089a94
   81fe8:	00089a9c 	.word	0x00089a9c
   81fec:	00089aa0 	.word	0x00089aa0
   81ff0:	00089aa8 	.word	0x00089aa8
   81ff4:	00089aac 	.word	0x00089aac
   81ff8:	00089abc 	.word	0x00089abc
   81ffc:	00089ac8 	.word	0x00089ac8
   82000:	00089ad8 	.word	0x00089ad8
   82004:	00089a48 	.word	0x00089a48
   82008:	00089a80 	.word	0x00089a80
   8200c:	000813dd 	.word	0x000813dd
   82010:	00081d25 	.word	0x00081d25
   82014:	000841e5 	.word	0x000841e5
   82018:	000813f7 	.word	0x000813f7
			gpio_set_pin_low(CMD_RELAIS_1);
   8201c:	2023      	movs	r0, #35	; 0x23
   8201e:	4b13      	ldr	r3, [pc, #76]	; (8206c <Test+0x348>)
   82020:	4798      	blx	r3
			gpio_set_pin_high(CMD_RELAIS_2);
   82022:	2024      	movs	r0, #36	; 0x24
   82024:	4b12      	ldr	r3, [pc, #72]	; (82070 <Test+0x34c>)
   82026:	4798      	blx	r3
			break;
   82028:	e7a3      	b.n	81f72 <Test+0x24e>
			gpio_set_pin_low(CMD_MOSFET);
   8202a:	2020      	movs	r0, #32
   8202c:	4c0f      	ldr	r4, [pc, #60]	; (8206c <Test+0x348>)
   8202e:	47a0      	blx	r4
			gpio_set_pin_low(CMD_MOT_SERRURE);
   82030:	2021      	movs	r0, #33	; 0x21
   82032:	47a0      	blx	r4
			gpio_set_pin_low(CMD_RELAIS);
   82034:	2022      	movs	r0, #34	; 0x22
   82036:	47a0      	blx	r4
			gpio_set_pin_low(CMD_RELAIS_1);
   82038:	2023      	movs	r0, #35	; 0x23
   8203a:	47a0      	blx	r4
			gpio_set_pin_low(CMD_RELAIS_2);
   8203c:	2024      	movs	r0, #36	; 0x24
   8203e:	47a0      	blx	r4
			if(*((uint16_t*)((uint8_t*)&phase+1)))
   82040:	b127      	cbz	r7, 8204c <Test+0x328>
				if(--(*((uint16_t*)((uint8_t*)&phase+1))))
   82042:	3f01      	subs	r7, #1
   82044:	b2bf      	uxth	r7, r7
   82046:	f8ad 700d 	strh.w	r7, [sp, #13]
   8204a:	b927      	cbnz	r7, 82056 <Test+0x332>
			Putstr("\r\nTest terminated...\r\n");
   8204c:	4909      	ldr	r1, [pc, #36]	; (82074 <Test+0x350>)
   8204e:	2067      	movs	r0, #103	; 0x67
   82050:	4b09      	ldr	r3, [pc, #36]	; (82078 <Test+0x354>)
   82052:	4798      	blx	r3
			return;
   82054:	e797      	b.n	81f86 <Test+0x262>
					PushTask(Test,TEST_NEW,phase>>8,0);
   82056:	2300      	movs	r3, #0
   82058:	9300      	str	r3, [sp, #0]
   8205a:	9b03      	ldr	r3, [sp, #12]
   8205c:	0a1b      	lsrs	r3, r3, #8
   8205e:	2264      	movs	r2, #100	; 0x64
   82060:	4906      	ldr	r1, [pc, #24]	; (8207c <Test+0x358>)
   82062:	2066      	movs	r0, #102	; 0x66
   82064:	4c06      	ldr	r4, [pc, #24]	; (82080 <Test+0x35c>)
   82066:	47a0      	blx	r4
   82068:	e7f0      	b.n	8204c <Test+0x328>
   8206a:	bf00      	nop
   8206c:	000813f7 	.word	0x000813f7
   82070:	000813dd 	.word	0x000813dd
   82074:	00089ae8 	.word	0x00089ae8
   82078:	00083f55 	.word	0x00083f55
   8207c:	00081d25 	.word	0x00081d25
   82080:	000841e5 	.word	0x000841e5

00082084 <stop>:
	}
	mstrtokRestore();
}

void stop(uint32_t sc, void*pParam)
{
   82084:	b510      	push	{r4, lr}
	char *pToken;
	switch(sc)
   82086:	f242 6316 	movw	r3, #9750	; 0x2616
   8208a:	4298      	cmp	r0, r3
   8208c:	d01e      	beq.n	820cc <stop+0x48>
//#else
		//gpio_set_pin_high(BUZZER_PWR);
//#endif
		break;
	default:
		pToken = mstrtok(NULL," \r\n");
   8208e:	491c      	ldr	r1, [pc, #112]	; (82100 <stop+0x7c>)
   82090:	2000      	movs	r0, #0
   82092:	4b1c      	ldr	r3, [pc, #112]	; (82104 <stop+0x80>)
   82094:	4798      	blx	r3
		if(pToken)
   82096:	4604      	mov	r4, r0
   82098:	b1a8      	cbz	r0, 820c6 <stop+0x42>
		{
			switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   8209a:	4b1b      	ldr	r3, [pc, #108]	; (82108 <stop+0x84>)
   8209c:	4798      	blx	r3
   8209e:	4601      	mov	r1, r0
   820a0:	4620      	mov	r0, r4
   820a2:	4b1a      	ldr	r3, [pc, #104]	; (8210c <stop+0x88>)
   820a4:	4798      	blx	r3
   820a6:	f242 6316 	movw	r3, #9750	; 0x2616
   820aa:	4298      	cmp	r0, r3
   820ac:	d020      	beq.n	820f0 <stop+0x6c>
   820ae:	d912      	bls.n	820d6 <stop+0x52>
   820b0:	f243 132b 	movw	r3, #12587	; 0x312b
   820b4:	4298      	cmp	r0, r3
   820b6:	d017      	beq.n	820e8 <stop+0x64>
   820b8:	f24c 6398 	movw	r3, #50840	; 0xc698
   820bc:	4298      	cmp	r0, r3
   820be:	d102      	bne.n	820c6 <stop+0x42>
			{
			case 0xC698:	//lcd
				Lcd(LCD_DEL);
   820c0:	2065      	movs	r0, #101	; 0x65
   820c2:	4b13      	ldr	r3, [pc, #76]	; (82110 <stop+0x8c>)
   820c4:	4798      	blx	r3
				break;
			default:
				break;
			}
		}
		mstrtokRestore();
   820c6:	4b13      	ldr	r3, [pc, #76]	; (82114 <stop+0x90>)
   820c8:	4798      	blx	r3
   820ca:	bd10      	pop	{r4, pc}
		Putstr("\r\nBuzzer off...\r\n");
   820cc:	4912      	ldr	r1, [pc, #72]	; (82118 <stop+0x94>)
   820ce:	2067      	movs	r0, #103	; 0x67
   820d0:	4b12      	ldr	r3, [pc, #72]	; (8211c <stop+0x98>)
   820d2:	4798      	blx	r3
		break;
   820d4:	bd10      	pop	{r4, pc}
			switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   820d6:	f240 6334 	movw	r3, #1588	; 0x634
   820da:	4298      	cmp	r0, r3
   820dc:	d1f3      	bne.n	820c6 <stop+0x42>
				LcdBacklight(false);
   820de:	2100      	movs	r1, #0
   820e0:	2066      	movs	r0, #102	; 0x66
   820e2:	4b0b      	ldr	r3, [pc, #44]	; (82110 <stop+0x8c>)
   820e4:	4798      	blx	r3
				break;
   820e6:	e7ee      	b.n	820c6 <stop+0x42>
				gpio_set_pin_high(BLUETOOTH_PWR);
   820e8:	2035      	movs	r0, #53	; 0x35
   820ea:	4b0d      	ldr	r3, [pc, #52]	; (82120 <stop+0x9c>)
   820ec:	4798      	blx	r3
				break;
   820ee:	e7ea      	b.n	820c6 <stop+0x42>
				Putstr("\r\nBuzzer off...\r\n");
   820f0:	4909      	ldr	r1, [pc, #36]	; (82118 <stop+0x94>)
   820f2:	2067      	movs	r0, #103	; 0x67
   820f4:	4b09      	ldr	r3, [pc, #36]	; (8211c <stop+0x98>)
   820f6:	4798      	blx	r3
				gpio_set_pin_low(BUZZER_PWR);
   820f8:	2030      	movs	r0, #48	; 0x30
   820fa:	4b0a      	ldr	r3, [pc, #40]	; (82124 <stop+0xa0>)
   820fc:	4798      	blx	r3
				break;
   820fe:	e7e2      	b.n	820c6 <stop+0x42>
   82100:	00089b8c 	.word	0x00089b8c
   82104:	0008445d 	.word	0x0008445d
   82108:	00084b95 	.word	0x00084b95
   8210c:	00082415 	.word	0x00082415
   82110:	000829cd 	.word	0x000829cd
   82114:	00084419 	.word	0x00084419
   82118:	00089b78 	.word	0x00089b78
   8211c:	00083f55 	.word	0x00083f55
   82120:	000813dd 	.word	0x000813dd
   82124:	000813f7 	.word	0x000813f7

00082128 <start>:
{
   82128:	b570      	push	{r4, r5, r6, lr}
   8212a:	b090      	sub	sp, #64	; 0x40
	pToken = mstrtok(NULL," \r\n");
   8212c:	4951      	ldr	r1, [pc, #324]	; (82274 <start+0x14c>)
   8212e:	2000      	movs	r0, #0
   82130:	4b51      	ldr	r3, [pc, #324]	; (82278 <start+0x150>)
   82132:	4798      	blx	r3
	if(pToken)
   82134:	2800      	cmp	r0, #0
   82136:	f000 8088 	beq.w	8224a <start+0x122>
   8213a:	4604      	mov	r4, r0
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   8213c:	4b4f      	ldr	r3, [pc, #316]	; (8227c <start+0x154>)
   8213e:	4798      	blx	r3
   82140:	4601      	mov	r1, r0
   82142:	4620      	mov	r0, r4
   82144:	4b4e      	ldr	r3, [pc, #312]	; (82280 <start+0x158>)
   82146:	4798      	blx	r3
   82148:	f243 132b 	movw	r3, #12587	; 0x312b
   8214c:	4298      	cmp	r0, r3
   8214e:	f000 8087 	beq.w	82260 <start+0x138>
   82152:	d850      	bhi.n	821f6 <start+0xce>
   82154:	f240 6334 	movw	r3, #1588	; 0x634
   82158:	4298      	cmp	r0, r3
   8215a:	d07a      	beq.n	82252 <start+0x12a>
   8215c:	f242 6316 	movw	r3, #9750	; 0x2616
   82160:	4298      	cmp	r0, r3
   82162:	d172      	bne.n	8224a <start+0x122>
			mstrtokRestore();
   82164:	4b47      	ldr	r3, [pc, #284]	; (82284 <start+0x15c>)
   82166:	4798      	blx	r3
			pToken = mstrtok(NULL," \r\n");
   82168:	4942      	ldr	r1, [pc, #264]	; (82274 <start+0x14c>)
   8216a:	2000      	movs	r0, #0
   8216c:	4b42      	ldr	r3, [pc, #264]	; (82278 <start+0x150>)
   8216e:	4798      	blx	r3
			pParam=atoi((char*)pToken);
   82170:	4b45      	ldr	r3, [pc, #276]	; (82288 <start+0x160>)
   82172:	4798      	blx	r3
			if(pParam)
   82174:	4606      	mov	r6, r0
   82176:	2800      	cmp	r0, #0
   82178:	d067      	beq.n	8224a <start+0x122>
				Putstr("\r\nBuzzer on for ");
   8217a:	4944      	ldr	r1, [pc, #272]	; (8228c <start+0x164>)
   8217c:	2067      	movs	r0, #103	; 0x67
   8217e:	4c44      	ldr	r4, [pc, #272]	; (82290 <start+0x168>)
   82180:	47a0      	blx	r4
				sprintf(buf,"%d ms...\r\n",(int)pParam);
   82182:	4d44      	ldr	r5, [pc, #272]	; (82294 <start+0x16c>)
   82184:	4632      	mov	r2, r6
   82186:	4944      	ldr	r1, [pc, #272]	; (82298 <start+0x170>)
   82188:	4628      	mov	r0, r5
   8218a:	4b44      	ldr	r3, [pc, #272]	; (8229c <start+0x174>)
   8218c:	4798      	blx	r3
				Putstr(buf);
   8218e:	4629      	mov	r1, r5
   82190:	2067      	movs	r0, #103	; 0x67
   82192:	47a0      	blx	r4
				gpio_configure_pin(BUZZER_PWR,BUZZER_FLAGS);
   82194:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82198:	2030      	movs	r0, #48	; 0x30
   8219a:	4b41      	ldr	r3, [pc, #260]	; (822a0 <start+0x178>)
   8219c:	4798      	blx	r3
					const pwm_clock_t clockSetting ={
   8219e:	4b41      	ldr	r3, [pc, #260]	; (822a4 <start+0x17c>)
   821a0:	ad03      	add	r5, sp, #12
   821a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   821a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
					pmc_enable_periph_clk(ID_PWM);
   821aa:	2019      	movs	r0, #25
   821ac:	4b3e      	ldr	r3, [pc, #248]	; (822a8 <start+0x180>)
   821ae:	4798      	blx	r3
					pwm_channel_disable(PWM,PWM_CHANNEL_3);
   821b0:	4c3e      	ldr	r4, [pc, #248]	; (822ac <start+0x184>)
   821b2:	2103      	movs	r1, #3
   821b4:	4620      	mov	r0, r4
   821b6:	4b3e      	ldr	r3, [pc, #248]	; (822b0 <start+0x188>)
   821b8:	4798      	blx	r3
					pwm_init(PWM,(pwm_clock_t*)&clockSetting);
   821ba:	4629      	mov	r1, r5
   821bc:	4620      	mov	r0, r4
   821be:	4b3d      	ldr	r3, [pc, #244]	; (822b4 <start+0x18c>)
   821c0:	4798      	blx	r3
					pwmChannelInstance.ul_prescaler=PWM_CMR_CPRE_CLKB;
   821c2:	230c      	movs	r3, #12
   821c4:	9307      	str	r3, [sp, #28]
					pwmChannelInstance.ul_period=100;
   821c6:	2364      	movs	r3, #100	; 0x64
   821c8:	930a      	str	r3, [sp, #40]	; 0x28
					pwmChannelInstance.ul_duty=50;
   821ca:	2332      	movs	r3, #50	; 0x32
   821cc:	9309      	str	r3, [sp, #36]	; 0x24
					pwmChannelInstance.channel=PWM_CHANNEL_3;
   821ce:	2503      	movs	r5, #3
   821d0:	a910      	add	r1, sp, #64	; 0x40
   821d2:	f841 5d28 	str.w	r5, [r1, #-40]!
					pwm_channel_init(PWM,&pwmChannelInstance);
   821d6:	4620      	mov	r0, r4
   821d8:	4b37      	ldr	r3, [pc, #220]	; (822b8 <start+0x190>)
   821da:	4798      	blx	r3
					pwm_channel_enable(PWM,PWM_CHANNEL_3);
   821dc:	4629      	mov	r1, r5
   821de:	4620      	mov	r0, r4
   821e0:	4b36      	ldr	r3, [pc, #216]	; (822bc <start+0x194>)
   821e2:	4798      	blx	r3
				PushTask(stop,0x2616,0,(uint32_t)pParam);
   821e4:	9600      	str	r6, [sp, #0]
   821e6:	2300      	movs	r3, #0
   821e8:	f242 6216 	movw	r2, #9750	; 0x2616
   821ec:	4934      	ldr	r1, [pc, #208]	; (822c0 <start+0x198>)
   821ee:	2066      	movs	r0, #102	; 0x66
   821f0:	4c34      	ldr	r4, [pc, #208]	; (822c4 <start+0x19c>)
   821f2:	47a0      	blx	r4
   821f4:	e029      	b.n	8224a <start+0x122>
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   821f6:	f24c 6398 	movw	r3, #50840	; 0xc698
   821fa:	4298      	cmp	r0, r3
   821fc:	d020      	beq.n	82240 <start+0x118>
   821fe:	f64d 432e 	movw	r3, #56366	; 0xdc2e
   82202:	4298      	cmp	r0, r3
   82204:	d121      	bne.n	8224a <start+0x122>
			mstrtokRestore();
   82206:	4b1f      	ldr	r3, [pc, #124]	; (82284 <start+0x15c>)
   82208:	4798      	blx	r3
			pToken = mstrtok(NULL," \r\n");
   8220a:	491a      	ldr	r1, [pc, #104]	; (82274 <start+0x14c>)
   8220c:	2000      	movs	r0, #0
   8220e:	4b1a      	ldr	r3, [pc, #104]	; (82278 <start+0x150>)
   82210:	4798      	blx	r3
			if(pToken)
   82212:	b318      	cbz	r0, 8225c <start+0x134>
				 sc=atoi((char*)pToken);
   82214:	4b1c      	ldr	r3, [pc, #112]	; (82288 <start+0x160>)
   82216:	4798      	blx	r3
   82218:	4604      	mov	r4, r0
				 sprintf(buf,"\r\nNbTest: %d\r\n",(int)sc);
   8221a:	4d1e      	ldr	r5, [pc, #120]	; (82294 <start+0x16c>)
   8221c:	4602      	mov	r2, r0
   8221e:	492a      	ldr	r1, [pc, #168]	; (822c8 <start+0x1a0>)
   82220:	4628      	mov	r0, r5
   82222:	4b1e      	ldr	r3, [pc, #120]	; (8229c <start+0x174>)
   82224:	4798      	blx	r3
				 Putstr(buf);
   82226:	4629      	mov	r1, r5
   82228:	2067      	movs	r0, #103	; 0x67
   8222a:	4b19      	ldr	r3, [pc, #100]	; (82290 <start+0x168>)
   8222c:	4798      	blx	r3
			PushTask(Test,TEST_NEW,sc,0);
   8222e:	2300      	movs	r3, #0
   82230:	9300      	str	r3, [sp, #0]
   82232:	4623      	mov	r3, r4
   82234:	2264      	movs	r2, #100	; 0x64
   82236:	4925      	ldr	r1, [pc, #148]	; (822cc <start+0x1a4>)
   82238:	2066      	movs	r0, #102	; 0x66
   8223a:	4c22      	ldr	r4, [pc, #136]	; (822c4 <start+0x19c>)
   8223c:	47a0      	blx	r4
			break;
   8223e:	e004      	b.n	8224a <start+0x122>
			Lcd(LCD_DEL);
   82240:	2065      	movs	r0, #101	; 0x65
   82242:	4c23      	ldr	r4, [pc, #140]	; (822d0 <start+0x1a8>)
   82244:	47a0      	blx	r4
			Lcd(LCD_NEW);
   82246:	2064      	movs	r0, #100	; 0x64
   82248:	47a0      	blx	r4
	mstrtokRestore();
   8224a:	4b0e      	ldr	r3, [pc, #56]	; (82284 <start+0x15c>)
   8224c:	4798      	blx	r3
}
   8224e:	b010      	add	sp, #64	; 0x40
   82250:	bd70      	pop	{r4, r5, r6, pc}
			LcdBacklight(true);
   82252:	2101      	movs	r1, #1
   82254:	2066      	movs	r0, #102	; 0x66
   82256:	4b1e      	ldr	r3, [pc, #120]	; (822d0 <start+0x1a8>)
   82258:	4798      	blx	r3
			break;
   8225a:	e7f6      	b.n	8224a <start+0x122>
				sc=1;
   8225c:	2401      	movs	r4, #1
   8225e:	e7e6      	b.n	8222e <start+0x106>
			gpio_configure_pin(BLUETOOTH_PWR,BLUETOOTH_FLAGS);
   82260:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82264:	2035      	movs	r0, #53	; 0x35
   82266:	4b0e      	ldr	r3, [pc, #56]	; (822a0 <start+0x178>)
   82268:	4798      	blx	r3
			gpio_set_pin_low(BLUETOOTH_PWR);
   8226a:	2035      	movs	r0, #53	; 0x35
   8226c:	4b19      	ldr	r3, [pc, #100]	; (822d4 <start+0x1ac>)
   8226e:	4798      	blx	r3
			break;
   82270:	e7eb      	b.n	8224a <start+0x122>
   82272:	bf00      	nop
   82274:	00089b8c 	.word	0x00089b8c
   82278:	0008445d 	.word	0x0008445d
   8227c:	00084b95 	.word	0x00084b95
   82280:	00082415 	.word	0x00082415
   82284:	00084419 	.word	0x00084419
   82288:	00084a55 	.word	0x00084a55
   8228c:	00089b58 	.word	0x00089b58
   82290:	00083f55 	.word	0x00083f55
   82294:	200012ec 	.word	0x200012ec
   82298:	00089b6c 	.word	0x00089b6c
   8229c:	00084b49 	.word	0x00084b49
   822a0:	00081431 	.word	0x00081431
   822a4:	00089a3c 	.word	0x00089a3c
   822a8:	00081631 	.word	0x00081631
   822ac:	4008c000 	.word	0x4008c000
   822b0:	00081859 	.word	0x00081859
   822b4:	00081725 	.word	0x00081725
   822b8:	00081769 	.word	0x00081769
   822bc:	0008184f 	.word	0x0008184f
   822c0:	00082085 	.word	0x00082085
   822c4:	000841e5 	.word	0x000841e5
   822c8:	00089b48 	.word	0x00089b48
   822cc:	00081d25 	.word	0x00081d25
   822d0:	000829cd 	.word	0x000829cd
   822d4:	000813f7 	.word	0x000813f7

000822d8 <send>:
	};
}t_RTC_TIMR;


void send(uint32_t sc, void*pParam)
{
   822d8:	b510      	push	{r4, lr}
   822da:	b082      	sub	sp, #8
	char *pToken;
	pToken = mstrtok(NULL," \r\n");
   822dc:	4943      	ldr	r1, [pc, #268]	; (823ec <send+0x114>)
   822de:	2000      	movs	r0, #0
   822e0:	4b43      	ldr	r3, [pc, #268]	; (823f0 <send+0x118>)
   822e2:	4798      	blx	r3
	if(pToken)
   822e4:	b150      	cbz	r0, 822fc <send+0x24>
   822e6:	4604      	mov	r4, r0
	{
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   822e8:	4b42      	ldr	r3, [pc, #264]	; (823f4 <send+0x11c>)
   822ea:	4798      	blx	r3
   822ec:	4601      	mov	r1, r0
   822ee:	4620      	mov	r0, r4
   822f0:	4b41      	ldr	r3, [pc, #260]	; (823f8 <send+0x120>)
   822f2:	4798      	blx	r3
   822f4:	f24b 3340 	movw	r3, #45888	; 0xb340
   822f8:	4298      	cmp	r0, r3
   822fa:	d003      	beq.n	82304 <send+0x2c>
			break;
		default:
			break;
		}
	}
	mstrtokRestore();
   822fc:	4b3f      	ldr	r3, [pc, #252]	; (823fc <send+0x124>)
   822fe:	4798      	blx	r3
}
   82300:	b002      	add	sp, #8
   82302:	bd10      	pop	{r4, pc}
			Putstr("\r\n\tBroadcast synchronization token\r\n");
   82304:	493e      	ldr	r1, [pc, #248]	; (82400 <send+0x128>)
   82306:	2067      	movs	r0, #103	; 0x67
   82308:	4b3e      	ldr	r3, [pc, #248]	; (82404 <send+0x12c>)
   8230a:	4798      	blx	r3
			registerValue[0]=RTC->RTC_TIMR;
   8230c:	4b3e      	ldr	r3, [pc, #248]	; (82408 <send+0x130>)
   8230e:	689b      	ldr	r3, [r3, #8]
   82310:	4a3e      	ldr	r2, [pc, #248]	; (8240c <send+0x134>)
   82312:	6013      	str	r3, [r2, #0]
			if((((t_RTC_TIMR*)&registerValue[0])->SEC_QL+=2)>9)
   82314:	3302      	adds	r3, #2
   82316:	f003 030f 	and.w	r3, r3, #15
   8231a:	2b09      	cmp	r3, #9
   8231c:	dc10      	bgt.n	82340 <send+0x68>
   8231e:	7811      	ldrb	r1, [r2, #0]
   82320:	f363 0103 	bfi	r1, r3, #0, #4
   82324:	7011      	strb	r1, [r2, #0]
			registerValue[1]=RTC->RTC_CALR;
   82326:	4b38      	ldr	r3, [pc, #224]	; (82408 <send+0x130>)
   82328:	68da      	ldr	r2, [r3, #12]
   8232a:	4b38      	ldr	r3, [pc, #224]	; (8240c <send+0x134>)
   8232c:	605a      	str	r2, [r3, #4]
			WriteMultipleRegisters(MODBUS_BROADCAST_ADDRESS,0x1000,4,registerValue); 
   8232e:	9300      	str	r3, [sp, #0]
   82330:	2304      	movs	r3, #4
   82332:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82336:	217f      	movs	r1, #127	; 0x7f
   82338:	2066      	movs	r0, #102	; 0x66
   8233a:	4c35      	ldr	r4, [pc, #212]	; (82410 <send+0x138>)
   8233c:	47a0      	blx	r4
			break;
   8233e:	e7dd      	b.n	822fc <send+0x24>
				((t_RTC_TIMR*)&registerValue[0])->SEC_QL=0;
   82340:	4a32      	ldr	r2, [pc, #200]	; (8240c <send+0x134>)
   82342:	7813      	ldrb	r3, [r2, #0]
   82344:	f36f 0303 	bfc	r3, #0, #4
   82348:	7013      	strb	r3, [r2, #0]
				if((((t_RTC_TIMR*)&registerValue[0])->SEC_QH++)>5)
   8234a:	f3c3 1302 	ubfx	r3, r3, #4, #3
   8234e:	2b05      	cmp	r3, #5
   82350:	dc05      	bgt.n	8235e <send+0x86>
   82352:	3301      	adds	r3, #1
   82354:	7811      	ldrb	r1, [r2, #0]
   82356:	f363 1106 	bfi	r1, r3, #4, #3
   8235a:	7011      	strb	r1, [r2, #0]
   8235c:	e7e3      	b.n	82326 <send+0x4e>
					((t_RTC_TIMR*)&registerValue[0])->SEC_QH=0;
   8235e:	4b2b      	ldr	r3, [pc, #172]	; (8240c <send+0x134>)
   82360:	781a      	ldrb	r2, [r3, #0]
   82362:	f36f 1206 	bfc	r2, #4, #3
   82366:	701a      	strb	r2, [r3, #0]
					if((((t_RTC_TIMR*)&registerValue[0])->MIN_QL++)>9)
   82368:	785b      	ldrb	r3, [r3, #1]
   8236a:	f003 030f 	and.w	r3, r3, #15
   8236e:	2b09      	cmp	r3, #9
   82370:	dc06      	bgt.n	82380 <send+0xa8>
   82372:	4a26      	ldr	r2, [pc, #152]	; (8240c <send+0x134>)
   82374:	3301      	adds	r3, #1
   82376:	7851      	ldrb	r1, [r2, #1]
   82378:	f363 0103 	bfi	r1, r3, #0, #4
   8237c:	7051      	strb	r1, [r2, #1]
   8237e:	e7d2      	b.n	82326 <send+0x4e>
						((t_RTC_TIMR*)&registerValue[0])->MIN_QL=0;
   82380:	4a22      	ldr	r2, [pc, #136]	; (8240c <send+0x134>)
   82382:	7853      	ldrb	r3, [r2, #1]
   82384:	f36f 0303 	bfc	r3, #0, #4
   82388:	7053      	strb	r3, [r2, #1]
						if((((t_RTC_TIMR*)&registerValue[0])->MIN_QH++)>5)
   8238a:	f3c3 1302 	ubfx	r3, r3, #4, #3
   8238e:	2b05      	cmp	r3, #5
   82390:	dc05      	bgt.n	8239e <send+0xc6>
   82392:	3301      	adds	r3, #1
   82394:	7851      	ldrb	r1, [r2, #1]
   82396:	f363 1106 	bfi	r1, r3, #4, #3
   8239a:	7051      	strb	r1, [r2, #1]
   8239c:	e7c3      	b.n	82326 <send+0x4e>
							((t_RTC_TIMR*)&registerValue[0])->MIN_QH=0;
   8239e:	4b1b      	ldr	r3, [pc, #108]	; (8240c <send+0x134>)
   823a0:	785a      	ldrb	r2, [r3, #1]
   823a2:	f36f 1206 	bfc	r2, #4, #3
   823a6:	705a      	strb	r2, [r3, #1]
							if((((t_RTC_TIMR*)&registerValue[0])->HOUR_QL++)>9)
   823a8:	789b      	ldrb	r3, [r3, #2]
   823aa:	f003 030f 	and.w	r3, r3, #15
   823ae:	2b09      	cmp	r3, #9
   823b0:	dc06      	bgt.n	823c0 <send+0xe8>
   823b2:	4a16      	ldr	r2, [pc, #88]	; (8240c <send+0x134>)
   823b4:	3301      	adds	r3, #1
   823b6:	7891      	ldrb	r1, [r2, #2]
   823b8:	f363 0103 	bfi	r1, r3, #0, #4
   823bc:	7091      	strb	r1, [r2, #2]
   823be:	e7b2      	b.n	82326 <send+0x4e>
								((t_RTC_TIMR*)&registerValue[0])->HOUR_QL=0;
   823c0:	4a12      	ldr	r2, [pc, #72]	; (8240c <send+0x134>)
   823c2:	7893      	ldrb	r3, [r2, #2]
   823c4:	f36f 0303 	bfc	r3, #0, #4
   823c8:	7093      	strb	r3, [r2, #2]
								if((((t_RTC_TIMR*)&registerValue[0])->HOUR_QH++)>2)
   823ca:	f3c3 1301 	ubfx	r3, r3, #4, #2
   823ce:	2b02      	cmp	r3, #2
   823d0:	dc05      	bgt.n	823de <send+0x106>
   823d2:	3301      	adds	r3, #1
   823d4:	7891      	ldrb	r1, [r2, #2]
   823d6:	f363 1105 	bfi	r1, r3, #4, #2
   823da:	7091      	strb	r1, [r2, #2]
   823dc:	e7a3      	b.n	82326 <send+0x4e>
									((t_RTC_TIMR*)&registerValue[0])->HOUR_QH=0;
   823de:	4b0b      	ldr	r3, [pc, #44]	; (8240c <send+0x134>)
   823e0:	789a      	ldrb	r2, [r3, #2]
   823e2:	f36f 1205 	bfc	r2, #4, #2
   823e6:	709a      	strb	r2, [r3, #2]
   823e8:	e79d      	b.n	82326 <send+0x4e>
   823ea:	bf00      	nop
   823ec:	00089b8c 	.word	0x00089b8c
   823f0:	0008445d 	.word	0x0008445d
   823f4:	00084b95 	.word	0x00084b95
   823f8:	00082415 	.word	0x00082415
   823fc:	00084419 	.word	0x00084419
   82400:	00089b20 	.word	0x00089b20
   82404:	00083f55 	.word	0x00083f55
   82408:	400e1260 	.word	0x400e1260
   8240c:	20001554 	.word	0x20001554
   82410:	00080715 	.word	0x00080715

00082414 <CRC16MODBUSFRAME>:
   82414:	b189      	cbz	r1, 8243a <CRC16MODBUSFRAME+0x26>
   82416:	b410      	push	{r4}
   82418:	1841      	adds	r1, r0, r1
   8241a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8241e:	4c09      	ldr	r4, [pc, #36]	; (82444 <CRC16MODBUSFRAME+0x30>)
   82420:	f810 3b01 	ldrb.w	r3, [r0], #1
   82424:	4053      	eors	r3, r2
   82426:	b2db      	uxtb	r3, r3
   82428:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   8242c:	ea83 2212 	eor.w	r2, r3, r2, lsr #8
   82430:	4281      	cmp	r1, r0
   82432:	d1f5      	bne.n	82420 <CRC16MODBUSFRAME+0xc>
   82434:	4610      	mov	r0, r2
   82436:	bc10      	pop	{r4}
   82438:	4770      	bx	lr
   8243a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8243e:	4610      	mov	r0, r2
   82440:	4770      	bx	lr
   82442:	bf00      	nop
   82444:	2000012c 	.word	0x2000012c

00082448 <CRC16MODBUSbyte>:
   82448:	4048      	eors	r0, r1
   8244a:	b2c0      	uxtb	r0, r0
   8244c:	4b02      	ldr	r3, [pc, #8]	; (82458 <CRC16MODBUSbyte+0x10>)
   8244e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   82452:	ea80 2011 	eor.w	r0, r0, r1, lsr #8
   82456:	4770      	bx	lr
   82458:	2000012c 	.word	0x2000012c

0008245c <CRC16MODBUSword>:
   8245c:	4a07      	ldr	r2, [pc, #28]	; (8247c <CRC16MODBUSword+0x20>)
   8245e:	ea80 0301 	eor.w	r3, r0, r1
   82462:	b2db      	uxtb	r3, r3
   82464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   82468:	ea83 2111 	eor.w	r1, r3, r1, lsr #8
   8246c:	ea81 2310 	eor.w	r3, r1, r0, lsr #8
   82470:	b2db      	uxtb	r3, r3
   82472:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   82476:	ea80 2011 	eor.w	r0, r0, r1, lsr #8
   8247a:	4770      	bx	lr
   8247c:	2000012c 	.word	0x2000012c

00082480 <Error>:



extern char buf[];
void Error(uint32_t sc, ...)
{
   82480:	b40f      	push	{r0, r1, r2, r3}
   82482:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i,k;
#define er sc
#define exEr	pa1
	sprintf(buf, "\r\n\t*****ERROR:%d\tSC:%d*****\r\n", (int)er, (int)exEr);
   82486:	4c6e      	ldr	r4, [pc, #440]	; (82640 <Error+0x1c0>)
   82488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8248a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8248c:	496d      	ldr	r1, [pc, #436]	; (82644 <Error+0x1c4>)
   8248e:	4620      	mov	r0, r4
   82490:	4d6d      	ldr	r5, [pc, #436]	; (82648 <Error+0x1c8>)
   82492:	47a8      	blx	r5
	Putstr(buf);
   82494:	4621      	mov	r1, r4
   82496:	2067      	movs	r0, #103	; 0x67
   82498:	4b6c      	ldr	r3, [pc, #432]	; (8264c <Error+0x1cc>)
   8249a:	4798      	blx	r3
	delay_ms(1000);
   8249c:	486c      	ldr	r0, [pc, #432]	; (82650 <Error+0x1d0>)
   8249e:	4b6d      	ldr	r3, [pc, #436]	; (82654 <Error+0x1d4>)
   824a0:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   824a2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   824a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   824a8:	2200      	movs	r2, #0
   824aa:	4b6b      	ldr	r3, [pc, #428]	; (82658 <Error+0x1d8>)
   824ac:	701a      	strb	r2, [r3, #0]
	gpio_configure_pin(ERROR_LED, ERROR_LED_FLAGS);
   824ae:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   824b2:	2033      	movs	r0, #51	; 0x33
   824b4:	4b69      	ldr	r3, [pc, #420]	; (8265c <Error+0x1dc>)
   824b6:	4798      	blx	r3
   824b8:	f04f 0805 	mov.w	r8, #5
//#if HEART_LED_ACTIVE_LEVEL==1	
	
	for(k=0;k<5;k++)
	{
		gpio_set_pin_high(ERROR_LED);
		delay_ms(3000);
   824bc:	4c65      	ldr	r4, [pc, #404]	; (82654 <Error+0x1d4>)
			delay_ms(1500);
			gpio_set_pin_low(ERROR_LED);
		}
		else
		{
			for(i=0;i<(er/10)*2;i++)
   824be:	4f68      	ldr	r7, [pc, #416]	; (82660 <Error+0x1e0>)
   824c0:	e031      	b.n	82526 <Error+0xa6>
			gpio_set_pin_high(ERROR_LED);
   824c2:	2033      	movs	r0, #51	; 0x33
   824c4:	4b67      	ldr	r3, [pc, #412]	; (82664 <Error+0x1e4>)
   824c6:	4798      	blx	r3
			delay_ms(1500);
   824c8:	4867      	ldr	r0, [pc, #412]	; (82668 <Error+0x1e8>)
   824ca:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   824cc:	2033      	movs	r0, #51	; 0x33
   824ce:	4b67      	ldr	r3, [pc, #412]	; (8266c <Error+0x1ec>)
   824d0:	4798      	blx	r3
   824d2:	e048      	b.n	82566 <Error+0xe6>
		}
		delay_ms(800);

		if((er%10)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   824d4:	2033      	movs	r0, #51	; 0x33
   824d6:	4b63      	ldr	r3, [pc, #396]	; (82664 <Error+0x1e4>)
   824d8:	4798      	blx	r3
			delay_ms(1500);
   824da:	4863      	ldr	r0, [pc, #396]	; (82668 <Error+0x1e8>)
   824dc:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   824de:	2033      	movs	r0, #51	; 0x33
   824e0:	4b62      	ldr	r3, [pc, #392]	; (8266c <Error+0x1ec>)
   824e2:	4798      	blx	r3
   824e4:	e057      	b.n	82596 <Error+0x116>
		delay_ms(1000);
#undef er
#define _param	pa1
		if((_param/100)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   824e6:	2033      	movs	r0, #51	; 0x33
   824e8:	4b5e      	ldr	r3, [pc, #376]	; (82664 <Error+0x1e4>)
   824ea:	4798      	blx	r3
			delay_ms(1500);
   824ec:	485e      	ldr	r0, [pc, #376]	; (82668 <Error+0x1e8>)
   824ee:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   824f0:	2033      	movs	r0, #51	; 0x33
   824f2:	4b5e      	ldr	r3, [pc, #376]	; (8266c <Error+0x1ec>)
   824f4:	4798      	blx	r3
   824f6:	e067      	b.n	825c8 <Error+0x148>
		}
		delay_ms(800);

		if(((_param/10)%10)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   824f8:	2033      	movs	r0, #51	; 0x33
   824fa:	4b5a      	ldr	r3, [pc, #360]	; (82664 <Error+0x1e4>)
   824fc:	4798      	blx	r3
			delay_ms(1500);
   824fe:	485a      	ldr	r0, [pc, #360]	; (82668 <Error+0x1e8>)
   82500:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   82502:	2033      	movs	r0, #51	; 0x33
   82504:	4b59      	ldr	r3, [pc, #356]	; (8266c <Error+0x1ec>)
   82506:	4798      	blx	r3
   82508:	e079      	b.n	825fe <Error+0x17e>
		delay_ms(800);


		if((_param%10)==0)
		{
			gpio_set_pin_high(ERROR_LED);
   8250a:	2033      	movs	r0, #51	; 0x33
   8250c:	4b55      	ldr	r3, [pc, #340]	; (82664 <Error+0x1e4>)
   8250e:	4798      	blx	r3
			delay_ms(1500);
   82510:	4855      	ldr	r0, [pc, #340]	; (82668 <Error+0x1e8>)
   82512:	47a0      	blx	r4
			gpio_set_pin_low(ERROR_LED);
   82514:	2033      	movs	r0, #51	; 0x33
   82516:	4b55      	ldr	r3, [pc, #340]	; (8266c <Error+0x1ec>)
   82518:	4798      	blx	r3
				gpio_toggle_pin(ERROR_LED);
				delay_ms(200);
			}
		}
		
		delay_ms(1000);
   8251a:	484d      	ldr	r0, [pc, #308]	; (82650 <Error+0x1d0>)
   8251c:	47a0      	blx	r4
	for(k=0;k<5;k++)
   8251e:	f1b8 0801 	subs.w	r8, r8, #1
   82522:	f000 8086 	beq.w	82632 <Error+0x1b2>
		gpio_set_pin_high(ERROR_LED);
   82526:	2033      	movs	r0, #51	; 0x33
   82528:	4b4e      	ldr	r3, [pc, #312]	; (82664 <Error+0x1e4>)
   8252a:	4798      	blx	r3
		delay_ms(3000);
   8252c:	4850      	ldr	r0, [pc, #320]	; (82670 <Error+0x1f0>)
   8252e:	47a0      	blx	r4
		gpio_set_pin_low(ERROR_LED);
   82530:	2033      	movs	r0, #51	; 0x33
   82532:	4b4e      	ldr	r3, [pc, #312]	; (8266c <Error+0x1ec>)
   82534:	4798      	blx	r3
		delay_ms(800);
   82536:	484f      	ldr	r0, [pc, #316]	; (82674 <Error+0x1f4>)
   82538:	47a0      	blx	r4
		if((er/10)==0)
   8253a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8253e:	f1b9 0f09 	cmp.w	r9, #9
   82542:	d9be      	bls.n	824c2 <Error+0x42>
			for(i=0;i<(er/10)*2;i++)
   82544:	fba7 2309 	umull	r2, r3, r7, r9
   82548:	08db      	lsrs	r3, r3, #3
   8254a:	005e      	lsls	r6, r3, #1
   8254c:	b15b      	cbz	r3, 82566 <Error+0xe6>
   8254e:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   82550:	f8df b130 	ldr.w	fp, [pc, #304]	; 82684 <Error+0x204>
				delay_ms(200);
   82554:	f8df a130 	ldr.w	sl, [pc, #304]	; 82688 <Error+0x208>
				gpio_toggle_pin(ERROR_LED);
   82558:	2033      	movs	r0, #51	; 0x33
   8255a:	47d8      	blx	fp
				delay_ms(200);
   8255c:	4650      	mov	r0, sl
   8255e:	47a0      	blx	r4
			for(i=0;i<(er/10)*2;i++)
   82560:	3501      	adds	r5, #1
   82562:	42b5      	cmp	r5, r6
   82564:	d1f8      	bne.n	82558 <Error+0xd8>
		delay_ms(800);
   82566:	4843      	ldr	r0, [pc, #268]	; (82674 <Error+0x1f4>)
   82568:	47a0      	blx	r4
		if((er%10)==0)
   8256a:	fba7 3609 	umull	r3, r6, r7, r9
   8256e:	08f6      	lsrs	r6, r6, #3
   82570:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   82574:	ebb9 0646 	subs.w	r6, r9, r6, lsl #1
   82578:	d0ac      	beq.n	824d4 <Error+0x54>
			for(i=0;i<(er%10)*2;i++)
   8257a:	0076      	lsls	r6, r6, #1
   8257c:	d00b      	beq.n	82596 <Error+0x116>
   8257e:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   82580:	f8df a100 	ldr.w	sl, [pc, #256]	; 82684 <Error+0x204>
				delay_ms(200);
   82584:	f8df 9100 	ldr.w	r9, [pc, #256]	; 82688 <Error+0x208>
				gpio_toggle_pin(ERROR_LED);
   82588:	2033      	movs	r0, #51	; 0x33
   8258a:	47d0      	blx	sl
				delay_ms(200);
   8258c:	4648      	mov	r0, r9
   8258e:	47a0      	blx	r4
			for(i=0;i<(er%10)*2;i++)
   82590:	3501      	adds	r5, #1
   82592:	42b5      	cmp	r5, r6
   82594:	d1f8      	bne.n	82588 <Error+0x108>
		delay_ms(1000);
   82596:	482e      	ldr	r0, [pc, #184]	; (82650 <Error+0x1d0>)
   82598:	47a0      	blx	r4
		if((_param/100)==0)
   8259a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   8259e:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
   825a2:	d9a0      	bls.n	824e6 <Error+0x66>
			for(i=0;i<(_param/100)*2;i++)
   825a4:	4b34      	ldr	r3, [pc, #208]	; (82678 <Error+0x1f8>)
   825a6:	fba3 2309 	umull	r2, r3, r3, r9
   825aa:	095b      	lsrs	r3, r3, #5
   825ac:	005e      	lsls	r6, r3, #1
   825ae:	b15b      	cbz	r3, 825c8 <Error+0x148>
   825b0:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   825b2:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 82684 <Error+0x204>
				delay_ms(200);
   825b6:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 82688 <Error+0x208>
				gpio_toggle_pin(ERROR_LED);
   825ba:	2033      	movs	r0, #51	; 0x33
   825bc:	47d8      	blx	fp
				delay_ms(200);
   825be:	4650      	mov	r0, sl
   825c0:	47a0      	blx	r4
			for(i=0;i<(_param/100)*2;i++)
   825c2:	3501      	adds	r5, #1
   825c4:	42b5      	cmp	r5, r6
   825c6:	d1f8      	bne.n	825ba <Error+0x13a>
		delay_ms(800);
   825c8:	482a      	ldr	r0, [pc, #168]	; (82674 <Error+0x1f4>)
   825ca:	47a0      	blx	r4
		if(((_param/10)%10)==0)
   825cc:	fba7 2309 	umull	r2, r3, r7, r9
   825d0:	08db      	lsrs	r3, r3, #3
   825d2:	fba7 2603 	umull	r2, r6, r7, r3
   825d6:	08f6      	lsrs	r6, r6, #3
   825d8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   825dc:	ebb3 0646 	subs.w	r6, r3, r6, lsl #1
   825e0:	d08a      	beq.n	824f8 <Error+0x78>
			for(i=0;i<((_param/10)%10)*2;i++)
   825e2:	0076      	lsls	r6, r6, #1
   825e4:	d00b      	beq.n	825fe <Error+0x17e>
   825e6:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   825e8:	f8df b098 	ldr.w	fp, [pc, #152]	; 82684 <Error+0x204>
				delay_ms(200);
   825ec:	f8df a098 	ldr.w	sl, [pc, #152]	; 82688 <Error+0x208>
				gpio_toggle_pin(ERROR_LED);
   825f0:	2033      	movs	r0, #51	; 0x33
   825f2:	47d8      	blx	fp
				delay_ms(200);
   825f4:	4650      	mov	r0, sl
   825f6:	47a0      	blx	r4
			for(i=0;i<((_param/10)%10)*2;i++)
   825f8:	3501      	adds	r5, #1
   825fa:	42b5      	cmp	r5, r6
   825fc:	d1f8      	bne.n	825f0 <Error+0x170>
		delay_ms(800);
   825fe:	481d      	ldr	r0, [pc, #116]	; (82674 <Error+0x1f4>)
   82600:	47a0      	blx	r4
		if((_param%10)==0)
   82602:	fba7 3609 	umull	r3, r6, r7, r9
   82606:	08f6      	lsrs	r6, r6, #3
   82608:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   8260c:	ebb9 0646 	subs.w	r6, r9, r6, lsl #1
   82610:	f43f af7b 	beq.w	8250a <Error+0x8a>
			for(i=0;i<(_param%10)*2;i++)
   82614:	0076      	lsls	r6, r6, #1
   82616:	d080      	beq.n	8251a <Error+0x9a>
   82618:	2500      	movs	r5, #0
				gpio_toggle_pin(ERROR_LED);
   8261a:	f8df a068 	ldr.w	sl, [pc, #104]	; 82684 <Error+0x204>
				delay_ms(200);
   8261e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 82688 <Error+0x208>
				gpio_toggle_pin(ERROR_LED);
   82622:	2033      	movs	r0, #51	; 0x33
   82624:	47d0      	blx	sl
				delay_ms(200);
   82626:	4648      	mov	r0, r9
   82628:	47a0      	blx	r4
			for(i=0;i<(_param%10)*2;i++)
   8262a:	3501      	adds	r5, #1
   8262c:	42b5      	cmp	r5, r6
   8262e:	d1f8      	bne.n	82622 <Error+0x1a2>
   82630:	e773      	b.n	8251a <Error+0x9a>

#undef _param
	}
	rstc_start_software_reset(RSTC);
   82632:	4812      	ldr	r0, [pc, #72]	; (8267c <Error+0x1fc>)
   82634:	4b12      	ldr	r3, [pc, #72]	; (82680 <Error+0x200>)
   82636:	4798      	blx	r3
   82638:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8263c:	b004      	add	sp, #16
   8263e:	4770      	bx	lr
   82640:	200012ec 	.word	0x200012ec
   82644:	00089b90 	.word	0x00089b90
   82648:	00084b49 	.word	0x00084b49
   8264c:	00083f55 	.word	0x00083f55
   82650:	0068a1b7 	.word	0x0068a1b7
   82654:	20000001 	.word	0x20000001
   82658:	20000124 	.word	0x20000124
   8265c:	00081431 	.word	0x00081431
   82660:	cccccccd 	.word	0xcccccccd
   82664:	000813dd 	.word	0x000813dd
   82668:	009cf293 	.word	0x009cf293
   8266c:	000813f7 	.word	0x000813f7
   82670:	0139e525 	.word	0x0139e525
   82674:	0053b493 	.word	0x0053b493
   82678:	51eb851f 	.word	0x51eb851f
   8267c:	400e1200 	.word	0x400e1200
   82680:	00081865 	.word	0x00081865
   82684:	00081411 	.word	0x00081411
   82688:	0014ed25 	.word	0x0014ed25

0008268c <kRtc>:
#define _rtcCalr	((t_RTC_CALR*)&RTC->RTC_CALR)
#define _rtcTimr	((t_RTC_TIMR*)&RTC->RTC_TIMR)


uint32_t kRtc(uint32_t sc,...)
{
   8268c:	b40f      	push	{r0, r1, r2, r3}
   8268e:	b5f0      	push	{r4, r5, r6, r7, lr}
   82690:	b087      	sub	sp, #28
	uint32_t u1,u2,u3,u4;
	
	switch(sc)
   82692:	990c      	ldr	r1, [sp, #48]	; 0x30
   82694:	2964      	cmp	r1, #100	; 0x64
   82696:	d021      	beq.n	826dc <kRtc+0x50>
   82698:	d814      	bhi.n	826c4 <kRtc+0x38>
   8269a:	2901      	cmp	r1, #1
   8269c:	f000 810e 	beq.w	828bc <kRtc+0x230>
   826a0:	2900      	cmp	r1, #0
   826a2:	f000 80bb 	beq.w	8281c <kRtc+0x190>
   826a6:	2902      	cmp	r1, #2
   826a8:	d113      	bne.n	826d2 <kRtc+0x46>
	case _KRTC_IS_SUMMER_TIME:
#define _day	pa1
#define _date	pa2
#define _month	pa3
#define _hour	pa4
		if((_month>MARCH)&&(_month<OCTOBER)) return 1;
   826aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   826ac:	1f1a      	subs	r2, r3, #4
   826ae:	2a05      	cmp	r2, #5
   826b0:	f240 8148 	bls.w	82944 <kRtc+0x2b8>
		else
		{
			if(_month==MARCH)
   826b4:	2b03      	cmp	r3, #3
   826b6:	f000 811b 	beq.w	828f0 <kRtc+0x264>
					{
						return (((int8_t)(_date-24)-(int8_t)_day)>0);
					}
				}
			}
			else if(_month==OCTOBER)
   826ba:	2b0a      	cmp	r3, #10
   826bc:	f000 812d 	beq.w	8291a <kRtc+0x28e>
						return (((int8_t)(_date-24)-(int8_t)_day)<=0);
					}
				}
			}
		}
		return 0;
   826c0:	2400      	movs	r4, #0
   826c2:	e0d1      	b.n	82868 <kRtc+0x1dc>
	switch(sc)
   826c4:	2967      	cmp	r1, #103	; 0x67
   826c6:	d040      	beq.n	8274a <kRtc+0xbe>
   826c8:	2968      	cmp	r1, #104	; 0x68
   826ca:	f000 808d 	beq.w	827e8 <kRtc+0x15c>
   826ce:	2966      	cmp	r1, #102	; 0x66
   826d0:	d01a      	beq.n	82708 <kRtc+0x7c>
		//no break;


	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_KRTC_SWITCH_BAD_SC,sc);
   826d2:	200e      	movs	r0, #14
   826d4:	4b9e      	ldr	r3, [pc, #632]	; (82950 <kRtc+0x2c4>)
   826d6:	4798      	blx	r3
}
	return 0;
   826d8:	2400      	movs	r4, #0
   826da:	e0c5      	b.n	82868 <kRtc+0x1dc>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   826dc:	2000      	movs	r0, #0
   826de:	4b9d      	ldr	r3, [pc, #628]	; (82954 <kRtc+0x2c8>)
   826e0:	4798      	blx	r3
		while (!pmc_osc_is_ready_32kxtal());
   826e2:	4c9d      	ldr	r4, [pc, #628]	; (82958 <kRtc+0x2cc>)
   826e4:	47a0      	blx	r4
   826e6:	2800      	cmp	r0, #0
   826e8:	d0fc      	beq.n	826e4 <kRtc+0x58>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   826ea:	4b9c      	ldr	r3, [pc, #624]	; (8295c <kRtc+0x2d0>)
   826ec:	2104      	movs	r1, #4
   826ee:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   826f2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   826f6:	2210      	movs	r2, #16
   826f8:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   826fc:	6019      	str	r1, [r3, #0]
		rtc_enable_interrupt(RTC,RTC_IER_SECEN);	//Second IRQ enabled
   826fe:	4898      	ldr	r0, [pc, #608]	; (82960 <kRtc+0x2d4>)
   82700:	4b98      	ldr	r3, [pc, #608]	; (82964 <kRtc+0x2d8>)
   82702:	4798      	blx	r3
	return 0;
   82704:	2400      	movs	r4, #0
		break;
   82706:	e0af      	b.n	82868 <kRtc+0x1dc>
		_res = rtc_set_time(RTC,_hour,_minute,_second);
   82708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8270a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8270c:	990d      	ldr	r1, [sp, #52]	; 0x34
   8270e:	4894      	ldr	r0, [pc, #592]	; (82960 <kRtc+0x2d4>)
   82710:	4c95      	ldr	r4, [pc, #596]	; (82968 <kRtc+0x2dc>)
   82712:	47a0      	blx	r4
   82714:	4604      	mov	r4, r0
   82716:	900c      	str	r0, [sp, #48]	; 0x30
		if(_res	== 0)
   82718:	2800      	cmp	r0, #0
   8271a:	f040 80a5 	bne.w	82868 <kRtc+0x1dc>
			rtc.summerTime = _kRtcIsSummerTime(_rtcCalr->DAY,_rtcCalr->DATE,_rtcCalr->MONTH,_rtcTimr->HOUR);
   8271e:	4b93      	ldr	r3, [pc, #588]	; (8296c <kRtc+0x2e0>)
   82720:	7899      	ldrb	r1, [r3, #2]
   82722:	78da      	ldrb	r2, [r3, #3]
   82724:	3b04      	subs	r3, #4
   82726:	789b      	ldrb	r3, [r3, #2]
   82728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   8272c:	9300      	str	r3, [sp, #0]
   8272e:	f001 031f 	and.w	r3, r1, #31
   82732:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   82736:	0949      	lsrs	r1, r1, #5
   82738:	2002      	movs	r0, #2
   8273a:	f7ff ffa7 	bl	8268c <kRtc>
   8273e:	4b8c      	ldr	r3, [pc, #560]	; (82970 <kRtc+0x2e4>)
   82740:	781a      	ldrb	r2, [r3, #0]
   82742:	f360 0282 	bfi	r2, r0, #2, #1
   82746:	701a      	strb	r2, [r3, #0]
   82748:	e08e      	b.n	82868 <kRtc+0x1dc>
		if((_month==0)||(_month)>12) return -1;
   8274a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8274c:	1e63      	subs	r3, r4, #1
   8274e:	2b0b      	cmp	r3, #11
   82750:	d902      	bls.n	82758 <kRtc+0xcc>
   82752:	f04f 34ff 	mov.w	r4, #4294967295
   82756:	e087      	b.n	82868 <kRtc+0x1dc>
		if(_date>nbDaysInMonth[_month-1]+_kRtcIsLeapYear(_centyear)?1:0) return -1;
   82758:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8275a:	4a86      	ldr	r2, [pc, #536]	; (82974 <kRtc+0x2e8>)
   8275c:	5cd5      	ldrb	r5, [r2, r3]
   8275e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   82760:	4631      	mov	r1, r6
   82762:	2001      	movs	r0, #1
   82764:	f7ff ff92 	bl	8268c <kRtc>
   82768:	4428      	add	r0, r5
   8276a:	4287      	cmp	r7, r0
   8276c:	d902      	bls.n	82774 <kRtc+0xe8>
   8276e:	f04f 34ff 	mov.w	r4, #4294967295
   82772:	e079      	b.n	82868 <kRtc+0x1dc>
		if((_centyear/100>20)||(_centyear/100<19)||(_centyear%100>99)) return -1;
   82774:	f2a6 736c 	subw	r3, r6, #1900	; 0x76c
   82778:	2bc7      	cmp	r3, #199	; 0xc7
   8277a:	d902      	bls.n	82782 <kRtc+0xf6>
   8277c:	f04f 34ff 	mov.w	r4, #4294967295
   82780:	e072      	b.n	82868 <kRtc+0x1dc>
   82782:	4d7d      	ldr	r5, [pc, #500]	; (82978 <kRtc+0x2ec>)
   82784:	fba5 3506 	umull	r3, r5, r5, r6
   82788:	096d      	lsrs	r5, r5, #5
   8278a:	2364      	movs	r3, #100	; 0x64
   8278c:	fb03 6515 	mls	r5, r3, r5, r6
   82790:	2d63      	cmp	r5, #99	; 0x63
   82792:	d902      	bls.n	8279a <kRtc+0x10e>
   82794:	f04f 34ff 	mov.w	r4, #4294967295
   82798:	e066      	b.n	82868 <kRtc+0x1dc>
		_day = _kRtcDayByDate(_date,_month,_centyear);
   8279a:	4633      	mov	r3, r6
   8279c:	4622      	mov	r2, r4
   8279e:	4639      	mov	r1, r7
   827a0:	2000      	movs	r0, #0
   827a2:	f7ff ff73 	bl	8268c <kRtc>
		_res = rtc_set_date(RTC,_centyear%100,_month,_date,_day);
   827a6:	9000      	str	r0, [sp, #0]
   827a8:	463b      	mov	r3, r7
   827aa:	4622      	mov	r2, r4
   827ac:	4629      	mov	r1, r5
   827ae:	486c      	ldr	r0, [pc, #432]	; (82960 <kRtc+0x2d4>)
   827b0:	4c72      	ldr	r4, [pc, #456]	; (8297c <kRtc+0x2f0>)
   827b2:	47a0      	blx	r4
   827b4:	4604      	mov	r4, r0
   827b6:	900c      	str	r0, [sp, #48]	; 0x30
		if(_res == 0)
   827b8:	2800      	cmp	r0, #0
   827ba:	d155      	bne.n	82868 <kRtc+0x1dc>
			rtc.summerTime = _kRtcIsSummerTime(_rtcCalr->DAY,_rtcCalr->DATE,_rtcCalr->MONTH,_rtcTimr->HOUR);
   827bc:	4b6b      	ldr	r3, [pc, #428]	; (8296c <kRtc+0x2e0>)
   827be:	7899      	ldrb	r1, [r3, #2]
   827c0:	78da      	ldrb	r2, [r3, #3]
   827c2:	3b04      	subs	r3, #4
   827c4:	789b      	ldrb	r3, [r3, #2]
   827c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   827ca:	9300      	str	r3, [sp, #0]
   827cc:	f001 031f 	and.w	r3, r1, #31
   827d0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   827d4:	0949      	lsrs	r1, r1, #5
   827d6:	2002      	movs	r0, #2
   827d8:	f7ff ff58 	bl	8268c <kRtc>
   827dc:	4b64      	ldr	r3, [pc, #400]	; (82970 <kRtc+0x2e4>)
   827de:	781a      	ldrb	r2, [r3, #0]
   827e0:	f360 0282 	bfi	r2, r0, #2, #1
   827e4:	701a      	strb	r2, [r3, #0]
   827e6:	e03f      	b.n	82868 <kRtc+0x1dc>
		rtc_get_date(RTC,&_year,&_month,&_date,&_day);
   827e8:	ab02      	add	r3, sp, #8
   827ea:	9300      	str	r3, [sp, #0]
   827ec:	ab03      	add	r3, sp, #12
   827ee:	aa04      	add	r2, sp, #16
   827f0:	a905      	add	r1, sp, #20
   827f2:	485b      	ldr	r0, [pc, #364]	; (82960 <kRtc+0x2d4>)
   827f4:	4c62      	ldr	r4, [pc, #392]	; (82980 <kRtc+0x2f4>)
   827f6:	47a0      	blx	r4
		sprintf((char*)_pStr,"%s %d %s %4d",daysOfWeek[_day-1],(int)_date,months[_month-1],(int)_year);
   827f8:	9b02      	ldr	r3, [sp, #8]
   827fa:	3b01      	subs	r3, #1
   827fc:	4a61      	ldr	r2, [pc, #388]	; (82984 <kRtc+0x2f8>)
   827fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   82802:	9b05      	ldr	r3, [sp, #20]
   82804:	9301      	str	r3, [sp, #4]
   82806:	9b04      	ldr	r3, [sp, #16]
   82808:	3b01      	subs	r3, #1
   8280a:	495f      	ldr	r1, [pc, #380]	; (82988 <kRtc+0x2fc>)
   8280c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   82810:	9300      	str	r3, [sp, #0]
   82812:	9b03      	ldr	r3, [sp, #12]
   82814:	495d      	ldr	r1, [pc, #372]	; (8298c <kRtc+0x300>)
   82816:	980d      	ldr	r0, [sp, #52]	; 0x34
   82818:	4c5d      	ldr	r4, [pc, #372]	; (82990 <kRtc+0x304>)
   8281a:	47a0      	blx	r4
		if(_month>=3)
   8281c:	990e      	ldr	r1, [sp, #56]	; 0x38
   8281e:	2902      	cmp	r1, #2
   82820:	d928      	bls.n	82874 <kRtc+0x1e8>
			_day = ((_month*23)/9 + _date + 4 + _centyear + _centyear/4 - _centyear/100 + _centyear/400 - 2 ) % 7 + 1;
   82822:	980f      	ldr	r0, [sp, #60]	; 0x3c
   82824:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   82826:	1883      	adds	r3, r0, r2
   82828:	3302      	adds	r3, #2
   8282a:	eb03 0390 	add.w	r3, r3, r0, lsr #2
   8282e:	4a52      	ldr	r2, [pc, #328]	; (82978 <kRtc+0x2ec>)
   82830:	fba2 2000 	umull	r2, r0, r2, r0
   82834:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
   82838:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   8283c:	ebc1 02c2 	rsb	r2, r1, r2, lsl #3
   82840:	4954      	ldr	r1, [pc, #336]	; (82994 <kRtc+0x308>)
   82842:	fba1 1202 	umull	r1, r2, r1, r2
   82846:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   8284a:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
   8284e:	4a52      	ldr	r2, [pc, #328]	; (82998 <kRtc+0x30c>)
   82850:	fba2 1203 	umull	r1, r2, r2, r3
   82854:	1a99      	subs	r1, r3, r2
   82856:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   8285a:	0892      	lsrs	r2, r2, #2
   8285c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   82860:	1a9b      	subs	r3, r3, r2
   82862:	3301      	adds	r3, #1
   82864:	930c      	str	r3, [sp, #48]	; 0x30
		return _day; //Normally 1 to 7 !!!!
   82866:	9c0c      	ldr	r4, [sp, #48]	; 0x30
}
   82868:	4620      	mov	r0, r4
   8286a:	b007      	add	sp, #28
   8286c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   82870:	b004      	add	sp, #16
   82872:	4770      	bx	lr
			_day = ((_month*23)/9 + _date + 4 + _centyear + (_centyear-1)/4 - (_centyear-1)/100 + (_centyear-1)/400 ) % 7 + 1;
   82874:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82876:	1e50      	subs	r0, r2, #1
   82878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8287a:	4413      	add	r3, r2
   8287c:	3304      	adds	r3, #4
   8287e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   82882:	ebc1 02c2 	rsb	r2, r1, r2, lsl #3
   82886:	4943      	ldr	r1, [pc, #268]	; (82994 <kRtc+0x308>)
   82888:	fba1 1202 	umull	r1, r2, r1, r2
   8288c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   82890:	eb03 0390 	add.w	r3, r3, r0, lsr #2
   82894:	4a38      	ldr	r2, [pc, #224]	; (82978 <kRtc+0x2ec>)
   82896:	fba2 1200 	umull	r1, r2, r2, r0
   8289a:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
   8289e:	eba3 1352 	sub.w	r3, r3, r2, lsr #5
   828a2:	4a3d      	ldr	r2, [pc, #244]	; (82998 <kRtc+0x30c>)
   828a4:	fba2 1203 	umull	r1, r2, r2, r3
   828a8:	1a99      	subs	r1, r3, r2
   828aa:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   828ae:	0892      	lsrs	r2, r2, #2
   828b0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   828b4:	1a9b      	subs	r3, r3, r2
   828b6:	3301      	adds	r3, #1
   828b8:	930c      	str	r3, [sp, #48]	; 0x30
   828ba:	e7d4      	b.n	82866 <kRtc+0x1da>
		return (((_centyear%4==0)&&(_centyear%100!=0)) || (_centyear%400==0));
   828bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   828be:	f013 0f03 	tst.w	r3, #3
   828c2:	d107      	bne.n	828d4 <kRtc+0x248>
   828c4:	4a2c      	ldr	r2, [pc, #176]	; (82978 <kRtc+0x2ec>)
   828c6:	fba2 1203 	umull	r1, r2, r2, r3
   828ca:	0952      	lsrs	r2, r2, #5
   828cc:	2164      	movs	r1, #100	; 0x64
   828ce:	fb01 3212 	mls	r2, r1, r2, r3
   828d2:	b95a      	cbnz	r2, 828ec <kRtc+0x260>
   828d4:	4c28      	ldr	r4, [pc, #160]	; (82978 <kRtc+0x2ec>)
   828d6:	fba4 2403 	umull	r2, r4, r4, r3
   828da:	09e4      	lsrs	r4, r4, #7
   828dc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   828e0:	fb02 3414 	mls	r4, r2, r4, r3
   828e4:	fab4 f484 	clz	r4, r4
   828e8:	0964      	lsrs	r4, r4, #5
   828ea:	e7bd      	b.n	82868 <kRtc+0x1dc>
   828ec:	2401      	movs	r4, #1
   828ee:	e7bb      	b.n	82868 <kRtc+0x1dc>
				if(_date>=25)
   828f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   828f2:	2c18      	cmp	r4, #24
   828f4:	d928      	bls.n	82948 <kRtc+0x2bc>
					if(_day==SUNDAY)
   828f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   828f8:	2a01      	cmp	r2, #1
   828fa:	d008      	beq.n	8290e <kRtc+0x282>
						return (((int8_t)(_date-24)-(int8_t)_day)>0);
   828fc:	3c18      	subs	r4, #24
   828fe:	b264      	sxtb	r4, r4
   82900:	b252      	sxtb	r2, r2
   82902:	1aa4      	subs	r4, r4, r2
   82904:	2c00      	cmp	r4, #0
   82906:	bfd4      	ite	le
   82908:	2400      	movle	r4, #0
   8290a:	2401      	movgt	r4, #1
   8290c:	e7ac      	b.n	82868 <kRtc+0x1dc>
						if(_hour>=2) return 1;
   8290e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   82910:	2c01      	cmp	r4, #1
   82912:	bf94      	ite	ls
   82914:	2400      	movls	r4, #0
   82916:	2401      	movhi	r4, #1
   82918:	e7a6      	b.n	82868 <kRtc+0x1dc>
				if(_date>=25)
   8291a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8291c:	2c18      	cmp	r4, #24
   8291e:	d915      	bls.n	8294c <kRtc+0x2c0>
					if(_day==SUNDAY)
   82920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   82922:	2a01      	cmp	r2, #1
   82924:	d008      	beq.n	82938 <kRtc+0x2ac>
						return (((int8_t)(_date-24)-(int8_t)_day)<=0);
   82926:	3c18      	subs	r4, #24
   82928:	b264      	sxtb	r4, r4
   8292a:	b252      	sxtb	r2, r2
   8292c:	1aa4      	subs	r4, r4, r2
   8292e:	2c00      	cmp	r4, #0
   82930:	bfcc      	ite	gt
   82932:	2400      	movgt	r4, #0
   82934:	2401      	movle	r4, #1
   82936:	e797      	b.n	82868 <kRtc+0x1dc>
						if(_hour<2) return 1;
   82938:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8293a:	2c01      	cmp	r4, #1
   8293c:	bf8c      	ite	hi
   8293e:	2400      	movhi	r4, #0
   82940:	2401      	movls	r4, #1
   82942:	e791      	b.n	82868 <kRtc+0x1dc>
		if((_month>MARCH)&&(_month<OCTOBER)) return 1;
   82944:	2401      	movs	r4, #1
   82946:	e78f      	b.n	82868 <kRtc+0x1dc>
		return 0;
   82948:	2400      	movs	r4, #0
   8294a:	e78d      	b.n	82868 <kRtc+0x1dc>
   8294c:	2400      	movs	r4, #0
   8294e:	e78b      	b.n	82868 <kRtc+0x1dc>
   82950:	00082481 	.word	0x00082481
   82954:	00081565 	.word	0x00081565
   82958:	00081589 	.word	0x00081589
   8295c:	e000e100 	.word	0xe000e100
   82960:	400e1260 	.word	0x400e1260
   82964:	00081871 	.word	0x00081871
   82968:	000818d1 	.word	0x000818d1
   8296c:	400e126c 	.word	0x400e126c
   82970:	20001564 	.word	0x20001564
   82974:	00089bc0 	.word	0x00089bc0
   82978:	51eb851f 	.word	0x51eb851f
   8297c:	000819d9 	.word	0x000819d9
   82980:	00081965 	.word	0x00081965
   82984:	2000052c 	.word	0x2000052c
   82988:	20000548 	.word	0x20000548
   8298c:	00089bb0 	.word	0x00089bb0
   82990:	00084b49 	.word	0x00084b49
   82994:	38e38e39 	.word	0x38e38e39
   82998:	24924925 	.word	0x24924925

0008299c <RTC_Handler>:
enum{
	_SHELL_PROMPT = 4
};

void RTC_Handler(void)
{
   8299c:	b510      	push	{r4, lr}
   8299e:	b082      	sub	sp, #8
	rtc_clear_status(RTC,RTC_SCCR_SECCLR);
   829a0:	2104      	movs	r1, #4
   829a2:	4806      	ldr	r0, [pc, #24]	; (829bc <RTC_Handler+0x20>)
   829a4:	4b06      	ldr	r3, [pc, #24]	; (829c0 <RTC_Handler+0x24>)
   829a6:	4798      	blx	r3
	PushTask(Shell,_SHELL_PROMPT,0,0);
   829a8:	2300      	movs	r3, #0
   829aa:	9300      	str	r3, [sp, #0]
   829ac:	2204      	movs	r2, #4
   829ae:	4905      	ldr	r1, [pc, #20]	; (829c4 <RTC_Handler+0x28>)
   829b0:	2066      	movs	r0, #102	; 0x66
   829b2:	4c05      	ldr	r4, [pc, #20]	; (829c8 <RTC_Handler+0x2c>)
   829b4:	47a0      	blx	r4
}
   829b6:	b002      	add	sp, #8
   829b8:	bd10      	pop	{r4, pc}
   829ba:	bf00      	nop
   829bc:	400e1260 	.word	0x400e1260
   829c0:	00081a91 	.word	0x00081a91
   829c4:	00082e25 	.word	0x00082e25
   829c8:	000841e5 	.word	0x000841e5

000829cc <Lcd>:

#define ST_LCD_ON		0x0000001


uint32_t Lcd(uint32_t sc, ...)
{
   829cc:	b40f      	push	{r0, r1, r2, r3}
   829ce:	b538      	push	{r3, r4, r5, lr}
	switch(sc)
   829d0:	9904      	ldr	r1, [sp, #16]
   829d2:	1e4b      	subs	r3, r1, #1
   829d4:	2b68      	cmp	r3, #104	; 0x68
   829d6:	f200 8200 	bhi.w	82dda <Lcd+0x40e>
   829da:	e8df f013 	tbh	[pc, r3, lsl #1]
   829de:	010d      	.short	0x010d
   829e0:	0167015d 	.word	0x0167015d
   829e4:	01830171 	.word	0x01830171
   829e8:	019b018f 	.word	0x019b018f
   829ec:	01a90203 	.word	0x01a90203
   829f0:	01fe01db 	.word	0x01fe01db
   829f4:	01fe01fe 	.word	0x01fe01fe
   829f8:	01fe01fe 	.word	0x01fe01fe
   829fc:	01fe01fe 	.word	0x01fe01fe
   82a00:	01fe01fe 	.word	0x01fe01fe
   82a04:	01fe01fe 	.word	0x01fe01fe
   82a08:	01fe01fe 	.word	0x01fe01fe
   82a0c:	01fe01fe 	.word	0x01fe01fe
   82a10:	01fe01fe 	.word	0x01fe01fe
   82a14:	01fe01fe 	.word	0x01fe01fe
   82a18:	01fe01fe 	.word	0x01fe01fe
   82a1c:	01fe01fe 	.word	0x01fe01fe
   82a20:	01fe01fe 	.word	0x01fe01fe
   82a24:	01fe01fe 	.word	0x01fe01fe
   82a28:	01fe01fe 	.word	0x01fe01fe
   82a2c:	01fe01fe 	.word	0x01fe01fe
   82a30:	01fe01fe 	.word	0x01fe01fe
   82a34:	01fe01fe 	.word	0x01fe01fe
   82a38:	01fe01fe 	.word	0x01fe01fe
   82a3c:	01fe01fe 	.word	0x01fe01fe
   82a40:	01fe01fe 	.word	0x01fe01fe
   82a44:	01fe01fe 	.word	0x01fe01fe
   82a48:	01fe01fe 	.word	0x01fe01fe
   82a4c:	01fe01fe 	.word	0x01fe01fe
   82a50:	01fe01fe 	.word	0x01fe01fe
   82a54:	01fe01fe 	.word	0x01fe01fe
   82a58:	01fe01fe 	.word	0x01fe01fe
   82a5c:	01fe01fe 	.word	0x01fe01fe
   82a60:	01fe01fe 	.word	0x01fe01fe
   82a64:	01fe01fe 	.word	0x01fe01fe
   82a68:	01fe01fe 	.word	0x01fe01fe
   82a6c:	01fe01fe 	.word	0x01fe01fe
   82a70:	01fe01fe 	.word	0x01fe01fe
   82a74:	01fe01fe 	.word	0x01fe01fe
   82a78:	01fe01fe 	.word	0x01fe01fe
   82a7c:	01fe01fe 	.word	0x01fe01fe
   82a80:	01fe01fe 	.word	0x01fe01fe
   82a84:	01fe01fe 	.word	0x01fe01fe
   82a88:	01fe01fe 	.word	0x01fe01fe
   82a8c:	01fe01fe 	.word	0x01fe01fe
   82a90:	01fe01fe 	.word	0x01fe01fe
   82a94:	01fe01fe 	.word	0x01fe01fe
   82a98:	01fe01fe 	.word	0x01fe01fe
   82a9c:	01fe01fe 	.word	0x01fe01fe
   82aa0:	01fe01fe 	.word	0x01fe01fe
   82aa4:	00b80069 	.word	0x00b80069
   82aa8:	00e20102 	.word	0x00e20102
   82aac:	00dd00ed 	.word	0x00dd00ed
	{
	case LCD_NEW:
		_LcdSetDataLineOut();
   82ab0:	2009      	movs	r0, #9
   82ab2:	f7ff ff8b 	bl	829cc <Lcd>
		gpio_configure_pin(LCD_E,			LCD_PIN_OUT_FLAGS);
   82ab6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82aba:	2004      	movs	r0, #4
   82abc:	4cae      	ldr	r4, [pc, #696]	; (82d78 <Lcd+0x3ac>)
   82abe:	47a0      	blx	r4
		gpio_configure_pin(LCD_RWB,			LCD_PIN_OUT_FLAGS);
   82ac0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82ac4:	2005      	movs	r0, #5
   82ac6:	47a0      	blx	r4
		gpio_configure_pin(LCD_RS,			LCD_PIN_OUT_FLAGS);
   82ac8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82acc:	2006      	movs	r0, #6
   82ace:	47a0      	blx	r4
		gpio_configure_pin(LCD_BACKLIGHT,	LCD_PIN_OUT_FLAGS);
   82ad0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82ad4:	2007      	movs	r0, #7
   82ad6:	47a0      	blx	r4

		gpio_set_pin_low(LCD_E);
   82ad8:	2004      	movs	r0, #4
   82ada:	4ca8      	ldr	r4, [pc, #672]	; (82d7c <Lcd+0x3b0>)
   82adc:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RS);
   82ade:	2006      	movs	r0, #6
   82ae0:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RWB);
   82ae2:	2005      	movs	r0, #5
   82ae4:	47a0      	blx	r4
		gpio_set_pin_high(LCD_BACKLIGHT);
   82ae6:	2007      	movs	r0, #7
   82ae8:	4ba5      	ldr	r3, [pc, #660]	; (82d80 <Lcd+0x3b4>)
   82aea:	4798      	blx	r3

		delay_ms(500);
   82aec:	48a5      	ldr	r0, [pc, #660]	; (82d84 <Lcd+0x3b8>)
   82aee:	4ca6      	ldr	r4, [pc, #664]	; (82d88 <Lcd+0x3bc>)
   82af0:	47a0      	blx	r4

#ifdef LCD_USE_8_BIT_INTERFACE
		//8 bit data interface/////////////////////////////
		_LcdWriteInst(0x30);
   82af2:	2130      	movs	r1, #48	; 0x30
   82af4:	2002      	movs	r0, #2
   82af6:	f7ff ff69 	bl	829cc <Lcd>
		delay_ms(6);
   82afa:	f24a 00b7 	movw	r0, #41143	; 0xa0b7
   82afe:	47a0      	blx	r4
		_LcdWriteInst(0x30);
   82b00:	2130      	movs	r1, #48	; 0x30
   82b02:	2002      	movs	r0, #2
   82b04:	f7ff ff62 	bl	829cc <Lcd>
		delay_ms(2);
   82b08:	f243 5093 	movw	r0, #13715	; 0x3593
   82b0c:	47a0      	blx	r4
		_LcdWriteInst(0x30);
   82b0e:	2130      	movs	r1, #48	; 0x30
   82b10:	2002      	movs	r0, #2
   82b12:	f7ff ff5b 	bl	829cc <Lcd>
		delay_ms(2);
   82b16:	f243 5093 	movw	r0, #13715	; 0x3593
   82b1a:	47a0      	blx	r4
		_LcdWriteInst(0x38);	//SET FUNCTION : 8 bits interface/2 line display/5x7 dots
   82b1c:	2138      	movs	r1, #56	; 0x38
   82b1e:	2002      	movs	r0, #2
   82b20:	f7ff ff54 	bl	829cc <Lcd>
		delay_ms(10);
		_LcdWriteByte(0x20);
		delay_ms(10);
		_LcdWriteInst(0x28);	//SET FUNCTION : 4 bits interface/2 line display/5x7 dots
#endif
		_LcdWriteInst(0x08);	//DISPLAY OFF
   82b24:	2108      	movs	r1, #8
   82b26:	2002      	movs	r0, #2
   82b28:	f7ff ff50 	bl	829cc <Lcd>
		_LcdWriteInst(0x01);	//DISPLAY CLEAR
   82b2c:	2101      	movs	r1, #1
   82b2e:	2002      	movs	r0, #2
   82b30:	f7ff ff4c 	bl	829cc <Lcd>
		_LcdWriteInst(0x06);	//ENTRY MODE SET : Cursor Increase/Display is not shift
   82b34:	2106      	movs	r1, #6
   82b36:	2002      	movs	r0, #2
   82b38:	f7ff ff48 	bl	829cc <Lcd>
		_LcdWriteInst(0x0C);	//DISPLAY ON/CURSOR OFF
   82b3c:	210c      	movs	r1, #12
   82b3e:	2002      	movs	r0, #2
   82b40:	f7ff ff44 	bl	829cc <Lcd>

		lcd.status = ST_LCD_ON;
   82b44:	2201      	movs	r2, #1
   82b46:	4b91      	ldr	r3, [pc, #580]	; (82d8c <Lcd+0x3c0>)
   82b48:	601a      	str	r2, [r3, #0]

	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_LCD_SWITCH_BAD_SC,sc);
	}
	return 0;
   82b4a:	2400      	movs	r4, #0
		break;
   82b4c:	e14b      	b.n	82de6 <Lcd+0x41a>
		_LcdWriteInst(0x08);	//DISPLAY OFF
   82b4e:	2108      	movs	r1, #8
   82b50:	2002      	movs	r0, #2
   82b52:	f7ff ff3b 	bl	829cc <Lcd>
		_LcdSetDataLineIn();
   82b56:	200a      	movs	r0, #10
   82b58:	f7ff ff38 	bl	829cc <Lcd>
		gpio_configure_pin(LCD_E,			LCD_PIN_OUT_FLAGS);
   82b5c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82b60:	2004      	movs	r0, #4
   82b62:	4c85      	ldr	r4, [pc, #532]	; (82d78 <Lcd+0x3ac>)
   82b64:	47a0      	blx	r4
		gpio_configure_pin(LCD_RWB,			LCD_PIN_OUT_FLAGS);
   82b66:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82b6a:	2005      	movs	r0, #5
   82b6c:	47a0      	blx	r4
		gpio_configure_pin(LCD_RS,			LCD_PIN_OUT_FLAGS);
   82b6e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82b72:	2006      	movs	r0, #6
   82b74:	47a0      	blx	r4
		gpio_configure_pin(LCD_BACKLIGHT,	LCD_PIN_OUT_FLAGS);
   82b76:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82b7a:	2007      	movs	r0, #7
   82b7c:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   82b7e:	2004      	movs	r0, #4
   82b80:	4c7e      	ldr	r4, [pc, #504]	; (82d7c <Lcd+0x3b0>)
   82b82:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RS);
   82b84:	2006      	movs	r0, #6
   82b86:	47a0      	blx	r4
		gpio_set_pin_low(LCD_RWB);
   82b88:	2005      	movs	r0, #5
   82b8a:	47a0      	blx	r4
		gpio_set_pin_low(LCD_BACKLIGHT);
   82b8c:	2007      	movs	r0, #7
   82b8e:	47a0      	blx	r4
		lcd.status=0;
   82b90:	2400      	movs	r4, #0
   82b92:	4b7e      	ldr	r3, [pc, #504]	; (82d8c <Lcd+0x3c0>)
   82b94:	601c      	str	r4, [r3, #0]
		break;
   82b96:	e126      	b.n	82de6 <Lcd+0x41a>
		return (uint32_t)(mIsBitsSet(lcd.status,ST_LCD_ON));
   82b98:	4b7c      	ldr	r3, [pc, #496]	; (82d8c <Lcd+0x3c0>)
   82b9a:	681c      	ldr	r4, [r3, #0]
   82b9c:	f004 0401 	and.w	r4, r4, #1
   82ba0:	e121      	b.n	82de6 <Lcd+0x41a>
		_LcdSetCursor(_line,_col);
   82ba2:	9a07      	ldr	r2, [sp, #28]
   82ba4:	9906      	ldr	r1, [sp, #24]
   82ba6:	2007      	movs	r0, #7
   82ba8:	f7ff ff10 	bl	829cc <Lcd>
		_LcdWriteData(_ch);
   82bac:	9905      	ldr	r1, [sp, #20]
   82bae:	2003      	movs	r0, #3
   82bb0:	f7ff ff0c 	bl	829cc <Lcd>
	return 0;
   82bb4:	2400      	movs	r4, #0
break;
   82bb6:	e116      	b.n	82de6 <Lcd+0x41a>
		_LcdSetCursor(_line,_col);
   82bb8:	9a07      	ldr	r2, [sp, #28]
   82bba:	9906      	ldr	r1, [sp, #24]
   82bbc:	2007      	movs	r0, #7
   82bbe:	f7ff ff05 	bl	829cc <Lcd>
		while(*(char*)_str)
   82bc2:	9c05      	ldr	r4, [sp, #20]
   82bc4:	7821      	ldrb	r1, [r4, #0]
   82bc6:	2900      	cmp	r1, #0
   82bc8:	f000 8112 	beq.w	82df0 <Lcd+0x424>
			_LcdWriteData(*(char*)_str++);
   82bcc:	2503      	movs	r5, #3
   82bce:	3401      	adds	r4, #1
   82bd0:	9405      	str	r4, [sp, #20]
   82bd2:	4628      	mov	r0, r5
   82bd4:	f7ff fefa 	bl	829cc <Lcd>
		while(*(char*)_str)
   82bd8:	7821      	ldrb	r1, [r4, #0]
   82bda:	2900      	cmp	r1, #0
   82bdc:	d1f7      	bne.n	82bce <Lcd+0x202>
	return 0;
   82bde:	2400      	movs	r4, #0
   82be0:	e101      	b.n	82de6 <Lcd+0x41a>
		if(_onOff)
   82be2:	9c05      	ldr	r4, [sp, #20]
   82be4:	b124      	cbz	r4, 82bf0 <Lcd+0x224>
			gpio_set_pin_high(LCD_BACKLIGHT);
   82be6:	2007      	movs	r0, #7
   82be8:	4b65      	ldr	r3, [pc, #404]	; (82d80 <Lcd+0x3b4>)
   82bea:	4798      	blx	r3
	return 0;
   82bec:	2400      	movs	r4, #0
   82bee:	e0fa      	b.n	82de6 <Lcd+0x41a>
			gpio_set_pin_low(LCD_BACKLIGHT);
   82bf0:	2007      	movs	r0, #7
   82bf2:	4b62      	ldr	r3, [pc, #392]	; (82d7c <Lcd+0x3b0>)
   82bf4:	4798      	blx	r3
   82bf6:	e0f6      	b.n	82de6 <Lcd+0x41a>
		_LcdSetDataLineOut();
   82bf8:	2009      	movs	r0, #9
   82bfa:	f7ff fee7 	bl	829cc <Lcd>
		gpio_set_pin_low(LCD_RWB);
   82bfe:	2005      	movs	r0, #5
   82c00:	4b5e      	ldr	r3, [pc, #376]	; (82d7c <Lcd+0x3b0>)
   82c02:	4798      	blx	r3
		_LcdEup();
   82c04:	2005      	movs	r0, #5
   82c06:	f7ff fee1 	bl	829cc <Lcd>
		(_byte&0x80)?gpio_set_pin_high(LCD_DB7):gpio_set_pin_low(LCD_DB7);
   82c0a:	9c05      	ldr	r4, [sp, #20]
   82c0c:	f014 0f80 	tst.w	r4, #128	; 0x80
   82c10:	f04f 0003 	mov.w	r0, #3
   82c14:	bf14      	ite	ne
   82c16:	4b5a      	ldrne	r3, [pc, #360]	; (82d80 <Lcd+0x3b4>)
   82c18:	4b58      	ldreq	r3, [pc, #352]	; (82d7c <Lcd+0x3b0>)
   82c1a:	4798      	blx	r3
		(_byte&0x40)?gpio_set_pin_high(LCD_DB6):gpio_set_pin_low(LCD_DB6);
   82c1c:	b2e4      	uxtb	r4, r4
   82c1e:	f014 0f40 	tst.w	r4, #64	; 0x40
   82c22:	f04f 0002 	mov.w	r0, #2
   82c26:	bf14      	ite	ne
   82c28:	4b55      	ldrne	r3, [pc, #340]	; (82d80 <Lcd+0x3b4>)
   82c2a:	4b54      	ldreq	r3, [pc, #336]	; (82d7c <Lcd+0x3b0>)
   82c2c:	4798      	blx	r3
		(_byte&0x20)?gpio_set_pin_high(LCD_DB5):gpio_set_pin_low(LCD_DB5);
   82c2e:	f014 0f20 	tst.w	r4, #32
   82c32:	f04f 0001 	mov.w	r0, #1
   82c36:	bf14      	ite	ne
   82c38:	4b51      	ldrne	r3, [pc, #324]	; (82d80 <Lcd+0x3b4>)
   82c3a:	4b50      	ldreq	r3, [pc, #320]	; (82d7c <Lcd+0x3b0>)
   82c3c:	4798      	blx	r3
		(_byte&0x10)?gpio_set_pin_high(LCD_DB4):gpio_set_pin_low(LCD_DB4);
   82c3e:	f014 0f10 	tst.w	r4, #16
   82c42:	f04f 0000 	mov.w	r0, #0
   82c46:	bf14      	ite	ne
   82c48:	4b4d      	ldrne	r3, [pc, #308]	; (82d80 <Lcd+0x3b4>)
   82c4a:	4b4c      	ldreq	r3, [pc, #304]	; (82d7c <Lcd+0x3b0>)
   82c4c:	4798      	blx	r3
		(_byte&0x08)?gpio_set_pin_high(LCD_DB3):gpio_set_pin_low(LCD_DB3);
   82c4e:	f014 0f08 	tst.w	r4, #8
   82c52:	f04f 002b 	mov.w	r0, #43	; 0x2b
   82c56:	bf14      	ite	ne
   82c58:	4b49      	ldrne	r3, [pc, #292]	; (82d80 <Lcd+0x3b4>)
   82c5a:	4b48      	ldreq	r3, [pc, #288]	; (82d7c <Lcd+0x3b0>)
   82c5c:	4798      	blx	r3
		(_byte&0x04)?gpio_set_pin_high(LCD_DB2):gpio_set_pin_low(LCD_DB2);
   82c5e:	f014 0f04 	tst.w	r4, #4
   82c62:	f04f 002a 	mov.w	r0, #42	; 0x2a
   82c66:	bf14      	ite	ne
   82c68:	4b45      	ldrne	r3, [pc, #276]	; (82d80 <Lcd+0x3b4>)
   82c6a:	4b44      	ldreq	r3, [pc, #272]	; (82d7c <Lcd+0x3b0>)
   82c6c:	4798      	blx	r3
		(_byte&0x02)?gpio_set_pin_high(LCD_DB1):gpio_set_pin_low(LCD_DB1);
   82c6e:	f014 0f02 	tst.w	r4, #2
   82c72:	f04f 0029 	mov.w	r0, #41	; 0x29
   82c76:	bf14      	ite	ne
   82c78:	4b41      	ldrne	r3, [pc, #260]	; (82d80 <Lcd+0x3b4>)
   82c7a:	4b40      	ldreq	r3, [pc, #256]	; (82d7c <Lcd+0x3b0>)
   82c7c:	4798      	blx	r3
		(_byte&0x01)?gpio_set_pin_high(LCD_DB0):gpio_set_pin_low(LCD_DB0);
   82c7e:	f014 0f01 	tst.w	r4, #1
   82c82:	f04f 0028 	mov.w	r0, #40	; 0x28
   82c86:	bf14      	ite	ne
   82c88:	4b3d      	ldrne	r3, [pc, #244]	; (82d80 <Lcd+0x3b4>)
   82c8a:	4b3c      	ldreq	r3, [pc, #240]	; (82d7c <Lcd+0x3b0>)
   82c8c:	4798      	blx	r3
		_LcdEdown();
   82c8e:	2006      	movs	r0, #6
   82c90:	f7ff fe9c 	bl	829cc <Lcd>
	return 0;
   82c94:	2400      	movs	r4, #0
		break;
   82c96:	e0a6      	b.n	82de6 <Lcd+0x41a>
		gpio_set_pin_low(LCD_RS);
   82c98:	2006      	movs	r0, #6
   82c9a:	4b38      	ldr	r3, [pc, #224]	; (82d7c <Lcd+0x3b0>)
   82c9c:	4798      	blx	r3
		_LcdWriteByte(_inst);
   82c9e:	f89d 1014 	ldrb.w	r1, [sp, #20]
   82ca2:	2001      	movs	r0, #1
   82ca4:	f7ff fe92 	bl	829cc <Lcd>
	return 0;
   82ca8:	2400      	movs	r4, #0
		break;
   82caa:	e09c      	b.n	82de6 <Lcd+0x41a>
		gpio_set_pin_high(LCD_RS);
   82cac:	2006      	movs	r0, #6
   82cae:	4b34      	ldr	r3, [pc, #208]	; (82d80 <Lcd+0x3b4>)
   82cb0:	4798      	blx	r3
		_LcdWriteByte(_data);
   82cb2:	f89d 1014 	ldrb.w	r1, [sp, #20]
   82cb6:	2001      	movs	r0, #1
   82cb8:	f7ff fe88 	bl	829cc <Lcd>
	return 0;
   82cbc:	2400      	movs	r4, #0
		break;
   82cbe:	e092      	b.n	82de6 <Lcd+0x41a>
		delay_us(500);
   82cc0:	f640 5065 	movw	r0, #3429	; 0xd65
   82cc4:	4c30      	ldr	r4, [pc, #192]	; (82d88 <Lcd+0x3bc>)
   82cc6:	47a0      	blx	r4
		gpio_set_pin_high(LCD_E);
   82cc8:	2004      	movs	r0, #4
   82cca:	4b2d      	ldr	r3, [pc, #180]	; (82d80 <Lcd+0x3b4>)
   82ccc:	4798      	blx	r3
		delay_us(100);
   82cce:	f240 20ae 	movw	r0, #686	; 0x2ae
   82cd2:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   82cd4:	2004      	movs	r0, #4
   82cd6:	4b29      	ldr	r3, [pc, #164]	; (82d7c <Lcd+0x3b0>)
   82cd8:	4798      	blx	r3
		delay_us(500);
   82cda:	f640 5065 	movw	r0, #3429	; 0xd65
   82cde:	47a0      	blx	r4
	return 0;
   82ce0:	2400      	movs	r4, #0
		break;
   82ce2:	e080      	b.n	82de6 <Lcd+0x41a>
		delay_us(500);
   82ce4:	f640 5065 	movw	r0, #3429	; 0xd65
   82ce8:	4c27      	ldr	r4, [pc, #156]	; (82d88 <Lcd+0x3bc>)
   82cea:	47a0      	blx	r4
		gpio_set_pin_high(LCD_E);
   82cec:	2004      	movs	r0, #4
   82cee:	4b24      	ldr	r3, [pc, #144]	; (82d80 <Lcd+0x3b4>)
   82cf0:	4798      	blx	r3
		delay_us(50);
   82cf2:	f240 1057 	movw	r0, #343	; 0x157
   82cf6:	47a0      	blx	r4
	return 0;
   82cf8:	2400      	movs	r4, #0
		break;
   82cfa:	e074      	b.n	82de6 <Lcd+0x41a>
		delay_us(50);
   82cfc:	f240 1057 	movw	r0, #343	; 0x157
   82d00:	4c21      	ldr	r4, [pc, #132]	; (82d88 <Lcd+0x3bc>)
   82d02:	47a0      	blx	r4
		gpio_set_pin_low(LCD_E);
   82d04:	2004      	movs	r0, #4
   82d06:	4b1d      	ldr	r3, [pc, #116]	; (82d7c <Lcd+0x3b0>)
   82d08:	4798      	blx	r3
		delay_us(500);
   82d0a:	f640 5065 	movw	r0, #3429	; 0xd65
   82d0e:	47a0      	blx	r4
	return 0;
   82d10:	2400      	movs	r4, #0
		break;
   82d12:	e068      	b.n	82de6 <Lcd+0x41a>
		_LcdWriteInst((line2addr[_nLine&0x03]+_nCol)|0x80);
   82d14:	9b05      	ldr	r3, [sp, #20]
   82d16:	f003 0303 	and.w	r3, r3, #3
   82d1a:	4a1d      	ldr	r2, [pc, #116]	; (82d90 <Lcd+0x3c4>)
   82d1c:	5cd1      	ldrb	r1, [r2, r3]
   82d1e:	9b06      	ldr	r3, [sp, #24]
   82d20:	4419      	add	r1, r3
   82d22:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   82d26:	2002      	movs	r0, #2
   82d28:	f7ff fe50 	bl	829cc <Lcd>
	return 0;
   82d2c:	2400      	movs	r4, #0
		break;
   82d2e:	e05a      	b.n	82de6 <Lcd+0x41a>
		gpio_configure_pin(LCD_DB4,			LCD_PIN_OUT_FLAGS);
   82d30:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82d34:	2000      	movs	r0, #0
   82d36:	4c10      	ldr	r4, [pc, #64]	; (82d78 <Lcd+0x3ac>)
   82d38:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB5,			LCD_PIN_OUT_FLAGS);
   82d3a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82d3e:	2001      	movs	r0, #1
   82d40:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB6,			LCD_PIN_OUT_FLAGS);
   82d42:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82d46:	2002      	movs	r0, #2
   82d48:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB7,			LCD_PIN_OUT_FLAGS);
   82d4a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82d4e:	2003      	movs	r0, #3
   82d50:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB0,			LCD_PIN_OUT_FLAGS);
   82d52:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82d56:	2028      	movs	r0, #40	; 0x28
   82d58:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB1,			LCD_PIN_OUT_FLAGS);
   82d5a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82d5e:	2029      	movs	r0, #41	; 0x29
   82d60:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB2,			LCD_PIN_OUT_FLAGS);
   82d62:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82d66:	202a      	movs	r0, #42	; 0x2a
   82d68:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB3,			LCD_PIN_OUT_FLAGS);
   82d6a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82d6e:	202b      	movs	r0, #43	; 0x2b
   82d70:	47a0      	blx	r4
	return 0;
   82d72:	2400      	movs	r4, #0
		break;
   82d74:	e037      	b.n	82de6 <Lcd+0x41a>
   82d76:	bf00      	nop
   82d78:	00081431 	.word	0x00081431
   82d7c:	000813f7 	.word	0x000813f7
   82d80:	000813dd 	.word	0x000813dd
   82d84:	003450dc 	.word	0x003450dc
   82d88:	20000001 	.word	0x20000001
   82d8c:	20001568 	.word	0x20001568
   82d90:	00089c7c 	.word	0x00089c7c
		gpio_configure_pin(LCD_DB4,			LCD_PIN_IN_FLAGS);
   82d94:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82d98:	2000      	movs	r0, #0
   82d9a:	4c16      	ldr	r4, [pc, #88]	; (82df4 <Lcd+0x428>)
   82d9c:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB5,			LCD_PIN_IN_FLAGS);
   82d9e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82da2:	2001      	movs	r0, #1
   82da4:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB6,			LCD_PIN_IN_FLAGS);
   82da6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82daa:	2002      	movs	r0, #2
   82dac:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB7,			LCD_PIN_IN_FLAGS);
   82dae:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82db2:	2003      	movs	r0, #3
   82db4:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB0,			LCD_PIN_IN_FLAGS);
   82db6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82dba:	2028      	movs	r0, #40	; 0x28
   82dbc:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB1,			LCD_PIN_IN_FLAGS);
   82dbe:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82dc2:	2029      	movs	r0, #41	; 0x29
   82dc4:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB2,			LCD_PIN_IN_FLAGS);
   82dc6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82dca:	202a      	movs	r0, #42	; 0x2a
   82dcc:	47a0      	blx	r4
		gpio_configure_pin(LCD_DB3,			LCD_PIN_IN_FLAGS);
   82dce:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82dd2:	202b      	movs	r0, #43	; 0x2b
   82dd4:	47a0      	blx	r4
	return 0;
   82dd6:	2400      	movs	r4, #0
		break;
   82dd8:	e005      	b.n	82de6 <Lcd+0x41a>
		Error(ERROR_LCD_SWITCH_BAD_SC,sc);
   82dda:	200f      	movs	r0, #15
   82ddc:	4b06      	ldr	r3, [pc, #24]	; (82df8 <Lcd+0x42c>)
   82dde:	4798      	blx	r3
	return 0;
   82de0:	2400      	movs	r4, #0
   82de2:	e000      	b.n	82de6 <Lcd+0x41a>
   82de4:	2400      	movs	r4, #0
}
   82de6:	4620      	mov	r0, r4
   82de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82dec:	b004      	add	sp, #16
   82dee:	4770      	bx	lr
	return 0;
   82df0:	2400      	movs	r4, #0
   82df2:	e7f8      	b.n	82de6 <Lcd+0x41a>
   82df4:	00081431 	.word	0x00081431
   82df8:	00082481 	.word	0x00082481

00082dfc <LcdFindHalf>:

uint8_t LcdFindHalf(uint32_t len)
{
   82dfc:	b508      	push	{r3, lr}
	float col;
	col = 20 - len;
   82dfe:	f1c0 0014 	rsb	r0, r0, #20
   82e02:	4b05      	ldr	r3, [pc, #20]	; (82e18 <LcdFindHalf+0x1c>)
   82e04:	4798      	blx	r3
	col = col/2;
   82e06:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   82e0a:	4b04      	ldr	r3, [pc, #16]	; (82e1c <LcdFindHalf+0x20>)
   82e0c:	4798      	blx	r3
	return col;
   82e0e:	4b04      	ldr	r3, [pc, #16]	; (82e20 <LcdFindHalf+0x24>)
   82e10:	4798      	blx	r3
   82e12:	b2c0      	uxtb	r0, r0
   82e14:	bd08      	pop	{r3, pc}
   82e16:	bf00      	nop
   82e18:	000846c5 	.word	0x000846c5
   82e1c:	00084775 	.word	0x00084775
   82e20:	00084a15 	.word	0x00084a15

00082e24 <Shell>:

#define EnterEditMode()					mBitsSet(shell.status,ST_SHELL_PROMPT_DISABLED)
#define ExitEditMode()					mBitsClr(shell.status,ST_SHELL_PROMPT_DISABLED)

uint32_t Shell(uint32_t sc, ...)
{
   82e24:	b40f      	push	{r0, r1, r2, r3}
   82e26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82e2a:	b087      	sub	sp, #28
	uint32_t u1,u2;
	char*pSt;

	switch(sc)
   82e2c:	990e      	ldr	r1, [sp, #56]	; 0x38
   82e2e:	2904      	cmp	r1, #4
   82e30:	f000 809b 	beq.w	82f6a <Shell+0x146>
   82e34:	d93a      	bls.n	82eac <Shell+0x88>
   82e36:	2906      	cmp	r1, #6
   82e38:	d04e      	beq.n	82ed8 <Shell+0xb4>
   82e3a:	d35c      	bcc.n	82ef6 <Shell+0xd2>
   82e3c:	2907      	cmp	r1, #7
   82e3e:	f000 85ed 	beq.w	83a1c <Shell+0xbf8>
   82e42:	2964      	cmp	r1, #100	; 0x64
   82e44:	f040 866a 	bne.w	83b1c <Shell+0xcf8>
	{
	case SHELL_NEW:
		shell.editTimer=shell.escapeTimer=0;
   82e48:	4b9a      	ldr	r3, [pc, #616]	; (830b4 <Shell+0x290>)
   82e4a:	2400      	movs	r4, #0
   82e4c:	619c      	str	r4, [r3, #24]
   82e4e:	615c      	str	r4, [r3, #20]
		shell.state=IDLE;
   82e50:	771c      	strb	r4, [r3, #28]
		shell.status=ST_SHELL_SHOW_UNKNOW_CRC;
   82e52:	2202      	movs	r2, #2
   82e54:	801a      	strh	r2, [r3, #0]
		Lcd(LCD_NEW);
   82e56:	2064      	movs	r0, #100	; 0x64
   82e58:	4b97      	ldr	r3, [pc, #604]	; (830b8 <Shell+0x294>)
   82e5a:	4798      	blx	r3
		gpio_configure_pin(HEART_LED, HEART_LED_FLAGS);
   82e5c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82e60:	2034      	movs	r0, #52	; 0x34
   82e62:	4d96      	ldr	r5, [pc, #600]	; (830bc <Shell+0x298>)
   82e64:	47a8      	blx	r5
		gpio_configure_pin(POWER_LED, POWER_LED_FLAGS);
   82e66:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82e6a:	2033      	movs	r0, #51	; 0x33
   82e6c:	47a8      	blx	r5

#if POWER_LED_ACTIVE_LEVEL
		gpio_set_pin_low(POWER_LED);
   82e6e:	2033      	movs	r0, #51	; 0x33
   82e70:	4b93      	ldr	r3, [pc, #588]	; (830c0 <Shell+0x29c>)
   82e72:	4798      	blx	r3
#else
		gpio_set_pin_high(POWER_LED);
#endif
		kRtc(KRTC_NEW);
   82e74:	2064      	movs	r0, #100	; 0x64
   82e76:	4b93      	ldr	r3, [pc, #588]	; (830c4 <Shell+0x2a0>)
   82e78:	4798      	blx	r3
		Shellcom(SHELLCOM_NEW);
   82e7a:	2064      	movs	r0, #100	; 0x64
   82e7c:	4b92      	ldr	r3, [pc, #584]	; (830c8 <Shell+0x2a4>)
   82e7e:	4798      	blx	r3
		//LcdPutstr("Hello World!",0,0);
		//LcdPutstr("Hello World!",1,1);
		//LcdPutstr("Hello World!",2,2);
		//LcdPutstr("Hello World!",3,3);
		PushTask(Shell,_SHELL_HEART_BEAT,-1,0);
   82e80:	4e92      	ldr	r6, [pc, #584]	; (830cc <Shell+0x2a8>)
   82e82:	9400      	str	r4, [sp, #0]
   82e84:	f04f 33ff 	mov.w	r3, #4294967295
   82e88:	2201      	movs	r2, #1
   82e8a:	4631      	mov	r1, r6
   82e8c:	2066      	movs	r0, #102	; 0x66
   82e8e:	4d90      	ldr	r5, [pc, #576]	; (830d0 <Shell+0x2ac>)
   82e90:	47a8      	blx	r5
		PushTask(Shell,_SHELL_PROMPT,0,0);
   82e92:	9400      	str	r4, [sp, #0]
   82e94:	4623      	mov	r3, r4
   82e96:	2204      	movs	r2, #4
   82e98:	4631      	mov	r1, r6
   82e9a:	2066      	movs	r0, #102	; 0x66
   82e9c:	47a8      	blx	r5

	/////// INVALID SC CODE TRAP ERROR /////////////////////////////////////////////////////////////////
	default:
		Error(ERROR_SHELL_SWITCH_BAD_SC,sc);
	}
	return 0;
   82e9e:	46a0      	mov	r8, r4
}
   82ea0:	4640      	mov	r0, r8
   82ea2:	b007      	add	sp, #28
   82ea4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82ea8:	b004      	add	sp, #16
   82eaa:	4770      	bx	lr
	switch(sc)
   82eac:	2902      	cmp	r1, #2
   82eae:	f000 80a6 	beq.w	82ffe <Shell+0x1da>
   82eb2:	f200 833a 	bhi.w	8352a <Shell+0x706>
   82eb6:	2901      	cmp	r1, #1
   82eb8:	f040 8630 	bne.w	83b1c <Shell+0xcf8>
		if(heartBeatRhythm[++k]==0) k=0;
   82ebc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82ebe:	3301      	adds	r3, #1
   82ec0:	930f      	str	r3, [sp, #60]	; 0x3c
   82ec2:	4a84      	ldr	r2, [pc, #528]	; (830d4 <Shell+0x2b0>)
   82ec4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   82ec8:	2a00      	cmp	r2, #0
   82eca:	d13b      	bne.n	82f44 <Shell+0x120>
   82ecc:	2300      	movs	r3, #0
   82ece:	930f      	str	r3, [sp, #60]	; 0x3c
		else gpio_set_pin_low(HEART_LED);
   82ed0:	2034      	movs	r0, #52	; 0x34
   82ed2:	4b7b      	ldr	r3, [pc, #492]	; (830c0 <Shell+0x29c>)
   82ed4:	4798      	blx	r3
   82ed6:	e03b      	b.n	82f50 <Shell+0x12c>
	    while((*(char*)_pSep)&&(*(char*)_pSep!=_ch)) _pSep++;
   82ed8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82eda:	781a      	ldrb	r2, [r3, #0]
   82edc:	b14a      	cbz	r2, 82ef2 <Shell+0xce>
   82ede:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   82ee2:	428a      	cmp	r2, r1
   82ee4:	d005      	beq.n	82ef2 <Shell+0xce>
   82ee6:	3301      	adds	r3, #1
   82ee8:	9310      	str	r3, [sp, #64]	; 0x40
   82eea:	781a      	ldrb	r2, [r3, #0]
   82eec:	b10a      	cbz	r2, 82ef2 <Shell+0xce>
   82eee:	428a      	cmp	r2, r1
   82ef0:	d1f9      	bne.n	82ee6 <Shell+0xc2>
	    return (uint32_t)*(char*)_pSep;
   82ef2:	4690      	mov	r8, r2
   82ef4:	e7d4      	b.n	82ea0 <Shell+0x7c>
		while(len--)
   82ef6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   82efa:	f108 33ff 	add.w	r3, r8, #4294967295
   82efe:	9310      	str	r3, [sp, #64]	; 0x40
   82f00:	f1b8 0f00 	cmp.w	r8, #0
   82f04:	d0cc      	beq.n	82ea0 <Shell+0x7c>
			Putch(hexDigits[*(char*)str>>4]);
   82f06:	4e74      	ldr	r6, [pc, #464]	; (830d8 <Shell+0x2b4>)
   82f08:	2566      	movs	r5, #102	; 0x66
   82f0a:	4c6f      	ldr	r4, [pc, #444]	; (830c8 <Shell+0x2a4>)
   82f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82f0e:	781b      	ldrb	r3, [r3, #0]
   82f10:	091b      	lsrs	r3, r3, #4
   82f12:	5cf1      	ldrb	r1, [r6, r3]
   82f14:	4628      	mov	r0, r5
   82f16:	47a0      	blx	r4
			Putch(hexDigits[*(char*)str&0x0F]);
   82f18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82f1a:	781b      	ldrb	r3, [r3, #0]
   82f1c:	f003 030f 	and.w	r3, r3, #15
   82f20:	5cf1      	ldrb	r1, [r6, r3]
   82f22:	4628      	mov	r0, r5
   82f24:	47a0      	blx	r4
			Putch(' ');
   82f26:	2120      	movs	r1, #32
   82f28:	4628      	mov	r0, r5
   82f2a:	47a0      	blx	r4
			str++;
   82f2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82f2e:	3301      	adds	r3, #1
   82f30:	930f      	str	r3, [sp, #60]	; 0x3c
		while(len--)
   82f32:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   82f36:	f108 33ff 	add.w	r3, r8, #4294967295
   82f3a:	9310      	str	r3, [sp, #64]	; 0x40
   82f3c:	f1b8 0f00 	cmp.w	r8, #0
   82f40:	d1e4      	bne.n	82f0c <Shell+0xe8>
   82f42:	e7ad      	b.n	82ea0 <Shell+0x7c>
		if((k%2==0)^(!HEART_LED_ACTIVE_LEVEL)) gpio_set_pin_high(HEART_LED);
   82f44:	f013 0f01 	tst.w	r3, #1
   82f48:	d0c2      	beq.n	82ed0 <Shell+0xac>
   82f4a:	2034      	movs	r0, #52	; 0x34
   82f4c:	4b63      	ldr	r3, [pc, #396]	; (830dc <Shell+0x2b8>)
   82f4e:	4798      	blx	r3
		PushTask(Shell,_SHELL_HEART_BEAT,k,heartBeatRhythm[k]);
   82f50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82f52:	4a60      	ldr	r2, [pc, #384]	; (830d4 <Shell+0x2b0>)
   82f54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   82f58:	9200      	str	r2, [sp, #0]
   82f5a:	2201      	movs	r2, #1
   82f5c:	495b      	ldr	r1, [pc, #364]	; (830cc <Shell+0x2a8>)
   82f5e:	2066      	movs	r0, #102	; 0x66
   82f60:	4c5b      	ldr	r4, [pc, #364]	; (830d0 <Shell+0x2ac>)
   82f62:	47a0      	blx	r4
	return 0;
   82f64:	f04f 0800 	mov.w	r8, #0
		break;
   82f68:	e79a      	b.n	82ea0 <Shell+0x7c>
		rtc_get_time(RTC,&_hour,&_minute,&_second);
   82f6a:	ab05      	add	r3, sp, #20
   82f6c:	aa0f      	add	r2, sp, #60	; 0x3c
   82f6e:	a90e      	add	r1, sp, #56	; 0x38
   82f70:	485b      	ldr	r0, [pc, #364]	; (830e0 <Shell+0x2bc>)
   82f72:	4c5c      	ldr	r4, [pc, #368]	; (830e4 <Shell+0x2c0>)
   82f74:	47a0      	blx	r4
		if(mIsBitsClr(shell.status,ST_SHELL_PROMPT_DISABLED))
   82f76:	4b4f      	ldr	r3, [pc, #316]	; (830b4 <Shell+0x290>)
   82f78:	881b      	ldrh	r3, [r3, #0]
   82f7a:	f013 0f04 	tst.w	r3, #4
   82f7e:	d030      	beq.n	82fe2 <Shell+0x1be>
		if(IsLcdOn())
   82f80:	2069      	movs	r0, #105	; 0x69
   82f82:	4b4d      	ldr	r3, [pc, #308]	; (830b8 <Shell+0x294>)
   82f84:	4798      	blx	r3
   82f86:	4680      	mov	r8, r0
   82f88:	2800      	cmp	r0, #0
   82f8a:	d089      	beq.n	82ea0 <Shell+0x7c>
			sprintf(shellTmpBuf,"%02d:%02d:%02d",(int)_hour,(int)_minute,(int)_second);
   82f8c:	ad0e      	add	r5, sp, #56	; 0x38
   82f8e:	f855 2b04 	ldr.w	r2, [r5], #4
   82f92:	4c55      	ldr	r4, [pc, #340]	; (830e8 <Shell+0x2c4>)
   82f94:	ae06      	add	r6, sp, #24
   82f96:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   82f9a:	9300      	str	r3, [sp, #0]
   82f9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82f9e:	4953      	ldr	r1, [pc, #332]	; (830ec <Shell+0x2c8>)
   82fa0:	4620      	mov	r0, r4
   82fa2:	f8df 8158 	ldr.w	r8, [pc, #344]	; 830fc <Shell+0x2d8>
   82fa6:	47c0      	blx	r8
			LcdPutstr(shellTmpBuf,1,6);
   82fa8:	2306      	movs	r3, #6
   82faa:	2201      	movs	r2, #1
   82fac:	4621      	mov	r1, r4
   82fae:	2068      	movs	r0, #104	; 0x68
   82fb0:	4f41      	ldr	r7, [pc, #260]	; (830b8 <Shell+0x294>)
   82fb2:	47b8      	blx	r7
			rtc_get_date(RTC,&_year,&_month,&_date,&_day);
   82fb4:	ab04      	add	r3, sp, #16
   82fb6:	9300      	str	r3, [sp, #0]
   82fb8:	4633      	mov	r3, r6
   82fba:	462a      	mov	r2, r5
   82fbc:	a90e      	add	r1, sp, #56	; 0x38
   82fbe:	4848      	ldr	r0, [pc, #288]	; (830e0 <Shell+0x2bc>)
   82fc0:	4d4b      	ldr	r5, [pc, #300]	; (830f0 <Shell+0x2cc>)
   82fc2:	47a8      	blx	r5
			sprintf(shellTmpBuf,"%02d/%02d/%04d",(int)_date,(int)_month,(int)_year);
   82fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82fc6:	9300      	str	r3, [sp, #0]
   82fc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82fca:	9a05      	ldr	r2, [sp, #20]
   82fcc:	4949      	ldr	r1, [pc, #292]	; (830f4 <Shell+0x2d0>)
   82fce:	4620      	mov	r0, r4
   82fd0:	47c0      	blx	r8
			LcdPutstr(shellTmpBuf,0,5);
   82fd2:	2305      	movs	r3, #5
   82fd4:	2200      	movs	r2, #0
   82fd6:	4621      	mov	r1, r4
   82fd8:	2068      	movs	r0, #104	; 0x68
   82fda:	47b8      	blx	r7
	return 0;
   82fdc:	f04f 0800 	mov.w	r8, #0
   82fe0:	e75e      	b.n	82ea0 <Shell+0x7c>
			sprintf(shellTmpBuf,"\r%02d:%02d:%02d",(int)_hour,(int)_minute,(int)_second);
   82fe2:	4c41      	ldr	r4, [pc, #260]	; (830e8 <Shell+0x2c4>)
   82fe4:	9b05      	ldr	r3, [sp, #20]
   82fe6:	9300      	str	r3, [sp, #0]
   82fe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82fea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82fec:	4942      	ldr	r1, [pc, #264]	; (830f8 <Shell+0x2d4>)
   82fee:	4620      	mov	r0, r4
   82ff0:	4d42      	ldr	r5, [pc, #264]	; (830fc <Shell+0x2d8>)
   82ff2:	47a8      	blx	r5
			Putstr(shellTmpBuf);
   82ff4:	4621      	mov	r1, r4
   82ff6:	2067      	movs	r0, #103	; 0x67
   82ff8:	4b33      	ldr	r3, [pc, #204]	; (830c8 <Shell+0x2a4>)
   82ffa:	4798      	blx	r3
   82ffc:	e7c0      	b.n	82f80 <Shell+0x15c>
		switch(shell.state)
   82ffe:	4b2d      	ldr	r3, [pc, #180]	; (830b4 <Shell+0x290>)
   83000:	7f1b      	ldrb	r3, [r3, #28]
   83002:	2b06      	cmp	r3, #6
   83004:	f200 8283 	bhi.w	8350e <Shell+0x6ea>
   83008:	e8df f013 	tbh	[pc, r3, lsl #1]
   8300c:	00820007 	.word	0x00820007
   83010:	00990085 	.word	0x00990085
   83014:	026d026a 	.word	0x026d026a
   83018:	01ba      	.short	0x01ba
			switch(_kbhitchar)
   8301a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8301c:	b2d3      	uxtb	r3, r2
   8301e:	3b08      	subs	r3, #8
   83020:	2b18      	cmp	r3, #24
   83022:	d82d      	bhi.n	83080 <Shell+0x25c>
   83024:	e8df f013 	tbh	[pc, r3, lsl #1]
   83028:	05810581 	.word	0x05810581
   8302c:	002c0581 	.word	0x002c0581
   83030:	0581002c 	.word	0x0581002c
   83034:	002c002c 	.word	0x002c002c
   83038:	002c002c 	.word	0x002c002c
   8303c:	002c002c 	.word	0x002c002c
   83040:	002c002c 	.word	0x002c002c
   83044:	002c002c 	.word	0x002c002c
   83048:	002c002c 	.word	0x002c002c
   8304c:	0019002c 	.word	0x0019002c
   83050:	002c002c 	.word	0x002c002c
   83054:	002c002c 	.word	0x002c002c
   83058:	0581      	.short	0x0581
				shell.escapeTimer=SHELL_ESC_TIMEOUT;
   8305a:	4c16      	ldr	r4, [pc, #88]	; (830b4 <Shell+0x290>)
   8305c:	2314      	movs	r3, #20
   8305e:	61a3      	str	r3, [r4, #24]
				*shell.pEscbuf++='\e';
   83060:	4b27      	ldr	r3, [pc, #156]	; (83100 <Shell+0x2dc>)
   83062:	60a3      	str	r3, [r4, #8]
   83064:	201b      	movs	r0, #27
   83066:	f803 0c01 	strb.w	r0, [r3, #-1]
				shell.nEscChar=1;
   8306a:	2501      	movs	r5, #1
   8306c:	81e5      	strh	r5, [r4, #14]
				shell.crc=CRC16MODBUSbyte('\e',0xFFFF);
   8306e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   83072:	4b24      	ldr	r3, [pc, #144]	; (83104 <Shell+0x2e0>)
   83074:	4798      	blx	r3
   83076:	8220      	strh	r0, [r4, #16]
				shell.state=ESCAPE;
   83078:	7725      	strb	r5, [r4, #28]
	return 0;
   8307a:	f04f 0800 	mov.w	r8, #0
				break;
   8307e:	e70f      	b.n	82ea0 <Shell+0x7c>
				EnterEditMode();
   83080:	4c0c      	ldr	r4, [pc, #48]	; (830b4 <Shell+0x290>)
   83082:	8823      	ldrh	r3, [r4, #0]
   83084:	f043 0304 	orr.w	r3, r3, #4
   83088:	8023      	strh	r3, [r4, #0]
				shell.editTimer=SHELL_EDIT_TIMEOUT;
   8308a:	2500      	movs	r5, #0
   8308c:	6165      	str	r5, [r4, #20]
				*shell.pEdit++=_kbhitchar;
   8308e:	4b1e      	ldr	r3, [pc, #120]	; (83108 <Shell+0x2e4>)
   83090:	6063      	str	r3, [r4, #4]
			switch(_kbhitchar)
   83092:	f803 2c01 	strb.w	r2, [r3, #-1]
				shell.nChar=1;
   83096:	2301      	movs	r3, #1
   83098:	81a3      	strh	r3, [r4, #12]
				Putstr("\r\n>"); Putch(_kbhitchar);
   8309a:	491c      	ldr	r1, [pc, #112]	; (8310c <Shell+0x2e8>)
   8309c:	2067      	movs	r0, #103	; 0x67
   8309e:	4e0a      	ldr	r6, [pc, #40]	; (830c8 <Shell+0x2a4>)
   830a0:	47b0      	blx	r6
   830a2:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   830a6:	2066      	movs	r0, #102	; 0x66
   830a8:	47b0      	blx	r6
				shell.state=EDITION;
   830aa:	2303      	movs	r3, #3
   830ac:	7723      	strb	r3, [r4, #28]
	return 0;
   830ae:	46a8      	mov	r8, r5
				break;
   830b0:	e6f6      	b.n	82ea0 <Shell+0x7c>
   830b2:	bf00      	nop
   830b4:	20001670 	.word	0x20001670
   830b8:	000829cd 	.word	0x000829cd
   830bc:	00081431 	.word	0x00081431
   830c0:	000813f7 	.word	0x000813f7
   830c4:	0008268d 	.word	0x0008268d
   830c8:	00083f55 	.word	0x00083f55
   830cc:	00082e25 	.word	0x00082e25
   830d0:	000841e5 	.word	0x000841e5
   830d4:	00089d38 	.word	0x00089d38
   830d8:	00089d4c 	.word	0x00089d4c
   830dc:	000813dd 	.word	0x000813dd
   830e0:	400e1260 	.word	0x400e1260
   830e4:	00081875 	.word	0x00081875
   830e8:	20001710 	.word	0x20001710
   830ec:	00089c90 	.word	0x00089c90
   830f0:	00081965 	.word	0x00081965
   830f4:	00089ca0 	.word	0x00089ca0
   830f8:	00089c80 	.word	0x00089c80
   830fc:	00084b49 	.word	0x00084b49
   83100:	20001691 	.word	0x20001691
   83104:	00082449 	.word	0x00082449
   83108:	2000156d 	.word	0x2000156d
   8310c:	00089cb0 	.word	0x00089cb0
				shell.state=ESCAPE_SEQ;
   83110:	2202      	movs	r2, #2
   83112:	4b91      	ldr	r3, [pc, #580]	; (83358 <Shell+0x534>)
   83114:	771a      	strb	r2, [r3, #28]
				shell.escapeTimer=SHELL_ESC_TIMEOUT;
   83116:	4c90      	ldr	r4, [pc, #576]	; (83358 <Shell+0x534>)
   83118:	2314      	movs	r3, #20
   8311a:	61a3      	str	r3, [r4, #24]
				*shell.pEscbuf++=_kbhitchar;
   8311c:	68a3      	ldr	r3, [r4, #8]
   8311e:	1c5a      	adds	r2, r3, #1
   83120:	60a2      	str	r2, [r4, #8]
   83122:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83124:	701a      	strb	r2, [r3, #0]
				shell.nEscChar++;
   83126:	89e3      	ldrh	r3, [r4, #14]
   83128:	3301      	adds	r3, #1
   8312a:	81e3      	strh	r3, [r4, #14]
				shell.crc=CRC16MODBUSbyte(_kbhitchar,shell.crc);
   8312c:	8a21      	ldrh	r1, [r4, #16]
   8312e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   83132:	4b8a      	ldr	r3, [pc, #552]	; (8335c <Shell+0x538>)
   83134:	4798      	blx	r3
   83136:	8220      	strh	r0, [r4, #16]
	return 0;
   83138:	f04f 0800 	mov.w	r8, #0
			break;
   8313c:	e6b0      	b.n	82ea0 <Shell+0x7c>
			shell.editTimer=SHELL_EDIT_TIMEOUT;
   8313e:	2200      	movs	r2, #0
   83140:	4b85      	ldr	r3, [pc, #532]	; (83358 <Shell+0x534>)
   83142:	615a      	str	r2, [r3, #20]
			switch(_kbhitchar)
   83144:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83146:	b2d1      	uxtb	r1, r2
   83148:	f1a1 0308 	sub.w	r3, r1, #8
   8314c:	2b13      	cmp	r3, #19
   8314e:	f200 8094 	bhi.w	8327a <Shell+0x456>
   83152:	e8df f003 	tbb	[pc, r3]
   83156:	1e36      	.short	0x1e36
   83158:	74929274 	.word	0x74929274
   8315c:	92929292 	.word	0x92929292
   83160:	92929292 	.word	0x92929292
   83164:	92929292 	.word	0x92929292
   83168:	0a92      	.short	0x0a92
				shell.escapeTimer=SHELL_ESC_TIMEOUT;
   8316a:	4c7b      	ldr	r4, [pc, #492]	; (83358 <Shell+0x534>)
   8316c:	2314      	movs	r3, #20
   8316e:	61a3      	str	r3, [r4, #24]
				*shell.pEscbuf++='\e';
   83170:	4b7b      	ldr	r3, [pc, #492]	; (83360 <Shell+0x53c>)
   83172:	60a3      	str	r3, [r4, #8]
   83174:	201b      	movs	r0, #27
   83176:	f803 0c01 	strb.w	r0, [r3, #-1]
				shell.nEscChar=1;
   8317a:	2301      	movs	r3, #1
   8317c:	81e3      	strh	r3, [r4, #14]
				shell.crc=CRC16MODBUSbyte('\e',0xFFFF);
   8317e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   83182:	4b76      	ldr	r3, [pc, #472]	; (8335c <Shell+0x538>)
   83184:	4798      	blx	r3
   83186:	8220      	strh	r0, [r4, #16]
				shell.state=ED_ESCAPE;
   83188:	2304      	movs	r3, #4
   8318a:	7723      	strb	r3, [r4, #28]
	return 0;
   8318c:	f04f 0800 	mov.w	r8, #0
				break;
   83190:	e686      	b.n	82ea0 <Shell+0x7c>
				const char ctrl_right_arrow[]="\e[1;5C";
   83192:	4b74      	ldr	r3, [pc, #464]	; (83364 <Shell+0x540>)
   83194:	e893 0003 	ldmia.w	r3, {r0, r1}
   83198:	9002      	str	r0, [sp, #8]
   8319a:	f8ad 100c 	strh.w	r1, [sp, #12]
   8319e:	0c09      	lsrs	r1, r1, #16
   831a0:	f88d 100e 	strb.w	r1, [sp, #14]
				memcpy(shellEscapeBuf,ctrl_right_arrow,6);
   831a4:	4b70      	ldr	r3, [pc, #448]	; (83368 <Shell+0x544>)
   831a6:	6018      	str	r0, [r3, #0]
   831a8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   831ac:	809a      	strh	r2, [r3, #4]
				shell.nEscChar=6;
   831ae:	4b6a      	ldr	r3, [pc, #424]	; (83358 <Shell+0x534>)
   831b0:	2206      	movs	r2, #6
   831b2:	81da      	strh	r2, [r3, #14]
				shell.state=ED_ESCAPE_SEQ;
   831b4:	2205      	movs	r2, #5
   831b6:	771a      	strb	r2, [r3, #28]
				shell.escapeTimer=1;	//Ask a ESC SEQUENCE timeout : treat as a "ctrl+right_arrow" key
   831b8:	2201      	movs	r2, #1
   831ba:	619a      	str	r2, [r3, #24]
	return 0;
   831bc:	f04f 0800 	mov.w	r8, #0
				break;
   831c0:	e66e      	b.n	82ea0 <Shell+0x7c>
                if(shell.nChar)
   831c2:	4b65      	ldr	r3, [pc, #404]	; (83358 <Shell+0x534>)
   831c4:	899a      	ldrh	r2, [r3, #12]
   831c6:	2a00      	cmp	r2, #0
   831c8:	f000 84b3 	beq.w	83b32 <Shell+0xd0e>
	                pEnd = (uint32_t)shellEditBuf+shell.nChar;
   831cc:	4c67      	ldr	r4, [pc, #412]	; (8336c <Shell+0x548>)
   831ce:	4422      	add	r2, r4
   831d0:	920e      	str	r2, [sp, #56]	; 0x38
	                pSrc = (uint32_t)shell.pEdit;
   831d2:	685b      	ldr	r3, [r3, #4]
   831d4:	9305      	str	r3, [sp, #20]
	                while(pSrc<pEnd)
   831d6:	429a      	cmp	r2, r3
   831d8:	d908      	bls.n	831ec <Shell+0x3c8>
		                *(char*)(pSrc-1)=*(char*)pSrc; pSrc++;
   831da:	781a      	ldrb	r2, [r3, #0]
   831dc:	f803 2c01 	strb.w	r2, [r3, #-1]
   831e0:	9b05      	ldr	r3, [sp, #20]
   831e2:	3301      	adds	r3, #1
   831e4:	9305      	str	r3, [sp, #20]
	                while(pSrc<pEnd)
   831e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   831e8:	429a      	cmp	r2, r3
   831ea:	d8f6      	bhi.n	831da <Shell+0x3b6>
	                *(char*)pSrc++=' ';
   831ec:	2220      	movs	r2, #32
   831ee:	f803 2c01 	strb.w	r2, [r3, #-1]
	                Putstr("\e[D");
   831f2:	4d5f      	ldr	r5, [pc, #380]	; (83370 <Shell+0x54c>)
   831f4:	4629      	mov	r1, r5
   831f6:	2067      	movs	r0, #103	; 0x67
   831f8:	4e5e      	ldr	r6, [pc, #376]	; (83374 <Shell+0x550>)
   831fa:	47b0      	blx	r6
	                shell.pEdit--; shell.nChar--;
   831fc:	4a56      	ldr	r2, [pc, #344]	; (83358 <Shell+0x534>)
   831fe:	6851      	ldr	r1, [r2, #4]
   83200:	3901      	subs	r1, #1
   83202:	6051      	str	r1, [r2, #4]
   83204:	8993      	ldrh	r3, [r2, #12]
   83206:	3b01      	subs	r3, #1
   83208:	b29b      	uxth	r3, r3
   8320a:	8193      	strh	r3, [r2, #12]
	                k=Putstrlen(shell.pEdit,shell.nChar-(shell.pEdit-shellEditBuf)+1);
   8320c:	1c62      	adds	r2, r4, #1
   8320e:	441a      	add	r2, r3
   83210:	1a52      	subs	r2, r2, r1
   83212:	2068      	movs	r0, #104	; 0x68
   83214:	47b0      	blx	r6
   83216:	4680      	mov	r8, r0
	                while(k--) Putstr("\e[D");
   83218:	1e43      	subs	r3, r0, #1
   8321a:	9305      	str	r3, [sp, #20]
   8321c:	2800      	cmp	r0, #0
   8321e:	f43f ae3f 	beq.w	82ea0 <Shell+0x7c>
   83222:	2667      	movs	r6, #103	; 0x67
   83224:	4c53      	ldr	r4, [pc, #332]	; (83374 <Shell+0x550>)
   83226:	4629      	mov	r1, r5
   83228:	4630      	mov	r0, r6
   8322a:	47a0      	blx	r4
   8322c:	f8dd 8014 	ldr.w	r8, [sp, #20]
   83230:	f108 33ff 	add.w	r3, r8, #4294967295
   83234:	9305      	str	r3, [sp, #20]
   83236:	f1b8 0f00 	cmp.w	r8, #0
   8323a:	d1f4      	bne.n	83226 <Shell+0x402>
   8323c:	e630      	b.n	82ea0 <Shell+0x7c>
				if(shell.nChar==0)
   8323e:	4b46      	ldr	r3, [pc, #280]	; (83358 <Shell+0x534>)
   83240:	899b      	ldrh	r3, [r3, #12]
   83242:	b96b      	cbnz	r3, 83260 <Shell+0x43c>
					ExitEditMode();
   83244:	4b44      	ldr	r3, [pc, #272]	; (83358 <Shell+0x534>)
   83246:	881a      	ldrh	r2, [r3, #0]
   83248:	f022 0204 	bic.w	r2, r2, #4
   8324c:	801a      	strh	r2, [r3, #0]
					shell.state=IDLE;
   8324e:	f04f 0800 	mov.w	r8, #0
   83252:	f883 801c 	strb.w	r8, [r3, #28]
					Putch('\r');
   83256:	210d      	movs	r1, #13
   83258:	2066      	movs	r0, #102	; 0x66
   8325a:	4b46      	ldr	r3, [pc, #280]	; (83374 <Shell+0x550>)
   8325c:	4798      	blx	r3
   8325e:	e61f      	b.n	82ea0 <Shell+0x7c>
					shell.state=EXECUTION;
   83260:	2206      	movs	r2, #6
   83262:	4b3d      	ldr	r3, [pc, #244]	; (83358 <Shell+0x534>)
   83264:	771a      	strb	r2, [r3, #28]
					PushTask(Shell,_SHELL_KBHIT,'\r',0);
   83266:	2400      	movs	r4, #0
   83268:	9400      	str	r4, [sp, #0]
   8326a:	230d      	movs	r3, #13
   8326c:	2202      	movs	r2, #2
   8326e:	4942      	ldr	r1, [pc, #264]	; (83378 <Shell+0x554>)
   83270:	2066      	movs	r0, #102	; 0x66
   83272:	4d42      	ldr	r5, [pc, #264]	; (8337c <Shell+0x558>)
   83274:	47a8      	blx	r5
	return 0;
   83276:	46a0      	mov	r8, r4
   83278:	e612      	b.n	82ea0 <Shell+0x7c>
			switch(_kbhitchar)
   8327a:	b2d2      	uxtb	r2, r2
				if(shell.nChar==0)
   8327c:	4b36      	ldr	r3, [pc, #216]	; (83358 <Shell+0x534>)
   8327e:	899b      	ldrh	r3, [r3, #12]
   83280:	b983      	cbnz	r3, 832a4 <Shell+0x480>
					if(_kbhitchar!=0x20) //Excluding space char
   83282:	2a20      	cmp	r2, #32
   83284:	f000 8459 	beq.w	83b3a <Shell+0xd16>
						Putch((*shell.pEdit++=_kbhitchar)); shell.nChar++;
   83288:	4c33      	ldr	r4, [pc, #204]	; (83358 <Shell+0x534>)
   8328a:	6863      	ldr	r3, [r4, #4]
   8328c:	1c58      	adds	r0, r3, #1
   8328e:	6060      	str	r0, [r4, #4]
   83290:	701a      	strb	r2, [r3, #0]
   83292:	2066      	movs	r0, #102	; 0x66
   83294:	4b37      	ldr	r3, [pc, #220]	; (83374 <Shell+0x550>)
   83296:	4798      	blx	r3
   83298:	89a3      	ldrh	r3, [r4, #12]
   8329a:	3301      	adds	r3, #1
   8329c:	81a3      	strh	r3, [r4, #12]
	return 0;
   8329e:	f04f 0800 	mov.w	r8, #0
   832a2:	e5fd      	b.n	82ea0 <Shell+0x7c>
				else if(shell.nChar<(SHELL_EDITBUF_LEN))
   832a4:	2bff      	cmp	r3, #255	; 0xff
   832a6:	f200 845b 	bhi.w	83b60 <Shell+0xd3c>
					if(mIsBitsClr(shell.status,ST_SHELL_INSERT_MODE))
   832aa:	482b      	ldr	r0, [pc, #172]	; (83358 <Shell+0x534>)
   832ac:	8800      	ldrh	r0, [r0, #0]
   832ae:	f010 0f01 	tst.w	r0, #1
   832b2:	d112      	bne.n	832da <Shell+0x4b6>
						if(shell.pEdit==shellEditBuf+shell.nChar)	shell.nChar++;
   832b4:	4828      	ldr	r0, [pc, #160]	; (83358 <Shell+0x534>)
   832b6:	6840      	ldr	r0, [r0, #4]
   832b8:	4c2c      	ldr	r4, [pc, #176]	; (8336c <Shell+0x548>)
   832ba:	441c      	add	r4, r3
   832bc:	42a0      	cmp	r0, r4
   832be:	d102      	bne.n	832c6 <Shell+0x4a2>
   832c0:	3301      	adds	r3, #1
   832c2:	4c25      	ldr	r4, [pc, #148]	; (83358 <Shell+0x534>)
   832c4:	81a3      	strh	r3, [r4, #12]
						Putch((*shell.pEdit++=_kbhitchar));
   832c6:	1c44      	adds	r4, r0, #1
   832c8:	4b23      	ldr	r3, [pc, #140]	; (83358 <Shell+0x534>)
   832ca:	605c      	str	r4, [r3, #4]
   832cc:	7002      	strb	r2, [r0, #0]
   832ce:	2066      	movs	r0, #102	; 0x66
   832d0:	4b28      	ldr	r3, [pc, #160]	; (83374 <Shell+0x550>)
   832d2:	4798      	blx	r3
	return 0;
   832d4:	f04f 0800 	mov.w	r8, #0
   832d8:	e5e2      	b.n	82ea0 <Shell+0x7c>
						if(shell.pEdit!=shellEditBuf+shell.nChar)
   832da:	4a1f      	ldr	r2, [pc, #124]	; (83358 <Shell+0x534>)
   832dc:	6851      	ldr	r1, [r2, #4]
   832de:	4a23      	ldr	r2, [pc, #140]	; (8336c <Shell+0x548>)
   832e0:	441a      	add	r2, r3
   832e2:	4291      	cmp	r1, r2
   832e4:	d00f      	beq.n	83306 <Shell+0x4e2>
							pDst=(uint32_t)shellEditBuf+shell.nChar;
   832e6:	4a21      	ldr	r2, [pc, #132]	; (8336c <Shell+0x548>)
   832e8:	4413      	add	r3, r2
   832ea:	930e      	str	r3, [sp, #56]	; 0x38
							while(pDst-1>=(uint32_t)shell.pEdit)
   832ec:	1e5a      	subs	r2, r3, #1
   832ee:	4291      	cmp	r1, r2
   832f0:	d809      	bhi.n	83306 <Shell+0x4e2>
   832f2:	4919      	ldr	r1, [pc, #100]	; (83358 <Shell+0x534>)
								*(char*)pDst=*(char*)(pDst-1); pDst--;
   832f4:	7812      	ldrb	r2, [r2, #0]
   832f6:	701a      	strb	r2, [r3, #0]
   832f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   832fa:	1e53      	subs	r3, r2, #1
   832fc:	930e      	str	r3, [sp, #56]	; 0x38
							while(pDst-1>=(uint32_t)shell.pEdit)
   832fe:	3a02      	subs	r2, #2
   83300:	6848      	ldr	r0, [r1, #4]
   83302:	4290      	cmp	r0, r2
   83304:	d9f6      	bls.n	832f4 <Shell+0x4d0>
						Putch((*shell.pEdit++=_kbhitchar)); shell.nChar++;
   83306:	4c14      	ldr	r4, [pc, #80]	; (83358 <Shell+0x534>)
   83308:	6863      	ldr	r3, [r4, #4]
   8330a:	1c5a      	adds	r2, r3, #1
   8330c:	6062      	str	r2, [r4, #4]
   8330e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   83310:	7019      	strb	r1, [r3, #0]
   83312:	b2c9      	uxtb	r1, r1
   83314:	2066      	movs	r0, #102	; 0x66
   83316:	4d17      	ldr	r5, [pc, #92]	; (83374 <Shell+0x550>)
   83318:	47a8      	blx	r5
   8331a:	89a3      	ldrh	r3, [r4, #12]
   8331c:	3301      	adds	r3, #1
   8331e:	b29b      	uxth	r3, r3
   83320:	81a3      	strh	r3, [r4, #12]
						k=Putstrlen(shell.pEdit,(shellEditBuf+shell.nChar-shell.pEdit));
   83322:	6861      	ldr	r1, [r4, #4]
   83324:	4a11      	ldr	r2, [pc, #68]	; (8336c <Shell+0x548>)
   83326:	441a      	add	r2, r3
   83328:	1a52      	subs	r2, r2, r1
   8332a:	2068      	movs	r0, #104	; 0x68
   8332c:	47a8      	blx	r5
   8332e:	4680      	mov	r8, r0
						while(k--) Putstr("\e[D");
   83330:	1e43      	subs	r3, r0, #1
   83332:	930e      	str	r3, [sp, #56]	; 0x38
   83334:	2800      	cmp	r0, #0
   83336:	f43f adb3 	beq.w	82ea0 <Shell+0x7c>
   8333a:	4e0d      	ldr	r6, [pc, #52]	; (83370 <Shell+0x54c>)
   8333c:	2567      	movs	r5, #103	; 0x67
   8333e:	4c0d      	ldr	r4, [pc, #52]	; (83374 <Shell+0x550>)
   83340:	4631      	mov	r1, r6
   83342:	4628      	mov	r0, r5
   83344:	47a0      	blx	r4
   83346:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   8334a:	f108 33ff 	add.w	r3, r8, #4294967295
   8334e:	930e      	str	r3, [sp, #56]	; 0x38
   83350:	f1b8 0f00 	cmp.w	r8, #0
   83354:	d1f4      	bne.n	83340 <Shell+0x51c>
   83356:	e5a3      	b.n	82ea0 <Shell+0x7c>
   83358:	20001670 	.word	0x20001670
   8335c:	00082449 	.word	0x00082449
   83360:	20001691 	.word	0x20001691
   83364:	00089d30 	.word	0x00089d30
   83368:	20001690 	.word	0x20001690
   8336c:	2000156c 	.word	0x2000156c
   83370:	00089cb4 	.word	0x00089cb4
   83374:	00083f55 	.word	0x00083f55
   83378:	00082e25 	.word	0x00082e25
   8337c:	000841e5 	.word	0x000841e5
			k=shell.nChar-(shell.pEdit-shellEditBuf);
   83380:	4a91      	ldr	r2, [pc, #580]	; (835c8 <Shell+0x7a4>)
   83382:	8993      	ldrh	r3, [r2, #12]
   83384:	6852      	ldr	r2, [r2, #4]
   83386:	4991      	ldr	r1, [pc, #580]	; (835cc <Shell+0x7a8>)
   83388:	1a52      	subs	r2, r2, r1
   8338a:	1a9b      	subs	r3, r3, r2
			while(k--) Putstr("\e[C");
   8338c:	1e5a      	subs	r2, r3, #1
   8338e:	9205      	str	r2, [sp, #20]
   83390:	b153      	cbz	r3, 833a8 <Shell+0x584>
   83392:	4e8f      	ldr	r6, [pc, #572]	; (835d0 <Shell+0x7ac>)
   83394:	2567      	movs	r5, #103	; 0x67
   83396:	4c8f      	ldr	r4, [pc, #572]	; (835d4 <Shell+0x7b0>)
   83398:	4631      	mov	r1, r6
   8339a:	4628      	mov	r0, r5
   8339c:	47a0      	blx	r4
   8339e:	9b05      	ldr	r3, [sp, #20]
   833a0:	1e5a      	subs	r2, r3, #1
   833a2:	9205      	str	r2, [sp, #20]
   833a4:	2b00      	cmp	r3, #0
   833a6:	d1f7      	bne.n	83398 <Shell+0x574>
			shell.pEdit=shellEditBuf+shell.nChar;
   833a8:	4d87      	ldr	r5, [pc, #540]	; (835c8 <Shell+0x7a4>)
   833aa:	89aa      	ldrh	r2, [r5, #12]
   833ac:	4c87      	ldr	r4, [pc, #540]	; (835cc <Shell+0x7a8>)
   833ae:	1913      	adds	r3, r2, r4
			*shell.pEdit++='\0';
   833b0:	3301      	adds	r3, #1
   833b2:	606b      	str	r3, [r5, #4]
   833b4:	2600      	movs	r6, #0
   833b6:	5516      	strb	r6, [r2, r4]
			_CleanUp_cmd_Line();
   833b8:	2007      	movs	r0, #7
   833ba:	f7ff fd33 	bl	82e24 <Shell>
			shell.pEdit=shellEditBuf+shell.nChar;
   833be:	89aa      	ldrh	r2, [r5, #12]
   833c0:	1913      	adds	r3, r2, r4
			*shell.pEdit++='\0';
   833c2:	3301      	adds	r3, #1
   833c4:	606b      	str	r3, [r5, #4]
   833c6:	5516      	strb	r6, [r2, r4]
			Putstr("\r\n/>");
   833c8:	4983      	ldr	r1, [pc, #524]	; (835d8 <Shell+0x7b4>)
   833ca:	2067      	movs	r0, #103	; 0x67
   833cc:	4d81      	ldr	r5, [pc, #516]	; (835d4 <Shell+0x7b0>)
   833ce:	47a8      	blx	r5
			Putstr(shellEditBuf);
   833d0:	4621      	mov	r1, r4
   833d2:	2067      	movs	r0, #103	; 0x67
   833d4:	47a8      	blx	r5
			mstrtokReset();
   833d6:	4b81      	ldr	r3, [pc, #516]	; (835dc <Shell+0x7b8>)
   833d8:	4798      	blx	r3
			pToken=mstrtok(shellEditBuf,(char*)" \r\n");
   833da:	4981      	ldr	r1, [pc, #516]	; (835e0 <Shell+0x7bc>)
   833dc:	4620      	mov	r0, r4
   833de:	4b81      	ldr	r3, [pc, #516]	; (835e4 <Shell+0x7c0>)
   833e0:	4798      	blx	r3
   833e2:	4604      	mov	r4, r0
   833e4:	900e      	str	r0, [sp, #56]	; 0x38
			if(pToken)
   833e6:	b968      	cbnz	r0, 83404 <Shell+0x5e0>
			Putstr("\r\n");
   833e8:	497f      	ldr	r1, [pc, #508]	; (835e8 <Shell+0x7c4>)
   833ea:	2067      	movs	r0, #103	; 0x67
   833ec:	4b79      	ldr	r3, [pc, #484]	; (835d4 <Shell+0x7b0>)
   833ee:	4798      	blx	r3
			shell.state=IDLE;
   833f0:	4b75      	ldr	r3, [pc, #468]	; (835c8 <Shell+0x7a4>)
   833f2:	f04f 0800 	mov.w	r8, #0
   833f6:	f883 801c 	strb.w	r8, [r3, #28]
			ExitEditMode();
   833fa:	881a      	ldrh	r2, [r3, #0]
   833fc:	f022 0204 	bic.w	r2, r2, #4
   83400:	801a      	strh	r2, [r3, #0]
			break;
   83402:	e54d      	b.n	82ea0 <Shell+0x7c>
				shell.crc=CRC16MODBUSFRAME((unsigned char*)pToken,strlen((char*)pToken));
   83404:	4b79      	ldr	r3, [pc, #484]	; (835ec <Shell+0x7c8>)
   83406:	4798      	blx	r3
   83408:	4601      	mov	r1, r0
   8340a:	4620      	mov	r0, r4
   8340c:	4b78      	ldr	r3, [pc, #480]	; (835f0 <Shell+0x7cc>)
   8340e:	4798      	blx	r3
   83410:	b281      	uxth	r1, r0
   83412:	4b6d      	ldr	r3, [pc, #436]	; (835c8 <Shell+0x7a4>)
   83414:	8219      	strh	r1, [r3, #16]
				k=0;
   83416:	9605      	str	r6, [sp, #20]
				while((commands[k].cmdCode)&&(commands[k].cmdCode!=shell.crc)) k++;
   83418:	4b76      	ldr	r3, [pc, #472]	; (835f4 <Shell+0x7d0>)
   8341a:	881b      	ldrh	r3, [r3, #0]
   8341c:	b1f3      	cbz	r3, 8345c <Shell+0x638>
   8341e:	4299      	cmp	r1, r3
   83420:	d01e      	beq.n	83460 <Shell+0x63c>
   83422:	2301      	movs	r3, #1
   83424:	4a73      	ldr	r2, [pc, #460]	; (835f4 <Shell+0x7d0>)
   83426:	e000      	b.n	8342a <Shell+0x606>
   83428:	462b      	mov	r3, r5
   8342a:	f832 4033 	ldrh.w	r4, [r2, r3, lsl #3]
   8342e:	b124      	cbz	r4, 8343a <Shell+0x616>
   83430:	1c5d      	adds	r5, r3, #1
   83432:	42a1      	cmp	r1, r4
   83434:	d1f8      	bne.n	83428 <Shell+0x604>
   83436:	9305      	str	r3, [sp, #20]
   83438:	e000      	b.n	8343c <Shell+0x618>
   8343a:	9305      	str	r3, [sp, #20]
				if(commands[k].pCmdFunc)
   8343c:	4c6d      	ldr	r4, [pc, #436]	; (835f4 <Shell+0x7d0>)
   8343e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   83442:	685d      	ldr	r5, [r3, #4]
   83444:	b175      	cbz	r5, 83464 <Shell+0x640>
					commands[k].pCmdFunc((uint32_t)&shell,(void*)(pToken+strlen((char*)pToken)+1));
   83446:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   83448:	4620      	mov	r0, r4
   8344a:	4b68      	ldr	r3, [pc, #416]	; (835ec <Shell+0x7c8>)
   8344c:	4798      	blx	r3
   8344e:	1c61      	adds	r1, r4, #1
   83450:	4401      	add	r1, r0
   83452:	485d      	ldr	r0, [pc, #372]	; (835c8 <Shell+0x7a4>)
   83454:	47a8      	blx	r5
					mstrtokRestore();
   83456:	4b68      	ldr	r3, [pc, #416]	; (835f8 <Shell+0x7d4>)
   83458:	4798      	blx	r3
   8345a:	e7c5      	b.n	833e8 <Shell+0x5c4>
				while((commands[k].cmdCode)&&(commands[k].cmdCode!=shell.crc)) k++;
   8345c:	2300      	movs	r3, #0
   8345e:	e7ed      	b.n	8343c <Shell+0x618>
   83460:	2300      	movs	r3, #0
   83462:	e7eb      	b.n	8343c <Shell+0x618>
					k=0;
   83464:	2300      	movs	r3, #0
   83466:	9305      	str	r3, [sp, #20]
                    while((cmdEntries[k].cmdCode)&&(cmdEntries[k].cmdCode!=shell.crc)) k++;
   83468:	4b64      	ldr	r3, [pc, #400]	; (835fc <Shell+0x7d8>)
   8346a:	881b      	ldrh	r3, [r3, #0]
   8346c:	b313      	cbz	r3, 834b4 <Shell+0x690>
   8346e:	4299      	cmp	r1, r3
   83470:	d022      	beq.n	834b8 <Shell+0x694>
   83472:	2301      	movs	r3, #1
   83474:	4c61      	ldr	r4, [pc, #388]	; (835fc <Shell+0x7d8>)
   83476:	e000      	b.n	8347a <Shell+0x656>
   83478:	462b      	mov	r3, r5
   8347a:	f834 2033 	ldrh.w	r2, [r4, r3, lsl #3]
   8347e:	b122      	cbz	r2, 8348a <Shell+0x666>
   83480:	1c5d      	adds	r5, r3, #1
   83482:	4291      	cmp	r1, r2
   83484:	d1f8      	bne.n	83478 <Shell+0x654>
   83486:	9305      	str	r3, [sp, #20]
   83488:	e000      	b.n	8348c <Shell+0x668>
   8348a:	9305      	str	r3, [sp, #20]
                    if(cmdEntries[k].pCmdFunc)
   8348c:	495b      	ldr	r1, [pc, #364]	; (835fc <Shell+0x7d8>)
   8348e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   83492:	685d      	ldr	r5, [r3, #4]
   83494:	b195      	cbz	r5, 834bc <Shell+0x698>
	                    cmdEntries[k].pCmdFunc((uint32_t)&shell,(void*)(pToken+strlen((char*)pToken)+1));
   83496:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   83498:	4620      	mov	r0, r4
   8349a:	4b54      	ldr	r3, [pc, #336]	; (835ec <Shell+0x7c8>)
   8349c:	4798      	blx	r3
   8349e:	1c61      	adds	r1, r4, #1
   834a0:	4401      	add	r1, r0
   834a2:	4849      	ldr	r0, [pc, #292]	; (835c8 <Shell+0x7a4>)
   834a4:	47a8      	blx	r5
						mstrtokRestore();
   834a6:	4b54      	ldr	r3, [pc, #336]	; (835f8 <Shell+0x7d4>)
   834a8:	4798      	blx	r3
						Putstr("\r\n");
   834aa:	494f      	ldr	r1, [pc, #316]	; (835e8 <Shell+0x7c4>)
   834ac:	2067      	movs	r0, #103	; 0x67
   834ae:	4b49      	ldr	r3, [pc, #292]	; (835d4 <Shell+0x7b0>)
   834b0:	4798      	blx	r3
   834b2:	e799      	b.n	833e8 <Shell+0x5c4>
                    while((cmdEntries[k].cmdCode)&&(cmdEntries[k].cmdCode!=shell.crc)) k++;
   834b4:	2300      	movs	r3, #0
   834b6:	e7e9      	b.n	8348c <Shell+0x668>
   834b8:	2300      	movs	r3, #0
   834ba:	e7e7      	b.n	8348c <Shell+0x668>
                    else if(mIsBitsSet(shell.status,ST_SHELL_SHOW_UNKNOW_CRC))
   834bc:	4b42      	ldr	r3, [pc, #264]	; (835c8 <Shell+0x7a4>)
   834be:	881b      	ldrh	r3, [r3, #0]
   834c0:	f013 0f02 	tst.w	r3, #2
   834c4:	d090      	beq.n	833e8 <Shell+0x5c4>
	                    sprintf(shellTmpBuf,"\tunknown cmd: %04X\r\n",shell.crc);
   834c6:	4c4e      	ldr	r4, [pc, #312]	; (83600 <Shell+0x7dc>)
   834c8:	b282      	uxth	r2, r0
   834ca:	494e      	ldr	r1, [pc, #312]	; (83604 <Shell+0x7e0>)
   834cc:	4620      	mov	r0, r4
   834ce:	4b4e      	ldr	r3, [pc, #312]	; (83608 <Shell+0x7e4>)
   834d0:	4798      	blx	r3
	                    Putstr(shellTmpBuf);
   834d2:	4621      	mov	r1, r4
   834d4:	2067      	movs	r0, #103	; 0x67
   834d6:	4b3f      	ldr	r3, [pc, #252]	; (835d4 <Shell+0x7b0>)
   834d8:	4798      	blx	r3
						mstrtokRestore();
   834da:	4b47      	ldr	r3, [pc, #284]	; (835f8 <Shell+0x7d4>)
   834dc:	4798      	blx	r3
   834de:	e783      	b.n	833e8 <Shell+0x5c4>
			shell.state=ED_ESCAPE_SEQ;
   834e0:	2205      	movs	r2, #5
   834e2:	4b39      	ldr	r3, [pc, #228]	; (835c8 <Shell+0x7a4>)
   834e4:	771a      	strb	r2, [r3, #28]
			shell.escapeTimer=SHELL_ESC_TIMEOUT;
   834e6:	4c38      	ldr	r4, [pc, #224]	; (835c8 <Shell+0x7a4>)
   834e8:	2314      	movs	r3, #20
   834ea:	61a3      	str	r3, [r4, #24]
			*shell.pEscbuf++=_kbhitchar;
   834ec:	68a3      	ldr	r3, [r4, #8]
   834ee:	1c5a      	adds	r2, r3, #1
   834f0:	60a2      	str	r2, [r4, #8]
   834f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   834f4:	701a      	strb	r2, [r3, #0]
			shell.nEscChar++;
   834f6:	89e3      	ldrh	r3, [r4, #14]
   834f8:	3301      	adds	r3, #1
   834fa:	81e3      	strh	r3, [r4, #14]
			shell.crc=CRC16MODBUSbyte(_kbhitchar,shell.crc);
   834fc:	8a21      	ldrh	r1, [r4, #16]
   834fe:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   83502:	4b42      	ldr	r3, [pc, #264]	; (8360c <Shell+0x7e8>)
   83504:	4798      	blx	r3
   83506:	8220      	strh	r0, [r4, #16]
	return 0;
   83508:	f04f 0800 	mov.w	r8, #0
			break;
   8350c:	e4c8      	b.n	82ea0 <Shell+0x7c>
			Putstr("\r\n\t***** case _SHELL_KBHIT: BAD case! ******\r\n");
   8350e:	4940      	ldr	r1, [pc, #256]	; (83610 <Shell+0x7ec>)
   83510:	2067      	movs	r0, #103	; 0x67
   83512:	4b30      	ldr	r3, [pc, #192]	; (835d4 <Shell+0x7b0>)
   83514:	4798      	blx	r3
			shell.state=IDLE;
   83516:	4b2c      	ldr	r3, [pc, #176]	; (835c8 <Shell+0x7a4>)
   83518:	f04f 0800 	mov.w	r8, #0
   8351c:	f883 801c 	strb.w	r8, [r3, #28]
			ExitEditMode();
   83520:	881a      	ldrh	r2, [r3, #0]
   83522:	f022 0204 	bic.w	r2, r2, #4
   83526:	801a      	strh	r2, [r3, #0]
			break;
   83528:	e4ba      	b.n	82ea0 <Shell+0x7c>
		if(shell.escapeTimer)
   8352a:	4b27      	ldr	r3, [pc, #156]	; (835c8 <Shell+0x7a4>)
   8352c:	699b      	ldr	r3, [r3, #24]
   8352e:	b1b3      	cbz	r3, 8355e <Shell+0x73a>
			if(--shell.escapeTimer==0)
   83530:	f103 38ff 	add.w	r8, r3, #4294967295
   83534:	4b24      	ldr	r3, [pc, #144]	; (835c8 <Shell+0x7a4>)
   83536:	f8c3 8018 	str.w	r8, [r3, #24]
   8353a:	f1b8 0f00 	cmp.w	r8, #0
   8353e:	d10e      	bne.n	8355e <Shell+0x73a>
				switch(shell.state)
   83540:	7f19      	ldrb	r1, [r3, #28]
   83542:	2905      	cmp	r1, #5
   83544:	f200 8266 	bhi.w	83a14 <Shell+0xbf0>
   83548:	e8df f011 	tbh	[pc, r1, lsl #1]
   8354c:	00060009 	.word	0x00060009
   83550:	02640016 	.word	0x02640016
   83554:	00a10095 	.word	0x00a10095
					shell.state=IDLE;
   83558:	2200      	movs	r2, #0
   8355a:	4b1b      	ldr	r3, [pc, #108]	; (835c8 <Shell+0x7a4>)
   8355c:	771a      	strb	r2, [r3, #28]
        if(shell.editTimer)
   8355e:	4b1a      	ldr	r3, [pc, #104]	; (835c8 <Shell+0x7a4>)
   83560:	f8d3 8014 	ldr.w	r8, [r3, #20]
   83564:	f1b8 0f00 	cmp.w	r8, #0
   83568:	f43f ac9a 	beq.w	82ea0 <Shell+0x7c>
	        if(--shell.editTimer==0)
   8356c:	f108 32ff 	add.w	r2, r8, #4294967295
   83570:	615a      	str	r2, [r3, #20]
	return 0;
   83572:	f04f 0800 	mov.w	r8, #0
   83576:	e493      	b.n	82ea0 <Shell+0x7c>
					shell.crc=CRC16MODBUSFRAME((unsigned char*)shellEscapeBuf,shell.nEscChar);
   83578:	4c13      	ldr	r4, [pc, #76]	; (835c8 <Shell+0x7a4>)
   8357a:	89e1      	ldrh	r1, [r4, #14]
   8357c:	4825      	ldr	r0, [pc, #148]	; (83614 <Shell+0x7f0>)
   8357e:	4b1c      	ldr	r3, [pc, #112]	; (835f0 <Shell+0x7cc>)
   83580:	4798      	blx	r3
   83582:	b280      	uxth	r0, r0
   83584:	8220      	strh	r0, [r4, #16]
					switch(shell.crc)
   83586:	f24c 73f5 	movw	r3, #51189	; 0xc7f5
   8358a:	4298      	cmp	r0, r3
   8358c:	d00c      	beq.n	835a8 <Shell+0x784>
   8358e:	f24c 73fa 	movw	r3, #51194	; 0xc7fa
   83592:	4298      	cmp	r0, r3
   83594:	d011      	beq.n	835ba <Shell+0x796>
						if(mIsBitsSet(shell.status,ST_SHELL_SHOW_UNKNOW_CRC))
   83596:	4b0c      	ldr	r3, [pc, #48]	; (835c8 <Shell+0x7a4>)
   83598:	881b      	ldrh	r3, [r3, #0]
   8359a:	f013 0f02 	tst.w	r3, #2
   8359e:	d156      	bne.n	8364e <Shell+0x82a>
						shell.state=IDLE;
   835a0:	2200      	movs	r2, #0
   835a2:	4b09      	ldr	r3, [pc, #36]	; (835c8 <Shell+0x7a4>)
   835a4:	771a      	strb	r2, [r3, #28]
						break;
   835a6:	e7da      	b.n	8355e <Shell+0x73a>
						PushTask(_cmd_restart,&shell,restartTimeOut,0);
   835a8:	2300      	movs	r3, #0
   835aa:	9300      	str	r3, [sp, #0]
   835ac:	4b1a      	ldr	r3, [pc, #104]	; (83618 <Shell+0x7f4>)
   835ae:	4a06      	ldr	r2, [pc, #24]	; (835c8 <Shell+0x7a4>)
   835b0:	491a      	ldr	r1, [pc, #104]	; (8361c <Shell+0x7f8>)
   835b2:	2066      	movs	r0, #102	; 0x66
   835b4:	4c1a      	ldr	r4, [pc, #104]	; (83620 <Shell+0x7fc>)
   835b6:	47a0      	blx	r4
						break;
   835b8:	e7d1      	b.n	8355e <Shell+0x73a>
						if(shell.nChar)
   835ba:	4b03      	ldr	r3, [pc, #12]	; (835c8 <Shell+0x7a4>)
   835bc:	899b      	ldrh	r3, [r3, #12]
   835be:	bb8b      	cbnz	r3, 83624 <Shell+0x800>
							shell.state=IDLE;
   835c0:	2200      	movs	r2, #0
   835c2:	4b01      	ldr	r3, [pc, #4]	; (835c8 <Shell+0x7a4>)
   835c4:	771a      	strb	r2, [r3, #28]
   835c6:	e7ca      	b.n	8355e <Shell+0x73a>
   835c8:	20001670 	.word	0x20001670
   835cc:	2000156c 	.word	0x2000156c
   835d0:	00089cb8 	.word	0x00089cb8
   835d4:	00083f55 	.word	0x00083f55
   835d8:	00089cbc 	.word	0x00089cbc
   835dc:	00084431 	.word	0x00084431
   835e0:	00089b8c 	.word	0x00089b8c
   835e4:	0008445d 	.word	0x0008445d
   835e8:	00089d08 	.word	0x00089d08
   835ec:	00084b95 	.word	0x00084b95
   835f0:	00082415 	.word	0x00082415
   835f4:	00089b00 	.word	0x00089b00
   835f8:	00084419 	.word	0x00084419
   835fc:	0008a05c 	.word	0x0008a05c
   83600:	20001710 	.word	0x20001710
   83604:	00089cc4 	.word	0x00089cc4
   83608:	00084b49 	.word	0x00084b49
   8360c:	00082449 	.word	0x00082449
   83610:	00089cdc 	.word	0x00089cdc
   83614:	20001690 	.word	0x20001690
   83618:	00089d60 	.word	0x00089d60
   8361c:	00083dad 	.word	0x00083dad
   83620:	000841e5 	.word	0x000841e5
							EnterEditMode();
   83624:	4c99      	ldr	r4, [pc, #612]	; (8388c <Shell+0xa68>)
   83626:	8822      	ldrh	r2, [r4, #0]
   83628:	f042 0204 	orr.w	r2, r2, #4
   8362c:	8022      	strh	r2, [r4, #0]
							shell.editTimer=SHELL_EDIT_TIMEOUT;
   8362e:	2200      	movs	r2, #0
   83630:	6162      	str	r2, [r4, #20]
							shell.pEdit=shellEditBuf+shell.nChar;
   83632:	4e97      	ldr	r6, [pc, #604]	; (83890 <Shell+0xa6c>)
   83634:	4433      	add	r3, r6
   83636:	6063      	str	r3, [r4, #4]
							Putstr("\r\n");
   83638:	4996      	ldr	r1, [pc, #600]	; (83894 <Shell+0xa70>)
   8363a:	2067      	movs	r0, #103	; 0x67
   8363c:	4d96      	ldr	r5, [pc, #600]	; (83898 <Shell+0xa74>)
   8363e:	47a8      	blx	r5
							Putstrlen(shellEditBuf,shell.nChar);
   83640:	89a2      	ldrh	r2, [r4, #12]
   83642:	4631      	mov	r1, r6
   83644:	2068      	movs	r0, #104	; 0x68
   83646:	47a8      	blx	r5
							shell.state=EDITION;
   83648:	2303      	movs	r3, #3
   8364a:	7723      	strb	r3, [r4, #28]
   8364c:	e787      	b.n	8355e <Shell+0x73a>
							Putstr("\r\n   ESC_SEQ: ");
   8364e:	4993      	ldr	r1, [pc, #588]	; (8389c <Shell+0xa78>)
   83650:	2067      	movs	r0, #103	; 0x67
   83652:	4c91      	ldr	r4, [pc, #580]	; (83898 <Shell+0xa74>)
   83654:	47a0      	blx	r4
							_PutAscii2Hex(shellEscapeBuf,shell.nEscChar);
   83656:	4e8d      	ldr	r6, [pc, #564]	; (8388c <Shell+0xa68>)
   83658:	89f2      	ldrh	r2, [r6, #14]
   8365a:	4991      	ldr	r1, [pc, #580]	; (838a0 <Shell+0xa7c>)
   8365c:	2005      	movs	r0, #5
   8365e:	f7ff fbe1 	bl	82e24 <Shell>
							sprintf(shellTmpBuf," <%04X>\r\n",shell.crc);
   83662:	4d90      	ldr	r5, [pc, #576]	; (838a4 <Shell+0xa80>)
   83664:	8a32      	ldrh	r2, [r6, #16]
   83666:	4990      	ldr	r1, [pc, #576]	; (838a8 <Shell+0xa84>)
   83668:	4628      	mov	r0, r5
   8366a:	4b90      	ldr	r3, [pc, #576]	; (838ac <Shell+0xa88>)
   8366c:	4798      	blx	r3
							Putstr(shellTmpBuf);
   8366e:	4629      	mov	r1, r5
   83670:	2067      	movs	r0, #103	; 0x67
   83672:	47a0      	blx	r4
   83674:	e794      	b.n	835a0 <Shell+0x77c>
					Putstr("\e[2K\r");
   83676:	498e      	ldr	r1, [pc, #568]	; (838b0 <Shell+0xa8c>)
   83678:	2067      	movs	r0, #103	; 0x67
   8367a:	4b87      	ldr	r3, [pc, #540]	; (83898 <Shell+0xa74>)
   8367c:	4798      	blx	r3
					shell.state=IDLE;
   8367e:	4b83      	ldr	r3, [pc, #524]	; (8388c <Shell+0xa68>)
   83680:	2200      	movs	r2, #0
   83682:	771a      	strb	r2, [r3, #28]
					ExitEditMode();
   83684:	881a      	ldrh	r2, [r3, #0]
   83686:	f022 0204 	bic.w	r2, r2, #4
   8368a:	801a      	strh	r2, [r3, #0]
					break;
   8368c:	e767      	b.n	8355e <Shell+0x73a>
					shell.crc=CRC16MODBUSFRAME((unsigned char*)shellEscapeBuf,shell.nEscChar);
   8368e:	4c7f      	ldr	r4, [pc, #508]	; (8388c <Shell+0xa68>)
   83690:	89e1      	ldrh	r1, [r4, #14]
   83692:	4883      	ldr	r0, [pc, #524]	; (838a0 <Shell+0xa7c>)
   83694:	4b87      	ldr	r3, [pc, #540]	; (838b4 <Shell+0xa90>)
   83696:	4798      	blx	r3
   83698:	b280      	uxth	r0, r0
   8369a:	8220      	strh	r0, [r4, #16]
					switch(shell.crc)
   8369c:	f24c 133a 	movw	r3, #49466	; 0xc13a
   836a0:	4298      	cmp	r0, r3
   836a2:	f000 810f 	beq.w	838c4 <Shell+0xaa0>
   836a6:	d834      	bhi.n	83712 <Shell+0x8ee>
   836a8:	f245 33e2 	movw	r3, #21474	; 0x53e2
   836ac:	4298      	cmp	r0, r3
   836ae:	f000 80e2 	beq.w	83876 <Shell+0xa52>
   836b2:	d81e      	bhi.n	836f2 <Shell+0x8ce>
   836b4:	f240 53bb 	movw	r3, #1467	; 0x5bb
   836b8:	4298      	cmp	r0, r3
   836ba:	f000 811e 	beq.w	838fa <Shell+0xad6>
   836be:	f240 637b 	movw	r3, #1659	; 0x67b
   836c2:	4298      	cmp	r0, r3
   836c4:	d11e      	bne.n	83704 <Shell+0x8e0>
						if(shell.pEdit<(shellEditBuf+shell.nChar))
   836c6:	4a71      	ldr	r2, [pc, #452]	; (8388c <Shell+0xa68>)
   836c8:	8993      	ldrh	r3, [r2, #12]
   836ca:	4971      	ldr	r1, [pc, #452]	; (83890 <Shell+0xa6c>)
   836cc:	440b      	add	r3, r1
   836ce:	6852      	ldr	r2, [r2, #4]
   836d0:	429a      	cmp	r2, r3
   836d2:	d207      	bcs.n	836e4 <Shell+0x8c0>
							Putstr("\e[C");
   836d4:	4978      	ldr	r1, [pc, #480]	; (838b8 <Shell+0xa94>)
   836d6:	2067      	movs	r0, #103	; 0x67
   836d8:	4b6f      	ldr	r3, [pc, #444]	; (83898 <Shell+0xa74>)
   836da:	4798      	blx	r3
							shell.pEdit++;
   836dc:	4a6b      	ldr	r2, [pc, #428]	; (8388c <Shell+0xa68>)
   836de:	6853      	ldr	r3, [r2, #4]
   836e0:	3301      	adds	r3, #1
   836e2:	6053      	str	r3, [r2, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   836e4:	4b69      	ldr	r3, [pc, #420]	; (8388c <Shell+0xa68>)
   836e6:	2200      	movs	r2, #0
   836e8:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   836ea:	2203      	movs	r2, #3
   836ec:	771a      	strb	r2, [r3, #28]
						break;
   836ee:	f7ff bbd7 	b.w	82ea0 <Shell+0x7c>
					switch(shell.crc)
   836f2:	f646 730e 	movw	r3, #28430	; 0x6f0e
   836f6:	4298      	cmp	r0, r3
   836f8:	d034      	beq.n	83764 <Shell+0x940>
   836fa:	f64a 534f 	movw	r3, #44367	; 0xad4f
   836fe:	4298      	cmp	r0, r3
   83700:	f000 814a 	beq.w	83998 <Shell+0xb74>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   83704:	4b61      	ldr	r3, [pc, #388]	; (8388c <Shell+0xa68>)
   83706:	2200      	movs	r2, #0
   83708:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   8370a:	2203      	movs	r2, #3
   8370c:	771a      	strb	r2, [r3, #28]
						break;
   8370e:	f7ff bbc7 	b.w	82ea0 <Shell+0x7c>
					switch(shell.crc)
   83712:	f24c 63ba 	movw	r3, #50874	; 0xc6ba
   83716:	4298      	cmp	r0, r3
   83718:	d064      	beq.n	837e4 <Shell+0x9c0>
   8371a:	d81b      	bhi.n	83754 <Shell+0x930>
   8371c:	f24c 33e3 	movw	r3, #50147	; 0xc3e3
   83720:	4298      	cmp	r0, r3
   83722:	d072      	beq.n	8380a <Shell+0x9e6>
   83724:	f24c 433a 	movw	r3, #50234	; 0xc43a
   83728:	4298      	cmp	r0, r3
   8372a:	d1eb      	bne.n	83704 <Shell+0x8e0>
						if(shell.pEdit>shellEditBuf)
   8372c:	4b57      	ldr	r3, [pc, #348]	; (8388c <Shell+0xa68>)
   8372e:	685a      	ldr	r2, [r3, #4]
   83730:	4b57      	ldr	r3, [pc, #348]	; (83890 <Shell+0xa6c>)
   83732:	429a      	cmp	r2, r3
   83734:	d907      	bls.n	83746 <Shell+0x922>
							Putstr("\e[D");
   83736:	4961      	ldr	r1, [pc, #388]	; (838bc <Shell+0xa98>)
   83738:	2067      	movs	r0, #103	; 0x67
   8373a:	4b57      	ldr	r3, [pc, #348]	; (83898 <Shell+0xa74>)
   8373c:	4798      	blx	r3
							shell.pEdit--;
   8373e:	4a53      	ldr	r2, [pc, #332]	; (8388c <Shell+0xa68>)
   83740:	6853      	ldr	r3, [r2, #4]
   83742:	3b01      	subs	r3, #1
   83744:	6053      	str	r3, [r2, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   83746:	4b51      	ldr	r3, [pc, #324]	; (8388c <Shell+0xa68>)
   83748:	2200      	movs	r2, #0
   8374a:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   8374c:	2203      	movs	r2, #3
   8374e:	771a      	strb	r2, [r3, #28]
						break;
   83750:	f7ff bba6 	b.w	82ea0 <Shell+0x7c>
					switch(shell.crc)
   83754:	f24c 73f5 	movw	r3, #51189	; 0xc7f5
   83758:	4298      	cmp	r0, r3
   8375a:	d04f      	beq.n	837fc <Shell+0x9d8>
   8375c:	f64c 43ba 	movw	r3, #52410	; 0xccba
   83760:	4298      	cmp	r0, r3
   83762:	d1cf      	bne.n	83704 <Shell+0x8e0>
						if((shell.nChar&&(shell.pEdit==shellEditBuf+shell.nChar)) ||
   83764:	4b49      	ldr	r3, [pc, #292]	; (8388c <Shell+0xa68>)
   83766:	899b      	ldrh	r3, [r3, #12]
   83768:	b12b      	cbz	r3, 83776 <Shell+0x952>
   8376a:	4a49      	ldr	r2, [pc, #292]	; (83890 <Shell+0xa6c>)
   8376c:	4413      	add	r3, r2
   8376e:	4a47      	ldr	r2, [pc, #284]	; (8388c <Shell+0xa68>)
   83770:	6852      	ldr	r2, [r2, #4]
   83772:	429a      	cmp	r2, r3
   83774:	d015      	beq.n	837a2 <Shell+0x97e>
						(((shell.pEdit-1)>=shellEditBuf)&&(_IsSeparator(*(shell.pEdit-1),separators))&&(!_IsSeparator(*shell.pEdit,separators))))
   83776:	4b45      	ldr	r3, [pc, #276]	; (8388c <Shell+0xa68>)
   83778:	685b      	ldr	r3, [r3, #4]
   8377a:	1e59      	subs	r1, r3, #1
						if((shell.nChar&&(shell.pEdit==shellEditBuf+shell.nChar)) ||
   8377c:	4a44      	ldr	r2, [pc, #272]	; (83890 <Shell+0xa6c>)
   8377e:	4291      	cmp	r1, r2
   83780:	d317      	bcc.n	837b2 <Shell+0x98e>
						(((shell.pEdit-1)>=shellEditBuf)&&(_IsSeparator(*(shell.pEdit-1),separators))&&(!_IsSeparator(*shell.pEdit,separators))))
   83782:	4c4f      	ldr	r4, [pc, #316]	; (838c0 <Shell+0xa9c>)
   83784:	4622      	mov	r2, r4
   83786:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   8378a:	2006      	movs	r0, #6
   8378c:	f7ff fb4a 	bl	82e24 <Shell>
   83790:	b178      	cbz	r0, 837b2 <Shell+0x98e>
   83792:	4b3e      	ldr	r3, [pc, #248]	; (8388c <Shell+0xa68>)
   83794:	685b      	ldr	r3, [r3, #4]
   83796:	4622      	mov	r2, r4
   83798:	7819      	ldrb	r1, [r3, #0]
   8379a:	2006      	movs	r0, #6
   8379c:	f7ff fb42 	bl	82e24 <Shell>
   837a0:	b938      	cbnz	r0, 837b2 <Shell+0x98e>
							shell.pEdit--; Putstr("\e[D");
   837a2:	4a3a      	ldr	r2, [pc, #232]	; (8388c <Shell+0xa68>)
   837a4:	6853      	ldr	r3, [r2, #4]
   837a6:	3b01      	subs	r3, #1
   837a8:	6053      	str	r3, [r2, #4]
   837aa:	4944      	ldr	r1, [pc, #272]	; (838bc <Shell+0xa98>)
   837ac:	2067      	movs	r0, #103	; 0x67
   837ae:	4b3a      	ldr	r3, [pc, #232]	; (83898 <Shell+0xa74>)
   837b0:	4798      	blx	r3
						if(_IsSeparator(*shell.pEdit,separators))
   837b2:	4d43      	ldr	r5, [pc, #268]	; (838c0 <Shell+0xa9c>)
   837b4:	4b35      	ldr	r3, [pc, #212]	; (8388c <Shell+0xa68>)
   837b6:	685b      	ldr	r3, [r3, #4]
   837b8:	462a      	mov	r2, r5
   837ba:	7819      	ldrb	r1, [r3, #0]
   837bc:	2006      	movs	r0, #6
   837be:	f7ff fb31 	bl	82e24 <Shell>
   837c2:	2800      	cmp	r0, #0
   837c4:	f040 80cb 	bne.w	8395e <Shell+0xb3a>
						while(((shell.pEdit-1)>=shellEditBuf)&&(!_IsSeparator(*(shell.pEdit-1),separators)))
   837c8:	4b30      	ldr	r3, [pc, #192]	; (8388c <Shell+0xa68>)
   837ca:	685b      	ldr	r3, [r3, #4]
   837cc:	1e59      	subs	r1, r3, #1
   837ce:	4a30      	ldr	r2, [pc, #192]	; (83890 <Shell+0xa6c>)
   837d0:	4291      	cmp	r1, r2
   837d2:	f080 80dd 	bcs.w	83990 <Shell+0xb6c>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   837d6:	4b2d      	ldr	r3, [pc, #180]	; (8388c <Shell+0xa68>)
   837d8:	2200      	movs	r2, #0
   837da:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   837dc:	2203      	movs	r2, #3
   837de:	771a      	strb	r2, [r3, #28]
						break;
   837e0:	f7ff bb5e 	b.w	82ea0 <Shell+0x7c>
						Putstr("\e[2K\r");
   837e4:	4932      	ldr	r1, [pc, #200]	; (838b0 <Shell+0xa8c>)
   837e6:	2067      	movs	r0, #103	; 0x67
   837e8:	4b2b      	ldr	r3, [pc, #172]	; (83898 <Shell+0xa74>)
   837ea:	4798      	blx	r3
						ExitEditMode();
   837ec:	4b27      	ldr	r3, [pc, #156]	; (8388c <Shell+0xa68>)
   837ee:	881a      	ldrh	r2, [r3, #0]
   837f0:	f022 0204 	bic.w	r2, r2, #4
   837f4:	801a      	strh	r2, [r3, #0]
						shell.state=IDLE;
   837f6:	2200      	movs	r2, #0
   837f8:	771a      	strb	r2, [r3, #28]
						break;
   837fa:	e6b0      	b.n	8355e <Shell+0x73a>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   837fc:	4b23      	ldr	r3, [pc, #140]	; (8388c <Shell+0xa68>)
   837fe:	2200      	movs	r2, #0
   83800:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   83802:	2203      	movs	r2, #3
   83804:	771a      	strb	r2, [r3, #28]
						break;
   83806:	f7ff bb4b 	b.w	82ea0 <Shell+0x7c>
						pSrc=(uint32_t)shell.pEdit+1;
   8380a:	4a20      	ldr	r2, [pc, #128]	; (8388c <Shell+0xa68>)
   8380c:	6853      	ldr	r3, [r2, #4]
   8380e:	3301      	adds	r3, #1
   83810:	930e      	str	r3, [sp, #56]	; 0x38
						while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   83812:	491f      	ldr	r1, [pc, #124]	; (83890 <Shell+0xa6c>)
   83814:	8992      	ldrh	r2, [r2, #12]
   83816:	440a      	add	r2, r1
   83818:	4293      	cmp	r3, r2
   8381a:	d20a      	bcs.n	83832 <Shell+0xa0e>
   8381c:	481b      	ldr	r0, [pc, #108]	; (8388c <Shell+0xa68>)
							*(char*)(pSrc-1)=*(char*)pSrc; pSrc++;
   8381e:	781a      	ldrb	r2, [r3, #0]
   83820:	f803 2c01 	strb.w	r2, [r3, #-1]
   83824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83826:	3301      	adds	r3, #1
   83828:	930e      	str	r3, [sp, #56]	; 0x38
						while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   8382a:	8982      	ldrh	r2, [r0, #12]
   8382c:	440a      	add	r2, r1
   8382e:	429a      	cmp	r2, r3
   83830:	d8f5      	bhi.n	8381e <Shell+0x9fa>
						*(char*)(pSrc-1)=' ';
   83832:	2220      	movs	r2, #32
   83834:	f803 2c01 	strb.w	r2, [r3, #-1]
	                    k=Putstrlen(shell.pEdit,pSrc-(uint32_t)shell.pEdit);
   83838:	4b14      	ldr	r3, [pc, #80]	; (8388c <Shell+0xa68>)
   8383a:	6859      	ldr	r1, [r3, #4]
   8383c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8383e:	1a52      	subs	r2, r2, r1
   83840:	2068      	movs	r0, #104	; 0x68
   83842:	4b15      	ldr	r3, [pc, #84]	; (83898 <Shell+0xa74>)
   83844:	4798      	blx	r3
		                while(k--) Putstr("\e[D");
   83846:	1e43      	subs	r3, r0, #1
   83848:	930e      	str	r3, [sp, #56]	; 0x38
   8384a:	b150      	cbz	r0, 83862 <Shell+0xa3e>
   8384c:	4e1b      	ldr	r6, [pc, #108]	; (838bc <Shell+0xa98>)
   8384e:	2567      	movs	r5, #103	; 0x67
   83850:	4c11      	ldr	r4, [pc, #68]	; (83898 <Shell+0xa74>)
   83852:	4631      	mov	r1, r6
   83854:	4628      	mov	r0, r5
   83856:	47a0      	blx	r4
   83858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8385a:	1e5a      	subs	r2, r3, #1
   8385c:	920e      	str	r2, [sp, #56]	; 0x38
   8385e:	2b00      	cmp	r3, #0
   83860:	d1f7      	bne.n	83852 <Shell+0xa2e>
			            shell.nChar--;
   83862:	4b0a      	ldr	r3, [pc, #40]	; (8388c <Shell+0xa68>)
   83864:	899a      	ldrh	r2, [r3, #12]
   83866:	3a01      	subs	r2, #1
   83868:	819a      	strh	r2, [r3, #12]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   8386a:	2200      	movs	r2, #0
   8386c:	615a      	str	r2, [r3, #20]
				        shell.state=EDITION;
   8386e:	2203      	movs	r2, #3
   83870:	771a      	strb	r2, [r3, #28]
					    break;
   83872:	f7ff bb15 	b.w	82ea0 <Shell+0x7c>
						mBitsTgl(shell.status,ST_SHELL_INSERT_MODE);
   83876:	4b05      	ldr	r3, [pc, #20]	; (8388c <Shell+0xa68>)
   83878:	881a      	ldrh	r2, [r3, #0]
   8387a:	f082 0201 	eor.w	r2, r2, #1
   8387e:	801a      	strh	r2, [r3, #0]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   83880:	2200      	movs	r2, #0
   83882:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   83884:	2203      	movs	r2, #3
   83886:	771a      	strb	r2, [r3, #28]
						break;
   83888:	f7ff bb0a 	b.w	82ea0 <Shell+0x7c>
   8388c:	20001670 	.word	0x20001670
   83890:	2000156c 	.word	0x2000156c
   83894:	00089d08 	.word	0x00089d08
   83898:	00083f55 	.word	0x00083f55
   8389c:	00089d0c 	.word	0x00089d0c
   838a0:	20001690 	.word	0x20001690
   838a4:	20001710 	.word	0x20001710
   838a8:	00089d1c 	.word	0x00089d1c
   838ac:	00084b49 	.word	0x00084b49
   838b0:	00089d28 	.word	0x00089d28
   838b4:	00082415 	.word	0x00082415
   838b8:	00089cb8 	.word	0x00089cb8
   838bc:	00089cb4 	.word	0x00089cb4
   838c0:	00089d64 	.word	0x00089d64
						k=(shell.pEdit-shellEditBuf);
   838c4:	4b9f      	ldr	r3, [pc, #636]	; (83b44 <Shell+0xd20>)
   838c6:	685b      	ldr	r3, [r3, #4]
   838c8:	4a9f      	ldr	r2, [pc, #636]	; (83b48 <Shell+0xd24>)
   838ca:	1a9b      	subs	r3, r3, r2
						while(k--) Putstr("\e[D");
   838cc:	1e5a      	subs	r2, r3, #1
   838ce:	920e      	str	r2, [sp, #56]	; 0x38
   838d0:	b153      	cbz	r3, 838e8 <Shell+0xac4>
   838d2:	4e9e      	ldr	r6, [pc, #632]	; (83b4c <Shell+0xd28>)
   838d4:	2567      	movs	r5, #103	; 0x67
   838d6:	4c9e      	ldr	r4, [pc, #632]	; (83b50 <Shell+0xd2c>)
   838d8:	4631      	mov	r1, r6
   838da:	4628      	mov	r0, r5
   838dc:	47a0      	blx	r4
   838de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   838e0:	1e5a      	subs	r2, r3, #1
   838e2:	920e      	str	r2, [sp, #56]	; 0x38
   838e4:	2b00      	cmp	r3, #0
   838e6:	d1f7      	bne.n	838d8 <Shell+0xab4>
						shell.pEdit=shellEditBuf;
   838e8:	4b96      	ldr	r3, [pc, #600]	; (83b44 <Shell+0xd20>)
   838ea:	4a97      	ldr	r2, [pc, #604]	; (83b48 <Shell+0xd24>)
   838ec:	605a      	str	r2, [r3, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   838ee:	2200      	movs	r2, #0
   838f0:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   838f2:	2203      	movs	r2, #3
   838f4:	771a      	strb	r2, [r3, #28]
						break;
   838f6:	f7ff bad3 	b.w	82ea0 <Shell+0x7c>
						k=((shellEditBuf+shell.nChar)-shell.pEdit);
   838fa:	4a92      	ldr	r2, [pc, #584]	; (83b44 <Shell+0xd20>)
   838fc:	8993      	ldrh	r3, [r2, #12]
   838fe:	4992      	ldr	r1, [pc, #584]	; (83b48 <Shell+0xd24>)
   83900:	440b      	add	r3, r1
   83902:	6852      	ldr	r2, [r2, #4]
   83904:	1a9b      	subs	r3, r3, r2
						while(k--) Putstr("\e[C");
   83906:	1e5a      	subs	r2, r3, #1
   83908:	920e      	str	r2, [sp, #56]	; 0x38
   8390a:	b153      	cbz	r3, 83922 <Shell+0xafe>
   8390c:	4e91      	ldr	r6, [pc, #580]	; (83b54 <Shell+0xd30>)
   8390e:	2567      	movs	r5, #103	; 0x67
   83910:	4c8f      	ldr	r4, [pc, #572]	; (83b50 <Shell+0xd2c>)
   83912:	4631      	mov	r1, r6
   83914:	4628      	mov	r0, r5
   83916:	47a0      	blx	r4
   83918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8391a:	1e5a      	subs	r2, r3, #1
   8391c:	920e      	str	r2, [sp, #56]	; 0x38
   8391e:	2b00      	cmp	r3, #0
   83920:	d1f7      	bne.n	83912 <Shell+0xaee>
						shell.pEdit=shellEditBuf+shell.nChar;
   83922:	4b88      	ldr	r3, [pc, #544]	; (83b44 <Shell+0xd20>)
   83924:	899a      	ldrh	r2, [r3, #12]
   83926:	4988      	ldr	r1, [pc, #544]	; (83b48 <Shell+0xd24>)
   83928:	440a      	add	r2, r1
   8392a:	605a      	str	r2, [r3, #4]
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   8392c:	2200      	movs	r2, #0
   8392e:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   83930:	2203      	movs	r2, #3
   83932:	771a      	strb	r2, [r3, #28]
						break;
   83934:	f7ff bab4 	b.w	82ea0 <Shell+0x7c>
								shell.pEdit--;
   83938:	3b01      	subs	r3, #1
   8393a:	6063      	str	r3, [r4, #4]
								Putstr("\e[D");
   8393c:	4631      	mov	r1, r6
   8393e:	2067      	movs	r0, #103	; 0x67
   83940:	4b83      	ldr	r3, [pc, #524]	; (83b50 <Shell+0xd2c>)
   83942:	4798      	blx	r3
							while((_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit>shellEditBuf))
   83944:	6863      	ldr	r3, [r4, #4]
   83946:	462a      	mov	r2, r5
   83948:	7819      	ldrb	r1, [r3, #0]
   8394a:	2006      	movs	r0, #6
   8394c:	f7ff fa6a 	bl	82e24 <Shell>
   83950:	2800      	cmp	r0, #0
   83952:	f43f af39 	beq.w	837c8 <Shell+0x9a4>
   83956:	6863      	ldr	r3, [r4, #4]
   83958:	42bb      	cmp	r3, r7
   8395a:	d8ed      	bhi.n	83938 <Shell+0xb14>
   8395c:	e734      	b.n	837c8 <Shell+0x9a4>
   8395e:	4c79      	ldr	r4, [pc, #484]	; (83b44 <Shell+0xd20>)
   83960:	4f79      	ldr	r7, [pc, #484]	; (83b48 <Shell+0xd24>)
								Putstr("\e[D");
   83962:	4e7a      	ldr	r6, [pc, #488]	; (83b4c <Shell+0xd28>)
   83964:	e7ee      	b.n	83944 <Shell+0xb20>
							shell.pEdit--;
   83966:	6863      	ldr	r3, [r4, #4]
   83968:	3b01      	subs	r3, #1
   8396a:	6063      	str	r3, [r4, #4]
							Putstr("\e[D");
   8396c:	4639      	mov	r1, r7
   8396e:	2067      	movs	r0, #103	; 0x67
   83970:	47b0      	blx	r6
						while(((shell.pEdit-1)>=shellEditBuf)&&(!_IsSeparator(*(shell.pEdit-1),separators)))
   83972:	6863      	ldr	r3, [r4, #4]
   83974:	1e59      	subs	r1, r3, #1
   83976:	4a74      	ldr	r2, [pc, #464]	; (83b48 <Shell+0xd24>)
   83978:	4291      	cmp	r1, r2
   8397a:	f4ff af2c 	bcc.w	837d6 <Shell+0x9b2>
   8397e:	462a      	mov	r2, r5
   83980:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   83984:	2006      	movs	r0, #6
   83986:	f7ff fa4d 	bl	82e24 <Shell>
   8398a:	2800      	cmp	r0, #0
   8398c:	d0eb      	beq.n	83966 <Shell+0xb42>
   8398e:	e722      	b.n	837d6 <Shell+0x9b2>
							shell.pEdit--;
   83990:	4c6c      	ldr	r4, [pc, #432]	; (83b44 <Shell+0xd20>)
							Putstr("\e[D");
   83992:	4f6e      	ldr	r7, [pc, #440]	; (83b4c <Shell+0xd28>)
   83994:	4e6e      	ldr	r6, [pc, #440]	; (83b50 <Shell+0xd2c>)
   83996:	e7f2      	b.n	8397e <Shell+0xb5a>
						if(!_IsSeparator(*shell.pEdit,separators))
   83998:	4d6f      	ldr	r5, [pc, #444]	; (83b58 <Shell+0xd34>)
   8399a:	4b6a      	ldr	r3, [pc, #424]	; (83b44 <Shell+0xd20>)
   8399c:	685b      	ldr	r3, [r3, #4]
   8399e:	462a      	mov	r2, r5
   839a0:	7819      	ldrb	r1, [r3, #0]
   839a2:	2006      	movs	r0, #6
   839a4:	f7ff fa3e 	bl	82e24 <Shell>
   839a8:	b1b8      	cbz	r0, 839da <Shell+0xbb6>
						while((_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit<shellEditBuf+shell.nChar))
   839aa:	4c66      	ldr	r4, [pc, #408]	; (83b44 <Shell+0xd20>)
   839ac:	4f66      	ldr	r7, [pc, #408]	; (83b48 <Shell+0xd24>)
							Putstr("\e[C");
   839ae:	4e69      	ldr	r6, [pc, #420]	; (83b54 <Shell+0xd30>)
   839b0:	e01d      	b.n	839ee <Shell+0xbca>
								shell.pEdit++;
   839b2:	3301      	adds	r3, #1
   839b4:	6063      	str	r3, [r4, #4]
								Putstr("\e[C");
   839b6:	4631      	mov	r1, r6
   839b8:	2067      	movs	r0, #103	; 0x67
   839ba:	4b65      	ldr	r3, [pc, #404]	; (83b50 <Shell+0xd2c>)
   839bc:	4798      	blx	r3
							while((!_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit<shellEditBuf+shell.nChar))
   839be:	6863      	ldr	r3, [r4, #4]
   839c0:	462a      	mov	r2, r5
   839c2:	7819      	ldrb	r1, [r3, #0]
   839c4:	2006      	movs	r0, #6
   839c6:	f7ff fa2d 	bl	82e24 <Shell>
   839ca:	2800      	cmp	r0, #0
   839cc:	d1ed      	bne.n	839aa <Shell+0xb86>
   839ce:	6863      	ldr	r3, [r4, #4]
   839d0:	89a2      	ldrh	r2, [r4, #12]
   839d2:	443a      	add	r2, r7
   839d4:	4293      	cmp	r3, r2
   839d6:	d3ec      	bcc.n	839b2 <Shell+0xb8e>
   839d8:	e7e7      	b.n	839aa <Shell+0xb86>
   839da:	4c5a      	ldr	r4, [pc, #360]	; (83b44 <Shell+0xd20>)
   839dc:	4f5a      	ldr	r7, [pc, #360]	; (83b48 <Shell+0xd24>)
								Putstr("\e[C");
   839de:	4e5d      	ldr	r6, [pc, #372]	; (83b54 <Shell+0xd30>)
   839e0:	e7ed      	b.n	839be <Shell+0xb9a>
							shell.pEdit++;
   839e2:	3301      	adds	r3, #1
   839e4:	6063      	str	r3, [r4, #4]
							Putstr("\e[C");
   839e6:	4631      	mov	r1, r6
   839e8:	2067      	movs	r0, #103	; 0x67
   839ea:	4b59      	ldr	r3, [pc, #356]	; (83b50 <Shell+0xd2c>)
   839ec:	4798      	blx	r3
						while((_IsSeparator(*shell.pEdit,separators))&&(shell.pEdit<shellEditBuf+shell.nChar))
   839ee:	6863      	ldr	r3, [r4, #4]
   839f0:	462a      	mov	r2, r5
   839f2:	7819      	ldrb	r1, [r3, #0]
   839f4:	2006      	movs	r0, #6
   839f6:	f7ff fa15 	bl	82e24 <Shell>
   839fa:	b120      	cbz	r0, 83a06 <Shell+0xbe2>
   839fc:	6863      	ldr	r3, [r4, #4]
   839fe:	89a2      	ldrh	r2, [r4, #12]
   83a00:	443a      	add	r2, r7
   83a02:	4293      	cmp	r3, r2
   83a04:	d3ed      	bcc.n	839e2 <Shell+0xbbe>
						shell.editTimer=SHELL_EDIT_TIMEOUT;
   83a06:	4b4f      	ldr	r3, [pc, #316]	; (83b44 <Shell+0xd20>)
   83a08:	2200      	movs	r2, #0
   83a0a:	615a      	str	r2, [r3, #20]
						shell.state=EDITION;
   83a0c:	2203      	movs	r2, #3
   83a0e:	771a      	strb	r2, [r3, #28]
						break;
   83a10:	f7ff ba46 	b.w	82ea0 <Shell+0x7c>
					Error(ERROR_SHELL_TIMER_ESC_BAD_SATE,shell.state);
   83a14:	2029      	movs	r0, #41	; 0x29
   83a16:	4b51      	ldr	r3, [pc, #324]	; (83b5c <Shell+0xd38>)
   83a18:	4798      	blx	r3
   83a1a:	e5a0      	b.n	8355e <Shell+0x73a>
		pSrc=(uint32_t)shellEditBuf;
   83a1c:	4d4a      	ldr	r5, [pc, #296]	; (83b48 <Shell+0xd24>)
   83a1e:	950e      	str	r5, [sp, #56]	; 0x38
		while(_IsSeparator(*(char*)pSrc,separators)) pSrc++;
   83a20:	4e4d      	ldr	r6, [pc, #308]	; (83b58 <Shell+0xd34>)
   83a22:	2406      	movs	r4, #6
   83a24:	4632      	mov	r2, r6
   83a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83a28:	7819      	ldrb	r1, [r3, #0]
   83a2a:	4620      	mov	r0, r4
   83a2c:	f7ff f9fa 	bl	82e24 <Shell>
   83a30:	4680      	mov	r8, r0
   83a32:	b118      	cbz	r0, 83a3c <Shell+0xc18>
   83a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83a36:	3301      	adds	r3, #1
   83a38:	930e      	str	r3, [sp, #56]	; 0x38
   83a3a:	e7f3      	b.n	83a24 <Shell+0xc00>
		k=pSrc-(uint32_t)shellEditBuf;
   83a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83a3e:	1b5a      	subs	r2, r3, r5
   83a40:	9205      	str	r2, [sp, #20]
		if(k)
   83a42:	b19a      	cbz	r2, 83a6c <Shell+0xc48>
			shell.pEdit=shellEditBuf;
   83a44:	4a3f      	ldr	r2, [pc, #252]	; (83b44 <Shell+0xd20>)
   83a46:	4940      	ldr	r1, [pc, #256]	; (83b48 <Shell+0xd24>)
   83a48:	6051      	str	r1, [r2, #4]
			while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   83a4a:	8992      	ldrh	r2, [r2, #12]
   83a4c:	442a      	add	r2, r5
   83a4e:	4293      	cmp	r3, r2
   83a50:	d20c      	bcs.n	83a6c <Shell+0xc48>
				*shell.pEdit++=*(char*)pSrc++;
   83a52:	493c      	ldr	r1, [pc, #240]	; (83b44 <Shell+0xd20>)
   83a54:	684a      	ldr	r2, [r1, #4]
   83a56:	1c50      	adds	r0, r2, #1
   83a58:	6048      	str	r0, [r1, #4]
   83a5a:	1c58      	adds	r0, r3, #1
   83a5c:	900e      	str	r0, [sp, #56]	; 0x38
   83a5e:	781b      	ldrb	r3, [r3, #0]
   83a60:	7013      	strb	r3, [r2, #0]
			while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   83a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83a64:	898a      	ldrh	r2, [r1, #12]
   83a66:	442a      	add	r2, r5
   83a68:	429a      	cmp	r2, r3
   83a6a:	d8f3      	bhi.n	83a54 <Shell+0xc30>
		pSrc=(uint32_t)shellEditBuf+k;
   83a6c:	9905      	ldr	r1, [sp, #20]
   83a6e:	186b      	adds	r3, r5, r1
   83a70:	930e      	str	r3, [sp, #56]	; 0x38
		shell.nChar-=k;
   83a72:	4a34      	ldr	r2, [pc, #208]	; (83b44 <Shell+0xd20>)
   83a74:	8993      	ldrh	r3, [r2, #12]
   83a76:	1a5b      	subs	r3, r3, r1
   83a78:	8193      	strh	r3, [r2, #12]
		while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   83a7a:	4614      	mov	r4, r2
			while((pSrc<(uint32_t)shellEditBuf+shell.nChar)&&(!_IsSeparator(*(char*)pSrc,separators))) pSrc++;
   83a7c:	2706      	movs	r7, #6
		while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   83a7e:	e004      	b.n	83a8a <Shell+0xc66>
			if(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   83a80:	89a3      	ldrh	r3, [r4, #12]
   83a82:	442b      	add	r3, r5
   83a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   83a86:	4293      	cmp	r3, r2
   83a88:	d814      	bhi.n	83ab4 <Shell+0xc90>
		while(pSrc<(uint32_t)shellEditBuf+shell.nChar)
   83a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83a8c:	89a2      	ldrh	r2, [r4, #12]
   83a8e:	442a      	add	r2, r5
   83a90:	429a      	cmp	r2, r3
   83a92:	f67f aa05 	bls.w	82ea0 <Shell+0x7c>
			while((pSrc<(uint32_t)shellEditBuf+shell.nChar)&&(!_IsSeparator(*(char*)pSrc,separators))) pSrc++;
   83a96:	4632      	mov	r2, r6
   83a98:	7819      	ldrb	r1, [r3, #0]
   83a9a:	4638      	mov	r0, r7
   83a9c:	f7ff f9c2 	bl	82e24 <Shell>
   83aa0:	2800      	cmp	r0, #0
   83aa2:	d1ed      	bne.n	83a80 <Shell+0xc5c>
   83aa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83aa6:	3301      	adds	r3, #1
   83aa8:	930e      	str	r3, [sp, #56]	; 0x38
   83aaa:	89a2      	ldrh	r2, [r4, #12]
   83aac:	442a      	add	r2, r5
   83aae:	429a      	cmp	r2, r3
   83ab0:	d8f1      	bhi.n	83a96 <Shell+0xc72>
   83ab2:	e7ea      	b.n	83a8a <Shell+0xc66>
				pSrc++; pSt=shell.pEdit=(char*)pSrc;
   83ab4:	f102 0901 	add.w	r9, r2, #1
   83ab8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   83abc:	f8c4 9004 	str.w	r9, [r4, #4]
				while((pSrc<(uint32_t)shellEditBuf+shell.nChar)&&(_IsSeparator(*(char*)pSrc,separators))) pSrc++;
   83ac0:	454b      	cmp	r3, r9
   83ac2:	bf88      	it	hi
   83ac4:	464b      	movhi	r3, r9
   83ac6:	d90c      	bls.n	83ae2 <Shell+0xcbe>
   83ac8:	4632      	mov	r2, r6
   83aca:	7819      	ldrb	r1, [r3, #0]
   83acc:	4638      	mov	r0, r7
   83ace:	f7ff f9a9 	bl	82e24 <Shell>
   83ad2:	b130      	cbz	r0, 83ae2 <Shell+0xcbe>
   83ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83ad6:	3301      	adds	r3, #1
   83ad8:	930e      	str	r3, [sp, #56]	; 0x38
   83ada:	89a2      	ldrh	r2, [r4, #12]
   83adc:	442a      	add	r2, r5
   83ade:	429a      	cmp	r2, r3
   83ae0:	d8f2      	bhi.n	83ac8 <Shell+0xca4>
				k=pSrc-(uint32_t)shell.pEdit;
   83ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83ae4:	6861      	ldr	r1, [r4, #4]
   83ae6:	1a59      	subs	r1, r3, r1
   83ae8:	9105      	str	r1, [sp, #20]
				while(k && pSrc<(uint32_t)shellEditBuf+shell.nChar)
   83aea:	b189      	cbz	r1, 83b10 <Shell+0xcec>
   83aec:	89a2      	ldrh	r2, [r4, #12]
   83aee:	442a      	add	r2, r5
   83af0:	4293      	cmp	r3, r2
   83af2:	d20d      	bcs.n	83b10 <Shell+0xcec>
					*shell.pEdit++=*(char*)pSrc++;
   83af4:	6862      	ldr	r2, [r4, #4]
   83af6:	1c51      	adds	r1, r2, #1
   83af8:	6061      	str	r1, [r4, #4]
   83afa:	1c59      	adds	r1, r3, #1
   83afc:	910e      	str	r1, [sp, #56]	; 0x38
   83afe:	781b      	ldrb	r3, [r3, #0]
   83b00:	7013      	strb	r3, [r2, #0]
				while(k && pSrc<(uint32_t)shellEditBuf+shell.nChar)
   83b02:	9905      	ldr	r1, [sp, #20]
   83b04:	b121      	cbz	r1, 83b10 <Shell+0xcec>
   83b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83b08:	89a2      	ldrh	r2, [r4, #12]
   83b0a:	442a      	add	r2, r5
   83b0c:	429a      	cmp	r2, r3
   83b0e:	d8f1      	bhi.n	83af4 <Shell+0xcd0>
				shell.nChar-=k;
   83b10:	89a3      	ldrh	r3, [r4, #12]
   83b12:	1a59      	subs	r1, r3, r1
   83b14:	81a1      	strh	r1, [r4, #12]
				pSrc=(uint32_t)pSt;
   83b16:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   83b1a:	e7b6      	b.n	83a8a <Shell+0xc66>
		Error(ERROR_SHELL_SWITCH_BAD_SC,sc);
   83b1c:	200d      	movs	r0, #13
   83b1e:	4b0f      	ldr	r3, [pc, #60]	; (83b5c <Shell+0xd38>)
   83b20:	4798      	blx	r3
	return 0;
   83b22:	f04f 0800 	mov.w	r8, #0
   83b26:	f7ff b9bb 	b.w	82ea0 <Shell+0x7c>
   83b2a:	f04f 0800 	mov.w	r8, #0
   83b2e:	f7ff b9b7 	b.w	82ea0 <Shell+0x7c>
   83b32:	f04f 0800 	mov.w	r8, #0
   83b36:	f7ff b9b3 	b.w	82ea0 <Shell+0x7c>
   83b3a:	f04f 0800 	mov.w	r8, #0
   83b3e:	f7ff b9af 	b.w	82ea0 <Shell+0x7c>
   83b42:	bf00      	nop
   83b44:	20001670 	.word	0x20001670
   83b48:	2000156c 	.word	0x2000156c
   83b4c:	00089cb4 	.word	0x00089cb4
   83b50:	00083f55 	.word	0x00083f55
   83b54:	00089cb8 	.word	0x00089cb8
   83b58:	00089d64 	.word	0x00089d64
   83b5c:	00082481 	.word	0x00082481
   83b60:	f04f 0800 	mov.w	r8, #0
   83b64:	f7ff b99c 	b.w	82ea0 <Shell+0x7c>

00083b68 <_cmd_show>:
#define ST_SHELL_PROMPT_DISABLED        0x000004

char buf[256];

void _cmd_show(uint32_t sc, void*pParam)
{
   83b68:	b538      	push	{r3, r4, r5, lr}
   83b6a:	4605      	mov	r5, r0
   83b6c:	4608      	mov	r0, r1
	char *pToken;
	pToken = strtok(pParam," \r\n");
   83b6e:	490a      	ldr	r1, [pc, #40]	; (83b98 <_cmd_show+0x30>)
   83b70:	4b0a      	ldr	r3, [pc, #40]	; (83b9c <_cmd_show+0x34>)
   83b72:	4798      	blx	r3
	if(pToken)
   83b74:	b170      	cbz	r0, 83b94 <_cmd_show+0x2c>
   83b76:	4604      	mov	r4, r0
	{
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   83b78:	4b09      	ldr	r3, [pc, #36]	; (83ba0 <_cmd_show+0x38>)
   83b7a:	4798      	blx	r3
   83b7c:	4601      	mov	r1, r0
   83b7e:	4620      	mov	r0, r4
   83b80:	4b08      	ldr	r3, [pc, #32]	; (83ba4 <_cmd_show+0x3c>)
   83b82:	4798      	blx	r3
   83b84:	f245 73e5 	movw	r3, #22501	; 0x57e5
   83b88:	4298      	cmp	r0, r3
   83b8a:	d103      	bne.n	83b94 <_cmd_show+0x2c>
		{
		case 0x57E5:    //crc
			mBitsSet(*(uint16_t*)sc,ST_SHELL_SHOW_UNKNOW_CRC);
   83b8c:	882b      	ldrh	r3, [r5, #0]
   83b8e:	f043 0302 	orr.w	r3, r3, #2
   83b92:	802b      	strh	r3, [r5, #0]
   83b94:	bd38      	pop	{r3, r4, r5, pc}
   83b96:	bf00      	nop
   83b98:	00089b8c 	.word	0x00089b8c
   83b9c:	00084bf1 	.word	0x00084bf1
   83ba0:	00084b95 	.word	0x00084b95
   83ba4:	00082415 	.word	0x00082415

00083ba8 <_cmd_hide>:
		}
	}
}

void _cmd_hide(uint32_t sc, void*pParam)
{
   83ba8:	b538      	push	{r3, r4, r5, lr}
   83baa:	4605      	mov	r5, r0
   83bac:	4608      	mov	r0, r1
	char *pToken;
	pToken = strtok(pParam," \r\n");
   83bae:	490a      	ldr	r1, [pc, #40]	; (83bd8 <_cmd_hide+0x30>)
   83bb0:	4b0a      	ldr	r3, [pc, #40]	; (83bdc <_cmd_hide+0x34>)
   83bb2:	4798      	blx	r3
	if(pToken)
   83bb4:	b170      	cbz	r0, 83bd4 <_cmd_hide+0x2c>
   83bb6:	4604      	mov	r4, r0
	{
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   83bb8:	4b09      	ldr	r3, [pc, #36]	; (83be0 <_cmd_hide+0x38>)
   83bba:	4798      	blx	r3
   83bbc:	4601      	mov	r1, r0
   83bbe:	4620      	mov	r0, r4
   83bc0:	4b08      	ldr	r3, [pc, #32]	; (83be4 <_cmd_hide+0x3c>)
   83bc2:	4798      	blx	r3
   83bc4:	f245 73e5 	movw	r3, #22501	; 0x57e5
   83bc8:	4298      	cmp	r0, r3
   83bca:	d103      	bne.n	83bd4 <_cmd_hide+0x2c>
		{
		case 0x57E5:    //crc
			mBitsClr(*(uint16_t*)sc,ST_SHELL_SHOW_UNKNOW_CRC);
   83bcc:	882b      	ldrh	r3, [r5, #0]
   83bce:	f023 0302 	bic.w	r3, r3, #2
   83bd2:	802b      	strh	r3, [r5, #0]
   83bd4:	bd38      	pop	{r3, r4, r5, pc}
   83bd6:	bf00      	nop
   83bd8:	00089b8c 	.word	0x00089b8c
   83bdc:	00084bf1 	.word	0x00084bf1
   83be0:	00084b95 	.word	0x00084b95
   83be4:	00082415 	.word	0x00082415

00083be8 <_cmd_start>:
		}
	}
}

void _cmd_start(uint32_t sc, void*pParam)
{
   83be8:	b538      	push	{r3, r4, r5, lr}
   83bea:	460d      	mov	r5, r1
	Putstr(" cmd start : ");
   83bec:	4903      	ldr	r1, [pc, #12]	; (83bfc <_cmd_start+0x14>)
   83bee:	2067      	movs	r0, #103	; 0x67
   83bf0:	4c03      	ldr	r4, [pc, #12]	; (83c00 <_cmd_start+0x18>)
   83bf2:	47a0      	blx	r4
	Putstr(pParam);
   83bf4:	4629      	mov	r1, r5
   83bf6:	2067      	movs	r0, #103	; 0x67
   83bf8:	47a0      	blx	r4
   83bfa:	bd38      	pop	{r3, r4, r5, pc}
   83bfc:	00089e9c 	.word	0x00089e9c
   83c00:	00083f55 	.word	0x00083f55

00083c04 <_cmd_cls>:
	pParam=atoi((char*)pParam);
	PushTask(_cmd_restart_proc,sc,pParam,0);
}

void _cmd_cls(uint32_t sc, void*pParam)
{
   83c04:	b508      	push	{r3, lr}
	Putstr("\e[2J");
   83c06:	4902      	ldr	r1, [pc, #8]	; (83c10 <_cmd_cls+0xc>)
   83c08:	2067      	movs	r0, #103	; 0x67
   83c0a:	4b02      	ldr	r3, [pc, #8]	; (83c14 <_cmd_cls+0x10>)
   83c0c:	4798      	blx	r3
   83c0e:	bd08      	pop	{r3, pc}
   83c10:	00089d70 	.word	0x00089d70
   83c14:	00083f55 	.word	0x00083f55

00083c18 <_cmd_set>:
{
   83c18:	b570      	push	{r4, r5, r6, lr}
	pToken = mstrtok(NULL," \r\n");
   83c1a:	493a      	ldr	r1, [pc, #232]	; (83d04 <_cmd_set+0xec>)
   83c1c:	2000      	movs	r0, #0
   83c1e:	4b3a      	ldr	r3, [pc, #232]	; (83d08 <_cmd_set+0xf0>)
   83c20:	4798      	blx	r3
	if(pToken)
   83c22:	2800      	cmp	r0, #0
   83c24:	d056      	beq.n	83cd4 <_cmd_set+0xbc>
   83c26:	4604      	mov	r4, r0
		switch(CRC16MODBUSFRAME((unsigned char*)pToken,strlen(pToken)))
   83c28:	4b38      	ldr	r3, [pc, #224]	; (83d0c <_cmd_set+0xf4>)
   83c2a:	4798      	blx	r3
   83c2c:	4601      	mov	r1, r0
   83c2e:	4620      	mov	r0, r4
   83c30:	4b37      	ldr	r3, [pc, #220]	; (83d10 <_cmd_set+0xf8>)
   83c32:	4798      	blx	r3
   83c34:	f247 3327 	movw	r3, #29479	; 0x7327
   83c38:	4298      	cmp	r0, r3
   83c3a:	d004      	beq.n	83c46 <_cmd_set+0x2e>
   83c3c:	f24e 13a9 	movw	r3, #57769	; 0xe1a9
   83c40:	4298      	cmp	r0, r3
   83c42:	d024      	beq.n	83c8e <_cmd_set+0x76>
   83c44:	bd70      	pop	{r4, r5, r6, pc}
			pToken=mstrtok(NULL," :./\r\n");
   83c46:	4933      	ldr	r1, [pc, #204]	; (83d14 <_cmd_set+0xfc>)
   83c48:	2000      	movs	r0, #0
   83c4a:	4b2f      	ldr	r3, [pc, #188]	; (83d08 <_cmd_set+0xf0>)
   83c4c:	4798      	blx	r3
			if(pToken) hour=atoi((char*)pToken);
   83c4e:	b1c0      	cbz	r0, 83c82 <_cmd_set+0x6a>
   83c50:	4b31      	ldr	r3, [pc, #196]	; (83d18 <_cmd_set+0x100>)
   83c52:	4798      	blx	r3
   83c54:	b2c4      	uxtb	r4, r0
			pToken=mstrtok(NULL," :./\r\n");
   83c56:	492f      	ldr	r1, [pc, #188]	; (83d14 <_cmd_set+0xfc>)
   83c58:	2000      	movs	r0, #0
   83c5a:	4b2b      	ldr	r3, [pc, #172]	; (83d08 <_cmd_set+0xf0>)
   83c5c:	4798      	blx	r3
			if(pToken) minute=atoi((char*)pToken);
   83c5e:	b190      	cbz	r0, 83c86 <_cmd_set+0x6e>
   83c60:	4b2d      	ldr	r3, [pc, #180]	; (83d18 <_cmd_set+0x100>)
   83c62:	4798      	blx	r3
   83c64:	b2c5      	uxtb	r5, r0
			pToken=mstrtok(NULL," :./\r\n");
   83c66:	492b      	ldr	r1, [pc, #172]	; (83d14 <_cmd_set+0xfc>)
   83c68:	2000      	movs	r0, #0
   83c6a:	4b27      	ldr	r3, [pc, #156]	; (83d08 <_cmd_set+0xf0>)
   83c6c:	4798      	blx	r3
			if(pToken) second=atoi((char*)pToken);
   83c6e:	b160      	cbz	r0, 83c8a <_cmd_set+0x72>
   83c70:	4b29      	ldr	r3, [pc, #164]	; (83d18 <_cmd_set+0x100>)
   83c72:	4798      	blx	r3
   83c74:	b2c3      	uxtb	r3, r0
			kRtc(KRTC_SET_TIME,(uint32_t)hour,(uint32_t)minute,(uint32_t)second);
   83c76:	462a      	mov	r2, r5
   83c78:	4621      	mov	r1, r4
   83c7a:	2066      	movs	r0, #102	; 0x66
   83c7c:	4c27      	ldr	r4, [pc, #156]	; (83d1c <_cmd_set+0x104>)
   83c7e:	47a0      	blx	r4
			break;
   83c80:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t u1=0,u2=0,u3=0;
   83c82:	2400      	movs	r4, #0
   83c84:	e7e7      	b.n	83c56 <_cmd_set+0x3e>
   83c86:	2500      	movs	r5, #0
   83c88:	e7ed      	b.n	83c66 <_cmd_set+0x4e>
   83c8a:	2300      	movs	r3, #0
   83c8c:	e7f3      	b.n	83c76 <_cmd_set+0x5e>
			pToken=mstrtok(NULL," :./\r\n");
   83c8e:	4921      	ldr	r1, [pc, #132]	; (83d14 <_cmd_set+0xfc>)
   83c90:	2000      	movs	r0, #0
   83c92:	4b1d      	ldr	r3, [pc, #116]	; (83d08 <_cmd_set+0xf0>)
   83c94:	4798      	blx	r3
			if(pToken) date=atoi((char*)pToken);
   83c96:	b1f0      	cbz	r0, 83cd6 <_cmd_set+0xbe>
   83c98:	4b1f      	ldr	r3, [pc, #124]	; (83d18 <_cmd_set+0x100>)
   83c9a:	4798      	blx	r3
   83c9c:	b2c4      	uxtb	r4, r0
			pToken=mstrtok(NULL," :./\r\n");
   83c9e:	491d      	ldr	r1, [pc, #116]	; (83d14 <_cmd_set+0xfc>)
   83ca0:	2000      	movs	r0, #0
   83ca2:	4b19      	ldr	r3, [pc, #100]	; (83d08 <_cmd_set+0xf0>)
   83ca4:	4798      	blx	r3
			if(pToken) month=atoi((char*)pToken);
   83ca6:	b1c0      	cbz	r0, 83cda <_cmd_set+0xc2>
   83ca8:	4b1b      	ldr	r3, [pc, #108]	; (83d18 <_cmd_set+0x100>)
   83caa:	4798      	blx	r3
   83cac:	b2c5      	uxtb	r5, r0
			pToken=mstrtok(NULL," :./\r\n");
   83cae:	4919      	ldr	r1, [pc, #100]	; (83d14 <_cmd_set+0xfc>)
   83cb0:	2000      	movs	r0, #0
   83cb2:	4b15      	ldr	r3, [pc, #84]	; (83d08 <_cmd_set+0xf0>)
   83cb4:	4798      	blx	r3
			if(pToken) centYear=atoi((char*)pToken);
   83cb6:	b190      	cbz	r0, 83cde <_cmd_set+0xc6>
   83cb8:	4b17      	ldr	r3, [pc, #92]	; (83d18 <_cmd_set+0x100>)
   83cba:	4798      	blx	r3
   83cbc:	b286      	uxth	r6, r0
			Putstr("\e[2K"); //Erase current line on terminal screen
   83cbe:	4918      	ldr	r1, [pc, #96]	; (83d20 <_cmd_set+0x108>)
   83cc0:	2067      	movs	r0, #103	; 0x67
   83cc2:	4b18      	ldr	r3, [pc, #96]	; (83d24 <_cmd_set+0x10c>)
   83cc4:	4798      	blx	r3
			if(kRtc(KRTC_SET_DATE,(uint32_t)date,(uint32_t)month,(uint32_t)centYear)==0)
   83cc6:	4633      	mov	r3, r6
   83cc8:	462a      	mov	r2, r5
   83cca:	4621      	mov	r1, r4
   83ccc:	2067      	movs	r0, #103	; 0x67
   83cce:	4c13      	ldr	r4, [pc, #76]	; (83d1c <_cmd_set+0x104>)
   83cd0:	47a0      	blx	r4
   83cd2:	b130      	cbz	r0, 83ce2 <_cmd_set+0xca>
   83cd4:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t u1=0,u2=0,u3=0;
   83cd6:	2400      	movs	r4, #0
   83cd8:	e7e1      	b.n	83c9e <_cmd_set+0x86>
   83cda:	2500      	movs	r5, #0
   83cdc:	e7e7      	b.n	83cae <_cmd_set+0x96>
	uint16_t u4=0;
   83cde:	2600      	movs	r6, #0
   83ce0:	e7ed      	b.n	83cbe <_cmd_set+0xa6>
				Putstr("\r\n");
   83ce2:	4d11      	ldr	r5, [pc, #68]	; (83d28 <_cmd_set+0x110>)
   83ce4:	4629      	mov	r1, r5
   83ce6:	2067      	movs	r0, #103	; 0x67
   83ce8:	4c0e      	ldr	r4, [pc, #56]	; (83d24 <_cmd_set+0x10c>)
   83cea:	47a0      	blx	r4
				kRtc(KRTC_GETF_DATE,(uint32_t)buf);
   83cec:	4e0f      	ldr	r6, [pc, #60]	; (83d2c <_cmd_set+0x114>)
   83cee:	4631      	mov	r1, r6
   83cf0:	2068      	movs	r0, #104	; 0x68
   83cf2:	4b0a      	ldr	r3, [pc, #40]	; (83d1c <_cmd_set+0x104>)
   83cf4:	4798      	blx	r3
				Putstr(buf);
   83cf6:	4631      	mov	r1, r6
   83cf8:	2067      	movs	r0, #103	; 0x67
   83cfa:	47a0      	blx	r4
				Putstr("\r\n");
   83cfc:	4629      	mov	r1, r5
   83cfe:	2067      	movs	r0, #103	; 0x67
   83d00:	47a0      	blx	r4
}
   83d02:	e7e7      	b.n	83cd4 <_cmd_set+0xbc>
   83d04:	00089b8c 	.word	0x00089b8c
   83d08:	0008445d 	.word	0x0008445d
   83d0c:	00084b95 	.word	0x00084b95
   83d10:	00082415 	.word	0x00082415
   83d14:	00089e8c 	.word	0x00089e8c
   83d18:	00084a55 	.word	0x00084a55
   83d1c:	0008268d 	.word	0x0008268d
   83d20:	00089e94 	.word	0x00089e94
   83d24:	00083f55 	.word	0x00083f55
   83d28:	00089d08 	.word	0x00089d08
   83d2c:	200012ec 	.word	0x200012ec

00083d30 <_cmd_restart_proc>:
{
   83d30:	b570      	push	{r4, r5, r6, lr}
   83d32:	b082      	sub	sp, #8
   83d34:	4604      	mov	r4, r0
   83d36:	460d      	mov	r5, r1
	mBitsSet(*(uint16_t*)sc,ST_SHELL_PROMPT_DISABLED);
   83d38:	8803      	ldrh	r3, [r0, #0]
   83d3a:	f043 0304 	orr.w	r3, r3, #4
   83d3e:	8003      	strh	r3, [r0, #0]
	sprintf(buf,"\rSystem will restart in %i second...",(int)timeout); Putstr(buf);
   83d40:	4e10      	ldr	r6, [pc, #64]	; (83d84 <_cmd_restart_proc+0x54>)
   83d42:	460a      	mov	r2, r1
   83d44:	4910      	ldr	r1, [pc, #64]	; (83d88 <_cmd_restart_proc+0x58>)
   83d46:	4630      	mov	r0, r6
   83d48:	4b10      	ldr	r3, [pc, #64]	; (83d8c <_cmd_restart_proc+0x5c>)
   83d4a:	4798      	blx	r3
   83d4c:	4631      	mov	r1, r6
   83d4e:	2067      	movs	r0, #103	; 0x67
   83d50:	4b0f      	ldr	r3, [pc, #60]	; (83d90 <_cmd_restart_proc+0x60>)
   83d52:	4798      	blx	r3
	if(timeout==0)
   83d54:	b955      	cbnz	r5, 83d6c <_cmd_restart_proc+0x3c>
		Putstr("\r\n\n");
   83d56:	490f      	ldr	r1, [pc, #60]	; (83d94 <_cmd_restart_proc+0x64>)
   83d58:	2067      	movs	r0, #103	; 0x67
   83d5a:	4b0d      	ldr	r3, [pc, #52]	; (83d90 <_cmd_restart_proc+0x60>)
   83d5c:	4798      	blx	r3
   83d5e:	4b0e      	ldr	r3, [pc, #56]	; (83d98 <_cmd_restart_proc+0x68>)
		for(sc=500000;sc;sc--);
   83d60:	3b01      	subs	r3, #1
   83d62:	d1fd      	bne.n	83d60 <_cmd_restart_proc+0x30>
		rstc_start_software_reset(RSTC);
   83d64:	480d      	ldr	r0, [pc, #52]	; (83d9c <_cmd_restart_proc+0x6c>)
   83d66:	4b0e      	ldr	r3, [pc, #56]	; (83da0 <_cmd_restart_proc+0x70>)
   83d68:	4798      	blx	r3
   83d6a:	e7fe      	b.n	83d6a <_cmd_restart_proc+0x3a>
		PushTask(_cmd_restart_proc,sc,--timeout,1000);	
   83d6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   83d70:	9300      	str	r3, [sp, #0]
   83d72:	1e6b      	subs	r3, r5, #1
   83d74:	4622      	mov	r2, r4
   83d76:	490b      	ldr	r1, [pc, #44]	; (83da4 <_cmd_restart_proc+0x74>)
   83d78:	2066      	movs	r0, #102	; 0x66
   83d7a:	4c0b      	ldr	r4, [pc, #44]	; (83da8 <_cmd_restart_proc+0x78>)
   83d7c:	47a0      	blx	r4
}
   83d7e:	b002      	add	sp, #8
   83d80:	bd70      	pop	{r4, r5, r6, pc}
   83d82:	bf00      	nop
   83d84:	200012ec 	.word	0x200012ec
   83d88:	00089e64 	.word	0x00089e64
   83d8c:	00084b49 	.word	0x00084b49
   83d90:	00083f55 	.word	0x00083f55
   83d94:	00089504 	.word	0x00089504
   83d98:	0007a120 	.word	0x0007a120
   83d9c:	400e1200 	.word	0x400e1200
   83da0:	00081865 	.word	0x00081865
   83da4:	00083d31 	.word	0x00083d31
   83da8:	000841e5 	.word	0x000841e5

00083dac <_cmd_restart>:
{
   83dac:	b510      	push	{r4, lr}
   83dae:	b082      	sub	sp, #8
   83db0:	4604      	mov	r4, r0
	mBitsSet(*(uint16_t*)sc,ST_SHELL_PROMPT_DISABLED);
   83db2:	8803      	ldrh	r3, [r0, #0]
   83db4:	f043 0304 	orr.w	r3, r3, #4
   83db8:	8003      	strh	r3, [r0, #0]
	pParam=atoi((char*)pParam);
   83dba:	4608      	mov	r0, r1
   83dbc:	4b05      	ldr	r3, [pc, #20]	; (83dd4 <_cmd_restart+0x28>)
   83dbe:	4798      	blx	r3
	PushTask(_cmd_restart_proc,sc,pParam,0);
   83dc0:	2300      	movs	r3, #0
   83dc2:	9300      	str	r3, [sp, #0]
   83dc4:	4603      	mov	r3, r0
   83dc6:	4622      	mov	r2, r4
   83dc8:	4903      	ldr	r1, [pc, #12]	; (83dd8 <_cmd_restart+0x2c>)
   83dca:	2066      	movs	r0, #102	; 0x66
   83dcc:	4c03      	ldr	r4, [pc, #12]	; (83ddc <_cmd_restart+0x30>)
   83dce:	47a0      	blx	r4
}
   83dd0:	b002      	add	sp, #8
   83dd2:	bd10      	pop	{r4, pc}
   83dd4:	00084a55 	.word	0x00084a55
   83dd8:	00083d31 	.word	0x00083d31
   83ddc:	000841e5 	.word	0x000841e5

00083de0 <_cmd_infos>:
	"ROM_FLASH --- ROM and Embedded Flash Memory [NVPSIZ is ROM size / NVPSIZ2 is Flash size]",
	"SRAM --- SRAM emulating ROM"
};

void _cmd_infos(uint32_t sc, void*pParam)
{
   83de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83de4:	b08b      	sub	sp, #44	; 0x2c
	chipid_data_t chipData;

	chipid_read(CHIPID,&chipData);
   83de6:	a901      	add	r1, sp, #4
   83de8:	4844      	ldr	r0, [pc, #272]	; (83efc <_cmd_infos+0x11c>)
   83dea:	4b45      	ldr	r3, [pc, #276]	; (83f00 <_cmd_infos+0x120>)
   83dec:	4798      	blx	r3
	Putstr("\r\n\t=============== CHIP IDENTIFIER INFOS ===============\r\n\n");
   83dee:	4945      	ldr	r1, [pc, #276]	; (83f04 <_cmd_infos+0x124>)
   83df0:	2067      	movs	r0, #103	; 0x67
   83df2:	4c45      	ldr	r4, [pc, #276]	; (83f08 <_cmd_infos+0x128>)
   83df4:	47a0      	blx	r4
	sprintf(buf,"\tVERSION: %c\r\n",(char)(chipData.ul_version-1)+'A');	Putstr(buf);
   83df6:	9a01      	ldr	r2, [sp, #4]
   83df8:	3a01      	subs	r2, #1
   83dfa:	b2d2      	uxtb	r2, r2
   83dfc:	4f43      	ldr	r7, [pc, #268]	; (83f0c <_cmd_infos+0x12c>)
   83dfe:	3241      	adds	r2, #65	; 0x41
   83e00:	4943      	ldr	r1, [pc, #268]	; (83f10 <_cmd_infos+0x130>)
   83e02:	4638      	mov	r0, r7
   83e04:	4b43      	ldr	r3, [pc, #268]	; (83f14 <_cmd_infos+0x134>)
   83e06:	4798      	blx	r3
   83e08:	4639      	mov	r1, r7
   83e0a:	2067      	movs	r0, #103	; 0x67
   83e0c:	47a0      	blx	r4
		Putstr("\t  EPROC: "),Putstr(eprocs[chipData.ul_eproc]);	Putstr("\r\n");
   83e0e:	4942      	ldr	r1, [pc, #264]	; (83f18 <_cmd_infos+0x138>)
   83e10:	2067      	movs	r0, #103	; 0x67
   83e12:	47a0      	blx	r4
   83e14:	9a02      	ldr	r2, [sp, #8]
   83e16:	4b41      	ldr	r3, [pc, #260]	; (83f1c <_cmd_infos+0x13c>)
   83e18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   83e1c:	2067      	movs	r0, #103	; 0x67
   83e1e:	47a0      	blx	r4
   83e20:	4e3f      	ldr	r6, [pc, #252]	; (83f20 <_cmd_infos+0x140>)
   83e22:	4631      	mov	r1, r6
   83e24:	2067      	movs	r0, #103	; 0x67
   83e26:	47a0      	blx	r4
		Putstr("\t NVPSIZ: "),Putstr(nvpsiz[chipData.ul_nvpsiz]);	Putstr("\r\n");
   83e28:	493e      	ldr	r1, [pc, #248]	; (83f24 <_cmd_infos+0x144>)
   83e2a:	2067      	movs	r0, #103	; 0x67
   83e2c:	47a0      	blx	r4
   83e2e:	4d3e      	ldr	r5, [pc, #248]	; (83f28 <_cmd_infos+0x148>)
   83e30:	9b03      	ldr	r3, [sp, #12]
   83e32:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   83e36:	2067      	movs	r0, #103	; 0x67
   83e38:	47a0      	blx	r4
   83e3a:	4631      	mov	r1, r6
   83e3c:	2067      	movs	r0, #103	; 0x67
   83e3e:	47a0      	blx	r4
		Putstr("\tNVPSIZ2: "),Putstr(nvpsiz[chipData.ul_nvpsiz2]);	Putstr("\r\n");
   83e40:	493a      	ldr	r1, [pc, #232]	; (83f2c <_cmd_infos+0x14c>)
   83e42:	2067      	movs	r0, #103	; 0x67
   83e44:	47a0      	blx	r4
   83e46:	9b04      	ldr	r3, [sp, #16]
   83e48:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   83e4c:	2067      	movs	r0, #103	; 0x67
   83e4e:	47a0      	blx	r4
   83e50:	4631      	mov	r1, r6
   83e52:	2067      	movs	r0, #103	; 0x67
   83e54:	47a0      	blx	r4
		Putstr("\tSRAMSIZ: "),Putstr(sramsiz[chipData.ul_sramsiz]);	Putstr("\r\n");
   83e56:	4936      	ldr	r1, [pc, #216]	; (83f30 <_cmd_infos+0x150>)
   83e58:	2067      	movs	r0, #103	; 0x67
   83e5a:	47a0      	blx	r4
   83e5c:	9a05      	ldr	r2, [sp, #20]
   83e5e:	4b35      	ldr	r3, [pc, #212]	; (83f34 <_cmd_infos+0x154>)
   83e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   83e64:	2067      	movs	r0, #103	; 0x67
   83e66:	47a0      	blx	r4
   83e68:	4631      	mov	r1, r6
   83e6a:	2067      	movs	r0, #103	; 0x67
   83e6c:	47a0      	blx	r4
#define k sc
		k=0;
		while(arch[k].value && (arch[k].value!=chipData.ul_arch)) k++;
   83e6e:	9906      	ldr	r1, [sp, #24]
   83e70:	2919      	cmp	r1, #25
   83e72:	d038      	beq.n	83ee6 <_cmd_infos+0x106>
   83e74:	4b30      	ldr	r3, [pc, #192]	; (83f38 <_cmd_infos+0x158>)
   83e76:	2400      	movs	r4, #0
   83e78:	3401      	adds	r4, #1
   83e7a:	7b1a      	ldrb	r2, [r3, #12]
   83e7c:	b112      	cbz	r2, 83e84 <_cmd_infos+0xa4>
   83e7e:	330c      	adds	r3, #12
   83e80:	428a      	cmp	r2, r1
   83e82:	d1f9      	bne.n	83e78 <_cmd_infos+0x98>
		Putstr("\t   ARCH: "),Putstr(arch[k].name); Putstr(" --- "); Putstr(arch[k].description); Putstr("\r\n");
   83e84:	492d      	ldr	r1, [pc, #180]	; (83f3c <_cmd_infos+0x15c>)
   83e86:	2067      	movs	r0, #103	; 0x67
   83e88:	4d1f      	ldr	r5, [pc, #124]	; (83f08 <_cmd_infos+0x128>)
   83e8a:	47a8      	blx	r5
   83e8c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 83f38 <_cmd_infos+0x158>
   83e90:	ea4f 0944 	mov.w	r9, r4, lsl #1
   83e94:	eb09 0304 	add.w	r3, r9, r4
   83e98:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   83e9c:	6859      	ldr	r1, [r3, #4]
   83e9e:	2067      	movs	r0, #103	; 0x67
   83ea0:	47a8      	blx	r5
   83ea2:	4927      	ldr	r1, [pc, #156]	; (83f40 <_cmd_infos+0x160>)
   83ea4:	2067      	movs	r0, #103	; 0x67
   83ea6:	47a8      	blx	r5
   83ea8:	444c      	add	r4, r9
   83eaa:	eb08 0884 	add.w	r8, r8, r4, lsl #2
   83eae:	f8d8 1008 	ldr.w	r1, [r8, #8]
   83eb2:	2067      	movs	r0, #103	; 0x67
   83eb4:	47a8      	blx	r5
   83eb6:	4631      	mov	r1, r6
   83eb8:	2067      	movs	r0, #103	; 0x67
   83eba:	47a8      	blx	r5
#undef k
		Putstr("\t NVPTYP: "),Putstr(nvptyp[chipData.ul_nvptyp]);	Putstr("\r\n");
   83ebc:	4921      	ldr	r1, [pc, #132]	; (83f44 <_cmd_infos+0x164>)
   83ebe:	2067      	movs	r0, #103	; 0x67
   83ec0:	47a8      	blx	r5
   83ec2:	9a07      	ldr	r2, [sp, #28]
   83ec4:	4b20      	ldr	r3, [pc, #128]	; (83f48 <_cmd_infos+0x168>)
   83ec6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   83eca:	2067      	movs	r0, #103	; 0x67
   83ecc:	47a8      	blx	r5
   83ece:	4631      	mov	r1, r6
   83ed0:	2067      	movs	r0, #103	; 0x67
   83ed2:	47a8      	blx	r5
	if(chipData.ul_extflag)
   83ed4:	9b08      	ldr	r3, [sp, #32]
   83ed6:	b943      	cbnz	r3, 83eea <_cmd_infos+0x10a>
	{
		sprintf(buf,"\t   EXID: %08X\r\n",(unsigned int)chipData.ul_extid); Putstr(buf);
	}
	Putstr("\r\n\t=====================================================\r\n\n");
   83ed8:	491c      	ldr	r1, [pc, #112]	; (83f4c <_cmd_infos+0x16c>)
   83eda:	2067      	movs	r0, #103	; 0x67
   83edc:	4b0a      	ldr	r3, [pc, #40]	; (83f08 <_cmd_infos+0x128>)
   83ede:	4798      	blx	r3
}
   83ee0:	b00b      	add	sp, #44	; 0x2c
   83ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		k=0;
   83ee6:	2400      	movs	r4, #0
   83ee8:	e7cc      	b.n	83e84 <_cmd_infos+0xa4>
		sprintf(buf,"\t   EXID: %08X\r\n",(unsigned int)chipData.ul_extid); Putstr(buf);
   83eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
   83eec:	4918      	ldr	r1, [pc, #96]	; (83f50 <_cmd_infos+0x170>)
   83eee:	4807      	ldr	r0, [pc, #28]	; (83f0c <_cmd_infos+0x12c>)
   83ef0:	4b08      	ldr	r3, [pc, #32]	; (83f14 <_cmd_infos+0x134>)
   83ef2:	4798      	blx	r3
   83ef4:	4639      	mov	r1, r7
   83ef6:	2067      	movs	r0, #103	; 0x67
   83ef8:	47a8      	blx	r5
   83efa:	e7ed      	b.n	83ed8 <_cmd_infos+0xf8>
   83efc:	400e0740 	.word	0x400e0740
   83f00:	00080221 	.word	0x00080221
   83f04:	00089d78 	.word	0x00089d78
   83f08:	00083f55 	.word	0x00083f55
   83f0c:	200012ec 	.word	0x200012ec
   83f10:	00089db4 	.word	0x00089db4
   83f14:	00084b49 	.word	0x00084b49
   83f18:	00089dc4 	.word	0x00089dc4
   83f1c:	20000578 	.word	0x20000578
   83f20:	00089d08 	.word	0x00089d08
   83f24:	00089dd0 	.word	0x00089dd0
   83f28:	20000598 	.word	0x20000598
   83f2c:	00089ddc 	.word	0x00089ddc
   83f30:	00089de8 	.word	0x00089de8
   83f34:	200005ec 	.word	0x200005ec
   83f38:	00089eac 	.word	0x00089eac
   83f3c:	00089df4 	.word	0x00089df4
   83f40:	00089e00 	.word	0x00089e00
   83f44:	00089e08 	.word	0x00089e08
   83f48:	200005d8 	.word	0x200005d8
   83f4c:	00089e28 	.word	0x00089e28
   83f50:	00089e14 	.word	0x00089e14

00083f54 <Shellcom>:
	char	*pTxRead;
}shellcom;


uint32_t Shellcom(uint32_t sc, ...)
{
   83f54:	b40f      	push	{r0, r1, r2, r3}
   83f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	switch(sc)
   83f58:	9906      	ldr	r1, [sp, #24]
   83f5a:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
   83f5e:	2b05      	cmp	r3, #5
   83f60:	f200 80dd 	bhi.w	8411e <Shellcom+0x1ca>
   83f64:	e8df f013 	tbh	[pc, r3, lsl #1]
   83f68:	00db0006 	.word	0x00db0006
   83f6c:	005a003b 	.word	0x005a003b
   83f70:	00b40087 	.word	0x00b40087
	{
	case SHELLCOM_NEW:
		shellcom.pTxRead=shellcom.pTxWrite=shellcomTxBuf;
   83f74:	4b6c      	ldr	r3, [pc, #432]	; (84128 <Shellcom+0x1d4>)
   83f76:	4a6d      	ldr	r2, [pc, #436]	; (8412c <Shellcom+0x1d8>)
   83f78:	601a      	str	r2, [r3, #0]
   83f7a:	605a      	str	r2, [r3, #4]
		pmc_enable_periph_clk(ID_UART);
   83f7c:	2008      	movs	r0, #8
   83f7e:	4b6c      	ldr	r3, [pc, #432]	; (84130 <Shellcom+0x1dc>)
   83f80:	4798      	blx	r3
		pio_configure_pin(UART_TX_PIN,UART_TX_PIN_FLAGS);
   83f82:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83f86:	200c      	movs	r0, #12
   83f88:	4c6a      	ldr	r4, [pc, #424]	; (84134 <Shellcom+0x1e0>)
   83f8a:	47a0      	blx	r4
		pio_configure_pin(UART_RX_PIN,UART_RX_PIN_FLAGS);
   83f8c:	496a      	ldr	r1, [pc, #424]	; (84138 <Shellcom+0x1e4>)
   83f8e:	200b      	movs	r0, #11
   83f90:	47a0      	blx	r4
		if(uart_init(UART,&uart_opt)) Error(ERROR_SHELLCOM_UART_INIT_FAILED);
   83f92:	496a      	ldr	r1, [pc, #424]	; (8413c <Shellcom+0x1e8>)
   83f94:	486a      	ldr	r0, [pc, #424]	; (84140 <Shellcom+0x1ec>)
   83f96:	4b6b      	ldr	r3, [pc, #428]	; (84144 <Shellcom+0x1f0>)
   83f98:	4798      	blx	r3
   83f9a:	b938      	cbnz	r0, 83fac <Shellcom+0x58>
   83f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
   83fa0:	4b69      	ldr	r3, [pc, #420]	; (84148 <Shellcom+0x1f4>)
   83fa2:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(ID_UART);
		while(uart_is_rx_ready(UART)) uart_read(UART,(uint8_t*)&sc);
   83fa4:	4c66      	ldr	r4, [pc, #408]	; (84140 <Shellcom+0x1ec>)
   83fa6:	4e69      	ldr	r6, [pc, #420]	; (8414c <Shellcom+0x1f8>)
   83fa8:	4f69      	ldr	r7, [pc, #420]	; (84150 <Shellcom+0x1fc>)
   83faa:	e006      	b.n	83fba <Shellcom+0x66>
		if(uart_init(UART,&uart_opt)) Error(ERROR_SHELLCOM_UART_INIT_FAILED);
   83fac:	2018      	movs	r0, #24
   83fae:	4b69      	ldr	r3, [pc, #420]	; (84154 <Shellcom+0x200>)
   83fb0:	4798      	blx	r3
   83fb2:	e7f3      	b.n	83f9c <Shellcom+0x48>
		while(uart_is_rx_ready(UART)) uart_read(UART,(uint8_t*)&sc);
   83fb4:	a906      	add	r1, sp, #24
   83fb6:	4620      	mov	r0, r4
   83fb8:	47b8      	blx	r7
   83fba:	4620      	mov	r0, r4
   83fbc:	47b0      	blx	r6
   83fbe:	4605      	mov	r5, r0
   83fc0:	2800      	cmp	r0, #0
   83fc2:	d1f7      	bne.n	83fb4 <Shellcom+0x60>
		uart_get_status(UART);	
   83fc4:	4c5e      	ldr	r4, [pc, #376]	; (84140 <Shellcom+0x1ec>)
   83fc6:	4620      	mov	r0, r4
   83fc8:	4b63      	ldr	r3, [pc, #396]	; (84158 <Shellcom+0x204>)
   83fca:	4798      	blx	r3
		uart_enable_interrupt(UART,US_IER_RXRDY);
   83fcc:	2101      	movs	r1, #1
   83fce:	4620      	mov	r0, r4
   83fd0:	4b62      	ldr	r3, [pc, #392]	; (8415c <Shellcom+0x208>)
   83fd2:	4798      	blx	r3
	default:
		Error(ERROR_SHELLCOM_SWITCH_BAD_SC, (uint32_t)sc);
	}

	return 0;
}
   83fd4:	4628      	mov	r0, r5
   83fd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   83fda:	b004      	add	sp, #16
   83fdc:	4770      	bx	lr
		*shellcom.pTxWrite++=_charData;
   83fde:	4b52      	ldr	r3, [pc, #328]	; (84128 <Shellcom+0x1d4>)
   83fe0:	681a      	ldr	r2, [r3, #0]
   83fe2:	1c51      	adds	r1, r2, #1
   83fe4:	6019      	str	r1, [r3, #0]
   83fe6:	9907      	ldr	r1, [sp, #28]
   83fe8:	7011      	strb	r1, [r2, #0]
		if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   83fea:	681a      	ldr	r2, [r3, #0]
   83fec:	4b5c      	ldr	r3, [pc, #368]	; (84160 <Shellcom+0x20c>)
   83fee:	429a      	cmp	r2, r3
   83ff0:	d303      	bcc.n	83ffa <Shellcom+0xa6>
   83ff2:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
   83ff6:	4b4c      	ldr	r3, [pc, #304]	; (84128 <Shellcom+0x1d4>)
   83ff8:	601a      	str	r2, [r3, #0]
		if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   83ffa:	4b4b      	ldr	r3, [pc, #300]	; (84128 <Shellcom+0x1d4>)
   83ffc:	681a      	ldr	r2, [r3, #0]
   83ffe:	685b      	ldr	r3, [r3, #4]
   84000:	429a      	cmp	r2, r3
   84002:	d006      	beq.n	84012 <Shellcom+0xbe>
		uart_enable_interrupt(UART,US_IER_TXEMPTY);
   84004:	f44f 7100 	mov.w	r1, #512	; 0x200
   84008:	484d      	ldr	r0, [pc, #308]	; (84140 <Shellcom+0x1ec>)
   8400a:	4b54      	ldr	r3, [pc, #336]	; (8415c <Shellcom+0x208>)
   8400c:	4798      	blx	r3
		return 1;
   8400e:	2501      	movs	r5, #1
   84010:	e7e0      	b.n	83fd4 <Shellcom+0x80>
		if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   84012:	2100      	movs	r1, #0
   84014:	2017      	movs	r0, #23
   84016:	4b4f      	ldr	r3, [pc, #316]	; (84154 <Shellcom+0x200>)
   84018:	4798      	blx	r3
   8401a:	e7f3      	b.n	84004 <Shellcom+0xb0>
		_nChar=0;
   8401c:	2300      	movs	r3, #0
   8401e:	9306      	str	r3, [sp, #24]
		while(*(char*)_pStr)
   84020:	9b07      	ldr	r3, [sp, #28]
   84022:	4619      	mov	r1, r3
   84024:	781a      	ldrb	r2, [r3, #0]
   84026:	b1fa      	cbz	r2, 84068 <Shellcom+0x114>
			*shellcom.pTxWrite++=*(char*)_pStr++; _nChar++;
   84028:	4c3f      	ldr	r4, [pc, #252]	; (84128 <Shellcom+0x1d4>)
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   8402a:	4e4d      	ldr	r6, [pc, #308]	; (84160 <Shellcom+0x20c>)
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   8402c:	4d44      	ldr	r5, [pc, #272]	; (84140 <Shellcom+0x1ec>)
			*shellcom.pTxWrite++=*(char*)_pStr++; _nChar++;
   8402e:	6822      	ldr	r2, [r4, #0]
   84030:	1c50      	adds	r0, r2, #1
   84032:	6020      	str	r0, [r4, #0]
   84034:	3301      	adds	r3, #1
   84036:	9307      	str	r3, [sp, #28]
   84038:	780b      	ldrb	r3, [r1, #0]
   8403a:	7013      	strb	r3, [r2, #0]
   8403c:	9b06      	ldr	r3, [sp, #24]
   8403e:	3301      	adds	r3, #1
   84040:	9306      	str	r3, [sp, #24]
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   84042:	6823      	ldr	r3, [r4, #0]
   84044:	42b3      	cmp	r3, r6
   84046:	bf24      	itt	cs
   84048:	4b38      	ldrcs	r3, [pc, #224]	; (8412c <Shellcom+0x1d8>)
   8404a:	6023      	strcs	r3, [r4, #0]
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   8404c:	6822      	ldr	r2, [r4, #0]
   8404e:	6863      	ldr	r3, [r4, #4]
   84050:	429a      	cmp	r2, r3
   84052:	d00b      	beq.n	8406c <Shellcom+0x118>
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   84054:	f44f 7100 	mov.w	r1, #512	; 0x200
   84058:	4628      	mov	r0, r5
   8405a:	4b40      	ldr	r3, [pc, #256]	; (8415c <Shellcom+0x208>)
   8405c:	4798      	blx	r3
		while(*(char*)_pStr)
   8405e:	9b07      	ldr	r3, [sp, #28]
   84060:	4619      	mov	r1, r3
   84062:	781a      	ldrb	r2, [r3, #0]
   84064:	2a00      	cmp	r2, #0
   84066:	d1e2      	bne.n	8402e <Shellcom+0xda>
		return _nChar;
   84068:	9d06      	ldr	r5, [sp, #24]
   8406a:	e7b3      	b.n	83fd4 <Shellcom+0x80>
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   8406c:	2100      	movs	r1, #0
   8406e:	2017      	movs	r0, #23
   84070:	4b38      	ldr	r3, [pc, #224]	; (84154 <Shellcom+0x200>)
   84072:	4798      	blx	r3
   84074:	e7ee      	b.n	84054 <Shellcom+0x100>
		_nChar=0;
   84076:	2300      	movs	r3, #0
   84078:	9306      	str	r3, [sp, #24]
		while(_strLen)
   8407a:	9b08      	ldr	r3, [sp, #32]
   8407c:	b30b      	cbz	r3, 840c2 <Shellcom+0x16e>
			*shellcom.pTxWrite++=*(char*)_pStr++; _strLen--; _nChar++;
   8407e:	4c2a      	ldr	r4, [pc, #168]	; (84128 <Shellcom+0x1d4>)
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   84080:	4e37      	ldr	r6, [pc, #220]	; (84160 <Shellcom+0x20c>)
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   84082:	4d2f      	ldr	r5, [pc, #188]	; (84140 <Shellcom+0x1ec>)
			*shellcom.pTxWrite++=*(char*)_pStr++; _strLen--; _nChar++;
   84084:	6823      	ldr	r3, [r4, #0]
   84086:	1c5a      	adds	r2, r3, #1
   84088:	6022      	str	r2, [r4, #0]
   8408a:	9a07      	ldr	r2, [sp, #28]
   8408c:	1c51      	adds	r1, r2, #1
   8408e:	9107      	str	r1, [sp, #28]
   84090:	7812      	ldrb	r2, [r2, #0]
   84092:	701a      	strb	r2, [r3, #0]
   84094:	9b08      	ldr	r3, [sp, #32]
   84096:	3b01      	subs	r3, #1
   84098:	9308      	str	r3, [sp, #32]
   8409a:	9b06      	ldr	r3, [sp, #24]
   8409c:	3301      	adds	r3, #1
   8409e:	9306      	str	r3, [sp, #24]
			if(shellcom.pTxWrite>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxWrite=shellcomTxBuf;
   840a0:	6823      	ldr	r3, [r4, #0]
   840a2:	42b3      	cmp	r3, r6
   840a4:	bf24      	itt	cs
   840a6:	4b21      	ldrcs	r3, [pc, #132]	; (8412c <Shellcom+0x1d8>)
   840a8:	6023      	strcs	r3, [r4, #0]
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   840aa:	6822      	ldr	r2, [r4, #0]
   840ac:	6863      	ldr	r3, [r4, #4]
   840ae:	429a      	cmp	r2, r3
   840b0:	d009      	beq.n	840c6 <Shellcom+0x172>
			uart_enable_interrupt(UART,US_IER_TXEMPTY);
   840b2:	f44f 7100 	mov.w	r1, #512	; 0x200
   840b6:	4628      	mov	r0, r5
   840b8:	4b28      	ldr	r3, [pc, #160]	; (8415c <Shellcom+0x208>)
   840ba:	4798      	blx	r3
		while(_strLen)
   840bc:	9b08      	ldr	r3, [sp, #32]
   840be:	2b00      	cmp	r3, #0
   840c0:	d1e0      	bne.n	84084 <Shellcom+0x130>
		return _nChar;
   840c2:	9d06      	ldr	r5, [sp, #24]
   840c4:	e786      	b.n	83fd4 <Shellcom+0x80>
			if(shellcom.pTxWrite==shellcom.pTxRead) Error(ERROR_SHELLCOM_TX_BUFFER_FULL, (uint32_t)0);
   840c6:	2100      	movs	r1, #0
   840c8:	2017      	movs	r0, #23
   840ca:	4b22      	ldr	r3, [pc, #136]	; (84154 <Shellcom+0x200>)
   840cc:	4798      	blx	r3
   840ce:	e7f0      	b.n	840b2 <Shellcom+0x15e>
		_nChar=0;
   840d0:	2300      	movs	r3, #0
   840d2:	9306      	str	r3, [sp, #24]
		while(_strLen)
   840d4:	9b08      	ldr	r3, [sp, #32]
   840d6:	b303      	cbz	r3, 8411a <Shellcom+0x1c6>
			Putch(hexDigits[(*(char*)_pStr)>>4]);
   840d8:	4d22      	ldr	r5, [pc, #136]	; (84164 <Shellcom+0x210>)
   840da:	2466      	movs	r4, #102	; 0x66
			Putch(' ');
   840dc:	2620      	movs	r6, #32
			Putch(hexDigits[(*(char*)_pStr)>>4]);
   840de:	9b07      	ldr	r3, [sp, #28]
   840e0:	781b      	ldrb	r3, [r3, #0]
   840e2:	091b      	lsrs	r3, r3, #4
   840e4:	5ce9      	ldrb	r1, [r5, r3]
   840e6:	4620      	mov	r0, r4
   840e8:	f7ff ff34 	bl	83f54 <Shellcom>
			Putch(hexDigits[(*(char*)_pStr)&0x0F]);
   840ec:	9b07      	ldr	r3, [sp, #28]
   840ee:	781b      	ldrb	r3, [r3, #0]
   840f0:	f003 030f 	and.w	r3, r3, #15
   840f4:	5ce9      	ldrb	r1, [r5, r3]
   840f6:	4620      	mov	r0, r4
   840f8:	f7ff ff2c 	bl	83f54 <Shellcom>
			Putch(' ');
   840fc:	4631      	mov	r1, r6
   840fe:	4620      	mov	r0, r4
   84100:	f7ff ff28 	bl	83f54 <Shellcom>
			 _pStr++; _strLen--; _nChar++;
   84104:	9b07      	ldr	r3, [sp, #28]
   84106:	3301      	adds	r3, #1
   84108:	9307      	str	r3, [sp, #28]
   8410a:	9b08      	ldr	r3, [sp, #32]
   8410c:	3b01      	subs	r3, #1
   8410e:	9308      	str	r3, [sp, #32]
   84110:	9a06      	ldr	r2, [sp, #24]
   84112:	3201      	adds	r2, #1
   84114:	9206      	str	r2, [sp, #24]
		while(_strLen)
   84116:	2b00      	cmp	r3, #0
   84118:	d1e1      	bne.n	840de <Shellcom+0x18a>
		return _nChar;
   8411a:	9d06      	ldr	r5, [sp, #24]
   8411c:	e75a      	b.n	83fd4 <Shellcom+0x80>
		Error(ERROR_SHELLCOM_SWITCH_BAD_SC, (uint32_t)sc);
   8411e:	200c      	movs	r0, #12
   84120:	4b0c      	ldr	r3, [pc, #48]	; (84154 <Shellcom+0x200>)
   84122:	4798      	blx	r3
	return 0;
   84124:	2500      	movs	r5, #0
   84126:	e755      	b.n	83fd4 <Shellcom+0x80>
   84128:	20001750 	.word	0x20001750
   8412c:	20001758 	.word	0x20001758
   84130:	00081631 	.word	0x00081631
   84134:	00081431 	.word	0x00081431
   84138:	08000001 	.word	0x08000001
   8413c:	0008a7cc 	.word	0x0008a7cc
   84140:	400e0600 	.word	0x400e0600
   84144:	00081ad5 	.word	0x00081ad5
   84148:	e000e100 	.word	0xe000e100
   8414c:	00081b17 	.word	0x00081b17
   84150:	00081b1f 	.word	0x00081b1f
   84154:	00082481 	.word	0x00082481
   84158:	00081b13 	.word	0x00081b13
   8415c:	00081b0b 	.word	0x00081b0b
   84160:	20001b58 	.word	0x20001b58
   84164:	00089d4c 	.word	0x00089d4c

00084168 <UART_Handler>:
enum{
	_SHELL_KBHIT = 2
};

void UART_Handler()
{
   84168:	b510      	push	{r4, lr}
   8416a:	b082      	sub	sp, #8
	uint32_t dw_status = uart_get_status(UART);
   8416c:	4816      	ldr	r0, [pc, #88]	; (841c8 <UART_Handler+0x60>)
   8416e:	4b17      	ldr	r3, [pc, #92]	; (841cc <UART_Handler+0x64>)
   84170:	4798      	blx	r3
   84172:	4604      	mov	r4, r0
	//TX section //////////////////////////////////////////////////////////////////////////////////
	if(mIsBitsSet(dw_status,US_CSR_TXEMPTY))
   84174:	f410 7f00 	tst.w	r0, #512	; 0x200
   84178:	d011      	beq.n	8419e <UART_Handler+0x36>
	{
		if(shellcom.pTxRead!=shellcom.pTxWrite)
   8417a:	4a15      	ldr	r2, [pc, #84]	; (841d0 <UART_Handler+0x68>)
   8417c:	6853      	ldr	r3, [r2, #4]
   8417e:	6812      	ldr	r2, [r2, #0]
   84180:	4293      	cmp	r3, r2
   84182:	d011      	beq.n	841a8 <UART_Handler+0x40>
		{
			UART->UART_THR = *shellcom.pTxRead++;
   84184:	1c5a      	adds	r2, r3, #1
   84186:	4912      	ldr	r1, [pc, #72]	; (841d0 <UART_Handler+0x68>)
   84188:	604a      	str	r2, [r1, #4]
   8418a:	7819      	ldrb	r1, [r3, #0]
   8418c:	4b0e      	ldr	r3, [pc, #56]	; (841c8 <UART_Handler+0x60>)
   8418e:	61d9      	str	r1, [r3, #28]
			if(shellcom.pTxRead>=shellcomTxBuf+SHELLCOM_TXBUF_LEN) shellcom.pTxRead=shellcomTxBuf;
   84190:	4b10      	ldr	r3, [pc, #64]	; (841d4 <UART_Handler+0x6c>)
   84192:	429a      	cmp	r2, r3
   84194:	d303      	bcc.n	8419e <UART_Handler+0x36>
   84196:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
   8419a:	4b0d      	ldr	r3, [pc, #52]	; (841d0 <UART_Handler+0x68>)
   8419c:	605a      	str	r2, [r3, #4]
			uart_disable_interrupt(UART,US_IER_TXEMPTY);
		}
	}

	//RX section //////////////////////////////////////////////////////////////////////////////////
	if(mIsBitsSet(dw_status,US_CSR_RXRDY))
   8419e:	f014 0f01 	tst.w	r4, #1
   841a2:	d107      	bne.n	841b4 <UART_Handler+0x4c>
	{
		PushTask(Shell,_SHELL_KBHIT,UART->UART_RHR,0);
	}
}
   841a4:	b002      	add	sp, #8
   841a6:	bd10      	pop	{r4, pc}
			uart_disable_interrupt(UART,US_IER_TXEMPTY);
   841a8:	f44f 7100 	mov.w	r1, #512	; 0x200
   841ac:	4806      	ldr	r0, [pc, #24]	; (841c8 <UART_Handler+0x60>)
   841ae:	4b0a      	ldr	r3, [pc, #40]	; (841d8 <UART_Handler+0x70>)
   841b0:	4798      	blx	r3
   841b2:	e7f4      	b.n	8419e <UART_Handler+0x36>
		PushTask(Shell,_SHELL_KBHIT,UART->UART_RHR,0);
   841b4:	4b04      	ldr	r3, [pc, #16]	; (841c8 <UART_Handler+0x60>)
   841b6:	699b      	ldr	r3, [r3, #24]
   841b8:	2200      	movs	r2, #0
   841ba:	9200      	str	r2, [sp, #0]
   841bc:	2202      	movs	r2, #2
   841be:	4907      	ldr	r1, [pc, #28]	; (841dc <UART_Handler+0x74>)
   841c0:	2066      	movs	r0, #102	; 0x66
   841c2:	4c07      	ldr	r4, [pc, #28]	; (841e0 <UART_Handler+0x78>)
   841c4:	47a0      	blx	r4
}
   841c6:	e7ed      	b.n	841a4 <UART_Handler+0x3c>
   841c8:	400e0600 	.word	0x400e0600
   841cc:	00081b13 	.word	0x00081b13
   841d0:	20001750 	.word	0x20001750
   841d4:	20001b58 	.word	0x20001b58
   841d8:	00081b0f 	.word	0x00081b0f
   841dc:	00082e25 	.word	0x00082e25
   841e0:	000841e5 	.word	0x000841e5

000841e4 <Taskman>:
	_TASKMAN_DELAYED_TASK_PROC	= 1
};


uint32_t Taskman(uint32_t sc, ...)
{
   841e4:	b40f      	push	{r0, r1, r2, r3}
   841e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   841e8:	b083      	sub	sp, #12
	switch(sc)
   841ea:	9908      	ldr	r1, [sp, #32]
   841ec:	2964      	cmp	r1, #100	; 0x64
   841ee:	d028      	beq.n	84242 <Taskman+0x5e>
   841f0:	d91e      	bls.n	84230 <Taskman+0x4c>
   841f2:	2966      	cmp	r1, #102	; 0x66
   841f4:	d06b      	beq.n	842ce <Taskman+0xea>
   841f6:	2967      	cmp	r1, #103	; 0x67
   841f8:	f040 80cd 	bne.w	84396 <Taskman+0x1b2>
#undef _delay
#undef k
		break;

	case TASKMAN_POP:
		cpu_irq_enter_critical();
   841fc:	4b68      	ldr	r3, [pc, #416]	; (843a0 <Taskman+0x1bc>)
   841fe:	4798      	blx	r3
		if(taskman.pPop!=taskman.pPush)
   84200:	4a68      	ldr	r2, [pc, #416]	; (843a4 <Taskman+0x1c0>)
   84202:	6853      	ldr	r3, [r2, #4]
   84204:	6812      	ldr	r2, [r2, #0]
   84206:	4293      	cmp	r3, r2
   84208:	f000 80ae 	beq.w	84368 <Taskman+0x184>
		{
			t_pTaskFunc	 func;
			uint32_t pa;
			func = taskman.pPop->pFunc;
   8420c:	681d      	ldr	r5, [r3, #0]
			sc = taskman.pPop->sc;
   8420e:	685c      	ldr	r4, [r3, #4]
   84210:	9408      	str	r4, [sp, #32]
			pa = taskman.pPop->param;
   84212:	689e      	ldr	r6, [r3, #8]
			taskman.pPop++;
   84214:	3310      	adds	r3, #16
			if(taskman.pPop>=tasks+TASKMAN_TASK_LIST_LEN) taskman.pPop=tasks;
   84216:	4a64      	ldr	r2, [pc, #400]	; (843a8 <Taskman+0x1c4>)
   84218:	4293      	cmp	r3, r2
   8421a:	f0c0 80a2 	bcc.w	84362 <Taskman+0x17e>
   8421e:	4a63      	ldr	r2, [pc, #396]	; (843ac <Taskman+0x1c8>)
   84220:	4b60      	ldr	r3, [pc, #384]	; (843a4 <Taskman+0x1c0>)
   84222:	605a      	str	r2, [r3, #4]
			cpu_irq_leave_critical();
   84224:	4b62      	ldr	r3, [pc, #392]	; (843b0 <Taskman+0x1cc>)
   84226:	4798      	blx	r3
			func(sc,pa);
   84228:	4631      	mov	r1, r6
   8422a:	4620      	mov	r0, r4
   8422c:	47a8      	blx	r5
			return 0; //Must return here because of "cpu_irq_leave_critical()"
   8422e:	e048      	b.n	842c2 <Taskman+0xde>
	switch(sc)
   84230:	2901      	cmp	r1, #1
   84232:	f040 80b0 	bne.w	84396 <Taskman+0x1b2>


	////////// PRIVATE SERVICES IMPLEMENTATION ///////////////////////////////////////////
	case _TASKMAN_DELAYED_TASK_PROC:
#define k sc
		for(k=0;k<TASKMAN_DELAYED_TASK_LIST_LEN;k++)
   84236:	2500      	movs	r5, #0
   84238:	9508      	str	r5, [sp, #32]
   8423a:	4c5e      	ldr	r4, [pc, #376]	; (843b4 <Taskman+0x1d0>)
		{
			if(dTasks[k].delay)
			{
				if(--dTasks[k].delay==0)
				{
					PushTask(
   8423c:	462f      	mov	r7, r5
   8423e:	2666      	movs	r6, #102	; 0x66
   84240:	e09a      	b.n	84378 <Taskman+0x194>
		taskman.pPop=taskman.pPush=tasks;
   84242:	4b58      	ldr	r3, [pc, #352]	; (843a4 <Taskman+0x1c0>)
   84244:	4a59      	ldr	r2, [pc, #356]	; (843ac <Taskman+0x1c8>)
   84246:	601a      	str	r2, [r3, #0]
   84248:	605a      	str	r2, [r3, #4]
   8424a:	4b5a      	ldr	r3, [pc, #360]	; (843b4 <Taskman+0x1d0>)
   8424c:	f503 61c8 	add.w	r1, r3, #1600	; 0x640
			dTasks[k].delay=0;
   84250:	2200      	movs	r2, #0
   84252:	60da      	str	r2, [r3, #12]
   84254:	3310      	adds	r3, #16
		for(k=0;k<TASKMAN_DELAYED_TASK_LIST_LEN;k++)
   84256:	428b      	cmp	r3, r1
   84258:	d1fb      	bne.n	84252 <Taskman+0x6e>
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   8425a:	4b57      	ldr	r3, [pc, #348]	; (843b8 <Taskman+0x1d4>)
   8425c:	2202      	movs	r2, #2
   8425e:	661a      	str	r2, [r3, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   84260:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   84262:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   84264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   84268:	6f19      	ldr	r1, [r3, #112]	; 0x70
   8426a:	f021 0102 	bic.w	r1, r1, #2
   8426e:	6719      	str	r1, [r3, #112]	; 0x70
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   84270:	605a      	str	r2, [r3, #4]
   84272:	2016      	movs	r0, #22
   84274:	4b51      	ldr	r3, [pc, #324]	; (843bc <Taskman+0x1d8>)
   84276:	4798      	blx	r3

	//Configure the PMC to enable the TC module.
	sysclk_enable_peripheral_clock(ID_TC_WAVEFORM);

	//Init TC to waveform mode.
	tc_init(
   84278:	4c51      	ldr	r4, [pc, #324]	; (843c0 <Taskman+0x1dc>)
   8427a:	4a52      	ldr	r2, [pc, #328]	; (843c4 <Taskman+0x1e0>)
   8427c:	2100      	movs	r1, #0
   8427e:	4620      	mov	r0, r4
   84280:	4b51      	ldr	r3, [pc, #324]	; (843c8 <Taskman+0x1e4>)
   84282:	4798      	blx	r3

	//Configure waveform frequency and duty cycle.
	rc =	(sysclk_get_peripheral_bus_hz(TC) /
	TC_WAVEFORM_DIVISOR) /
	TC_WAVEFORM_FREQUENCY;
	tc_write_rc(TC, TC_CHANNEL_WAVEFORM, rc);
   84284:	f240 22ee 	movw	r2, #750	; 0x2ee
   84288:	2100      	movs	r1, #0
   8428a:	4620      	mov	r0, r4
   8428c:	4b4f      	ldr	r3, [pc, #316]	; (843cc <Taskman+0x1e8>)
   8428e:	4798      	blx	r3

	ra = (100 - TC_WAVEFORM_DUTY_CYCLE) * rc / 100;
	tc_write_ra(TC, TC_CHANNEL_WAVEFORM, ra);
   84290:	f240 220d 	movw	r2, #525	; 0x20d
   84294:	2100      	movs	r1, #0
   84296:	4620      	mov	r0, r4
   84298:	4b4d      	ldr	r3, [pc, #308]	; (843d0 <Taskman+0x1ec>)
   8429a:	4798      	blx	r3

	//Enable TC TC_CHANNEL_WAVEFORM
	tc_start(TC, TC_CHANNEL_WAVEFORM);
   8429c:	2100      	movs	r1, #0
   8429e:	4620      	mov	r0, r4
   842a0:	4b4c      	ldr	r3, [pc, #304]	; (843d4 <Taskman+0x1f0>)
   842a2:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   842a4:	4b4c      	ldr	r3, [pc, #304]	; (843d8 <Taskman+0x1f4>)
   842a6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   842aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   842ae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   842b2:	2100      	movs	r1, #0
   842b4:	f883 1316 	strb.w	r1, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   842b8:	601a      	str	r2, [r3, #0]
		tc_enable_interrupt(TC, TC_CHANNEL_WAVEFORM, TC_IER_CPAS);
   842ba:	2204      	movs	r2, #4
   842bc:	4620      	mov	r0, r4
   842be:	4b47      	ldr	r3, [pc, #284]	; (843dc <Taskman+0x1f8>)
   842c0:	4798      	blx	r3
}
   842c2:	2000      	movs	r0, #0
   842c4:	b003      	add	sp, #12
   842c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   842ca:	b004      	add	sp, #16
   842cc:	4770      	bx	lr
		cpu_irq_enter_critical();
   842ce:	4b34      	ldr	r3, [pc, #208]	; (843a0 <Taskman+0x1bc>)
   842d0:	4798      	blx	r3
		if(_delay)
   842d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   842d4:	b345      	cbz	r5, 84328 <Taskman+0x144>
			for(k=0;(k<TASKMAN_DELAYED_TASK_LIST_LEN)&&(dTasks[k].delay);k++);
   842d6:	2300      	movs	r3, #0
   842d8:	9308      	str	r3, [sp, #32]
   842da:	4b36      	ldr	r3, [pc, #216]	; (843b4 <Taskman+0x1d0>)
   842dc:	68db      	ldr	r3, [r3, #12]
   842de:	b1a3      	cbz	r3, 8430a <Taskman+0x126>
   842e0:	2301      	movs	r3, #1
   842e2:	9308      	str	r3, [sp, #32]
   842e4:	4a33      	ldr	r2, [pc, #204]	; (843b4 <Taskman+0x1d0>)
   842e6:	2000      	movs	r0, #0
   842e8:	461c      	mov	r4, r3
   842ea:	69d1      	ldr	r1, [r2, #28]
   842ec:	b151      	cbz	r1, 84304 <Taskman+0x120>
   842ee:	3301      	adds	r3, #1
   842f0:	3210      	adds	r2, #16
   842f2:	4620      	mov	r0, r4
   842f4:	2b64      	cmp	r3, #100	; 0x64
   842f6:	d1f8      	bne.n	842ea <Taskman+0x106>
			if(k==TASKMAN_DELAYED_TASK_LIST_LEN) Error(ERROR_TASKMAN_DELAYED_TASKLIST_FULL, (uint32_t)0);
   842f8:	2100      	movs	r1, #0
   842fa:	2016      	movs	r0, #22
   842fc:	4b38      	ldr	r3, [pc, #224]	; (843e0 <Taskman+0x1fc>)
   842fe:	4798      	blx	r3
   84300:	2364      	movs	r3, #100	; 0x64
   84302:	e002      	b.n	8430a <Taskman+0x126>
   84304:	b970      	cbnz	r0, 84324 <Taskman+0x140>
   84306:	2b64      	cmp	r3, #100	; 0x64
   84308:	d0f6      	beq.n	842f8 <Taskman+0x114>
			dTasks[k].pFunc=_func;
   8430a:	492a      	ldr	r1, [pc, #168]	; (843b4 <Taskman+0x1d0>)
   8430c:	011b      	lsls	r3, r3, #4
   8430e:	18ca      	adds	r2, r1, r3
   84310:	9809      	ldr	r0, [sp, #36]	; 0x24
   84312:	50c8      	str	r0, [r1, r3]
			dTasks[k].sc=_sc;
   84314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84316:	6053      	str	r3, [r2, #4]
			dTasks[k].param=_param;
   84318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8431a:	6093      	str	r3, [r2, #8]
			dTasks[k].delay=_delay;
   8431c:	60d5      	str	r5, [r2, #12]
		cpu_irq_leave_critical();
   8431e:	4b24      	ldr	r3, [pc, #144]	; (843b0 <Taskman+0x1cc>)
   84320:	4798      	blx	r3
		break;
   84322:	e7ce      	b.n	842c2 <Taskman+0xde>
   84324:	9308      	str	r3, [sp, #32]
   84326:	e7ee      	b.n	84306 <Taskman+0x122>
			taskman.pPush->pFunc=_func;
   84328:	4b1e      	ldr	r3, [pc, #120]	; (843a4 <Taskman+0x1c0>)
   8432a:	681a      	ldr	r2, [r3, #0]
   8432c:	9909      	ldr	r1, [sp, #36]	; 0x24
   8432e:	6011      	str	r1, [r2, #0]
			taskman.pPush->sc=_sc;
   84330:	681b      	ldr	r3, [r3, #0]
   84332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84334:	605a      	str	r2, [r3, #4]
			taskman.pPush->param=_param;
   84336:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   84338:	609a      	str	r2, [r3, #8]
			taskman.pPush++;
   8433a:	3310      	adds	r3, #16
			if(taskman.pPush>=tasks+TASKMAN_TASK_LIST_LEN) taskman.pPush=tasks;
   8433c:	4a1a      	ldr	r2, [pc, #104]	; (843a8 <Taskman+0x1c4>)
   8433e:	4293      	cmp	r3, r2
   84340:	d20b      	bcs.n	8435a <Taskman+0x176>
			taskman.pPush++;
   84342:	4a18      	ldr	r2, [pc, #96]	; (843a4 <Taskman+0x1c0>)
   84344:	6013      	str	r3, [r2, #0]
			if(taskman.pPush==taskman.pPop) Error(ERROR_TASKMAN_TASKLIST_FULL, (uint32_t)0);
   84346:	4b17      	ldr	r3, [pc, #92]	; (843a4 <Taskman+0x1c0>)
   84348:	681a      	ldr	r2, [r3, #0]
   8434a:	685b      	ldr	r3, [r3, #4]
   8434c:	429a      	cmp	r2, r3
   8434e:	d1e6      	bne.n	8431e <Taskman+0x13a>
   84350:	2100      	movs	r1, #0
   84352:	2015      	movs	r0, #21
   84354:	4b22      	ldr	r3, [pc, #136]	; (843e0 <Taskman+0x1fc>)
   84356:	4798      	blx	r3
   84358:	e7e1      	b.n	8431e <Taskman+0x13a>
			if(taskman.pPush>=tasks+TASKMAN_TASK_LIST_LEN) taskman.pPush=tasks;
   8435a:	4a14      	ldr	r2, [pc, #80]	; (843ac <Taskman+0x1c8>)
   8435c:	4b11      	ldr	r3, [pc, #68]	; (843a4 <Taskman+0x1c0>)
   8435e:	601a      	str	r2, [r3, #0]
   84360:	e7f1      	b.n	84346 <Taskman+0x162>
			taskman.pPop++;
   84362:	4a10      	ldr	r2, [pc, #64]	; (843a4 <Taskman+0x1c0>)
   84364:	6053      	str	r3, [r2, #4]
   84366:	e75d      	b.n	84224 <Taskman+0x40>
		cpu_irq_leave_critical();
   84368:	4b11      	ldr	r3, [pc, #68]	; (843b0 <Taskman+0x1cc>)
   8436a:	4798      	blx	r3
		break;
   8436c:	e7a9      	b.n	842c2 <Taskman+0xde>
		for(k=0;k<TASKMAN_DELAYED_TASK_LIST_LEN;k++)
   8436e:	3501      	adds	r5, #1
   84370:	9508      	str	r5, [sp, #32]
   84372:	3410      	adds	r4, #16
   84374:	2d64      	cmp	r5, #100	; 0x64
   84376:	d0a4      	beq.n	842c2 <Taskman+0xde>
			if(dTasks[k].delay)
   84378:	68e3      	ldr	r3, [r4, #12]
   8437a:	2b00      	cmp	r3, #0
   8437c:	d0f7      	beq.n	8436e <Taskman+0x18a>
				if(--dTasks[k].delay==0)
   8437e:	3b01      	subs	r3, #1
   84380:	60e3      	str	r3, [r4, #12]
   84382:	2b00      	cmp	r3, #0
   84384:	d1f3      	bne.n	8436e <Taskman+0x18a>
					PushTask(
   84386:	68a3      	ldr	r3, [r4, #8]
   84388:	6862      	ldr	r2, [r4, #4]
   8438a:	6821      	ldr	r1, [r4, #0]
   8438c:	9700      	str	r7, [sp, #0]
   8438e:	4630      	mov	r0, r6
   84390:	f7ff ff28 	bl	841e4 <Taskman>
   84394:	e7eb      	b.n	8436e <Taskman+0x18a>
		Error(ERROR_TASKMAN_SWITCH_BAD_SC,  (uint32_t)sc);
   84396:	200b      	movs	r0, #11
   84398:	4b11      	ldr	r3, [pc, #68]	; (843e0 <Taskman+0x1fc>)
   8439a:	4798      	blx	r3
   8439c:	e791      	b.n	842c2 <Taskman+0xde>
   8439e:	bf00      	nop
   843a0:	00081669 	.word	0x00081669
   843a4:	20001c98 	.word	0x20001c98
   843a8:	20001c98 	.word	0x20001c98
   843ac:	20001b58 	.word	0x20001b58
   843b0:	000816a5 	.word	0x000816a5
   843b4:	20001ca0 	.word	0x20001ca0
   843b8:	400e0c00 	.word	0x400e0c00
   843bc:	00081631 	.word	0x00081631
   843c0:	40080000 	.word	0x40080000
   843c4:	0009c003 	.word	0x0009c003
   843c8:	00081a95 	.word	0x00081a95
   843cc:	00081abd 	.word	0x00081abd
   843d0:	00081ab5 	.word	0x00081ab5
   843d4:	00081aad 	.word	0x00081aad
   843d8:	e000e100 	.word	0xe000e100
   843dc:	00081ac5 	.word	0x00081ac5
   843e0:	00082481 	.word	0x00082481

000843e4 <TC0_Handler>:
{
   843e4:	b508      	push	{r3, lr}
	tc_get_status(TC, TC_CHANNEL_WAVEFORM);
   843e6:	2100      	movs	r1, #0
   843e8:	4806      	ldr	r0, [pc, #24]	; (84404 <TC0_Handler+0x20>)
   843ea:	4b07      	ldr	r3, [pc, #28]	; (84408 <TC0_Handler+0x24>)
   843ec:	4798      	blx	r3
	Taskman(_TASKMAN_DELAYED_TASK_PROC);
   843ee:	2001      	movs	r0, #1
   843f0:	4b06      	ldr	r3, [pc, #24]	; (8440c <TC0_Handler+0x28>)
   843f2:	4798      	blx	r3
	Shell(_SHELL_TIMER);
   843f4:	2003      	movs	r0, #3
   843f6:	4b06      	ldr	r3, [pc, #24]	; (84410 <TC0_Handler+0x2c>)
   843f8:	4798      	blx	r3
	ComRS485(_COMRS485_TIMER);
   843fa:	2001      	movs	r0, #1
   843fc:	4b05      	ldr	r3, [pc, #20]	; (84414 <TC0_Handler+0x30>)
   843fe:	4798      	blx	r3
   84400:	bd08      	pop	{r3, pc}
   84402:	bf00      	nop
   84404:	40080000 	.word	0x40080000
   84408:	00081acd 	.word	0x00081acd
   8440c:	000841e5 	.word	0x000841e5
   84410:	00082e25 	.word	0x00082e25
   84414:	0008038d 	.word	0x0008038d

00084418 <mstrtokRestore>:
    return pToken;
}

void  mstrtokRestore(void)
{
    if(_pEndToken) *_pEndToken=_chEndToken;
   84418:	4b03      	ldr	r3, [pc, #12]	; (84428 <mstrtokRestore+0x10>)
   8441a:	681b      	ldr	r3, [r3, #0]
   8441c:	b113      	cbz	r3, 84424 <mstrtokRestore+0xc>
   8441e:	4a03      	ldr	r2, [pc, #12]	; (8442c <mstrtokRestore+0x14>)
   84420:	7812      	ldrb	r2, [r2, #0]
   84422:	701a      	strb	r2, [r3, #0]
   84424:	4770      	bx	lr
   84426:	bf00      	nop
   84428:	20001180 	.word	0x20001180
   8442c:	2000117c 	.word	0x2000117c

00084430 <mstrtokReset>:
}

void  mstrtokReset(void)
{
    _chEndToken  = '\0';
   84430:	2300      	movs	r3, #0
   84432:	4a02      	ldr	r2, [pc, #8]	; (8443c <mstrtokReset+0xc>)
   84434:	7013      	strb	r3, [r2, #0]
    _pEndToken = NULL;
   84436:	4a02      	ldr	r2, [pc, #8]	; (84440 <mstrtokReset+0x10>)
   84438:	6013      	str	r3, [r2, #0]
   8443a:	4770      	bx	lr
   8443c:	2000117c 	.word	0x2000117c
   84440:	20001180 	.word	0x20001180

00084444 <_IsSeparator>:
}


char _IsSeparator(char ch, const char*pSep)
{
    while(*pSep && (*pSep!=ch)) pSep++;
   84444:	780b      	ldrb	r3, [r1, #0]
   84446:	b13b      	cbz	r3, 84458 <_IsSeparator+0x14>
   84448:	4298      	cmp	r0, r3
   8444a:	d005      	beq.n	84458 <_IsSeparator+0x14>
   8444c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   84450:	b113      	cbz	r3, 84458 <_IsSeparator+0x14>
   84452:	4283      	cmp	r3, r0
   84454:	d1fa      	bne.n	8444c <_IsSeparator+0x8>
   84456:	4603      	mov	r3, r0
    return *pSep;
}
   84458:	4618      	mov	r0, r3
   8445a:	4770      	bx	lr

0008445c <mstrtok>:
{
   8445c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(pStr) 
   84460:	2800      	cmp	r0, #0
   84462:	d02b      	beq.n	844bc <mstrtok+0x60>
        pToken=pStr;
   84464:	4a1d      	ldr	r2, [pc, #116]	; (844dc <mstrtok+0x80>)
   84466:	6010      	str	r0, [r2, #0]
    while(*pToken && _IsSeparator(*pToken,pSep)) { pToken++; }
   84468:	4b1c      	ldr	r3, [pc, #112]	; (844dc <mstrtok+0x80>)
   8446a:	681d      	ldr	r5, [r3, #0]
   8446c:	782c      	ldrb	r4, [r5, #0]
   8446e:	2c00      	cmp	r4, #0
   84470:	d030      	beq.n	844d4 <mstrtok+0x78>
   84472:	4688      	mov	r8, r1
   84474:	4e1a      	ldr	r6, [pc, #104]	; (844e0 <mstrtok+0x84>)
   84476:	4f19      	ldr	r7, [pc, #100]	; (844dc <mstrtok+0x80>)
   84478:	4641      	mov	r1, r8
   8447a:	4620      	mov	r0, r4
   8447c:	47b0      	blx	r6
   8447e:	b120      	cbz	r0, 8448a <mstrtok+0x2e>
   84480:	3501      	adds	r5, #1
   84482:	603d      	str	r5, [r7, #0]
   84484:	782c      	ldrb	r4, [r5, #0]
   84486:	2c00      	cmp	r4, #0
   84488:	d1f6      	bne.n	84478 <mstrtok+0x1c>
    _pEndToken=pToken;
   8448a:	4b16      	ldr	r3, [pc, #88]	; (844e4 <mstrtok+0x88>)
   8448c:	601d      	str	r5, [r3, #0]
    while(*_pEndToken && !_IsSeparator(*_pEndToken,pSep)) { _pEndToken++; }
   8448e:	782c      	ldrb	r4, [r5, #0]
   84490:	b1f4      	cbz	r4, 844d0 <mstrtok+0x74>
   84492:	462e      	mov	r6, r5
   84494:	4f12      	ldr	r7, [pc, #72]	; (844e0 <mstrtok+0x84>)
   84496:	f8df 904c 	ldr.w	r9, [pc, #76]	; 844e4 <mstrtok+0x88>
   8449a:	4641      	mov	r1, r8
   8449c:	4620      	mov	r0, r4
   8449e:	47b8      	blx	r7
   844a0:	b928      	cbnz	r0, 844ae <mstrtok+0x52>
   844a2:	3601      	adds	r6, #1
   844a4:	f8c9 6000 	str.w	r6, [r9]
   844a8:	7834      	ldrb	r4, [r6, #0]
   844aa:	2c00      	cmp	r4, #0
   844ac:	d1f5      	bne.n	8449a <mstrtok+0x3e>
    _chEndToken=*_pEndToken;
   844ae:	4b0e      	ldr	r3, [pc, #56]	; (844e8 <mstrtok+0x8c>)
   844b0:	701c      	strb	r4, [r3, #0]
    *_pEndToken='\0';
   844b2:	2300      	movs	r3, #0
   844b4:	7033      	strb	r3, [r6, #0]
}
   844b6:	4628      	mov	r0, r5
   844b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if(_pEndToken)
   844bc:	4b09      	ldr	r3, [pc, #36]	; (844e4 <mstrtok+0x88>)
   844be:	681d      	ldr	r5, [r3, #0]
   844c0:	2d00      	cmp	r5, #0
   844c2:	d0f8      	beq.n	844b6 <mstrtok+0x5a>
        *_pEndToken=_chEndToken;
   844c4:	4b08      	ldr	r3, [pc, #32]	; (844e8 <mstrtok+0x8c>)
   844c6:	781b      	ldrb	r3, [r3, #0]
   844c8:	702b      	strb	r3, [r5, #0]
        pToken=_pEndToken;
   844ca:	4b04      	ldr	r3, [pc, #16]	; (844dc <mstrtok+0x80>)
   844cc:	601d      	str	r5, [r3, #0]
   844ce:	e7cb      	b.n	84468 <mstrtok+0xc>
    while(*_pEndToken && !_IsSeparator(*_pEndToken,pSep)) { _pEndToken++; }
   844d0:	462e      	mov	r6, r5
   844d2:	e7ec      	b.n	844ae <mstrtok+0x52>
    _pEndToken=pToken;
   844d4:	4b03      	ldr	r3, [pc, #12]	; (844e4 <mstrtok+0x88>)
   844d6:	601d      	str	r5, [r3, #0]
    while(*pToken && _IsSeparator(*pToken,pSep)) { pToken++; }
   844d8:	462e      	mov	r6, r5
   844da:	e7e8      	b.n	844ae <mstrtok+0x52>
   844dc:	20001184 	.word	0x20001184
   844e0:	00084445 	.word	0x00084445
   844e4:	20001180 	.word	0x20001180
   844e8:	2000117c 	.word	0x2000117c

000844ec <main>:
#define SABLIER_NEW			100



int main (void)
{
   844ec:	b500      	push	{lr}
   844ee:	b083      	sub	sp, #12
   844f0:	b672      	cpsid	i
   844f2:	f3bf 8f5f 	dmb	sy
	//osc_enable(OSC_MAINCK_XTAL);
	/* Insert system clock initialization code here (sysclk_init()). */
	cpu_irq_disable();
   844f6:	4e10      	ldr	r6, [pc, #64]	; (84538 <main+0x4c>)
   844f8:	2400      	movs	r4, #0
   844fa:	7034      	strb	r4, [r6, #0]
	//rstc_enable_user_reset(RSTC);
	wdt_disable(WDT);
   844fc:	480f      	ldr	r0, [pc, #60]	; (8453c <main+0x50>)
   844fe:	4b10      	ldr	r3, [pc, #64]	; (84540 <main+0x54>)
   84500:	4798      	blx	r3
	sysclk_init();
   84502:	4b10      	ldr	r3, [pc, #64]	; (84544 <main+0x58>)
   84504:	4798      	blx	r3
	board_init();
   84506:	4b10      	ldr	r3, [pc, #64]	; (84548 <main+0x5c>)
   84508:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());

	/* Insert application code here, after the board has been initialized. */
	KernelNew();
   8450a:	2064      	movs	r0, #100	; 0x64
   8450c:	4d0f      	ldr	r5, [pc, #60]	; (8454c <main+0x60>)
   8450e:	47a8      	blx	r5
   84510:	2064      	movs	r0, #100	; 0x64
   84512:	4b0f      	ldr	r3, [pc, #60]	; (84550 <main+0x64>)
   84514:	4798      	blx	r3
	cpu_irq_enable();
   84516:	2301      	movs	r3, #1
   84518:	7033      	strb	r3, [r6, #0]
   8451a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8451e:	b662      	cpsie	i
	PushTask(Appli,APPLI_NEW,0,0);
   84520:	9400      	str	r4, [sp, #0]
   84522:	4623      	mov	r3, r4
   84524:	2264      	movs	r2, #100	; 0x64
   84526:	490b      	ldr	r1, [pc, #44]	; (84554 <main+0x68>)
   84528:	2066      	movs	r0, #102	; 0x66
   8452a:	47a8      	blx	r5
	KernelRun();
   8452c:	2567      	movs	r5, #103	; 0x67
   8452e:	4c07      	ldr	r4, [pc, #28]	; (8454c <main+0x60>)
   84530:	4628      	mov	r0, r5
   84532:	47a0      	blx	r4
   84534:	e7fc      	b.n	84530 <main+0x44>
   84536:	bf00      	nop
   84538:	20000124 	.word	0x20000124
   8453c:	400e1250 	.word	0x400e1250
   84540:	00081b31 	.word	0x00081b31
   84544:	00081275 	.word	0x00081275
   84548:	00081665 	.word	0x00081665
   8454c:	000841e5 	.word	0x000841e5
   84550:	00082e25 	.word	0x00082e25
   84554:	00080129 	.word	0x00080129

00084558 <__aeabi_frsub>:
   84558:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   8455c:	e002      	b.n	84564 <__addsf3>
   8455e:	bf00      	nop

00084560 <__aeabi_fsub>:
   84560:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00084564 <__addsf3>:
   84564:	0042      	lsls	r2, r0, #1
   84566:	bf1f      	itttt	ne
   84568:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   8456c:	ea92 0f03 	teqne	r2, r3
   84570:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   84574:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   84578:	d06a      	beq.n	84650 <__addsf3+0xec>
   8457a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8457e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   84582:	bfc1      	itttt	gt
   84584:	18d2      	addgt	r2, r2, r3
   84586:	4041      	eorgt	r1, r0
   84588:	4048      	eorgt	r0, r1
   8458a:	4041      	eorgt	r1, r0
   8458c:	bfb8      	it	lt
   8458e:	425b      	neglt	r3, r3
   84590:	2b19      	cmp	r3, #25
   84592:	bf88      	it	hi
   84594:	4770      	bxhi	lr
   84596:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   8459a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8459e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   845a2:	bf18      	it	ne
   845a4:	4240      	negne	r0, r0
   845a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   845aa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   845ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   845b2:	bf18      	it	ne
   845b4:	4249      	negne	r1, r1
   845b6:	ea92 0f03 	teq	r2, r3
   845ba:	d03f      	beq.n	8463c <__addsf3+0xd8>
   845bc:	f1a2 0201 	sub.w	r2, r2, #1
   845c0:	fa41 fc03 	asr.w	ip, r1, r3
   845c4:	eb10 000c 	adds.w	r0, r0, ip
   845c8:	f1c3 0320 	rsb	r3, r3, #32
   845cc:	fa01 f103 	lsl.w	r1, r1, r3
   845d0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   845d4:	d502      	bpl.n	845dc <__addsf3+0x78>
   845d6:	4249      	negs	r1, r1
   845d8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   845dc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   845e0:	d313      	bcc.n	8460a <__addsf3+0xa6>
   845e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   845e6:	d306      	bcc.n	845f6 <__addsf3+0x92>
   845e8:	0840      	lsrs	r0, r0, #1
   845ea:	ea4f 0131 	mov.w	r1, r1, rrx
   845ee:	f102 0201 	add.w	r2, r2, #1
   845f2:	2afe      	cmp	r2, #254	; 0xfe
   845f4:	d251      	bcs.n	8469a <__addsf3+0x136>
   845f6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   845fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   845fe:	bf08      	it	eq
   84600:	f020 0001 	biceq.w	r0, r0, #1
   84604:	ea40 0003 	orr.w	r0, r0, r3
   84608:	4770      	bx	lr
   8460a:	0049      	lsls	r1, r1, #1
   8460c:	eb40 0000 	adc.w	r0, r0, r0
   84610:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   84614:	f1a2 0201 	sub.w	r2, r2, #1
   84618:	d1ed      	bne.n	845f6 <__addsf3+0x92>
   8461a:	fab0 fc80 	clz	ip, r0
   8461e:	f1ac 0c08 	sub.w	ip, ip, #8
   84622:	ebb2 020c 	subs.w	r2, r2, ip
   84626:	fa00 f00c 	lsl.w	r0, r0, ip
   8462a:	bfaa      	itet	ge
   8462c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   84630:	4252      	neglt	r2, r2
   84632:	4318      	orrge	r0, r3
   84634:	bfbc      	itt	lt
   84636:	40d0      	lsrlt	r0, r2
   84638:	4318      	orrlt	r0, r3
   8463a:	4770      	bx	lr
   8463c:	f092 0f00 	teq	r2, #0
   84640:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   84644:	bf06      	itte	eq
   84646:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8464a:	3201      	addeq	r2, #1
   8464c:	3b01      	subne	r3, #1
   8464e:	e7b5      	b.n	845bc <__addsf3+0x58>
   84650:	ea4f 0341 	mov.w	r3, r1, lsl #1
   84654:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   84658:	bf18      	it	ne
   8465a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8465e:	d021      	beq.n	846a4 <__addsf3+0x140>
   84660:	ea92 0f03 	teq	r2, r3
   84664:	d004      	beq.n	84670 <__addsf3+0x10c>
   84666:	f092 0f00 	teq	r2, #0
   8466a:	bf08      	it	eq
   8466c:	4608      	moveq	r0, r1
   8466e:	4770      	bx	lr
   84670:	ea90 0f01 	teq	r0, r1
   84674:	bf1c      	itt	ne
   84676:	2000      	movne	r0, #0
   84678:	4770      	bxne	lr
   8467a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8467e:	d104      	bne.n	8468a <__addsf3+0x126>
   84680:	0040      	lsls	r0, r0, #1
   84682:	bf28      	it	cs
   84684:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   84688:	4770      	bx	lr
   8468a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8468e:	bf3c      	itt	cc
   84690:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   84694:	4770      	bxcc	lr
   84696:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8469a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   8469e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   846a2:	4770      	bx	lr
   846a4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   846a8:	bf16      	itet	ne
   846aa:	4608      	movne	r0, r1
   846ac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   846b0:	4601      	movne	r1, r0
   846b2:	0242      	lsls	r2, r0, #9
   846b4:	bf06      	itte	eq
   846b6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   846ba:	ea90 0f01 	teqeq	r0, r1
   846be:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   846c2:	4770      	bx	lr

000846c4 <__aeabi_ui2f>:
   846c4:	f04f 0300 	mov.w	r3, #0
   846c8:	e004      	b.n	846d4 <__aeabi_i2f+0x8>
   846ca:	bf00      	nop

000846cc <__aeabi_i2f>:
   846cc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   846d0:	bf48      	it	mi
   846d2:	4240      	negmi	r0, r0
   846d4:	ea5f 0c00 	movs.w	ip, r0
   846d8:	bf08      	it	eq
   846da:	4770      	bxeq	lr
   846dc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   846e0:	4601      	mov	r1, r0
   846e2:	f04f 0000 	mov.w	r0, #0
   846e6:	e01c      	b.n	84722 <__aeabi_l2f+0x2a>

000846e8 <__aeabi_ul2f>:
   846e8:	ea50 0201 	orrs.w	r2, r0, r1
   846ec:	bf08      	it	eq
   846ee:	4770      	bxeq	lr
   846f0:	f04f 0300 	mov.w	r3, #0
   846f4:	e00a      	b.n	8470c <__aeabi_l2f+0x14>
   846f6:	bf00      	nop

000846f8 <__aeabi_l2f>:
   846f8:	ea50 0201 	orrs.w	r2, r0, r1
   846fc:	bf08      	it	eq
   846fe:	4770      	bxeq	lr
   84700:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   84704:	d502      	bpl.n	8470c <__aeabi_l2f+0x14>
   84706:	4240      	negs	r0, r0
   84708:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8470c:	ea5f 0c01 	movs.w	ip, r1
   84710:	bf02      	ittt	eq
   84712:	4684      	moveq	ip, r0
   84714:	4601      	moveq	r1, r0
   84716:	2000      	moveq	r0, #0
   84718:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   8471c:	bf08      	it	eq
   8471e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   84722:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   84726:	fabc f28c 	clz	r2, ip
   8472a:	3a08      	subs	r2, #8
   8472c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   84730:	db10      	blt.n	84754 <__aeabi_l2f+0x5c>
   84732:	fa01 fc02 	lsl.w	ip, r1, r2
   84736:	4463      	add	r3, ip
   84738:	fa00 fc02 	lsl.w	ip, r0, r2
   8473c:	f1c2 0220 	rsb	r2, r2, #32
   84740:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   84744:	fa20 f202 	lsr.w	r2, r0, r2
   84748:	eb43 0002 	adc.w	r0, r3, r2
   8474c:	bf08      	it	eq
   8474e:	f020 0001 	biceq.w	r0, r0, #1
   84752:	4770      	bx	lr
   84754:	f102 0220 	add.w	r2, r2, #32
   84758:	fa01 fc02 	lsl.w	ip, r1, r2
   8475c:	f1c2 0220 	rsb	r2, r2, #32
   84760:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   84764:	fa21 f202 	lsr.w	r2, r1, r2
   84768:	eb43 0002 	adc.w	r0, r3, r2
   8476c:	bf08      	it	eq
   8476e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   84772:	4770      	bx	lr

00084774 <__aeabi_fmul>:
   84774:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84778:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   8477c:	bf1e      	ittt	ne
   8477e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   84782:	ea92 0f0c 	teqne	r2, ip
   84786:	ea93 0f0c 	teqne	r3, ip
   8478a:	d06f      	beq.n	8486c <__aeabi_fmul+0xf8>
   8478c:	441a      	add	r2, r3
   8478e:	ea80 0c01 	eor.w	ip, r0, r1
   84792:	0240      	lsls	r0, r0, #9
   84794:	bf18      	it	ne
   84796:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   8479a:	d01e      	beq.n	847da <__aeabi_fmul+0x66>
   8479c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   847a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   847a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   847a8:	fba0 3101 	umull	r3, r1, r0, r1
   847ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   847b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   847b4:	bf3e      	ittt	cc
   847b6:	0049      	lslcc	r1, r1, #1
   847b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   847bc:	005b      	lslcc	r3, r3, #1
   847be:	ea40 0001 	orr.w	r0, r0, r1
   847c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   847c6:	2afd      	cmp	r2, #253	; 0xfd
   847c8:	d81d      	bhi.n	84806 <__aeabi_fmul+0x92>
   847ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   847ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   847d2:	bf08      	it	eq
   847d4:	f020 0001 	biceq.w	r0, r0, #1
   847d8:	4770      	bx	lr
   847da:	f090 0f00 	teq	r0, #0
   847de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   847e2:	bf08      	it	eq
   847e4:	0249      	lsleq	r1, r1, #9
   847e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   847ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   847ee:	3a7f      	subs	r2, #127	; 0x7f
   847f0:	bfc2      	ittt	gt
   847f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   847f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   847fa:	4770      	bxgt	lr
   847fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84800:	f04f 0300 	mov.w	r3, #0
   84804:	3a01      	subs	r2, #1
   84806:	dc5d      	bgt.n	848c4 <__aeabi_fmul+0x150>
   84808:	f112 0f19 	cmn.w	r2, #25
   8480c:	bfdc      	itt	le
   8480e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   84812:	4770      	bxle	lr
   84814:	f1c2 0200 	rsb	r2, r2, #0
   84818:	0041      	lsls	r1, r0, #1
   8481a:	fa21 f102 	lsr.w	r1, r1, r2
   8481e:	f1c2 0220 	rsb	r2, r2, #32
   84822:	fa00 fc02 	lsl.w	ip, r0, r2
   84826:	ea5f 0031 	movs.w	r0, r1, rrx
   8482a:	f140 0000 	adc.w	r0, r0, #0
   8482e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   84832:	bf08      	it	eq
   84834:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   84838:	4770      	bx	lr
   8483a:	f092 0f00 	teq	r2, #0
   8483e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   84842:	bf02      	ittt	eq
   84844:	0040      	lsleq	r0, r0, #1
   84846:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8484a:	3a01      	subeq	r2, #1
   8484c:	d0f9      	beq.n	84842 <__aeabi_fmul+0xce>
   8484e:	ea40 000c 	orr.w	r0, r0, ip
   84852:	f093 0f00 	teq	r3, #0
   84856:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8485a:	bf02      	ittt	eq
   8485c:	0049      	lsleq	r1, r1, #1
   8485e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   84862:	3b01      	subeq	r3, #1
   84864:	d0f9      	beq.n	8485a <__aeabi_fmul+0xe6>
   84866:	ea41 010c 	orr.w	r1, r1, ip
   8486a:	e78f      	b.n	8478c <__aeabi_fmul+0x18>
   8486c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   84870:	ea92 0f0c 	teq	r2, ip
   84874:	bf18      	it	ne
   84876:	ea93 0f0c 	teqne	r3, ip
   8487a:	d00a      	beq.n	84892 <__aeabi_fmul+0x11e>
   8487c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   84880:	bf18      	it	ne
   84882:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   84886:	d1d8      	bne.n	8483a <__aeabi_fmul+0xc6>
   84888:	ea80 0001 	eor.w	r0, r0, r1
   8488c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   84890:	4770      	bx	lr
   84892:	f090 0f00 	teq	r0, #0
   84896:	bf17      	itett	ne
   84898:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   8489c:	4608      	moveq	r0, r1
   8489e:	f091 0f00 	teqne	r1, #0
   848a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   848a6:	d014      	beq.n	848d2 <__aeabi_fmul+0x15e>
   848a8:	ea92 0f0c 	teq	r2, ip
   848ac:	d101      	bne.n	848b2 <__aeabi_fmul+0x13e>
   848ae:	0242      	lsls	r2, r0, #9
   848b0:	d10f      	bne.n	848d2 <__aeabi_fmul+0x15e>
   848b2:	ea93 0f0c 	teq	r3, ip
   848b6:	d103      	bne.n	848c0 <__aeabi_fmul+0x14c>
   848b8:	024b      	lsls	r3, r1, #9
   848ba:	bf18      	it	ne
   848bc:	4608      	movne	r0, r1
   848be:	d108      	bne.n	848d2 <__aeabi_fmul+0x15e>
   848c0:	ea80 0001 	eor.w	r0, r0, r1
   848c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   848c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   848cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   848d0:	4770      	bx	lr
   848d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   848d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   848da:	4770      	bx	lr

000848dc <__aeabi_fdiv>:
   848dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   848e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   848e4:	bf1e      	ittt	ne
   848e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   848ea:	ea92 0f0c 	teqne	r2, ip
   848ee:	ea93 0f0c 	teqne	r3, ip
   848f2:	d069      	beq.n	849c8 <__aeabi_fdiv+0xec>
   848f4:	eba2 0203 	sub.w	r2, r2, r3
   848f8:	ea80 0c01 	eor.w	ip, r0, r1
   848fc:	0249      	lsls	r1, r1, #9
   848fe:	ea4f 2040 	mov.w	r0, r0, lsl #9
   84902:	d037      	beq.n	84974 <__aeabi_fdiv+0x98>
   84904:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   84908:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   8490c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   84910:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   84914:	428b      	cmp	r3, r1
   84916:	bf38      	it	cc
   84918:	005b      	lslcc	r3, r3, #1
   8491a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   8491e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   84922:	428b      	cmp	r3, r1
   84924:	bf24      	itt	cs
   84926:	1a5b      	subcs	r3, r3, r1
   84928:	ea40 000c 	orrcs.w	r0, r0, ip
   8492c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   84930:	bf24      	itt	cs
   84932:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   84936:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8493a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   8493e:	bf24      	itt	cs
   84940:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   84944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   84948:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   8494c:	bf24      	itt	cs
   8494e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   84952:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   84956:	011b      	lsls	r3, r3, #4
   84958:	bf18      	it	ne
   8495a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   8495e:	d1e0      	bne.n	84922 <__aeabi_fdiv+0x46>
   84960:	2afd      	cmp	r2, #253	; 0xfd
   84962:	f63f af50 	bhi.w	84806 <__aeabi_fmul+0x92>
   84966:	428b      	cmp	r3, r1
   84968:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8496c:	bf08      	it	eq
   8496e:	f020 0001 	biceq.w	r0, r0, #1
   84972:	4770      	bx	lr
   84974:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   84978:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8497c:	327f      	adds	r2, #127	; 0x7f
   8497e:	bfc2      	ittt	gt
   84980:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   84984:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   84988:	4770      	bxgt	lr
   8498a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8498e:	f04f 0300 	mov.w	r3, #0
   84992:	3a01      	subs	r2, #1
   84994:	e737      	b.n	84806 <__aeabi_fmul+0x92>
   84996:	f092 0f00 	teq	r2, #0
   8499a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8499e:	bf02      	ittt	eq
   849a0:	0040      	lsleq	r0, r0, #1
   849a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   849a6:	3a01      	subeq	r2, #1
   849a8:	d0f9      	beq.n	8499e <__aeabi_fdiv+0xc2>
   849aa:	ea40 000c 	orr.w	r0, r0, ip
   849ae:	f093 0f00 	teq	r3, #0
   849b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   849b6:	bf02      	ittt	eq
   849b8:	0049      	lsleq	r1, r1, #1
   849ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   849be:	3b01      	subeq	r3, #1
   849c0:	d0f9      	beq.n	849b6 <__aeabi_fdiv+0xda>
   849c2:	ea41 010c 	orr.w	r1, r1, ip
   849c6:	e795      	b.n	848f4 <__aeabi_fdiv+0x18>
   849c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   849cc:	ea92 0f0c 	teq	r2, ip
   849d0:	d108      	bne.n	849e4 <__aeabi_fdiv+0x108>
   849d2:	0242      	lsls	r2, r0, #9
   849d4:	f47f af7d 	bne.w	848d2 <__aeabi_fmul+0x15e>
   849d8:	ea93 0f0c 	teq	r3, ip
   849dc:	f47f af70 	bne.w	848c0 <__aeabi_fmul+0x14c>
   849e0:	4608      	mov	r0, r1
   849e2:	e776      	b.n	848d2 <__aeabi_fmul+0x15e>
   849e4:	ea93 0f0c 	teq	r3, ip
   849e8:	d104      	bne.n	849f4 <__aeabi_fdiv+0x118>
   849ea:	024b      	lsls	r3, r1, #9
   849ec:	f43f af4c 	beq.w	84888 <__aeabi_fmul+0x114>
   849f0:	4608      	mov	r0, r1
   849f2:	e76e      	b.n	848d2 <__aeabi_fmul+0x15e>
   849f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   849f8:	bf18      	it	ne
   849fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   849fe:	d1ca      	bne.n	84996 <__aeabi_fdiv+0xba>
   84a00:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   84a04:	f47f af5c 	bne.w	848c0 <__aeabi_fmul+0x14c>
   84a08:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   84a0c:	f47f af3c 	bne.w	84888 <__aeabi_fmul+0x114>
   84a10:	e75f      	b.n	848d2 <__aeabi_fmul+0x15e>
   84a12:	bf00      	nop

00084a14 <__aeabi_f2uiz>:
   84a14:	0042      	lsls	r2, r0, #1
   84a16:	d20e      	bcs.n	84a36 <__aeabi_f2uiz+0x22>
   84a18:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   84a1c:	d30b      	bcc.n	84a36 <__aeabi_f2uiz+0x22>
   84a1e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   84a22:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   84a26:	d409      	bmi.n	84a3c <__aeabi_f2uiz+0x28>
   84a28:	ea4f 2300 	mov.w	r3, r0, lsl #8
   84a2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   84a30:	fa23 f002 	lsr.w	r0, r3, r2
   84a34:	4770      	bx	lr
   84a36:	f04f 0000 	mov.w	r0, #0
   84a3a:	4770      	bx	lr
   84a3c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   84a40:	d101      	bne.n	84a46 <__aeabi_f2uiz+0x32>
   84a42:	0242      	lsls	r2, r0, #9
   84a44:	d102      	bne.n	84a4c <__aeabi_f2uiz+0x38>
   84a46:	f04f 30ff 	mov.w	r0, #4294967295
   84a4a:	4770      	bx	lr
   84a4c:	f04f 0000 	mov.w	r0, #0
   84a50:	4770      	bx	lr
   84a52:	bf00      	nop

00084a54 <atoi>:
   84a54:	220a      	movs	r2, #10
   84a56:	2100      	movs	r1, #0
   84a58:	f000 b998 	b.w	84d8c <strtol>

00084a5c <__libc_init_array>:
   84a5c:	b570      	push	{r4, r5, r6, lr}
   84a5e:	4e0f      	ldr	r6, [pc, #60]	; (84a9c <__libc_init_array+0x40>)
   84a60:	4d0f      	ldr	r5, [pc, #60]	; (84aa0 <__libc_init_array+0x44>)
   84a62:	1b76      	subs	r6, r6, r5
   84a64:	10b6      	asrs	r6, r6, #2
   84a66:	bf18      	it	ne
   84a68:	2400      	movne	r4, #0
   84a6a:	d005      	beq.n	84a78 <__libc_init_array+0x1c>
   84a6c:	3401      	adds	r4, #1
   84a6e:	f855 3b04 	ldr.w	r3, [r5], #4
   84a72:	4798      	blx	r3
   84a74:	42a6      	cmp	r6, r4
   84a76:	d1f9      	bne.n	84a6c <__libc_init_array+0x10>
   84a78:	4e0a      	ldr	r6, [pc, #40]	; (84aa4 <__libc_init_array+0x48>)
   84a7a:	4d0b      	ldr	r5, [pc, #44]	; (84aa8 <__libc_init_array+0x4c>)
   84a7c:	f005 fff0 	bl	8aa60 <_init>
   84a80:	1b76      	subs	r6, r6, r5
   84a82:	10b6      	asrs	r6, r6, #2
   84a84:	bf18      	it	ne
   84a86:	2400      	movne	r4, #0
   84a88:	d006      	beq.n	84a98 <__libc_init_array+0x3c>
   84a8a:	3401      	adds	r4, #1
   84a8c:	f855 3b04 	ldr.w	r3, [r5], #4
   84a90:	4798      	blx	r3
   84a92:	42a6      	cmp	r6, r4
   84a94:	d1f9      	bne.n	84a8a <__libc_init_array+0x2e>
   84a96:	bd70      	pop	{r4, r5, r6, pc}
   84a98:	bd70      	pop	{r4, r5, r6, pc}
   84a9a:	bf00      	nop
   84a9c:	0008aa6c 	.word	0x0008aa6c
   84aa0:	0008aa6c 	.word	0x0008aa6c
   84aa4:	0008aa74 	.word	0x0008aa74
   84aa8:	0008aa6c 	.word	0x0008aa6c

00084aac <memset>:
   84aac:	b470      	push	{r4, r5, r6}
   84aae:	0786      	lsls	r6, r0, #30
   84ab0:	d046      	beq.n	84b40 <memset+0x94>
   84ab2:	1e54      	subs	r4, r2, #1
   84ab4:	2a00      	cmp	r2, #0
   84ab6:	d041      	beq.n	84b3c <memset+0x90>
   84ab8:	b2ca      	uxtb	r2, r1
   84aba:	4603      	mov	r3, r0
   84abc:	e002      	b.n	84ac4 <memset+0x18>
   84abe:	f114 34ff 	adds.w	r4, r4, #4294967295
   84ac2:	d33b      	bcc.n	84b3c <memset+0x90>
   84ac4:	f803 2b01 	strb.w	r2, [r3], #1
   84ac8:	079d      	lsls	r5, r3, #30
   84aca:	d1f8      	bne.n	84abe <memset+0x12>
   84acc:	2c03      	cmp	r4, #3
   84ace:	d92e      	bls.n	84b2e <memset+0x82>
   84ad0:	b2cd      	uxtb	r5, r1
   84ad2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   84ad6:	2c0f      	cmp	r4, #15
   84ad8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   84adc:	d919      	bls.n	84b12 <memset+0x66>
   84ade:	4626      	mov	r6, r4
   84ae0:	f103 0210 	add.w	r2, r3, #16
   84ae4:	3e10      	subs	r6, #16
   84ae6:	2e0f      	cmp	r6, #15
   84ae8:	f842 5c10 	str.w	r5, [r2, #-16]
   84aec:	f842 5c0c 	str.w	r5, [r2, #-12]
   84af0:	f842 5c08 	str.w	r5, [r2, #-8]
   84af4:	f842 5c04 	str.w	r5, [r2, #-4]
   84af8:	f102 0210 	add.w	r2, r2, #16
   84afc:	d8f2      	bhi.n	84ae4 <memset+0x38>
   84afe:	f1a4 0210 	sub.w	r2, r4, #16
   84b02:	f022 020f 	bic.w	r2, r2, #15
   84b06:	f004 040f 	and.w	r4, r4, #15
   84b0a:	3210      	adds	r2, #16
   84b0c:	2c03      	cmp	r4, #3
   84b0e:	4413      	add	r3, r2
   84b10:	d90d      	bls.n	84b2e <memset+0x82>
   84b12:	461e      	mov	r6, r3
   84b14:	4622      	mov	r2, r4
   84b16:	3a04      	subs	r2, #4
   84b18:	2a03      	cmp	r2, #3
   84b1a:	f846 5b04 	str.w	r5, [r6], #4
   84b1e:	d8fa      	bhi.n	84b16 <memset+0x6a>
   84b20:	1f22      	subs	r2, r4, #4
   84b22:	f022 0203 	bic.w	r2, r2, #3
   84b26:	3204      	adds	r2, #4
   84b28:	4413      	add	r3, r2
   84b2a:	f004 0403 	and.w	r4, r4, #3
   84b2e:	b12c      	cbz	r4, 84b3c <memset+0x90>
   84b30:	b2c9      	uxtb	r1, r1
   84b32:	441c      	add	r4, r3
   84b34:	f803 1b01 	strb.w	r1, [r3], #1
   84b38:	429c      	cmp	r4, r3
   84b3a:	d1fb      	bne.n	84b34 <memset+0x88>
   84b3c:	bc70      	pop	{r4, r5, r6}
   84b3e:	4770      	bx	lr
   84b40:	4614      	mov	r4, r2
   84b42:	4603      	mov	r3, r0
   84b44:	e7c2      	b.n	84acc <memset+0x20>
   84b46:	bf00      	nop

00084b48 <sprintf>:
   84b48:	b40e      	push	{r1, r2, r3}
   84b4a:	4601      	mov	r1, r0
   84b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   84b4e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   84b52:	f44f 7702 	mov.w	r7, #520	; 0x208
   84b56:	f64f 76ff 	movw	r6, #65535	; 0xffff
   84b5a:	b09c      	sub	sp, #112	; 0x70
   84b5c:	ac21      	add	r4, sp, #132	; 0x84
   84b5e:	f854 2b04 	ldr.w	r2, [r4], #4
   84b62:	4b0b      	ldr	r3, [pc, #44]	; (84b90 <sprintf+0x48>)
   84b64:	9102      	str	r1, [sp, #8]
   84b66:	9106      	str	r1, [sp, #24]
   84b68:	6818      	ldr	r0, [r3, #0]
   84b6a:	a902      	add	r1, sp, #8
   84b6c:	4623      	mov	r3, r4
   84b6e:	9401      	str	r4, [sp, #4]
   84b70:	f8ad 7014 	strh.w	r7, [sp, #20]
   84b74:	9504      	str	r5, [sp, #16]
   84b76:	9507      	str	r5, [sp, #28]
   84b78:	f8ad 6016 	strh.w	r6, [sp, #22]
   84b7c:	f000 f91c 	bl	84db8 <_svfprintf_r>
   84b80:	2200      	movs	r2, #0
   84b82:	9b02      	ldr	r3, [sp, #8]
   84b84:	701a      	strb	r2, [r3, #0]
   84b86:	b01c      	add	sp, #112	; 0x70
   84b88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   84b8c:	b003      	add	sp, #12
   84b8e:	4770      	bx	lr
   84b90:	2000062c 	.word	0x2000062c

00084b94 <strlen>:
   84b94:	f020 0103 	bic.w	r1, r0, #3
   84b98:	f010 0003 	ands.w	r0, r0, #3
   84b9c:	f1c0 0000 	rsb	r0, r0, #0
   84ba0:	f851 3b04 	ldr.w	r3, [r1], #4
   84ba4:	f100 0c04 	add.w	ip, r0, #4
   84ba8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   84bac:	f06f 0200 	mvn.w	r2, #0
   84bb0:	bf1c      	itt	ne
   84bb2:	fa22 f20c 	lsrne.w	r2, r2, ip
   84bb6:	4313      	orrne	r3, r2
   84bb8:	f04f 0c01 	mov.w	ip, #1
   84bbc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84bc0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   84bc4:	eba3 020c 	sub.w	r2, r3, ip
   84bc8:	ea22 0203 	bic.w	r2, r2, r3
   84bcc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   84bd0:	bf04      	itt	eq
   84bd2:	f851 3b04 	ldreq.w	r3, [r1], #4
   84bd6:	3004      	addeq	r0, #4
   84bd8:	d0f4      	beq.n	84bc4 <strlen+0x30>
   84bda:	f1c2 0100 	rsb	r1, r2, #0
   84bde:	ea02 0201 	and.w	r2, r2, r1
   84be2:	fab2 f282 	clz	r2, r2
   84be6:	f1c2 021f 	rsb	r2, r2, #31
   84bea:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   84bee:	4770      	bx	lr

00084bf0 <strtok>:
   84bf0:	4a02      	ldr	r2, [pc, #8]	; (84bfc <strtok+0xc>)
   84bf2:	2301      	movs	r3, #1
   84bf4:	6812      	ldr	r2, [r2, #0]
   84bf6:	325c      	adds	r2, #92	; 0x5c
   84bf8:	f000 b802 	b.w	84c00 <__strtok_r>
   84bfc:	2000062c 	.word	0x2000062c

00084c00 <__strtok_r>:
   84c00:	b4f0      	push	{r4, r5, r6, r7}
   84c02:	b318      	cbz	r0, 84c4c <__strtok_r+0x4c>
   84c04:	4607      	mov	r7, r0
   84c06:	460d      	mov	r5, r1
   84c08:	f817 6b01 	ldrb.w	r6, [r7], #1
   84c0c:	e001      	b.n	84c12 <__strtok_r+0x12>
   84c0e:	42a6      	cmp	r6, r4
   84c10:	d017      	beq.n	84c42 <__strtok_r+0x42>
   84c12:	f815 4b01 	ldrb.w	r4, [r5], #1
   84c16:	2c00      	cmp	r4, #0
   84c18:	d1f9      	bne.n	84c0e <__strtok_r+0xe>
   84c1a:	b1e6      	cbz	r6, 84c56 <__strtok_r+0x56>
   84c1c:	460c      	mov	r4, r1
   84c1e:	f817 5b01 	ldrb.w	r5, [r7], #1
   84c22:	e001      	b.n	84c28 <__strtok_r+0x28>
   84c24:	2b00      	cmp	r3, #0
   84c26:	d0f9      	beq.n	84c1c <__strtok_r+0x1c>
   84c28:	f814 3b01 	ldrb.w	r3, [r4], #1
   84c2c:	429d      	cmp	r5, r3
   84c2e:	d1f9      	bne.n	84c24 <__strtok_r+0x24>
   84c30:	b155      	cbz	r5, 84c48 <__strtok_r+0x48>
   84c32:	2300      	movs	r3, #0
   84c34:	f807 3c01 	strb.w	r3, [r7, #-1]
   84c38:	4606      	mov	r6, r0
   84c3a:	6017      	str	r7, [r2, #0]
   84c3c:	4630      	mov	r0, r6
   84c3e:	bcf0      	pop	{r4, r5, r6, r7}
   84c40:	4770      	bx	lr
   84c42:	b153      	cbz	r3, 84c5a <__strtok_r+0x5a>
   84c44:	4638      	mov	r0, r7
   84c46:	e7dd      	b.n	84c04 <__strtok_r+0x4>
   84c48:	462f      	mov	r7, r5
   84c4a:	e7f5      	b.n	84c38 <__strtok_r+0x38>
   84c4c:	6810      	ldr	r0, [r2, #0]
   84c4e:	2800      	cmp	r0, #0
   84c50:	d1d8      	bne.n	84c04 <__strtok_r+0x4>
   84c52:	4606      	mov	r6, r0
   84c54:	e7f2      	b.n	84c3c <__strtok_r+0x3c>
   84c56:	6016      	str	r6, [r2, #0]
   84c58:	e7f0      	b.n	84c3c <__strtok_r+0x3c>
   84c5a:	6017      	str	r7, [r2, #0]
   84c5c:	4606      	mov	r6, r0
   84c5e:	7003      	strb	r3, [r0, #0]
   84c60:	e7ec      	b.n	84c3c <__strtok_r+0x3c>
   84c62:	bf00      	nop

00084c64 <_strtol_l.isra.0>:
   84c64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84c68:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   84c6c:	460f      	mov	r7, r1
   84c6e:	4680      	mov	r8, r0
   84c70:	4616      	mov	r6, r2
   84c72:	461d      	mov	r5, r3
   84c74:	468a      	mov	sl, r1
   84c76:	e000      	b.n	84c7a <_strtol_l.isra.0+0x16>
   84c78:	46a2      	mov	sl, r4
   84c7a:	4654      	mov	r4, sl
   84c7c:	4648      	mov	r0, r9
   84c7e:	f814 bb01 	ldrb.w	fp, [r4], #1
   84c82:	f002 faf9 	bl	87278 <__locale_ctype_ptr_l>
   84c86:	4458      	add	r0, fp
   84c88:	7842      	ldrb	r2, [r0, #1]
   84c8a:	f012 0208 	ands.w	r2, r2, #8
   84c8e:	d1f3      	bne.n	84c78 <_strtol_l.isra.0+0x14>
   84c90:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   84c94:	d04f      	beq.n	84d36 <_strtol_l.isra.0+0xd2>
   84c96:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   84c9a:	bf04      	itt	eq
   84c9c:	f894 b000 	ldrbeq.w	fp, [r4]
   84ca0:	f10a 0402 	addeq.w	r4, sl, #2
   84ca4:	b11d      	cbz	r5, 84cae <_strtol_l.isra.0+0x4a>
   84ca6:	2d10      	cmp	r5, #16
   84ca8:	d056      	beq.n	84d58 <_strtol_l.isra.0+0xf4>
   84caa:	46ac      	mov	ip, r5
   84cac:	e004      	b.n	84cb8 <_strtol_l.isra.0+0x54>
   84cae:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   84cb2:	d060      	beq.n	84d76 <_strtol_l.isra.0+0x112>
   84cb4:	250a      	movs	r5, #10
   84cb6:	46ac      	mov	ip, r5
   84cb8:	2a00      	cmp	r2, #0
   84cba:	bf0c      	ite	eq
   84cbc:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   84cc0:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   84cc4:	2100      	movs	r1, #0
   84cc6:	fbb9 fefc 	udiv	lr, r9, ip
   84cca:	4608      	mov	r0, r1
   84ccc:	fb0c 9a1e 	mls	sl, ip, lr, r9
   84cd0:	e005      	b.n	84cde <_strtol_l.isra.0+0x7a>
   84cd2:	d029      	beq.n	84d28 <_strtol_l.isra.0+0xc4>
   84cd4:	2101      	movs	r1, #1
   84cd6:	fb0c 3000 	mla	r0, ip, r0, r3
   84cda:	f814 bb01 	ldrb.w	fp, [r4], #1
   84cde:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   84ce2:	2b09      	cmp	r3, #9
   84ce4:	d905      	bls.n	84cf2 <_strtol_l.isra.0+0x8e>
   84ce6:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   84cea:	2b19      	cmp	r3, #25
   84cec:	d80b      	bhi.n	84d06 <_strtol_l.isra.0+0xa2>
   84cee:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   84cf2:	429d      	cmp	r5, r3
   84cf4:	dd0f      	ble.n	84d16 <_strtol_l.isra.0+0xb2>
   84cf6:	f1b1 3fff 	cmp.w	r1, #4294967295
   84cfa:	d0ee      	beq.n	84cda <_strtol_l.isra.0+0x76>
   84cfc:	4586      	cmp	lr, r0
   84cfe:	d2e8      	bcs.n	84cd2 <_strtol_l.isra.0+0x6e>
   84d00:	f04f 31ff 	mov.w	r1, #4294967295
   84d04:	e7e9      	b.n	84cda <_strtol_l.isra.0+0x76>
   84d06:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   84d0a:	2b19      	cmp	r3, #25
   84d0c:	d803      	bhi.n	84d16 <_strtol_l.isra.0+0xb2>
   84d0e:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   84d12:	429d      	cmp	r5, r3
   84d14:	dcef      	bgt.n	84cf6 <_strtol_l.isra.0+0x92>
   84d16:	1c4b      	adds	r3, r1, #1
   84d18:	d013      	beq.n	84d42 <_strtol_l.isra.0+0xde>
   84d1a:	b102      	cbz	r2, 84d1e <_strtol_l.isra.0+0xba>
   84d1c:	4240      	negs	r0, r0
   84d1e:	b146      	cbz	r6, 84d32 <_strtol_l.isra.0+0xce>
   84d20:	b9c1      	cbnz	r1, 84d54 <_strtol_l.isra.0+0xf0>
   84d22:	6037      	str	r7, [r6, #0]
   84d24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d28:	459a      	cmp	sl, r3
   84d2a:	dad3      	bge.n	84cd4 <_strtol_l.isra.0+0x70>
   84d2c:	f04f 31ff 	mov.w	r1, #4294967295
   84d30:	e7d3      	b.n	84cda <_strtol_l.isra.0+0x76>
   84d32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d36:	f894 b000 	ldrb.w	fp, [r4]
   84d3a:	2201      	movs	r2, #1
   84d3c:	f10a 0402 	add.w	r4, sl, #2
   84d40:	e7b0      	b.n	84ca4 <_strtol_l.isra.0+0x40>
   84d42:	2322      	movs	r3, #34	; 0x22
   84d44:	f8c8 3000 	str.w	r3, [r8]
   84d48:	b1ee      	cbz	r6, 84d86 <_strtol_l.isra.0+0x122>
   84d4a:	1e67      	subs	r7, r4, #1
   84d4c:	4648      	mov	r0, r9
   84d4e:	6037      	str	r7, [r6, #0]
   84d50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d54:	4681      	mov	r9, r0
   84d56:	e7f8      	b.n	84d4a <_strtol_l.isra.0+0xe6>
   84d58:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   84d5c:	d1a5      	bne.n	84caa <_strtol_l.isra.0+0x46>
   84d5e:	7823      	ldrb	r3, [r4, #0]
   84d60:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   84d64:	2b58      	cmp	r3, #88	; 0x58
   84d66:	d1a0      	bne.n	84caa <_strtol_l.isra.0+0x46>
   84d68:	f04f 0c10 	mov.w	ip, #16
   84d6c:	f894 b001 	ldrb.w	fp, [r4, #1]
   84d70:	4665      	mov	r5, ip
   84d72:	3402      	adds	r4, #2
   84d74:	e7a0      	b.n	84cb8 <_strtol_l.isra.0+0x54>
   84d76:	7823      	ldrb	r3, [r4, #0]
   84d78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   84d7c:	2b58      	cmp	r3, #88	; 0x58
   84d7e:	d0f3      	beq.n	84d68 <_strtol_l.isra.0+0x104>
   84d80:	2508      	movs	r5, #8
   84d82:	46ac      	mov	ip, r5
   84d84:	e798      	b.n	84cb8 <_strtol_l.isra.0+0x54>
   84d86:	4648      	mov	r0, r9
   84d88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00084d8c <strtol>:
   84d8c:	4b08      	ldr	r3, [pc, #32]	; (84db0 <strtol+0x24>)
   84d8e:	b570      	push	{r4, r5, r6, lr}
   84d90:	681d      	ldr	r5, [r3, #0]
   84d92:	4e08      	ldr	r6, [pc, #32]	; (84db4 <strtol+0x28>)
   84d94:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   84d96:	b082      	sub	sp, #8
   84d98:	2c00      	cmp	r4, #0
   84d9a:	bf08      	it	eq
   84d9c:	4634      	moveq	r4, r6
   84d9e:	4613      	mov	r3, r2
   84da0:	9400      	str	r4, [sp, #0]
   84da2:	460a      	mov	r2, r1
   84da4:	4601      	mov	r1, r0
   84da6:	4628      	mov	r0, r5
   84da8:	f7ff ff5c 	bl	84c64 <_strtol_l.isra.0>
   84dac:	b002      	add	sp, #8
   84dae:	bd70      	pop	{r4, r5, r6, pc}
   84db0:	2000062c 	.word	0x2000062c
   84db4:	20000a5c 	.word	0x20000a5c

00084db8 <_svfprintf_r>:
   84db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84dbc:	b0c3      	sub	sp, #268	; 0x10c
   84dbe:	460c      	mov	r4, r1
   84dc0:	910b      	str	r1, [sp, #44]	; 0x2c
   84dc2:	4692      	mov	sl, r2
   84dc4:	930f      	str	r3, [sp, #60]	; 0x3c
   84dc6:	900c      	str	r0, [sp, #48]	; 0x30
   84dc8:	f002 fa5a 	bl	87280 <_localeconv_r>
   84dcc:	6803      	ldr	r3, [r0, #0]
   84dce:	4618      	mov	r0, r3
   84dd0:	931a      	str	r3, [sp, #104]	; 0x68
   84dd2:	f7ff fedf 	bl	84b94 <strlen>
   84dd6:	89a3      	ldrh	r3, [r4, #12]
   84dd8:	9019      	str	r0, [sp, #100]	; 0x64
   84dda:	0619      	lsls	r1, r3, #24
   84ddc:	d503      	bpl.n	84de6 <_svfprintf_r+0x2e>
   84dde:	6923      	ldr	r3, [r4, #16]
   84de0:	2b00      	cmp	r3, #0
   84de2:	f001 8035 	beq.w	85e50 <_svfprintf_r+0x1098>
   84de6:	2300      	movs	r3, #0
   84de8:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   84dec:	46c8      	mov	r8, r9
   84dee:	9315      	str	r3, [sp, #84]	; 0x54
   84df0:	9313      	str	r3, [sp, #76]	; 0x4c
   84df2:	9314      	str	r3, [sp, #80]	; 0x50
   84df4:	9318      	str	r3, [sp, #96]	; 0x60
   84df6:	931b      	str	r3, [sp, #108]	; 0x6c
   84df8:	9309      	str	r3, [sp, #36]	; 0x24
   84dfa:	9316      	str	r3, [sp, #88]	; 0x58
   84dfc:	9317      	str	r3, [sp, #92]	; 0x5c
   84dfe:	9327      	str	r3, [sp, #156]	; 0x9c
   84e00:	9326      	str	r3, [sp, #152]	; 0x98
   84e02:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   84e06:	f89a 3000 	ldrb.w	r3, [sl]
   84e0a:	4654      	mov	r4, sl
   84e0c:	b1eb      	cbz	r3, 84e4a <_svfprintf_r+0x92>
   84e0e:	2b25      	cmp	r3, #37	; 0x25
   84e10:	d102      	bne.n	84e18 <_svfprintf_r+0x60>
   84e12:	e01a      	b.n	84e4a <_svfprintf_r+0x92>
   84e14:	2b25      	cmp	r3, #37	; 0x25
   84e16:	d003      	beq.n	84e20 <_svfprintf_r+0x68>
   84e18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   84e1c:	2b00      	cmp	r3, #0
   84e1e:	d1f9      	bne.n	84e14 <_svfprintf_r+0x5c>
   84e20:	eba4 050a 	sub.w	r5, r4, sl
   84e24:	b18d      	cbz	r5, 84e4a <_svfprintf_r+0x92>
   84e26:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84e28:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84e2a:	3301      	adds	r3, #1
   84e2c:	442a      	add	r2, r5
   84e2e:	2b07      	cmp	r3, #7
   84e30:	f8c8 a000 	str.w	sl, [r8]
   84e34:	f8c8 5004 	str.w	r5, [r8, #4]
   84e38:	9227      	str	r2, [sp, #156]	; 0x9c
   84e3a:	9326      	str	r3, [sp, #152]	; 0x98
   84e3c:	f300 808a 	bgt.w	84f54 <_svfprintf_r+0x19c>
   84e40:	f108 0808 	add.w	r8, r8, #8
   84e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84e46:	442b      	add	r3, r5
   84e48:	9309      	str	r3, [sp, #36]	; 0x24
   84e4a:	7823      	ldrb	r3, [r4, #0]
   84e4c:	2b00      	cmp	r3, #0
   84e4e:	f000 8089 	beq.w	84f64 <_svfprintf_r+0x1ac>
   84e52:	2300      	movs	r3, #0
   84e54:	f04f 30ff 	mov.w	r0, #4294967295
   84e58:	461a      	mov	r2, r3
   84e5a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   84e5e:	4619      	mov	r1, r3
   84e60:	930d      	str	r3, [sp, #52]	; 0x34
   84e62:	469b      	mov	fp, r3
   84e64:	7863      	ldrb	r3, [r4, #1]
   84e66:	f104 0a01 	add.w	sl, r4, #1
   84e6a:	900a      	str	r0, [sp, #40]	; 0x28
   84e6c:	f10a 0a01 	add.w	sl, sl, #1
   84e70:	f1a3 0020 	sub.w	r0, r3, #32
   84e74:	2858      	cmp	r0, #88	; 0x58
   84e76:	f200 83b7 	bhi.w	855e8 <_svfprintf_r+0x830>
   84e7a:	e8df f010 	tbh	[pc, r0, lsl #1]
   84e7e:	034c      	.short	0x034c
   84e80:	03b503b5 	.word	0x03b503b5
   84e84:	03b50354 	.word	0x03b50354
   84e88:	03b503b5 	.word	0x03b503b5
   84e8c:	03b503b5 	.word	0x03b503b5
   84e90:	005903b5 	.word	0x005903b5
   84e94:	03b50359 	.word	0x03b50359
   84e98:	02140066 	.word	0x02140066
   84e9c:	022f03b5 	.word	0x022f03b5
   84ea0:	03a503a5 	.word	0x03a503a5
   84ea4:	03a503a5 	.word	0x03a503a5
   84ea8:	03a503a5 	.word	0x03a503a5
   84eac:	03a503a5 	.word	0x03a503a5
   84eb0:	03b503a5 	.word	0x03b503a5
   84eb4:	03b503b5 	.word	0x03b503b5
   84eb8:	03b503b5 	.word	0x03b503b5
   84ebc:	03b503b5 	.word	0x03b503b5
   84ec0:	03b503b5 	.word	0x03b503b5
   84ec4:	028b03b5 	.word	0x028b03b5
   84ec8:	03b502d3 	.word	0x03b502d3
   84ecc:	03b502d3 	.word	0x03b502d3
   84ed0:	03b503b5 	.word	0x03b503b5
   84ed4:	031b03b5 	.word	0x031b03b5
   84ed8:	03b503b5 	.word	0x03b503b5
   84edc:	03b50320 	.word	0x03b50320
   84ee0:	03b503b5 	.word	0x03b503b5
   84ee4:	03b503b5 	.word	0x03b503b5
   84ee8:	03b50234 	.word	0x03b50234
   84eec:	024b03b5 	.word	0x024b03b5
   84ef0:	03b503b5 	.word	0x03b503b5
   84ef4:	03b503b5 	.word	0x03b503b5
   84ef8:	03b503b5 	.word	0x03b503b5
   84efc:	03b503b5 	.word	0x03b503b5
   84f00:	03b503b5 	.word	0x03b503b5
   84f04:	039e0276 	.word	0x039e0276
   84f08:	02d302d3 	.word	0x02d302d3
   84f0c:	036302d3 	.word	0x036302d3
   84f10:	03b5039e 	.word	0x03b5039e
   84f14:	036803b5 	.word	0x036803b5
   84f18:	037503b5 	.word	0x037503b5
   84f1c:	038c01dd 	.word	0x038c01dd
   84f20:	03b5035e 	.word	0x03b5035e
   84f24:	03b501f2 	.word	0x03b501f2
   84f28:	03b50087 	.word	0x03b50087
   84f2c:	033203b5 	.word	0x033203b5
   84f30:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84f32:	6823      	ldr	r3, [r4, #0]
   84f34:	4618      	mov	r0, r3
   84f36:	930d      	str	r3, [sp, #52]	; 0x34
   84f38:	4623      	mov	r3, r4
   84f3a:	2800      	cmp	r0, #0
   84f3c:	f103 0304 	add.w	r3, r3, #4
   84f40:	930f      	str	r3, [sp, #60]	; 0x3c
   84f42:	da04      	bge.n	84f4e <_svfprintf_r+0x196>
   84f44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84f46:	425b      	negs	r3, r3
   84f48:	930d      	str	r3, [sp, #52]	; 0x34
   84f4a:	f04b 0b04 	orr.w	fp, fp, #4
   84f4e:	f89a 3000 	ldrb.w	r3, [sl]
   84f52:	e78b      	b.n	84e6c <_svfprintf_r+0xb4>
   84f54:	aa25      	add	r2, sp, #148	; 0x94
   84f56:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84f58:	980c      	ldr	r0, [sp, #48]	; 0x30
   84f5a:	f003 f831 	bl	87fc0 <__ssprint_r>
   84f5e:	b940      	cbnz	r0, 84f72 <_svfprintf_r+0x1ba>
   84f60:	46c8      	mov	r8, r9
   84f62:	e76f      	b.n	84e44 <_svfprintf_r+0x8c>
   84f64:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   84f66:	b123      	cbz	r3, 84f72 <_svfprintf_r+0x1ba>
   84f68:	980c      	ldr	r0, [sp, #48]	; 0x30
   84f6a:	aa25      	add	r2, sp, #148	; 0x94
   84f6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84f6e:	f003 f827 	bl	87fc0 <__ssprint_r>
   84f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84f74:	899b      	ldrh	r3, [r3, #12]
   84f76:	f013 0f40 	tst.w	r3, #64	; 0x40
   84f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84f7c:	bf18      	it	ne
   84f7e:	f04f 33ff 	movne.w	r3, #4294967295
   84f82:	9309      	str	r3, [sp, #36]	; 0x24
   84f84:	9809      	ldr	r0, [sp, #36]	; 0x24
   84f86:	b043      	add	sp, #268	; 0x10c
   84f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84f8c:	f01b 0f20 	tst.w	fp, #32
   84f90:	9311      	str	r3, [sp, #68]	; 0x44
   84f92:	f040 81af 	bne.w	852f4 <_svfprintf_r+0x53c>
   84f96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84f98:	f01b 0f10 	tst.w	fp, #16
   84f9c:	4613      	mov	r3, r2
   84f9e:	f040 859a 	bne.w	85ad6 <_svfprintf_r+0xd1e>
   84fa2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   84fa6:	f000 8596 	beq.w	85ad6 <_svfprintf_r+0xd1e>
   84faa:	2500      	movs	r5, #0
   84fac:	2301      	movs	r3, #1
   84fae:	8814      	ldrh	r4, [r2, #0]
   84fb0:	3204      	adds	r2, #4
   84fb2:	920f      	str	r2, [sp, #60]	; 0x3c
   84fb4:	2200      	movs	r2, #0
   84fb6:	4617      	mov	r7, r2
   84fb8:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   84fbc:	990a      	ldr	r1, [sp, #40]	; 0x28
   84fbe:	1c4a      	adds	r2, r1, #1
   84fc0:	f000 8210 	beq.w	853e4 <_svfprintf_r+0x62c>
   84fc4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   84fc8:	9207      	str	r2, [sp, #28]
   84fca:	ea54 0205 	orrs.w	r2, r4, r5
   84fce:	f040 820f 	bne.w	853f0 <_svfprintf_r+0x638>
   84fd2:	2900      	cmp	r1, #0
   84fd4:	f040 8431 	bne.w	8583a <_svfprintf_r+0xa82>
   84fd8:	2b00      	cmp	r3, #0
   84fda:	f040 8539 	bne.w	85a50 <_svfprintf_r+0xc98>
   84fde:	f01b 0301 	ands.w	r3, fp, #1
   84fe2:	930e      	str	r3, [sp, #56]	; 0x38
   84fe4:	f000 8662 	beq.w	85cac <_svfprintf_r+0xef4>
   84fe8:	2330      	movs	r3, #48	; 0x30
   84fea:	ae42      	add	r6, sp, #264	; 0x108
   84fec:	f806 3d41 	strb.w	r3, [r6, #-65]!
   84ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84ff2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   84ff4:	4293      	cmp	r3, r2
   84ff6:	bfb8      	it	lt
   84ff8:	4613      	movlt	r3, r2
   84ffa:	9308      	str	r3, [sp, #32]
   84ffc:	2300      	movs	r3, #0
   84ffe:	9312      	str	r3, [sp, #72]	; 0x48
   85000:	b117      	cbz	r7, 85008 <_svfprintf_r+0x250>
   85002:	9b08      	ldr	r3, [sp, #32]
   85004:	3301      	adds	r3, #1
   85006:	9308      	str	r3, [sp, #32]
   85008:	9b07      	ldr	r3, [sp, #28]
   8500a:	f013 0302 	ands.w	r3, r3, #2
   8500e:	9310      	str	r3, [sp, #64]	; 0x40
   85010:	d002      	beq.n	85018 <_svfprintf_r+0x260>
   85012:	9b08      	ldr	r3, [sp, #32]
   85014:	3302      	adds	r3, #2
   85016:	9308      	str	r3, [sp, #32]
   85018:	9b07      	ldr	r3, [sp, #28]
   8501a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   8501e:	f040 8310 	bne.w	85642 <_svfprintf_r+0x88a>
   85022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85024:	9a08      	ldr	r2, [sp, #32]
   85026:	eba3 0b02 	sub.w	fp, r3, r2
   8502a:	f1bb 0f00 	cmp.w	fp, #0
   8502e:	f340 8308 	ble.w	85642 <_svfprintf_r+0x88a>
   85032:	f1bb 0f10 	cmp.w	fp, #16
   85036:	f340 87b2 	ble.w	85f9e <_svfprintf_r+0x11e6>
   8503a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8503c:	4643      	mov	r3, r8
   8503e:	4621      	mov	r1, r4
   85040:	46a8      	mov	r8, r5
   85042:	2710      	movs	r7, #16
   85044:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85046:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85048:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8504a:	e006      	b.n	8505a <_svfprintf_r+0x2a2>
   8504c:	f1ab 0b10 	sub.w	fp, fp, #16
   85050:	f1bb 0f10 	cmp.w	fp, #16
   85054:	f103 0308 	add.w	r3, r3, #8
   85058:	dd18      	ble.n	8508c <_svfprintf_r+0x2d4>
   8505a:	3201      	adds	r2, #1
   8505c:	48ab      	ldr	r0, [pc, #684]	; (8530c <_svfprintf_r+0x554>)
   8505e:	3110      	adds	r1, #16
   85060:	2a07      	cmp	r2, #7
   85062:	9127      	str	r1, [sp, #156]	; 0x9c
   85064:	9226      	str	r2, [sp, #152]	; 0x98
   85066:	e883 0081 	stmia.w	r3, {r0, r7}
   8506a:	ddef      	ble.n	8504c <_svfprintf_r+0x294>
   8506c:	aa25      	add	r2, sp, #148	; 0x94
   8506e:	4629      	mov	r1, r5
   85070:	4620      	mov	r0, r4
   85072:	f002 ffa5 	bl	87fc0 <__ssprint_r>
   85076:	2800      	cmp	r0, #0
   85078:	f47f af7b 	bne.w	84f72 <_svfprintf_r+0x1ba>
   8507c:	f1ab 0b10 	sub.w	fp, fp, #16
   85080:	f1bb 0f10 	cmp.w	fp, #16
   85084:	464b      	mov	r3, r9
   85086:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85088:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8508a:	dce6      	bgt.n	8505a <_svfprintf_r+0x2a2>
   8508c:	4645      	mov	r5, r8
   8508e:	460c      	mov	r4, r1
   85090:	4698      	mov	r8, r3
   85092:	3201      	adds	r2, #1
   85094:	4b9d      	ldr	r3, [pc, #628]	; (8530c <_svfprintf_r+0x554>)
   85096:	445c      	add	r4, fp
   85098:	2a07      	cmp	r2, #7
   8509a:	9427      	str	r4, [sp, #156]	; 0x9c
   8509c:	9226      	str	r2, [sp, #152]	; 0x98
   8509e:	e888 0808 	stmia.w	r8, {r3, fp}
   850a2:	f300 82c3 	bgt.w	8562c <_svfprintf_r+0x874>
   850a6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   850aa:	f108 0808 	add.w	r8, r8, #8
   850ae:	b187      	cbz	r7, 850d2 <_svfprintf_r+0x31a>
   850b0:	2101      	movs	r1, #1
   850b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   850b4:	440c      	add	r4, r1
   850b6:	440b      	add	r3, r1
   850b8:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   850bc:	2b07      	cmp	r3, #7
   850be:	9427      	str	r4, [sp, #156]	; 0x9c
   850c0:	9326      	str	r3, [sp, #152]	; 0x98
   850c2:	f8c8 1004 	str.w	r1, [r8, #4]
   850c6:	f8c8 2000 	str.w	r2, [r8]
   850ca:	f300 83cd 	bgt.w	85868 <_svfprintf_r+0xab0>
   850ce:	f108 0808 	add.w	r8, r8, #8
   850d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   850d4:	b17b      	cbz	r3, 850f6 <_svfprintf_r+0x33e>
   850d6:	2102      	movs	r1, #2
   850d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   850da:	440c      	add	r4, r1
   850dc:	3301      	adds	r3, #1
   850de:	aa1e      	add	r2, sp, #120	; 0x78
   850e0:	2b07      	cmp	r3, #7
   850e2:	9427      	str	r4, [sp, #156]	; 0x9c
   850e4:	9326      	str	r3, [sp, #152]	; 0x98
   850e6:	f8c8 1004 	str.w	r1, [r8, #4]
   850ea:	f8c8 2000 	str.w	r2, [r8]
   850ee:	f300 8411 	bgt.w	85914 <_svfprintf_r+0xb5c>
   850f2:	f108 0808 	add.w	r8, r8, #8
   850f6:	2d80      	cmp	r5, #128	; 0x80
   850f8:	f000 8304 	beq.w	85704 <_svfprintf_r+0x94c>
   850fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   850fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85100:	1a9f      	subs	r7, r3, r2
   85102:	2f00      	cmp	r7, #0
   85104:	dd37      	ble.n	85176 <_svfprintf_r+0x3be>
   85106:	2f10      	cmp	r7, #16
   85108:	f340 8679 	ble.w	85dfe <_svfprintf_r+0x1046>
   8510c:	4d80      	ldr	r5, [pc, #512]	; (85310 <_svfprintf_r+0x558>)
   8510e:	4642      	mov	r2, r8
   85110:	4621      	mov	r1, r4
   85112:	46b0      	mov	r8, r6
   85114:	f04f 0b10 	mov.w	fp, #16
   85118:	462e      	mov	r6, r5
   8511a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8511c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8511e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85120:	e004      	b.n	8512c <_svfprintf_r+0x374>
   85122:	3f10      	subs	r7, #16
   85124:	2f10      	cmp	r7, #16
   85126:	f102 0208 	add.w	r2, r2, #8
   8512a:	dd15      	ble.n	85158 <_svfprintf_r+0x3a0>
   8512c:	3301      	adds	r3, #1
   8512e:	3110      	adds	r1, #16
   85130:	2b07      	cmp	r3, #7
   85132:	9127      	str	r1, [sp, #156]	; 0x9c
   85134:	9326      	str	r3, [sp, #152]	; 0x98
   85136:	e882 0840 	stmia.w	r2, {r6, fp}
   8513a:	ddf2      	ble.n	85122 <_svfprintf_r+0x36a>
   8513c:	aa25      	add	r2, sp, #148	; 0x94
   8513e:	4629      	mov	r1, r5
   85140:	4620      	mov	r0, r4
   85142:	f002 ff3d 	bl	87fc0 <__ssprint_r>
   85146:	2800      	cmp	r0, #0
   85148:	f47f af13 	bne.w	84f72 <_svfprintf_r+0x1ba>
   8514c:	3f10      	subs	r7, #16
   8514e:	2f10      	cmp	r7, #16
   85150:	464a      	mov	r2, r9
   85152:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85154:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85156:	dce9      	bgt.n	8512c <_svfprintf_r+0x374>
   85158:	4635      	mov	r5, r6
   8515a:	460c      	mov	r4, r1
   8515c:	4646      	mov	r6, r8
   8515e:	4690      	mov	r8, r2
   85160:	3301      	adds	r3, #1
   85162:	443c      	add	r4, r7
   85164:	2b07      	cmp	r3, #7
   85166:	9427      	str	r4, [sp, #156]	; 0x9c
   85168:	9326      	str	r3, [sp, #152]	; 0x98
   8516a:	e888 00a0 	stmia.w	r8, {r5, r7}
   8516e:	f300 8370 	bgt.w	85852 <_svfprintf_r+0xa9a>
   85172:	f108 0808 	add.w	r8, r8, #8
   85176:	9b07      	ldr	r3, [sp, #28]
   85178:	05df      	lsls	r7, r3, #23
   8517a:	f100 8264 	bmi.w	85646 <_svfprintf_r+0x88e>
   8517e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85180:	990e      	ldr	r1, [sp, #56]	; 0x38
   85182:	3301      	adds	r3, #1
   85184:	440c      	add	r4, r1
   85186:	2b07      	cmp	r3, #7
   85188:	9427      	str	r4, [sp, #156]	; 0x9c
   8518a:	f8c8 6000 	str.w	r6, [r8]
   8518e:	f8c8 1004 	str.w	r1, [r8, #4]
   85192:	9326      	str	r3, [sp, #152]	; 0x98
   85194:	f300 83b3 	bgt.w	858fe <_svfprintf_r+0xb46>
   85198:	f108 0808 	add.w	r8, r8, #8
   8519c:	9b07      	ldr	r3, [sp, #28]
   8519e:	075b      	lsls	r3, r3, #29
   851a0:	d53b      	bpl.n	8521a <_svfprintf_r+0x462>
   851a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   851a4:	9a08      	ldr	r2, [sp, #32]
   851a6:	1a9d      	subs	r5, r3, r2
   851a8:	2d00      	cmp	r5, #0
   851aa:	dd36      	ble.n	8521a <_svfprintf_r+0x462>
   851ac:	2d10      	cmp	r5, #16
   851ae:	f340 8721 	ble.w	85ff4 <_svfprintf_r+0x123c>
   851b2:	2610      	movs	r6, #16
   851b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   851b6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   851b8:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   851bc:	e004      	b.n	851c8 <_svfprintf_r+0x410>
   851be:	3d10      	subs	r5, #16
   851c0:	2d10      	cmp	r5, #16
   851c2:	f108 0808 	add.w	r8, r8, #8
   851c6:	dd16      	ble.n	851f6 <_svfprintf_r+0x43e>
   851c8:	3301      	adds	r3, #1
   851ca:	4a50      	ldr	r2, [pc, #320]	; (8530c <_svfprintf_r+0x554>)
   851cc:	3410      	adds	r4, #16
   851ce:	2b07      	cmp	r3, #7
   851d0:	9427      	str	r4, [sp, #156]	; 0x9c
   851d2:	9326      	str	r3, [sp, #152]	; 0x98
   851d4:	e888 0044 	stmia.w	r8, {r2, r6}
   851d8:	ddf1      	ble.n	851be <_svfprintf_r+0x406>
   851da:	aa25      	add	r2, sp, #148	; 0x94
   851dc:	4659      	mov	r1, fp
   851de:	4638      	mov	r0, r7
   851e0:	f002 feee 	bl	87fc0 <__ssprint_r>
   851e4:	2800      	cmp	r0, #0
   851e6:	f47f aec4 	bne.w	84f72 <_svfprintf_r+0x1ba>
   851ea:	3d10      	subs	r5, #16
   851ec:	2d10      	cmp	r5, #16
   851ee:	46c8      	mov	r8, r9
   851f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   851f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   851f4:	dce8      	bgt.n	851c8 <_svfprintf_r+0x410>
   851f6:	3301      	adds	r3, #1
   851f8:	4a44      	ldr	r2, [pc, #272]	; (8530c <_svfprintf_r+0x554>)
   851fa:	442c      	add	r4, r5
   851fc:	2b07      	cmp	r3, #7
   851fe:	9427      	str	r4, [sp, #156]	; 0x9c
   85200:	9326      	str	r3, [sp, #152]	; 0x98
   85202:	e888 0024 	stmia.w	r8, {r2, r5}
   85206:	dd08      	ble.n	8521a <_svfprintf_r+0x462>
   85208:	aa25      	add	r2, sp, #148	; 0x94
   8520a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8520c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8520e:	f002 fed7 	bl	87fc0 <__ssprint_r>
   85212:	2800      	cmp	r0, #0
   85214:	f47f aead 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85218:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8521a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8521c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8521e:	9908      	ldr	r1, [sp, #32]
   85220:	428a      	cmp	r2, r1
   85222:	bfac      	ite	ge
   85224:	189b      	addge	r3, r3, r2
   85226:	185b      	addlt	r3, r3, r1
   85228:	9309      	str	r3, [sp, #36]	; 0x24
   8522a:	2c00      	cmp	r4, #0
   8522c:	f040 82fb 	bne.w	85826 <_svfprintf_r+0xa6e>
   85230:	2300      	movs	r3, #0
   85232:	46c8      	mov	r8, r9
   85234:	9326      	str	r3, [sp, #152]	; 0x98
   85236:	e5e6      	b.n	84e06 <_svfprintf_r+0x4e>
   85238:	9311      	str	r3, [sp, #68]	; 0x44
   8523a:	f01b 0320 	ands.w	r3, fp, #32
   8523e:	f040 8145 	bne.w	854cc <_svfprintf_r+0x714>
   85242:	f01b 0210 	ands.w	r2, fp, #16
   85246:	f040 8466 	bne.w	85b16 <_svfprintf_r+0xd5e>
   8524a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   8524e:	f000 8462 	beq.w	85b16 <_svfprintf_r+0xd5e>
   85252:	990f      	ldr	r1, [sp, #60]	; 0x3c
   85254:	4613      	mov	r3, r2
   85256:	460a      	mov	r2, r1
   85258:	3204      	adds	r2, #4
   8525a:	880c      	ldrh	r4, [r1, #0]
   8525c:	2500      	movs	r5, #0
   8525e:	920f      	str	r2, [sp, #60]	; 0x3c
   85260:	e6a8      	b.n	84fb4 <_svfprintf_r+0x1fc>
   85262:	2500      	movs	r5, #0
   85264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85266:	9311      	str	r3, [sp, #68]	; 0x44
   85268:	6816      	ldr	r6, [r2, #0]
   8526a:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   8526e:	1d14      	adds	r4, r2, #4
   85270:	2e00      	cmp	r6, #0
   85272:	f000 86cd 	beq.w	86010 <_svfprintf_r+0x1258>
   85276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85278:	1c53      	adds	r3, r2, #1
   8527a:	f000 861b 	beq.w	85eb4 <_svfprintf_r+0x10fc>
   8527e:	4629      	mov	r1, r5
   85280:	4630      	mov	r0, r6
   85282:	f002 fac7 	bl	87814 <memchr>
   85286:	2800      	cmp	r0, #0
   85288:	f000 870d 	beq.w	860a6 <_svfprintf_r+0x12ee>
   8528c:	1b83      	subs	r3, r0, r6
   8528e:	950a      	str	r5, [sp, #40]	; 0x28
   85290:	930e      	str	r3, [sp, #56]	; 0x38
   85292:	940f      	str	r4, [sp, #60]	; 0x3c
   85294:	f8cd b01c 	str.w	fp, [sp, #28]
   85298:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8529c:	9308      	str	r3, [sp, #32]
   8529e:	9512      	str	r5, [sp, #72]	; 0x48
   852a0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   852a4:	e6ac      	b.n	85000 <_svfprintf_r+0x248>
   852a6:	f89a 3000 	ldrb.w	r3, [sl]
   852aa:	f10a 0401 	add.w	r4, sl, #1
   852ae:	2b2a      	cmp	r3, #42	; 0x2a
   852b0:	f000 87c2 	beq.w	86238 <_svfprintf_r+0x1480>
   852b4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   852b8:	2809      	cmp	r0, #9
   852ba:	46a2      	mov	sl, r4
   852bc:	f200 8718 	bhi.w	860f0 <_svfprintf_r+0x1338>
   852c0:	2300      	movs	r3, #0
   852c2:	461c      	mov	r4, r3
   852c4:	f81a 3b01 	ldrb.w	r3, [sl], #1
   852c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   852cc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   852d0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   852d4:	2809      	cmp	r0, #9
   852d6:	d9f5      	bls.n	852c4 <_svfprintf_r+0x50c>
   852d8:	940a      	str	r4, [sp, #40]	; 0x28
   852da:	e5c9      	b.n	84e70 <_svfprintf_r+0xb8>
   852dc:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   852e0:	f89a 3000 	ldrb.w	r3, [sl]
   852e4:	e5c2      	b.n	84e6c <_svfprintf_r+0xb4>
   852e6:	f04b 0b10 	orr.w	fp, fp, #16
   852ea:	f01b 0f20 	tst.w	fp, #32
   852ee:	9311      	str	r3, [sp, #68]	; 0x44
   852f0:	f43f ae51 	beq.w	84f96 <_svfprintf_r+0x1de>
   852f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   852f6:	3407      	adds	r4, #7
   852f8:	f024 0307 	bic.w	r3, r4, #7
   852fc:	f103 0208 	add.w	r2, r3, #8
   85300:	e9d3 4500 	ldrd	r4, r5, [r3]
   85304:	920f      	str	r2, [sp, #60]	; 0x3c
   85306:	2301      	movs	r3, #1
   85308:	e654      	b.n	84fb4 <_svfprintf_r+0x1fc>
   8530a:	bf00      	nop
   8530c:	0008a820 	.word	0x0008a820
   85310:	0008a830 	.word	0x0008a830
   85314:	9311      	str	r3, [sp, #68]	; 0x44
   85316:	2a00      	cmp	r2, #0
   85318:	f040 87ad 	bne.w	86276 <_svfprintf_r+0x14be>
   8531c:	4bbe      	ldr	r3, [pc, #760]	; (85618 <_svfprintf_r+0x860>)
   8531e:	f01b 0f20 	tst.w	fp, #32
   85322:	9318      	str	r3, [sp, #96]	; 0x60
   85324:	f040 80e7 	bne.w	854f6 <_svfprintf_r+0x73e>
   85328:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8532a:	f01b 0f10 	tst.w	fp, #16
   8532e:	4613      	mov	r3, r2
   85330:	f040 83d8 	bne.w	85ae4 <_svfprintf_r+0xd2c>
   85334:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85338:	f000 83d4 	beq.w	85ae4 <_svfprintf_r+0xd2c>
   8533c:	2500      	movs	r5, #0
   8533e:	3304      	adds	r3, #4
   85340:	8814      	ldrh	r4, [r2, #0]
   85342:	930f      	str	r3, [sp, #60]	; 0x3c
   85344:	f01b 0f01 	tst.w	fp, #1
   85348:	f000 80e3 	beq.w	85512 <_svfprintf_r+0x75a>
   8534c:	ea54 0305 	orrs.w	r3, r4, r5
   85350:	f000 80df 	beq.w	85512 <_svfprintf_r+0x75a>
   85354:	2330      	movs	r3, #48	; 0x30
   85356:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   8535a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   8535e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   85362:	f04b 0b02 	orr.w	fp, fp, #2
   85366:	2302      	movs	r3, #2
   85368:	e624      	b.n	84fb4 <_svfprintf_r+0x1fc>
   8536a:	2201      	movs	r2, #1
   8536c:	9311      	str	r3, [sp, #68]	; 0x44
   8536e:	2300      	movs	r3, #0
   85370:	4611      	mov	r1, r2
   85372:	980f      	ldr	r0, [sp, #60]	; 0x3c
   85374:	9208      	str	r2, [sp, #32]
   85376:	6802      	ldr	r2, [r0, #0]
   85378:	461f      	mov	r7, r3
   8537a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8537e:	930a      	str	r3, [sp, #40]	; 0x28
   85380:	9312      	str	r3, [sp, #72]	; 0x48
   85382:	1d03      	adds	r3, r0, #4
   85384:	f8cd b01c 	str.w	fp, [sp, #28]
   85388:	910e      	str	r1, [sp, #56]	; 0x38
   8538a:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   8538e:	930f      	str	r3, [sp, #60]	; 0x3c
   85390:	ae28      	add	r6, sp, #160	; 0xa0
   85392:	e639      	b.n	85008 <_svfprintf_r+0x250>
   85394:	9311      	str	r3, [sp, #68]	; 0x44
   85396:	2a00      	cmp	r2, #0
   85398:	f040 8784 	bne.w	862a4 <_svfprintf_r+0x14ec>
   8539c:	f04b 0b10 	orr.w	fp, fp, #16
   853a0:	f01b 0f20 	tst.w	fp, #32
   853a4:	f040 8475 	bne.w	85c92 <_svfprintf_r+0xeda>
   853a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   853aa:	f01b 0f10 	tst.w	fp, #16
   853ae:	4613      	mov	r3, r2
   853b0:	f040 839d 	bne.w	85aee <_svfprintf_r+0xd36>
   853b4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   853b8:	f000 8399 	beq.w	85aee <_svfprintf_r+0xd36>
   853bc:	f9b2 4000 	ldrsh.w	r4, [r2]
   853c0:	3304      	adds	r3, #4
   853c2:	17e5      	asrs	r5, r4, #31
   853c4:	930f      	str	r3, [sp, #60]	; 0x3c
   853c6:	4622      	mov	r2, r4
   853c8:	462b      	mov	r3, r5
   853ca:	2a00      	cmp	r2, #0
   853cc:	f173 0300 	sbcs.w	r3, r3, #0
   853d0:	f2c0 8398 	blt.w	85b04 <_svfprintf_r+0xd4c>
   853d4:	990a      	ldr	r1, [sp, #40]	; 0x28
   853d6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   853da:	1c4a      	adds	r2, r1, #1
   853dc:	f04f 0301 	mov.w	r3, #1
   853e0:	f47f adf0 	bne.w	84fc4 <_svfprintf_r+0x20c>
   853e4:	ea54 0205 	orrs.w	r2, r4, r5
   853e8:	f000 8229 	beq.w	8583e <_svfprintf_r+0xa86>
   853ec:	f8cd b01c 	str.w	fp, [sp, #28]
   853f0:	2b01      	cmp	r3, #1
   853f2:	f000 830e 	beq.w	85a12 <_svfprintf_r+0xc5a>
   853f6:	2b02      	cmp	r3, #2
   853f8:	f040 829c 	bne.w	85934 <_svfprintf_r+0xb7c>
   853fc:	464e      	mov	r6, r9
   853fe:	9818      	ldr	r0, [sp, #96]	; 0x60
   85400:	0923      	lsrs	r3, r4, #4
   85402:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   85406:	0929      	lsrs	r1, r5, #4
   85408:	f004 020f 	and.w	r2, r4, #15
   8540c:	460d      	mov	r5, r1
   8540e:	461c      	mov	r4, r3
   85410:	5c83      	ldrb	r3, [r0, r2]
   85412:	f806 3d01 	strb.w	r3, [r6, #-1]!
   85416:	ea54 0305 	orrs.w	r3, r4, r5
   8541a:	d1f1      	bne.n	85400 <_svfprintf_r+0x648>
   8541c:	eba9 0306 	sub.w	r3, r9, r6
   85420:	930e      	str	r3, [sp, #56]	; 0x38
   85422:	e5e5      	b.n	84ff0 <_svfprintf_r+0x238>
   85424:	9311      	str	r3, [sp, #68]	; 0x44
   85426:	2a00      	cmp	r2, #0
   85428:	f040 8738 	bne.w	8629c <_svfprintf_r+0x14e4>
   8542c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8542e:	f01b 0f08 	tst.w	fp, #8
   85432:	f104 0407 	add.w	r4, r4, #7
   85436:	f000 84cf 	beq.w	85dd8 <_svfprintf_r+0x1020>
   8543a:	f024 0307 	bic.w	r3, r4, #7
   8543e:	f103 0208 	add.w	r2, r3, #8
   85442:	920f      	str	r2, [sp, #60]	; 0x3c
   85444:	681a      	ldr	r2, [r3, #0]
   85446:	685b      	ldr	r3, [r3, #4]
   85448:	9215      	str	r2, [sp, #84]	; 0x54
   8544a:	9314      	str	r3, [sp, #80]	; 0x50
   8544c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8544e:	9d15      	ldr	r5, [sp, #84]	; 0x54
   85450:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   85454:	4628      	mov	r0, r5
   85456:	4621      	mov	r1, r4
   85458:	f04f 32ff 	mov.w	r2, #4294967295
   8545c:	4b6f      	ldr	r3, [pc, #444]	; (8561c <_svfprintf_r+0x864>)
   8545e:	f003 fe6d 	bl	8913c <__aeabi_dcmpun>
   85462:	2800      	cmp	r0, #0
   85464:	f040 8434 	bne.w	85cd0 <_svfprintf_r+0xf18>
   85468:	4628      	mov	r0, r5
   8546a:	4621      	mov	r1, r4
   8546c:	f04f 32ff 	mov.w	r2, #4294967295
   85470:	4b6a      	ldr	r3, [pc, #424]	; (8561c <_svfprintf_r+0x864>)
   85472:	f003 fe45 	bl	89100 <__aeabi_dcmple>
   85476:	2800      	cmp	r0, #0
   85478:	f040 842a 	bne.w	85cd0 <_svfprintf_r+0xf18>
   8547c:	a815      	add	r0, sp, #84	; 0x54
   8547e:	c80d      	ldmia	r0, {r0, r2, r3}
   85480:	9914      	ldr	r1, [sp, #80]	; 0x50
   85482:	f003 fe33 	bl	890ec <__aeabi_dcmplt>
   85486:	2800      	cmp	r0, #0
   85488:	f040 85d4 	bne.w	86034 <_svfprintf_r+0x127c>
   8548c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85490:	2303      	movs	r3, #3
   85492:	461a      	mov	r2, r3
   85494:	9308      	str	r3, [sp, #32]
   85496:	2300      	movs	r3, #0
   85498:	4e61      	ldr	r6, [pc, #388]	; (85620 <_svfprintf_r+0x868>)
   8549a:	4619      	mov	r1, r3
   8549c:	930a      	str	r3, [sp, #40]	; 0x28
   8549e:	4b61      	ldr	r3, [pc, #388]	; (85624 <_svfprintf_r+0x86c>)
   854a0:	920e      	str	r2, [sp, #56]	; 0x38
   854a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   854a4:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   854a8:	9007      	str	r0, [sp, #28]
   854aa:	9112      	str	r1, [sp, #72]	; 0x48
   854ac:	2a47      	cmp	r2, #71	; 0x47
   854ae:	bfd8      	it	le
   854b0:	461e      	movle	r6, r3
   854b2:	e5a5      	b.n	85000 <_svfprintf_r+0x248>
   854b4:	f04b 0b08 	orr.w	fp, fp, #8
   854b8:	f89a 3000 	ldrb.w	r3, [sl]
   854bc:	e4d6      	b.n	84e6c <_svfprintf_r+0xb4>
   854be:	f04b 0b10 	orr.w	fp, fp, #16
   854c2:	9311      	str	r3, [sp, #68]	; 0x44
   854c4:	f01b 0320 	ands.w	r3, fp, #32
   854c8:	f43f aebb 	beq.w	85242 <_svfprintf_r+0x48a>
   854cc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   854ce:	3407      	adds	r4, #7
   854d0:	f024 0307 	bic.w	r3, r4, #7
   854d4:	f103 0208 	add.w	r2, r3, #8
   854d8:	e9d3 4500 	ldrd	r4, r5, [r3]
   854dc:	920f      	str	r2, [sp, #60]	; 0x3c
   854de:	2300      	movs	r3, #0
   854e0:	e568      	b.n	84fb4 <_svfprintf_r+0x1fc>
   854e2:	9311      	str	r3, [sp, #68]	; 0x44
   854e4:	2a00      	cmp	r2, #0
   854e6:	f040 86c2 	bne.w	8626e <_svfprintf_r+0x14b6>
   854ea:	4b4f      	ldr	r3, [pc, #316]	; (85628 <_svfprintf_r+0x870>)
   854ec:	f01b 0f20 	tst.w	fp, #32
   854f0:	9318      	str	r3, [sp, #96]	; 0x60
   854f2:	f43f af19 	beq.w	85328 <_svfprintf_r+0x570>
   854f6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   854f8:	f01b 0f01 	tst.w	fp, #1
   854fc:	f104 0407 	add.w	r4, r4, #7
   85500:	f024 0307 	bic.w	r3, r4, #7
   85504:	f103 0208 	add.w	r2, r3, #8
   85508:	920f      	str	r2, [sp, #60]	; 0x3c
   8550a:	e9d3 4500 	ldrd	r4, r5, [r3]
   8550e:	f47f af1d 	bne.w	8534c <_svfprintf_r+0x594>
   85512:	2302      	movs	r3, #2
   85514:	e54e      	b.n	84fb4 <_svfprintf_r+0x1fc>
   85516:	f89a 3000 	ldrb.w	r3, [sl]
   8551a:	2900      	cmp	r1, #0
   8551c:	f47f aca6 	bne.w	84e6c <_svfprintf_r+0xb4>
   85520:	2201      	movs	r2, #1
   85522:	2120      	movs	r1, #32
   85524:	e4a2      	b.n	84e6c <_svfprintf_r+0xb4>
   85526:	f04b 0b01 	orr.w	fp, fp, #1
   8552a:	f89a 3000 	ldrb.w	r3, [sl]
   8552e:	e49d      	b.n	84e6c <_svfprintf_r+0xb4>
   85530:	f89a 3000 	ldrb.w	r3, [sl]
   85534:	2201      	movs	r2, #1
   85536:	212b      	movs	r1, #43	; 0x2b
   85538:	e498      	b.n	84e6c <_svfprintf_r+0xb4>
   8553a:	f04b 0b20 	orr.w	fp, fp, #32
   8553e:	f89a 3000 	ldrb.w	r3, [sl]
   85542:	e493      	b.n	84e6c <_svfprintf_r+0xb4>
   85544:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   85548:	f89a 3000 	ldrb.w	r3, [sl]
   8554c:	e48e      	b.n	84e6c <_svfprintf_r+0xb4>
   8554e:	f89a 3000 	ldrb.w	r3, [sl]
   85552:	2b6c      	cmp	r3, #108	; 0x6c
   85554:	bf03      	ittte	eq
   85556:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   8555a:	f04b 0b20 	orreq.w	fp, fp, #32
   8555e:	f10a 0a01 	addeq.w	sl, sl, #1
   85562:	f04b 0b10 	orrne.w	fp, fp, #16
   85566:	e481      	b.n	84e6c <_svfprintf_r+0xb4>
   85568:	2a00      	cmp	r2, #0
   8556a:	f040 867c 	bne.w	86266 <_svfprintf_r+0x14ae>
   8556e:	f01b 0f20 	tst.w	fp, #32
   85572:	f040 8452 	bne.w	85e1a <_svfprintf_r+0x1062>
   85576:	f01b 0f10 	tst.w	fp, #16
   8557a:	f040 8438 	bne.w	85dee <_svfprintf_r+0x1036>
   8557e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   85582:	f000 8434 	beq.w	85dee <_svfprintf_r+0x1036>
   85586:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85588:	6813      	ldr	r3, [r2, #0]
   8558a:	3204      	adds	r2, #4
   8558c:	920f      	str	r2, [sp, #60]	; 0x3c
   8558e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   85592:	801a      	strh	r2, [r3, #0]
   85594:	e437      	b.n	84e06 <_svfprintf_r+0x4e>
   85596:	2378      	movs	r3, #120	; 0x78
   85598:	2230      	movs	r2, #48	; 0x30
   8559a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8559c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   855a0:	9311      	str	r3, [sp, #68]	; 0x44
   855a2:	1d03      	adds	r3, r0, #4
   855a4:	930f      	str	r3, [sp, #60]	; 0x3c
   855a6:	4b20      	ldr	r3, [pc, #128]	; (85628 <_svfprintf_r+0x870>)
   855a8:	6804      	ldr	r4, [r0, #0]
   855aa:	9318      	str	r3, [sp, #96]	; 0x60
   855ac:	f04b 0b02 	orr.w	fp, fp, #2
   855b0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   855b4:	2500      	movs	r5, #0
   855b6:	2302      	movs	r3, #2
   855b8:	e4fc      	b.n	84fb4 <_svfprintf_r+0x1fc>
   855ba:	9311      	str	r3, [sp, #68]	; 0x44
   855bc:	2a00      	cmp	r2, #0
   855be:	f43f aeef 	beq.w	853a0 <_svfprintf_r+0x5e8>
   855c2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   855c6:	e6eb      	b.n	853a0 <_svfprintf_r+0x5e8>
   855c8:	2000      	movs	r0, #0
   855ca:	4604      	mov	r4, r0
   855cc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   855d0:	f81a 3b01 	ldrb.w	r3, [sl], #1
   855d4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   855d8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   855dc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   855e0:	2809      	cmp	r0, #9
   855e2:	d9f5      	bls.n	855d0 <_svfprintf_r+0x818>
   855e4:	940d      	str	r4, [sp, #52]	; 0x34
   855e6:	e443      	b.n	84e70 <_svfprintf_r+0xb8>
   855e8:	9311      	str	r3, [sp, #68]	; 0x44
   855ea:	2a00      	cmp	r2, #0
   855ec:	f040 864a 	bne.w	86284 <_svfprintf_r+0x14cc>
   855f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   855f2:	2a00      	cmp	r2, #0
   855f4:	f43f acb6 	beq.w	84f64 <_svfprintf_r+0x1ac>
   855f8:	2300      	movs	r3, #0
   855fa:	2101      	movs	r1, #1
   855fc:	461f      	mov	r7, r3
   855fe:	9108      	str	r1, [sp, #32]
   85600:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   85604:	f8cd b01c 	str.w	fp, [sp, #28]
   85608:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8560c:	930a      	str	r3, [sp, #40]	; 0x28
   8560e:	9312      	str	r3, [sp, #72]	; 0x48
   85610:	910e      	str	r1, [sp, #56]	; 0x38
   85612:	ae28      	add	r6, sp, #160	; 0xa0
   85614:	e4f8      	b.n	85008 <_svfprintf_r+0x250>
   85616:	bf00      	nop
   85618:	0008a7ec 	.word	0x0008a7ec
   8561c:	7fefffff 	.word	0x7fefffff
   85620:	0008a7e0 	.word	0x0008a7e0
   85624:	0008a7dc 	.word	0x0008a7dc
   85628:	0008a800 	.word	0x0008a800
   8562c:	aa25      	add	r2, sp, #148	; 0x94
   8562e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85630:	980c      	ldr	r0, [sp, #48]	; 0x30
   85632:	f002 fcc5 	bl	87fc0 <__ssprint_r>
   85636:	2800      	cmp	r0, #0
   85638:	f47f ac9b 	bne.w	84f72 <_svfprintf_r+0x1ba>
   8563c:	46c8      	mov	r8, r9
   8563e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85642:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85644:	e533      	b.n	850ae <_svfprintf_r+0x2f6>
   85646:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85648:	2b65      	cmp	r3, #101	; 0x65
   8564a:	f340 809a 	ble.w	85782 <_svfprintf_r+0x9ca>
   8564e:	a815      	add	r0, sp, #84	; 0x54
   85650:	c80d      	ldmia	r0, {r0, r2, r3}
   85652:	9914      	ldr	r1, [sp, #80]	; 0x50
   85654:	f003 fd40 	bl	890d8 <__aeabi_dcmpeq>
   85658:	2800      	cmp	r0, #0
   8565a:	f000 8193 	beq.w	85984 <_svfprintf_r+0xbcc>
   8565e:	2101      	movs	r1, #1
   85660:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85662:	4ab5      	ldr	r2, [pc, #724]	; (85938 <_svfprintf_r+0xb80>)
   85664:	440b      	add	r3, r1
   85666:	440c      	add	r4, r1
   85668:	2b07      	cmp	r3, #7
   8566a:	9427      	str	r4, [sp, #156]	; 0x9c
   8566c:	9326      	str	r3, [sp, #152]	; 0x98
   8566e:	f8c8 1004 	str.w	r1, [r8, #4]
   85672:	f8c8 2000 	str.w	r2, [r8]
   85676:	f300 83c6 	bgt.w	85e06 <_svfprintf_r+0x104e>
   8567a:	f108 0808 	add.w	r8, r8, #8
   8567e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   85680:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85682:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85684:	4293      	cmp	r3, r2
   85686:	db03      	blt.n	85690 <_svfprintf_r+0x8d8>
   85688:	9b07      	ldr	r3, [sp, #28]
   8568a:	07dd      	lsls	r5, r3, #31
   8568c:	f57f ad86 	bpl.w	8519c <_svfprintf_r+0x3e4>
   85690:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85692:	9919      	ldr	r1, [sp, #100]	; 0x64
   85694:	3301      	adds	r3, #1
   85696:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   85698:	440c      	add	r4, r1
   8569a:	2b07      	cmp	r3, #7
   8569c:	f8c8 2000 	str.w	r2, [r8]
   856a0:	f8c8 1004 	str.w	r1, [r8, #4]
   856a4:	9427      	str	r4, [sp, #156]	; 0x9c
   856a6:	9326      	str	r3, [sp, #152]	; 0x98
   856a8:	f300 83c4 	bgt.w	85e34 <_svfprintf_r+0x107c>
   856ac:	f108 0808 	add.w	r8, r8, #8
   856b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   856b2:	1e5e      	subs	r6, r3, #1
   856b4:	2e00      	cmp	r6, #0
   856b6:	f77f ad71 	ble.w	8519c <_svfprintf_r+0x3e4>
   856ba:	2e10      	cmp	r6, #16
   856bc:	f340 8575 	ble.w	861aa <_svfprintf_r+0x13f2>
   856c0:	4622      	mov	r2, r4
   856c2:	2710      	movs	r7, #16
   856c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   856c6:	4d9d      	ldr	r5, [pc, #628]	; (8593c <_svfprintf_r+0xb84>)
   856c8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   856cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   856ce:	e005      	b.n	856dc <_svfprintf_r+0x924>
   856d0:	f108 0808 	add.w	r8, r8, #8
   856d4:	3e10      	subs	r6, #16
   856d6:	2e10      	cmp	r6, #16
   856d8:	f340 8225 	ble.w	85b26 <_svfprintf_r+0xd6e>
   856dc:	3301      	adds	r3, #1
   856de:	3210      	adds	r2, #16
   856e0:	2b07      	cmp	r3, #7
   856e2:	9227      	str	r2, [sp, #156]	; 0x9c
   856e4:	9326      	str	r3, [sp, #152]	; 0x98
   856e6:	e888 00a0 	stmia.w	r8, {r5, r7}
   856ea:	ddf1      	ble.n	856d0 <_svfprintf_r+0x918>
   856ec:	aa25      	add	r2, sp, #148	; 0x94
   856ee:	4621      	mov	r1, r4
   856f0:	4658      	mov	r0, fp
   856f2:	f002 fc65 	bl	87fc0 <__ssprint_r>
   856f6:	2800      	cmp	r0, #0
   856f8:	f47f ac3b 	bne.w	84f72 <_svfprintf_r+0x1ba>
   856fc:	46c8      	mov	r8, r9
   856fe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85700:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85702:	e7e7      	b.n	856d4 <_svfprintf_r+0x91c>
   85704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85706:	9a08      	ldr	r2, [sp, #32]
   85708:	1a9f      	subs	r7, r3, r2
   8570a:	2f00      	cmp	r7, #0
   8570c:	f77f acf6 	ble.w	850fc <_svfprintf_r+0x344>
   85710:	2f10      	cmp	r7, #16
   85712:	f340 84a8 	ble.w	86066 <_svfprintf_r+0x12ae>
   85716:	4d89      	ldr	r5, [pc, #548]	; (8593c <_svfprintf_r+0xb84>)
   85718:	4642      	mov	r2, r8
   8571a:	4621      	mov	r1, r4
   8571c:	46b0      	mov	r8, r6
   8571e:	f04f 0b10 	mov.w	fp, #16
   85722:	462e      	mov	r6, r5
   85724:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85726:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85728:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8572a:	e004      	b.n	85736 <_svfprintf_r+0x97e>
   8572c:	3f10      	subs	r7, #16
   8572e:	2f10      	cmp	r7, #16
   85730:	f102 0208 	add.w	r2, r2, #8
   85734:	dd15      	ble.n	85762 <_svfprintf_r+0x9aa>
   85736:	3301      	adds	r3, #1
   85738:	3110      	adds	r1, #16
   8573a:	2b07      	cmp	r3, #7
   8573c:	9127      	str	r1, [sp, #156]	; 0x9c
   8573e:	9326      	str	r3, [sp, #152]	; 0x98
   85740:	e882 0840 	stmia.w	r2, {r6, fp}
   85744:	ddf2      	ble.n	8572c <_svfprintf_r+0x974>
   85746:	aa25      	add	r2, sp, #148	; 0x94
   85748:	4629      	mov	r1, r5
   8574a:	4620      	mov	r0, r4
   8574c:	f002 fc38 	bl	87fc0 <__ssprint_r>
   85750:	2800      	cmp	r0, #0
   85752:	f47f ac0e 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85756:	3f10      	subs	r7, #16
   85758:	2f10      	cmp	r7, #16
   8575a:	464a      	mov	r2, r9
   8575c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   8575e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85760:	dce9      	bgt.n	85736 <_svfprintf_r+0x97e>
   85762:	4635      	mov	r5, r6
   85764:	460c      	mov	r4, r1
   85766:	4646      	mov	r6, r8
   85768:	4690      	mov	r8, r2
   8576a:	3301      	adds	r3, #1
   8576c:	443c      	add	r4, r7
   8576e:	2b07      	cmp	r3, #7
   85770:	9427      	str	r4, [sp, #156]	; 0x9c
   85772:	9326      	str	r3, [sp, #152]	; 0x98
   85774:	e888 00a0 	stmia.w	r8, {r5, r7}
   85778:	f300 829e 	bgt.w	85cb8 <_svfprintf_r+0xf00>
   8577c:	f108 0808 	add.w	r8, r8, #8
   85780:	e4bc      	b.n	850fc <_svfprintf_r+0x344>
   85782:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85784:	2b01      	cmp	r3, #1
   85786:	f340 824f 	ble.w	85c28 <_svfprintf_r+0xe70>
   8578a:	2301      	movs	r3, #1
   8578c:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8578e:	441c      	add	r4, r3
   85790:	441f      	add	r7, r3
   85792:	2f07      	cmp	r7, #7
   85794:	9427      	str	r4, [sp, #156]	; 0x9c
   85796:	f8c8 6000 	str.w	r6, [r8]
   8579a:	9726      	str	r7, [sp, #152]	; 0x98
   8579c:	f8c8 3004 	str.w	r3, [r8, #4]
   857a0:	f300 825f 	bgt.w	85c62 <_svfprintf_r+0xeaa>
   857a4:	f108 0808 	add.w	r8, r8, #8
   857a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   857aa:	3701      	adds	r7, #1
   857ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   857ae:	4414      	add	r4, r2
   857b0:	2f07      	cmp	r7, #7
   857b2:	9427      	str	r4, [sp, #156]	; 0x9c
   857b4:	9726      	str	r7, [sp, #152]	; 0x98
   857b6:	f8c8 3000 	str.w	r3, [r8]
   857ba:	f8c8 2004 	str.w	r2, [r8, #4]
   857be:	f300 825c 	bgt.w	85c7a <_svfprintf_r+0xec2>
   857c2:	f108 0808 	add.w	r8, r8, #8
   857c6:	a815      	add	r0, sp, #84	; 0x54
   857c8:	c80d      	ldmia	r0, {r0, r2, r3}
   857ca:	9914      	ldr	r1, [sp, #80]	; 0x50
   857cc:	f003 fc84 	bl	890d8 <__aeabi_dcmpeq>
   857d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   857d2:	2800      	cmp	r0, #0
   857d4:	f040 8141 	bne.w	85a5a <_svfprintf_r+0xca2>
   857d8:	3b01      	subs	r3, #1
   857da:	3701      	adds	r7, #1
   857dc:	3601      	adds	r6, #1
   857de:	441c      	add	r4, r3
   857e0:	2f07      	cmp	r7, #7
   857e2:	f8c8 6000 	str.w	r6, [r8]
   857e6:	9726      	str	r7, [sp, #152]	; 0x98
   857e8:	9427      	str	r4, [sp, #156]	; 0x9c
   857ea:	f8c8 3004 	str.w	r3, [r8, #4]
   857ee:	f300 8166 	bgt.w	85abe <_svfprintf_r+0xd06>
   857f2:	f108 0808 	add.w	r8, r8, #8
   857f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   857f8:	3701      	adds	r7, #1
   857fa:	4414      	add	r4, r2
   857fc:	ab21      	add	r3, sp, #132	; 0x84
   857fe:	2f07      	cmp	r7, #7
   85800:	9427      	str	r4, [sp, #156]	; 0x9c
   85802:	9726      	str	r7, [sp, #152]	; 0x98
   85804:	f8c8 2004 	str.w	r2, [r8, #4]
   85808:	f8c8 3000 	str.w	r3, [r8]
   8580c:	f77f acc4 	ble.w	85198 <_svfprintf_r+0x3e0>
   85810:	aa25      	add	r2, sp, #148	; 0x94
   85812:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85814:	980c      	ldr	r0, [sp, #48]	; 0x30
   85816:	f002 fbd3 	bl	87fc0 <__ssprint_r>
   8581a:	2800      	cmp	r0, #0
   8581c:	f47f aba9 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85820:	46c8      	mov	r8, r9
   85822:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85824:	e4ba      	b.n	8519c <_svfprintf_r+0x3e4>
   85826:	aa25      	add	r2, sp, #148	; 0x94
   85828:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8582a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8582c:	f002 fbc8 	bl	87fc0 <__ssprint_r>
   85830:	2800      	cmp	r0, #0
   85832:	f43f acfd 	beq.w	85230 <_svfprintf_r+0x478>
   85836:	f7ff bb9c 	b.w	84f72 <_svfprintf_r+0x1ba>
   8583a:	f8dd b01c 	ldr.w	fp, [sp, #28]
   8583e:	2b01      	cmp	r3, #1
   85840:	f000 817e 	beq.w	85b40 <_svfprintf_r+0xd88>
   85844:	2b02      	cmp	r3, #2
   85846:	d171      	bne.n	8592c <_svfprintf_r+0xb74>
   85848:	f8cd b01c 	str.w	fp, [sp, #28]
   8584c:	2400      	movs	r4, #0
   8584e:	2500      	movs	r5, #0
   85850:	e5d4      	b.n	853fc <_svfprintf_r+0x644>
   85852:	aa25      	add	r2, sp, #148	; 0x94
   85854:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85856:	980c      	ldr	r0, [sp, #48]	; 0x30
   85858:	f002 fbb2 	bl	87fc0 <__ssprint_r>
   8585c:	2800      	cmp	r0, #0
   8585e:	f47f ab88 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85862:	46c8      	mov	r8, r9
   85864:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85866:	e486      	b.n	85176 <_svfprintf_r+0x3be>
   85868:	aa25      	add	r2, sp, #148	; 0x94
   8586a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8586c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8586e:	f002 fba7 	bl	87fc0 <__ssprint_r>
   85872:	2800      	cmp	r0, #0
   85874:	f47f ab7d 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85878:	46c8      	mov	r8, r9
   8587a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8587c:	e429      	b.n	850d2 <_svfprintf_r+0x31a>
   8587e:	2001      	movs	r0, #1
   85880:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85882:	4a2d      	ldr	r2, [pc, #180]	; (85938 <_svfprintf_r+0xb80>)
   85884:	4403      	add	r3, r0
   85886:	4404      	add	r4, r0
   85888:	2b07      	cmp	r3, #7
   8588a:	9427      	str	r4, [sp, #156]	; 0x9c
   8588c:	9326      	str	r3, [sp, #152]	; 0x98
   8588e:	f8c8 0004 	str.w	r0, [r8, #4]
   85892:	f8c8 2000 	str.w	r2, [r8]
   85896:	f340 82d8 	ble.w	85e4a <_svfprintf_r+0x1092>
   8589a:	aa25      	add	r2, sp, #148	; 0x94
   8589c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8589e:	980c      	ldr	r0, [sp, #48]	; 0x30
   858a0:	f002 fb8e 	bl	87fc0 <__ssprint_r>
   858a4:	2800      	cmp	r0, #0
   858a6:	f47f ab64 	bne.w	84f72 <_svfprintf_r+0x1ba>
   858aa:	46c8      	mov	r8, r9
   858ac:	991f      	ldr	r1, [sp, #124]	; 0x7c
   858ae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   858b0:	b929      	cbnz	r1, 858be <_svfprintf_r+0xb06>
   858b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   858b4:	b91b      	cbnz	r3, 858be <_svfprintf_r+0xb06>
   858b6:	9b07      	ldr	r3, [sp, #28]
   858b8:	07d8      	lsls	r0, r3, #31
   858ba:	f57f ac6f 	bpl.w	8519c <_svfprintf_r+0x3e4>
   858be:	9819      	ldr	r0, [sp, #100]	; 0x64
   858c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   858c2:	4602      	mov	r2, r0
   858c4:	3301      	adds	r3, #1
   858c6:	4422      	add	r2, r4
   858c8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   858ca:	2b07      	cmp	r3, #7
   858cc:	9227      	str	r2, [sp, #156]	; 0x9c
   858ce:	f8c8 4000 	str.w	r4, [r8]
   858d2:	f8c8 0004 	str.w	r0, [r8, #4]
   858d6:	9326      	str	r3, [sp, #152]	; 0x98
   858d8:	f300 8431 	bgt.w	8613e <_svfprintf_r+0x1386>
   858dc:	f108 0808 	add.w	r8, r8, #8
   858e0:	2900      	cmp	r1, #0
   858e2:	f2c0 8409 	blt.w	860f8 <_svfprintf_r+0x1340>
   858e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   858e8:	3301      	adds	r3, #1
   858ea:	188c      	adds	r4, r1, r2
   858ec:	2b07      	cmp	r3, #7
   858ee:	9427      	str	r4, [sp, #156]	; 0x9c
   858f0:	9326      	str	r3, [sp, #152]	; 0x98
   858f2:	f8c8 6000 	str.w	r6, [r8]
   858f6:	f8c8 1004 	str.w	r1, [r8, #4]
   858fa:	f77f ac4d 	ble.w	85198 <_svfprintf_r+0x3e0>
   858fe:	aa25      	add	r2, sp, #148	; 0x94
   85900:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85902:	980c      	ldr	r0, [sp, #48]	; 0x30
   85904:	f002 fb5c 	bl	87fc0 <__ssprint_r>
   85908:	2800      	cmp	r0, #0
   8590a:	f47f ab32 	bne.w	84f72 <_svfprintf_r+0x1ba>
   8590e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85910:	46c8      	mov	r8, r9
   85912:	e443      	b.n	8519c <_svfprintf_r+0x3e4>
   85914:	aa25      	add	r2, sp, #148	; 0x94
   85916:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85918:	980c      	ldr	r0, [sp, #48]	; 0x30
   8591a:	f002 fb51 	bl	87fc0 <__ssprint_r>
   8591e:	2800      	cmp	r0, #0
   85920:	f47f ab27 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85924:	46c8      	mov	r8, r9
   85926:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85928:	f7ff bbe5 	b.w	850f6 <_svfprintf_r+0x33e>
   8592c:	2400      	movs	r4, #0
   8592e:	2500      	movs	r5, #0
   85930:	f8cd b01c 	str.w	fp, [sp, #28]
   85934:	4649      	mov	r1, r9
   85936:	e004      	b.n	85942 <_svfprintf_r+0xb8a>
   85938:	0008a81c 	.word	0x0008a81c
   8593c:	0008a830 	.word	0x0008a830
   85940:	4631      	mov	r1, r6
   85942:	08e2      	lsrs	r2, r4, #3
   85944:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   85948:	08e8      	lsrs	r0, r5, #3
   8594a:	f004 0307 	and.w	r3, r4, #7
   8594e:	4605      	mov	r5, r0
   85950:	4614      	mov	r4, r2
   85952:	3330      	adds	r3, #48	; 0x30
   85954:	ea54 0205 	orrs.w	r2, r4, r5
   85958:	f801 3c01 	strb.w	r3, [r1, #-1]
   8595c:	f101 36ff 	add.w	r6, r1, #4294967295
   85960:	d1ee      	bne.n	85940 <_svfprintf_r+0xb88>
   85962:	9a07      	ldr	r2, [sp, #28]
   85964:	07d2      	lsls	r2, r2, #31
   85966:	f57f ad59 	bpl.w	8541c <_svfprintf_r+0x664>
   8596a:	2b30      	cmp	r3, #48	; 0x30
   8596c:	f43f ad56 	beq.w	8541c <_svfprintf_r+0x664>
   85970:	2330      	movs	r3, #48	; 0x30
   85972:	3902      	subs	r1, #2
   85974:	f806 3c01 	strb.w	r3, [r6, #-1]
   85978:	eba9 0301 	sub.w	r3, r9, r1
   8597c:	930e      	str	r3, [sp, #56]	; 0x38
   8597e:	460e      	mov	r6, r1
   85980:	f7ff bb36 	b.w	84ff0 <_svfprintf_r+0x238>
   85984:	991f      	ldr	r1, [sp, #124]	; 0x7c
   85986:	2900      	cmp	r1, #0
   85988:	f77f af79 	ble.w	8587e <_svfprintf_r+0xac6>
   8598c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8598e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85990:	4293      	cmp	r3, r2
   85992:	bfa8      	it	ge
   85994:	4613      	movge	r3, r2
   85996:	2b00      	cmp	r3, #0
   85998:	461f      	mov	r7, r3
   8599a:	dd0b      	ble.n	859b4 <_svfprintf_r+0xbfc>
   8599c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8599e:	443c      	add	r4, r7
   859a0:	3301      	adds	r3, #1
   859a2:	2b07      	cmp	r3, #7
   859a4:	9427      	str	r4, [sp, #156]	; 0x9c
   859a6:	e888 00c0 	stmia.w	r8, {r6, r7}
   859aa:	9326      	str	r3, [sp, #152]	; 0x98
   859ac:	f300 82fb 	bgt.w	85fa6 <_svfprintf_r+0x11ee>
   859b0:	f108 0808 	add.w	r8, r8, #8
   859b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   859b6:	2f00      	cmp	r7, #0
   859b8:	bfa8      	it	ge
   859ba:	1bdb      	subge	r3, r3, r7
   859bc:	2b00      	cmp	r3, #0
   859be:	461f      	mov	r7, r3
   859c0:	f340 80d7 	ble.w	85b72 <_svfprintf_r+0xdba>
   859c4:	2b10      	cmp	r3, #16
   859c6:	f340 8434 	ble.w	86232 <_svfprintf_r+0x147a>
   859ca:	4dba      	ldr	r5, [pc, #744]	; (85cb4 <_svfprintf_r+0xefc>)
   859cc:	4642      	mov	r2, r8
   859ce:	4621      	mov	r1, r4
   859d0:	46b0      	mov	r8, r6
   859d2:	f04f 0b10 	mov.w	fp, #16
   859d6:	462e      	mov	r6, r5
   859d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   859da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   859dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   859de:	e004      	b.n	859ea <_svfprintf_r+0xc32>
   859e0:	3208      	adds	r2, #8
   859e2:	3f10      	subs	r7, #16
   859e4:	2f10      	cmp	r7, #16
   859e6:	f340 80b5 	ble.w	85b54 <_svfprintf_r+0xd9c>
   859ea:	3301      	adds	r3, #1
   859ec:	3110      	adds	r1, #16
   859ee:	2b07      	cmp	r3, #7
   859f0:	9127      	str	r1, [sp, #156]	; 0x9c
   859f2:	9326      	str	r3, [sp, #152]	; 0x98
   859f4:	e882 0840 	stmia.w	r2, {r6, fp}
   859f8:	ddf2      	ble.n	859e0 <_svfprintf_r+0xc28>
   859fa:	aa25      	add	r2, sp, #148	; 0x94
   859fc:	4629      	mov	r1, r5
   859fe:	4620      	mov	r0, r4
   85a00:	f002 fade 	bl	87fc0 <__ssprint_r>
   85a04:	2800      	cmp	r0, #0
   85a06:	f47f aab4 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85a0a:	464a      	mov	r2, r9
   85a0c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   85a0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85a10:	e7e7      	b.n	859e2 <_svfprintf_r+0xc2a>
   85a12:	2d00      	cmp	r5, #0
   85a14:	bf08      	it	eq
   85a16:	2c0a      	cmpeq	r4, #10
   85a18:	f0c0 8090 	bcc.w	85b3c <_svfprintf_r+0xd84>
   85a1c:	464e      	mov	r6, r9
   85a1e:	4620      	mov	r0, r4
   85a20:	4629      	mov	r1, r5
   85a22:	220a      	movs	r2, #10
   85a24:	2300      	movs	r3, #0
   85a26:	f003 fbc7 	bl	891b8 <__aeabi_uldivmod>
   85a2a:	3230      	adds	r2, #48	; 0x30
   85a2c:	f806 2d01 	strb.w	r2, [r6, #-1]!
   85a30:	4620      	mov	r0, r4
   85a32:	4629      	mov	r1, r5
   85a34:	2300      	movs	r3, #0
   85a36:	220a      	movs	r2, #10
   85a38:	f003 fbbe 	bl	891b8 <__aeabi_uldivmod>
   85a3c:	4604      	mov	r4, r0
   85a3e:	460d      	mov	r5, r1
   85a40:	ea54 0305 	orrs.w	r3, r4, r5
   85a44:	d1eb      	bne.n	85a1e <_svfprintf_r+0xc66>
   85a46:	eba9 0306 	sub.w	r3, r9, r6
   85a4a:	930e      	str	r3, [sp, #56]	; 0x38
   85a4c:	f7ff bad0 	b.w	84ff0 <_svfprintf_r+0x238>
   85a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85a52:	464e      	mov	r6, r9
   85a54:	930e      	str	r3, [sp, #56]	; 0x38
   85a56:	f7ff bacb 	b.w	84ff0 <_svfprintf_r+0x238>
   85a5a:	1e5e      	subs	r6, r3, #1
   85a5c:	2e00      	cmp	r6, #0
   85a5e:	f77f aeca 	ble.w	857f6 <_svfprintf_r+0xa3e>
   85a62:	2e10      	cmp	r6, #16
   85a64:	f340 83e3 	ble.w	8622e <_svfprintf_r+0x1476>
   85a68:	4622      	mov	r2, r4
   85a6a:	f04f 0b10 	mov.w	fp, #16
   85a6e:	4d91      	ldr	r5, [pc, #580]	; (85cb4 <_svfprintf_r+0xefc>)
   85a70:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85a72:	e004      	b.n	85a7e <_svfprintf_r+0xcc6>
   85a74:	3e10      	subs	r6, #16
   85a76:	2e10      	cmp	r6, #16
   85a78:	f108 0808 	add.w	r8, r8, #8
   85a7c:	dd15      	ble.n	85aaa <_svfprintf_r+0xcf2>
   85a7e:	3701      	adds	r7, #1
   85a80:	3210      	adds	r2, #16
   85a82:	2f07      	cmp	r7, #7
   85a84:	9227      	str	r2, [sp, #156]	; 0x9c
   85a86:	9726      	str	r7, [sp, #152]	; 0x98
   85a88:	e888 0820 	stmia.w	r8, {r5, fp}
   85a8c:	ddf2      	ble.n	85a74 <_svfprintf_r+0xcbc>
   85a8e:	aa25      	add	r2, sp, #148	; 0x94
   85a90:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85a92:	4620      	mov	r0, r4
   85a94:	f002 fa94 	bl	87fc0 <__ssprint_r>
   85a98:	2800      	cmp	r0, #0
   85a9a:	f47f aa6a 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85a9e:	3e10      	subs	r6, #16
   85aa0:	2e10      	cmp	r6, #16
   85aa2:	46c8      	mov	r8, r9
   85aa4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85aa6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85aa8:	dce9      	bgt.n	85a7e <_svfprintf_r+0xcc6>
   85aaa:	4614      	mov	r4, r2
   85aac:	3701      	adds	r7, #1
   85aae:	4434      	add	r4, r6
   85ab0:	2f07      	cmp	r7, #7
   85ab2:	9427      	str	r4, [sp, #156]	; 0x9c
   85ab4:	9726      	str	r7, [sp, #152]	; 0x98
   85ab6:	e888 0060 	stmia.w	r8, {r5, r6}
   85aba:	f77f ae9a 	ble.w	857f2 <_svfprintf_r+0xa3a>
   85abe:	aa25      	add	r2, sp, #148	; 0x94
   85ac0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85ac2:	980c      	ldr	r0, [sp, #48]	; 0x30
   85ac4:	f002 fa7c 	bl	87fc0 <__ssprint_r>
   85ac8:	2800      	cmp	r0, #0
   85aca:	f47f aa52 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85ace:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85ad0:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85ad2:	46c8      	mov	r8, r9
   85ad4:	e68f      	b.n	857f6 <_svfprintf_r+0xa3e>
   85ad6:	3204      	adds	r2, #4
   85ad8:	681c      	ldr	r4, [r3, #0]
   85ada:	2500      	movs	r5, #0
   85adc:	2301      	movs	r3, #1
   85ade:	920f      	str	r2, [sp, #60]	; 0x3c
   85ae0:	f7ff ba68 	b.w	84fb4 <_svfprintf_r+0x1fc>
   85ae4:	681c      	ldr	r4, [r3, #0]
   85ae6:	3304      	adds	r3, #4
   85ae8:	930f      	str	r3, [sp, #60]	; 0x3c
   85aea:	2500      	movs	r5, #0
   85aec:	e42a      	b.n	85344 <_svfprintf_r+0x58c>
   85aee:	681c      	ldr	r4, [r3, #0]
   85af0:	3304      	adds	r3, #4
   85af2:	17e5      	asrs	r5, r4, #31
   85af4:	4622      	mov	r2, r4
   85af6:	930f      	str	r3, [sp, #60]	; 0x3c
   85af8:	462b      	mov	r3, r5
   85afa:	2a00      	cmp	r2, #0
   85afc:	f173 0300 	sbcs.w	r3, r3, #0
   85b00:	f6bf ac68 	bge.w	853d4 <_svfprintf_r+0x61c>
   85b04:	272d      	movs	r7, #45	; 0x2d
   85b06:	4264      	negs	r4, r4
   85b08:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   85b0c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   85b10:	2301      	movs	r3, #1
   85b12:	f7ff ba53 	b.w	84fbc <_svfprintf_r+0x204>
   85b16:	990f      	ldr	r1, [sp, #60]	; 0x3c
   85b18:	2500      	movs	r5, #0
   85b1a:	460a      	mov	r2, r1
   85b1c:	3204      	adds	r2, #4
   85b1e:	680c      	ldr	r4, [r1, #0]
   85b20:	920f      	str	r2, [sp, #60]	; 0x3c
   85b22:	f7ff ba47 	b.w	84fb4 <_svfprintf_r+0x1fc>
   85b26:	4614      	mov	r4, r2
   85b28:	3301      	adds	r3, #1
   85b2a:	4434      	add	r4, r6
   85b2c:	2b07      	cmp	r3, #7
   85b2e:	9427      	str	r4, [sp, #156]	; 0x9c
   85b30:	9326      	str	r3, [sp, #152]	; 0x98
   85b32:	e888 0060 	stmia.w	r8, {r5, r6}
   85b36:	f77f ab2f 	ble.w	85198 <_svfprintf_r+0x3e0>
   85b3a:	e6e0      	b.n	858fe <_svfprintf_r+0xb46>
   85b3c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   85b40:	2301      	movs	r3, #1
   85b42:	ae42      	add	r6, sp, #264	; 0x108
   85b44:	3430      	adds	r4, #48	; 0x30
   85b46:	f8cd b01c 	str.w	fp, [sp, #28]
   85b4a:	f806 4d41 	strb.w	r4, [r6, #-65]!
   85b4e:	930e      	str	r3, [sp, #56]	; 0x38
   85b50:	f7ff ba4e 	b.w	84ff0 <_svfprintf_r+0x238>
   85b54:	4635      	mov	r5, r6
   85b56:	460c      	mov	r4, r1
   85b58:	4646      	mov	r6, r8
   85b5a:	4690      	mov	r8, r2
   85b5c:	3301      	adds	r3, #1
   85b5e:	443c      	add	r4, r7
   85b60:	2b07      	cmp	r3, #7
   85b62:	9427      	str	r4, [sp, #156]	; 0x9c
   85b64:	9326      	str	r3, [sp, #152]	; 0x98
   85b66:	e888 00a0 	stmia.w	r8, {r5, r7}
   85b6a:	f300 8246 	bgt.w	85ffa <_svfprintf_r+0x1242>
   85b6e:	f108 0808 	add.w	r8, r8, #8
   85b72:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   85b74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85b76:	429a      	cmp	r2, r3
   85b78:	db45      	blt.n	85c06 <_svfprintf_r+0xe4e>
   85b7a:	9b07      	ldr	r3, [sp, #28]
   85b7c:	07d9      	lsls	r1, r3, #31
   85b7e:	d442      	bmi.n	85c06 <_svfprintf_r+0xe4e>
   85b80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85b82:	9812      	ldr	r0, [sp, #72]	; 0x48
   85b84:	1a9a      	subs	r2, r3, r2
   85b86:	1a1d      	subs	r5, r3, r0
   85b88:	4295      	cmp	r5, r2
   85b8a:	bfa8      	it	ge
   85b8c:	4615      	movge	r5, r2
   85b8e:	2d00      	cmp	r5, #0
   85b90:	dd0e      	ble.n	85bb0 <_svfprintf_r+0xdf8>
   85b92:	9926      	ldr	r1, [sp, #152]	; 0x98
   85b94:	4406      	add	r6, r0
   85b96:	3101      	adds	r1, #1
   85b98:	442c      	add	r4, r5
   85b9a:	2907      	cmp	r1, #7
   85b9c:	f8c8 6000 	str.w	r6, [r8]
   85ba0:	9427      	str	r4, [sp, #156]	; 0x9c
   85ba2:	f8c8 5004 	str.w	r5, [r8, #4]
   85ba6:	9126      	str	r1, [sp, #152]	; 0x98
   85ba8:	f300 8216 	bgt.w	85fd8 <_svfprintf_r+0x1220>
   85bac:	f108 0808 	add.w	r8, r8, #8
   85bb0:	2d00      	cmp	r5, #0
   85bb2:	bfb4      	ite	lt
   85bb4:	4616      	movlt	r6, r2
   85bb6:	1b56      	subge	r6, r2, r5
   85bb8:	2e00      	cmp	r6, #0
   85bba:	f77f aaef 	ble.w	8519c <_svfprintf_r+0x3e4>
   85bbe:	2e10      	cmp	r6, #16
   85bc0:	f340 82f3 	ble.w	861aa <_svfprintf_r+0x13f2>
   85bc4:	4622      	mov	r2, r4
   85bc6:	2710      	movs	r7, #16
   85bc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85bca:	4d3a      	ldr	r5, [pc, #232]	; (85cb4 <_svfprintf_r+0xefc>)
   85bcc:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   85bd0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   85bd2:	e004      	b.n	85bde <_svfprintf_r+0xe26>
   85bd4:	f108 0808 	add.w	r8, r8, #8
   85bd8:	3e10      	subs	r6, #16
   85bda:	2e10      	cmp	r6, #16
   85bdc:	dda3      	ble.n	85b26 <_svfprintf_r+0xd6e>
   85bde:	3301      	adds	r3, #1
   85be0:	3210      	adds	r2, #16
   85be2:	2b07      	cmp	r3, #7
   85be4:	9227      	str	r2, [sp, #156]	; 0x9c
   85be6:	9326      	str	r3, [sp, #152]	; 0x98
   85be8:	e888 00a0 	stmia.w	r8, {r5, r7}
   85bec:	ddf2      	ble.n	85bd4 <_svfprintf_r+0xe1c>
   85bee:	aa25      	add	r2, sp, #148	; 0x94
   85bf0:	4621      	mov	r1, r4
   85bf2:	4658      	mov	r0, fp
   85bf4:	f002 f9e4 	bl	87fc0 <__ssprint_r>
   85bf8:	2800      	cmp	r0, #0
   85bfa:	f47f a9ba 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85bfe:	46c8      	mov	r8, r9
   85c00:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85c02:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85c04:	e7e8      	b.n	85bd8 <_svfprintf_r+0xe20>
   85c06:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85c08:	9819      	ldr	r0, [sp, #100]	; 0x64
   85c0a:	3301      	adds	r3, #1
   85c0c:	991a      	ldr	r1, [sp, #104]	; 0x68
   85c0e:	4404      	add	r4, r0
   85c10:	2b07      	cmp	r3, #7
   85c12:	9427      	str	r4, [sp, #156]	; 0x9c
   85c14:	f8c8 1000 	str.w	r1, [r8]
   85c18:	f8c8 0004 	str.w	r0, [r8, #4]
   85c1c:	9326      	str	r3, [sp, #152]	; 0x98
   85c1e:	f300 81cf 	bgt.w	85fc0 <_svfprintf_r+0x1208>
   85c22:	f108 0808 	add.w	r8, r8, #8
   85c26:	e7ab      	b.n	85b80 <_svfprintf_r+0xdc8>
   85c28:	9b07      	ldr	r3, [sp, #28]
   85c2a:	07da      	lsls	r2, r3, #31
   85c2c:	f53f adad 	bmi.w	8578a <_svfprintf_r+0x9d2>
   85c30:	2301      	movs	r3, #1
   85c32:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85c34:	441c      	add	r4, r3
   85c36:	441f      	add	r7, r3
   85c38:	2f07      	cmp	r7, #7
   85c3a:	9427      	str	r4, [sp, #156]	; 0x9c
   85c3c:	f8c8 6000 	str.w	r6, [r8]
   85c40:	9726      	str	r7, [sp, #152]	; 0x98
   85c42:	f8c8 3004 	str.w	r3, [r8, #4]
   85c46:	f77f add4 	ble.w	857f2 <_svfprintf_r+0xa3a>
   85c4a:	aa25      	add	r2, sp, #148	; 0x94
   85c4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85c4e:	980c      	ldr	r0, [sp, #48]	; 0x30
   85c50:	f002 f9b6 	bl	87fc0 <__ssprint_r>
   85c54:	2800      	cmp	r0, #0
   85c56:	f47f a98c 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85c5a:	46c8      	mov	r8, r9
   85c5c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85c5e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85c60:	e5c9      	b.n	857f6 <_svfprintf_r+0xa3e>
   85c62:	aa25      	add	r2, sp, #148	; 0x94
   85c64:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85c66:	980c      	ldr	r0, [sp, #48]	; 0x30
   85c68:	f002 f9aa 	bl	87fc0 <__ssprint_r>
   85c6c:	2800      	cmp	r0, #0
   85c6e:	f47f a980 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85c72:	46c8      	mov	r8, r9
   85c74:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85c76:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85c78:	e596      	b.n	857a8 <_svfprintf_r+0x9f0>
   85c7a:	aa25      	add	r2, sp, #148	; 0x94
   85c7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85c7e:	980c      	ldr	r0, [sp, #48]	; 0x30
   85c80:	f002 f99e 	bl	87fc0 <__ssprint_r>
   85c84:	2800      	cmp	r0, #0
   85c86:	f47f a974 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85c8a:	46c8      	mov	r8, r9
   85c8c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85c8e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   85c90:	e599      	b.n	857c6 <_svfprintf_r+0xa0e>
   85c92:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   85c94:	3407      	adds	r4, #7
   85c96:	f024 0407 	bic.w	r4, r4, #7
   85c9a:	f104 0108 	add.w	r1, r4, #8
   85c9e:	e9d4 2300 	ldrd	r2, r3, [r4]
   85ca2:	910f      	str	r1, [sp, #60]	; 0x3c
   85ca4:	4614      	mov	r4, r2
   85ca6:	461d      	mov	r5, r3
   85ca8:	f7ff bb8f 	b.w	853ca <_svfprintf_r+0x612>
   85cac:	464e      	mov	r6, r9
   85cae:	f7ff b99f 	b.w	84ff0 <_svfprintf_r+0x238>
   85cb2:	bf00      	nop
   85cb4:	0008a830 	.word	0x0008a830
   85cb8:	aa25      	add	r2, sp, #148	; 0x94
   85cba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85cbc:	980c      	ldr	r0, [sp, #48]	; 0x30
   85cbe:	f002 f97f 	bl	87fc0 <__ssprint_r>
   85cc2:	2800      	cmp	r0, #0
   85cc4:	f47f a955 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85cc8:	46c8      	mov	r8, r9
   85cca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85ccc:	f7ff ba16 	b.w	850fc <_svfprintf_r+0x344>
   85cd0:	9c15      	ldr	r4, [sp, #84]	; 0x54
   85cd2:	4622      	mov	r2, r4
   85cd4:	4620      	mov	r0, r4
   85cd6:	9c14      	ldr	r4, [sp, #80]	; 0x50
   85cd8:	4623      	mov	r3, r4
   85cda:	4621      	mov	r1, r4
   85cdc:	f003 fa2e 	bl	8913c <__aeabi_dcmpun>
   85ce0:	2800      	cmp	r0, #0
   85ce2:	f040 8273 	bne.w	861cc <_svfprintf_r+0x1414>
   85ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85ce8:	3301      	adds	r3, #1
   85cea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85cec:	f023 0320 	bic.w	r3, r3, #32
   85cf0:	930e      	str	r3, [sp, #56]	; 0x38
   85cf2:	f000 819c 	beq.w	8602e <_svfprintf_r+0x1276>
   85cf6:	2b47      	cmp	r3, #71	; 0x47
   85cf8:	f000 80d6 	beq.w	85ea8 <_svfprintf_r+0x10f0>
   85cfc:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   85d00:	9307      	str	r3, [sp, #28]
   85d02:	9b14      	ldr	r3, [sp, #80]	; 0x50
   85d04:	1e1f      	subs	r7, r3, #0
   85d06:	9b15      	ldr	r3, [sp, #84]	; 0x54
   85d08:	9308      	str	r3, [sp, #32]
   85d0a:	bfb7      	itett	lt
   85d0c:	463b      	movlt	r3, r7
   85d0e:	2300      	movge	r3, #0
   85d10:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   85d14:	232d      	movlt	r3, #45	; 0x2d
   85d16:	9310      	str	r3, [sp, #64]	; 0x40
   85d18:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85d1a:	2b66      	cmp	r3, #102	; 0x66
   85d1c:	f000 8190 	beq.w	86040 <_svfprintf_r+0x1288>
   85d20:	2b46      	cmp	r3, #70	; 0x46
   85d22:	f000 80a4 	beq.w	85e6e <_svfprintf_r+0x10b6>
   85d26:	2002      	movs	r0, #2
   85d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85d2a:	a923      	add	r1, sp, #140	; 0x8c
   85d2c:	2b45      	cmp	r3, #69	; 0x45
   85d2e:	bf0a      	itet	eq
   85d30:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   85d32:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   85d34:	1c5d      	addeq	r5, r3, #1
   85d36:	e88d 0021 	stmia.w	sp, {r0, r5}
   85d3a:	9104      	str	r1, [sp, #16]
   85d3c:	a820      	add	r0, sp, #128	; 0x80
   85d3e:	a91f      	add	r1, sp, #124	; 0x7c
   85d40:	463b      	mov	r3, r7
   85d42:	9003      	str	r0, [sp, #12]
   85d44:	9a08      	ldr	r2, [sp, #32]
   85d46:	9102      	str	r1, [sp, #8]
   85d48:	980c      	ldr	r0, [sp, #48]	; 0x30
   85d4a:	f000 fb59 	bl	86400 <_dtoa_r>
   85d4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85d50:	4606      	mov	r6, r0
   85d52:	2b67      	cmp	r3, #103	; 0x67
   85d54:	f040 81ba 	bne.w	860cc <_svfprintf_r+0x1314>
   85d58:	f01b 0f01 	tst.w	fp, #1
   85d5c:	f000 8223 	beq.w	861a6 <_svfprintf_r+0x13ee>
   85d60:	1974      	adds	r4, r6, r5
   85d62:	9a16      	ldr	r2, [sp, #88]	; 0x58
   85d64:	9808      	ldr	r0, [sp, #32]
   85d66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   85d68:	4639      	mov	r1, r7
   85d6a:	f003 f9b5 	bl	890d8 <__aeabi_dcmpeq>
   85d6e:	2800      	cmp	r0, #0
   85d70:	f040 8124 	bne.w	85fbc <_svfprintf_r+0x1204>
   85d74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   85d76:	42a3      	cmp	r3, r4
   85d78:	d206      	bcs.n	85d88 <_svfprintf_r+0xfd0>
   85d7a:	2130      	movs	r1, #48	; 0x30
   85d7c:	1c5a      	adds	r2, r3, #1
   85d7e:	9223      	str	r2, [sp, #140]	; 0x8c
   85d80:	7019      	strb	r1, [r3, #0]
   85d82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   85d84:	429c      	cmp	r4, r3
   85d86:	d8f9      	bhi.n	85d7c <_svfprintf_r+0xfc4>
   85d88:	1b9b      	subs	r3, r3, r6
   85d8a:	9313      	str	r3, [sp, #76]	; 0x4c
   85d8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85d8e:	2b47      	cmp	r3, #71	; 0x47
   85d90:	f000 80a2 	beq.w	85ed8 <_svfprintf_r+0x1120>
   85d94:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85d96:	2b65      	cmp	r3, #101	; 0x65
   85d98:	f340 81a7 	ble.w	860ea <_svfprintf_r+0x1332>
   85d9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85d9e:	2b66      	cmp	r3, #102	; 0x66
   85da0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   85da2:	9312      	str	r3, [sp, #72]	; 0x48
   85da4:	f000 8171 	beq.w	8608a <_svfprintf_r+0x12d2>
   85da8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85daa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85dac:	4619      	mov	r1, r3
   85dae:	4291      	cmp	r1, r2
   85db0:	f300 815d 	bgt.w	8606e <_svfprintf_r+0x12b6>
   85db4:	f01b 0f01 	tst.w	fp, #1
   85db8:	f040 81f0 	bne.w	8619c <_svfprintf_r+0x13e4>
   85dbc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   85dc0:	9308      	str	r3, [sp, #32]
   85dc2:	2367      	movs	r3, #103	; 0x67
   85dc4:	920e      	str	r2, [sp, #56]	; 0x38
   85dc6:	9311      	str	r3, [sp, #68]	; 0x44
   85dc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85dca:	2b00      	cmp	r3, #0
   85dcc:	d17d      	bne.n	85eca <_svfprintf_r+0x1112>
   85dce:	930a      	str	r3, [sp, #40]	; 0x28
   85dd0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   85dd4:	f7ff b914 	b.w	85000 <_svfprintf_r+0x248>
   85dd8:	f024 0407 	bic.w	r4, r4, #7
   85ddc:	6823      	ldr	r3, [r4, #0]
   85dde:	9315      	str	r3, [sp, #84]	; 0x54
   85de0:	6863      	ldr	r3, [r4, #4]
   85de2:	9314      	str	r3, [sp, #80]	; 0x50
   85de4:	f104 0308 	add.w	r3, r4, #8
   85de8:	930f      	str	r3, [sp, #60]	; 0x3c
   85dea:	f7ff bb2f 	b.w	8544c <_svfprintf_r+0x694>
   85dee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85df0:	6813      	ldr	r3, [r2, #0]
   85df2:	3204      	adds	r2, #4
   85df4:	920f      	str	r2, [sp, #60]	; 0x3c
   85df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   85df8:	601a      	str	r2, [r3, #0]
   85dfa:	f7ff b804 	b.w	84e06 <_svfprintf_r+0x4e>
   85dfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85e00:	4daf      	ldr	r5, [pc, #700]	; (860c0 <_svfprintf_r+0x1308>)
   85e02:	f7ff b9ad 	b.w	85160 <_svfprintf_r+0x3a8>
   85e06:	aa25      	add	r2, sp, #148	; 0x94
   85e08:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85e0a:	980c      	ldr	r0, [sp, #48]	; 0x30
   85e0c:	f002 f8d8 	bl	87fc0 <__ssprint_r>
   85e10:	2800      	cmp	r0, #0
   85e12:	f47f a8ae 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85e16:	46c8      	mov	r8, r9
   85e18:	e431      	b.n	8567e <_svfprintf_r+0x8c6>
   85e1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85e1c:	4613      	mov	r3, r2
   85e1e:	3304      	adds	r3, #4
   85e20:	930f      	str	r3, [sp, #60]	; 0x3c
   85e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85e24:	6811      	ldr	r1, [r2, #0]
   85e26:	17dd      	asrs	r5, r3, #31
   85e28:	461a      	mov	r2, r3
   85e2a:	462b      	mov	r3, r5
   85e2c:	e9c1 2300 	strd	r2, r3, [r1]
   85e30:	f7fe bfe9 	b.w	84e06 <_svfprintf_r+0x4e>
   85e34:	aa25      	add	r2, sp, #148	; 0x94
   85e36:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85e38:	980c      	ldr	r0, [sp, #48]	; 0x30
   85e3a:	f002 f8c1 	bl	87fc0 <__ssprint_r>
   85e3e:	2800      	cmp	r0, #0
   85e40:	f47f a897 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85e44:	46c8      	mov	r8, r9
   85e46:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85e48:	e432      	b.n	856b0 <_svfprintf_r+0x8f8>
   85e4a:	f108 0808 	add.w	r8, r8, #8
   85e4e:	e52f      	b.n	858b0 <_svfprintf_r+0xaf8>
   85e50:	2140      	movs	r1, #64	; 0x40
   85e52:	980c      	ldr	r0, [sp, #48]	; 0x30
   85e54:	f001 fa26 	bl	872a4 <_malloc_r>
   85e58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85e5a:	6010      	str	r0, [r2, #0]
   85e5c:	6110      	str	r0, [r2, #16]
   85e5e:	2800      	cmp	r0, #0
   85e60:	f000 8214 	beq.w	8628c <_svfprintf_r+0x14d4>
   85e64:	2340      	movs	r3, #64	; 0x40
   85e66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85e68:	6153      	str	r3, [r2, #20]
   85e6a:	f7fe bfbc 	b.w	84de6 <_svfprintf_r+0x2e>
   85e6e:	2003      	movs	r0, #3
   85e70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85e72:	a923      	add	r1, sp, #140	; 0x8c
   85e74:	e88d 0011 	stmia.w	sp, {r0, r4}
   85e78:	9104      	str	r1, [sp, #16]
   85e7a:	a820      	add	r0, sp, #128	; 0x80
   85e7c:	a91f      	add	r1, sp, #124	; 0x7c
   85e7e:	9003      	str	r0, [sp, #12]
   85e80:	9a08      	ldr	r2, [sp, #32]
   85e82:	463b      	mov	r3, r7
   85e84:	9102      	str	r1, [sp, #8]
   85e86:	980c      	ldr	r0, [sp, #48]	; 0x30
   85e88:	f000 faba 	bl	86400 <_dtoa_r>
   85e8c:	4625      	mov	r5, r4
   85e8e:	4606      	mov	r6, r0
   85e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85e92:	1974      	adds	r4, r6, r5
   85e94:	2b46      	cmp	r3, #70	; 0x46
   85e96:	f47f af64 	bne.w	85d62 <_svfprintf_r+0xfaa>
   85e9a:	7833      	ldrb	r3, [r6, #0]
   85e9c:	2b30      	cmp	r3, #48	; 0x30
   85e9e:	f000 8187 	beq.w	861b0 <_svfprintf_r+0x13f8>
   85ea2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   85ea4:	442c      	add	r4, r5
   85ea6:	e75c      	b.n	85d62 <_svfprintf_r+0xfaa>
   85ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85eaa:	2b00      	cmp	r3, #0
   85eac:	bf08      	it	eq
   85eae:	2301      	moveq	r3, #1
   85eb0:	930a      	str	r3, [sp, #40]	; 0x28
   85eb2:	e723      	b.n	85cfc <_svfprintf_r+0xf44>
   85eb4:	4630      	mov	r0, r6
   85eb6:	950a      	str	r5, [sp, #40]	; 0x28
   85eb8:	f7fe fe6c 	bl	84b94 <strlen>
   85ebc:	940f      	str	r4, [sp, #60]	; 0x3c
   85ebe:	900e      	str	r0, [sp, #56]	; 0x38
   85ec0:	f8cd b01c 	str.w	fp, [sp, #28]
   85ec4:	4603      	mov	r3, r0
   85ec6:	f7ff b9e7 	b.w	85298 <_svfprintf_r+0x4e0>
   85eca:	272d      	movs	r7, #45	; 0x2d
   85ecc:	2300      	movs	r3, #0
   85ece:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   85ed2:	930a      	str	r3, [sp, #40]	; 0x28
   85ed4:	f7ff b895 	b.w	85002 <_svfprintf_r+0x24a>
   85ed8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   85eda:	461a      	mov	r2, r3
   85edc:	9312      	str	r3, [sp, #72]	; 0x48
   85ede:	3303      	adds	r3, #3
   85ee0:	db04      	blt.n	85eec <_svfprintf_r+0x1134>
   85ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85ee4:	4619      	mov	r1, r3
   85ee6:	4291      	cmp	r1, r2
   85ee8:	f6bf af5e 	bge.w	85da8 <_svfprintf_r+0xff0>
   85eec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   85eee:	3b02      	subs	r3, #2
   85ef0:	9311      	str	r3, [sp, #68]	; 0x44
   85ef2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85ef4:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   85ef8:	3b01      	subs	r3, #1
   85efa:	2b00      	cmp	r3, #0
   85efc:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   85f00:	bfb4      	ite	lt
   85f02:	222d      	movlt	r2, #45	; 0x2d
   85f04:	222b      	movge	r2, #43	; 0x2b
   85f06:	931f      	str	r3, [sp, #124]	; 0x7c
   85f08:	bfb8      	it	lt
   85f0a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   85f0c:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   85f10:	bfb8      	it	lt
   85f12:	f1c3 0301 	rsblt	r3, r3, #1
   85f16:	2b09      	cmp	r3, #9
   85f18:	f340 811f 	ble.w	8615a <_svfprintf_r+0x13a2>
   85f1c:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   85f20:	4601      	mov	r1, r0
   85f22:	4c68      	ldr	r4, [pc, #416]	; (860c4 <_svfprintf_r+0x130c>)
   85f24:	e000      	b.n	85f28 <_svfprintf_r+0x1170>
   85f26:	4611      	mov	r1, r2
   85f28:	fb84 5203 	smull	r5, r2, r4, r3
   85f2c:	17dd      	asrs	r5, r3, #31
   85f2e:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   85f32:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   85f36:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   85f3a:	3230      	adds	r2, #48	; 0x30
   85f3c:	2d09      	cmp	r5, #9
   85f3e:	f801 2c01 	strb.w	r2, [r1, #-1]
   85f42:	462b      	mov	r3, r5
   85f44:	f101 32ff 	add.w	r2, r1, #4294967295
   85f48:	dced      	bgt.n	85f26 <_svfprintf_r+0x116e>
   85f4a:	3330      	adds	r3, #48	; 0x30
   85f4c:	3902      	subs	r1, #2
   85f4e:	b2dc      	uxtb	r4, r3
   85f50:	4288      	cmp	r0, r1
   85f52:	f802 4c01 	strb.w	r4, [r2, #-1]
   85f56:	f240 8192 	bls.w	8627e <_svfprintf_r+0x14c6>
   85f5a:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   85f5e:	4613      	mov	r3, r2
   85f60:	e001      	b.n	85f66 <_svfprintf_r+0x11ae>
   85f62:	f813 4b01 	ldrb.w	r4, [r3], #1
   85f66:	4283      	cmp	r3, r0
   85f68:	f801 4b01 	strb.w	r4, [r1], #1
   85f6c:	d1f9      	bne.n	85f62 <_svfprintf_r+0x11aa>
   85f6e:	3301      	adds	r3, #1
   85f70:	1a9b      	subs	r3, r3, r2
   85f72:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   85f76:	4413      	add	r3, r2
   85f78:	aa21      	add	r2, sp, #132	; 0x84
   85f7a:	1a9b      	subs	r3, r3, r2
   85f7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85f7e:	931b      	str	r3, [sp, #108]	; 0x6c
   85f80:	2a01      	cmp	r2, #1
   85f82:	4413      	add	r3, r2
   85f84:	930e      	str	r3, [sp, #56]	; 0x38
   85f86:	f340 8148 	ble.w	8621a <_svfprintf_r+0x1462>
   85f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85f8c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   85f8e:	4413      	add	r3, r2
   85f90:	930e      	str	r3, [sp, #56]	; 0x38
   85f92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85f96:	9308      	str	r3, [sp, #32]
   85f98:	2300      	movs	r3, #0
   85f9a:	9312      	str	r3, [sp, #72]	; 0x48
   85f9c:	e714      	b.n	85dc8 <_svfprintf_r+0x1010>
   85f9e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85fa0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   85fa2:	f7ff b876 	b.w	85092 <_svfprintf_r+0x2da>
   85fa6:	aa25      	add	r2, sp, #148	; 0x94
   85fa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85faa:	980c      	ldr	r0, [sp, #48]	; 0x30
   85fac:	f002 f808 	bl	87fc0 <__ssprint_r>
   85fb0:	2800      	cmp	r0, #0
   85fb2:	f47e afde 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85fb6:	46c8      	mov	r8, r9
   85fb8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85fba:	e4fb      	b.n	859b4 <_svfprintf_r+0xbfc>
   85fbc:	4623      	mov	r3, r4
   85fbe:	e6e3      	b.n	85d88 <_svfprintf_r+0xfd0>
   85fc0:	aa25      	add	r2, sp, #148	; 0x94
   85fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85fc4:	980c      	ldr	r0, [sp, #48]	; 0x30
   85fc6:	f001 fffb 	bl	87fc0 <__ssprint_r>
   85fca:	2800      	cmp	r0, #0
   85fcc:	f47e afd1 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85fd0:	46c8      	mov	r8, r9
   85fd2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   85fd4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85fd6:	e5d3      	b.n	85b80 <_svfprintf_r+0xdc8>
   85fd8:	aa25      	add	r2, sp, #148	; 0x94
   85fda:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85fdc:	980c      	ldr	r0, [sp, #48]	; 0x30
   85fde:	f001 ffef 	bl	87fc0 <__ssprint_r>
   85fe2:	2800      	cmp	r0, #0
   85fe4:	f47e afc5 	bne.w	84f72 <_svfprintf_r+0x1ba>
   85fe8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   85fea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85fec:	46c8      	mov	r8, r9
   85fee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   85ff0:	1a9a      	subs	r2, r3, r2
   85ff2:	e5dd      	b.n	85bb0 <_svfprintf_r+0xdf8>
   85ff4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85ff6:	f7ff b8fe 	b.w	851f6 <_svfprintf_r+0x43e>
   85ffa:	aa25      	add	r2, sp, #148	; 0x94
   85ffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85ffe:	980c      	ldr	r0, [sp, #48]	; 0x30
   86000:	f001 ffde 	bl	87fc0 <__ssprint_r>
   86004:	2800      	cmp	r0, #0
   86006:	f47e afb4 	bne.w	84f72 <_svfprintf_r+0x1ba>
   8600a:	46c8      	mov	r8, r9
   8600c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8600e:	e5b0      	b.n	85b72 <_svfprintf_r+0xdba>
   86010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86012:	4637      	mov	r7, r6
   86014:	2b06      	cmp	r3, #6
   86016:	bf28      	it	cs
   86018:	2306      	movcs	r3, #6
   8601a:	960a      	str	r6, [sp, #40]	; 0x28
   8601c:	9612      	str	r6, [sp, #72]	; 0x48
   8601e:	9308      	str	r3, [sp, #32]
   86020:	940f      	str	r4, [sp, #60]	; 0x3c
   86022:	f8cd b01c 	str.w	fp, [sp, #28]
   86026:	930e      	str	r3, [sp, #56]	; 0x38
   86028:	4e27      	ldr	r6, [pc, #156]	; (860c8 <_svfprintf_r+0x1310>)
   8602a:	f7fe bfe9 	b.w	85000 <_svfprintf_r+0x248>
   8602e:	2306      	movs	r3, #6
   86030:	930a      	str	r3, [sp, #40]	; 0x28
   86032:	e663      	b.n	85cfc <_svfprintf_r+0xf44>
   86034:	232d      	movs	r3, #45	; 0x2d
   86036:	461f      	mov	r7, r3
   86038:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8603c:	f7ff ba28 	b.w	85490 <_svfprintf_r+0x6d8>
   86040:	2003      	movs	r0, #3
   86042:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86044:	a923      	add	r1, sp, #140	; 0x8c
   86046:	e88d 0011 	stmia.w	sp, {r0, r4}
   8604a:	9104      	str	r1, [sp, #16]
   8604c:	a820      	add	r0, sp, #128	; 0x80
   8604e:	a91f      	add	r1, sp, #124	; 0x7c
   86050:	9003      	str	r0, [sp, #12]
   86052:	9a08      	ldr	r2, [sp, #32]
   86054:	463b      	mov	r3, r7
   86056:	9102      	str	r1, [sp, #8]
   86058:	980c      	ldr	r0, [sp, #48]	; 0x30
   8605a:	f000 f9d1 	bl	86400 <_dtoa_r>
   8605e:	4625      	mov	r5, r4
   86060:	4606      	mov	r6, r0
   86062:	1904      	adds	r4, r0, r4
   86064:	e719      	b.n	85e9a <_svfprintf_r+0x10e2>
   86066:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86068:	4d15      	ldr	r5, [pc, #84]	; (860c0 <_svfprintf_r+0x1308>)
   8606a:	f7ff bb7e 	b.w	8576a <_svfprintf_r+0x9b2>
   8606e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86070:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86072:	4413      	add	r3, r2
   86074:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86076:	930e      	str	r3, [sp, #56]	; 0x38
   86078:	2a00      	cmp	r2, #0
   8607a:	f340 80c7 	ble.w	8620c <_svfprintf_r+0x1454>
   8607e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86082:	9308      	str	r3, [sp, #32]
   86084:	2367      	movs	r3, #103	; 0x67
   86086:	9311      	str	r3, [sp, #68]	; 0x44
   86088:	e69e      	b.n	85dc8 <_svfprintf_r+0x1010>
   8608a:	2b00      	cmp	r3, #0
   8608c:	f340 80e1 	ble.w	86252 <_svfprintf_r+0x149a>
   86090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86092:	2a00      	cmp	r2, #0
   86094:	f040 80b0 	bne.w	861f8 <_svfprintf_r+0x1440>
   86098:	f01b 0f01 	tst.w	fp, #1
   8609c:	f040 80ac 	bne.w	861f8 <_svfprintf_r+0x1440>
   860a0:	9308      	str	r3, [sp, #32]
   860a2:	930e      	str	r3, [sp, #56]	; 0x38
   860a4:	e690      	b.n	85dc8 <_svfprintf_r+0x1010>
   860a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   860a8:	940f      	str	r4, [sp, #60]	; 0x3c
   860aa:	9308      	str	r3, [sp, #32]
   860ac:	930e      	str	r3, [sp, #56]	; 0x38
   860ae:	900a      	str	r0, [sp, #40]	; 0x28
   860b0:	f8cd b01c 	str.w	fp, [sp, #28]
   860b4:	9012      	str	r0, [sp, #72]	; 0x48
   860b6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   860ba:	f7fe bfa1 	b.w	85000 <_svfprintf_r+0x248>
   860be:	bf00      	nop
   860c0:	0008a830 	.word	0x0008a830
   860c4:	66666667 	.word	0x66666667
   860c8:	0008a814 	.word	0x0008a814
   860cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   860ce:	2b47      	cmp	r3, #71	; 0x47
   860d0:	f47f ae46 	bne.w	85d60 <_svfprintf_r+0xfa8>
   860d4:	f01b 0f01 	tst.w	fp, #1
   860d8:	f47f aeda 	bne.w	85e90 <_svfprintf_r+0x10d8>
   860dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   860de:	1b9b      	subs	r3, r3, r6
   860e0:	9313      	str	r3, [sp, #76]	; 0x4c
   860e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   860e4:	2b47      	cmp	r3, #71	; 0x47
   860e6:	f43f aef7 	beq.w	85ed8 <_svfprintf_r+0x1120>
   860ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   860ec:	9312      	str	r3, [sp, #72]	; 0x48
   860ee:	e700      	b.n	85ef2 <_svfprintf_r+0x113a>
   860f0:	2000      	movs	r0, #0
   860f2:	900a      	str	r0, [sp, #40]	; 0x28
   860f4:	f7fe bebc 	b.w	84e70 <_svfprintf_r+0xb8>
   860f8:	424f      	negs	r7, r1
   860fa:	3110      	adds	r1, #16
   860fc:	da35      	bge.n	8616a <_svfprintf_r+0x13b2>
   860fe:	2410      	movs	r4, #16
   86100:	4d6a      	ldr	r5, [pc, #424]	; (862ac <_svfprintf_r+0x14f4>)
   86102:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86106:	e004      	b.n	86112 <_svfprintf_r+0x135a>
   86108:	f108 0808 	add.w	r8, r8, #8
   8610c:	3f10      	subs	r7, #16
   8610e:	2f10      	cmp	r7, #16
   86110:	dd2c      	ble.n	8616c <_svfprintf_r+0x13b4>
   86112:	3301      	adds	r3, #1
   86114:	3210      	adds	r2, #16
   86116:	2b07      	cmp	r3, #7
   86118:	9227      	str	r2, [sp, #156]	; 0x9c
   8611a:	9326      	str	r3, [sp, #152]	; 0x98
   8611c:	f8c8 5000 	str.w	r5, [r8]
   86120:	f8c8 4004 	str.w	r4, [r8, #4]
   86124:	ddf0      	ble.n	86108 <_svfprintf_r+0x1350>
   86126:	aa25      	add	r2, sp, #148	; 0x94
   86128:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8612a:	4658      	mov	r0, fp
   8612c:	f001 ff48 	bl	87fc0 <__ssprint_r>
   86130:	2800      	cmp	r0, #0
   86132:	f47e af1e 	bne.w	84f72 <_svfprintf_r+0x1ba>
   86136:	46c8      	mov	r8, r9
   86138:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8613a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8613c:	e7e6      	b.n	8610c <_svfprintf_r+0x1354>
   8613e:	aa25      	add	r2, sp, #148	; 0x94
   86140:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86142:	980c      	ldr	r0, [sp, #48]	; 0x30
   86144:	f001 ff3c 	bl	87fc0 <__ssprint_r>
   86148:	2800      	cmp	r0, #0
   8614a:	f47e af12 	bne.w	84f72 <_svfprintf_r+0x1ba>
   8614e:	46c8      	mov	r8, r9
   86150:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86152:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86154:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86156:	f7ff bbc3 	b.w	858e0 <_svfprintf_r+0xb28>
   8615a:	2230      	movs	r2, #48	; 0x30
   8615c:	4413      	add	r3, r2
   8615e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   86162:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   86166:	ab22      	add	r3, sp, #136	; 0x88
   86168:	e706      	b.n	85f78 <_svfprintf_r+0x11c0>
   8616a:	4d50      	ldr	r5, [pc, #320]	; (862ac <_svfprintf_r+0x14f4>)
   8616c:	3301      	adds	r3, #1
   8616e:	443a      	add	r2, r7
   86170:	2b07      	cmp	r3, #7
   86172:	e888 00a0 	stmia.w	r8, {r5, r7}
   86176:	9227      	str	r2, [sp, #156]	; 0x9c
   86178:	9326      	str	r3, [sp, #152]	; 0x98
   8617a:	f108 0808 	add.w	r8, r8, #8
   8617e:	f77f abb2 	ble.w	858e6 <_svfprintf_r+0xb2e>
   86182:	aa25      	add	r2, sp, #148	; 0x94
   86184:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86186:	980c      	ldr	r0, [sp, #48]	; 0x30
   86188:	f001 ff1a 	bl	87fc0 <__ssprint_r>
   8618c:	2800      	cmp	r0, #0
   8618e:	f47e aef0 	bne.w	84f72 <_svfprintf_r+0x1ba>
   86192:	46c8      	mov	r8, r9
   86194:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86196:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86198:	f7ff bba5 	b.w	858e6 <_svfprintf_r+0xb2e>
   8619c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8619e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   861a0:	4413      	add	r3, r2
   861a2:	930e      	str	r3, [sp, #56]	; 0x38
   861a4:	e76b      	b.n	8607e <_svfprintf_r+0x12c6>
   861a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   861a8:	e5ee      	b.n	85d88 <_svfprintf_r+0xfd0>
   861aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   861ac:	4d3f      	ldr	r5, [pc, #252]	; (862ac <_svfprintf_r+0x14f4>)
   861ae:	e4bb      	b.n	85b28 <_svfprintf_r+0xd70>
   861b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   861b2:	9808      	ldr	r0, [sp, #32]
   861b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   861b6:	4639      	mov	r1, r7
   861b8:	f002 ff8e 	bl	890d8 <__aeabi_dcmpeq>
   861bc:	2800      	cmp	r0, #0
   861be:	f47f ae70 	bne.w	85ea2 <_svfprintf_r+0x10ea>
   861c2:	f1c5 0501 	rsb	r5, r5, #1
   861c6:	951f      	str	r5, [sp, #124]	; 0x7c
   861c8:	442c      	add	r4, r5
   861ca:	e5ca      	b.n	85d62 <_svfprintf_r+0xfaa>
   861cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   861ce:	4e38      	ldr	r6, [pc, #224]	; (862b0 <_svfprintf_r+0x14f8>)
   861d0:	2b00      	cmp	r3, #0
   861d2:	bfbe      	ittt	lt
   861d4:	232d      	movlt	r3, #45	; 0x2d
   861d6:	461f      	movlt	r7, r3
   861d8:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   861dc:	f04f 0303 	mov.w	r3, #3
   861e0:	461a      	mov	r2, r3
   861e2:	9308      	str	r3, [sp, #32]
   861e4:	f04f 0300 	mov.w	r3, #0
   861e8:	bfa8      	it	ge
   861ea:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   861ee:	4619      	mov	r1, r3
   861f0:	930a      	str	r3, [sp, #40]	; 0x28
   861f2:	4b30      	ldr	r3, [pc, #192]	; (862b4 <_svfprintf_r+0x14fc>)
   861f4:	f7ff b954 	b.w	854a0 <_svfprintf_r+0x6e8>
   861f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   861fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
   861fc:	4413      	add	r3, r2
   861fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86200:	441a      	add	r2, r3
   86202:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86206:	920e      	str	r2, [sp, #56]	; 0x38
   86208:	9308      	str	r3, [sp, #32]
   8620a:	e5dd      	b.n	85dc8 <_svfprintf_r+0x1010>
   8620c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8620e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86210:	f1c3 0301 	rsb	r3, r3, #1
   86214:	441a      	add	r2, r3
   86216:	4613      	mov	r3, r2
   86218:	e7c3      	b.n	861a2 <_svfprintf_r+0x13ea>
   8621a:	f01b 0301 	ands.w	r3, fp, #1
   8621e:	9312      	str	r3, [sp, #72]	; 0x48
   86220:	f47f aeb3 	bne.w	85f8a <_svfprintf_r+0x11d2>
   86224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86226:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8622a:	9308      	str	r3, [sp, #32]
   8622c:	e5cc      	b.n	85dc8 <_svfprintf_r+0x1010>
   8622e:	4d1f      	ldr	r5, [pc, #124]	; (862ac <_svfprintf_r+0x14f4>)
   86230:	e43c      	b.n	85aac <_svfprintf_r+0xcf4>
   86232:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86234:	4d1d      	ldr	r5, [pc, #116]	; (862ac <_svfprintf_r+0x14f4>)
   86236:	e491      	b.n	85b5c <_svfprintf_r+0xda4>
   86238:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   8623a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   8623e:	6828      	ldr	r0, [r5, #0]
   86240:	46a2      	mov	sl, r4
   86242:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   86246:	900a      	str	r0, [sp, #40]	; 0x28
   86248:	4628      	mov	r0, r5
   8624a:	3004      	adds	r0, #4
   8624c:	900f      	str	r0, [sp, #60]	; 0x3c
   8624e:	f7fe be0d 	b.w	84e6c <_svfprintf_r+0xb4>
   86252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86254:	b913      	cbnz	r3, 8625c <_svfprintf_r+0x14a4>
   86256:	f01b 0f01 	tst.w	fp, #1
   8625a:	d002      	beq.n	86262 <_svfprintf_r+0x14aa>
   8625c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8625e:	3301      	adds	r3, #1
   86260:	e7cd      	b.n	861fe <_svfprintf_r+0x1446>
   86262:	2301      	movs	r3, #1
   86264:	e71c      	b.n	860a0 <_svfprintf_r+0x12e8>
   86266:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8626a:	f7ff b980 	b.w	8556e <_svfprintf_r+0x7b6>
   8626e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86272:	f7ff b93a 	b.w	854ea <_svfprintf_r+0x732>
   86276:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8627a:	f7ff b84f 	b.w	8531c <_svfprintf_r+0x564>
   8627e:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   86282:	e679      	b.n	85f78 <_svfprintf_r+0x11c0>
   86284:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86288:	f7ff b9b2 	b.w	855f0 <_svfprintf_r+0x838>
   8628c:	f04f 32ff 	mov.w	r2, #4294967295
   86290:	230c      	movs	r3, #12
   86292:	9209      	str	r2, [sp, #36]	; 0x24
   86294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86296:	6013      	str	r3, [r2, #0]
   86298:	f7fe be74 	b.w	84f84 <_svfprintf_r+0x1cc>
   8629c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   862a0:	f7ff b8c4 	b.w	8542c <_svfprintf_r+0x674>
   862a4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   862a8:	f7ff b878 	b.w	8539c <_svfprintf_r+0x5e4>
   862ac:	0008a830 	.word	0x0008a830
   862b0:	0008a7e8 	.word	0x0008a7e8
   862b4:	0008a7e4 	.word	0x0008a7e4

000862b8 <register_fini>:
   862b8:	4b02      	ldr	r3, [pc, #8]	; (862c4 <register_fini+0xc>)
   862ba:	b113      	cbz	r3, 862c2 <register_fini+0xa>
   862bc:	4802      	ldr	r0, [pc, #8]	; (862c8 <register_fini+0x10>)
   862be:	f000 b805 	b.w	862cc <atexit>
   862c2:	4770      	bx	lr
   862c4:	00000000 	.word	0x00000000
   862c8:	00087245 	.word	0x00087245

000862cc <atexit>:
   862cc:	2300      	movs	r3, #0
   862ce:	4601      	mov	r1, r0
   862d0:	461a      	mov	r2, r3
   862d2:	4618      	mov	r0, r3
   862d4:	f001 befe 	b.w	880d4 <__register_exitproc>

000862d8 <quorem>:
   862d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   862dc:	6903      	ldr	r3, [r0, #16]
   862de:	690f      	ldr	r7, [r1, #16]
   862e0:	b083      	sub	sp, #12
   862e2:	429f      	cmp	r7, r3
   862e4:	f300 8088 	bgt.w	863f8 <quorem+0x120>
   862e8:	3f01      	subs	r7, #1
   862ea:	f101 0614 	add.w	r6, r1, #20
   862ee:	f100 0a14 	add.w	sl, r0, #20
   862f2:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   862f6:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   862fa:	3301      	adds	r3, #1
   862fc:	fbb2 f8f3 	udiv	r8, r2, r3
   86300:	00bb      	lsls	r3, r7, #2
   86302:	9300      	str	r3, [sp, #0]
   86304:	eb06 0903 	add.w	r9, r6, r3
   86308:	4453      	add	r3, sl
   8630a:	9301      	str	r3, [sp, #4]
   8630c:	f1b8 0f00 	cmp.w	r8, #0
   86310:	d03b      	beq.n	8638a <quorem+0xb2>
   86312:	2300      	movs	r3, #0
   86314:	46b4      	mov	ip, r6
   86316:	461c      	mov	r4, r3
   86318:	46d6      	mov	lr, sl
   8631a:	f85c 2b04 	ldr.w	r2, [ip], #4
   8631e:	f8de 5000 	ldr.w	r5, [lr]
   86322:	fa1f fb82 	uxth.w	fp, r2
   86326:	fb08 330b 	mla	r3, r8, fp, r3
   8632a:	0c12      	lsrs	r2, r2, #16
   8632c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   86330:	fb08 bb02 	mla	fp, r8, r2, fp
   86334:	b29a      	uxth	r2, r3
   86336:	1aa2      	subs	r2, r4, r2
   86338:	b2ab      	uxth	r3, r5
   8633a:	fa1f f48b 	uxth.w	r4, fp
   8633e:	441a      	add	r2, r3
   86340:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   86344:	eb04 4422 	add.w	r4, r4, r2, asr #16
   86348:	b292      	uxth	r2, r2
   8634a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   8634e:	45e1      	cmp	r9, ip
   86350:	f84e 2b04 	str.w	r2, [lr], #4
   86354:	ea4f 4424 	mov.w	r4, r4, asr #16
   86358:	ea4f 431b 	mov.w	r3, fp, lsr #16
   8635c:	d2dd      	bcs.n	8631a <quorem+0x42>
   8635e:	9b00      	ldr	r3, [sp, #0]
   86360:	f85a 3003 	ldr.w	r3, [sl, r3]
   86364:	b98b      	cbnz	r3, 8638a <quorem+0xb2>
   86366:	9c01      	ldr	r4, [sp, #4]
   86368:	1f23      	subs	r3, r4, #4
   8636a:	459a      	cmp	sl, r3
   8636c:	d20c      	bcs.n	86388 <quorem+0xb0>
   8636e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86372:	b94b      	cbnz	r3, 86388 <quorem+0xb0>
   86374:	f1a4 0308 	sub.w	r3, r4, #8
   86378:	e002      	b.n	86380 <quorem+0xa8>
   8637a:	681a      	ldr	r2, [r3, #0]
   8637c:	3b04      	subs	r3, #4
   8637e:	b91a      	cbnz	r2, 86388 <quorem+0xb0>
   86380:	459a      	cmp	sl, r3
   86382:	f107 37ff 	add.w	r7, r7, #4294967295
   86386:	d3f8      	bcc.n	8637a <quorem+0xa2>
   86388:	6107      	str	r7, [r0, #16]
   8638a:	4604      	mov	r4, r0
   8638c:	f001 fd08 	bl	87da0 <__mcmp>
   86390:	2800      	cmp	r0, #0
   86392:	db2d      	blt.n	863f0 <quorem+0x118>
   86394:	4655      	mov	r5, sl
   86396:	2300      	movs	r3, #0
   86398:	f108 0801 	add.w	r8, r8, #1
   8639c:	f856 1b04 	ldr.w	r1, [r6], #4
   863a0:	6828      	ldr	r0, [r5, #0]
   863a2:	b28a      	uxth	r2, r1
   863a4:	1a9a      	subs	r2, r3, r2
   863a6:	0c0b      	lsrs	r3, r1, #16
   863a8:	b281      	uxth	r1, r0
   863aa:	440a      	add	r2, r1
   863ac:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   863b0:	eb03 4322 	add.w	r3, r3, r2, asr #16
   863b4:	b292      	uxth	r2, r2
   863b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   863ba:	45b1      	cmp	r9, r6
   863bc:	f845 2b04 	str.w	r2, [r5], #4
   863c0:	ea4f 4323 	mov.w	r3, r3, asr #16
   863c4:	d2ea      	bcs.n	8639c <quorem+0xc4>
   863c6:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   863ca:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   863ce:	b97a      	cbnz	r2, 863f0 <quorem+0x118>
   863d0:	1f1a      	subs	r2, r3, #4
   863d2:	4592      	cmp	sl, r2
   863d4:	d20b      	bcs.n	863ee <quorem+0x116>
   863d6:	f853 2c04 	ldr.w	r2, [r3, #-4]
   863da:	b942      	cbnz	r2, 863ee <quorem+0x116>
   863dc:	3b08      	subs	r3, #8
   863de:	e002      	b.n	863e6 <quorem+0x10e>
   863e0:	681a      	ldr	r2, [r3, #0]
   863e2:	3b04      	subs	r3, #4
   863e4:	b91a      	cbnz	r2, 863ee <quorem+0x116>
   863e6:	459a      	cmp	sl, r3
   863e8:	f107 37ff 	add.w	r7, r7, #4294967295
   863ec:	d3f8      	bcc.n	863e0 <quorem+0x108>
   863ee:	6127      	str	r7, [r4, #16]
   863f0:	4640      	mov	r0, r8
   863f2:	b003      	add	sp, #12
   863f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   863f8:	2000      	movs	r0, #0
   863fa:	b003      	add	sp, #12
   863fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00086400 <_dtoa_r>:
   86400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86404:	6c05      	ldr	r5, [r0, #64]	; 0x40
   86406:	b09b      	sub	sp, #108	; 0x6c
   86408:	4604      	mov	r4, r0
   8640a:	4692      	mov	sl, r2
   8640c:	469b      	mov	fp, r3
   8640e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   86410:	b14d      	cbz	r5, 86426 <_dtoa_r+0x26>
   86412:	2301      	movs	r3, #1
   86414:	6c42      	ldr	r2, [r0, #68]	; 0x44
   86416:	4629      	mov	r1, r5
   86418:	4093      	lsls	r3, r2
   8641a:	60ab      	str	r3, [r5, #8]
   8641c:	606a      	str	r2, [r5, #4]
   8641e:	f001 fae7 	bl	879f0 <_Bfree>
   86422:	2300      	movs	r3, #0
   86424:	6423      	str	r3, [r4, #64]	; 0x40
   86426:	f1bb 0f00 	cmp.w	fp, #0
   8642a:	465d      	mov	r5, fp
   8642c:	db35      	blt.n	8649a <_dtoa_r+0x9a>
   8642e:	2300      	movs	r3, #0
   86430:	6033      	str	r3, [r6, #0]
   86432:	4b9d      	ldr	r3, [pc, #628]	; (866a8 <_dtoa_r+0x2a8>)
   86434:	43ab      	bics	r3, r5
   86436:	d015      	beq.n	86464 <_dtoa_r+0x64>
   86438:	2200      	movs	r2, #0
   8643a:	2300      	movs	r3, #0
   8643c:	4650      	mov	r0, sl
   8643e:	4659      	mov	r1, fp
   86440:	f002 fe4a 	bl	890d8 <__aeabi_dcmpeq>
   86444:	4680      	mov	r8, r0
   86446:	2800      	cmp	r0, #0
   86448:	d02d      	beq.n	864a6 <_dtoa_r+0xa6>
   8644a:	2301      	movs	r3, #1
   8644c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8644e:	6013      	str	r3, [r2, #0]
   86450:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86452:	2b00      	cmp	r3, #0
   86454:	f000 80bd 	beq.w	865d2 <_dtoa_r+0x1d2>
   86458:	4894      	ldr	r0, [pc, #592]	; (866ac <_dtoa_r+0x2ac>)
   8645a:	6018      	str	r0, [r3, #0]
   8645c:	3801      	subs	r0, #1
   8645e:	b01b      	add	sp, #108	; 0x6c
   86460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86464:	f242 730f 	movw	r3, #9999	; 0x270f
   86468:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8646a:	6013      	str	r3, [r2, #0]
   8646c:	f1ba 0f00 	cmp.w	sl, #0
   86470:	d10d      	bne.n	8648e <_dtoa_r+0x8e>
   86472:	f3c5 0513 	ubfx	r5, r5, #0, #20
   86476:	b955      	cbnz	r5, 8648e <_dtoa_r+0x8e>
   86478:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8647a:	488d      	ldr	r0, [pc, #564]	; (866b0 <_dtoa_r+0x2b0>)
   8647c:	2b00      	cmp	r3, #0
   8647e:	d0ee      	beq.n	8645e <_dtoa_r+0x5e>
   86480:	f100 0308 	add.w	r3, r0, #8
   86484:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   86486:	6013      	str	r3, [r2, #0]
   86488:	b01b      	add	sp, #108	; 0x6c
   8648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8648e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86490:	4888      	ldr	r0, [pc, #544]	; (866b4 <_dtoa_r+0x2b4>)
   86492:	2b00      	cmp	r3, #0
   86494:	d0e3      	beq.n	8645e <_dtoa_r+0x5e>
   86496:	1cc3      	adds	r3, r0, #3
   86498:	e7f4      	b.n	86484 <_dtoa_r+0x84>
   8649a:	2301      	movs	r3, #1
   8649c:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   864a0:	6033      	str	r3, [r6, #0]
   864a2:	46ab      	mov	fp, r5
   864a4:	e7c5      	b.n	86432 <_dtoa_r+0x32>
   864a6:	aa18      	add	r2, sp, #96	; 0x60
   864a8:	ab19      	add	r3, sp, #100	; 0x64
   864aa:	9201      	str	r2, [sp, #4]
   864ac:	9300      	str	r3, [sp, #0]
   864ae:	4652      	mov	r2, sl
   864b0:	465b      	mov	r3, fp
   864b2:	4620      	mov	r0, r4
   864b4:	f001 fd1e 	bl	87ef4 <__d2b>
   864b8:	0d2b      	lsrs	r3, r5, #20
   864ba:	4681      	mov	r9, r0
   864bc:	d071      	beq.n	865a2 <_dtoa_r+0x1a2>
   864be:	4650      	mov	r0, sl
   864c0:	f3cb 0213 	ubfx	r2, fp, #0, #20
   864c4:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   864c8:	9f18      	ldr	r7, [sp, #96]	; 0x60
   864ca:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   864ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   864d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   864d6:	2200      	movs	r2, #0
   864d8:	4b77      	ldr	r3, [pc, #476]	; (866b8 <_dtoa_r+0x2b8>)
   864da:	f002 f9e1 	bl	888a0 <__aeabi_dsub>
   864de:	a36c      	add	r3, pc, #432	; (adr r3, 86690 <_dtoa_r+0x290>)
   864e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   864e4:	f002 fb90 	bl	88c08 <__aeabi_dmul>
   864e8:	a36b      	add	r3, pc, #428	; (adr r3, 86698 <_dtoa_r+0x298>)
   864ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   864ee:	f002 f9d9 	bl	888a4 <__adddf3>
   864f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   864f6:	4630      	mov	r0, r6
   864f8:	f002 fb20 	bl	88b3c <__aeabi_i2d>
   864fc:	a368      	add	r3, pc, #416	; (adr r3, 866a0 <_dtoa_r+0x2a0>)
   864fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   86502:	f002 fb81 	bl	88c08 <__aeabi_dmul>
   86506:	4602      	mov	r2, r0
   86508:	460b      	mov	r3, r1
   8650a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   8650e:	f002 f9c9 	bl	888a4 <__adddf3>
   86512:	e9cd 0104 	strd	r0, r1, [sp, #16]
   86516:	f002 fe27 	bl	89168 <__aeabi_d2iz>
   8651a:	2200      	movs	r2, #0
   8651c:	9002      	str	r0, [sp, #8]
   8651e:	2300      	movs	r3, #0
   86520:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   86524:	f002 fde2 	bl	890ec <__aeabi_dcmplt>
   86528:	2800      	cmp	r0, #0
   8652a:	f040 816d 	bne.w	86808 <_dtoa_r+0x408>
   8652e:	9d02      	ldr	r5, [sp, #8]
   86530:	2d16      	cmp	r5, #22
   86532:	f200 8157 	bhi.w	867e4 <_dtoa_r+0x3e4>
   86536:	4961      	ldr	r1, [pc, #388]	; (866bc <_dtoa_r+0x2bc>)
   86538:	4652      	mov	r2, sl
   8653a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   8653e:	465b      	mov	r3, fp
   86540:	e9d1 0100 	ldrd	r0, r1, [r1]
   86544:	f002 fdf0 	bl	89128 <__aeabi_dcmpgt>
   86548:	2800      	cmp	r0, #0
   8654a:	f000 81be 	beq.w	868ca <_dtoa_r+0x4ca>
   8654e:	1e6b      	subs	r3, r5, #1
   86550:	9302      	str	r3, [sp, #8]
   86552:	2300      	movs	r3, #0
   86554:	930e      	str	r3, [sp, #56]	; 0x38
   86556:	1bbf      	subs	r7, r7, r6
   86558:	1e7b      	subs	r3, r7, #1
   8655a:	9308      	str	r3, [sp, #32]
   8655c:	f100 814e 	bmi.w	867fc <_dtoa_r+0x3fc>
   86560:	2300      	movs	r3, #0
   86562:	930a      	str	r3, [sp, #40]	; 0x28
   86564:	9b02      	ldr	r3, [sp, #8]
   86566:	2b00      	cmp	r3, #0
   86568:	f2c0 813f 	blt.w	867ea <_dtoa_r+0x3ea>
   8656c:	9a08      	ldr	r2, [sp, #32]
   8656e:	930d      	str	r3, [sp, #52]	; 0x34
   86570:	4611      	mov	r1, r2
   86572:	4419      	add	r1, r3
   86574:	2300      	movs	r3, #0
   86576:	9108      	str	r1, [sp, #32]
   86578:	930c      	str	r3, [sp, #48]	; 0x30
   8657a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8657c:	2b09      	cmp	r3, #9
   8657e:	d82a      	bhi.n	865d6 <_dtoa_r+0x1d6>
   86580:	2b05      	cmp	r3, #5
   86582:	f340 8658 	ble.w	87236 <_dtoa_r+0xe36>
   86586:	2500      	movs	r5, #0
   86588:	3b04      	subs	r3, #4
   8658a:	9324      	str	r3, [sp, #144]	; 0x90
   8658c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8658e:	3b02      	subs	r3, #2
   86590:	2b03      	cmp	r3, #3
   86592:	f200 863f 	bhi.w	87214 <_dtoa_r+0xe14>
   86596:	e8df f013 	tbh	[pc, r3, lsl #1]
   8659a:	03ce      	.short	0x03ce
   8659c:	03d902c3 	.word	0x03d902c3
   865a0:	045b      	.short	0x045b
   865a2:	9f18      	ldr	r7, [sp, #96]	; 0x60
   865a4:	9e19      	ldr	r6, [sp, #100]	; 0x64
   865a6:	443e      	add	r6, r7
   865a8:	f206 4332 	addw	r3, r6, #1074	; 0x432
   865ac:	2b20      	cmp	r3, #32
   865ae:	f340 8187 	ble.w	868c0 <_dtoa_r+0x4c0>
   865b2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   865b6:	f206 4012 	addw	r0, r6, #1042	; 0x412
   865ba:	409d      	lsls	r5, r3
   865bc:	fa2a f000 	lsr.w	r0, sl, r0
   865c0:	4328      	orrs	r0, r5
   865c2:	f002 faab 	bl	88b1c <__aeabi_ui2d>
   865c6:	2301      	movs	r3, #1
   865c8:	3e01      	subs	r6, #1
   865ca:	9314      	str	r3, [sp, #80]	; 0x50
   865cc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   865d0:	e781      	b.n	864d6 <_dtoa_r+0xd6>
   865d2:	483b      	ldr	r0, [pc, #236]	; (866c0 <_dtoa_r+0x2c0>)
   865d4:	e743      	b.n	8645e <_dtoa_r+0x5e>
   865d6:	2100      	movs	r1, #0
   865d8:	4620      	mov	r0, r4
   865da:	6461      	str	r1, [r4, #68]	; 0x44
   865dc:	9125      	str	r1, [sp, #148]	; 0x94
   865de:	f001 f9e1 	bl	879a4 <_Balloc>
   865e2:	f04f 33ff 	mov.w	r3, #4294967295
   865e6:	9307      	str	r3, [sp, #28]
   865e8:	930f      	str	r3, [sp, #60]	; 0x3c
   865ea:	2301      	movs	r3, #1
   865ec:	9a25      	ldr	r2, [sp, #148]	; 0x94
   865ee:	9004      	str	r0, [sp, #16]
   865f0:	6420      	str	r0, [r4, #64]	; 0x40
   865f2:	9224      	str	r2, [sp, #144]	; 0x90
   865f4:	930b      	str	r3, [sp, #44]	; 0x2c
   865f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   865f8:	2b00      	cmp	r3, #0
   865fa:	f2c0 80d3 	blt.w	867a4 <_dtoa_r+0x3a4>
   865fe:	9a02      	ldr	r2, [sp, #8]
   86600:	2a0e      	cmp	r2, #14
   86602:	f300 80cf 	bgt.w	867a4 <_dtoa_r+0x3a4>
   86606:	4b2d      	ldr	r3, [pc, #180]	; (866bc <_dtoa_r+0x2bc>)
   86608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8660c:	e9d3 2300 	ldrd	r2, r3, [r3]
   86610:	e9cd 2308 	strd	r2, r3, [sp, #32]
   86614:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86616:	2b00      	cmp	r3, #0
   86618:	f2c0 83b4 	blt.w	86d84 <_dtoa_r+0x984>
   8661c:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   86620:	4650      	mov	r0, sl
   86622:	462a      	mov	r2, r5
   86624:	4633      	mov	r3, r6
   86626:	4659      	mov	r1, fp
   86628:	f002 fc18 	bl	88e5c <__aeabi_ddiv>
   8662c:	f002 fd9c 	bl	89168 <__aeabi_d2iz>
   86630:	4680      	mov	r8, r0
   86632:	f002 fa83 	bl	88b3c <__aeabi_i2d>
   86636:	462a      	mov	r2, r5
   86638:	4633      	mov	r3, r6
   8663a:	f002 fae5 	bl	88c08 <__aeabi_dmul>
   8663e:	4602      	mov	r2, r0
   86640:	460b      	mov	r3, r1
   86642:	4650      	mov	r0, sl
   86644:	4659      	mov	r1, fp
   86646:	f002 f92b 	bl	888a0 <__aeabi_dsub>
   8664a:	9e07      	ldr	r6, [sp, #28]
   8664c:	9f04      	ldr	r7, [sp, #16]
   8664e:	f108 0530 	add.w	r5, r8, #48	; 0x30
   86652:	2e01      	cmp	r6, #1
   86654:	703d      	strb	r5, [r7, #0]
   86656:	4602      	mov	r2, r0
   86658:	460b      	mov	r3, r1
   8665a:	f107 0501 	add.w	r5, r7, #1
   8665e:	d064      	beq.n	8672a <_dtoa_r+0x32a>
   86660:	2200      	movs	r2, #0
   86662:	4b18      	ldr	r3, [pc, #96]	; (866c4 <_dtoa_r+0x2c4>)
   86664:	f002 fad0 	bl	88c08 <__aeabi_dmul>
   86668:	2200      	movs	r2, #0
   8666a:	2300      	movs	r3, #0
   8666c:	4606      	mov	r6, r0
   8666e:	460f      	mov	r7, r1
   86670:	f002 fd32 	bl	890d8 <__aeabi_dcmpeq>
   86674:	2800      	cmp	r0, #0
   86676:	f040 8082 	bne.w	8677e <_dtoa_r+0x37e>
   8667a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   8667e:	f04f 0a00 	mov.w	sl, #0
   86682:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   86686:	f04f 0b00 	mov.w	fp, #0
   8668a:	940b      	str	r4, [sp, #44]	; 0x2c
   8668c:	e029      	b.n	866e2 <_dtoa_r+0x2e2>
   8668e:	bf00      	nop
   86690:	636f4361 	.word	0x636f4361
   86694:	3fd287a7 	.word	0x3fd287a7
   86698:	8b60c8b3 	.word	0x8b60c8b3
   8669c:	3fc68a28 	.word	0x3fc68a28
   866a0:	509f79fb 	.word	0x509f79fb
   866a4:	3fd34413 	.word	0x3fd34413
   866a8:	7ff00000 	.word	0x7ff00000
   866ac:	0008a81d 	.word	0x0008a81d
   866b0:	0008a840 	.word	0x0008a840
   866b4:	0008a84c 	.word	0x0008a84c
   866b8:	3ff80000 	.word	0x3ff80000
   866bc:	0008a888 	.word	0x0008a888
   866c0:	0008a81c 	.word	0x0008a81c
   866c4:	40240000 	.word	0x40240000
   866c8:	2200      	movs	r2, #0
   866ca:	4b81      	ldr	r3, [pc, #516]	; (868d0 <_dtoa_r+0x4d0>)
   866cc:	f002 fa9c 	bl	88c08 <__aeabi_dmul>
   866d0:	4652      	mov	r2, sl
   866d2:	465b      	mov	r3, fp
   866d4:	4606      	mov	r6, r0
   866d6:	460f      	mov	r7, r1
   866d8:	f002 fcfe 	bl	890d8 <__aeabi_dcmpeq>
   866dc:	2800      	cmp	r0, #0
   866de:	f040 83ba 	bne.w	86e56 <_dtoa_r+0xa56>
   866e2:	4642      	mov	r2, r8
   866e4:	464b      	mov	r3, r9
   866e6:	4630      	mov	r0, r6
   866e8:	4639      	mov	r1, r7
   866ea:	f002 fbb7 	bl	88e5c <__aeabi_ddiv>
   866ee:	f002 fd3b 	bl	89168 <__aeabi_d2iz>
   866f2:	4604      	mov	r4, r0
   866f4:	f002 fa22 	bl	88b3c <__aeabi_i2d>
   866f8:	4642      	mov	r2, r8
   866fa:	464b      	mov	r3, r9
   866fc:	f002 fa84 	bl	88c08 <__aeabi_dmul>
   86700:	4602      	mov	r2, r0
   86702:	460b      	mov	r3, r1
   86704:	4630      	mov	r0, r6
   86706:	4639      	mov	r1, r7
   86708:	f002 f8ca 	bl	888a0 <__aeabi_dsub>
   8670c:	f104 0630 	add.w	r6, r4, #48	; 0x30
   86710:	f805 6b01 	strb.w	r6, [r5], #1
   86714:	9e04      	ldr	r6, [sp, #16]
   86716:	9f07      	ldr	r7, [sp, #28]
   86718:	1bae      	subs	r6, r5, r6
   8671a:	42be      	cmp	r6, r7
   8671c:	4602      	mov	r2, r0
   8671e:	460b      	mov	r3, r1
   86720:	d1d2      	bne.n	866c8 <_dtoa_r+0x2c8>
   86722:	46a0      	mov	r8, r4
   86724:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   86728:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8672a:	4610      	mov	r0, r2
   8672c:	4619      	mov	r1, r3
   8672e:	f002 f8b9 	bl	888a4 <__adddf3>
   86732:	4606      	mov	r6, r0
   86734:	460f      	mov	r7, r1
   86736:	4602      	mov	r2, r0
   86738:	460b      	mov	r3, r1
   8673a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8673e:	f002 fcd5 	bl	890ec <__aeabi_dcmplt>
   86742:	b948      	cbnz	r0, 86758 <_dtoa_r+0x358>
   86744:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   86748:	4632      	mov	r2, r6
   8674a:	463b      	mov	r3, r7
   8674c:	f002 fcc4 	bl	890d8 <__aeabi_dcmpeq>
   86750:	b1a8      	cbz	r0, 8677e <_dtoa_r+0x37e>
   86752:	f018 0f01 	tst.w	r8, #1
   86756:	d012      	beq.n	8677e <_dtoa_r+0x37e>
   86758:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8675c:	1e6b      	subs	r3, r5, #1
   8675e:	9a04      	ldr	r2, [sp, #16]
   86760:	e004      	b.n	8676c <_dtoa_r+0x36c>
   86762:	429a      	cmp	r2, r3
   86764:	f000 8402 	beq.w	86f6c <_dtoa_r+0xb6c>
   86768:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   8676c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   86770:	f103 0501 	add.w	r5, r3, #1
   86774:	d0f5      	beq.n	86762 <_dtoa_r+0x362>
   86776:	f108 0801 	add.w	r8, r8, #1
   8677a:	f883 8000 	strb.w	r8, [r3]
   8677e:	4649      	mov	r1, r9
   86780:	4620      	mov	r0, r4
   86782:	f001 f935 	bl	879f0 <_Bfree>
   86786:	2200      	movs	r2, #0
   86788:	9b02      	ldr	r3, [sp, #8]
   8678a:	702a      	strb	r2, [r5, #0]
   8678c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8678e:	3301      	adds	r3, #1
   86790:	6013      	str	r3, [r2, #0]
   86792:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86794:	2b00      	cmp	r3, #0
   86796:	f000 839f 	beq.w	86ed8 <_dtoa_r+0xad8>
   8679a:	9804      	ldr	r0, [sp, #16]
   8679c:	601d      	str	r5, [r3, #0]
   8679e:	b01b      	add	sp, #108	; 0x6c
   867a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   867a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   867a6:	2a00      	cmp	r2, #0
   867a8:	d03e      	beq.n	86828 <_dtoa_r+0x428>
   867aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
   867ac:	2a01      	cmp	r2, #1
   867ae:	f340 8311 	ble.w	86dd4 <_dtoa_r+0x9d4>
   867b2:	9b07      	ldr	r3, [sp, #28]
   867b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   867b6:	1e5f      	subs	r7, r3, #1
   867b8:	42ba      	cmp	r2, r7
   867ba:	f2c0 8390 	blt.w	86ede <_dtoa_r+0xade>
   867be:	1bd7      	subs	r7, r2, r7
   867c0:	9b07      	ldr	r3, [sp, #28]
   867c2:	2b00      	cmp	r3, #0
   867c4:	f2c0 848c 	blt.w	870e0 <_dtoa_r+0xce0>
   867c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   867ca:	9b07      	ldr	r3, [sp, #28]
   867cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   867ce:	2101      	movs	r1, #1
   867d0:	441a      	add	r2, r3
   867d2:	920a      	str	r2, [sp, #40]	; 0x28
   867d4:	9a08      	ldr	r2, [sp, #32]
   867d6:	4620      	mov	r0, r4
   867d8:	441a      	add	r2, r3
   867da:	9208      	str	r2, [sp, #32]
   867dc:	f001 f9a4 	bl	87b28 <__i2b>
   867e0:	4606      	mov	r6, r0
   867e2:	e023      	b.n	8682c <_dtoa_r+0x42c>
   867e4:	2301      	movs	r3, #1
   867e6:	930e      	str	r3, [sp, #56]	; 0x38
   867e8:	e6b5      	b.n	86556 <_dtoa_r+0x156>
   867ea:	2300      	movs	r3, #0
   867ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   867ee:	930d      	str	r3, [sp, #52]	; 0x34
   867f0:	9b02      	ldr	r3, [sp, #8]
   867f2:	1ad2      	subs	r2, r2, r3
   867f4:	425b      	negs	r3, r3
   867f6:	920a      	str	r2, [sp, #40]	; 0x28
   867f8:	930c      	str	r3, [sp, #48]	; 0x30
   867fa:	e6be      	b.n	8657a <_dtoa_r+0x17a>
   867fc:	f1c7 0301 	rsb	r3, r7, #1
   86800:	930a      	str	r3, [sp, #40]	; 0x28
   86802:	2300      	movs	r3, #0
   86804:	9308      	str	r3, [sp, #32]
   86806:	e6ad      	b.n	86564 <_dtoa_r+0x164>
   86808:	9d02      	ldr	r5, [sp, #8]
   8680a:	4628      	mov	r0, r5
   8680c:	f002 f996 	bl	88b3c <__aeabi_i2d>
   86810:	4602      	mov	r2, r0
   86812:	460b      	mov	r3, r1
   86814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   86818:	f002 fc5e 	bl	890d8 <__aeabi_dcmpeq>
   8681c:	2800      	cmp	r0, #0
   8681e:	f47f ae86 	bne.w	8652e <_dtoa_r+0x12e>
   86822:	1e6b      	subs	r3, r5, #1
   86824:	9302      	str	r3, [sp, #8]
   86826:	e682      	b.n	8652e <_dtoa_r+0x12e>
   86828:	ad0a      	add	r5, sp, #40	; 0x28
   8682a:	cde0      	ldmia	r5, {r5, r6, r7}
   8682c:	2d00      	cmp	r5, #0
   8682e:	dd0c      	ble.n	8684a <_dtoa_r+0x44a>
   86830:	9908      	ldr	r1, [sp, #32]
   86832:	2900      	cmp	r1, #0
   86834:	460b      	mov	r3, r1
   86836:	dd08      	ble.n	8684a <_dtoa_r+0x44a>
   86838:	42a9      	cmp	r1, r5
   8683a:	bfa8      	it	ge
   8683c:	462b      	movge	r3, r5
   8683e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86840:	1aed      	subs	r5, r5, r3
   86842:	1ad2      	subs	r2, r2, r3
   86844:	1acb      	subs	r3, r1, r3
   86846:	920a      	str	r2, [sp, #40]	; 0x28
   86848:	9308      	str	r3, [sp, #32]
   8684a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8684c:	b1d3      	cbz	r3, 86884 <_dtoa_r+0x484>
   8684e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86850:	2b00      	cmp	r3, #0
   86852:	f000 82b8 	beq.w	86dc6 <_dtoa_r+0x9c6>
   86856:	2f00      	cmp	r7, #0
   86858:	dd10      	ble.n	8687c <_dtoa_r+0x47c>
   8685a:	4631      	mov	r1, r6
   8685c:	463a      	mov	r2, r7
   8685e:	4620      	mov	r0, r4
   86860:	f001 f9fe 	bl	87c60 <__pow5mult>
   86864:	464a      	mov	r2, r9
   86866:	4601      	mov	r1, r0
   86868:	4606      	mov	r6, r0
   8686a:	4620      	mov	r0, r4
   8686c:	f001 f966 	bl	87b3c <__multiply>
   86870:	4603      	mov	r3, r0
   86872:	4649      	mov	r1, r9
   86874:	4620      	mov	r0, r4
   86876:	4699      	mov	r9, r3
   86878:	f001 f8ba 	bl	879f0 <_Bfree>
   8687c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8687e:	1bda      	subs	r2, r3, r7
   86880:	f040 82a2 	bne.w	86dc8 <_dtoa_r+0x9c8>
   86884:	2101      	movs	r1, #1
   86886:	4620      	mov	r0, r4
   86888:	f001 f94e 	bl	87b28 <__i2b>
   8688c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8688e:	4680      	mov	r8, r0
   86890:	2b00      	cmp	r3, #0
   86892:	dd1f      	ble.n	868d4 <_dtoa_r+0x4d4>
   86894:	4601      	mov	r1, r0
   86896:	461a      	mov	r2, r3
   86898:	4620      	mov	r0, r4
   8689a:	f001 f9e1 	bl	87c60 <__pow5mult>
   8689e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   868a0:	4680      	mov	r8, r0
   868a2:	2b01      	cmp	r3, #1
   868a4:	f340 8255 	ble.w	86d52 <_dtoa_r+0x952>
   868a8:	2300      	movs	r3, #0
   868aa:	930c      	str	r3, [sp, #48]	; 0x30
   868ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
   868b0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   868b4:	6918      	ldr	r0, [r3, #16]
   868b6:	f001 f8e7 	bl	87a88 <__hi0bits>
   868ba:	f1c0 0020 	rsb	r0, r0, #32
   868be:	e013      	b.n	868e8 <_dtoa_r+0x4e8>
   868c0:	f1c3 0520 	rsb	r5, r3, #32
   868c4:	fa0a f005 	lsl.w	r0, sl, r5
   868c8:	e67b      	b.n	865c2 <_dtoa_r+0x1c2>
   868ca:	900e      	str	r0, [sp, #56]	; 0x38
   868cc:	e643      	b.n	86556 <_dtoa_r+0x156>
   868ce:	bf00      	nop
   868d0:	40240000 	.word	0x40240000
   868d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   868d6:	2b01      	cmp	r3, #1
   868d8:	f340 8285 	ble.w	86de6 <_dtoa_r+0x9e6>
   868dc:	2300      	movs	r3, #0
   868de:	930c      	str	r3, [sp, #48]	; 0x30
   868e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   868e2:	2001      	movs	r0, #1
   868e4:	2b00      	cmp	r3, #0
   868e6:	d1e1      	bne.n	868ac <_dtoa_r+0x4ac>
   868e8:	9a08      	ldr	r2, [sp, #32]
   868ea:	4410      	add	r0, r2
   868ec:	f010 001f 	ands.w	r0, r0, #31
   868f0:	f000 80a1 	beq.w	86a36 <_dtoa_r+0x636>
   868f4:	f1c0 0320 	rsb	r3, r0, #32
   868f8:	2b04      	cmp	r3, #4
   868fa:	f340 8486 	ble.w	8720a <_dtoa_r+0xe0a>
   868fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86900:	f1c0 001c 	rsb	r0, r0, #28
   86904:	4403      	add	r3, r0
   86906:	930a      	str	r3, [sp, #40]	; 0x28
   86908:	4613      	mov	r3, r2
   8690a:	4403      	add	r3, r0
   8690c:	4405      	add	r5, r0
   8690e:	9308      	str	r3, [sp, #32]
   86910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86912:	2b00      	cmp	r3, #0
   86914:	dd05      	ble.n	86922 <_dtoa_r+0x522>
   86916:	4649      	mov	r1, r9
   86918:	461a      	mov	r2, r3
   8691a:	4620      	mov	r0, r4
   8691c:	f001 f9f0 	bl	87d00 <__lshift>
   86920:	4681      	mov	r9, r0
   86922:	9b08      	ldr	r3, [sp, #32]
   86924:	2b00      	cmp	r3, #0
   86926:	dd05      	ble.n	86934 <_dtoa_r+0x534>
   86928:	4641      	mov	r1, r8
   8692a:	461a      	mov	r2, r3
   8692c:	4620      	mov	r0, r4
   8692e:	f001 f9e7 	bl	87d00 <__lshift>
   86932:	4680      	mov	r8, r0
   86934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86936:	2b00      	cmp	r3, #0
   86938:	f040 8086 	bne.w	86a48 <_dtoa_r+0x648>
   8693c:	9b07      	ldr	r3, [sp, #28]
   8693e:	2b00      	cmp	r3, #0
   86940:	f340 8264 	ble.w	86e0c <_dtoa_r+0xa0c>
   86944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86946:	2b00      	cmp	r3, #0
   86948:	f000 8098 	beq.w	86a7c <_dtoa_r+0x67c>
   8694c:	2d00      	cmp	r5, #0
   8694e:	dd05      	ble.n	8695c <_dtoa_r+0x55c>
   86950:	4631      	mov	r1, r6
   86952:	462a      	mov	r2, r5
   86954:	4620      	mov	r0, r4
   86956:	f001 f9d3 	bl	87d00 <__lshift>
   8695a:	4606      	mov	r6, r0
   8695c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8695e:	2b00      	cmp	r3, #0
   86960:	f040 8336 	bne.w	86fd0 <_dtoa_r+0xbd0>
   86964:	9608      	str	r6, [sp, #32]
   86966:	9b07      	ldr	r3, [sp, #28]
   86968:	9a04      	ldr	r2, [sp, #16]
   8696a:	3b01      	subs	r3, #1
   8696c:	18d3      	adds	r3, r2, r3
   8696e:	930b      	str	r3, [sp, #44]	; 0x2c
   86970:	4617      	mov	r7, r2
   86972:	f00a 0301 	and.w	r3, sl, #1
   86976:	46c2      	mov	sl, r8
   86978:	f8dd b020 	ldr.w	fp, [sp, #32]
   8697c:	930c      	str	r3, [sp, #48]	; 0x30
   8697e:	4651      	mov	r1, sl
   86980:	4648      	mov	r0, r9
   86982:	f7ff fca9 	bl	862d8 <quorem>
   86986:	4631      	mov	r1, r6
   86988:	4605      	mov	r5, r0
   8698a:	4648      	mov	r0, r9
   8698c:	f001 fa08 	bl	87da0 <__mcmp>
   86990:	465a      	mov	r2, fp
   86992:	9007      	str	r0, [sp, #28]
   86994:	4651      	mov	r1, sl
   86996:	4620      	mov	r0, r4
   86998:	f001 fa1e 	bl	87dd8 <__mdiff>
   8699c:	68c2      	ldr	r2, [r0, #12]
   8699e:	4680      	mov	r8, r0
   869a0:	f105 0330 	add.w	r3, r5, #48	; 0x30
   869a4:	2a00      	cmp	r2, #0
   869a6:	f040 8229 	bne.w	86dfc <_dtoa_r+0x9fc>
   869aa:	4601      	mov	r1, r0
   869ac:	4648      	mov	r0, r9
   869ae:	930a      	str	r3, [sp, #40]	; 0x28
   869b0:	f001 f9f6 	bl	87da0 <__mcmp>
   869b4:	4641      	mov	r1, r8
   869b6:	9008      	str	r0, [sp, #32]
   869b8:	4620      	mov	r0, r4
   869ba:	f001 f819 	bl	879f0 <_Bfree>
   869be:	9a08      	ldr	r2, [sp, #32]
   869c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   869c2:	b932      	cbnz	r2, 869d2 <_dtoa_r+0x5d2>
   869c4:	9924      	ldr	r1, [sp, #144]	; 0x90
   869c6:	b921      	cbnz	r1, 869d2 <_dtoa_r+0x5d2>
   869c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   869ca:	2a00      	cmp	r2, #0
   869cc:	f000 83ee 	beq.w	871ac <_dtoa_r+0xdac>
   869d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   869d2:	9907      	ldr	r1, [sp, #28]
   869d4:	2900      	cmp	r1, #0
   869d6:	f2c0 829f 	blt.w	86f18 <_dtoa_r+0xb18>
   869da:	d105      	bne.n	869e8 <_dtoa_r+0x5e8>
   869dc:	9924      	ldr	r1, [sp, #144]	; 0x90
   869de:	b919      	cbnz	r1, 869e8 <_dtoa_r+0x5e8>
   869e0:	990c      	ldr	r1, [sp, #48]	; 0x30
   869e2:	2900      	cmp	r1, #0
   869e4:	f000 8298 	beq.w	86f18 <_dtoa_r+0xb18>
   869e8:	2a00      	cmp	r2, #0
   869ea:	f300 8305 	bgt.w	86ff8 <_dtoa_r+0xbf8>
   869ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   869f0:	f107 0801 	add.w	r8, r7, #1
   869f4:	4297      	cmp	r7, r2
   869f6:	703b      	strb	r3, [r7, #0]
   869f8:	4645      	mov	r5, r8
   869fa:	f000 830b 	beq.w	87014 <_dtoa_r+0xc14>
   869fe:	4649      	mov	r1, r9
   86a00:	2300      	movs	r3, #0
   86a02:	220a      	movs	r2, #10
   86a04:	4620      	mov	r0, r4
   86a06:	f000 fffd 	bl	87a04 <__multadd>
   86a0a:	455e      	cmp	r6, fp
   86a0c:	4681      	mov	r9, r0
   86a0e:	4631      	mov	r1, r6
   86a10:	f04f 0300 	mov.w	r3, #0
   86a14:	f04f 020a 	mov.w	r2, #10
   86a18:	4620      	mov	r0, r4
   86a1a:	f000 81e9 	beq.w	86df0 <_dtoa_r+0x9f0>
   86a1e:	f000 fff1 	bl	87a04 <__multadd>
   86a22:	4659      	mov	r1, fp
   86a24:	4606      	mov	r6, r0
   86a26:	2300      	movs	r3, #0
   86a28:	220a      	movs	r2, #10
   86a2a:	4620      	mov	r0, r4
   86a2c:	f000 ffea 	bl	87a04 <__multadd>
   86a30:	4647      	mov	r7, r8
   86a32:	4683      	mov	fp, r0
   86a34:	e7a3      	b.n	8697e <_dtoa_r+0x57e>
   86a36:	201c      	movs	r0, #28
   86a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86a3a:	4405      	add	r5, r0
   86a3c:	4403      	add	r3, r0
   86a3e:	930a      	str	r3, [sp, #40]	; 0x28
   86a40:	9b08      	ldr	r3, [sp, #32]
   86a42:	4403      	add	r3, r0
   86a44:	9308      	str	r3, [sp, #32]
   86a46:	e763      	b.n	86910 <_dtoa_r+0x510>
   86a48:	4641      	mov	r1, r8
   86a4a:	4648      	mov	r0, r9
   86a4c:	f001 f9a8 	bl	87da0 <__mcmp>
   86a50:	2800      	cmp	r0, #0
   86a52:	f6bf af73 	bge.w	8693c <_dtoa_r+0x53c>
   86a56:	9f02      	ldr	r7, [sp, #8]
   86a58:	4649      	mov	r1, r9
   86a5a:	2300      	movs	r3, #0
   86a5c:	220a      	movs	r2, #10
   86a5e:	4620      	mov	r0, r4
   86a60:	3f01      	subs	r7, #1
   86a62:	9702      	str	r7, [sp, #8]
   86a64:	f000 ffce 	bl	87a04 <__multadd>
   86a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86a6a:	4681      	mov	r9, r0
   86a6c:	2b00      	cmp	r3, #0
   86a6e:	f040 83b5 	bne.w	871dc <_dtoa_r+0xddc>
   86a72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86a74:	2b00      	cmp	r3, #0
   86a76:	f340 83be 	ble.w	871f6 <_dtoa_r+0xdf6>
   86a7a:	9307      	str	r3, [sp, #28]
   86a7c:	f8dd a010 	ldr.w	sl, [sp, #16]
   86a80:	9f07      	ldr	r7, [sp, #28]
   86a82:	4655      	mov	r5, sl
   86a84:	e006      	b.n	86a94 <_dtoa_r+0x694>
   86a86:	4649      	mov	r1, r9
   86a88:	2300      	movs	r3, #0
   86a8a:	220a      	movs	r2, #10
   86a8c:	4620      	mov	r0, r4
   86a8e:	f000 ffb9 	bl	87a04 <__multadd>
   86a92:	4681      	mov	r9, r0
   86a94:	4641      	mov	r1, r8
   86a96:	4648      	mov	r0, r9
   86a98:	f7ff fc1e 	bl	862d8 <quorem>
   86a9c:	3030      	adds	r0, #48	; 0x30
   86a9e:	f805 0b01 	strb.w	r0, [r5], #1
   86aa2:	eba5 030a 	sub.w	r3, r5, sl
   86aa6:	42bb      	cmp	r3, r7
   86aa8:	dbed      	blt.n	86a86 <_dtoa_r+0x686>
   86aaa:	9b04      	ldr	r3, [sp, #16]
   86aac:	9a07      	ldr	r2, [sp, #28]
   86aae:	4682      	mov	sl, r0
   86ab0:	2a01      	cmp	r2, #1
   86ab2:	bfac      	ite	ge
   86ab4:	189b      	addge	r3, r3, r2
   86ab6:	3301      	addlt	r3, #1
   86ab8:	f04f 0b00 	mov.w	fp, #0
   86abc:	461d      	mov	r5, r3
   86abe:	4649      	mov	r1, r9
   86ac0:	2201      	movs	r2, #1
   86ac2:	4620      	mov	r0, r4
   86ac4:	f001 f91c 	bl	87d00 <__lshift>
   86ac8:	4641      	mov	r1, r8
   86aca:	4681      	mov	r9, r0
   86acc:	f001 f968 	bl	87da0 <__mcmp>
   86ad0:	2800      	cmp	r0, #0
   86ad2:	f340 823f 	ble.w	86f54 <_dtoa_r+0xb54>
   86ad6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   86ada:	1e6b      	subs	r3, r5, #1
   86adc:	9904      	ldr	r1, [sp, #16]
   86ade:	e004      	b.n	86aea <_dtoa_r+0x6ea>
   86ae0:	428b      	cmp	r3, r1
   86ae2:	f000 81ae 	beq.w	86e42 <_dtoa_r+0xa42>
   86ae6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   86aea:	2a39      	cmp	r2, #57	; 0x39
   86aec:	f103 0501 	add.w	r5, r3, #1
   86af0:	d0f6      	beq.n	86ae0 <_dtoa_r+0x6e0>
   86af2:	3201      	adds	r2, #1
   86af4:	701a      	strb	r2, [r3, #0]
   86af6:	4641      	mov	r1, r8
   86af8:	4620      	mov	r0, r4
   86afa:	f000 ff79 	bl	879f0 <_Bfree>
   86afe:	2e00      	cmp	r6, #0
   86b00:	f43f ae3d 	beq.w	8677e <_dtoa_r+0x37e>
   86b04:	f1bb 0f00 	cmp.w	fp, #0
   86b08:	d005      	beq.n	86b16 <_dtoa_r+0x716>
   86b0a:	45b3      	cmp	fp, r6
   86b0c:	d003      	beq.n	86b16 <_dtoa_r+0x716>
   86b0e:	4659      	mov	r1, fp
   86b10:	4620      	mov	r0, r4
   86b12:	f000 ff6d 	bl	879f0 <_Bfree>
   86b16:	4631      	mov	r1, r6
   86b18:	4620      	mov	r0, r4
   86b1a:	f000 ff69 	bl	879f0 <_Bfree>
   86b1e:	e62e      	b.n	8677e <_dtoa_r+0x37e>
   86b20:	2300      	movs	r3, #0
   86b22:	930b      	str	r3, [sp, #44]	; 0x2c
   86b24:	9b02      	ldr	r3, [sp, #8]
   86b26:	9a25      	ldr	r2, [sp, #148]	; 0x94
   86b28:	4413      	add	r3, r2
   86b2a:	930f      	str	r3, [sp, #60]	; 0x3c
   86b2c:	3301      	adds	r3, #1
   86b2e:	2b01      	cmp	r3, #1
   86b30:	461f      	mov	r7, r3
   86b32:	461e      	mov	r6, r3
   86b34:	bfb8      	it	lt
   86b36:	2701      	movlt	r7, #1
   86b38:	9307      	str	r3, [sp, #28]
   86b3a:	2100      	movs	r1, #0
   86b3c:	2f17      	cmp	r7, #23
   86b3e:	6461      	str	r1, [r4, #68]	; 0x44
   86b40:	d90a      	bls.n	86b58 <_dtoa_r+0x758>
   86b42:	2201      	movs	r2, #1
   86b44:	2304      	movs	r3, #4
   86b46:	005b      	lsls	r3, r3, #1
   86b48:	f103 0014 	add.w	r0, r3, #20
   86b4c:	4287      	cmp	r7, r0
   86b4e:	4611      	mov	r1, r2
   86b50:	f102 0201 	add.w	r2, r2, #1
   86b54:	d2f7      	bcs.n	86b46 <_dtoa_r+0x746>
   86b56:	6461      	str	r1, [r4, #68]	; 0x44
   86b58:	4620      	mov	r0, r4
   86b5a:	f000 ff23 	bl	879a4 <_Balloc>
   86b5e:	2e0e      	cmp	r6, #14
   86b60:	9004      	str	r0, [sp, #16]
   86b62:	6420      	str	r0, [r4, #64]	; 0x40
   86b64:	f63f ad47 	bhi.w	865f6 <_dtoa_r+0x1f6>
   86b68:	2d00      	cmp	r5, #0
   86b6a:	f43f ad44 	beq.w	865f6 <_dtoa_r+0x1f6>
   86b6e:	9902      	ldr	r1, [sp, #8]
   86b70:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   86b74:	2900      	cmp	r1, #0
   86b76:	f340 8203 	ble.w	86f80 <_dtoa_r+0xb80>
   86b7a:	4bb9      	ldr	r3, [pc, #740]	; (86e60 <_dtoa_r+0xa60>)
   86b7c:	f001 020f 	and.w	r2, r1, #15
   86b80:	110d      	asrs	r5, r1, #4
   86b82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   86b86:	06e9      	lsls	r1, r5, #27
   86b88:	e9d3 6700 	ldrd	r6, r7, [r3]
   86b8c:	f140 81af 	bpl.w	86eee <_dtoa_r+0xaee>
   86b90:	4bb4      	ldr	r3, [pc, #720]	; (86e64 <_dtoa_r+0xa64>)
   86b92:	4650      	mov	r0, sl
   86b94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   86b98:	4659      	mov	r1, fp
   86b9a:	f002 f95f 	bl	88e5c <__aeabi_ddiv>
   86b9e:	f04f 0a03 	mov.w	sl, #3
   86ba2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   86ba6:	f005 050f 	and.w	r5, r5, #15
   86baa:	b18d      	cbz	r5, 86bd0 <_dtoa_r+0x7d0>
   86bac:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 86e64 <_dtoa_r+0xa64>
   86bb0:	07ea      	lsls	r2, r5, #31
   86bb2:	d509      	bpl.n	86bc8 <_dtoa_r+0x7c8>
   86bb4:	e9d8 2300 	ldrd	r2, r3, [r8]
   86bb8:	4630      	mov	r0, r6
   86bba:	4639      	mov	r1, r7
   86bbc:	f002 f824 	bl	88c08 <__aeabi_dmul>
   86bc0:	4606      	mov	r6, r0
   86bc2:	460f      	mov	r7, r1
   86bc4:	f10a 0a01 	add.w	sl, sl, #1
   86bc8:	106d      	asrs	r5, r5, #1
   86bca:	f108 0808 	add.w	r8, r8, #8
   86bce:	d1ef      	bne.n	86bb0 <_dtoa_r+0x7b0>
   86bd0:	463b      	mov	r3, r7
   86bd2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   86bd6:	4632      	mov	r2, r6
   86bd8:	f002 f940 	bl	88e5c <__aeabi_ddiv>
   86bdc:	4607      	mov	r7, r0
   86bde:	4688      	mov	r8, r1
   86be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86be2:	b143      	cbz	r3, 86bf6 <_dtoa_r+0x7f6>
   86be4:	2200      	movs	r2, #0
   86be6:	4ba0      	ldr	r3, [pc, #640]	; (86e68 <_dtoa_r+0xa68>)
   86be8:	4638      	mov	r0, r7
   86bea:	4641      	mov	r1, r8
   86bec:	f002 fa7e 	bl	890ec <__aeabi_dcmplt>
   86bf0:	2800      	cmp	r0, #0
   86bf2:	f040 8287 	bne.w	87104 <_dtoa_r+0xd04>
   86bf6:	4650      	mov	r0, sl
   86bf8:	f001 ffa0 	bl	88b3c <__aeabi_i2d>
   86bfc:	463a      	mov	r2, r7
   86bfe:	4643      	mov	r3, r8
   86c00:	f002 f802 	bl	88c08 <__aeabi_dmul>
   86c04:	4b99      	ldr	r3, [pc, #612]	; (86e6c <_dtoa_r+0xa6c>)
   86c06:	2200      	movs	r2, #0
   86c08:	f001 fe4c 	bl	888a4 <__adddf3>
   86c0c:	9b07      	ldr	r3, [sp, #28]
   86c0e:	4605      	mov	r5, r0
   86c10:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   86c14:	2b00      	cmp	r3, #0
   86c16:	f000 813f 	beq.w	86e98 <_dtoa_r+0xa98>
   86c1a:	9b02      	ldr	r3, [sp, #8]
   86c1c:	9315      	str	r3, [sp, #84]	; 0x54
   86c1e:	9b07      	ldr	r3, [sp, #28]
   86c20:	9312      	str	r3, [sp, #72]	; 0x48
   86c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86c24:	2b00      	cmp	r3, #0
   86c26:	f000 81fb 	beq.w	87020 <_dtoa_r+0xc20>
   86c2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86c2c:	4b8c      	ldr	r3, [pc, #560]	; (86e60 <_dtoa_r+0xa60>)
   86c2e:	2000      	movs	r0, #0
   86c30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   86c34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   86c38:	498d      	ldr	r1, [pc, #564]	; (86e70 <_dtoa_r+0xa70>)
   86c3a:	f002 f90f 	bl	88e5c <__aeabi_ddiv>
   86c3e:	462a      	mov	r2, r5
   86c40:	4633      	mov	r3, r6
   86c42:	f001 fe2d 	bl	888a0 <__aeabi_dsub>
   86c46:	4682      	mov	sl, r0
   86c48:	468b      	mov	fp, r1
   86c4a:	4638      	mov	r0, r7
   86c4c:	4641      	mov	r1, r8
   86c4e:	f002 fa8b 	bl	89168 <__aeabi_d2iz>
   86c52:	4605      	mov	r5, r0
   86c54:	f001 ff72 	bl	88b3c <__aeabi_i2d>
   86c58:	4602      	mov	r2, r0
   86c5a:	460b      	mov	r3, r1
   86c5c:	4638      	mov	r0, r7
   86c5e:	4641      	mov	r1, r8
   86c60:	f001 fe1e 	bl	888a0 <__aeabi_dsub>
   86c64:	3530      	adds	r5, #48	; 0x30
   86c66:	fa5f f885 	uxtb.w	r8, r5
   86c6a:	9d04      	ldr	r5, [sp, #16]
   86c6c:	4606      	mov	r6, r0
   86c6e:	460f      	mov	r7, r1
   86c70:	f885 8000 	strb.w	r8, [r5]
   86c74:	4602      	mov	r2, r0
   86c76:	460b      	mov	r3, r1
   86c78:	4650      	mov	r0, sl
   86c7a:	4659      	mov	r1, fp
   86c7c:	3501      	adds	r5, #1
   86c7e:	f002 fa53 	bl	89128 <__aeabi_dcmpgt>
   86c82:	2800      	cmp	r0, #0
   86c84:	d154      	bne.n	86d30 <_dtoa_r+0x930>
   86c86:	4632      	mov	r2, r6
   86c88:	463b      	mov	r3, r7
   86c8a:	2000      	movs	r0, #0
   86c8c:	4976      	ldr	r1, [pc, #472]	; (86e68 <_dtoa_r+0xa68>)
   86c8e:	f001 fe07 	bl	888a0 <__aeabi_dsub>
   86c92:	4602      	mov	r2, r0
   86c94:	460b      	mov	r3, r1
   86c96:	4650      	mov	r0, sl
   86c98:	4659      	mov	r1, fp
   86c9a:	f002 fa45 	bl	89128 <__aeabi_dcmpgt>
   86c9e:	2800      	cmp	r0, #0
   86ca0:	f040 8270 	bne.w	87184 <_dtoa_r+0xd84>
   86ca4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86ca6:	2a01      	cmp	r2, #1
   86ca8:	f000 8112 	beq.w	86ed0 <_dtoa_r+0xad0>
   86cac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86cae:	9a04      	ldr	r2, [sp, #16]
   86cb0:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   86cb4:	4413      	add	r3, r2
   86cb6:	4699      	mov	r9, r3
   86cb8:	e00f      	b.n	86cda <_dtoa_r+0x8da>
   86cba:	4632      	mov	r2, r6
   86cbc:	463b      	mov	r3, r7
   86cbe:	2000      	movs	r0, #0
   86cc0:	4969      	ldr	r1, [pc, #420]	; (86e68 <_dtoa_r+0xa68>)
   86cc2:	f001 fded 	bl	888a0 <__aeabi_dsub>
   86cc6:	4652      	mov	r2, sl
   86cc8:	465b      	mov	r3, fp
   86cca:	f002 fa0f 	bl	890ec <__aeabi_dcmplt>
   86cce:	2800      	cmp	r0, #0
   86cd0:	f040 8256 	bne.w	87180 <_dtoa_r+0xd80>
   86cd4:	454d      	cmp	r5, r9
   86cd6:	f000 80f9 	beq.w	86ecc <_dtoa_r+0xacc>
   86cda:	4650      	mov	r0, sl
   86cdc:	4659      	mov	r1, fp
   86cde:	2200      	movs	r2, #0
   86ce0:	4b64      	ldr	r3, [pc, #400]	; (86e74 <_dtoa_r+0xa74>)
   86ce2:	f001 ff91 	bl	88c08 <__aeabi_dmul>
   86ce6:	2200      	movs	r2, #0
   86ce8:	4b62      	ldr	r3, [pc, #392]	; (86e74 <_dtoa_r+0xa74>)
   86cea:	4682      	mov	sl, r0
   86cec:	468b      	mov	fp, r1
   86cee:	4630      	mov	r0, r6
   86cf0:	4639      	mov	r1, r7
   86cf2:	f001 ff89 	bl	88c08 <__aeabi_dmul>
   86cf6:	460f      	mov	r7, r1
   86cf8:	4606      	mov	r6, r0
   86cfa:	f002 fa35 	bl	89168 <__aeabi_d2iz>
   86cfe:	4680      	mov	r8, r0
   86d00:	f001 ff1c 	bl	88b3c <__aeabi_i2d>
   86d04:	4602      	mov	r2, r0
   86d06:	460b      	mov	r3, r1
   86d08:	4630      	mov	r0, r6
   86d0a:	4639      	mov	r1, r7
   86d0c:	f001 fdc8 	bl	888a0 <__aeabi_dsub>
   86d10:	f108 0830 	add.w	r8, r8, #48	; 0x30
   86d14:	fa5f f888 	uxtb.w	r8, r8
   86d18:	f805 8b01 	strb.w	r8, [r5], #1
   86d1c:	4652      	mov	r2, sl
   86d1e:	465b      	mov	r3, fp
   86d20:	4606      	mov	r6, r0
   86d22:	460f      	mov	r7, r1
   86d24:	f002 f9e2 	bl	890ec <__aeabi_dcmplt>
   86d28:	2800      	cmp	r0, #0
   86d2a:	d0c6      	beq.n	86cba <_dtoa_r+0x8ba>
   86d2c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   86d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86d32:	9302      	str	r3, [sp, #8]
   86d34:	e523      	b.n	8677e <_dtoa_r+0x37e>
   86d36:	2300      	movs	r3, #0
   86d38:	930b      	str	r3, [sp, #44]	; 0x2c
   86d3a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86d3c:	2b00      	cmp	r3, #0
   86d3e:	f340 80dd 	ble.w	86efc <_dtoa_r+0xafc>
   86d42:	461f      	mov	r7, r3
   86d44:	461e      	mov	r6, r3
   86d46:	930f      	str	r3, [sp, #60]	; 0x3c
   86d48:	9307      	str	r3, [sp, #28]
   86d4a:	e6f6      	b.n	86b3a <_dtoa_r+0x73a>
   86d4c:	2301      	movs	r3, #1
   86d4e:	930b      	str	r3, [sp, #44]	; 0x2c
   86d50:	e7f3      	b.n	86d3a <_dtoa_r+0x93a>
   86d52:	f1ba 0f00 	cmp.w	sl, #0
   86d56:	f47f ada7 	bne.w	868a8 <_dtoa_r+0x4a8>
   86d5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   86d5e:	2b00      	cmp	r3, #0
   86d60:	f47f adbc 	bne.w	868dc <_dtoa_r+0x4dc>
   86d64:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   86d68:	0d3f      	lsrs	r7, r7, #20
   86d6a:	053f      	lsls	r7, r7, #20
   86d6c:	2f00      	cmp	r7, #0
   86d6e:	f000 820d 	beq.w	8718c <_dtoa_r+0xd8c>
   86d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86d74:	3301      	adds	r3, #1
   86d76:	930a      	str	r3, [sp, #40]	; 0x28
   86d78:	9b08      	ldr	r3, [sp, #32]
   86d7a:	3301      	adds	r3, #1
   86d7c:	9308      	str	r3, [sp, #32]
   86d7e:	2301      	movs	r3, #1
   86d80:	930c      	str	r3, [sp, #48]	; 0x30
   86d82:	e5ad      	b.n	868e0 <_dtoa_r+0x4e0>
   86d84:	9b07      	ldr	r3, [sp, #28]
   86d86:	2b00      	cmp	r3, #0
   86d88:	f73f ac48 	bgt.w	8661c <_dtoa_r+0x21c>
   86d8c:	f040 8222 	bne.w	871d4 <_dtoa_r+0xdd4>
   86d90:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   86d94:	2200      	movs	r2, #0
   86d96:	4b38      	ldr	r3, [pc, #224]	; (86e78 <_dtoa_r+0xa78>)
   86d98:	f001 ff36 	bl	88c08 <__aeabi_dmul>
   86d9c:	4652      	mov	r2, sl
   86d9e:	465b      	mov	r3, fp
   86da0:	f002 f9b8 	bl	89114 <__aeabi_dcmpge>
   86da4:	f8dd 801c 	ldr.w	r8, [sp, #28]
   86da8:	4646      	mov	r6, r8
   86daa:	2800      	cmp	r0, #0
   86dac:	d041      	beq.n	86e32 <_dtoa_r+0xa32>
   86dae:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86db0:	9d04      	ldr	r5, [sp, #16]
   86db2:	43db      	mvns	r3, r3
   86db4:	9302      	str	r3, [sp, #8]
   86db6:	4641      	mov	r1, r8
   86db8:	4620      	mov	r0, r4
   86dba:	f000 fe19 	bl	879f0 <_Bfree>
   86dbe:	2e00      	cmp	r6, #0
   86dc0:	f43f acdd 	beq.w	8677e <_dtoa_r+0x37e>
   86dc4:	e6a7      	b.n	86b16 <_dtoa_r+0x716>
   86dc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86dc8:	4649      	mov	r1, r9
   86dca:	4620      	mov	r0, r4
   86dcc:	f000 ff48 	bl	87c60 <__pow5mult>
   86dd0:	4681      	mov	r9, r0
   86dd2:	e557      	b.n	86884 <_dtoa_r+0x484>
   86dd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   86dd6:	2a00      	cmp	r2, #0
   86dd8:	f000 8188 	beq.w	870ec <_dtoa_r+0xcec>
   86ddc:	f203 4333 	addw	r3, r3, #1075	; 0x433
   86de0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   86de2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   86de4:	e4f2      	b.n	867cc <_dtoa_r+0x3cc>
   86de6:	f1ba 0f00 	cmp.w	sl, #0
   86dea:	f47f ad77 	bne.w	868dc <_dtoa_r+0x4dc>
   86dee:	e7b4      	b.n	86d5a <_dtoa_r+0x95a>
   86df0:	f000 fe08 	bl	87a04 <__multadd>
   86df4:	4647      	mov	r7, r8
   86df6:	4606      	mov	r6, r0
   86df8:	4683      	mov	fp, r0
   86dfa:	e5c0      	b.n	8697e <_dtoa_r+0x57e>
   86dfc:	4601      	mov	r1, r0
   86dfe:	4620      	mov	r0, r4
   86e00:	9308      	str	r3, [sp, #32]
   86e02:	f000 fdf5 	bl	879f0 <_Bfree>
   86e06:	2201      	movs	r2, #1
   86e08:	9b08      	ldr	r3, [sp, #32]
   86e0a:	e5e2      	b.n	869d2 <_dtoa_r+0x5d2>
   86e0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86e0e:	2b02      	cmp	r3, #2
   86e10:	f77f ad98 	ble.w	86944 <_dtoa_r+0x544>
   86e14:	9b07      	ldr	r3, [sp, #28]
   86e16:	2b00      	cmp	r3, #0
   86e18:	d1c9      	bne.n	86dae <_dtoa_r+0x9ae>
   86e1a:	4641      	mov	r1, r8
   86e1c:	2205      	movs	r2, #5
   86e1e:	4620      	mov	r0, r4
   86e20:	f000 fdf0 	bl	87a04 <__multadd>
   86e24:	4601      	mov	r1, r0
   86e26:	4680      	mov	r8, r0
   86e28:	4648      	mov	r0, r9
   86e2a:	f000 ffb9 	bl	87da0 <__mcmp>
   86e2e:	2800      	cmp	r0, #0
   86e30:	ddbd      	ble.n	86dae <_dtoa_r+0x9ae>
   86e32:	2331      	movs	r3, #49	; 0x31
   86e34:	9a02      	ldr	r2, [sp, #8]
   86e36:	9904      	ldr	r1, [sp, #16]
   86e38:	3201      	adds	r2, #1
   86e3a:	9202      	str	r2, [sp, #8]
   86e3c:	700b      	strb	r3, [r1, #0]
   86e3e:	1c4d      	adds	r5, r1, #1
   86e40:	e7b9      	b.n	86db6 <_dtoa_r+0x9b6>
   86e42:	2331      	movs	r3, #49	; 0x31
   86e44:	9a02      	ldr	r2, [sp, #8]
   86e46:	3201      	adds	r2, #1
   86e48:	9202      	str	r2, [sp, #8]
   86e4a:	9a04      	ldr	r2, [sp, #16]
   86e4c:	7013      	strb	r3, [r2, #0]
   86e4e:	e652      	b.n	86af6 <_dtoa_r+0x6f6>
   86e50:	2301      	movs	r3, #1
   86e52:	930b      	str	r3, [sp, #44]	; 0x2c
   86e54:	e666      	b.n	86b24 <_dtoa_r+0x724>
   86e56:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   86e5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86e5c:	e48f      	b.n	8677e <_dtoa_r+0x37e>
   86e5e:	bf00      	nop
   86e60:	0008a888 	.word	0x0008a888
   86e64:	0008a860 	.word	0x0008a860
   86e68:	3ff00000 	.word	0x3ff00000
   86e6c:	401c0000 	.word	0x401c0000
   86e70:	3fe00000 	.word	0x3fe00000
   86e74:	40240000 	.word	0x40240000
   86e78:	40140000 	.word	0x40140000
   86e7c:	4650      	mov	r0, sl
   86e7e:	f001 fe5d 	bl	88b3c <__aeabi_i2d>
   86e82:	463a      	mov	r2, r7
   86e84:	4643      	mov	r3, r8
   86e86:	f001 febf 	bl	88c08 <__aeabi_dmul>
   86e8a:	2200      	movs	r2, #0
   86e8c:	4bc1      	ldr	r3, [pc, #772]	; (87194 <_dtoa_r+0xd94>)
   86e8e:	f001 fd09 	bl	888a4 <__adddf3>
   86e92:	4605      	mov	r5, r0
   86e94:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   86e98:	4641      	mov	r1, r8
   86e9a:	2200      	movs	r2, #0
   86e9c:	4bbe      	ldr	r3, [pc, #760]	; (87198 <_dtoa_r+0xd98>)
   86e9e:	4638      	mov	r0, r7
   86ea0:	f001 fcfe 	bl	888a0 <__aeabi_dsub>
   86ea4:	462a      	mov	r2, r5
   86ea6:	4633      	mov	r3, r6
   86ea8:	4682      	mov	sl, r0
   86eaa:	468b      	mov	fp, r1
   86eac:	f002 f93c 	bl	89128 <__aeabi_dcmpgt>
   86eb0:	4680      	mov	r8, r0
   86eb2:	2800      	cmp	r0, #0
   86eb4:	f040 8110 	bne.w	870d8 <_dtoa_r+0xcd8>
   86eb8:	462a      	mov	r2, r5
   86eba:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   86ebe:	4650      	mov	r0, sl
   86ec0:	4659      	mov	r1, fp
   86ec2:	f002 f913 	bl	890ec <__aeabi_dcmplt>
   86ec6:	b118      	cbz	r0, 86ed0 <_dtoa_r+0xad0>
   86ec8:	4646      	mov	r6, r8
   86eca:	e770      	b.n	86dae <_dtoa_r+0x9ae>
   86ecc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   86ed0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   86ed4:	f7ff bb8f 	b.w	865f6 <_dtoa_r+0x1f6>
   86ed8:	9804      	ldr	r0, [sp, #16]
   86eda:	f7ff bac0 	b.w	8645e <_dtoa_r+0x5e>
   86ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86ee0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86ee2:	1afb      	subs	r3, r7, r3
   86ee4:	441a      	add	r2, r3
   86ee6:	970c      	str	r7, [sp, #48]	; 0x30
   86ee8:	920d      	str	r2, [sp, #52]	; 0x34
   86eea:	2700      	movs	r7, #0
   86eec:	e468      	b.n	867c0 <_dtoa_r+0x3c0>
   86eee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   86ef2:	f04f 0a02 	mov.w	sl, #2
   86ef6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   86efa:	e656      	b.n	86baa <_dtoa_r+0x7aa>
   86efc:	2100      	movs	r1, #0
   86efe:	2301      	movs	r3, #1
   86f00:	4620      	mov	r0, r4
   86f02:	6461      	str	r1, [r4, #68]	; 0x44
   86f04:	9325      	str	r3, [sp, #148]	; 0x94
   86f06:	f000 fd4d 	bl	879a4 <_Balloc>
   86f0a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86f0c:	9004      	str	r0, [sp, #16]
   86f0e:	9307      	str	r3, [sp, #28]
   86f10:	9b25      	ldr	r3, [sp, #148]	; 0x94
   86f12:	6420      	str	r0, [r4, #64]	; 0x40
   86f14:	930f      	str	r3, [sp, #60]	; 0x3c
   86f16:	e627      	b.n	86b68 <_dtoa_r+0x768>
   86f18:	2a00      	cmp	r2, #0
   86f1a:	46d0      	mov	r8, sl
   86f1c:	f8cd b020 	str.w	fp, [sp, #32]
   86f20:	469a      	mov	sl, r3
   86f22:	dd11      	ble.n	86f48 <_dtoa_r+0xb48>
   86f24:	4649      	mov	r1, r9
   86f26:	2201      	movs	r2, #1
   86f28:	4620      	mov	r0, r4
   86f2a:	f000 fee9 	bl	87d00 <__lshift>
   86f2e:	4641      	mov	r1, r8
   86f30:	4681      	mov	r9, r0
   86f32:	f000 ff35 	bl	87da0 <__mcmp>
   86f36:	2800      	cmp	r0, #0
   86f38:	f340 8145 	ble.w	871c6 <_dtoa_r+0xdc6>
   86f3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   86f40:	f000 8105 	beq.w	8714e <_dtoa_r+0xd4e>
   86f44:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   86f48:	46b3      	mov	fp, r6
   86f4a:	f887 a000 	strb.w	sl, [r7]
   86f4e:	1c7d      	adds	r5, r7, #1
   86f50:	9e08      	ldr	r6, [sp, #32]
   86f52:	e5d0      	b.n	86af6 <_dtoa_r+0x6f6>
   86f54:	d104      	bne.n	86f60 <_dtoa_r+0xb60>
   86f56:	f01a 0f01 	tst.w	sl, #1
   86f5a:	d001      	beq.n	86f60 <_dtoa_r+0xb60>
   86f5c:	e5bb      	b.n	86ad6 <_dtoa_r+0x6d6>
   86f5e:	4615      	mov	r5, r2
   86f60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   86f64:	1e6a      	subs	r2, r5, #1
   86f66:	2b30      	cmp	r3, #48	; 0x30
   86f68:	d0f9      	beq.n	86f5e <_dtoa_r+0xb5e>
   86f6a:	e5c4      	b.n	86af6 <_dtoa_r+0x6f6>
   86f6c:	2230      	movs	r2, #48	; 0x30
   86f6e:	9904      	ldr	r1, [sp, #16]
   86f70:	700a      	strb	r2, [r1, #0]
   86f72:	9a02      	ldr	r2, [sp, #8]
   86f74:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   86f78:	3201      	adds	r2, #1
   86f7a:	9202      	str	r2, [sp, #8]
   86f7c:	f7ff bbfb 	b.w	86776 <_dtoa_r+0x376>
   86f80:	f000 80bb 	beq.w	870fa <_dtoa_r+0xcfa>
   86f84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   86f88:	9b02      	ldr	r3, [sp, #8]
   86f8a:	f04f 0a02 	mov.w	sl, #2
   86f8e:	425d      	negs	r5, r3
   86f90:	4b82      	ldr	r3, [pc, #520]	; (8719c <_dtoa_r+0xd9c>)
   86f92:	f005 020f 	and.w	r2, r5, #15
   86f96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   86f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   86f9e:	f001 fe33 	bl	88c08 <__aeabi_dmul>
   86fa2:	112d      	asrs	r5, r5, #4
   86fa4:	4607      	mov	r7, r0
   86fa6:	4688      	mov	r8, r1
   86fa8:	f43f ae1a 	beq.w	86be0 <_dtoa_r+0x7e0>
   86fac:	4e7c      	ldr	r6, [pc, #496]	; (871a0 <_dtoa_r+0xda0>)
   86fae:	07eb      	lsls	r3, r5, #31
   86fb0:	d509      	bpl.n	86fc6 <_dtoa_r+0xbc6>
   86fb2:	e9d6 2300 	ldrd	r2, r3, [r6]
   86fb6:	4638      	mov	r0, r7
   86fb8:	4641      	mov	r1, r8
   86fba:	f001 fe25 	bl	88c08 <__aeabi_dmul>
   86fbe:	4607      	mov	r7, r0
   86fc0:	4688      	mov	r8, r1
   86fc2:	f10a 0a01 	add.w	sl, sl, #1
   86fc6:	106d      	asrs	r5, r5, #1
   86fc8:	f106 0608 	add.w	r6, r6, #8
   86fcc:	d1ef      	bne.n	86fae <_dtoa_r+0xbae>
   86fce:	e607      	b.n	86be0 <_dtoa_r+0x7e0>
   86fd0:	6871      	ldr	r1, [r6, #4]
   86fd2:	4620      	mov	r0, r4
   86fd4:	f000 fce6 	bl	879a4 <_Balloc>
   86fd8:	4605      	mov	r5, r0
   86fda:	6933      	ldr	r3, [r6, #16]
   86fdc:	f106 010c 	add.w	r1, r6, #12
   86fe0:	3302      	adds	r3, #2
   86fe2:	009a      	lsls	r2, r3, #2
   86fe4:	300c      	adds	r0, #12
   86fe6:	f000 fc5b 	bl	878a0 <memcpy>
   86fea:	4629      	mov	r1, r5
   86fec:	2201      	movs	r2, #1
   86fee:	4620      	mov	r0, r4
   86ff0:	f000 fe86 	bl	87d00 <__lshift>
   86ff4:	9008      	str	r0, [sp, #32]
   86ff6:	e4b6      	b.n	86966 <_dtoa_r+0x566>
   86ff8:	2b39      	cmp	r3, #57	; 0x39
   86ffa:	f8cd b020 	str.w	fp, [sp, #32]
   86ffe:	46d0      	mov	r8, sl
   87000:	f000 80a5 	beq.w	8714e <_dtoa_r+0xd4e>
   87004:	f103 0a01 	add.w	sl, r3, #1
   87008:	46b3      	mov	fp, r6
   8700a:	f887 a000 	strb.w	sl, [r7]
   8700e:	1c7d      	adds	r5, r7, #1
   87010:	9e08      	ldr	r6, [sp, #32]
   87012:	e570      	b.n	86af6 <_dtoa_r+0x6f6>
   87014:	465a      	mov	r2, fp
   87016:	46d0      	mov	r8, sl
   87018:	46b3      	mov	fp, r6
   8701a:	469a      	mov	sl, r3
   8701c:	4616      	mov	r6, r2
   8701e:	e54e      	b.n	86abe <_dtoa_r+0x6be>
   87020:	9812      	ldr	r0, [sp, #72]	; 0x48
   87022:	495e      	ldr	r1, [pc, #376]	; (8719c <_dtoa_r+0xd9c>)
   87024:	462a      	mov	r2, r5
   87026:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8702a:	4633      	mov	r3, r6
   8702c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   87030:	f001 fdea 	bl	88c08 <__aeabi_dmul>
   87034:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   87038:	4638      	mov	r0, r7
   8703a:	4641      	mov	r1, r8
   8703c:	f002 f894 	bl	89168 <__aeabi_d2iz>
   87040:	4605      	mov	r5, r0
   87042:	f001 fd7b 	bl	88b3c <__aeabi_i2d>
   87046:	4602      	mov	r2, r0
   87048:	460b      	mov	r3, r1
   8704a:	4638      	mov	r0, r7
   8704c:	4641      	mov	r1, r8
   8704e:	f001 fc27 	bl	888a0 <__aeabi_dsub>
   87052:	4606      	mov	r6, r0
   87054:	9812      	ldr	r0, [sp, #72]	; 0x48
   87056:	9a04      	ldr	r2, [sp, #16]
   87058:	3530      	adds	r5, #48	; 0x30
   8705a:	2801      	cmp	r0, #1
   8705c:	7015      	strb	r5, [r2, #0]
   8705e:	460f      	mov	r7, r1
   87060:	f102 0501 	add.w	r5, r2, #1
   87064:	d026      	beq.n	870b4 <_dtoa_r+0xcb4>
   87066:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87068:	9a04      	ldr	r2, [sp, #16]
   8706a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8706e:	4413      	add	r3, r2
   87070:	f04f 0a00 	mov.w	sl, #0
   87074:	4699      	mov	r9, r3
   87076:	f8df b130 	ldr.w	fp, [pc, #304]	; 871a8 <_dtoa_r+0xda8>
   8707a:	4652      	mov	r2, sl
   8707c:	465b      	mov	r3, fp
   8707e:	4630      	mov	r0, r6
   87080:	4639      	mov	r1, r7
   87082:	f001 fdc1 	bl	88c08 <__aeabi_dmul>
   87086:	460f      	mov	r7, r1
   87088:	4606      	mov	r6, r0
   8708a:	f002 f86d 	bl	89168 <__aeabi_d2iz>
   8708e:	4680      	mov	r8, r0
   87090:	f001 fd54 	bl	88b3c <__aeabi_i2d>
   87094:	4602      	mov	r2, r0
   87096:	460b      	mov	r3, r1
   87098:	4630      	mov	r0, r6
   8709a:	4639      	mov	r1, r7
   8709c:	f001 fc00 	bl	888a0 <__aeabi_dsub>
   870a0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   870a4:	f805 8b01 	strb.w	r8, [r5], #1
   870a8:	454d      	cmp	r5, r9
   870aa:	4606      	mov	r6, r0
   870ac:	460f      	mov	r7, r1
   870ae:	d1e4      	bne.n	8707a <_dtoa_r+0xc7a>
   870b0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   870b4:	2200      	movs	r2, #0
   870b6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   870ba:	4b3a      	ldr	r3, [pc, #232]	; (871a4 <_dtoa_r+0xda4>)
   870bc:	f001 fbf2 	bl	888a4 <__adddf3>
   870c0:	4632      	mov	r2, r6
   870c2:	463b      	mov	r3, r7
   870c4:	f002 f812 	bl	890ec <__aeabi_dcmplt>
   870c8:	2800      	cmp	r0, #0
   870ca:	d046      	beq.n	8715a <_dtoa_r+0xd5a>
   870cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   870ce:	9302      	str	r3, [sp, #8]
   870d0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   870d4:	f7ff bb42 	b.w	8675c <_dtoa_r+0x35c>
   870d8:	f04f 0800 	mov.w	r8, #0
   870dc:	4646      	mov	r6, r8
   870de:	e6a8      	b.n	86e32 <_dtoa_r+0xa32>
   870e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   870e2:	9a07      	ldr	r2, [sp, #28]
   870e4:	1a9d      	subs	r5, r3, r2
   870e6:	2300      	movs	r3, #0
   870e8:	f7ff bb70 	b.w	867cc <_dtoa_r+0x3cc>
   870ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
   870ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   870f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   870f4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   870f6:	f7ff bb69 	b.w	867cc <_dtoa_r+0x3cc>
   870fa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   870fe:	f04f 0a02 	mov.w	sl, #2
   87102:	e56d      	b.n	86be0 <_dtoa_r+0x7e0>
   87104:	9b07      	ldr	r3, [sp, #28]
   87106:	2b00      	cmp	r3, #0
   87108:	f43f aeb8 	beq.w	86e7c <_dtoa_r+0xa7c>
   8710c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8710e:	2b00      	cmp	r3, #0
   87110:	f77f aede 	ble.w	86ed0 <_dtoa_r+0xad0>
   87114:	2200      	movs	r2, #0
   87116:	4b24      	ldr	r3, [pc, #144]	; (871a8 <_dtoa_r+0xda8>)
   87118:	4638      	mov	r0, r7
   8711a:	4641      	mov	r1, r8
   8711c:	f001 fd74 	bl	88c08 <__aeabi_dmul>
   87120:	4607      	mov	r7, r0
   87122:	4688      	mov	r8, r1
   87124:	f10a 0001 	add.w	r0, sl, #1
   87128:	f001 fd08 	bl	88b3c <__aeabi_i2d>
   8712c:	463a      	mov	r2, r7
   8712e:	4643      	mov	r3, r8
   87130:	f001 fd6a 	bl	88c08 <__aeabi_dmul>
   87134:	2200      	movs	r2, #0
   87136:	4b17      	ldr	r3, [pc, #92]	; (87194 <_dtoa_r+0xd94>)
   87138:	f001 fbb4 	bl	888a4 <__adddf3>
   8713c:	9a02      	ldr	r2, [sp, #8]
   8713e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87140:	3a01      	subs	r2, #1
   87142:	4605      	mov	r5, r0
   87144:	9215      	str	r2, [sp, #84]	; 0x54
   87146:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8714a:	9312      	str	r3, [sp, #72]	; 0x48
   8714c:	e569      	b.n	86c22 <_dtoa_r+0x822>
   8714e:	2239      	movs	r2, #57	; 0x39
   87150:	46b3      	mov	fp, r6
   87152:	703a      	strb	r2, [r7, #0]
   87154:	9e08      	ldr	r6, [sp, #32]
   87156:	1c7d      	adds	r5, r7, #1
   87158:	e4bf      	b.n	86ada <_dtoa_r+0x6da>
   8715a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   8715e:	2000      	movs	r0, #0
   87160:	4910      	ldr	r1, [pc, #64]	; (871a4 <_dtoa_r+0xda4>)
   87162:	f001 fb9d 	bl	888a0 <__aeabi_dsub>
   87166:	4632      	mov	r2, r6
   87168:	463b      	mov	r3, r7
   8716a:	f001 ffdd 	bl	89128 <__aeabi_dcmpgt>
   8716e:	b908      	cbnz	r0, 87174 <_dtoa_r+0xd74>
   87170:	e6ae      	b.n	86ed0 <_dtoa_r+0xad0>
   87172:	4615      	mov	r5, r2
   87174:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   87178:	1e6a      	subs	r2, r5, #1
   8717a:	2b30      	cmp	r3, #48	; 0x30
   8717c:	d0f9      	beq.n	87172 <_dtoa_r+0xd72>
   8717e:	e5d7      	b.n	86d30 <_dtoa_r+0x930>
   87180:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87184:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87186:	9302      	str	r3, [sp, #8]
   87188:	f7ff bae8 	b.w	8675c <_dtoa_r+0x35c>
   8718c:	970c      	str	r7, [sp, #48]	; 0x30
   8718e:	f7ff bba7 	b.w	868e0 <_dtoa_r+0x4e0>
   87192:	bf00      	nop
   87194:	401c0000 	.word	0x401c0000
   87198:	40140000 	.word	0x40140000
   8719c:	0008a888 	.word	0x0008a888
   871a0:	0008a860 	.word	0x0008a860
   871a4:	3fe00000 	.word	0x3fe00000
   871a8:	40240000 	.word	0x40240000
   871ac:	2b39      	cmp	r3, #57	; 0x39
   871ae:	f8cd b020 	str.w	fp, [sp, #32]
   871b2:	46d0      	mov	r8, sl
   871b4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   871b8:	469a      	mov	sl, r3
   871ba:	d0c8      	beq.n	8714e <_dtoa_r+0xd4e>
   871bc:	f1bb 0f00 	cmp.w	fp, #0
   871c0:	f73f aec0 	bgt.w	86f44 <_dtoa_r+0xb44>
   871c4:	e6c0      	b.n	86f48 <_dtoa_r+0xb48>
   871c6:	f47f aebf 	bne.w	86f48 <_dtoa_r+0xb48>
   871ca:	f01a 0f01 	tst.w	sl, #1
   871ce:	f43f aebb 	beq.w	86f48 <_dtoa_r+0xb48>
   871d2:	e6b3      	b.n	86f3c <_dtoa_r+0xb3c>
   871d4:	f04f 0800 	mov.w	r8, #0
   871d8:	4646      	mov	r6, r8
   871da:	e5e8      	b.n	86dae <_dtoa_r+0x9ae>
   871dc:	4631      	mov	r1, r6
   871de:	2300      	movs	r3, #0
   871e0:	220a      	movs	r2, #10
   871e2:	4620      	mov	r0, r4
   871e4:	f000 fc0e 	bl	87a04 <__multadd>
   871e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   871ea:	4606      	mov	r6, r0
   871ec:	2b00      	cmp	r3, #0
   871ee:	dd07      	ble.n	87200 <_dtoa_r+0xe00>
   871f0:	9307      	str	r3, [sp, #28]
   871f2:	f7ff bbab 	b.w	8694c <_dtoa_r+0x54c>
   871f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   871f8:	2b02      	cmp	r3, #2
   871fa:	dc1f      	bgt.n	8723c <_dtoa_r+0xe3c>
   871fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   871fe:	e43c      	b.n	86a7a <_dtoa_r+0x67a>
   87200:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87202:	2b02      	cmp	r3, #2
   87204:	dc1a      	bgt.n	8723c <_dtoa_r+0xe3c>
   87206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87208:	e7f2      	b.n	871f0 <_dtoa_r+0xdf0>
   8720a:	f43f ab81 	beq.w	86910 <_dtoa_r+0x510>
   8720e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   87212:	e411      	b.n	86a38 <_dtoa_r+0x638>
   87214:	2500      	movs	r5, #0
   87216:	4620      	mov	r0, r4
   87218:	6465      	str	r5, [r4, #68]	; 0x44
   8721a:	4629      	mov	r1, r5
   8721c:	f000 fbc2 	bl	879a4 <_Balloc>
   87220:	f04f 33ff 	mov.w	r3, #4294967295
   87224:	9307      	str	r3, [sp, #28]
   87226:	930f      	str	r3, [sp, #60]	; 0x3c
   87228:	2301      	movs	r3, #1
   8722a:	9004      	str	r0, [sp, #16]
   8722c:	9525      	str	r5, [sp, #148]	; 0x94
   8722e:	6420      	str	r0, [r4, #64]	; 0x40
   87230:	930b      	str	r3, [sp, #44]	; 0x2c
   87232:	f7ff b9e0 	b.w	865f6 <_dtoa_r+0x1f6>
   87236:	2501      	movs	r5, #1
   87238:	f7ff b9a8 	b.w	8658c <_dtoa_r+0x18c>
   8723c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8723e:	9307      	str	r3, [sp, #28]
   87240:	e5e8      	b.n	86e14 <_dtoa_r+0xa14>
   87242:	bf00      	nop

00087244 <__libc_fini_array>:
   87244:	b538      	push	{r3, r4, r5, lr}
   87246:	4c0a      	ldr	r4, [pc, #40]	; (87270 <__libc_fini_array+0x2c>)
   87248:	4d0a      	ldr	r5, [pc, #40]	; (87274 <__libc_fini_array+0x30>)
   8724a:	1b64      	subs	r4, r4, r5
   8724c:	10a4      	asrs	r4, r4, #2
   8724e:	d00a      	beq.n	87266 <__libc_fini_array+0x22>
   87250:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   87254:	3b01      	subs	r3, #1
   87256:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8725a:	3c01      	subs	r4, #1
   8725c:	f855 3904 	ldr.w	r3, [r5], #-4
   87260:	4798      	blx	r3
   87262:	2c00      	cmp	r4, #0
   87264:	d1f9      	bne.n	8725a <__libc_fini_array+0x16>
   87266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8726a:	f003 bc03 	b.w	8aa74 <_fini>
   8726e:	bf00      	nop
   87270:	0008aa84 	.word	0x0008aa84
   87274:	0008aa80 	.word	0x0008aa80

00087278 <__locale_ctype_ptr_l>:
   87278:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   8727c:	4770      	bx	lr
   8727e:	bf00      	nop

00087280 <_localeconv_r>:
   87280:	4a04      	ldr	r2, [pc, #16]	; (87294 <_localeconv_r+0x14>)
   87282:	4b05      	ldr	r3, [pc, #20]	; (87298 <_localeconv_r+0x18>)
   87284:	6812      	ldr	r2, [r2, #0]
   87286:	6b50      	ldr	r0, [r2, #52]	; 0x34
   87288:	2800      	cmp	r0, #0
   8728a:	bf08      	it	eq
   8728c:	4618      	moveq	r0, r3
   8728e:	30f0      	adds	r0, #240	; 0xf0
   87290:	4770      	bx	lr
   87292:	bf00      	nop
   87294:	2000062c 	.word	0x2000062c
   87298:	20000a5c 	.word	0x20000a5c

0008729c <__retarget_lock_acquire_recursive>:
   8729c:	4770      	bx	lr
   8729e:	bf00      	nop

000872a0 <__retarget_lock_release_recursive>:
   872a0:	4770      	bx	lr
   872a2:	bf00      	nop

000872a4 <_malloc_r>:
   872a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   872a8:	f101 060b 	add.w	r6, r1, #11
   872ac:	2e16      	cmp	r6, #22
   872ae:	b083      	sub	sp, #12
   872b0:	4605      	mov	r5, r0
   872b2:	f240 809e 	bls.w	873f2 <_malloc_r+0x14e>
   872b6:	f036 0607 	bics.w	r6, r6, #7
   872ba:	f100 80bd 	bmi.w	87438 <_malloc_r+0x194>
   872be:	42b1      	cmp	r1, r6
   872c0:	f200 80ba 	bhi.w	87438 <_malloc_r+0x194>
   872c4:	f000 fb62 	bl	8798c <__malloc_lock>
   872c8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   872cc:	f0c0 8285 	bcc.w	877da <_malloc_r+0x536>
   872d0:	0a73      	lsrs	r3, r6, #9
   872d2:	f000 80b8 	beq.w	87446 <_malloc_r+0x1a2>
   872d6:	2b04      	cmp	r3, #4
   872d8:	f200 816c 	bhi.w	875b4 <_malloc_r+0x310>
   872dc:	09b3      	lsrs	r3, r6, #6
   872de:	f103 0039 	add.w	r0, r3, #57	; 0x39
   872e2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   872e6:	00c1      	lsls	r1, r0, #3
   872e8:	4fb8      	ldr	r7, [pc, #736]	; (875cc <_malloc_r+0x328>)
   872ea:	4439      	add	r1, r7
   872ec:	684c      	ldr	r4, [r1, #4]
   872ee:	3908      	subs	r1, #8
   872f0:	42a1      	cmp	r1, r4
   872f2:	d106      	bne.n	87302 <_malloc_r+0x5e>
   872f4:	e00c      	b.n	87310 <_malloc_r+0x6c>
   872f6:	2a00      	cmp	r2, #0
   872f8:	f280 80ab 	bge.w	87452 <_malloc_r+0x1ae>
   872fc:	68e4      	ldr	r4, [r4, #12]
   872fe:	42a1      	cmp	r1, r4
   87300:	d006      	beq.n	87310 <_malloc_r+0x6c>
   87302:	6863      	ldr	r3, [r4, #4]
   87304:	f023 0303 	bic.w	r3, r3, #3
   87308:	1b9a      	subs	r2, r3, r6
   8730a:	2a0f      	cmp	r2, #15
   8730c:	ddf3      	ble.n	872f6 <_malloc_r+0x52>
   8730e:	4670      	mov	r0, lr
   87310:	693c      	ldr	r4, [r7, #16]
   87312:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 875e0 <_malloc_r+0x33c>
   87316:	4574      	cmp	r4, lr
   87318:	f000 819e 	beq.w	87658 <_malloc_r+0x3b4>
   8731c:	6863      	ldr	r3, [r4, #4]
   8731e:	f023 0303 	bic.w	r3, r3, #3
   87322:	1b9a      	subs	r2, r3, r6
   87324:	2a0f      	cmp	r2, #15
   87326:	f300 8183 	bgt.w	87630 <_malloc_r+0x38c>
   8732a:	2a00      	cmp	r2, #0
   8732c:	f8c7 e014 	str.w	lr, [r7, #20]
   87330:	f8c7 e010 	str.w	lr, [r7, #16]
   87334:	f280 8091 	bge.w	8745a <_malloc_r+0x1b6>
   87338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8733c:	f080 8154 	bcs.w	875e8 <_malloc_r+0x344>
   87340:	2201      	movs	r2, #1
   87342:	08db      	lsrs	r3, r3, #3
   87344:	6879      	ldr	r1, [r7, #4]
   87346:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8734a:	4413      	add	r3, r2
   8734c:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   87350:	fa02 f20c 	lsl.w	r2, r2, ip
   87354:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   87358:	430a      	orrs	r2, r1
   8735a:	f1ac 0108 	sub.w	r1, ip, #8
   8735e:	60e1      	str	r1, [r4, #12]
   87360:	f8c4 8008 	str.w	r8, [r4, #8]
   87364:	607a      	str	r2, [r7, #4]
   87366:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8736a:	f8c8 400c 	str.w	r4, [r8, #12]
   8736e:	2401      	movs	r4, #1
   87370:	1083      	asrs	r3, r0, #2
   87372:	409c      	lsls	r4, r3
   87374:	4294      	cmp	r4, r2
   87376:	d87d      	bhi.n	87474 <_malloc_r+0x1d0>
   87378:	4214      	tst	r4, r2
   8737a:	d106      	bne.n	8738a <_malloc_r+0xe6>
   8737c:	f020 0003 	bic.w	r0, r0, #3
   87380:	0064      	lsls	r4, r4, #1
   87382:	4214      	tst	r4, r2
   87384:	f100 0004 	add.w	r0, r0, #4
   87388:	d0fa      	beq.n	87380 <_malloc_r+0xdc>
   8738a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8738e:	46cc      	mov	ip, r9
   87390:	4680      	mov	r8, r0
   87392:	f8dc 300c 	ldr.w	r3, [ip, #12]
   87396:	459c      	cmp	ip, r3
   87398:	d107      	bne.n	873aa <_malloc_r+0x106>
   8739a:	e15f      	b.n	8765c <_malloc_r+0x3b8>
   8739c:	2a00      	cmp	r2, #0
   8739e:	f280 816d 	bge.w	8767c <_malloc_r+0x3d8>
   873a2:	68db      	ldr	r3, [r3, #12]
   873a4:	459c      	cmp	ip, r3
   873a6:	f000 8159 	beq.w	8765c <_malloc_r+0x3b8>
   873aa:	6859      	ldr	r1, [r3, #4]
   873ac:	f021 0103 	bic.w	r1, r1, #3
   873b0:	1b8a      	subs	r2, r1, r6
   873b2:	2a0f      	cmp	r2, #15
   873b4:	ddf2      	ble.n	8739c <_malloc_r+0xf8>
   873b6:	68dc      	ldr	r4, [r3, #12]
   873b8:	f8d3 c008 	ldr.w	ip, [r3, #8]
   873bc:	f046 0801 	orr.w	r8, r6, #1
   873c0:	4628      	mov	r0, r5
   873c2:	441e      	add	r6, r3
   873c4:	f042 0501 	orr.w	r5, r2, #1
   873c8:	f8c3 8004 	str.w	r8, [r3, #4]
   873cc:	f8cc 400c 	str.w	r4, [ip, #12]
   873d0:	f8c4 c008 	str.w	ip, [r4, #8]
   873d4:	617e      	str	r6, [r7, #20]
   873d6:	613e      	str	r6, [r7, #16]
   873d8:	f8c6 e00c 	str.w	lr, [r6, #12]
   873dc:	f8c6 e008 	str.w	lr, [r6, #8]
   873e0:	6075      	str	r5, [r6, #4]
   873e2:	505a      	str	r2, [r3, r1]
   873e4:	9300      	str	r3, [sp, #0]
   873e6:	f000 fad7 	bl	87998 <__malloc_unlock>
   873ea:	9b00      	ldr	r3, [sp, #0]
   873ec:	f103 0408 	add.w	r4, r3, #8
   873f0:	e01e      	b.n	87430 <_malloc_r+0x18c>
   873f2:	2910      	cmp	r1, #16
   873f4:	d820      	bhi.n	87438 <_malloc_r+0x194>
   873f6:	f000 fac9 	bl	8798c <__malloc_lock>
   873fa:	2610      	movs	r6, #16
   873fc:	2318      	movs	r3, #24
   873fe:	2002      	movs	r0, #2
   87400:	4f72      	ldr	r7, [pc, #456]	; (875cc <_malloc_r+0x328>)
   87402:	443b      	add	r3, r7
   87404:	685c      	ldr	r4, [r3, #4]
   87406:	f1a3 0208 	sub.w	r2, r3, #8
   8740a:	4294      	cmp	r4, r2
   8740c:	f000 812f 	beq.w	8766e <_malloc_r+0x3ca>
   87410:	6863      	ldr	r3, [r4, #4]
   87412:	68e1      	ldr	r1, [r4, #12]
   87414:	f023 0303 	bic.w	r3, r3, #3
   87418:	4423      	add	r3, r4
   8741a:	685a      	ldr	r2, [r3, #4]
   8741c:	68a6      	ldr	r6, [r4, #8]
   8741e:	f042 0201 	orr.w	r2, r2, #1
   87422:	60f1      	str	r1, [r6, #12]
   87424:	4628      	mov	r0, r5
   87426:	608e      	str	r6, [r1, #8]
   87428:	605a      	str	r2, [r3, #4]
   8742a:	f000 fab5 	bl	87998 <__malloc_unlock>
   8742e:	3408      	adds	r4, #8
   87430:	4620      	mov	r0, r4
   87432:	b003      	add	sp, #12
   87434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87438:	2400      	movs	r4, #0
   8743a:	230c      	movs	r3, #12
   8743c:	4620      	mov	r0, r4
   8743e:	602b      	str	r3, [r5, #0]
   87440:	b003      	add	sp, #12
   87442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87446:	2040      	movs	r0, #64	; 0x40
   87448:	f44f 7100 	mov.w	r1, #512	; 0x200
   8744c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   87450:	e74a      	b.n	872e8 <_malloc_r+0x44>
   87452:	4423      	add	r3, r4
   87454:	685a      	ldr	r2, [r3, #4]
   87456:	68e1      	ldr	r1, [r4, #12]
   87458:	e7e0      	b.n	8741c <_malloc_r+0x178>
   8745a:	4423      	add	r3, r4
   8745c:	685a      	ldr	r2, [r3, #4]
   8745e:	4628      	mov	r0, r5
   87460:	f042 0201 	orr.w	r2, r2, #1
   87464:	605a      	str	r2, [r3, #4]
   87466:	3408      	adds	r4, #8
   87468:	f000 fa96 	bl	87998 <__malloc_unlock>
   8746c:	4620      	mov	r0, r4
   8746e:	b003      	add	sp, #12
   87470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87474:	68bc      	ldr	r4, [r7, #8]
   87476:	6863      	ldr	r3, [r4, #4]
   87478:	f023 0803 	bic.w	r8, r3, #3
   8747c:	45b0      	cmp	r8, r6
   8747e:	d304      	bcc.n	8748a <_malloc_r+0x1e6>
   87480:	eba8 0306 	sub.w	r3, r8, r6
   87484:	2b0f      	cmp	r3, #15
   87486:	f300 8085 	bgt.w	87594 <_malloc_r+0x2f0>
   8748a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 875e4 <_malloc_r+0x340>
   8748e:	4b50      	ldr	r3, [pc, #320]	; (875d0 <_malloc_r+0x32c>)
   87490:	f8d9 2000 	ldr.w	r2, [r9]
   87494:	681b      	ldr	r3, [r3, #0]
   87496:	3201      	adds	r2, #1
   87498:	4433      	add	r3, r6
   8749a:	eb04 0a08 	add.w	sl, r4, r8
   8749e:	f000 8154 	beq.w	8774a <_malloc_r+0x4a6>
   874a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   874a6:	330f      	adds	r3, #15
   874a8:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   874ac:	f02b 0b0f 	bic.w	fp, fp, #15
   874b0:	4659      	mov	r1, fp
   874b2:	4628      	mov	r0, r5
   874b4:	f000 fd72 	bl	87f9c <_sbrk_r>
   874b8:	1c41      	adds	r1, r0, #1
   874ba:	4602      	mov	r2, r0
   874bc:	f000 80fb 	beq.w	876b6 <_malloc_r+0x412>
   874c0:	4582      	cmp	sl, r0
   874c2:	f200 80f6 	bhi.w	876b2 <_malloc_r+0x40e>
   874c6:	4b43      	ldr	r3, [pc, #268]	; (875d4 <_malloc_r+0x330>)
   874c8:	6819      	ldr	r1, [r3, #0]
   874ca:	4459      	add	r1, fp
   874cc:	6019      	str	r1, [r3, #0]
   874ce:	f000 814c 	beq.w	8776a <_malloc_r+0x4c6>
   874d2:	f8d9 0000 	ldr.w	r0, [r9]
   874d6:	3001      	adds	r0, #1
   874d8:	bf1b      	ittet	ne
   874da:	eba2 0a0a 	subne.w	sl, r2, sl
   874de:	4451      	addne	r1, sl
   874e0:	f8c9 2000 	streq.w	r2, [r9]
   874e4:	6019      	strne	r1, [r3, #0]
   874e6:	f012 0107 	ands.w	r1, r2, #7
   874ea:	f000 8114 	beq.w	87716 <_malloc_r+0x472>
   874ee:	f1c1 0008 	rsb	r0, r1, #8
   874f2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   874f6:	4402      	add	r2, r0
   874f8:	3108      	adds	r1, #8
   874fa:	eb02 090b 	add.w	r9, r2, fp
   874fe:	f3c9 090b 	ubfx	r9, r9, #0, #12
   87502:	eba1 0909 	sub.w	r9, r1, r9
   87506:	4649      	mov	r1, r9
   87508:	4628      	mov	r0, r5
   8750a:	9301      	str	r3, [sp, #4]
   8750c:	9200      	str	r2, [sp, #0]
   8750e:	f000 fd45 	bl	87f9c <_sbrk_r>
   87512:	1c43      	adds	r3, r0, #1
   87514:	e89d 000c 	ldmia.w	sp, {r2, r3}
   87518:	f000 8142 	beq.w	877a0 <_malloc_r+0x4fc>
   8751c:	1a80      	subs	r0, r0, r2
   8751e:	4448      	add	r0, r9
   87520:	f040 0001 	orr.w	r0, r0, #1
   87524:	6819      	ldr	r1, [r3, #0]
   87526:	42bc      	cmp	r4, r7
   87528:	4449      	add	r1, r9
   8752a:	60ba      	str	r2, [r7, #8]
   8752c:	6019      	str	r1, [r3, #0]
   8752e:	6050      	str	r0, [r2, #4]
   87530:	d017      	beq.n	87562 <_malloc_r+0x2be>
   87532:	f1b8 0f0f 	cmp.w	r8, #15
   87536:	f240 80fa 	bls.w	8772e <_malloc_r+0x48a>
   8753a:	f04f 0c05 	mov.w	ip, #5
   8753e:	6862      	ldr	r2, [r4, #4]
   87540:	f1a8 000c 	sub.w	r0, r8, #12
   87544:	f020 0007 	bic.w	r0, r0, #7
   87548:	f002 0201 	and.w	r2, r2, #1
   8754c:	eb04 0e00 	add.w	lr, r4, r0
   87550:	4302      	orrs	r2, r0
   87552:	280f      	cmp	r0, #15
   87554:	6062      	str	r2, [r4, #4]
   87556:	f8ce c004 	str.w	ip, [lr, #4]
   8755a:	f8ce c008 	str.w	ip, [lr, #8]
   8755e:	f200 8116 	bhi.w	8778e <_malloc_r+0x4ea>
   87562:	4b1d      	ldr	r3, [pc, #116]	; (875d8 <_malloc_r+0x334>)
   87564:	68bc      	ldr	r4, [r7, #8]
   87566:	681a      	ldr	r2, [r3, #0]
   87568:	4291      	cmp	r1, r2
   8756a:	bf88      	it	hi
   8756c:	6019      	strhi	r1, [r3, #0]
   8756e:	4b1b      	ldr	r3, [pc, #108]	; (875dc <_malloc_r+0x338>)
   87570:	681a      	ldr	r2, [r3, #0]
   87572:	4291      	cmp	r1, r2
   87574:	6862      	ldr	r2, [r4, #4]
   87576:	bf88      	it	hi
   87578:	6019      	strhi	r1, [r3, #0]
   8757a:	f022 0203 	bic.w	r2, r2, #3
   8757e:	4296      	cmp	r6, r2
   87580:	eba2 0306 	sub.w	r3, r2, r6
   87584:	d801      	bhi.n	8758a <_malloc_r+0x2e6>
   87586:	2b0f      	cmp	r3, #15
   87588:	dc04      	bgt.n	87594 <_malloc_r+0x2f0>
   8758a:	4628      	mov	r0, r5
   8758c:	f000 fa04 	bl	87998 <__malloc_unlock>
   87590:	2400      	movs	r4, #0
   87592:	e74d      	b.n	87430 <_malloc_r+0x18c>
   87594:	f046 0201 	orr.w	r2, r6, #1
   87598:	f043 0301 	orr.w	r3, r3, #1
   8759c:	4426      	add	r6, r4
   8759e:	6062      	str	r2, [r4, #4]
   875a0:	4628      	mov	r0, r5
   875a2:	60be      	str	r6, [r7, #8]
   875a4:	3408      	adds	r4, #8
   875a6:	6073      	str	r3, [r6, #4]
   875a8:	f000 f9f6 	bl	87998 <__malloc_unlock>
   875ac:	4620      	mov	r0, r4
   875ae:	b003      	add	sp, #12
   875b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   875b4:	2b14      	cmp	r3, #20
   875b6:	d970      	bls.n	8769a <_malloc_r+0x3f6>
   875b8:	2b54      	cmp	r3, #84	; 0x54
   875ba:	f200 80a2 	bhi.w	87702 <_malloc_r+0x45e>
   875be:	0b33      	lsrs	r3, r6, #12
   875c0:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   875c4:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   875c8:	00c1      	lsls	r1, r0, #3
   875ca:	e68d      	b.n	872e8 <_malloc_r+0x44>
   875cc:	20000bc8 	.word	0x20000bc8
   875d0:	200011b8 	.word	0x200011b8
   875d4:	20001188 	.word	0x20001188
   875d8:	200011b0 	.word	0x200011b0
   875dc:	200011b4 	.word	0x200011b4
   875e0:	20000bd0 	.word	0x20000bd0
   875e4:	20000fd0 	.word	0x20000fd0
   875e8:	0a5a      	lsrs	r2, r3, #9
   875ea:	2a04      	cmp	r2, #4
   875ec:	d95b      	bls.n	876a6 <_malloc_r+0x402>
   875ee:	2a14      	cmp	r2, #20
   875f0:	f200 80ae 	bhi.w	87750 <_malloc_r+0x4ac>
   875f4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   875f8:	00c9      	lsls	r1, r1, #3
   875fa:	325b      	adds	r2, #91	; 0x5b
   875fc:	eb07 0c01 	add.w	ip, r7, r1
   87600:	5879      	ldr	r1, [r7, r1]
   87602:	f1ac 0c08 	sub.w	ip, ip, #8
   87606:	458c      	cmp	ip, r1
   87608:	f000 8088 	beq.w	8771c <_malloc_r+0x478>
   8760c:	684a      	ldr	r2, [r1, #4]
   8760e:	f022 0203 	bic.w	r2, r2, #3
   87612:	4293      	cmp	r3, r2
   87614:	d273      	bcs.n	876fe <_malloc_r+0x45a>
   87616:	6889      	ldr	r1, [r1, #8]
   87618:	458c      	cmp	ip, r1
   8761a:	d1f7      	bne.n	8760c <_malloc_r+0x368>
   8761c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   87620:	687a      	ldr	r2, [r7, #4]
   87622:	60e3      	str	r3, [r4, #12]
   87624:	f8c4 c008 	str.w	ip, [r4, #8]
   87628:	609c      	str	r4, [r3, #8]
   8762a:	f8cc 400c 	str.w	r4, [ip, #12]
   8762e:	e69e      	b.n	8736e <_malloc_r+0xca>
   87630:	f046 0c01 	orr.w	ip, r6, #1
   87634:	f042 0101 	orr.w	r1, r2, #1
   87638:	4426      	add	r6, r4
   8763a:	f8c4 c004 	str.w	ip, [r4, #4]
   8763e:	4628      	mov	r0, r5
   87640:	617e      	str	r6, [r7, #20]
   87642:	613e      	str	r6, [r7, #16]
   87644:	f8c6 e00c 	str.w	lr, [r6, #12]
   87648:	f8c6 e008 	str.w	lr, [r6, #8]
   8764c:	6071      	str	r1, [r6, #4]
   8764e:	50e2      	str	r2, [r4, r3]
   87650:	f000 f9a2 	bl	87998 <__malloc_unlock>
   87654:	3408      	adds	r4, #8
   87656:	e6eb      	b.n	87430 <_malloc_r+0x18c>
   87658:	687a      	ldr	r2, [r7, #4]
   8765a:	e688      	b.n	8736e <_malloc_r+0xca>
   8765c:	f108 0801 	add.w	r8, r8, #1
   87660:	f018 0f03 	tst.w	r8, #3
   87664:	f10c 0c08 	add.w	ip, ip, #8
   87668:	f47f ae93 	bne.w	87392 <_malloc_r+0xee>
   8766c:	e02d      	b.n	876ca <_malloc_r+0x426>
   8766e:	68dc      	ldr	r4, [r3, #12]
   87670:	42a3      	cmp	r3, r4
   87672:	bf08      	it	eq
   87674:	3002      	addeq	r0, #2
   87676:	f43f ae4b 	beq.w	87310 <_malloc_r+0x6c>
   8767a:	e6c9      	b.n	87410 <_malloc_r+0x16c>
   8767c:	461c      	mov	r4, r3
   8767e:	4419      	add	r1, r3
   87680:	684a      	ldr	r2, [r1, #4]
   87682:	68db      	ldr	r3, [r3, #12]
   87684:	f854 6f08 	ldr.w	r6, [r4, #8]!
   87688:	f042 0201 	orr.w	r2, r2, #1
   8768c:	604a      	str	r2, [r1, #4]
   8768e:	4628      	mov	r0, r5
   87690:	60f3      	str	r3, [r6, #12]
   87692:	609e      	str	r6, [r3, #8]
   87694:	f000 f980 	bl	87998 <__malloc_unlock>
   87698:	e6ca      	b.n	87430 <_malloc_r+0x18c>
   8769a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8769e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   876a2:	00c1      	lsls	r1, r0, #3
   876a4:	e620      	b.n	872e8 <_malloc_r+0x44>
   876a6:	099a      	lsrs	r2, r3, #6
   876a8:	f102 0139 	add.w	r1, r2, #57	; 0x39
   876ac:	00c9      	lsls	r1, r1, #3
   876ae:	3238      	adds	r2, #56	; 0x38
   876b0:	e7a4      	b.n	875fc <_malloc_r+0x358>
   876b2:	42bc      	cmp	r4, r7
   876b4:	d054      	beq.n	87760 <_malloc_r+0x4bc>
   876b6:	68bc      	ldr	r4, [r7, #8]
   876b8:	6862      	ldr	r2, [r4, #4]
   876ba:	f022 0203 	bic.w	r2, r2, #3
   876be:	e75e      	b.n	8757e <_malloc_r+0x2da>
   876c0:	f859 3908 	ldr.w	r3, [r9], #-8
   876c4:	4599      	cmp	r9, r3
   876c6:	f040 8086 	bne.w	877d6 <_malloc_r+0x532>
   876ca:	f010 0f03 	tst.w	r0, #3
   876ce:	f100 30ff 	add.w	r0, r0, #4294967295
   876d2:	d1f5      	bne.n	876c0 <_malloc_r+0x41c>
   876d4:	687b      	ldr	r3, [r7, #4]
   876d6:	ea23 0304 	bic.w	r3, r3, r4
   876da:	607b      	str	r3, [r7, #4]
   876dc:	0064      	lsls	r4, r4, #1
   876de:	429c      	cmp	r4, r3
   876e0:	f63f aec8 	bhi.w	87474 <_malloc_r+0x1d0>
   876e4:	2c00      	cmp	r4, #0
   876e6:	f43f aec5 	beq.w	87474 <_malloc_r+0x1d0>
   876ea:	421c      	tst	r4, r3
   876ec:	4640      	mov	r0, r8
   876ee:	f47f ae4c 	bne.w	8738a <_malloc_r+0xe6>
   876f2:	0064      	lsls	r4, r4, #1
   876f4:	421c      	tst	r4, r3
   876f6:	f100 0004 	add.w	r0, r0, #4
   876fa:	d0fa      	beq.n	876f2 <_malloc_r+0x44e>
   876fc:	e645      	b.n	8738a <_malloc_r+0xe6>
   876fe:	468c      	mov	ip, r1
   87700:	e78c      	b.n	8761c <_malloc_r+0x378>
   87702:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   87706:	d815      	bhi.n	87734 <_malloc_r+0x490>
   87708:	0bf3      	lsrs	r3, r6, #15
   8770a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8770e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   87712:	00c1      	lsls	r1, r0, #3
   87714:	e5e8      	b.n	872e8 <_malloc_r+0x44>
   87716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8771a:	e6ee      	b.n	874fa <_malloc_r+0x256>
   8771c:	2101      	movs	r1, #1
   8771e:	687b      	ldr	r3, [r7, #4]
   87720:	1092      	asrs	r2, r2, #2
   87722:	fa01 f202 	lsl.w	r2, r1, r2
   87726:	431a      	orrs	r2, r3
   87728:	607a      	str	r2, [r7, #4]
   8772a:	4663      	mov	r3, ip
   8772c:	e779      	b.n	87622 <_malloc_r+0x37e>
   8772e:	2301      	movs	r3, #1
   87730:	6053      	str	r3, [r2, #4]
   87732:	e72a      	b.n	8758a <_malloc_r+0x2e6>
   87734:	f240 5254 	movw	r2, #1364	; 0x554
   87738:	4293      	cmp	r3, r2
   8773a:	d822      	bhi.n	87782 <_malloc_r+0x4de>
   8773c:	0cb3      	lsrs	r3, r6, #18
   8773e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   87742:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   87746:	00c1      	lsls	r1, r0, #3
   87748:	e5ce      	b.n	872e8 <_malloc_r+0x44>
   8774a:	f103 0b10 	add.w	fp, r3, #16
   8774e:	e6af      	b.n	874b0 <_malloc_r+0x20c>
   87750:	2a54      	cmp	r2, #84	; 0x54
   87752:	d829      	bhi.n	877a8 <_malloc_r+0x504>
   87754:	0b1a      	lsrs	r2, r3, #12
   87756:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8775a:	00c9      	lsls	r1, r1, #3
   8775c:	326e      	adds	r2, #110	; 0x6e
   8775e:	e74d      	b.n	875fc <_malloc_r+0x358>
   87760:	4b20      	ldr	r3, [pc, #128]	; (877e4 <_malloc_r+0x540>)
   87762:	6819      	ldr	r1, [r3, #0]
   87764:	4459      	add	r1, fp
   87766:	6019      	str	r1, [r3, #0]
   87768:	e6b3      	b.n	874d2 <_malloc_r+0x22e>
   8776a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8776e:	2800      	cmp	r0, #0
   87770:	f47f aeaf 	bne.w	874d2 <_malloc_r+0x22e>
   87774:	eb08 030b 	add.w	r3, r8, fp
   87778:	68ba      	ldr	r2, [r7, #8]
   8777a:	f043 0301 	orr.w	r3, r3, #1
   8777e:	6053      	str	r3, [r2, #4]
   87780:	e6ef      	b.n	87562 <_malloc_r+0x2be>
   87782:	207f      	movs	r0, #127	; 0x7f
   87784:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   87788:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   8778c:	e5ac      	b.n	872e8 <_malloc_r+0x44>
   8778e:	f104 0108 	add.w	r1, r4, #8
   87792:	4628      	mov	r0, r5
   87794:	9300      	str	r3, [sp, #0]
   87796:	f000 fd7f 	bl	88298 <_free_r>
   8779a:	9b00      	ldr	r3, [sp, #0]
   8779c:	6819      	ldr	r1, [r3, #0]
   8779e:	e6e0      	b.n	87562 <_malloc_r+0x2be>
   877a0:	2001      	movs	r0, #1
   877a2:	f04f 0900 	mov.w	r9, #0
   877a6:	e6bd      	b.n	87524 <_malloc_r+0x280>
   877a8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   877ac:	d805      	bhi.n	877ba <_malloc_r+0x516>
   877ae:	0bda      	lsrs	r2, r3, #15
   877b0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   877b4:	00c9      	lsls	r1, r1, #3
   877b6:	3277      	adds	r2, #119	; 0x77
   877b8:	e720      	b.n	875fc <_malloc_r+0x358>
   877ba:	f240 5154 	movw	r1, #1364	; 0x554
   877be:	428a      	cmp	r2, r1
   877c0:	d805      	bhi.n	877ce <_malloc_r+0x52a>
   877c2:	0c9a      	lsrs	r2, r3, #18
   877c4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   877c8:	00c9      	lsls	r1, r1, #3
   877ca:	327c      	adds	r2, #124	; 0x7c
   877cc:	e716      	b.n	875fc <_malloc_r+0x358>
   877ce:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   877d2:	227e      	movs	r2, #126	; 0x7e
   877d4:	e712      	b.n	875fc <_malloc_r+0x358>
   877d6:	687b      	ldr	r3, [r7, #4]
   877d8:	e780      	b.n	876dc <_malloc_r+0x438>
   877da:	08f0      	lsrs	r0, r6, #3
   877dc:	f106 0308 	add.w	r3, r6, #8
   877e0:	e60e      	b.n	87400 <_malloc_r+0x15c>
   877e2:	bf00      	nop
   877e4:	20001188 	.word	0x20001188

000877e8 <__ascii_mbtowc>:
   877e8:	b082      	sub	sp, #8
   877ea:	b149      	cbz	r1, 87800 <__ascii_mbtowc+0x18>
   877ec:	b15a      	cbz	r2, 87806 <__ascii_mbtowc+0x1e>
   877ee:	b16b      	cbz	r3, 8780c <__ascii_mbtowc+0x24>
   877f0:	7813      	ldrb	r3, [r2, #0]
   877f2:	600b      	str	r3, [r1, #0]
   877f4:	7812      	ldrb	r2, [r2, #0]
   877f6:	1c10      	adds	r0, r2, #0
   877f8:	bf18      	it	ne
   877fa:	2001      	movne	r0, #1
   877fc:	b002      	add	sp, #8
   877fe:	4770      	bx	lr
   87800:	a901      	add	r1, sp, #4
   87802:	2a00      	cmp	r2, #0
   87804:	d1f3      	bne.n	877ee <__ascii_mbtowc+0x6>
   87806:	4610      	mov	r0, r2
   87808:	b002      	add	sp, #8
   8780a:	4770      	bx	lr
   8780c:	f06f 0001 	mvn.w	r0, #1
   87810:	e7f4      	b.n	877fc <__ascii_mbtowc+0x14>
   87812:	bf00      	nop

00087814 <memchr>:
   87814:	0783      	lsls	r3, r0, #30
   87816:	b470      	push	{r4, r5, r6}
   87818:	b2cd      	uxtb	r5, r1
   8781a:	d03d      	beq.n	87898 <memchr+0x84>
   8781c:	1e54      	subs	r4, r2, #1
   8781e:	b30a      	cbz	r2, 87864 <memchr+0x50>
   87820:	7803      	ldrb	r3, [r0, #0]
   87822:	42ab      	cmp	r3, r5
   87824:	d01f      	beq.n	87866 <memchr+0x52>
   87826:	1c43      	adds	r3, r0, #1
   87828:	e005      	b.n	87836 <memchr+0x22>
   8782a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8782e:	d319      	bcc.n	87864 <memchr+0x50>
   87830:	7802      	ldrb	r2, [r0, #0]
   87832:	42aa      	cmp	r2, r5
   87834:	d017      	beq.n	87866 <memchr+0x52>
   87836:	f013 0f03 	tst.w	r3, #3
   8783a:	4618      	mov	r0, r3
   8783c:	f103 0301 	add.w	r3, r3, #1
   87840:	d1f3      	bne.n	8782a <memchr+0x16>
   87842:	2c03      	cmp	r4, #3
   87844:	d811      	bhi.n	8786a <memchr+0x56>
   87846:	b34c      	cbz	r4, 8789c <memchr+0x88>
   87848:	7803      	ldrb	r3, [r0, #0]
   8784a:	42ab      	cmp	r3, r5
   8784c:	d00b      	beq.n	87866 <memchr+0x52>
   8784e:	4404      	add	r4, r0
   87850:	1c43      	adds	r3, r0, #1
   87852:	e002      	b.n	8785a <memchr+0x46>
   87854:	7802      	ldrb	r2, [r0, #0]
   87856:	42aa      	cmp	r2, r5
   87858:	d005      	beq.n	87866 <memchr+0x52>
   8785a:	429c      	cmp	r4, r3
   8785c:	4618      	mov	r0, r3
   8785e:	f103 0301 	add.w	r3, r3, #1
   87862:	d1f7      	bne.n	87854 <memchr+0x40>
   87864:	2000      	movs	r0, #0
   87866:	bc70      	pop	{r4, r5, r6}
   87868:	4770      	bx	lr
   8786a:	0209      	lsls	r1, r1, #8
   8786c:	b289      	uxth	r1, r1
   8786e:	4329      	orrs	r1, r5
   87870:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   87874:	6803      	ldr	r3, [r0, #0]
   87876:	4606      	mov	r6, r0
   87878:	404b      	eors	r3, r1
   8787a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8787e:	ea22 0303 	bic.w	r3, r2, r3
   87882:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   87886:	f100 0004 	add.w	r0, r0, #4
   8788a:	d103      	bne.n	87894 <memchr+0x80>
   8788c:	3c04      	subs	r4, #4
   8788e:	2c03      	cmp	r4, #3
   87890:	d8f0      	bhi.n	87874 <memchr+0x60>
   87892:	e7d8      	b.n	87846 <memchr+0x32>
   87894:	4630      	mov	r0, r6
   87896:	e7d7      	b.n	87848 <memchr+0x34>
   87898:	4614      	mov	r4, r2
   8789a:	e7d2      	b.n	87842 <memchr+0x2e>
   8789c:	4620      	mov	r0, r4
   8789e:	e7e2      	b.n	87866 <memchr+0x52>

000878a0 <memcpy>:
   878a0:	4684      	mov	ip, r0
   878a2:	ea41 0300 	orr.w	r3, r1, r0
   878a6:	f013 0303 	ands.w	r3, r3, #3
   878aa:	d149      	bne.n	87940 <memcpy+0xa0>
   878ac:	3a40      	subs	r2, #64	; 0x40
   878ae:	d323      	bcc.n	878f8 <memcpy+0x58>
   878b0:	680b      	ldr	r3, [r1, #0]
   878b2:	6003      	str	r3, [r0, #0]
   878b4:	684b      	ldr	r3, [r1, #4]
   878b6:	6043      	str	r3, [r0, #4]
   878b8:	688b      	ldr	r3, [r1, #8]
   878ba:	6083      	str	r3, [r0, #8]
   878bc:	68cb      	ldr	r3, [r1, #12]
   878be:	60c3      	str	r3, [r0, #12]
   878c0:	690b      	ldr	r3, [r1, #16]
   878c2:	6103      	str	r3, [r0, #16]
   878c4:	694b      	ldr	r3, [r1, #20]
   878c6:	6143      	str	r3, [r0, #20]
   878c8:	698b      	ldr	r3, [r1, #24]
   878ca:	6183      	str	r3, [r0, #24]
   878cc:	69cb      	ldr	r3, [r1, #28]
   878ce:	61c3      	str	r3, [r0, #28]
   878d0:	6a0b      	ldr	r3, [r1, #32]
   878d2:	6203      	str	r3, [r0, #32]
   878d4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   878d6:	6243      	str	r3, [r0, #36]	; 0x24
   878d8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   878da:	6283      	str	r3, [r0, #40]	; 0x28
   878dc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   878de:	62c3      	str	r3, [r0, #44]	; 0x2c
   878e0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   878e2:	6303      	str	r3, [r0, #48]	; 0x30
   878e4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   878e6:	6343      	str	r3, [r0, #52]	; 0x34
   878e8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   878ea:	6383      	str	r3, [r0, #56]	; 0x38
   878ec:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   878ee:	63c3      	str	r3, [r0, #60]	; 0x3c
   878f0:	3040      	adds	r0, #64	; 0x40
   878f2:	3140      	adds	r1, #64	; 0x40
   878f4:	3a40      	subs	r2, #64	; 0x40
   878f6:	d2db      	bcs.n	878b0 <memcpy+0x10>
   878f8:	3230      	adds	r2, #48	; 0x30
   878fa:	d30b      	bcc.n	87914 <memcpy+0x74>
   878fc:	680b      	ldr	r3, [r1, #0]
   878fe:	6003      	str	r3, [r0, #0]
   87900:	684b      	ldr	r3, [r1, #4]
   87902:	6043      	str	r3, [r0, #4]
   87904:	688b      	ldr	r3, [r1, #8]
   87906:	6083      	str	r3, [r0, #8]
   87908:	68cb      	ldr	r3, [r1, #12]
   8790a:	60c3      	str	r3, [r0, #12]
   8790c:	3010      	adds	r0, #16
   8790e:	3110      	adds	r1, #16
   87910:	3a10      	subs	r2, #16
   87912:	d2f3      	bcs.n	878fc <memcpy+0x5c>
   87914:	320c      	adds	r2, #12
   87916:	d305      	bcc.n	87924 <memcpy+0x84>
   87918:	f851 3b04 	ldr.w	r3, [r1], #4
   8791c:	f840 3b04 	str.w	r3, [r0], #4
   87920:	3a04      	subs	r2, #4
   87922:	d2f9      	bcs.n	87918 <memcpy+0x78>
   87924:	3204      	adds	r2, #4
   87926:	d008      	beq.n	8793a <memcpy+0x9a>
   87928:	07d2      	lsls	r2, r2, #31
   8792a:	bf1c      	itt	ne
   8792c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87930:	f800 3b01 	strbne.w	r3, [r0], #1
   87934:	d301      	bcc.n	8793a <memcpy+0x9a>
   87936:	880b      	ldrh	r3, [r1, #0]
   87938:	8003      	strh	r3, [r0, #0]
   8793a:	4660      	mov	r0, ip
   8793c:	4770      	bx	lr
   8793e:	bf00      	nop
   87940:	2a08      	cmp	r2, #8
   87942:	d313      	bcc.n	8796c <memcpy+0xcc>
   87944:	078b      	lsls	r3, r1, #30
   87946:	d0b1      	beq.n	878ac <memcpy+0xc>
   87948:	f010 0303 	ands.w	r3, r0, #3
   8794c:	d0ae      	beq.n	878ac <memcpy+0xc>
   8794e:	f1c3 0304 	rsb	r3, r3, #4
   87952:	1ad2      	subs	r2, r2, r3
   87954:	07db      	lsls	r3, r3, #31
   87956:	bf1c      	itt	ne
   87958:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8795c:	f800 3b01 	strbne.w	r3, [r0], #1
   87960:	d3a4      	bcc.n	878ac <memcpy+0xc>
   87962:	f831 3b02 	ldrh.w	r3, [r1], #2
   87966:	f820 3b02 	strh.w	r3, [r0], #2
   8796a:	e79f      	b.n	878ac <memcpy+0xc>
   8796c:	3a04      	subs	r2, #4
   8796e:	d3d9      	bcc.n	87924 <memcpy+0x84>
   87970:	3a01      	subs	r2, #1
   87972:	f811 3b01 	ldrb.w	r3, [r1], #1
   87976:	f800 3b01 	strb.w	r3, [r0], #1
   8797a:	d2f9      	bcs.n	87970 <memcpy+0xd0>
   8797c:	780b      	ldrb	r3, [r1, #0]
   8797e:	7003      	strb	r3, [r0, #0]
   87980:	784b      	ldrb	r3, [r1, #1]
   87982:	7043      	strb	r3, [r0, #1]
   87984:	788b      	ldrb	r3, [r1, #2]
   87986:	7083      	strb	r3, [r0, #2]
   87988:	4660      	mov	r0, ip
   8798a:	4770      	bx	lr

0008798c <__malloc_lock>:
   8798c:	4801      	ldr	r0, [pc, #4]	; (87994 <__malloc_lock+0x8>)
   8798e:	f7ff bc85 	b.w	8729c <__retarget_lock_acquire_recursive>
   87992:	bf00      	nop
   87994:	200022f0 	.word	0x200022f0

00087998 <__malloc_unlock>:
   87998:	4801      	ldr	r0, [pc, #4]	; (879a0 <__malloc_unlock+0x8>)
   8799a:	f7ff bc81 	b.w	872a0 <__retarget_lock_release_recursive>
   8799e:	bf00      	nop
   879a0:	200022f0 	.word	0x200022f0

000879a4 <_Balloc>:
   879a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   879a6:	b570      	push	{r4, r5, r6, lr}
   879a8:	4605      	mov	r5, r0
   879aa:	460c      	mov	r4, r1
   879ac:	b14b      	cbz	r3, 879c2 <_Balloc+0x1e>
   879ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   879b2:	b180      	cbz	r0, 879d6 <_Balloc+0x32>
   879b4:	6802      	ldr	r2, [r0, #0]
   879b6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   879ba:	2300      	movs	r3, #0
   879bc:	6103      	str	r3, [r0, #16]
   879be:	60c3      	str	r3, [r0, #12]
   879c0:	bd70      	pop	{r4, r5, r6, pc}
   879c2:	2221      	movs	r2, #33	; 0x21
   879c4:	2104      	movs	r1, #4
   879c6:	f000 fbe7 	bl	88198 <_calloc_r>
   879ca:	64e8      	str	r0, [r5, #76]	; 0x4c
   879cc:	4603      	mov	r3, r0
   879ce:	2800      	cmp	r0, #0
   879d0:	d1ed      	bne.n	879ae <_Balloc+0xa>
   879d2:	2000      	movs	r0, #0
   879d4:	bd70      	pop	{r4, r5, r6, pc}
   879d6:	2101      	movs	r1, #1
   879d8:	fa01 f604 	lsl.w	r6, r1, r4
   879dc:	1d72      	adds	r2, r6, #5
   879de:	4628      	mov	r0, r5
   879e0:	0092      	lsls	r2, r2, #2
   879e2:	f000 fbd9 	bl	88198 <_calloc_r>
   879e6:	2800      	cmp	r0, #0
   879e8:	d0f3      	beq.n	879d2 <_Balloc+0x2e>
   879ea:	6044      	str	r4, [r0, #4]
   879ec:	6086      	str	r6, [r0, #8]
   879ee:	e7e4      	b.n	879ba <_Balloc+0x16>

000879f0 <_Bfree>:
   879f0:	b131      	cbz	r1, 87a00 <_Bfree+0x10>
   879f2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   879f4:	684a      	ldr	r2, [r1, #4]
   879f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   879fa:	6008      	str	r0, [r1, #0]
   879fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   87a00:	4770      	bx	lr
   87a02:	bf00      	nop

00087a04 <__multadd>:
   87a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   87a06:	460c      	mov	r4, r1
   87a08:	4605      	mov	r5, r0
   87a0a:	f04f 0e00 	mov.w	lr, #0
   87a0e:	690e      	ldr	r6, [r1, #16]
   87a10:	b083      	sub	sp, #12
   87a12:	f101 0714 	add.w	r7, r1, #20
   87a16:	6838      	ldr	r0, [r7, #0]
   87a18:	f10e 0e01 	add.w	lr, lr, #1
   87a1c:	b281      	uxth	r1, r0
   87a1e:	fb02 3301 	mla	r3, r2, r1, r3
   87a22:	0c01      	lsrs	r1, r0, #16
   87a24:	0c18      	lsrs	r0, r3, #16
   87a26:	fb02 0101 	mla	r1, r2, r1, r0
   87a2a:	b29b      	uxth	r3, r3
   87a2c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   87a30:	4576      	cmp	r6, lr
   87a32:	f847 3b04 	str.w	r3, [r7], #4
   87a36:	ea4f 4311 	mov.w	r3, r1, lsr #16
   87a3a:	dcec      	bgt.n	87a16 <__multadd+0x12>
   87a3c:	b13b      	cbz	r3, 87a4e <__multadd+0x4a>
   87a3e:	68a2      	ldr	r2, [r4, #8]
   87a40:	4296      	cmp	r6, r2
   87a42:	da07      	bge.n	87a54 <__multadd+0x50>
   87a44:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   87a48:	3601      	adds	r6, #1
   87a4a:	6153      	str	r3, [r2, #20]
   87a4c:	6126      	str	r6, [r4, #16]
   87a4e:	4620      	mov	r0, r4
   87a50:	b003      	add	sp, #12
   87a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87a54:	6861      	ldr	r1, [r4, #4]
   87a56:	4628      	mov	r0, r5
   87a58:	3101      	adds	r1, #1
   87a5a:	9301      	str	r3, [sp, #4]
   87a5c:	f7ff ffa2 	bl	879a4 <_Balloc>
   87a60:	4607      	mov	r7, r0
   87a62:	6922      	ldr	r2, [r4, #16]
   87a64:	f104 010c 	add.w	r1, r4, #12
   87a68:	3202      	adds	r2, #2
   87a6a:	0092      	lsls	r2, r2, #2
   87a6c:	300c      	adds	r0, #12
   87a6e:	f7ff ff17 	bl	878a0 <memcpy>
   87a72:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   87a74:	6861      	ldr	r1, [r4, #4]
   87a76:	9b01      	ldr	r3, [sp, #4]
   87a78:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   87a7c:	6020      	str	r0, [r4, #0]
   87a7e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   87a82:	463c      	mov	r4, r7
   87a84:	e7de      	b.n	87a44 <__multadd+0x40>
   87a86:	bf00      	nop

00087a88 <__hi0bits>:
   87a88:	0c02      	lsrs	r2, r0, #16
   87a8a:	0412      	lsls	r2, r2, #16
   87a8c:	4603      	mov	r3, r0
   87a8e:	b9b2      	cbnz	r2, 87abe <__hi0bits+0x36>
   87a90:	0403      	lsls	r3, r0, #16
   87a92:	2010      	movs	r0, #16
   87a94:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   87a98:	bf04      	itt	eq
   87a9a:	021b      	lsleq	r3, r3, #8
   87a9c:	3008      	addeq	r0, #8
   87a9e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   87aa2:	bf04      	itt	eq
   87aa4:	011b      	lsleq	r3, r3, #4
   87aa6:	3004      	addeq	r0, #4
   87aa8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   87aac:	bf04      	itt	eq
   87aae:	009b      	lsleq	r3, r3, #2
   87ab0:	3002      	addeq	r0, #2
   87ab2:	2b00      	cmp	r3, #0
   87ab4:	db02      	blt.n	87abc <__hi0bits+0x34>
   87ab6:	005b      	lsls	r3, r3, #1
   87ab8:	d403      	bmi.n	87ac2 <__hi0bits+0x3a>
   87aba:	2020      	movs	r0, #32
   87abc:	4770      	bx	lr
   87abe:	2000      	movs	r0, #0
   87ac0:	e7e8      	b.n	87a94 <__hi0bits+0xc>
   87ac2:	3001      	adds	r0, #1
   87ac4:	4770      	bx	lr
   87ac6:	bf00      	nop

00087ac8 <__lo0bits>:
   87ac8:	6803      	ldr	r3, [r0, #0]
   87aca:	4601      	mov	r1, r0
   87acc:	f013 0207 	ands.w	r2, r3, #7
   87ad0:	d007      	beq.n	87ae2 <__lo0bits+0x1a>
   87ad2:	07da      	lsls	r2, r3, #31
   87ad4:	d421      	bmi.n	87b1a <__lo0bits+0x52>
   87ad6:	0798      	lsls	r0, r3, #30
   87ad8:	d421      	bmi.n	87b1e <__lo0bits+0x56>
   87ada:	089b      	lsrs	r3, r3, #2
   87adc:	600b      	str	r3, [r1, #0]
   87ade:	2002      	movs	r0, #2
   87ae0:	4770      	bx	lr
   87ae2:	b298      	uxth	r0, r3
   87ae4:	b198      	cbz	r0, 87b0e <__lo0bits+0x46>
   87ae6:	4610      	mov	r0, r2
   87ae8:	f013 0fff 	tst.w	r3, #255	; 0xff
   87aec:	bf04      	itt	eq
   87aee:	0a1b      	lsreq	r3, r3, #8
   87af0:	3008      	addeq	r0, #8
   87af2:	071a      	lsls	r2, r3, #28
   87af4:	bf04      	itt	eq
   87af6:	091b      	lsreq	r3, r3, #4
   87af8:	3004      	addeq	r0, #4
   87afa:	079a      	lsls	r2, r3, #30
   87afc:	bf04      	itt	eq
   87afe:	089b      	lsreq	r3, r3, #2
   87b00:	3002      	addeq	r0, #2
   87b02:	07da      	lsls	r2, r3, #31
   87b04:	d407      	bmi.n	87b16 <__lo0bits+0x4e>
   87b06:	085b      	lsrs	r3, r3, #1
   87b08:	d104      	bne.n	87b14 <__lo0bits+0x4c>
   87b0a:	2020      	movs	r0, #32
   87b0c:	4770      	bx	lr
   87b0e:	0c1b      	lsrs	r3, r3, #16
   87b10:	2010      	movs	r0, #16
   87b12:	e7e9      	b.n	87ae8 <__lo0bits+0x20>
   87b14:	3001      	adds	r0, #1
   87b16:	600b      	str	r3, [r1, #0]
   87b18:	4770      	bx	lr
   87b1a:	2000      	movs	r0, #0
   87b1c:	4770      	bx	lr
   87b1e:	085b      	lsrs	r3, r3, #1
   87b20:	600b      	str	r3, [r1, #0]
   87b22:	2001      	movs	r0, #1
   87b24:	4770      	bx	lr
   87b26:	bf00      	nop

00087b28 <__i2b>:
   87b28:	b510      	push	{r4, lr}
   87b2a:	460c      	mov	r4, r1
   87b2c:	2101      	movs	r1, #1
   87b2e:	f7ff ff39 	bl	879a4 <_Balloc>
   87b32:	2201      	movs	r2, #1
   87b34:	6144      	str	r4, [r0, #20]
   87b36:	6102      	str	r2, [r0, #16]
   87b38:	bd10      	pop	{r4, pc}
   87b3a:	bf00      	nop

00087b3c <__multiply>:
   87b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87b40:	690c      	ldr	r4, [r1, #16]
   87b42:	6915      	ldr	r5, [r2, #16]
   87b44:	b083      	sub	sp, #12
   87b46:	42ac      	cmp	r4, r5
   87b48:	468b      	mov	fp, r1
   87b4a:	4616      	mov	r6, r2
   87b4c:	da04      	bge.n	87b58 <__multiply+0x1c>
   87b4e:	4622      	mov	r2, r4
   87b50:	46b3      	mov	fp, r6
   87b52:	462c      	mov	r4, r5
   87b54:	460e      	mov	r6, r1
   87b56:	4615      	mov	r5, r2
   87b58:	f8db 3008 	ldr.w	r3, [fp, #8]
   87b5c:	eb04 0805 	add.w	r8, r4, r5
   87b60:	f8db 1004 	ldr.w	r1, [fp, #4]
   87b64:	4598      	cmp	r8, r3
   87b66:	bfc8      	it	gt
   87b68:	3101      	addgt	r1, #1
   87b6a:	f7ff ff1b 	bl	879a4 <_Balloc>
   87b6e:	f100 0914 	add.w	r9, r0, #20
   87b72:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   87b76:	45d1      	cmp	r9, sl
   87b78:	9000      	str	r0, [sp, #0]
   87b7a:	d205      	bcs.n	87b88 <__multiply+0x4c>
   87b7c:	464b      	mov	r3, r9
   87b7e:	2100      	movs	r1, #0
   87b80:	f843 1b04 	str.w	r1, [r3], #4
   87b84:	459a      	cmp	sl, r3
   87b86:	d8fb      	bhi.n	87b80 <__multiply+0x44>
   87b88:	f106 0c14 	add.w	ip, r6, #20
   87b8c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   87b90:	f10b 0b14 	add.w	fp, fp, #20
   87b94:	459c      	cmp	ip, r3
   87b96:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   87b9a:	d24b      	bcs.n	87c34 <__multiply+0xf8>
   87b9c:	f8cd a004 	str.w	sl, [sp, #4]
   87ba0:	469a      	mov	sl, r3
   87ba2:	f8dc 5000 	ldr.w	r5, [ip]
   87ba6:	b2af      	uxth	r7, r5
   87ba8:	b1e7      	cbz	r7, 87be4 <__multiply+0xa8>
   87baa:	464d      	mov	r5, r9
   87bac:	465e      	mov	r6, fp
   87bae:	2100      	movs	r1, #0
   87bb0:	f856 2b04 	ldr.w	r2, [r6], #4
   87bb4:	6828      	ldr	r0, [r5, #0]
   87bb6:	b293      	uxth	r3, r2
   87bb8:	b284      	uxth	r4, r0
   87bba:	0c12      	lsrs	r2, r2, #16
   87bbc:	fb07 4303 	mla	r3, r7, r3, r4
   87bc0:	0c00      	lsrs	r0, r0, #16
   87bc2:	fb07 0202 	mla	r2, r7, r2, r0
   87bc6:	440b      	add	r3, r1
   87bc8:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   87bcc:	b29b      	uxth	r3, r3
   87bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   87bd2:	45b6      	cmp	lr, r6
   87bd4:	f845 3b04 	str.w	r3, [r5], #4
   87bd8:	ea4f 4111 	mov.w	r1, r1, lsr #16
   87bdc:	d8e8      	bhi.n	87bb0 <__multiply+0x74>
   87bde:	6029      	str	r1, [r5, #0]
   87be0:	f8dc 5000 	ldr.w	r5, [ip]
   87be4:	0c2d      	lsrs	r5, r5, #16
   87be6:	d01d      	beq.n	87c24 <__multiply+0xe8>
   87be8:	f8d9 3000 	ldr.w	r3, [r9]
   87bec:	4648      	mov	r0, r9
   87bee:	461c      	mov	r4, r3
   87bf0:	4659      	mov	r1, fp
   87bf2:	2200      	movs	r2, #0
   87bf4:	880e      	ldrh	r6, [r1, #0]
   87bf6:	0c24      	lsrs	r4, r4, #16
   87bf8:	fb05 4406 	mla	r4, r5, r6, r4
   87bfc:	b29b      	uxth	r3, r3
   87bfe:	4422      	add	r2, r4
   87c00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   87c04:	f840 3b04 	str.w	r3, [r0], #4
   87c08:	f851 3b04 	ldr.w	r3, [r1], #4
   87c0c:	6804      	ldr	r4, [r0, #0]
   87c0e:	0c1b      	lsrs	r3, r3, #16
   87c10:	b2a6      	uxth	r6, r4
   87c12:	fb05 6303 	mla	r3, r5, r3, r6
   87c16:	458e      	cmp	lr, r1
   87c18:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   87c1c:	ea4f 4213 	mov.w	r2, r3, lsr #16
   87c20:	d8e8      	bhi.n	87bf4 <__multiply+0xb8>
   87c22:	6003      	str	r3, [r0, #0]
   87c24:	f10c 0c04 	add.w	ip, ip, #4
   87c28:	45e2      	cmp	sl, ip
   87c2a:	f109 0904 	add.w	r9, r9, #4
   87c2e:	d8b8      	bhi.n	87ba2 <__multiply+0x66>
   87c30:	f8dd a004 	ldr.w	sl, [sp, #4]
   87c34:	f1b8 0f00 	cmp.w	r8, #0
   87c38:	dd0b      	ble.n	87c52 <__multiply+0x116>
   87c3a:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   87c3e:	f1aa 0a04 	sub.w	sl, sl, #4
   87c42:	b11b      	cbz	r3, 87c4c <__multiply+0x110>
   87c44:	e005      	b.n	87c52 <__multiply+0x116>
   87c46:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   87c4a:	b913      	cbnz	r3, 87c52 <__multiply+0x116>
   87c4c:	f1b8 0801 	subs.w	r8, r8, #1
   87c50:	d1f9      	bne.n	87c46 <__multiply+0x10a>
   87c52:	9800      	ldr	r0, [sp, #0]
   87c54:	f8c0 8010 	str.w	r8, [r0, #16]
   87c58:	b003      	add	sp, #12
   87c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87c5e:	bf00      	nop

00087c60 <__pow5mult>:
   87c60:	f012 0303 	ands.w	r3, r2, #3
   87c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87c68:	4614      	mov	r4, r2
   87c6a:	4607      	mov	r7, r0
   87c6c:	d12e      	bne.n	87ccc <__pow5mult+0x6c>
   87c6e:	460d      	mov	r5, r1
   87c70:	10a4      	asrs	r4, r4, #2
   87c72:	d01c      	beq.n	87cae <__pow5mult+0x4e>
   87c74:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   87c76:	b396      	cbz	r6, 87cde <__pow5mult+0x7e>
   87c78:	07e3      	lsls	r3, r4, #31
   87c7a:	f04f 0800 	mov.w	r8, #0
   87c7e:	d406      	bmi.n	87c8e <__pow5mult+0x2e>
   87c80:	1064      	asrs	r4, r4, #1
   87c82:	d014      	beq.n	87cae <__pow5mult+0x4e>
   87c84:	6830      	ldr	r0, [r6, #0]
   87c86:	b1a8      	cbz	r0, 87cb4 <__pow5mult+0x54>
   87c88:	4606      	mov	r6, r0
   87c8a:	07e3      	lsls	r3, r4, #31
   87c8c:	d5f8      	bpl.n	87c80 <__pow5mult+0x20>
   87c8e:	4632      	mov	r2, r6
   87c90:	4629      	mov	r1, r5
   87c92:	4638      	mov	r0, r7
   87c94:	f7ff ff52 	bl	87b3c <__multiply>
   87c98:	b1b5      	cbz	r5, 87cc8 <__pow5mult+0x68>
   87c9a:	686a      	ldr	r2, [r5, #4]
   87c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   87c9e:	1064      	asrs	r4, r4, #1
   87ca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   87ca4:	6029      	str	r1, [r5, #0]
   87ca6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   87caa:	4605      	mov	r5, r0
   87cac:	d1ea      	bne.n	87c84 <__pow5mult+0x24>
   87cae:	4628      	mov	r0, r5
   87cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87cb4:	4632      	mov	r2, r6
   87cb6:	4631      	mov	r1, r6
   87cb8:	4638      	mov	r0, r7
   87cba:	f7ff ff3f 	bl	87b3c <__multiply>
   87cbe:	6030      	str	r0, [r6, #0]
   87cc0:	f8c0 8000 	str.w	r8, [r0]
   87cc4:	4606      	mov	r6, r0
   87cc6:	e7e0      	b.n	87c8a <__pow5mult+0x2a>
   87cc8:	4605      	mov	r5, r0
   87cca:	e7d9      	b.n	87c80 <__pow5mult+0x20>
   87ccc:	4a0b      	ldr	r2, [pc, #44]	; (87cfc <__pow5mult+0x9c>)
   87cce:	3b01      	subs	r3, #1
   87cd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   87cd4:	2300      	movs	r3, #0
   87cd6:	f7ff fe95 	bl	87a04 <__multadd>
   87cda:	4605      	mov	r5, r0
   87cdc:	e7c8      	b.n	87c70 <__pow5mult+0x10>
   87cde:	2101      	movs	r1, #1
   87ce0:	4638      	mov	r0, r7
   87ce2:	f7ff fe5f 	bl	879a4 <_Balloc>
   87ce6:	f240 2171 	movw	r1, #625	; 0x271
   87cea:	2201      	movs	r2, #1
   87cec:	2300      	movs	r3, #0
   87cee:	6141      	str	r1, [r0, #20]
   87cf0:	6102      	str	r2, [r0, #16]
   87cf2:	4606      	mov	r6, r0
   87cf4:	64b8      	str	r0, [r7, #72]	; 0x48
   87cf6:	6003      	str	r3, [r0, #0]
   87cf8:	e7be      	b.n	87c78 <__pow5mult+0x18>
   87cfa:	bf00      	nop
   87cfc:	0008a950 	.word	0x0008a950

00087d00 <__lshift>:
   87d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   87d04:	690b      	ldr	r3, [r1, #16]
   87d06:	1154      	asrs	r4, r2, #5
   87d08:	eb04 0803 	add.w	r8, r4, r3
   87d0c:	688b      	ldr	r3, [r1, #8]
   87d0e:	f108 0501 	add.w	r5, r8, #1
   87d12:	429d      	cmp	r5, r3
   87d14:	460e      	mov	r6, r1
   87d16:	4691      	mov	r9, r2
   87d18:	4607      	mov	r7, r0
   87d1a:	6849      	ldr	r1, [r1, #4]
   87d1c:	dd04      	ble.n	87d28 <__lshift+0x28>
   87d1e:	005b      	lsls	r3, r3, #1
   87d20:	429d      	cmp	r5, r3
   87d22:	f101 0101 	add.w	r1, r1, #1
   87d26:	dcfa      	bgt.n	87d1e <__lshift+0x1e>
   87d28:	4638      	mov	r0, r7
   87d2a:	f7ff fe3b 	bl	879a4 <_Balloc>
   87d2e:	2c00      	cmp	r4, #0
   87d30:	f100 0314 	add.w	r3, r0, #20
   87d34:	dd06      	ble.n	87d44 <__lshift+0x44>
   87d36:	2100      	movs	r1, #0
   87d38:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   87d3c:	f843 1b04 	str.w	r1, [r3], #4
   87d40:	429a      	cmp	r2, r3
   87d42:	d1fb      	bne.n	87d3c <__lshift+0x3c>
   87d44:	6934      	ldr	r4, [r6, #16]
   87d46:	f106 0114 	add.w	r1, r6, #20
   87d4a:	f019 091f 	ands.w	r9, r9, #31
   87d4e:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   87d52:	d01d      	beq.n	87d90 <__lshift+0x90>
   87d54:	2200      	movs	r2, #0
   87d56:	f1c9 0c20 	rsb	ip, r9, #32
   87d5a:	680c      	ldr	r4, [r1, #0]
   87d5c:	fa04 f409 	lsl.w	r4, r4, r9
   87d60:	4314      	orrs	r4, r2
   87d62:	f843 4b04 	str.w	r4, [r3], #4
   87d66:	f851 2b04 	ldr.w	r2, [r1], #4
   87d6a:	458e      	cmp	lr, r1
   87d6c:	fa22 f20c 	lsr.w	r2, r2, ip
   87d70:	d8f3      	bhi.n	87d5a <__lshift+0x5a>
   87d72:	601a      	str	r2, [r3, #0]
   87d74:	b10a      	cbz	r2, 87d7a <__lshift+0x7a>
   87d76:	f108 0502 	add.w	r5, r8, #2
   87d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   87d7c:	6872      	ldr	r2, [r6, #4]
   87d7e:	3d01      	subs	r5, #1
   87d80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   87d84:	6105      	str	r5, [r0, #16]
   87d86:	6031      	str	r1, [r6, #0]
   87d88:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   87d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   87d90:	3b04      	subs	r3, #4
   87d92:	f851 2b04 	ldr.w	r2, [r1], #4
   87d96:	458e      	cmp	lr, r1
   87d98:	f843 2f04 	str.w	r2, [r3, #4]!
   87d9c:	d8f9      	bhi.n	87d92 <__lshift+0x92>
   87d9e:	e7ec      	b.n	87d7a <__lshift+0x7a>

00087da0 <__mcmp>:
   87da0:	b430      	push	{r4, r5}
   87da2:	690b      	ldr	r3, [r1, #16]
   87da4:	4605      	mov	r5, r0
   87da6:	6900      	ldr	r0, [r0, #16]
   87da8:	1ac0      	subs	r0, r0, r3
   87daa:	d10f      	bne.n	87dcc <__mcmp+0x2c>
   87dac:	009b      	lsls	r3, r3, #2
   87dae:	3514      	adds	r5, #20
   87db0:	3114      	adds	r1, #20
   87db2:	4419      	add	r1, r3
   87db4:	442b      	add	r3, r5
   87db6:	e001      	b.n	87dbc <__mcmp+0x1c>
   87db8:	429d      	cmp	r5, r3
   87dba:	d207      	bcs.n	87dcc <__mcmp+0x2c>
   87dbc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   87dc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   87dc4:	4294      	cmp	r4, r2
   87dc6:	d0f7      	beq.n	87db8 <__mcmp+0x18>
   87dc8:	d302      	bcc.n	87dd0 <__mcmp+0x30>
   87dca:	2001      	movs	r0, #1
   87dcc:	bc30      	pop	{r4, r5}
   87dce:	4770      	bx	lr
   87dd0:	f04f 30ff 	mov.w	r0, #4294967295
   87dd4:	e7fa      	b.n	87dcc <__mcmp+0x2c>
   87dd6:	bf00      	nop

00087dd8 <__mdiff>:
   87dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87ddc:	690c      	ldr	r4, [r1, #16]
   87dde:	4689      	mov	r9, r1
   87de0:	6911      	ldr	r1, [r2, #16]
   87de2:	4692      	mov	sl, r2
   87de4:	1a64      	subs	r4, r4, r1
   87de6:	2c00      	cmp	r4, #0
   87de8:	d117      	bne.n	87e1a <__mdiff+0x42>
   87dea:	0089      	lsls	r1, r1, #2
   87dec:	f109 0714 	add.w	r7, r9, #20
   87df0:	f102 0614 	add.w	r6, r2, #20
   87df4:	187b      	adds	r3, r7, r1
   87df6:	4431      	add	r1, r6
   87df8:	e001      	b.n	87dfe <__mdiff+0x26>
   87dfa:	429f      	cmp	r7, r3
   87dfc:	d265      	bcs.n	87eca <__mdiff+0xf2>
   87dfe:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   87e02:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   87e06:	4295      	cmp	r5, r2
   87e08:	d0f7      	beq.n	87dfa <__mdiff+0x22>
   87e0a:	d267      	bcs.n	87edc <__mdiff+0x104>
   87e0c:	464b      	mov	r3, r9
   87e0e:	46bb      	mov	fp, r7
   87e10:	46d1      	mov	r9, sl
   87e12:	4637      	mov	r7, r6
   87e14:	469a      	mov	sl, r3
   87e16:	2401      	movs	r4, #1
   87e18:	e005      	b.n	87e26 <__mdiff+0x4e>
   87e1a:	db61      	blt.n	87ee0 <__mdiff+0x108>
   87e1c:	2400      	movs	r4, #0
   87e1e:	f109 0714 	add.w	r7, r9, #20
   87e22:	f10a 0b14 	add.w	fp, sl, #20
   87e26:	f8d9 1004 	ldr.w	r1, [r9, #4]
   87e2a:	f7ff fdbb 	bl	879a4 <_Balloc>
   87e2e:	465d      	mov	r5, fp
   87e30:	f04f 0800 	mov.w	r8, #0
   87e34:	f8d9 e010 	ldr.w	lr, [r9, #16]
   87e38:	f8da 3010 	ldr.w	r3, [sl, #16]
   87e3c:	463e      	mov	r6, r7
   87e3e:	60c4      	str	r4, [r0, #12]
   87e40:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   87e44:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   87e48:	f100 0414 	add.w	r4, r0, #20
   87e4c:	f856 9b04 	ldr.w	r9, [r6], #4
   87e50:	f855 2b04 	ldr.w	r2, [r5], #4
   87e54:	fa1f f389 	uxth.w	r3, r9
   87e58:	4443      	add	r3, r8
   87e5a:	fa1f f882 	uxth.w	r8, r2
   87e5e:	0c12      	lsrs	r2, r2, #16
   87e60:	eba3 0308 	sub.w	r3, r3, r8
   87e64:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   87e68:	eb02 4223 	add.w	r2, r2, r3, asr #16
   87e6c:	b29b      	uxth	r3, r3
   87e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   87e72:	45ac      	cmp	ip, r5
   87e74:	f844 3b04 	str.w	r3, [r4], #4
   87e78:	ea4f 4822 	mov.w	r8, r2, asr #16
   87e7c:	d8e6      	bhi.n	87e4c <__mdiff+0x74>
   87e7e:	42b7      	cmp	r7, r6
   87e80:	d917      	bls.n	87eb2 <__mdiff+0xda>
   87e82:	46a4      	mov	ip, r4
   87e84:	4635      	mov	r5, r6
   87e86:	f855 3b04 	ldr.w	r3, [r5], #4
   87e8a:	b299      	uxth	r1, r3
   87e8c:	4441      	add	r1, r8
   87e8e:	140a      	asrs	r2, r1, #16
   87e90:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   87e94:	b289      	uxth	r1, r1
   87e96:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   87e9a:	42af      	cmp	r7, r5
   87e9c:	f84c 3b04 	str.w	r3, [ip], #4
   87ea0:	ea4f 4822 	mov.w	r8, r2, asr #16
   87ea4:	d8ef      	bhi.n	87e86 <__mdiff+0xae>
   87ea6:	43f6      	mvns	r6, r6
   87ea8:	4437      	add	r7, r6
   87eaa:	f027 0703 	bic.w	r7, r7, #3
   87eae:	3704      	adds	r7, #4
   87eb0:	443c      	add	r4, r7
   87eb2:	3c04      	subs	r4, #4
   87eb4:	b92b      	cbnz	r3, 87ec2 <__mdiff+0xea>
   87eb6:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   87eba:	f10e 3eff 	add.w	lr, lr, #4294967295
   87ebe:	2b00      	cmp	r3, #0
   87ec0:	d0f9      	beq.n	87eb6 <__mdiff+0xde>
   87ec2:	f8c0 e010 	str.w	lr, [r0, #16]
   87ec6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87eca:	2100      	movs	r1, #0
   87ecc:	f7ff fd6a 	bl	879a4 <_Balloc>
   87ed0:	2201      	movs	r2, #1
   87ed2:	2300      	movs	r3, #0
   87ed4:	6102      	str	r2, [r0, #16]
   87ed6:	6143      	str	r3, [r0, #20]
   87ed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87edc:	46b3      	mov	fp, r6
   87ede:	e7a2      	b.n	87e26 <__mdiff+0x4e>
   87ee0:	464b      	mov	r3, r9
   87ee2:	f109 0b14 	add.w	fp, r9, #20
   87ee6:	f102 0714 	add.w	r7, r2, #20
   87eea:	4691      	mov	r9, r2
   87eec:	2401      	movs	r4, #1
   87eee:	469a      	mov	sl, r3
   87ef0:	e799      	b.n	87e26 <__mdiff+0x4e>
   87ef2:	bf00      	nop

00087ef4 <__d2b>:
   87ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   87ef6:	2101      	movs	r1, #1
   87ef8:	b083      	sub	sp, #12
   87efa:	461c      	mov	r4, r3
   87efc:	f3c3 550a 	ubfx	r5, r3, #20, #11
   87f00:	4616      	mov	r6, r2
   87f02:	f7ff fd4f 	bl	879a4 <_Balloc>
   87f06:	f3c4 0413 	ubfx	r4, r4, #0, #20
   87f0a:	4607      	mov	r7, r0
   87f0c:	b10d      	cbz	r5, 87f12 <__d2b+0x1e>
   87f0e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   87f12:	9401      	str	r4, [sp, #4]
   87f14:	b306      	cbz	r6, 87f58 <__d2b+0x64>
   87f16:	a802      	add	r0, sp, #8
   87f18:	f840 6d08 	str.w	r6, [r0, #-8]!
   87f1c:	f7ff fdd4 	bl	87ac8 <__lo0bits>
   87f20:	2800      	cmp	r0, #0
   87f22:	d130      	bne.n	87f86 <__d2b+0x92>
   87f24:	e89d 000c 	ldmia.w	sp, {r2, r3}
   87f28:	617a      	str	r2, [r7, #20]
   87f2a:	2b00      	cmp	r3, #0
   87f2c:	bf0c      	ite	eq
   87f2e:	2101      	moveq	r1, #1
   87f30:	2102      	movne	r1, #2
   87f32:	61bb      	str	r3, [r7, #24]
   87f34:	6139      	str	r1, [r7, #16]
   87f36:	b9d5      	cbnz	r5, 87f6e <__d2b+0x7a>
   87f38:	9a08      	ldr	r2, [sp, #32]
   87f3a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   87f3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   87f42:	6010      	str	r0, [r2, #0]
   87f44:	6918      	ldr	r0, [r3, #16]
   87f46:	f7ff fd9f 	bl	87a88 <__hi0bits>
   87f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87f4c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   87f50:	6018      	str	r0, [r3, #0]
   87f52:	4638      	mov	r0, r7
   87f54:	b003      	add	sp, #12
   87f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87f58:	a801      	add	r0, sp, #4
   87f5a:	f7ff fdb5 	bl	87ac8 <__lo0bits>
   87f5e:	2201      	movs	r2, #1
   87f60:	9b01      	ldr	r3, [sp, #4]
   87f62:	4611      	mov	r1, r2
   87f64:	3020      	adds	r0, #32
   87f66:	613a      	str	r2, [r7, #16]
   87f68:	617b      	str	r3, [r7, #20]
   87f6a:	2d00      	cmp	r5, #0
   87f6c:	d0e4      	beq.n	87f38 <__d2b+0x44>
   87f6e:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   87f72:	9a08      	ldr	r2, [sp, #32]
   87f74:	4403      	add	r3, r0
   87f76:	6013      	str	r3, [r2, #0]
   87f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87f7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   87f7e:	6018      	str	r0, [r3, #0]
   87f80:	4638      	mov	r0, r7
   87f82:	b003      	add	sp, #12
   87f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87f86:	9b01      	ldr	r3, [sp, #4]
   87f88:	f1c0 0220 	rsb	r2, r0, #32
   87f8c:	9900      	ldr	r1, [sp, #0]
   87f8e:	fa03 f202 	lsl.w	r2, r3, r2
   87f92:	430a      	orrs	r2, r1
   87f94:	40c3      	lsrs	r3, r0
   87f96:	9301      	str	r3, [sp, #4]
   87f98:	617a      	str	r2, [r7, #20]
   87f9a:	e7c6      	b.n	87f2a <__d2b+0x36>

00087f9c <_sbrk_r>:
   87f9c:	b538      	push	{r3, r4, r5, lr}
   87f9e:	2300      	movs	r3, #0
   87fa0:	4c06      	ldr	r4, [pc, #24]	; (87fbc <_sbrk_r+0x20>)
   87fa2:	4605      	mov	r5, r0
   87fa4:	4608      	mov	r0, r1
   87fa6:	6023      	str	r3, [r4, #0]
   87fa8:	f7f9 fea0 	bl	81cec <_sbrk>
   87fac:	1c43      	adds	r3, r0, #1
   87fae:	d000      	beq.n	87fb2 <_sbrk_r+0x16>
   87fb0:	bd38      	pop	{r3, r4, r5, pc}
   87fb2:	6823      	ldr	r3, [r4, #0]
   87fb4:	2b00      	cmp	r3, #0
   87fb6:	d0fb      	beq.n	87fb0 <_sbrk_r+0x14>
   87fb8:	602b      	str	r3, [r5, #0]
   87fba:	bd38      	pop	{r3, r4, r5, pc}
   87fbc:	20002304 	.word	0x20002304

00087fc0 <__ssprint_r>:
   87fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87fc4:	6893      	ldr	r3, [r2, #8]
   87fc6:	b083      	sub	sp, #12
   87fc8:	4690      	mov	r8, r2
   87fca:	2b00      	cmp	r3, #0
   87fcc:	d070      	beq.n	880b0 <__ssprint_r+0xf0>
   87fce:	4682      	mov	sl, r0
   87fd0:	460c      	mov	r4, r1
   87fd2:	6817      	ldr	r7, [r2, #0]
   87fd4:	688d      	ldr	r5, [r1, #8]
   87fd6:	6808      	ldr	r0, [r1, #0]
   87fd8:	e042      	b.n	88060 <__ssprint_r+0xa0>
   87fda:	89a3      	ldrh	r3, [r4, #12]
   87fdc:	f413 6f90 	tst.w	r3, #1152	; 0x480
   87fe0:	d02e      	beq.n	88040 <__ssprint_r+0x80>
   87fe2:	6965      	ldr	r5, [r4, #20]
   87fe4:	6921      	ldr	r1, [r4, #16]
   87fe6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   87fea:	eba0 0b01 	sub.w	fp, r0, r1
   87fee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   87ff2:	f10b 0001 	add.w	r0, fp, #1
   87ff6:	106d      	asrs	r5, r5, #1
   87ff8:	4430      	add	r0, r6
   87ffa:	42a8      	cmp	r0, r5
   87ffc:	462a      	mov	r2, r5
   87ffe:	bf84      	itt	hi
   88000:	4605      	movhi	r5, r0
   88002:	462a      	movhi	r2, r5
   88004:	055b      	lsls	r3, r3, #21
   88006:	d538      	bpl.n	8807a <__ssprint_r+0xba>
   88008:	4611      	mov	r1, r2
   8800a:	4650      	mov	r0, sl
   8800c:	f7ff f94a 	bl	872a4 <_malloc_r>
   88010:	2800      	cmp	r0, #0
   88012:	d03c      	beq.n	8808e <__ssprint_r+0xce>
   88014:	465a      	mov	r2, fp
   88016:	6921      	ldr	r1, [r4, #16]
   88018:	9001      	str	r0, [sp, #4]
   8801a:	f7ff fc41 	bl	878a0 <memcpy>
   8801e:	89a2      	ldrh	r2, [r4, #12]
   88020:	9b01      	ldr	r3, [sp, #4]
   88022:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   88026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8802a:	81a2      	strh	r2, [r4, #12]
   8802c:	eba5 020b 	sub.w	r2, r5, fp
   88030:	eb03 000b 	add.w	r0, r3, fp
   88034:	6165      	str	r5, [r4, #20]
   88036:	46b3      	mov	fp, r6
   88038:	4635      	mov	r5, r6
   8803a:	6123      	str	r3, [r4, #16]
   8803c:	6020      	str	r0, [r4, #0]
   8803e:	60a2      	str	r2, [r4, #8]
   88040:	465a      	mov	r2, fp
   88042:	4649      	mov	r1, r9
   88044:	f000 fa0e 	bl	88464 <memmove>
   88048:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8804c:	68a2      	ldr	r2, [r4, #8]
   8804e:	6820      	ldr	r0, [r4, #0]
   88050:	1b55      	subs	r5, r2, r5
   88052:	4458      	add	r0, fp
   88054:	1b9e      	subs	r6, r3, r6
   88056:	60a5      	str	r5, [r4, #8]
   88058:	6020      	str	r0, [r4, #0]
   8805a:	f8c8 6008 	str.w	r6, [r8, #8]
   8805e:	b33e      	cbz	r6, 880b0 <__ssprint_r+0xf0>
   88060:	687e      	ldr	r6, [r7, #4]
   88062:	463b      	mov	r3, r7
   88064:	3708      	adds	r7, #8
   88066:	2e00      	cmp	r6, #0
   88068:	d0fa      	beq.n	88060 <__ssprint_r+0xa0>
   8806a:	42ae      	cmp	r6, r5
   8806c:	f8d3 9000 	ldr.w	r9, [r3]
   88070:	46ab      	mov	fp, r5
   88072:	d2b2      	bcs.n	87fda <__ssprint_r+0x1a>
   88074:	4635      	mov	r5, r6
   88076:	46b3      	mov	fp, r6
   88078:	e7e2      	b.n	88040 <__ssprint_r+0x80>
   8807a:	4650      	mov	r0, sl
   8807c:	f000 fa56 	bl	8852c <_realloc_r>
   88080:	4603      	mov	r3, r0
   88082:	2800      	cmp	r0, #0
   88084:	d1d2      	bne.n	8802c <__ssprint_r+0x6c>
   88086:	6921      	ldr	r1, [r4, #16]
   88088:	4650      	mov	r0, sl
   8808a:	f000 f905 	bl	88298 <_free_r>
   8808e:	230c      	movs	r3, #12
   88090:	2200      	movs	r2, #0
   88092:	f04f 30ff 	mov.w	r0, #4294967295
   88096:	f8ca 3000 	str.w	r3, [sl]
   8809a:	89a3      	ldrh	r3, [r4, #12]
   8809c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   880a0:	81a3      	strh	r3, [r4, #12]
   880a2:	f8c8 2008 	str.w	r2, [r8, #8]
   880a6:	f8c8 2004 	str.w	r2, [r8, #4]
   880aa:	b003      	add	sp, #12
   880ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   880b0:	2000      	movs	r0, #0
   880b2:	f8c8 0004 	str.w	r0, [r8, #4]
   880b6:	b003      	add	sp, #12
   880b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000880bc <__ascii_wctomb>:
   880bc:	b119      	cbz	r1, 880c6 <__ascii_wctomb+0xa>
   880be:	2aff      	cmp	r2, #255	; 0xff
   880c0:	d803      	bhi.n	880ca <__ascii_wctomb+0xe>
   880c2:	700a      	strb	r2, [r1, #0]
   880c4:	2101      	movs	r1, #1
   880c6:	4608      	mov	r0, r1
   880c8:	4770      	bx	lr
   880ca:	238a      	movs	r3, #138	; 0x8a
   880cc:	f04f 31ff 	mov.w	r1, #4294967295
   880d0:	6003      	str	r3, [r0, #0]
   880d2:	e7f8      	b.n	880c6 <__ascii_wctomb+0xa>

000880d4 <__register_exitproc>:
   880d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   880d8:	4d2c      	ldr	r5, [pc, #176]	; (8818c <__register_exitproc+0xb8>)
   880da:	4606      	mov	r6, r0
   880dc:	6828      	ldr	r0, [r5, #0]
   880de:	4698      	mov	r8, r3
   880e0:	460f      	mov	r7, r1
   880e2:	4691      	mov	r9, r2
   880e4:	f7ff f8da 	bl	8729c <__retarget_lock_acquire_recursive>
   880e8:	4b29      	ldr	r3, [pc, #164]	; (88190 <__register_exitproc+0xbc>)
   880ea:	681c      	ldr	r4, [r3, #0]
   880ec:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   880f0:	2b00      	cmp	r3, #0
   880f2:	d03e      	beq.n	88172 <__register_exitproc+0x9e>
   880f4:	685a      	ldr	r2, [r3, #4]
   880f6:	2a1f      	cmp	r2, #31
   880f8:	dc1c      	bgt.n	88134 <__register_exitproc+0x60>
   880fa:	f102 0e01 	add.w	lr, r2, #1
   880fe:	b176      	cbz	r6, 8811e <__register_exitproc+0x4a>
   88100:	2101      	movs	r1, #1
   88102:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   88106:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8810a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8810e:	4091      	lsls	r1, r2
   88110:	4308      	orrs	r0, r1
   88112:	2e02      	cmp	r6, #2
   88114:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   88118:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8811c:	d023      	beq.n	88166 <__register_exitproc+0x92>
   8811e:	3202      	adds	r2, #2
   88120:	f8c3 e004 	str.w	lr, [r3, #4]
   88124:	6828      	ldr	r0, [r5, #0]
   88126:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8812a:	f7ff f8b9 	bl	872a0 <__retarget_lock_release_recursive>
   8812e:	2000      	movs	r0, #0
   88130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88134:	4b17      	ldr	r3, [pc, #92]	; (88194 <__register_exitproc+0xc0>)
   88136:	b30b      	cbz	r3, 8817c <__register_exitproc+0xa8>
   88138:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8813c:	f3af 8000 	nop.w
   88140:	4603      	mov	r3, r0
   88142:	b1d8      	cbz	r0, 8817c <__register_exitproc+0xa8>
   88144:	2000      	movs	r0, #0
   88146:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8814a:	f04f 0e01 	mov.w	lr, #1
   8814e:	6058      	str	r0, [r3, #4]
   88150:	6019      	str	r1, [r3, #0]
   88152:	4602      	mov	r2, r0
   88154:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   88158:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8815c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   88160:	2e00      	cmp	r6, #0
   88162:	d0dc      	beq.n	8811e <__register_exitproc+0x4a>
   88164:	e7cc      	b.n	88100 <__register_exitproc+0x2c>
   88166:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8816a:	4301      	orrs	r1, r0
   8816c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   88170:	e7d5      	b.n	8811e <__register_exitproc+0x4a>
   88172:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   88176:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8817a:	e7bb      	b.n	880f4 <__register_exitproc+0x20>
   8817c:	6828      	ldr	r0, [r5, #0]
   8817e:	f7ff f88f 	bl	872a0 <__retarget_lock_release_recursive>
   88182:	f04f 30ff 	mov.w	r0, #4294967295
   88186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8818a:	bf00      	nop
   8818c:	20000a58 	.word	0x20000a58
   88190:	0008a7d8 	.word	0x0008a7d8
   88194:	00000000 	.word	0x00000000

00088198 <_calloc_r>:
   88198:	b510      	push	{r4, lr}
   8819a:	fb02 f101 	mul.w	r1, r2, r1
   8819e:	f7ff f881 	bl	872a4 <_malloc_r>
   881a2:	4604      	mov	r4, r0
   881a4:	b1d8      	cbz	r0, 881de <_calloc_r+0x46>
   881a6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   881aa:	f022 0203 	bic.w	r2, r2, #3
   881ae:	3a04      	subs	r2, #4
   881b0:	2a24      	cmp	r2, #36	; 0x24
   881b2:	d818      	bhi.n	881e6 <_calloc_r+0x4e>
   881b4:	2a13      	cmp	r2, #19
   881b6:	d914      	bls.n	881e2 <_calloc_r+0x4a>
   881b8:	2300      	movs	r3, #0
   881ba:	2a1b      	cmp	r2, #27
   881bc:	6003      	str	r3, [r0, #0]
   881be:	6043      	str	r3, [r0, #4]
   881c0:	d916      	bls.n	881f0 <_calloc_r+0x58>
   881c2:	2a24      	cmp	r2, #36	; 0x24
   881c4:	6083      	str	r3, [r0, #8]
   881c6:	60c3      	str	r3, [r0, #12]
   881c8:	bf11      	iteee	ne
   881ca:	f100 0210 	addne.w	r2, r0, #16
   881ce:	6103      	streq	r3, [r0, #16]
   881d0:	6143      	streq	r3, [r0, #20]
   881d2:	f100 0218 	addeq.w	r2, r0, #24
   881d6:	2300      	movs	r3, #0
   881d8:	6013      	str	r3, [r2, #0]
   881da:	6053      	str	r3, [r2, #4]
   881dc:	6093      	str	r3, [r2, #8]
   881de:	4620      	mov	r0, r4
   881e0:	bd10      	pop	{r4, pc}
   881e2:	4602      	mov	r2, r0
   881e4:	e7f7      	b.n	881d6 <_calloc_r+0x3e>
   881e6:	2100      	movs	r1, #0
   881e8:	f7fc fc60 	bl	84aac <memset>
   881ec:	4620      	mov	r0, r4
   881ee:	bd10      	pop	{r4, pc}
   881f0:	f100 0208 	add.w	r2, r0, #8
   881f4:	e7ef      	b.n	881d6 <_calloc_r+0x3e>
   881f6:	bf00      	nop

000881f8 <_malloc_trim_r>:
   881f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   881fa:	460c      	mov	r4, r1
   881fc:	4f23      	ldr	r7, [pc, #140]	; (8828c <_malloc_trim_r+0x94>)
   881fe:	4606      	mov	r6, r0
   88200:	f7ff fbc4 	bl	8798c <__malloc_lock>
   88204:	68bb      	ldr	r3, [r7, #8]
   88206:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8820a:	685d      	ldr	r5, [r3, #4]
   8820c:	310f      	adds	r1, #15
   8820e:	f025 0503 	bic.w	r5, r5, #3
   88212:	4429      	add	r1, r5
   88214:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   88218:	f021 010f 	bic.w	r1, r1, #15
   8821c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   88220:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   88224:	db07      	blt.n	88236 <_malloc_trim_r+0x3e>
   88226:	2100      	movs	r1, #0
   88228:	4630      	mov	r0, r6
   8822a:	f7ff feb7 	bl	87f9c <_sbrk_r>
   8822e:	68bb      	ldr	r3, [r7, #8]
   88230:	442b      	add	r3, r5
   88232:	4298      	cmp	r0, r3
   88234:	d004      	beq.n	88240 <_malloc_trim_r+0x48>
   88236:	4630      	mov	r0, r6
   88238:	f7ff fbae 	bl	87998 <__malloc_unlock>
   8823c:	2000      	movs	r0, #0
   8823e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88240:	4261      	negs	r1, r4
   88242:	4630      	mov	r0, r6
   88244:	f7ff feaa 	bl	87f9c <_sbrk_r>
   88248:	3001      	adds	r0, #1
   8824a:	d00d      	beq.n	88268 <_malloc_trim_r+0x70>
   8824c:	4b10      	ldr	r3, [pc, #64]	; (88290 <_malloc_trim_r+0x98>)
   8824e:	68ba      	ldr	r2, [r7, #8]
   88250:	6819      	ldr	r1, [r3, #0]
   88252:	1b2d      	subs	r5, r5, r4
   88254:	f045 0501 	orr.w	r5, r5, #1
   88258:	4630      	mov	r0, r6
   8825a:	1b09      	subs	r1, r1, r4
   8825c:	6055      	str	r5, [r2, #4]
   8825e:	6019      	str	r1, [r3, #0]
   88260:	f7ff fb9a 	bl	87998 <__malloc_unlock>
   88264:	2001      	movs	r0, #1
   88266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88268:	2100      	movs	r1, #0
   8826a:	4630      	mov	r0, r6
   8826c:	f7ff fe96 	bl	87f9c <_sbrk_r>
   88270:	68ba      	ldr	r2, [r7, #8]
   88272:	1a83      	subs	r3, r0, r2
   88274:	2b0f      	cmp	r3, #15
   88276:	ddde      	ble.n	88236 <_malloc_trim_r+0x3e>
   88278:	4c06      	ldr	r4, [pc, #24]	; (88294 <_malloc_trim_r+0x9c>)
   8827a:	4905      	ldr	r1, [pc, #20]	; (88290 <_malloc_trim_r+0x98>)
   8827c:	6824      	ldr	r4, [r4, #0]
   8827e:	f043 0301 	orr.w	r3, r3, #1
   88282:	1b00      	subs	r0, r0, r4
   88284:	6053      	str	r3, [r2, #4]
   88286:	6008      	str	r0, [r1, #0]
   88288:	e7d5      	b.n	88236 <_malloc_trim_r+0x3e>
   8828a:	bf00      	nop
   8828c:	20000bc8 	.word	0x20000bc8
   88290:	20001188 	.word	0x20001188
   88294:	20000fd0 	.word	0x20000fd0

00088298 <_free_r>:
   88298:	2900      	cmp	r1, #0
   8829a:	d044      	beq.n	88326 <_free_r+0x8e>
   8829c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   882a0:	460d      	mov	r5, r1
   882a2:	4680      	mov	r8, r0
   882a4:	f7ff fb72 	bl	8798c <__malloc_lock>
   882a8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   882ac:	4969      	ldr	r1, [pc, #420]	; (88454 <_free_r+0x1bc>)
   882ae:	f1a5 0408 	sub.w	r4, r5, #8
   882b2:	f027 0301 	bic.w	r3, r7, #1
   882b6:	18e2      	adds	r2, r4, r3
   882b8:	688e      	ldr	r6, [r1, #8]
   882ba:	6850      	ldr	r0, [r2, #4]
   882bc:	42b2      	cmp	r2, r6
   882be:	f020 0003 	bic.w	r0, r0, #3
   882c2:	d05e      	beq.n	88382 <_free_r+0xea>
   882c4:	07fe      	lsls	r6, r7, #31
   882c6:	6050      	str	r0, [r2, #4]
   882c8:	d40b      	bmi.n	882e2 <_free_r+0x4a>
   882ca:	f855 7c08 	ldr.w	r7, [r5, #-8]
   882ce:	f101 0e08 	add.w	lr, r1, #8
   882d2:	1be4      	subs	r4, r4, r7
   882d4:	68a5      	ldr	r5, [r4, #8]
   882d6:	443b      	add	r3, r7
   882d8:	4575      	cmp	r5, lr
   882da:	d06d      	beq.n	883b8 <_free_r+0x120>
   882dc:	68e7      	ldr	r7, [r4, #12]
   882de:	60ef      	str	r7, [r5, #12]
   882e0:	60bd      	str	r5, [r7, #8]
   882e2:	1815      	adds	r5, r2, r0
   882e4:	686d      	ldr	r5, [r5, #4]
   882e6:	07ed      	lsls	r5, r5, #31
   882e8:	d53e      	bpl.n	88368 <_free_r+0xd0>
   882ea:	f043 0201 	orr.w	r2, r3, #1
   882ee:	6062      	str	r2, [r4, #4]
   882f0:	50e3      	str	r3, [r4, r3]
   882f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   882f6:	d217      	bcs.n	88328 <_free_r+0x90>
   882f8:	2201      	movs	r2, #1
   882fa:	08db      	lsrs	r3, r3, #3
   882fc:	1098      	asrs	r0, r3, #2
   882fe:	684d      	ldr	r5, [r1, #4]
   88300:	4413      	add	r3, r2
   88302:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   88306:	4082      	lsls	r2, r0
   88308:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   8830c:	432a      	orrs	r2, r5
   8830e:	3808      	subs	r0, #8
   88310:	60e0      	str	r0, [r4, #12]
   88312:	60a7      	str	r7, [r4, #8]
   88314:	604a      	str	r2, [r1, #4]
   88316:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8831a:	60fc      	str	r4, [r7, #12]
   8831c:	4640      	mov	r0, r8
   8831e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88322:	f7ff bb39 	b.w	87998 <__malloc_unlock>
   88326:	4770      	bx	lr
   88328:	0a5a      	lsrs	r2, r3, #9
   8832a:	2a04      	cmp	r2, #4
   8832c:	d852      	bhi.n	883d4 <_free_r+0x13c>
   8832e:	099a      	lsrs	r2, r3, #6
   88330:	f102 0739 	add.w	r7, r2, #57	; 0x39
   88334:	00ff      	lsls	r7, r7, #3
   88336:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8833a:	19c8      	adds	r0, r1, r7
   8833c:	59ca      	ldr	r2, [r1, r7]
   8833e:	3808      	subs	r0, #8
   88340:	4290      	cmp	r0, r2
   88342:	d04f      	beq.n	883e4 <_free_r+0x14c>
   88344:	6851      	ldr	r1, [r2, #4]
   88346:	f021 0103 	bic.w	r1, r1, #3
   8834a:	428b      	cmp	r3, r1
   8834c:	d232      	bcs.n	883b4 <_free_r+0x11c>
   8834e:	6892      	ldr	r2, [r2, #8]
   88350:	4290      	cmp	r0, r2
   88352:	d1f7      	bne.n	88344 <_free_r+0xac>
   88354:	68c3      	ldr	r3, [r0, #12]
   88356:	60a0      	str	r0, [r4, #8]
   88358:	60e3      	str	r3, [r4, #12]
   8835a:	609c      	str	r4, [r3, #8]
   8835c:	60c4      	str	r4, [r0, #12]
   8835e:	4640      	mov	r0, r8
   88360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88364:	f7ff bb18 	b.w	87998 <__malloc_unlock>
   88368:	6895      	ldr	r5, [r2, #8]
   8836a:	4f3b      	ldr	r7, [pc, #236]	; (88458 <_free_r+0x1c0>)
   8836c:	4403      	add	r3, r0
   8836e:	42bd      	cmp	r5, r7
   88370:	d040      	beq.n	883f4 <_free_r+0x15c>
   88372:	68d0      	ldr	r0, [r2, #12]
   88374:	f043 0201 	orr.w	r2, r3, #1
   88378:	60e8      	str	r0, [r5, #12]
   8837a:	6085      	str	r5, [r0, #8]
   8837c:	6062      	str	r2, [r4, #4]
   8837e:	50e3      	str	r3, [r4, r3]
   88380:	e7b7      	b.n	882f2 <_free_r+0x5a>
   88382:	07ff      	lsls	r7, r7, #31
   88384:	4403      	add	r3, r0
   88386:	d407      	bmi.n	88398 <_free_r+0x100>
   88388:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8838c:	1b64      	subs	r4, r4, r5
   8838e:	68e2      	ldr	r2, [r4, #12]
   88390:	68a0      	ldr	r0, [r4, #8]
   88392:	442b      	add	r3, r5
   88394:	60c2      	str	r2, [r0, #12]
   88396:	6090      	str	r0, [r2, #8]
   88398:	4a30      	ldr	r2, [pc, #192]	; (8845c <_free_r+0x1c4>)
   8839a:	f043 0001 	orr.w	r0, r3, #1
   8839e:	6812      	ldr	r2, [r2, #0]
   883a0:	6060      	str	r0, [r4, #4]
   883a2:	4293      	cmp	r3, r2
   883a4:	608c      	str	r4, [r1, #8]
   883a6:	d3b9      	bcc.n	8831c <_free_r+0x84>
   883a8:	4b2d      	ldr	r3, [pc, #180]	; (88460 <_free_r+0x1c8>)
   883aa:	4640      	mov	r0, r8
   883ac:	6819      	ldr	r1, [r3, #0]
   883ae:	f7ff ff23 	bl	881f8 <_malloc_trim_r>
   883b2:	e7b3      	b.n	8831c <_free_r+0x84>
   883b4:	4610      	mov	r0, r2
   883b6:	e7cd      	b.n	88354 <_free_r+0xbc>
   883b8:	1811      	adds	r1, r2, r0
   883ba:	6849      	ldr	r1, [r1, #4]
   883bc:	07c9      	lsls	r1, r1, #31
   883be:	d444      	bmi.n	8844a <_free_r+0x1b2>
   883c0:	6891      	ldr	r1, [r2, #8]
   883c2:	4403      	add	r3, r0
   883c4:	68d2      	ldr	r2, [r2, #12]
   883c6:	f043 0001 	orr.w	r0, r3, #1
   883ca:	60ca      	str	r2, [r1, #12]
   883cc:	6091      	str	r1, [r2, #8]
   883ce:	6060      	str	r0, [r4, #4]
   883d0:	50e3      	str	r3, [r4, r3]
   883d2:	e7a3      	b.n	8831c <_free_r+0x84>
   883d4:	2a14      	cmp	r2, #20
   883d6:	d816      	bhi.n	88406 <_free_r+0x16e>
   883d8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   883dc:	00ff      	lsls	r7, r7, #3
   883de:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   883e2:	e7aa      	b.n	8833a <_free_r+0xa2>
   883e4:	2301      	movs	r3, #1
   883e6:	10aa      	asrs	r2, r5, #2
   883e8:	684d      	ldr	r5, [r1, #4]
   883ea:	4093      	lsls	r3, r2
   883ec:	432b      	orrs	r3, r5
   883ee:	604b      	str	r3, [r1, #4]
   883f0:	4603      	mov	r3, r0
   883f2:	e7b0      	b.n	88356 <_free_r+0xbe>
   883f4:	f043 0201 	orr.w	r2, r3, #1
   883f8:	614c      	str	r4, [r1, #20]
   883fa:	610c      	str	r4, [r1, #16]
   883fc:	60e5      	str	r5, [r4, #12]
   883fe:	60a5      	str	r5, [r4, #8]
   88400:	6062      	str	r2, [r4, #4]
   88402:	50e3      	str	r3, [r4, r3]
   88404:	e78a      	b.n	8831c <_free_r+0x84>
   88406:	2a54      	cmp	r2, #84	; 0x54
   88408:	d806      	bhi.n	88418 <_free_r+0x180>
   8840a:	0b1a      	lsrs	r2, r3, #12
   8840c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   88410:	00ff      	lsls	r7, r7, #3
   88412:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   88416:	e790      	b.n	8833a <_free_r+0xa2>
   88418:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8841c:	d806      	bhi.n	8842c <_free_r+0x194>
   8841e:	0bda      	lsrs	r2, r3, #15
   88420:	f102 0778 	add.w	r7, r2, #120	; 0x78
   88424:	00ff      	lsls	r7, r7, #3
   88426:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8842a:	e786      	b.n	8833a <_free_r+0xa2>
   8842c:	f240 5054 	movw	r0, #1364	; 0x554
   88430:	4282      	cmp	r2, r0
   88432:	d806      	bhi.n	88442 <_free_r+0x1aa>
   88434:	0c9a      	lsrs	r2, r3, #18
   88436:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8843a:	00ff      	lsls	r7, r7, #3
   8843c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   88440:	e77b      	b.n	8833a <_free_r+0xa2>
   88442:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   88446:	257e      	movs	r5, #126	; 0x7e
   88448:	e777      	b.n	8833a <_free_r+0xa2>
   8844a:	f043 0101 	orr.w	r1, r3, #1
   8844e:	6061      	str	r1, [r4, #4]
   88450:	6013      	str	r3, [r2, #0]
   88452:	e763      	b.n	8831c <_free_r+0x84>
   88454:	20000bc8 	.word	0x20000bc8
   88458:	20000bd0 	.word	0x20000bd0
   8845c:	20000fd4 	.word	0x20000fd4
   88460:	200011b8 	.word	0x200011b8

00088464 <memmove>:
   88464:	4288      	cmp	r0, r1
   88466:	b5f0      	push	{r4, r5, r6, r7, lr}
   88468:	d90d      	bls.n	88486 <memmove+0x22>
   8846a:	188b      	adds	r3, r1, r2
   8846c:	4298      	cmp	r0, r3
   8846e:	d20a      	bcs.n	88486 <memmove+0x22>
   88470:	1884      	adds	r4, r0, r2
   88472:	2a00      	cmp	r2, #0
   88474:	d051      	beq.n	8851a <memmove+0xb6>
   88476:	4622      	mov	r2, r4
   88478:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8847c:	4299      	cmp	r1, r3
   8847e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   88482:	d1f9      	bne.n	88478 <memmove+0x14>
   88484:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88486:	2a0f      	cmp	r2, #15
   88488:	d948      	bls.n	8851c <memmove+0xb8>
   8848a:	ea41 0300 	orr.w	r3, r1, r0
   8848e:	079b      	lsls	r3, r3, #30
   88490:	d146      	bne.n	88520 <memmove+0xbc>
   88492:	4615      	mov	r5, r2
   88494:	f100 0410 	add.w	r4, r0, #16
   88498:	f101 0310 	add.w	r3, r1, #16
   8849c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   884a0:	3d10      	subs	r5, #16
   884a2:	f844 6c10 	str.w	r6, [r4, #-16]
   884a6:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   884aa:	2d0f      	cmp	r5, #15
   884ac:	f844 6c0c 	str.w	r6, [r4, #-12]
   884b0:	f853 6c08 	ldr.w	r6, [r3, #-8]
   884b4:	f104 0410 	add.w	r4, r4, #16
   884b8:	f844 6c18 	str.w	r6, [r4, #-24]
   884bc:	f853 6c04 	ldr.w	r6, [r3, #-4]
   884c0:	f103 0310 	add.w	r3, r3, #16
   884c4:	f844 6c14 	str.w	r6, [r4, #-20]
   884c8:	d8e8      	bhi.n	8849c <memmove+0x38>
   884ca:	f1a2 0310 	sub.w	r3, r2, #16
   884ce:	f023 030f 	bic.w	r3, r3, #15
   884d2:	f002 0e0f 	and.w	lr, r2, #15
   884d6:	3310      	adds	r3, #16
   884d8:	f1be 0f03 	cmp.w	lr, #3
   884dc:	4419      	add	r1, r3
   884de:	4403      	add	r3, r0
   884e0:	d921      	bls.n	88526 <memmove+0xc2>
   884e2:	460e      	mov	r6, r1
   884e4:	4674      	mov	r4, lr
   884e6:	1f1d      	subs	r5, r3, #4
   884e8:	f856 7b04 	ldr.w	r7, [r6], #4
   884ec:	3c04      	subs	r4, #4
   884ee:	2c03      	cmp	r4, #3
   884f0:	f845 7f04 	str.w	r7, [r5, #4]!
   884f4:	d8f8      	bhi.n	884e8 <memmove+0x84>
   884f6:	f1ae 0404 	sub.w	r4, lr, #4
   884fa:	f024 0403 	bic.w	r4, r4, #3
   884fe:	3404      	adds	r4, #4
   88500:	4421      	add	r1, r4
   88502:	4423      	add	r3, r4
   88504:	f002 0203 	and.w	r2, r2, #3
   88508:	b162      	cbz	r2, 88524 <memmove+0xc0>
   8850a:	3b01      	subs	r3, #1
   8850c:	440a      	add	r2, r1
   8850e:	f811 4b01 	ldrb.w	r4, [r1], #1
   88512:	428a      	cmp	r2, r1
   88514:	f803 4f01 	strb.w	r4, [r3, #1]!
   88518:	d1f9      	bne.n	8850e <memmove+0xaa>
   8851a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8851c:	4603      	mov	r3, r0
   8851e:	e7f3      	b.n	88508 <memmove+0xa4>
   88520:	4603      	mov	r3, r0
   88522:	e7f2      	b.n	8850a <memmove+0xa6>
   88524:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88526:	4672      	mov	r2, lr
   88528:	e7ee      	b.n	88508 <memmove+0xa4>
   8852a:	bf00      	nop

0008852c <_realloc_r>:
   8852c:	2900      	cmp	r1, #0
   8852e:	f000 8094 	beq.w	8865a <_realloc_r+0x12e>
   88532:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88536:	460c      	mov	r4, r1
   88538:	4615      	mov	r5, r2
   8853a:	b083      	sub	sp, #12
   8853c:	4680      	mov	r8, r0
   8853e:	f105 060b 	add.w	r6, r5, #11
   88542:	f7ff fa23 	bl	8798c <__malloc_lock>
   88546:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8854a:	2e16      	cmp	r6, #22
   8854c:	f02e 0703 	bic.w	r7, lr, #3
   88550:	f1a4 0908 	sub.w	r9, r4, #8
   88554:	d83c      	bhi.n	885d0 <_realloc_r+0xa4>
   88556:	2210      	movs	r2, #16
   88558:	4616      	mov	r6, r2
   8855a:	42b5      	cmp	r5, r6
   8855c:	d83d      	bhi.n	885da <_realloc_r+0xae>
   8855e:	4297      	cmp	r7, r2
   88560:	da43      	bge.n	885ea <_realloc_r+0xbe>
   88562:	4bc6      	ldr	r3, [pc, #792]	; (8887c <_realloc_r+0x350>)
   88564:	eb09 0007 	add.w	r0, r9, r7
   88568:	6899      	ldr	r1, [r3, #8]
   8856a:	4288      	cmp	r0, r1
   8856c:	f000 80c3 	beq.w	886f6 <_realloc_r+0x1ca>
   88570:	6843      	ldr	r3, [r0, #4]
   88572:	f023 0101 	bic.w	r1, r3, #1
   88576:	4401      	add	r1, r0
   88578:	6849      	ldr	r1, [r1, #4]
   8857a:	07c9      	lsls	r1, r1, #31
   8857c:	d54d      	bpl.n	8861a <_realloc_r+0xee>
   8857e:	f01e 0f01 	tst.w	lr, #1
   88582:	f000 809b 	beq.w	886bc <_realloc_r+0x190>
   88586:	4629      	mov	r1, r5
   88588:	4640      	mov	r0, r8
   8858a:	f7fe fe8b 	bl	872a4 <_malloc_r>
   8858e:	4605      	mov	r5, r0
   88590:	2800      	cmp	r0, #0
   88592:	d03b      	beq.n	8860c <_realloc_r+0xe0>
   88594:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88598:	f1a0 0208 	sub.w	r2, r0, #8
   8859c:	f023 0301 	bic.w	r3, r3, #1
   885a0:	444b      	add	r3, r9
   885a2:	429a      	cmp	r2, r3
   885a4:	f000 812b 	beq.w	887fe <_realloc_r+0x2d2>
   885a8:	1f3a      	subs	r2, r7, #4
   885aa:	2a24      	cmp	r2, #36	; 0x24
   885ac:	f200 8118 	bhi.w	887e0 <_realloc_r+0x2b4>
   885b0:	2a13      	cmp	r2, #19
   885b2:	f200 80eb 	bhi.w	8878c <_realloc_r+0x260>
   885b6:	4603      	mov	r3, r0
   885b8:	4622      	mov	r2, r4
   885ba:	6811      	ldr	r1, [r2, #0]
   885bc:	6019      	str	r1, [r3, #0]
   885be:	6851      	ldr	r1, [r2, #4]
   885c0:	6059      	str	r1, [r3, #4]
   885c2:	6892      	ldr	r2, [r2, #8]
   885c4:	609a      	str	r2, [r3, #8]
   885c6:	4621      	mov	r1, r4
   885c8:	4640      	mov	r0, r8
   885ca:	f7ff fe65 	bl	88298 <_free_r>
   885ce:	e01d      	b.n	8860c <_realloc_r+0xe0>
   885d0:	f026 0607 	bic.w	r6, r6, #7
   885d4:	2e00      	cmp	r6, #0
   885d6:	4632      	mov	r2, r6
   885d8:	dabf      	bge.n	8855a <_realloc_r+0x2e>
   885da:	2500      	movs	r5, #0
   885dc:	230c      	movs	r3, #12
   885de:	4628      	mov	r0, r5
   885e0:	f8c8 3000 	str.w	r3, [r8]
   885e4:	b003      	add	sp, #12
   885e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   885ea:	4625      	mov	r5, r4
   885ec:	1bbb      	subs	r3, r7, r6
   885ee:	2b0f      	cmp	r3, #15
   885f0:	f8d9 2004 	ldr.w	r2, [r9, #4]
   885f4:	d81d      	bhi.n	88632 <_realloc_r+0x106>
   885f6:	f002 0201 	and.w	r2, r2, #1
   885fa:	433a      	orrs	r2, r7
   885fc:	eb09 0107 	add.w	r1, r9, r7
   88600:	f8c9 2004 	str.w	r2, [r9, #4]
   88604:	684b      	ldr	r3, [r1, #4]
   88606:	f043 0301 	orr.w	r3, r3, #1
   8860a:	604b      	str	r3, [r1, #4]
   8860c:	4640      	mov	r0, r8
   8860e:	f7ff f9c3 	bl	87998 <__malloc_unlock>
   88612:	4628      	mov	r0, r5
   88614:	b003      	add	sp, #12
   88616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8861a:	f023 0303 	bic.w	r3, r3, #3
   8861e:	18f9      	adds	r1, r7, r3
   88620:	4291      	cmp	r1, r2
   88622:	db1d      	blt.n	88660 <_realloc_r+0x134>
   88624:	68c3      	ldr	r3, [r0, #12]
   88626:	6882      	ldr	r2, [r0, #8]
   88628:	4625      	mov	r5, r4
   8862a:	60d3      	str	r3, [r2, #12]
   8862c:	460f      	mov	r7, r1
   8862e:	609a      	str	r2, [r3, #8]
   88630:	e7dc      	b.n	885ec <_realloc_r+0xc0>
   88632:	f002 0201 	and.w	r2, r2, #1
   88636:	eb09 0106 	add.w	r1, r9, r6
   8863a:	f043 0301 	orr.w	r3, r3, #1
   8863e:	4332      	orrs	r2, r6
   88640:	f8c9 2004 	str.w	r2, [r9, #4]
   88644:	444f      	add	r7, r9
   88646:	604b      	str	r3, [r1, #4]
   88648:	687b      	ldr	r3, [r7, #4]
   8864a:	3108      	adds	r1, #8
   8864c:	f043 0301 	orr.w	r3, r3, #1
   88650:	607b      	str	r3, [r7, #4]
   88652:	4640      	mov	r0, r8
   88654:	f7ff fe20 	bl	88298 <_free_r>
   88658:	e7d8      	b.n	8860c <_realloc_r+0xe0>
   8865a:	4611      	mov	r1, r2
   8865c:	f7fe be22 	b.w	872a4 <_malloc_r>
   88660:	f01e 0f01 	tst.w	lr, #1
   88664:	d18f      	bne.n	88586 <_realloc_r+0x5a>
   88666:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8866a:	eba9 0a01 	sub.w	sl, r9, r1
   8866e:	f8da 1004 	ldr.w	r1, [sl, #4]
   88672:	f021 0103 	bic.w	r1, r1, #3
   88676:	440b      	add	r3, r1
   88678:	443b      	add	r3, r7
   8867a:	4293      	cmp	r3, r2
   8867c:	db26      	blt.n	886cc <_realloc_r+0x1a0>
   8867e:	4655      	mov	r5, sl
   88680:	68c1      	ldr	r1, [r0, #12]
   88682:	6880      	ldr	r0, [r0, #8]
   88684:	1f3a      	subs	r2, r7, #4
   88686:	60c1      	str	r1, [r0, #12]
   88688:	6088      	str	r0, [r1, #8]
   8868a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8868e:	f8da 100c 	ldr.w	r1, [sl, #12]
   88692:	2a24      	cmp	r2, #36	; 0x24
   88694:	60c1      	str	r1, [r0, #12]
   88696:	6088      	str	r0, [r1, #8]
   88698:	d826      	bhi.n	886e8 <_realloc_r+0x1bc>
   8869a:	2a13      	cmp	r2, #19
   8869c:	f240 8081 	bls.w	887a2 <_realloc_r+0x276>
   886a0:	6821      	ldr	r1, [r4, #0]
   886a2:	2a1b      	cmp	r2, #27
   886a4:	f8ca 1008 	str.w	r1, [sl, #8]
   886a8:	6861      	ldr	r1, [r4, #4]
   886aa:	f8ca 100c 	str.w	r1, [sl, #12]
   886ae:	f200 80ad 	bhi.w	8880c <_realloc_r+0x2e0>
   886b2:	f104 0008 	add.w	r0, r4, #8
   886b6:	f10a 0210 	add.w	r2, sl, #16
   886ba:	e074      	b.n	887a6 <_realloc_r+0x27a>
   886bc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   886c0:	eba9 0a03 	sub.w	sl, r9, r3
   886c4:	f8da 1004 	ldr.w	r1, [sl, #4]
   886c8:	f021 0103 	bic.w	r1, r1, #3
   886cc:	187b      	adds	r3, r7, r1
   886ce:	4293      	cmp	r3, r2
   886d0:	f6ff af59 	blt.w	88586 <_realloc_r+0x5a>
   886d4:	4655      	mov	r5, sl
   886d6:	f8da 100c 	ldr.w	r1, [sl, #12]
   886da:	f855 0f08 	ldr.w	r0, [r5, #8]!
   886de:	1f3a      	subs	r2, r7, #4
   886e0:	2a24      	cmp	r2, #36	; 0x24
   886e2:	60c1      	str	r1, [r0, #12]
   886e4:	6088      	str	r0, [r1, #8]
   886e6:	d9d8      	bls.n	8869a <_realloc_r+0x16e>
   886e8:	4621      	mov	r1, r4
   886ea:	4628      	mov	r0, r5
   886ec:	461f      	mov	r7, r3
   886ee:	46d1      	mov	r9, sl
   886f0:	f7ff feb8 	bl	88464 <memmove>
   886f4:	e77a      	b.n	885ec <_realloc_r+0xc0>
   886f6:	6841      	ldr	r1, [r0, #4]
   886f8:	f106 0010 	add.w	r0, r6, #16
   886fc:	f021 0b03 	bic.w	fp, r1, #3
   88700:	44bb      	add	fp, r7
   88702:	4583      	cmp	fp, r0
   88704:	da58      	bge.n	887b8 <_realloc_r+0x28c>
   88706:	f01e 0f01 	tst.w	lr, #1
   8870a:	f47f af3c 	bne.w	88586 <_realloc_r+0x5a>
   8870e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   88712:	eba9 0a01 	sub.w	sl, r9, r1
   88716:	f8da 1004 	ldr.w	r1, [sl, #4]
   8871a:	f021 0103 	bic.w	r1, r1, #3
   8871e:	448b      	add	fp, r1
   88720:	4558      	cmp	r0, fp
   88722:	dcd3      	bgt.n	886cc <_realloc_r+0x1a0>
   88724:	4655      	mov	r5, sl
   88726:	f8da 100c 	ldr.w	r1, [sl, #12]
   8872a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8872e:	1f3a      	subs	r2, r7, #4
   88730:	2a24      	cmp	r2, #36	; 0x24
   88732:	60c1      	str	r1, [r0, #12]
   88734:	6088      	str	r0, [r1, #8]
   88736:	f200 808d 	bhi.w	88854 <_realloc_r+0x328>
   8873a:	2a13      	cmp	r2, #19
   8873c:	f240 8087 	bls.w	8884e <_realloc_r+0x322>
   88740:	6821      	ldr	r1, [r4, #0]
   88742:	2a1b      	cmp	r2, #27
   88744:	f8ca 1008 	str.w	r1, [sl, #8]
   88748:	6861      	ldr	r1, [r4, #4]
   8874a:	f8ca 100c 	str.w	r1, [sl, #12]
   8874e:	f200 8088 	bhi.w	88862 <_realloc_r+0x336>
   88752:	f104 0108 	add.w	r1, r4, #8
   88756:	f10a 0210 	add.w	r2, sl, #16
   8875a:	6808      	ldr	r0, [r1, #0]
   8875c:	6010      	str	r0, [r2, #0]
   8875e:	6848      	ldr	r0, [r1, #4]
   88760:	6050      	str	r0, [r2, #4]
   88762:	6889      	ldr	r1, [r1, #8]
   88764:	6091      	str	r1, [r2, #8]
   88766:	ebab 0206 	sub.w	r2, fp, r6
   8876a:	eb0a 0106 	add.w	r1, sl, r6
   8876e:	f042 0201 	orr.w	r2, r2, #1
   88772:	6099      	str	r1, [r3, #8]
   88774:	604a      	str	r2, [r1, #4]
   88776:	f8da 3004 	ldr.w	r3, [sl, #4]
   8877a:	4640      	mov	r0, r8
   8877c:	f003 0301 	and.w	r3, r3, #1
   88780:	431e      	orrs	r6, r3
   88782:	f8ca 6004 	str.w	r6, [sl, #4]
   88786:	f7ff f907 	bl	87998 <__malloc_unlock>
   8878a:	e742      	b.n	88612 <_realloc_r+0xe6>
   8878c:	6823      	ldr	r3, [r4, #0]
   8878e:	2a1b      	cmp	r2, #27
   88790:	6003      	str	r3, [r0, #0]
   88792:	6863      	ldr	r3, [r4, #4]
   88794:	6043      	str	r3, [r0, #4]
   88796:	d827      	bhi.n	887e8 <_realloc_r+0x2bc>
   88798:	f100 0308 	add.w	r3, r0, #8
   8879c:	f104 0208 	add.w	r2, r4, #8
   887a0:	e70b      	b.n	885ba <_realloc_r+0x8e>
   887a2:	4620      	mov	r0, r4
   887a4:	462a      	mov	r2, r5
   887a6:	6801      	ldr	r1, [r0, #0]
   887a8:	461f      	mov	r7, r3
   887aa:	6011      	str	r1, [r2, #0]
   887ac:	6841      	ldr	r1, [r0, #4]
   887ae:	46d1      	mov	r9, sl
   887b0:	6051      	str	r1, [r2, #4]
   887b2:	6883      	ldr	r3, [r0, #8]
   887b4:	6093      	str	r3, [r2, #8]
   887b6:	e719      	b.n	885ec <_realloc_r+0xc0>
   887b8:	ebab 0b06 	sub.w	fp, fp, r6
   887bc:	eb09 0106 	add.w	r1, r9, r6
   887c0:	f04b 0201 	orr.w	r2, fp, #1
   887c4:	6099      	str	r1, [r3, #8]
   887c6:	604a      	str	r2, [r1, #4]
   887c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   887cc:	4640      	mov	r0, r8
   887ce:	f003 0301 	and.w	r3, r3, #1
   887d2:	431e      	orrs	r6, r3
   887d4:	f844 6c04 	str.w	r6, [r4, #-4]
   887d8:	f7ff f8de 	bl	87998 <__malloc_unlock>
   887dc:	4625      	mov	r5, r4
   887de:	e718      	b.n	88612 <_realloc_r+0xe6>
   887e0:	4621      	mov	r1, r4
   887e2:	f7ff fe3f 	bl	88464 <memmove>
   887e6:	e6ee      	b.n	885c6 <_realloc_r+0x9a>
   887e8:	68a3      	ldr	r3, [r4, #8]
   887ea:	2a24      	cmp	r2, #36	; 0x24
   887ec:	6083      	str	r3, [r0, #8]
   887ee:	68e3      	ldr	r3, [r4, #12]
   887f0:	60c3      	str	r3, [r0, #12]
   887f2:	d018      	beq.n	88826 <_realloc_r+0x2fa>
   887f4:	f100 0310 	add.w	r3, r0, #16
   887f8:	f104 0210 	add.w	r2, r4, #16
   887fc:	e6dd      	b.n	885ba <_realloc_r+0x8e>
   887fe:	f850 3c04 	ldr.w	r3, [r0, #-4]
   88802:	4625      	mov	r5, r4
   88804:	f023 0303 	bic.w	r3, r3, #3
   88808:	441f      	add	r7, r3
   8880a:	e6ef      	b.n	885ec <_realloc_r+0xc0>
   8880c:	68a1      	ldr	r1, [r4, #8]
   8880e:	2a24      	cmp	r2, #36	; 0x24
   88810:	f8ca 1010 	str.w	r1, [sl, #16]
   88814:	68e1      	ldr	r1, [r4, #12]
   88816:	f8ca 1014 	str.w	r1, [sl, #20]
   8881a:	d00d      	beq.n	88838 <_realloc_r+0x30c>
   8881c:	f104 0010 	add.w	r0, r4, #16
   88820:	f10a 0218 	add.w	r2, sl, #24
   88824:	e7bf      	b.n	887a6 <_realloc_r+0x27a>
   88826:	6922      	ldr	r2, [r4, #16]
   88828:	f100 0318 	add.w	r3, r0, #24
   8882c:	6102      	str	r2, [r0, #16]
   8882e:	6961      	ldr	r1, [r4, #20]
   88830:	f104 0218 	add.w	r2, r4, #24
   88834:	6141      	str	r1, [r0, #20]
   88836:	e6c0      	b.n	885ba <_realloc_r+0x8e>
   88838:	6922      	ldr	r2, [r4, #16]
   8883a:	f104 0018 	add.w	r0, r4, #24
   8883e:	f8ca 2018 	str.w	r2, [sl, #24]
   88842:	6961      	ldr	r1, [r4, #20]
   88844:	f10a 0220 	add.w	r2, sl, #32
   88848:	f8ca 101c 	str.w	r1, [sl, #28]
   8884c:	e7ab      	b.n	887a6 <_realloc_r+0x27a>
   8884e:	4621      	mov	r1, r4
   88850:	462a      	mov	r2, r5
   88852:	e782      	b.n	8875a <_realloc_r+0x22e>
   88854:	4621      	mov	r1, r4
   88856:	4628      	mov	r0, r5
   88858:	9301      	str	r3, [sp, #4]
   8885a:	f7ff fe03 	bl	88464 <memmove>
   8885e:	9b01      	ldr	r3, [sp, #4]
   88860:	e781      	b.n	88766 <_realloc_r+0x23a>
   88862:	68a1      	ldr	r1, [r4, #8]
   88864:	2a24      	cmp	r2, #36	; 0x24
   88866:	f8ca 1010 	str.w	r1, [sl, #16]
   8886a:	68e1      	ldr	r1, [r4, #12]
   8886c:	f8ca 1014 	str.w	r1, [sl, #20]
   88870:	d006      	beq.n	88880 <_realloc_r+0x354>
   88872:	f104 0110 	add.w	r1, r4, #16
   88876:	f10a 0218 	add.w	r2, sl, #24
   8887a:	e76e      	b.n	8875a <_realloc_r+0x22e>
   8887c:	20000bc8 	.word	0x20000bc8
   88880:	6922      	ldr	r2, [r4, #16]
   88882:	f104 0118 	add.w	r1, r4, #24
   88886:	f8ca 2018 	str.w	r2, [sl, #24]
   8888a:	6960      	ldr	r0, [r4, #20]
   8888c:	f10a 0220 	add.w	r2, sl, #32
   88890:	f8ca 001c 	str.w	r0, [sl, #28]
   88894:	e761      	b.n	8875a <_realloc_r+0x22e>
   88896:	bf00      	nop

00088898 <__aeabi_drsub>:
   88898:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8889c:	e002      	b.n	888a4 <__adddf3>
   8889e:	bf00      	nop

000888a0 <__aeabi_dsub>:
   888a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000888a4 <__adddf3>:
   888a4:	b530      	push	{r4, r5, lr}
   888a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   888aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   888ae:	ea94 0f05 	teq	r4, r5
   888b2:	bf08      	it	eq
   888b4:	ea90 0f02 	teqeq	r0, r2
   888b8:	bf1f      	itttt	ne
   888ba:	ea54 0c00 	orrsne.w	ip, r4, r0
   888be:	ea55 0c02 	orrsne.w	ip, r5, r2
   888c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   888c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   888ca:	f000 80e2 	beq.w	88a92 <__adddf3+0x1ee>
   888ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
   888d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   888d6:	bfb8      	it	lt
   888d8:	426d      	neglt	r5, r5
   888da:	dd0c      	ble.n	888f6 <__adddf3+0x52>
   888dc:	442c      	add	r4, r5
   888de:	ea80 0202 	eor.w	r2, r0, r2
   888e2:	ea81 0303 	eor.w	r3, r1, r3
   888e6:	ea82 0000 	eor.w	r0, r2, r0
   888ea:	ea83 0101 	eor.w	r1, r3, r1
   888ee:	ea80 0202 	eor.w	r2, r0, r2
   888f2:	ea81 0303 	eor.w	r3, r1, r3
   888f6:	2d36      	cmp	r5, #54	; 0x36
   888f8:	bf88      	it	hi
   888fa:	bd30      	pophi	{r4, r5, pc}
   888fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   88900:	ea4f 3101 	mov.w	r1, r1, lsl #12
   88904:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   88908:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8890c:	d002      	beq.n	88914 <__adddf3+0x70>
   8890e:	4240      	negs	r0, r0
   88910:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   88914:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   88918:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8891c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   88920:	d002      	beq.n	88928 <__adddf3+0x84>
   88922:	4252      	negs	r2, r2
   88924:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   88928:	ea94 0f05 	teq	r4, r5
   8892c:	f000 80a7 	beq.w	88a7e <__adddf3+0x1da>
   88930:	f1a4 0401 	sub.w	r4, r4, #1
   88934:	f1d5 0e20 	rsbs	lr, r5, #32
   88938:	db0d      	blt.n	88956 <__adddf3+0xb2>
   8893a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8893e:	fa22 f205 	lsr.w	r2, r2, r5
   88942:	1880      	adds	r0, r0, r2
   88944:	f141 0100 	adc.w	r1, r1, #0
   88948:	fa03 f20e 	lsl.w	r2, r3, lr
   8894c:	1880      	adds	r0, r0, r2
   8894e:	fa43 f305 	asr.w	r3, r3, r5
   88952:	4159      	adcs	r1, r3
   88954:	e00e      	b.n	88974 <__adddf3+0xd0>
   88956:	f1a5 0520 	sub.w	r5, r5, #32
   8895a:	f10e 0e20 	add.w	lr, lr, #32
   8895e:	2a01      	cmp	r2, #1
   88960:	fa03 fc0e 	lsl.w	ip, r3, lr
   88964:	bf28      	it	cs
   88966:	f04c 0c02 	orrcs.w	ip, ip, #2
   8896a:	fa43 f305 	asr.w	r3, r3, r5
   8896e:	18c0      	adds	r0, r0, r3
   88970:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   88974:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   88978:	d507      	bpl.n	8898a <__adddf3+0xe6>
   8897a:	f04f 0e00 	mov.w	lr, #0
   8897e:	f1dc 0c00 	rsbs	ip, ip, #0
   88982:	eb7e 0000 	sbcs.w	r0, lr, r0
   88986:	eb6e 0101 	sbc.w	r1, lr, r1
   8898a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8898e:	d31b      	bcc.n	889c8 <__adddf3+0x124>
   88990:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   88994:	d30c      	bcc.n	889b0 <__adddf3+0x10c>
   88996:	0849      	lsrs	r1, r1, #1
   88998:	ea5f 0030 	movs.w	r0, r0, rrx
   8899c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   889a0:	f104 0401 	add.w	r4, r4, #1
   889a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   889a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   889ac:	f080 809a 	bcs.w	88ae4 <__adddf3+0x240>
   889b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   889b4:	bf08      	it	eq
   889b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   889ba:	f150 0000 	adcs.w	r0, r0, #0
   889be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   889c2:	ea41 0105 	orr.w	r1, r1, r5
   889c6:	bd30      	pop	{r4, r5, pc}
   889c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   889cc:	4140      	adcs	r0, r0
   889ce:	eb41 0101 	adc.w	r1, r1, r1
   889d2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   889d6:	f1a4 0401 	sub.w	r4, r4, #1
   889da:	d1e9      	bne.n	889b0 <__adddf3+0x10c>
   889dc:	f091 0f00 	teq	r1, #0
   889e0:	bf04      	itt	eq
   889e2:	4601      	moveq	r1, r0
   889e4:	2000      	moveq	r0, #0
   889e6:	fab1 f381 	clz	r3, r1
   889ea:	bf08      	it	eq
   889ec:	3320      	addeq	r3, #32
   889ee:	f1a3 030b 	sub.w	r3, r3, #11
   889f2:	f1b3 0220 	subs.w	r2, r3, #32
   889f6:	da0c      	bge.n	88a12 <__adddf3+0x16e>
   889f8:	320c      	adds	r2, #12
   889fa:	dd08      	ble.n	88a0e <__adddf3+0x16a>
   889fc:	f102 0c14 	add.w	ip, r2, #20
   88a00:	f1c2 020c 	rsb	r2, r2, #12
   88a04:	fa01 f00c 	lsl.w	r0, r1, ip
   88a08:	fa21 f102 	lsr.w	r1, r1, r2
   88a0c:	e00c      	b.n	88a28 <__adddf3+0x184>
   88a0e:	f102 0214 	add.w	r2, r2, #20
   88a12:	bfd8      	it	le
   88a14:	f1c2 0c20 	rsble	ip, r2, #32
   88a18:	fa01 f102 	lsl.w	r1, r1, r2
   88a1c:	fa20 fc0c 	lsr.w	ip, r0, ip
   88a20:	bfdc      	itt	le
   88a22:	ea41 010c 	orrle.w	r1, r1, ip
   88a26:	4090      	lslle	r0, r2
   88a28:	1ae4      	subs	r4, r4, r3
   88a2a:	bfa2      	ittt	ge
   88a2c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   88a30:	4329      	orrge	r1, r5
   88a32:	bd30      	popge	{r4, r5, pc}
   88a34:	ea6f 0404 	mvn.w	r4, r4
   88a38:	3c1f      	subs	r4, #31
   88a3a:	da1c      	bge.n	88a76 <__adddf3+0x1d2>
   88a3c:	340c      	adds	r4, #12
   88a3e:	dc0e      	bgt.n	88a5e <__adddf3+0x1ba>
   88a40:	f104 0414 	add.w	r4, r4, #20
   88a44:	f1c4 0220 	rsb	r2, r4, #32
   88a48:	fa20 f004 	lsr.w	r0, r0, r4
   88a4c:	fa01 f302 	lsl.w	r3, r1, r2
   88a50:	ea40 0003 	orr.w	r0, r0, r3
   88a54:	fa21 f304 	lsr.w	r3, r1, r4
   88a58:	ea45 0103 	orr.w	r1, r5, r3
   88a5c:	bd30      	pop	{r4, r5, pc}
   88a5e:	f1c4 040c 	rsb	r4, r4, #12
   88a62:	f1c4 0220 	rsb	r2, r4, #32
   88a66:	fa20 f002 	lsr.w	r0, r0, r2
   88a6a:	fa01 f304 	lsl.w	r3, r1, r4
   88a6e:	ea40 0003 	orr.w	r0, r0, r3
   88a72:	4629      	mov	r1, r5
   88a74:	bd30      	pop	{r4, r5, pc}
   88a76:	fa21 f004 	lsr.w	r0, r1, r4
   88a7a:	4629      	mov	r1, r5
   88a7c:	bd30      	pop	{r4, r5, pc}
   88a7e:	f094 0f00 	teq	r4, #0
   88a82:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   88a86:	bf06      	itte	eq
   88a88:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   88a8c:	3401      	addeq	r4, #1
   88a8e:	3d01      	subne	r5, #1
   88a90:	e74e      	b.n	88930 <__adddf3+0x8c>
   88a92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   88a96:	bf18      	it	ne
   88a98:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   88a9c:	d029      	beq.n	88af2 <__adddf3+0x24e>
   88a9e:	ea94 0f05 	teq	r4, r5
   88aa2:	bf08      	it	eq
   88aa4:	ea90 0f02 	teqeq	r0, r2
   88aa8:	d005      	beq.n	88ab6 <__adddf3+0x212>
   88aaa:	ea54 0c00 	orrs.w	ip, r4, r0
   88aae:	bf04      	itt	eq
   88ab0:	4619      	moveq	r1, r3
   88ab2:	4610      	moveq	r0, r2
   88ab4:	bd30      	pop	{r4, r5, pc}
   88ab6:	ea91 0f03 	teq	r1, r3
   88aba:	bf1e      	ittt	ne
   88abc:	2100      	movne	r1, #0
   88abe:	2000      	movne	r0, #0
   88ac0:	bd30      	popne	{r4, r5, pc}
   88ac2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   88ac6:	d105      	bne.n	88ad4 <__adddf3+0x230>
   88ac8:	0040      	lsls	r0, r0, #1
   88aca:	4149      	adcs	r1, r1
   88acc:	bf28      	it	cs
   88ace:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   88ad2:	bd30      	pop	{r4, r5, pc}
   88ad4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   88ad8:	bf3c      	itt	cc
   88ada:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   88ade:	bd30      	popcc	{r4, r5, pc}
   88ae0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   88ae4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   88ae8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   88aec:	f04f 0000 	mov.w	r0, #0
   88af0:	bd30      	pop	{r4, r5, pc}
   88af2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   88af6:	bf1a      	itte	ne
   88af8:	4619      	movne	r1, r3
   88afa:	4610      	movne	r0, r2
   88afc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   88b00:	bf1c      	itt	ne
   88b02:	460b      	movne	r3, r1
   88b04:	4602      	movne	r2, r0
   88b06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   88b0a:	bf06      	itte	eq
   88b0c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   88b10:	ea91 0f03 	teqeq	r1, r3
   88b14:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   88b18:	bd30      	pop	{r4, r5, pc}
   88b1a:	bf00      	nop

00088b1c <__aeabi_ui2d>:
   88b1c:	f090 0f00 	teq	r0, #0
   88b20:	bf04      	itt	eq
   88b22:	2100      	moveq	r1, #0
   88b24:	4770      	bxeq	lr
   88b26:	b530      	push	{r4, r5, lr}
   88b28:	f44f 6480 	mov.w	r4, #1024	; 0x400
   88b2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   88b30:	f04f 0500 	mov.w	r5, #0
   88b34:	f04f 0100 	mov.w	r1, #0
   88b38:	e750      	b.n	889dc <__adddf3+0x138>
   88b3a:	bf00      	nop

00088b3c <__aeabi_i2d>:
   88b3c:	f090 0f00 	teq	r0, #0
   88b40:	bf04      	itt	eq
   88b42:	2100      	moveq	r1, #0
   88b44:	4770      	bxeq	lr
   88b46:	b530      	push	{r4, r5, lr}
   88b48:	f44f 6480 	mov.w	r4, #1024	; 0x400
   88b4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   88b50:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   88b54:	bf48      	it	mi
   88b56:	4240      	negmi	r0, r0
   88b58:	f04f 0100 	mov.w	r1, #0
   88b5c:	e73e      	b.n	889dc <__adddf3+0x138>
   88b5e:	bf00      	nop

00088b60 <__aeabi_f2d>:
   88b60:	0042      	lsls	r2, r0, #1
   88b62:	ea4f 01e2 	mov.w	r1, r2, asr #3
   88b66:	ea4f 0131 	mov.w	r1, r1, rrx
   88b6a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   88b6e:	bf1f      	itttt	ne
   88b70:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   88b74:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   88b78:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   88b7c:	4770      	bxne	lr
   88b7e:	f092 0f00 	teq	r2, #0
   88b82:	bf14      	ite	ne
   88b84:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   88b88:	4770      	bxeq	lr
   88b8a:	b530      	push	{r4, r5, lr}
   88b8c:	f44f 7460 	mov.w	r4, #896	; 0x380
   88b90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   88b94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   88b98:	e720      	b.n	889dc <__adddf3+0x138>
   88b9a:	bf00      	nop

00088b9c <__aeabi_ul2d>:
   88b9c:	ea50 0201 	orrs.w	r2, r0, r1
   88ba0:	bf08      	it	eq
   88ba2:	4770      	bxeq	lr
   88ba4:	b530      	push	{r4, r5, lr}
   88ba6:	f04f 0500 	mov.w	r5, #0
   88baa:	e00a      	b.n	88bc2 <__aeabi_l2d+0x16>

00088bac <__aeabi_l2d>:
   88bac:	ea50 0201 	orrs.w	r2, r0, r1
   88bb0:	bf08      	it	eq
   88bb2:	4770      	bxeq	lr
   88bb4:	b530      	push	{r4, r5, lr}
   88bb6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   88bba:	d502      	bpl.n	88bc2 <__aeabi_l2d+0x16>
   88bbc:	4240      	negs	r0, r0
   88bbe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   88bc2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   88bc6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   88bca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   88bce:	f43f aedc 	beq.w	8898a <__adddf3+0xe6>
   88bd2:	f04f 0203 	mov.w	r2, #3
   88bd6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   88bda:	bf18      	it	ne
   88bdc:	3203      	addne	r2, #3
   88bde:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   88be2:	bf18      	it	ne
   88be4:	3203      	addne	r2, #3
   88be6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   88bea:	f1c2 0320 	rsb	r3, r2, #32
   88bee:	fa00 fc03 	lsl.w	ip, r0, r3
   88bf2:	fa20 f002 	lsr.w	r0, r0, r2
   88bf6:	fa01 fe03 	lsl.w	lr, r1, r3
   88bfa:	ea40 000e 	orr.w	r0, r0, lr
   88bfe:	fa21 f102 	lsr.w	r1, r1, r2
   88c02:	4414      	add	r4, r2
   88c04:	e6c1      	b.n	8898a <__adddf3+0xe6>
   88c06:	bf00      	nop

00088c08 <__aeabi_dmul>:
   88c08:	b570      	push	{r4, r5, r6, lr}
   88c0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   88c0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   88c12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   88c16:	bf1d      	ittte	ne
   88c18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   88c1c:	ea94 0f0c 	teqne	r4, ip
   88c20:	ea95 0f0c 	teqne	r5, ip
   88c24:	f000 f8de 	bleq	88de4 <__aeabi_dmul+0x1dc>
   88c28:	442c      	add	r4, r5
   88c2a:	ea81 0603 	eor.w	r6, r1, r3
   88c2e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   88c32:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   88c36:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   88c3a:	bf18      	it	ne
   88c3c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   88c40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   88c44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   88c48:	d038      	beq.n	88cbc <__aeabi_dmul+0xb4>
   88c4a:	fba0 ce02 	umull	ip, lr, r0, r2
   88c4e:	f04f 0500 	mov.w	r5, #0
   88c52:	fbe1 e502 	umlal	lr, r5, r1, r2
   88c56:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   88c5a:	fbe0 e503 	umlal	lr, r5, r0, r3
   88c5e:	f04f 0600 	mov.w	r6, #0
   88c62:	fbe1 5603 	umlal	r5, r6, r1, r3
   88c66:	f09c 0f00 	teq	ip, #0
   88c6a:	bf18      	it	ne
   88c6c:	f04e 0e01 	orrne.w	lr, lr, #1
   88c70:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   88c74:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   88c78:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   88c7c:	d204      	bcs.n	88c88 <__aeabi_dmul+0x80>
   88c7e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   88c82:	416d      	adcs	r5, r5
   88c84:	eb46 0606 	adc.w	r6, r6, r6
   88c88:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   88c8c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   88c90:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   88c94:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   88c98:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   88c9c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   88ca0:	bf88      	it	hi
   88ca2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   88ca6:	d81e      	bhi.n	88ce6 <__aeabi_dmul+0xde>
   88ca8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   88cac:	bf08      	it	eq
   88cae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   88cb2:	f150 0000 	adcs.w	r0, r0, #0
   88cb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   88cba:	bd70      	pop	{r4, r5, r6, pc}
   88cbc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   88cc0:	ea46 0101 	orr.w	r1, r6, r1
   88cc4:	ea40 0002 	orr.w	r0, r0, r2
   88cc8:	ea81 0103 	eor.w	r1, r1, r3
   88ccc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   88cd0:	bfc2      	ittt	gt
   88cd2:	ebd4 050c 	rsbsgt	r5, r4, ip
   88cd6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   88cda:	bd70      	popgt	{r4, r5, r6, pc}
   88cdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   88ce0:	f04f 0e00 	mov.w	lr, #0
   88ce4:	3c01      	subs	r4, #1
   88ce6:	f300 80ab 	bgt.w	88e40 <__aeabi_dmul+0x238>
   88cea:	f114 0f36 	cmn.w	r4, #54	; 0x36
   88cee:	bfde      	ittt	le
   88cf0:	2000      	movle	r0, #0
   88cf2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   88cf6:	bd70      	pople	{r4, r5, r6, pc}
   88cf8:	f1c4 0400 	rsb	r4, r4, #0
   88cfc:	3c20      	subs	r4, #32
   88cfe:	da35      	bge.n	88d6c <__aeabi_dmul+0x164>
   88d00:	340c      	adds	r4, #12
   88d02:	dc1b      	bgt.n	88d3c <__aeabi_dmul+0x134>
   88d04:	f104 0414 	add.w	r4, r4, #20
   88d08:	f1c4 0520 	rsb	r5, r4, #32
   88d0c:	fa00 f305 	lsl.w	r3, r0, r5
   88d10:	fa20 f004 	lsr.w	r0, r0, r4
   88d14:	fa01 f205 	lsl.w	r2, r1, r5
   88d18:	ea40 0002 	orr.w	r0, r0, r2
   88d1c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   88d20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   88d24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   88d28:	fa21 f604 	lsr.w	r6, r1, r4
   88d2c:	eb42 0106 	adc.w	r1, r2, r6
   88d30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   88d34:	bf08      	it	eq
   88d36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   88d3a:	bd70      	pop	{r4, r5, r6, pc}
   88d3c:	f1c4 040c 	rsb	r4, r4, #12
   88d40:	f1c4 0520 	rsb	r5, r4, #32
   88d44:	fa00 f304 	lsl.w	r3, r0, r4
   88d48:	fa20 f005 	lsr.w	r0, r0, r5
   88d4c:	fa01 f204 	lsl.w	r2, r1, r4
   88d50:	ea40 0002 	orr.w	r0, r0, r2
   88d54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88d58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   88d5c:	f141 0100 	adc.w	r1, r1, #0
   88d60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   88d64:	bf08      	it	eq
   88d66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   88d6a:	bd70      	pop	{r4, r5, r6, pc}
   88d6c:	f1c4 0520 	rsb	r5, r4, #32
   88d70:	fa00 f205 	lsl.w	r2, r0, r5
   88d74:	ea4e 0e02 	orr.w	lr, lr, r2
   88d78:	fa20 f304 	lsr.w	r3, r0, r4
   88d7c:	fa01 f205 	lsl.w	r2, r1, r5
   88d80:	ea43 0302 	orr.w	r3, r3, r2
   88d84:	fa21 f004 	lsr.w	r0, r1, r4
   88d88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88d8c:	fa21 f204 	lsr.w	r2, r1, r4
   88d90:	ea20 0002 	bic.w	r0, r0, r2
   88d94:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   88d98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   88d9c:	bf08      	it	eq
   88d9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   88da2:	bd70      	pop	{r4, r5, r6, pc}
   88da4:	f094 0f00 	teq	r4, #0
   88da8:	d10f      	bne.n	88dca <__aeabi_dmul+0x1c2>
   88daa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   88dae:	0040      	lsls	r0, r0, #1
   88db0:	eb41 0101 	adc.w	r1, r1, r1
   88db4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88db8:	bf08      	it	eq
   88dba:	3c01      	subeq	r4, #1
   88dbc:	d0f7      	beq.n	88dae <__aeabi_dmul+0x1a6>
   88dbe:	ea41 0106 	orr.w	r1, r1, r6
   88dc2:	f095 0f00 	teq	r5, #0
   88dc6:	bf18      	it	ne
   88dc8:	4770      	bxne	lr
   88dca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   88dce:	0052      	lsls	r2, r2, #1
   88dd0:	eb43 0303 	adc.w	r3, r3, r3
   88dd4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   88dd8:	bf08      	it	eq
   88dda:	3d01      	subeq	r5, #1
   88ddc:	d0f7      	beq.n	88dce <__aeabi_dmul+0x1c6>
   88dde:	ea43 0306 	orr.w	r3, r3, r6
   88de2:	4770      	bx	lr
   88de4:	ea94 0f0c 	teq	r4, ip
   88de8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   88dec:	bf18      	it	ne
   88dee:	ea95 0f0c 	teqne	r5, ip
   88df2:	d00c      	beq.n	88e0e <__aeabi_dmul+0x206>
   88df4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   88df8:	bf18      	it	ne
   88dfa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   88dfe:	d1d1      	bne.n	88da4 <__aeabi_dmul+0x19c>
   88e00:	ea81 0103 	eor.w	r1, r1, r3
   88e04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88e08:	f04f 0000 	mov.w	r0, #0
   88e0c:	bd70      	pop	{r4, r5, r6, pc}
   88e0e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   88e12:	bf06      	itte	eq
   88e14:	4610      	moveq	r0, r2
   88e16:	4619      	moveq	r1, r3
   88e18:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   88e1c:	d019      	beq.n	88e52 <__aeabi_dmul+0x24a>
   88e1e:	ea94 0f0c 	teq	r4, ip
   88e22:	d102      	bne.n	88e2a <__aeabi_dmul+0x222>
   88e24:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   88e28:	d113      	bne.n	88e52 <__aeabi_dmul+0x24a>
   88e2a:	ea95 0f0c 	teq	r5, ip
   88e2e:	d105      	bne.n	88e3c <__aeabi_dmul+0x234>
   88e30:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   88e34:	bf1c      	itt	ne
   88e36:	4610      	movne	r0, r2
   88e38:	4619      	movne	r1, r3
   88e3a:	d10a      	bne.n	88e52 <__aeabi_dmul+0x24a>
   88e3c:	ea81 0103 	eor.w	r1, r1, r3
   88e40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88e44:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   88e48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   88e4c:	f04f 0000 	mov.w	r0, #0
   88e50:	bd70      	pop	{r4, r5, r6, pc}
   88e52:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   88e56:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   88e5a:	bd70      	pop	{r4, r5, r6, pc}

00088e5c <__aeabi_ddiv>:
   88e5c:	b570      	push	{r4, r5, r6, lr}
   88e5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   88e62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   88e66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   88e6a:	bf1d      	ittte	ne
   88e6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   88e70:	ea94 0f0c 	teqne	r4, ip
   88e74:	ea95 0f0c 	teqne	r5, ip
   88e78:	f000 f8a7 	bleq	88fca <__aeabi_ddiv+0x16e>
   88e7c:	eba4 0405 	sub.w	r4, r4, r5
   88e80:	ea81 0e03 	eor.w	lr, r1, r3
   88e84:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   88e88:	ea4f 3101 	mov.w	r1, r1, lsl #12
   88e8c:	f000 8088 	beq.w	88fa0 <__aeabi_ddiv+0x144>
   88e90:	ea4f 3303 	mov.w	r3, r3, lsl #12
   88e94:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   88e98:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   88e9c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   88ea0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   88ea4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   88ea8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   88eac:	ea4f 2600 	mov.w	r6, r0, lsl #8
   88eb0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   88eb4:	429d      	cmp	r5, r3
   88eb6:	bf08      	it	eq
   88eb8:	4296      	cmpeq	r6, r2
   88eba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   88ebe:	f504 7440 	add.w	r4, r4, #768	; 0x300
   88ec2:	d202      	bcs.n	88eca <__aeabi_ddiv+0x6e>
   88ec4:	085b      	lsrs	r3, r3, #1
   88ec6:	ea4f 0232 	mov.w	r2, r2, rrx
   88eca:	1ab6      	subs	r6, r6, r2
   88ecc:	eb65 0503 	sbc.w	r5, r5, r3
   88ed0:	085b      	lsrs	r3, r3, #1
   88ed2:	ea4f 0232 	mov.w	r2, r2, rrx
   88ed6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   88eda:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   88ede:	ebb6 0e02 	subs.w	lr, r6, r2
   88ee2:	eb75 0e03 	sbcs.w	lr, r5, r3
   88ee6:	bf22      	ittt	cs
   88ee8:	1ab6      	subcs	r6, r6, r2
   88eea:	4675      	movcs	r5, lr
   88eec:	ea40 000c 	orrcs.w	r0, r0, ip
   88ef0:	085b      	lsrs	r3, r3, #1
   88ef2:	ea4f 0232 	mov.w	r2, r2, rrx
   88ef6:	ebb6 0e02 	subs.w	lr, r6, r2
   88efa:	eb75 0e03 	sbcs.w	lr, r5, r3
   88efe:	bf22      	ittt	cs
   88f00:	1ab6      	subcs	r6, r6, r2
   88f02:	4675      	movcs	r5, lr
   88f04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   88f08:	085b      	lsrs	r3, r3, #1
   88f0a:	ea4f 0232 	mov.w	r2, r2, rrx
   88f0e:	ebb6 0e02 	subs.w	lr, r6, r2
   88f12:	eb75 0e03 	sbcs.w	lr, r5, r3
   88f16:	bf22      	ittt	cs
   88f18:	1ab6      	subcs	r6, r6, r2
   88f1a:	4675      	movcs	r5, lr
   88f1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   88f20:	085b      	lsrs	r3, r3, #1
   88f22:	ea4f 0232 	mov.w	r2, r2, rrx
   88f26:	ebb6 0e02 	subs.w	lr, r6, r2
   88f2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   88f2e:	bf22      	ittt	cs
   88f30:	1ab6      	subcs	r6, r6, r2
   88f32:	4675      	movcs	r5, lr
   88f34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   88f38:	ea55 0e06 	orrs.w	lr, r5, r6
   88f3c:	d018      	beq.n	88f70 <__aeabi_ddiv+0x114>
   88f3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   88f42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   88f46:	ea4f 1606 	mov.w	r6, r6, lsl #4
   88f4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   88f4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   88f52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   88f56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   88f5a:	d1c0      	bne.n	88ede <__aeabi_ddiv+0x82>
   88f5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88f60:	d10b      	bne.n	88f7a <__aeabi_ddiv+0x11e>
   88f62:	ea41 0100 	orr.w	r1, r1, r0
   88f66:	f04f 0000 	mov.w	r0, #0
   88f6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   88f6e:	e7b6      	b.n	88ede <__aeabi_ddiv+0x82>
   88f70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88f74:	bf04      	itt	eq
   88f76:	4301      	orreq	r1, r0
   88f78:	2000      	moveq	r0, #0
   88f7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   88f7e:	bf88      	it	hi
   88f80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   88f84:	f63f aeaf 	bhi.w	88ce6 <__aeabi_dmul+0xde>
   88f88:	ebb5 0c03 	subs.w	ip, r5, r3
   88f8c:	bf04      	itt	eq
   88f8e:	ebb6 0c02 	subseq.w	ip, r6, r2
   88f92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   88f96:	f150 0000 	adcs.w	r0, r0, #0
   88f9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   88f9e:	bd70      	pop	{r4, r5, r6, pc}
   88fa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   88fa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   88fa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   88fac:	bfc2      	ittt	gt
   88fae:	ebd4 050c 	rsbsgt	r5, r4, ip
   88fb2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   88fb6:	bd70      	popgt	{r4, r5, r6, pc}
   88fb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   88fbc:	f04f 0e00 	mov.w	lr, #0
   88fc0:	3c01      	subs	r4, #1
   88fc2:	e690      	b.n	88ce6 <__aeabi_dmul+0xde>
   88fc4:	ea45 0e06 	orr.w	lr, r5, r6
   88fc8:	e68d      	b.n	88ce6 <__aeabi_dmul+0xde>
   88fca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   88fce:	ea94 0f0c 	teq	r4, ip
   88fd2:	bf08      	it	eq
   88fd4:	ea95 0f0c 	teqeq	r5, ip
   88fd8:	f43f af3b 	beq.w	88e52 <__aeabi_dmul+0x24a>
   88fdc:	ea94 0f0c 	teq	r4, ip
   88fe0:	d10a      	bne.n	88ff8 <__aeabi_ddiv+0x19c>
   88fe2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   88fe6:	f47f af34 	bne.w	88e52 <__aeabi_dmul+0x24a>
   88fea:	ea95 0f0c 	teq	r5, ip
   88fee:	f47f af25 	bne.w	88e3c <__aeabi_dmul+0x234>
   88ff2:	4610      	mov	r0, r2
   88ff4:	4619      	mov	r1, r3
   88ff6:	e72c      	b.n	88e52 <__aeabi_dmul+0x24a>
   88ff8:	ea95 0f0c 	teq	r5, ip
   88ffc:	d106      	bne.n	8900c <__aeabi_ddiv+0x1b0>
   88ffe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   89002:	f43f aefd 	beq.w	88e00 <__aeabi_dmul+0x1f8>
   89006:	4610      	mov	r0, r2
   89008:	4619      	mov	r1, r3
   8900a:	e722      	b.n	88e52 <__aeabi_dmul+0x24a>
   8900c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   89010:	bf18      	it	ne
   89012:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   89016:	f47f aec5 	bne.w	88da4 <__aeabi_dmul+0x19c>
   8901a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8901e:	f47f af0d 	bne.w	88e3c <__aeabi_dmul+0x234>
   89022:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   89026:	f47f aeeb 	bne.w	88e00 <__aeabi_dmul+0x1f8>
   8902a:	e712      	b.n	88e52 <__aeabi_dmul+0x24a>

0008902c <__gedf2>:
   8902c:	f04f 3cff 	mov.w	ip, #4294967295
   89030:	e006      	b.n	89040 <__cmpdf2+0x4>
   89032:	bf00      	nop

00089034 <__ledf2>:
   89034:	f04f 0c01 	mov.w	ip, #1
   89038:	e002      	b.n	89040 <__cmpdf2+0x4>
   8903a:	bf00      	nop

0008903c <__cmpdf2>:
   8903c:	f04f 0c01 	mov.w	ip, #1
   89040:	f84d cd04 	str.w	ip, [sp, #-4]!
   89044:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8904c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89050:	bf18      	it	ne
   89052:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   89056:	d01b      	beq.n	89090 <__cmpdf2+0x54>
   89058:	b001      	add	sp, #4
   8905a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8905e:	bf0c      	ite	eq
   89060:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   89064:	ea91 0f03 	teqne	r1, r3
   89068:	bf02      	ittt	eq
   8906a:	ea90 0f02 	teqeq	r0, r2
   8906e:	2000      	moveq	r0, #0
   89070:	4770      	bxeq	lr
   89072:	f110 0f00 	cmn.w	r0, #0
   89076:	ea91 0f03 	teq	r1, r3
   8907a:	bf58      	it	pl
   8907c:	4299      	cmppl	r1, r3
   8907e:	bf08      	it	eq
   89080:	4290      	cmpeq	r0, r2
   89082:	bf2c      	ite	cs
   89084:	17d8      	asrcs	r0, r3, #31
   89086:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8908a:	f040 0001 	orr.w	r0, r0, #1
   8908e:	4770      	bx	lr
   89090:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89098:	d102      	bne.n	890a0 <__cmpdf2+0x64>
   8909a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8909e:	d107      	bne.n	890b0 <__cmpdf2+0x74>
   890a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   890a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   890a8:	d1d6      	bne.n	89058 <__cmpdf2+0x1c>
   890aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   890ae:	d0d3      	beq.n	89058 <__cmpdf2+0x1c>
   890b0:	f85d 0b04 	ldr.w	r0, [sp], #4
   890b4:	4770      	bx	lr
   890b6:	bf00      	nop

000890b8 <__aeabi_cdrcmple>:
   890b8:	4684      	mov	ip, r0
   890ba:	4610      	mov	r0, r2
   890bc:	4662      	mov	r2, ip
   890be:	468c      	mov	ip, r1
   890c0:	4619      	mov	r1, r3
   890c2:	4663      	mov	r3, ip
   890c4:	e000      	b.n	890c8 <__aeabi_cdcmpeq>
   890c6:	bf00      	nop

000890c8 <__aeabi_cdcmpeq>:
   890c8:	b501      	push	{r0, lr}
   890ca:	f7ff ffb7 	bl	8903c <__cmpdf2>
   890ce:	2800      	cmp	r0, #0
   890d0:	bf48      	it	mi
   890d2:	f110 0f00 	cmnmi.w	r0, #0
   890d6:	bd01      	pop	{r0, pc}

000890d8 <__aeabi_dcmpeq>:
   890d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   890dc:	f7ff fff4 	bl	890c8 <__aeabi_cdcmpeq>
   890e0:	bf0c      	ite	eq
   890e2:	2001      	moveq	r0, #1
   890e4:	2000      	movne	r0, #0
   890e6:	f85d fb08 	ldr.w	pc, [sp], #8
   890ea:	bf00      	nop

000890ec <__aeabi_dcmplt>:
   890ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   890f0:	f7ff ffea 	bl	890c8 <__aeabi_cdcmpeq>
   890f4:	bf34      	ite	cc
   890f6:	2001      	movcc	r0, #1
   890f8:	2000      	movcs	r0, #0
   890fa:	f85d fb08 	ldr.w	pc, [sp], #8
   890fe:	bf00      	nop

00089100 <__aeabi_dcmple>:
   89100:	f84d ed08 	str.w	lr, [sp, #-8]!
   89104:	f7ff ffe0 	bl	890c8 <__aeabi_cdcmpeq>
   89108:	bf94      	ite	ls
   8910a:	2001      	movls	r0, #1
   8910c:	2000      	movhi	r0, #0
   8910e:	f85d fb08 	ldr.w	pc, [sp], #8
   89112:	bf00      	nop

00089114 <__aeabi_dcmpge>:
   89114:	f84d ed08 	str.w	lr, [sp, #-8]!
   89118:	f7ff ffce 	bl	890b8 <__aeabi_cdrcmple>
   8911c:	bf94      	ite	ls
   8911e:	2001      	movls	r0, #1
   89120:	2000      	movhi	r0, #0
   89122:	f85d fb08 	ldr.w	pc, [sp], #8
   89126:	bf00      	nop

00089128 <__aeabi_dcmpgt>:
   89128:	f84d ed08 	str.w	lr, [sp, #-8]!
   8912c:	f7ff ffc4 	bl	890b8 <__aeabi_cdrcmple>
   89130:	bf34      	ite	cc
   89132:	2001      	movcc	r0, #1
   89134:	2000      	movcs	r0, #0
   89136:	f85d fb08 	ldr.w	pc, [sp], #8
   8913a:	bf00      	nop

0008913c <__aeabi_dcmpun>:
   8913c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   89140:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89144:	d102      	bne.n	8914c <__aeabi_dcmpun+0x10>
   89146:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8914a:	d10a      	bne.n	89162 <__aeabi_dcmpun+0x26>
   8914c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   89150:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   89154:	d102      	bne.n	8915c <__aeabi_dcmpun+0x20>
   89156:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8915a:	d102      	bne.n	89162 <__aeabi_dcmpun+0x26>
   8915c:	f04f 0000 	mov.w	r0, #0
   89160:	4770      	bx	lr
   89162:	f04f 0001 	mov.w	r0, #1
   89166:	4770      	bx	lr

00089168 <__aeabi_d2iz>:
   89168:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8916c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   89170:	d215      	bcs.n	8919e <__aeabi_d2iz+0x36>
   89172:	d511      	bpl.n	89198 <__aeabi_d2iz+0x30>
   89174:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   89178:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8917c:	d912      	bls.n	891a4 <__aeabi_d2iz+0x3c>
   8917e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   89182:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   89186:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8918a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8918e:	fa23 f002 	lsr.w	r0, r3, r2
   89192:	bf18      	it	ne
   89194:	4240      	negne	r0, r0
   89196:	4770      	bx	lr
   89198:	f04f 0000 	mov.w	r0, #0
   8919c:	4770      	bx	lr
   8919e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   891a2:	d105      	bne.n	891b0 <__aeabi_d2iz+0x48>
   891a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   891a8:	bf08      	it	eq
   891aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   891ae:	4770      	bx	lr
   891b0:	f04f 0000 	mov.w	r0, #0
   891b4:	4770      	bx	lr
   891b6:	bf00      	nop

000891b8 <__aeabi_uldivmod>:
   891b8:	b953      	cbnz	r3, 891d0 <__aeabi_uldivmod+0x18>
   891ba:	b94a      	cbnz	r2, 891d0 <__aeabi_uldivmod+0x18>
   891bc:	2900      	cmp	r1, #0
   891be:	bf08      	it	eq
   891c0:	2800      	cmpeq	r0, #0
   891c2:	bf1c      	itt	ne
   891c4:	f04f 31ff 	movne.w	r1, #4294967295
   891c8:	f04f 30ff 	movne.w	r0, #4294967295
   891cc:	f000 b97a 	b.w	894c4 <__aeabi_idiv0>
   891d0:	f1ad 0c08 	sub.w	ip, sp, #8
   891d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   891d8:	f000 f806 	bl	891e8 <__udivmoddi4>
   891dc:	f8dd e004 	ldr.w	lr, [sp, #4]
   891e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   891e4:	b004      	add	sp, #16
   891e6:	4770      	bx	lr

000891e8 <__udivmoddi4>:
   891e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   891ec:	468c      	mov	ip, r1
   891ee:	460e      	mov	r6, r1
   891f0:	4604      	mov	r4, r0
   891f2:	9d08      	ldr	r5, [sp, #32]
   891f4:	2b00      	cmp	r3, #0
   891f6:	d150      	bne.n	8929a <__udivmoddi4+0xb2>
   891f8:	428a      	cmp	r2, r1
   891fa:	4617      	mov	r7, r2
   891fc:	d96c      	bls.n	892d8 <__udivmoddi4+0xf0>
   891fe:	fab2 fe82 	clz	lr, r2
   89202:	f1be 0f00 	cmp.w	lr, #0
   89206:	d00b      	beq.n	89220 <__udivmoddi4+0x38>
   89208:	f1ce 0c20 	rsb	ip, lr, #32
   8920c:	fa01 f60e 	lsl.w	r6, r1, lr
   89210:	fa20 fc0c 	lsr.w	ip, r0, ip
   89214:	fa02 f70e 	lsl.w	r7, r2, lr
   89218:	ea4c 0c06 	orr.w	ip, ip, r6
   8921c:	fa00 f40e 	lsl.w	r4, r0, lr
   89220:	0c3a      	lsrs	r2, r7, #16
   89222:	fbbc f9f2 	udiv	r9, ip, r2
   89226:	b2bb      	uxth	r3, r7
   89228:	fb02 cc19 	mls	ip, r2, r9, ip
   8922c:	fb09 fa03 	mul.w	sl, r9, r3
   89230:	ea4f 4814 	mov.w	r8, r4, lsr #16
   89234:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   89238:	45b2      	cmp	sl, r6
   8923a:	d90a      	bls.n	89252 <__udivmoddi4+0x6a>
   8923c:	19f6      	adds	r6, r6, r7
   8923e:	f109 31ff 	add.w	r1, r9, #4294967295
   89242:	f080 8125 	bcs.w	89490 <__udivmoddi4+0x2a8>
   89246:	45b2      	cmp	sl, r6
   89248:	f240 8122 	bls.w	89490 <__udivmoddi4+0x2a8>
   8924c:	f1a9 0902 	sub.w	r9, r9, #2
   89250:	443e      	add	r6, r7
   89252:	eba6 060a 	sub.w	r6, r6, sl
   89256:	fbb6 f0f2 	udiv	r0, r6, r2
   8925a:	fb02 6610 	mls	r6, r2, r0, r6
   8925e:	fb00 f303 	mul.w	r3, r0, r3
   89262:	b2a4      	uxth	r4, r4
   89264:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   89268:	42a3      	cmp	r3, r4
   8926a:	d909      	bls.n	89280 <__udivmoddi4+0x98>
   8926c:	19e4      	adds	r4, r4, r7
   8926e:	f100 32ff 	add.w	r2, r0, #4294967295
   89272:	f080 810b 	bcs.w	8948c <__udivmoddi4+0x2a4>
   89276:	42a3      	cmp	r3, r4
   89278:	f240 8108 	bls.w	8948c <__udivmoddi4+0x2a4>
   8927c:	3802      	subs	r0, #2
   8927e:	443c      	add	r4, r7
   89280:	2100      	movs	r1, #0
   89282:	1ae4      	subs	r4, r4, r3
   89284:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   89288:	2d00      	cmp	r5, #0
   8928a:	d062      	beq.n	89352 <__udivmoddi4+0x16a>
   8928c:	2300      	movs	r3, #0
   8928e:	fa24 f40e 	lsr.w	r4, r4, lr
   89292:	602c      	str	r4, [r5, #0]
   89294:	606b      	str	r3, [r5, #4]
   89296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8929a:	428b      	cmp	r3, r1
   8929c:	d907      	bls.n	892ae <__udivmoddi4+0xc6>
   8929e:	2d00      	cmp	r5, #0
   892a0:	d055      	beq.n	8934e <__udivmoddi4+0x166>
   892a2:	2100      	movs	r1, #0
   892a4:	e885 0041 	stmia.w	r5, {r0, r6}
   892a8:	4608      	mov	r0, r1
   892aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   892ae:	fab3 f183 	clz	r1, r3
   892b2:	2900      	cmp	r1, #0
   892b4:	f040 808f 	bne.w	893d6 <__udivmoddi4+0x1ee>
   892b8:	42b3      	cmp	r3, r6
   892ba:	d302      	bcc.n	892c2 <__udivmoddi4+0xda>
   892bc:	4282      	cmp	r2, r0
   892be:	f200 80fc 	bhi.w	894ba <__udivmoddi4+0x2d2>
   892c2:	1a84      	subs	r4, r0, r2
   892c4:	eb66 0603 	sbc.w	r6, r6, r3
   892c8:	2001      	movs	r0, #1
   892ca:	46b4      	mov	ip, r6
   892cc:	2d00      	cmp	r5, #0
   892ce:	d040      	beq.n	89352 <__udivmoddi4+0x16a>
   892d0:	e885 1010 	stmia.w	r5, {r4, ip}
   892d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   892d8:	b912      	cbnz	r2, 892e0 <__udivmoddi4+0xf8>
   892da:	2701      	movs	r7, #1
   892dc:	fbb7 f7f2 	udiv	r7, r7, r2
   892e0:	fab7 fe87 	clz	lr, r7
   892e4:	f1be 0f00 	cmp.w	lr, #0
   892e8:	d135      	bne.n	89356 <__udivmoddi4+0x16e>
   892ea:	2101      	movs	r1, #1
   892ec:	1bf6      	subs	r6, r6, r7
   892ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   892f2:	fa1f f887 	uxth.w	r8, r7
   892f6:	fbb6 f2fc 	udiv	r2, r6, ip
   892fa:	fb0c 6612 	mls	r6, ip, r2, r6
   892fe:	fb08 f002 	mul.w	r0, r8, r2
   89302:	0c23      	lsrs	r3, r4, #16
   89304:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   89308:	42b0      	cmp	r0, r6
   8930a:	d907      	bls.n	8931c <__udivmoddi4+0x134>
   8930c:	19f6      	adds	r6, r6, r7
   8930e:	f102 33ff 	add.w	r3, r2, #4294967295
   89312:	d202      	bcs.n	8931a <__udivmoddi4+0x132>
   89314:	42b0      	cmp	r0, r6
   89316:	f200 80d2 	bhi.w	894be <__udivmoddi4+0x2d6>
   8931a:	461a      	mov	r2, r3
   8931c:	1a36      	subs	r6, r6, r0
   8931e:	fbb6 f0fc 	udiv	r0, r6, ip
   89322:	fb0c 6610 	mls	r6, ip, r0, r6
   89326:	fb08 f800 	mul.w	r8, r8, r0
   8932a:	b2a3      	uxth	r3, r4
   8932c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   89330:	45a0      	cmp	r8, r4
   89332:	d907      	bls.n	89344 <__udivmoddi4+0x15c>
   89334:	19e4      	adds	r4, r4, r7
   89336:	f100 33ff 	add.w	r3, r0, #4294967295
   8933a:	d202      	bcs.n	89342 <__udivmoddi4+0x15a>
   8933c:	45a0      	cmp	r8, r4
   8933e:	f200 80b9 	bhi.w	894b4 <__udivmoddi4+0x2cc>
   89342:	4618      	mov	r0, r3
   89344:	eba4 0408 	sub.w	r4, r4, r8
   89348:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   8934c:	e79c      	b.n	89288 <__udivmoddi4+0xa0>
   8934e:	4629      	mov	r1, r5
   89350:	4628      	mov	r0, r5
   89352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89356:	fa07 f70e 	lsl.w	r7, r7, lr
   8935a:	f1ce 0320 	rsb	r3, lr, #32
   8935e:	fa26 f203 	lsr.w	r2, r6, r3
   89362:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   89366:	fbb2 f1fc 	udiv	r1, r2, ip
   8936a:	fa1f f887 	uxth.w	r8, r7
   8936e:	fb0c 2211 	mls	r2, ip, r1, r2
   89372:	fa06 f60e 	lsl.w	r6, r6, lr
   89376:	fa20 f303 	lsr.w	r3, r0, r3
   8937a:	fb01 f908 	mul.w	r9, r1, r8
   8937e:	4333      	orrs	r3, r6
   89380:	0c1e      	lsrs	r6, r3, #16
   89382:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   89386:	45b1      	cmp	r9, r6
   89388:	fa00 f40e 	lsl.w	r4, r0, lr
   8938c:	d909      	bls.n	893a2 <__udivmoddi4+0x1ba>
   8938e:	19f6      	adds	r6, r6, r7
   89390:	f101 32ff 	add.w	r2, r1, #4294967295
   89394:	f080 808c 	bcs.w	894b0 <__udivmoddi4+0x2c8>
   89398:	45b1      	cmp	r9, r6
   8939a:	f240 8089 	bls.w	894b0 <__udivmoddi4+0x2c8>
   8939e:	3902      	subs	r1, #2
   893a0:	443e      	add	r6, r7
   893a2:	eba6 0609 	sub.w	r6, r6, r9
   893a6:	fbb6 f0fc 	udiv	r0, r6, ip
   893aa:	fb0c 6210 	mls	r2, ip, r0, r6
   893ae:	fb00 f908 	mul.w	r9, r0, r8
   893b2:	b29e      	uxth	r6, r3
   893b4:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   893b8:	45b1      	cmp	r9, r6
   893ba:	d907      	bls.n	893cc <__udivmoddi4+0x1e4>
   893bc:	19f6      	adds	r6, r6, r7
   893be:	f100 33ff 	add.w	r3, r0, #4294967295
   893c2:	d271      	bcs.n	894a8 <__udivmoddi4+0x2c0>
   893c4:	45b1      	cmp	r9, r6
   893c6:	d96f      	bls.n	894a8 <__udivmoddi4+0x2c0>
   893c8:	3802      	subs	r0, #2
   893ca:	443e      	add	r6, r7
   893cc:	eba6 0609 	sub.w	r6, r6, r9
   893d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   893d4:	e78f      	b.n	892f6 <__udivmoddi4+0x10e>
   893d6:	f1c1 0720 	rsb	r7, r1, #32
   893da:	fa22 f807 	lsr.w	r8, r2, r7
   893de:	408b      	lsls	r3, r1
   893e0:	ea48 0303 	orr.w	r3, r8, r3
   893e4:	fa26 f407 	lsr.w	r4, r6, r7
   893e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   893ec:	fbb4 f9fe 	udiv	r9, r4, lr
   893f0:	fa1f fc83 	uxth.w	ip, r3
   893f4:	fb0e 4419 	mls	r4, lr, r9, r4
   893f8:	408e      	lsls	r6, r1
   893fa:	fa20 f807 	lsr.w	r8, r0, r7
   893fe:	fb09 fa0c 	mul.w	sl, r9, ip
   89402:	ea48 0806 	orr.w	r8, r8, r6
   89406:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8940a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   8940e:	45a2      	cmp	sl, r4
   89410:	fa02 f201 	lsl.w	r2, r2, r1
   89414:	fa00 f601 	lsl.w	r6, r0, r1
   89418:	d908      	bls.n	8942c <__udivmoddi4+0x244>
   8941a:	18e4      	adds	r4, r4, r3
   8941c:	f109 30ff 	add.w	r0, r9, #4294967295
   89420:	d244      	bcs.n	894ac <__udivmoddi4+0x2c4>
   89422:	45a2      	cmp	sl, r4
   89424:	d942      	bls.n	894ac <__udivmoddi4+0x2c4>
   89426:	f1a9 0902 	sub.w	r9, r9, #2
   8942a:	441c      	add	r4, r3
   8942c:	eba4 040a 	sub.w	r4, r4, sl
   89430:	fbb4 f0fe 	udiv	r0, r4, lr
   89434:	fb0e 4410 	mls	r4, lr, r0, r4
   89438:	fb00 fc0c 	mul.w	ip, r0, ip
   8943c:	fa1f f888 	uxth.w	r8, r8
   89440:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   89444:	45a4      	cmp	ip, r4
   89446:	d907      	bls.n	89458 <__udivmoddi4+0x270>
   89448:	18e4      	adds	r4, r4, r3
   8944a:	f100 3eff 	add.w	lr, r0, #4294967295
   8944e:	d229      	bcs.n	894a4 <__udivmoddi4+0x2bc>
   89450:	45a4      	cmp	ip, r4
   89452:	d927      	bls.n	894a4 <__udivmoddi4+0x2bc>
   89454:	3802      	subs	r0, #2
   89456:	441c      	add	r4, r3
   89458:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8945c:	fba0 8902 	umull	r8, r9, r0, r2
   89460:	eba4 0c0c 	sub.w	ip, r4, ip
   89464:	45cc      	cmp	ip, r9
   89466:	46c2      	mov	sl, r8
   89468:	46ce      	mov	lr, r9
   8946a:	d315      	bcc.n	89498 <__udivmoddi4+0x2b0>
   8946c:	d012      	beq.n	89494 <__udivmoddi4+0x2ac>
   8946e:	b155      	cbz	r5, 89486 <__udivmoddi4+0x29e>
   89470:	ebb6 030a 	subs.w	r3, r6, sl
   89474:	eb6c 060e 	sbc.w	r6, ip, lr
   89478:	fa06 f707 	lsl.w	r7, r6, r7
   8947c:	40cb      	lsrs	r3, r1
   8947e:	431f      	orrs	r7, r3
   89480:	40ce      	lsrs	r6, r1
   89482:	602f      	str	r7, [r5, #0]
   89484:	606e      	str	r6, [r5, #4]
   89486:	2100      	movs	r1, #0
   89488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8948c:	4610      	mov	r0, r2
   8948e:	e6f7      	b.n	89280 <__udivmoddi4+0x98>
   89490:	4689      	mov	r9, r1
   89492:	e6de      	b.n	89252 <__udivmoddi4+0x6a>
   89494:	4546      	cmp	r6, r8
   89496:	d2ea      	bcs.n	8946e <__udivmoddi4+0x286>
   89498:	ebb8 0a02 	subs.w	sl, r8, r2
   8949c:	eb69 0e03 	sbc.w	lr, r9, r3
   894a0:	3801      	subs	r0, #1
   894a2:	e7e4      	b.n	8946e <__udivmoddi4+0x286>
   894a4:	4670      	mov	r0, lr
   894a6:	e7d7      	b.n	89458 <__udivmoddi4+0x270>
   894a8:	4618      	mov	r0, r3
   894aa:	e78f      	b.n	893cc <__udivmoddi4+0x1e4>
   894ac:	4681      	mov	r9, r0
   894ae:	e7bd      	b.n	8942c <__udivmoddi4+0x244>
   894b0:	4611      	mov	r1, r2
   894b2:	e776      	b.n	893a2 <__udivmoddi4+0x1ba>
   894b4:	3802      	subs	r0, #2
   894b6:	443c      	add	r4, r7
   894b8:	e744      	b.n	89344 <__udivmoddi4+0x15c>
   894ba:	4608      	mov	r0, r1
   894bc:	e706      	b.n	892cc <__udivmoddi4+0xe4>
   894be:	3a02      	subs	r2, #2
   894c0:	443e      	add	r6, r7
   894c2:	e72b      	b.n	8931c <__udivmoddi4+0x134>

000894c4 <__aeabi_idiv0>:
   894c4:	4770      	bx	lr
   894c6:	bf00      	nop
   894c8:	090a0a0d 	.word	0x090a0a0d
   894cc:	5f5f5f2a 	.word	0x5f5f5f2a
   894d0:	5f5f5f5f 	.word	0x5f5f5f5f
   894d4:	5f5f5f5f 	.word	0x5f5f5f5f
   894d8:	205f5f5f 	.word	0x205f5f5f
   894dc:	2e555043 	.word	0x2e555043
   894e0:	2d584341 	.word	0x2d584341
   894e4:	41535441 	.word	0x41535441
   894e8:	3455334d 	.word	0x3455334d
   894ec:	412d4143 	.word	0x412d4143
   894f0:	5f5f2055 	.word	0x5f5f2055
   894f4:	5f5f5f5f 	.word	0x5f5f5f5f
   894f8:	5453414d 	.word	0x5453414d
   894fc:	5f5f5245 	.word	0x5f5f5245
   89500:	2a5f5f5f 	.word	0x2a5f5f5f
   89504:	000a0a0d 	.word	0x000a0a0d
   89508:	2e555043 	.word	0x2e555043
   8950c:	20584341 	.word	0x20584341
   89510:	53544120 	.word	0x53544120
   89514:	55334d41 	.word	0x55334d41
   89518:	00004334 	.word	0x00004334
   8951c:	43090a0d 	.word	0x43090a0d
   89520:	53524d4f 	.word	0x53524d4f
   89524:	5f353834 	.word	0x5f353834
   89528:	3a57454e 	.word	0x3a57454e
   8952c:	00000a0d 	.word	0x00000a0d
   89530:	53520a0d 	.word	0x53520a0d
   89534:	20353834 	.word	0x20353834
   89538:	4445454e 	.word	0x4445454e
   8953c:	4b434120 	.word	0x4b434120
   89540:	6425203a 	.word	0x6425203a
   89544:	00000a0d 	.word	0x00000a0d
   89548:	3d3d0a0d 	.word	0x3d3d0a0d
   8954c:	3d3d3d3d 	.word	0x3d3d3d3d
   89550:	3d3d3d3d 	.word	0x3d3d3d3d
   89554:	3d3d3d3d 	.word	0x3d3d3d3d
   89558:	3d3d3d3d 	.word	0x3d3d3d3d
   8955c:	3d3d3d3d 	.word	0x3d3d3d3d
   89560:	3d3d3d3d 	.word	0x3d3d3d3d
   89564:	3d3d3d3d 	.word	0x3d3d3d3d
   89568:	3d3d3d3d 	.word	0x3d3d3d3d
   8956c:	3d3d3d3d 	.word	0x3d3d3d3d
   89570:	3d3d3d3d 	.word	0x3d3d3d3d
   89574:	3d3d3d3d 	.word	0x3d3d3d3d
   89578:	3d3d3d3d 	.word	0x3d3d3d3d
   8957c:	3d3d3d3d 	.word	0x3d3d3d3d
   89580:	0a0d3d3d 	.word	0x0a0d3d3d
   89584:	00000000 	.word	0x00000000
   89588:	3d3d0a0d 	.word	0x3d3d0a0d
   8958c:	3d3d3d3d 	.word	0x3d3d3d3d
   89590:	3d3d3d3d 	.word	0x3d3d3d3d
   89594:	3d3d3d3d 	.word	0x3d3d3d3d
   89598:	3d3d3d3d 	.word	0x3d3d3d3d
   8959c:	3d3d3d3d 	.word	0x3d3d3d3d
   895a0:	4152463d 	.word	0x4152463d
   895a4:	5220454d 	.word	0x5220454d
   895a8:	49454345 	.word	0x49454345
   895ac:	3d444556 	.word	0x3d444556
   895b0:	3d3d3d3d 	.word	0x3d3d3d3d
   895b4:	3d3d3d3d 	.word	0x3d3d3d3d
   895b8:	3d3d3d3d 	.word	0x3d3d3d3d
   895bc:	3d3d3d3d 	.word	0x3d3d3d3d
   895c0:	3d3d3d3d 	.word	0x3d3d3d3d
   895c4:	3d3d3d3d 	.word	0x3d3d3d3d
   895c8:	3d3d3d3d 	.word	0x3d3d3d3d
   895cc:	3d3d3d3d 	.word	0x3d3d3d3d
   895d0:	00000a0d 	.word	0x00000a0d
   895d4:	63657209 	.word	0x63657209
   895d8:	3a637243 	.word	0x3a637243
   895dc:	58343025 	.word	0x58343025
   895e0:	63726320 	.word	0x63726320
   895e4:	30253a43 	.word	0x30253a43
   895e8:	00205834 	.word	0x00205834
   895ec:	3d3d0a0d 	.word	0x3d3d0a0d
   895f0:	3d3d3d3d 	.word	0x3d3d3d3d
   895f4:	3d3d3d3d 	.word	0x3d3d3d3d
   895f8:	3d3d3d3d 	.word	0x3d3d3d3d
   895fc:	3d3d3d3d 	.word	0x3d3d3d3d
   89600:	3d3d3d3d 	.word	0x3d3d3d3d
   89604:	3d3d3d3d 	.word	0x3d3d3d3d
   89608:	3d3d3d3d 	.word	0x3d3d3d3d
   8960c:	3d3d3d3d 	.word	0x3d3d3d3d
   89610:	3d3d3d3d 	.word	0x3d3d3d3d
   89614:	3d3d3d3d 	.word	0x3d3d3d3d
   89618:	3d3d3d3d 	.word	0x3d3d3d3d
   8961c:	3d3d3d3d 	.word	0x3d3d3d3d
   89620:	3d3d3d3d 	.word	0x3d3d3d3d
   89624:	3d3d3d3d 	.word	0x3d3d3d3d
   89628:	3d3d3d3d 	.word	0x3d3d3d3d
   8962c:	3d3d3d3d 	.word	0x3d3d3d3d
   89630:	3d3d3d3d 	.word	0x3d3d3d3d
   89634:	00000a0d 	.word	0x00000a0d
   89638:	5f6d0a0d 	.word	0x5f6d0a0d
   8963c:	54494157 	.word	0x54494157
   89640:	4b43415f 	.word	0x4b43415f
   89644:	00000a0d 	.word	0x00000a0d
   89648:	2a090a0d 	.word	0x2a090a0d
   8964c:	2a2a2a2a 	.word	0x2a2a2a2a
   89650:	4d4f4320 	.word	0x4d4f4320
   89654:	38345352 	.word	0x38345352
   89658:	4f4e2035 	.word	0x4f4e2035
   8965c:	4b434120 	.word	0x4b434120
   89660:	4f524620 	.word	0x4f524620
   89664:	4c53204d 	.word	0x4c53204d
   89668:	20455641 	.word	0x20455641
   8966c:	00000023 	.word	0x00000023
   89670:	58323025 	.word	0x58323025
   89674:	20796220 	.word	0x20796220
   89678:	74206425 	.word	0x74206425
   8967c:	73656972 	.word	0x73656972
   89680:	2a2a2a20 	.word	0x2a2a2a20
   89684:	0a0d2a2a 	.word	0x0a0d2a2a
   89688:	00000000 	.word	0x00000000

0008968c <usart_console_settings>:
   8968c:	0001c200 000000c0 00000800 00000000     ................
	...
   896a4:	5453414d 00005245 76616c53 44412065     MASTER..Slave AD
   896b4:	78253a44 00000000 6c530a0d 20657661     D:%x......Slave 
   896c4:	3a6d6f63 09782520 6c530909 20657661     com: %x...Slave 
   896d4:	3a646461 0a0d7825 00000000 75460a0d     add:%x........Fu
   896e4:	203a636e 0a0d7825 00000000 73490a0d     nc: %x........Is
   896f4:	526b6341 203a7165 0a0d6425 00000000     AckReq: %d......
   89704:	49090a0d 414d2073 52455453 00000a0d     ...Is MASTER....
   89714:	41090a0d 52204b43 49555145 3a444552     ...ACK REQUIRED:
   89724:	00642520 57090a0d 45544952 4e49535f      %d....WRITE_SIN
   89734:	5f454c47 4c494f43 4b43415f 0d4b4f5f     GLE_COIL_ACK_OK.
   89744:	0000000a 52570a0d 20455449 474e4953     ......WRITE SING
   89754:	4320454c 0d4c494f 6e75460a 6f697463     LE COIL..Functio
   89764:	646f436e 25203a65 4f0a0d58 55505455     nCode: %X..OUTPU
   89774:	44412054 203a5244 4f205825 55505455     T ADDR: %X OUTPU
   89784:	41562054 3a45554c 00582520 63250a0d     T VALUE: %X...%c
   89794:	0a0d6325 00000000 570a0a0d 45544952     %c.........WRITE
   897a4:	4e495320 20454c47 4c494f43 4b434120      SINGLE COIL ACK
   897b4:	0a0d2121 00000000 2a090a0d 2a2a2a2a     !!.........*****
   897c4:	444f4d20 5f535542 56414c53 4f4e5f45      MODBUS_SLAVE_NO
   897d4:	43415f54 5246204b 53204d4f 4556414c     T_ACK FROM SLAVE
   897e4:	00002320 78323025 2a2a2a20 0a0d2a2a      #..%02x *****..
   897f4:	00000000 454d0a0d 4e5f554e 0a0d5745     ......MENU_NEW..
   89804:	00000000 20202020 20202020 20202020     ....            
   89814:	20202020 20202020 00000000                      ....

00089820 <_etatMenu>:
   89820:	000899f0 00089948 00000000 00080e79     ....H.......y...
   89830:	00089a00 00089948 00000000 00080eb9     ....H...........
   89840:	000899e4 00089948 00000000 00080ef9     ....H...........
	...

00089860 <_mainMenu>:
   89860:	00089988 00000000 00000000 00080e39     ............9...
   89870:	00089994 00000000 00089948 00000000     ........H.......
   89880:	000899a4 00000000 00089948 00000000     ........H.......
   89890:	000899b4 00000000 00089948 00000000     ........H.......
	...
   898b0:	54415445 524f5020 31204554 00000000     ETAT PORTE 1....
   898c0:	54415445 524f5020 00534554 6e656d5f     ETAT PORTES._men
   898d0:	74704f75 536e6f69 75467361 203a636e     uOptionSasFunc: 
   898e0:	20444142 00004353 20202020 20202020     BAD SC..        
   898f0:	20202020 20202020 20202020 00000020                  ...
   89900:	4d524546 52555445 41532045 00000053     FERMETURE SAS...
   89910:	6e656d5f 726f5075 65466574 72656d72     _menuPorteFermer
   89920:	42203a31 53204441 00000043 6e656d5f     1: BAD SC..._men
   89930:	726f5075 65466574 72656d72 42203a32     uPorteFermer2: B
   89940:	53204441 00000043                       AD SC...

00089948 <_porteMenu>:
   89948:	000899c4 00089860 00000000 00080df9     ....`...........
   89958:	000899d4 00089860 00000000 00080e19     ....`...........
   89968:	000899e4 00089860 00089820 00000000     ....`... .......
	...
   89988:	6974704f 73206e6f 00007361 6974704f     Option sas..Opti
   89998:	70206e6f 6574726f 00000073 6974704f     on portes...Opti
   899a8:	66206e6f 74656e65 00006572 6974704f     on fenetre..Opti
   899b8:	74206e6f 70706172 00000065 6d726546     on trappe...Ferm
   899c8:	70207265 6574726f 00003120 6d726546     er porte 1..Ferm
   899d8:	70207265 6574726f 00003220 74617445     er porte 2..Etat
   899e8:	726f7020 00736574 74617445 726f7020      portes.Etat por
   899f8:	31206574 00000000 74617445 726f7020     te 1....Etat por
   89a08:	32206574 00000000 00000001 00000002     te 2............
   89a18:	00000004 00000008 00000010 00000020     ............ ...
   89a28:	00000040 00000080 00000100 00000200     @...............
   89a38:	00000400 000186a0 000186a0 00b71b00     ................
   89a48:	65540a0d 73207473 74726174 2e2e6465     ..Test started..
   89a58:	000a0d2e 48500a0d 2d64253a 0d64252d     ......PH:%d--%d.
   89a68:	0000000a 454e4550 56554f20 00545245     ....PENE OUVERT.
   89a78:	00203a09 00004e4f 0046464f 454e4550     .: .ON..OFF.PENE
   89a88:	52454620 0000454d 00534c49 203a0909      FERME..ILS...: 
   89a98:	00000000 00005653 41444152 00000052     ....SV..RADAR...
   89aa8:	00555644 4d455250 45524549 544e4520     DVU.PREMIERE ENT
   89ab8:	00454552 20555644 454e4547 004c4152     REE.DVU GENERAL.
   89ac8:	52544e45 4c204545 45524249 00000000     ENTREE LIBRE....
   89ad8:	52544e45 4f204545 4f495450 0000004e     ENTREE OPTION...
   89ae8:	65540a0d 74207473 696d7265 6574616e     ..Test terminate
   89af8:	2e2e2e64 00000a0d                       d.......

00089b00 <commands>:
   89b00:	0000624f 00082129 0000ae76 00082085     Ob..)!..v.... ..
   89b10:	00003427 000822d9 00000000 00000000     '4..."..........
   89b20:	42090a0d 64616f72 74736163 6e797320     ...Broadcast syn
   89b30:	6f726863 617a696e 6e6f6974 6b6f7420     chronization tok
   89b40:	0a0d6e65 00000000 624e0a0d 74736554     en........NbTest
   89b50:	6425203a 00000a0d 75420a0d 72657a7a     : %d......Buzzer
   89b60:	206e6f20 20726f66 00000000 6d206425      on for ....%d m
   89b70:	2e2e2e73 00000a0d 75420a0d 72657a7a     s.........Buzzer
   89b80:	66666f20 0d2e2e2e 0000000a 000a0d20      off........ ...
   89b90:	2a090a0d 2a2a2a2a 4f525245 64253a52     ...*****ERROR:%d
   89ba0:	3a435309 2a2a6425 0d2a2a2a 0000000a     .SC:%d*****.....
   89bb0:	25207325 73252064 64342520 00000000     %s %d %s %4d....

00089bc0 <nbDaysInMonth>:
   89bc0:	1e1f1c1f 1f1f1e1f 1f1e1f1e 756e614a     ............Janu
   89bd0:	00797261 72626546 79726175 00000000     ary.February....
   89be0:	6372614d 00000068 69727041 0000006c     March...April...
   89bf0:	0079614d 656e754a 00000000 796c754a     May.June....July
   89c00:	00000000 75677541 00007473 74706553     ....August..Sept
   89c10:	65626d65 00000072 6f74634f 00726562     ember...October.
   89c20:	65766f4e 7265626d 00000000 65636544     November....Dece
   89c30:	7265626d 00000000 646e7553 00007961     mber....Sunday..
   89c40:	646e6f4d 00007961 73657554 00796164     Monday..Tuesday.
   89c50:	6e646557 61647365 00000079 72756854     Wednesday...Thur
   89c60:	79616473 00000000 64697246 00007961     sday....Friday..
   89c70:	75746153 79616472 00000000              Saturday....

00089c7c <line2addr>:
   89c7c:	54144000 3230250d 30253a64 253a6432     .@.T.%02d:%02d:%
   89c8c:	00643230 64323025 3230253a 30253a64     02d.%02d:%02d:%0
   89c9c:	00006432 64323025 3230252f 30252f64     2d..%02d/%02d/%0
   89cac:	00006434 003e0a0d 00445b1b 00435b1b     4d....>..[D..[C.
   89cbc:	3e2f0a0d 00000000 6b6e7509 6e776f6e     ../>.....unknown
   89ccc:	646d6320 3025203a 0a0d5834 00000000      cmd: %04X......
   89cdc:	2a090a0d 2a2a2a2a 73616320 535f2065     ...***** case _S
   89cec:	4c4c4548 48424b5f 203a5449 20444142     HELL_KBHIT: BAD 
   89cfc:	65736163 2a2a2021 2a2a2a2a 00000a0d     case! ******....
   89d0c:	20200a0d 43534520 5145535f 0000203a     ..   ESC_SEQ: ..
   89d1c:	30253c20 0d3e5834 0000000a 4b325b1b      <%04X>......[2K
   89d2c:	0000000d 3b315b1b 00004335              .....[1;5C..

00089d38 <heartBeatRhythm>:
   89d38:	00000028 000000fe 00000028 00000548     (.......(...H...
   89d48:	00000000                                ....

00089d4c <hexDigits>:
   89d4c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   89d5c:	00000000                                ....

00089d60 <restartTimeOut>:
   89d60:	00000033                                3...

00089d64 <separators>:
   89d64:	3a3b2e20 0d095c2f 0000000a 4a325b1b      .;:/\.......[2J
   89d74:	00000000 3d090a0d 3d3d3d3d 3d3d3d3d     .......=========
   89d84:	3d3d3d3d 43203d3d 20504948 4e454449     ====== CHIP IDEN
   89d94:	49464954 49205245 534f464e 3d3d3d20     TIFIER INFOS ===
   89da4:	3d3d3d3d 3d3d3d3d 3d3d3d3d 000a0a0d     ============....
   89db4:	52455609 4e4f4953 6325203a 00000a0d     .VERSION: %c....
   89dc4:	45202009 434f5250 0000203a 564e2009     .  EPROC: ... NV
   89dd4:	5a495350 0000203a 50564e09 325a4953     PSIZ: ...NVPSIZ2
   89de4:	0000203a 41525309 5a49534d 0000203a     : ...SRAMSIZ: ..
   89df4:	20202009 48435241 0000203a 2d2d2d20     .   ARCH: .. ---
   89e04:	00000020 564e2009 50595450 0000203a      .... NVPTYP: ..
   89e14:	20202009 44495845 3025203a 0a0d5838     .   EXID: %08X..
   89e24:	00000000 3d090a0d 3d3d3d3d 3d3d3d3d     .......=========
   89e34:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89e44:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   89e54:	3d3d3d3d 3d3d3d3d 3d3d3d3d 000a0a0d     ============....
   89e64:	7379530d 206d6574 6c6c6977 73657220     .System will res
   89e74:	74726174 206e6920 73206925 6e6f6365     tart in %i secon
   89e84:	2e2e2e64 00000000 2f2e3a20 00000a0d     d....... :./....
   89e94:	4b325b1b 00000000 646d6320 61747320     .[2K.... cmd sta
   89ea4:	3a207472 00000020                       rt : ...

00089eac <arch>:
   89eac:	00000019 0008a170 0008a17c 00000029     ....p...|...)...
   89ebc:	0008a190 0008a1a0 00000034 0008a1b4     ........4.......
   89ecc:	0008a1bc 00000037 0008a1cc 0008a1d4     ....7...........
   89edc:	00000039 0008a1e0 0008a1e8 0000003b     9...........;...
   89eec:	0008a1f4 0008a1fc 00000040 0008a20c     ........@.......
   89efc:	0008a214 00000042 0008a224 0008a22c     ....B...$...,...
   89f0c:	00000055 0008a23c 0008a244 00000060     U...<...D...`...
   89f1c:	0008a254 0008a260 00000061 0008a274     T...`...a...t...
   89f2c:	0008a284 00000063 0008a298 0008a2a0     ....c...........
   89f3c:	00000070 0008a2b0 0008a2bc 00000071     p...........q...
   89f4c:	0008a2d0 0008a2e0 00000072 0008a2f4     ........r.......
   89f5c:	0008a304 00000073 0008a318 0008a324     ....s.......$...
   89f6c:	00000075 0008a338 0008a344 00000076     u...8...D...v...
   89f7c:	0008a358 0008a368 00000080 0008a37c     X...h.......|...
   89f8c:	0008a384 00000081 0008a3a8 0008a3b0     ................
   89f9c:	00000083 0008a3d4 0008a3e4 00000084     ................
   89fac:	0008a410 0008a420 00000085 0008a44c     .... .......L...
   89fbc:	0008a45c 00000086 0008a488 0008a498     \...............
   89fcc:	00000088 0008a4c8 0008a4d8 00000089     ................
   89fdc:	0008a500 0008a510 0000008a 0008a538     ............8...
   89fec:	0008a548 00000092 0008a574 0008a57c     H.......t...|...
   89ffc:	00000093 0008a58c 0008a594 00000094     ................
   8a00c:	0008a5b4 0008a5bc 00000095 0008a5dc     ................
   8a01c:	0008a5e4 00000099 0008a608 0008a614     ................
   8a02c:	0000009a 0008a638 0008a644 000000a5     ....8...D.......
   8a03c:	0008a668 0008a668 000000f0 0008a670     h...h.......p...
   8a04c:	0008a678 00000000 0008a688 00000000     x...............

0008a05c <cmdEntries>:
   8a05c:	0000624f 00083be9 00006cab 00083c19     Ob...;...l...<..
   8a06c:	00003bed 00083c05 0000aaf6 00083b69     .;...<......i;..
   8a07c:	0000b326 00083ba9 0000902b 00083dad     &....;..+....=..
   8a08c:	0000b344 00083dad 0000ebe8 00083de1     D....=.......=..
	...
   8a0a4:	204d4f52 202d2d2d 004d4f52 4c4d4f52     ROM --- ROM.ROML
   8a0b4:	20535345 202d2d2d 6c4d4f52 20737365     ESS --- ROMless 
   8a0c4:	6f20726f 68632d6e 46207069 6873616c     or on-chip Flash
   8a0d4:	00000000 53414c46 2d2d2048 6d45202d     ....FLASH --- Em
   8a0e4:	64646562 46206465 6873616c 6d654d20     bedded Flash Mem
   8a0f4:	0079726f 5f4d4f52 53414c46 2d2d2048     ory.ROM_FLASH --
   8a104:	4f52202d 6e61204d 6d452064 64646562     - ROM and Embedd
   8a114:	46206465 6873616c 6d654d20 2079726f     ed Flash Memory 
   8a124:	50564e5b 205a4953 52207369 73204d4f     [NVPSIZ is ROM s
   8a134:	20657a69 564e202f 5a495350 73692032     ize / NVPSIZ2 is
   8a144:	616c4620 73206873 5d657a69 00000000      Flash size]....
   8a154:	4d415253 2d2d2d20 41525320 6d65204d     SRAM --- SRAM em
   8a164:	74616c75 20676e69 004d4f52 31395441     ulating ROM.AT91
   8a174:	394d4153 00007878 31395441 394d4153     SAM9xx..AT91SAM9
   8a184:	53207878 65697265 00000073 31395441     xx Series...AT91
   8a194:	394d4153 78784558 00000000 31395441     SAM9XExx....AT91
   8a1a4:	394d4153 78784558 72655320 00736569     SAM9XExx Series.
   8a1b4:	31395441 00343378 31395441 20343378     AT91x34.AT91x34 
   8a1c4:	69726553 00007365 37504143 00000000     Series..CAP7....
   8a1d4:	37504143 72655320 00736569 39504143     CAP7 Series.CAP9
   8a1e4:	00000000 39504143 72655320 00736569     ....CAP9 Series.
   8a1f4:	31504143 00000031 31504143 65532031     CAP11...CAP11 Se
   8a204:	73656972 00000000 31395441 00303478     ries....AT91x40.
   8a214:	31395441 20303478 69726553 00007365     AT91x40 Series..
   8a224:	31395441 00323478 31395441 20323478     AT91x42.AT91x42 
   8a234:	69726553 00007365 31395441 00353578     Series..AT91x55.
   8a244:	31395441 20353578 69726553 00007365     AT91x55 Series..
   8a254:	31395441 374d4153 00787841 31395441     AT91SAM7Axx.AT91
   8a264:	374d4153 20787841 69726553 00007365     SAM7Axx Series..
   8a274:	31395441 374d4153 78785141 00000000     AT91SAM7AQxx....
   8a284:	31395441 374d4153 78785141 72655320     AT91SAM7AQxx Ser
   8a294:	00736569 31395441 00333678 31395441     ies.AT91x63.AT91
   8a2a4:	20333678 69726553 00007365 31395441     x63 Series..AT91
   8a2b4:	374d4153 00787853 31395441 374d4153     SAM7Sxx.AT91SAM7
   8a2c4:	20787853 69726553 00007365 31395441     Sxx Series..AT91
   8a2d4:	374d4153 78784358 00000000 31395441     SAM7XCxx....AT91
   8a2e4:	374d4153 78784358 72655320 00736569     SAM7XCxx Series.
   8a2f4:	31395441 374d4153 78784553 00000000     AT91SAM7SExx....
   8a304:	31395441 374d4153 78784553 72655320     AT91SAM7SExx Ser
   8a314:	00736569 31395441 374d4153 0078784c     ies.AT91SAM7Lxx.
   8a324:	31395441 374d4153 2078784c 69726553     AT91SAM7Lxx Seri
   8a334:	00007365 31395441 374d4153 00787858     es..AT91SAM7Xxx.
   8a344:	31395441 374d4153 20787858 69726553     AT91SAM7Xxx Seri
   8a354:	00007365 31395441 374d4153 78784c53     es..AT91SAM7SLxx
   8a364:	00000000 31395441 374d4153 78784c53     ....AT91SAM7SLxx
   8a374:	72655320 00736569 334d4153 00437855      Series.SAM3UxC.
   8a384:	334d4153 20437855 69726553 28207365     SAM3UxC Series (
   8a394:	2d303031 206e6970 73726576 296e6f69     100-pin version)
   8a3a4:	00000000 334d4153 00457855 334d4153     ....SAM3UxE.SAM3
   8a3b4:	20457855 69726553 28207365 2d343431     UxE Series (144-
   8a3c4:	206e6970 73726576 296e6f69 00000000     pin version)....
   8a3d4:	334d4153 2f437841 334d4153 00437841     SAM3AxC/SAM3AxC.
   8a3e4:	334d4153 2f437841 344d4153 20437841     SAM3AxC/SAM4AxC 
   8a3f4:	69726553 28207365 2d303031 206e6970     Series (100-pin 
   8a404:	73726576 296e6f69 00000000 334d4153     version)....SAM3
   8a414:	2f437858 344d4153 00437858 334d4153     XxC/SAM4XxC.SAM3
   8a424:	2f437858 344d4153 20437858 69726553     XxC/SAM4XxC Seri
   8a434:	28207365 2d303031 206e6970 73726576     es (100-pin vers
   8a444:	296e6f69 00000000 334d4153 2f457858     ion)....SAM3XxE/
   8a454:	344d4153 00457858 334d4153 2f457858     SAM4XxE.SAM3XxE/
   8a464:	344d4153 20457858 69726553 28207365     SAM4XxE Series (
   8a474:	2d343431 206e6970 73726576 296e6f69     144-pin version)
   8a484:	00000000 334d4153 2f477858 344d4153     ....SAM3XxG/SAM4
   8a494:	00477858 334d4153 2f477858 344d4153     XxG.SAM3XxG/SAM4
   8a4a4:	20477858 69726553 28207365 2f383032     XxG Series (208/
   8a4b4:	2d373132 206e6970 73726576 296e6f69     217-pin version)
   8a4c4:	00000000 334d4153 2f417853 344d4153     ....SAM3SxA/SAM4
   8a4d4:	00417853 334d4153 2f417853 344d4153     SxA.SAM3SxA/SAM4
   8a4e4:	20417853 69726553 28207365 702d3834     SxA Series (48-p
   8a4f4:	76206e69 69737265 00296e6f 334d4153     in version).SAM3
   8a504:	2f427853 344d4153 00427853 334d4153     SxB/SAM4SxB.SAM3
   8a514:	2f427853 344d4153 20427853 69726553     SxB/SAM4SxB Seri
   8a524:	28207365 702d3436 76206e69 69737265     es (64-pin versi
   8a534:	00296e6f 334d4153 2f437853 344d4153     on).SAM3SxC/SAM4
   8a544:	00437853 334d4153 2f437853 344d4153     SxC.SAM3SxC/SAM4
   8a554:	20437853 69726553 28207365 2d303031     SxC Series (100-
   8a564:	206e6970 73726576 296e6f69 00000000     pin version)....
   8a574:	31395441 00323978 31395441 20323978     AT91x92.AT91x92 
   8a584:	69726553 00007365 334d4153 0041784e     Series..SAM3NxA.
   8a594:	334d4153 2041784e 69726553 28207365     SAM3NxA Series (
   8a5a4:	702d3834 76206e69 69737265 00296e6f     48-pin version).
   8a5b4:	334d4153 0042784e 334d4153 2042784e     SAM3NxB.SAM3NxB 
   8a5c4:	69726553 28207365 702d3436 76206e69     Series (64-pin v
   8a5d4:	69737265 00296e6f 334d4153 0043784e     ersion).SAM3NxC.
   8a5e4:	334d4153 2043784e 69726553 28207365     SAM3NxC Series (
   8a5f4:	2d303031 206e6970 73726576 296e6f69     100-pin version)
   8a604:	00000000 334d4153 42784453 00000000     ....SAM3SDxB....
   8a614:	334d4153 42784453 72655320 20736569     SAM3SDxB Series 
   8a624:	2d343628 206e6970 73726576 296e6f69     (64-pin version)
   8a634:	00000000 334d4153 43784453 00000000     ....SAM3SDxC....
   8a644:	334d4153 43784453 72655320 20736569     SAM3SDxC Series 
   8a654:	30303128 6e69702d 72657620 6e6f6973     (100-pin version
   8a664:	00000029 354d4153 00000041 35375441     )...SAM5A...AT75
   8a674:	00787843 35375441 20787843 69726553     Cxx.AT75Cxx Seri
   8a684:	00007365 41204f4e 21484352 00000000     es..NO ARCH!....
   8a694:	204b3834 65747962 00000073 62204b31     48K bytes...1K b
   8a6a4:	73657479 00000000 62204b32 73657479     ytes....2K bytes
   8a6b4:	00000000 62204b36 73657479 00000000     ....6K bytes....
   8a6c4:	204b3432 65747962 00000073 62204b34     24K bytes...4K b
   8a6d4:	73657479 00000000 204b3038 65747962     ytes....80K byte
   8a6e4:	00000073 4b303631 74796220 00007365     s...160K bytes..
   8a6f4:	62204b38 73657479 00000000 204b3631     8K bytes....16K 
   8a704:	65747962 00000073 204b3233 65747962     bytes...32K byte
   8a714:	00000073 204b3436 65747962 00000073     s...64K bytes...
   8a724:	4b383231 74796220 00007365 4b363532     128K bytes..256K
   8a734:	74796220 00007365 204b3639 65747962      bytes..96K byte
   8a744:	00000073 4b323135 74796220 00007365     s...512K bytes..
   8a754:	454e4f4e 00000000 34323031 7962204b     NONE....1024K by
   8a764:	00736574 38343032 7962204b 00736574     tes.2048K bytes.
   8a774:	45444e55 454e4946 00002144 394d5241     UNDEFINED!..ARM9
   8a784:	00533634 374d5241 494d4454 00000000     46S.ARM7TDMI....
   8a794:	74726f43 4d2d7865 00000033 394d5241     Cortex-M3...ARM9
   8a7a4:	00543032 394d5241 4a453632 00000053     20T.ARM926EJS...
   8a7b4:	74726f43 412d7865 00000035 74726f43     Cortex-A5...Cort
   8a7c4:	4d2d7865 00000034                       ex-M4...

0008a7cc <uart_opt>:
   8a7cc:	05b8d800 0001c200 00000800              ............

0008a7d8 <_global_impure_ptr>:
   8a7d8:	20000630 00464e49 00666e69 004e414e     0.. INF.inf.NAN.
   8a7e8:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   8a7f8:	46454443 00000000 33323130 37363534     CDEF....01234567
   8a808:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   8a818:	0000296c 00000030                       l)..0...

0008a820 <blanks.7223>:
   8a820:	20202020 20202020 20202020 20202020                     

0008a830 <zeroes.7224>:
   8a830:	30303030 30303030 30303030 30303030     0000000000000000
   8a840:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   8a850:	49534f50 00000058 0000002e 00000000     POSIX...........

0008a860 <__mprec_bigtens>:
   8a860:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8a870:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8a880:	7f73bf3c 75154fdd                       <.s..O.u

0008a888 <__mprec_tens>:
   8a888:	00000000 3ff00000 00000000 40240000     .......?......$@
   8a898:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8a8a8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8a8b8:	00000000 412e8480 00000000 416312d0     .......A......cA
   8a8c8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8a8d8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8a8e8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8a8f8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8a908:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8a918:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8a928:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8a938:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8a948:	79d99db4 44ea7843                       ...yCx.D

0008a950 <p05.6055>:
   8a950:	00000005 00000019 0000007d              ........}...

0008a95c <_ctype_>:
   8a95c:	20202000 20202020 28282020 20282828     .         ((((( 
   8a96c:	20202020 20202020 20202020 20202020                     
   8a97c:	10108820 10101010 10101010 10101010      ...............
   8a98c:	04040410 04040404 10040404 10101010     ................
   8a99c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8a9ac:	01010101 01010101 01010101 10101010     ................
   8a9bc:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8a9cc:	02020202 02020202 02020202 10101010     ................
   8a9dc:	00000020 00000000 00000000 00000000      ...............
	...

0008aa60 <_init>:
   8aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8aa62:	bf00      	nop
   8aa64:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8aa66:	bc08      	pop	{r3}
   8aa68:	469e      	mov	lr, r3
   8aa6a:	4770      	bx	lr

0008aa6c <__init_array_start>:
   8aa6c:	000862b9 	.word	0x000862b9

0008aa70 <__frame_dummy_init_array_entry>:
   8aa70:	000800e1                                ....

0008aa74 <_fini>:
   8aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8aa76:	bf00      	nop
   8aa78:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8aa7a:	bc08      	pop	{r3}
   8aa7c:	469e      	mov	lr, r3
   8aa7e:	4770      	bx	lr

0008aa80 <__fini_array_start>:
   8aa80:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000010:	4a21      	ldr	r2, [pc, #132]	; (20000098 <SystemInit+0x8c>)
20000012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2000001a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
2000001e:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
20000022:	6a1b      	ldr	r3, [r3, #32]
20000024:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20000028:	d107      	bne.n	2000003a <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000002a:	4a1c      	ldr	r2, [pc, #112]	; (2000009c <SystemInit+0x90>)
2000002c:	4b1c      	ldr	r3, [pc, #112]	; (200000a0 <SystemInit+0x94>)
2000002e:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000030:	461a      	mov	r2, r3
20000032:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000034:	f013 0f01 	tst.w	r3, #1
20000038:	d0fb      	beq.n	20000032 <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000003a:	4a1a      	ldr	r2, [pc, #104]	; (200000a4 <SystemInit+0x98>)
2000003c:	4b18      	ldr	r3, [pc, #96]	; (200000a0 <SystemInit+0x94>)
2000003e:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000040:	461a      	mov	r2, r3
20000042:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000044:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20000048:	d0fb      	beq.n	20000042 <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2000004a:	4a15      	ldr	r2, [pc, #84]	; (200000a0 <SystemInit+0x94>)
2000004c:	6b13      	ldr	r3, [r2, #48]	; 0x30
2000004e:	f023 0303 	bic.w	r3, r3, #3
20000052:	f043 0301 	orr.w	r3, r3, #1
20000056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000005a:	f013 0f08 	tst.w	r3, #8
2000005e:	d0fb      	beq.n	20000058 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000060:	4a11      	ldr	r2, [pc, #68]	; (200000a8 <SystemInit+0x9c>)
20000062:	4b0f      	ldr	r3, [pc, #60]	; (200000a0 <SystemInit+0x94>)
20000064:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000066:	461a      	mov	r2, r3
20000068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000006a:	f013 0f02 	tst.w	r3, #2
2000006e:	d0fb      	beq.n	20000068 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000070:	2211      	movs	r2, #17
20000072:	4b0b      	ldr	r3, [pc, #44]	; (200000a0 <SystemInit+0x94>)
20000074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000076:	461a      	mov	r2, r3
20000078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000007a:	f013 0f08 	tst.w	r3, #8
2000007e:	d0fb      	beq.n	20000078 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000080:	2212      	movs	r2, #18
20000082:	4b07      	ldr	r3, [pc, #28]	; (200000a0 <SystemInit+0x94>)
20000084:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000086:	461a      	mov	r2, r3
20000088:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000008a:	f013 0f08 	tst.w	r3, #8
2000008e:	d0fb      	beq.n	20000088 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000090:	4a06      	ldr	r2, [pc, #24]	; (200000ac <SystemInit+0xa0>)
20000092:	4b07      	ldr	r3, [pc, #28]	; (200000b0 <SystemInit+0xa4>)
20000094:	601a      	str	r2, [r3, #0]
20000096:	4770      	bx	lr
20000098:	400e0800 	.word	0x400e0800
2000009c:	00370809 	.word	0x00370809
200000a0:	400e0400 	.word	0x400e0400
200000a4:	01370809 	.word	0x01370809
200000a8:	200f3f01 	.word	0x200f3f01
200000ac:	05b8d800 	.word	0x05b8d800
200000b0:	20000128 	.word	0x20000128

200000b4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000b4:	4b16      	ldr	r3, [pc, #88]	; (20000110 <system_init_flash+0x5c>)
200000b6:	4298      	cmp	r0, r3
200000b8:	d912      	bls.n	200000e0 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000ba:	4b16      	ldr	r3, [pc, #88]	; (20000114 <system_init_flash+0x60>)
200000bc:	4298      	cmp	r0, r3
200000be:	d916      	bls.n	200000ee <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200000c0:	4b15      	ldr	r3, [pc, #84]	; (20000118 <system_init_flash+0x64>)
200000c2:	4298      	cmp	r0, r3
200000c4:	d91b      	bls.n	200000fe <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200000c6:	4b15      	ldr	r3, [pc, #84]	; (2000011c <system_init_flash+0x68>)
200000c8:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200000ca:	bf94      	ite	ls
200000cc:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000d0:	f44f 6380 	movhi.w	r3, #1024	; 0x400
200000d4:	4a12      	ldr	r2, [pc, #72]	; (20000120 <system_init_flash+0x6c>)
200000d6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000dc:	6013      	str	r3, [r2, #0]
200000de:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200000e0:	2300      	movs	r3, #0
200000e2:	4a0f      	ldr	r2, [pc, #60]	; (20000120 <system_init_flash+0x6c>)
200000e4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200000e6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000ea:	6013      	str	r3, [r2, #0]
200000ec:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200000ee:	f44f 7380 	mov.w	r3, #256	; 0x100
200000f2:	4a0b      	ldr	r2, [pc, #44]	; (20000120 <system_init_flash+0x6c>)
200000f4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200000f6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000fa:	6013      	str	r3, [r2, #0]
200000fc:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200000fe:	f44f 7300 	mov.w	r3, #512	; 0x200
20000102:	4a07      	ldr	r2, [pc, #28]	; (20000120 <system_init_flash+0x6c>)
20000104:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000106:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000010a:	6013      	str	r3, [r2, #0]
2000010c:	4770      	bx	lr
2000010e:	bf00      	nop
20000110:	016e35ff 	.word	0x016e35ff
20000114:	026259ff 	.word	0x026259ff
20000118:	044aa1ff 	.word	0x044aa1ff
2000011c:	0501bcff 	.word	0x0501bcff
20000120:	400e0800 	.word	0x400e0800

20000124 <g_interrupt_enabled>:
20000124:	00000001                                ....

20000128 <SystemCoreClock>:
20000128:	003d0900                                ..=.

2000012c <wCRCTable>:
2000012c:	00000000 0000c0c1 0000c181 00000140     ............@...
2000013c:	0000c301 000003c0 00000280 0000c241     ............A...
2000014c:	0000c601 000006c0 00000780 0000c741     ............A...
2000015c:	00000500 0000c5c1 0000c481 00000440     ............@...
2000016c:	0000cc01 00000cc0 00000d80 0000cd41     ............A...
2000017c:	00000f00 0000cfc1 0000ce81 00000e40     ............@...
2000018c:	00000a00 0000cac1 0000cb81 00000b40     ............@...
2000019c:	0000c901 000009c0 00000880 0000c841     ............A...
200001ac:	0000d801 000018c0 00001980 0000d941     ............A...
200001bc:	00001b00 0000dbc1 0000da81 00001a40     ............@...
200001cc:	00001e00 0000dec1 0000df81 00001f40     ............@...
200001dc:	0000dd01 00001dc0 00001c80 0000dc41     ............A...
200001ec:	00001400 0000d4c1 0000d581 00001540     ............@...
200001fc:	0000d701 000017c0 00001680 0000d641     ............A...
2000020c:	0000d201 000012c0 00001380 0000d341     ............A...
2000021c:	00001100 0000d1c1 0000d081 00001040     ............@...
2000022c:	0000f001 000030c0 00003180 0000f141     .....0...1..A...
2000023c:	00003300 0000f3c1 0000f281 00003240     .3..........@2..
2000024c:	00003600 0000f6c1 0000f781 00003740     .6..........@7..
2000025c:	0000f501 000035c0 00003480 0000f441     .....5...4..A...
2000026c:	00003c00 0000fcc1 0000fd81 00003d40     .<..........@=..
2000027c:	0000ff01 00003fc0 00003e80 0000fe41     .....?...>..A...
2000028c:	0000fa01 00003ac0 00003b80 0000fb41     .....:...;..A...
2000029c:	00003900 0000f9c1 0000f881 00003840     .9..........@8..
200002ac:	00002800 0000e8c1 0000e981 00002940     .(..........@)..
200002bc:	0000eb01 00002bc0 00002a80 0000ea41     .....+...*..A...
200002cc:	0000ee01 00002ec0 00002f80 0000ef41     ........./..A...
200002dc:	00002d00 0000edc1 0000ec81 00002c40     .-..........@,..
200002ec:	0000e401 000024c0 00002580 0000e541     .....$...%..A...
200002fc:	00002700 0000e7c1 0000e681 00002640     .'..........@&..
2000030c:	00002200 0000e2c1 0000e381 00002340     ."..........@#..
2000031c:	0000e101 000021c0 00002080 0000e041     .....!... ..A...
2000032c:	0000a001 000060c0 00006180 0000a141     .....`...a..A...
2000033c:	00006300 0000a3c1 0000a281 00006240     .c..........@b..
2000034c:	00006600 0000a6c1 0000a781 00006740     .f..........@g..
2000035c:	0000a501 000065c0 00006480 0000a441     .....e...d..A...
2000036c:	00006c00 0000acc1 0000ad81 00006d40     .l..........@m..
2000037c:	0000af01 00006fc0 00006e80 0000ae41     .....o...n..A...
2000038c:	0000aa01 00006ac0 00006b80 0000ab41     .....j...k..A...
2000039c:	00006900 0000a9c1 0000a881 00006840     .i..........@h..
200003ac:	00007800 0000b8c1 0000b981 00007940     .x..........@y..
200003bc:	0000bb01 00007bc0 00007a80 0000ba41     .....{...z..A...
200003cc:	0000be01 00007ec0 00007f80 0000bf41     .....~......A...
200003dc:	00007d00 0000bdc1 0000bc81 00007c40     .}..........@|..
200003ec:	0000b401 000074c0 00007580 0000b541     .....t...u..A...
200003fc:	00007700 0000b7c1 0000b681 00007640     .w..........@v..
2000040c:	00007200 0000b2c1 0000b381 00007340     .r..........@s..
2000041c:	0000b101 000071c0 00007080 0000b041     .....q...p..A...
2000042c:	00005000 000090c1 00009181 00005140     .P..........@Q..
2000043c:	00009301 000053c0 00005280 00009241     .....S...R..A...
2000044c:	00009601 000056c0 00005780 00009741     .....V...W..A...
2000045c:	00005500 000095c1 00009481 00005440     .U..........@T..
2000046c:	00009c01 00005cc0 00005d80 00009d41     .....\...]..A...
2000047c:	00005f00 00009fc1 00009e81 00005e40     ._..........@^..
2000048c:	00005a00 00009ac1 00009b81 00005b40     .Z..........@[..
2000049c:	00009901 000059c0 00005880 00009841     .....Y...X..A...
200004ac:	00008801 000048c0 00004980 00008941     .....H...I..A...
200004bc:	00004b00 00008bc1 00008a81 00004a40     .K..........@J..
200004cc:	00004e00 00008ec1 00008f81 00004f40     .N..........@O..
200004dc:	00008d01 00004dc0 00004c80 00008c41     .....M...L..A...
200004ec:	00004400 000084c1 00008581 00004540     .D..........@E..
200004fc:	00008701 000047c0 00004680 00008641     .....G...F..A...
2000050c:	00008201 000042c0 00004380 00008341     .....B...C..A...
2000051c:	00004100 000081c1 00008081 00004040     .A..........@@..

2000052c <daysOfWeek>:
2000052c:	00089c38 00089c40 00089c48 00089c50     8...@...H...P...
2000053c:	00089c5c 00089c68 00089c70              \...h...p...

20000548 <months>:
20000548:	00089bcc 00089bd4 00089be0 00089be8     ................
20000558:	00089bf0 00089bf4 00089bfc 00089c04     ................
20000568:	00089c0c 00089c18 00089c20 00089c2c     ........ ...,...

20000578 <eprocs>:
20000578:	0008a774 0008a780 0008a788 0008a794     t...............
20000588:	0008a7a0 0008a7a8 0008a7b4 0008a7c0     ................

20000598 <nvpsiz>:
20000598:	0008a754 0008a6f4 0008a700 0008a70c     T...............
200005a8:	00000000 0008a718 00000000 0008a724     ............$...
200005b8:	00000000 0008a730 0008a748 00000000     ....0...H.......
200005c8:	0008a75c 00000000 0008a768 00000000     \.......h.......

200005d8 <nvptyp>:
200005d8:	0008a0a4 0008a0b0 0008a0d8 0008a0f8     ................
200005e8:	0008a154                                T...

200005ec <sramsiz>:
200005ec:	0008a694 0008a6a0 0008a6ac 0008a6b8     ................
200005fc:	0008a6c4 0008a6d0 0008a6dc 0008a6e8     ................
2000060c:	0008a6f4 0008a700 0008a70c 0008a718     ................
2000061c:	0008a724 0008a730 0008a73c 0008a748     $...0...<...H...

2000062c <_impure_ptr>:
2000062c:	20000630                                0.. 

20000630 <impure_data>:
20000630:	00000000 2000091c 20000984 200009ec     ....... ... ... 
	...
200006d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200006e8:	0005deec 0000000b 00000000 00000000     ................
	...

20000a58 <__atexit_recursive_mutex>:
20000a58:	200022e0                                .". 

20000a5c <__global_locale>:
20000a5c:	00000043 00000000 00000000 00000000     C...............
	...
20000a7c:	00000043 00000000 00000000 00000000     C...............
	...
20000a9c:	00000043 00000000 00000000 00000000     C...............
	...
20000abc:	00000043 00000000 00000000 00000000     C...............
	...
20000adc:	00000043 00000000 00000000 00000000     C...............
	...
20000afc:	00000043 00000000 00000000 00000000     C...............
	...
20000b1c:	00000043 00000000 00000000 00000000     C...............
	...
20000b3c:	000880bd 000877e9 00000000 0008a95c     .....w......\...
20000b4c:	0008a858 000897b8 000897b8 000897b8     X...............
20000b5c:	000897b8 000897b8 000897b8 000897b8     ................
20000b6c:	000897b8 000897b8 ffffffff ffffffff     ................
20000b7c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000ba4:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000bc8 <__malloc_av_>:
	...
20000bd0:	20000bc8 20000bc8 20000bd0 20000bd0     ... ... ... ... 
20000be0:	20000bd8 20000bd8 20000be0 20000be0     ... ... ... ... 
20000bf0:	20000be8 20000be8 20000bf0 20000bf0     ... ... ... ... 
20000c00:	20000bf8 20000bf8 20000c00 20000c00     ... ... ... ... 
20000c10:	20000c08 20000c08 20000c10 20000c10     ... ... ... ... 
20000c20:	20000c18 20000c18 20000c20 20000c20     ... ...  ..  .. 
20000c30:	20000c28 20000c28 20000c30 20000c30     (.. (.. 0.. 0.. 
20000c40:	20000c38 20000c38 20000c40 20000c40     8.. 8.. @.. @.. 
20000c50:	20000c48 20000c48 20000c50 20000c50     H.. H.. P.. P.. 
20000c60:	20000c58 20000c58 20000c60 20000c60     X.. X.. `.. `.. 
20000c70:	20000c68 20000c68 20000c70 20000c70     h.. h.. p.. p.. 
20000c80:	20000c78 20000c78 20000c80 20000c80     x.. x.. ... ... 
20000c90:	20000c88 20000c88 20000c90 20000c90     ... ... ... ... 
20000ca0:	20000c98 20000c98 20000ca0 20000ca0     ... ... ... ... 
20000cb0:	20000ca8 20000ca8 20000cb0 20000cb0     ... ... ... ... 
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 
20000d50:	20000d48 20000d48 20000d50 20000d50     H.. H.. P.. P.. 
20000d60:	20000d58 20000d58 20000d60 20000d60     X.. X.. `.. `.. 
20000d70:	20000d68 20000d68 20000d70 20000d70     h.. h.. p.. p.. 
20000d80:	20000d78 20000d78 20000d80 20000d80     x.. x.. ... ... 
20000d90:	20000d88 20000d88 20000d90 20000d90     ... ... ... ... 
20000da0:	20000d98 20000d98 20000da0 20000da0     ... ... ... ... 
20000db0:	20000da8 20000da8 20000db0 20000db0     ... ... ... ... 
20000dc0:	20000db8 20000db8 20000dc0 20000dc0     ... ... ... ... 
20000dd0:	20000dc8 20000dc8 20000dd0 20000dd0     ... ... ... ... 
20000de0:	20000dd8 20000dd8 20000de0 20000de0     ... ... ... ... 
20000df0:	20000de8 20000de8 20000df0 20000df0     ... ... ... ... 
20000e00:	20000df8 20000df8 20000e00 20000e00     ... ... ... ... 
20000e10:	20000e08 20000e08 20000e10 20000e10     ... ... ... ... 
20000e20:	20000e18 20000e18 20000e20 20000e20     ... ...  ..  .. 
20000e30:	20000e28 20000e28 20000e30 20000e30     (.. (.. 0.. 0.. 
20000e40:	20000e38 20000e38 20000e40 20000e40     8.. 8.. @.. @.. 
20000e50:	20000e48 20000e48 20000e50 20000e50     H.. H.. P.. P.. 
20000e60:	20000e58 20000e58 20000e60 20000e60     X.. X.. `.. `.. 
20000e70:	20000e68 20000e68 20000e70 20000e70     h.. h.. p.. p.. 
20000e80:	20000e78 20000e78 20000e80 20000e80     x.. x.. ... ... 
20000e90:	20000e88 20000e88 20000e90 20000e90     ... ... ... ... 
20000ea0:	20000e98 20000e98 20000ea0 20000ea0     ... ... ... ... 
20000eb0:	20000ea8 20000ea8 20000eb0 20000eb0     ... ... ... ... 
20000ec0:	20000eb8 20000eb8 20000ec0 20000ec0     ... ... ... ... 
20000ed0:	20000ec8 20000ec8 20000ed0 20000ed0     ... ... ... ... 
20000ee0:	20000ed8 20000ed8 20000ee0 20000ee0     ... ... ... ... 
20000ef0:	20000ee8 20000ee8 20000ef0 20000ef0     ... ... ... ... 
20000f00:	20000ef8 20000ef8 20000f00 20000f00     ... ... ... ... 
20000f10:	20000f08 20000f08 20000f10 20000f10     ... ... ... ... 
20000f20:	20000f18 20000f18 20000f20 20000f20     ... ...  ..  .. 
20000f30:	20000f28 20000f28 20000f30 20000f30     (.. (.. 0.. 0.. 
20000f40:	20000f38 20000f38 20000f40 20000f40     8.. 8.. @.. @.. 
20000f50:	20000f48 20000f48 20000f50 20000f50     H.. H.. P.. P.. 
20000f60:	20000f58 20000f58 20000f60 20000f60     X.. X.. `.. `.. 
20000f70:	20000f68 20000f68 20000f70 20000f70     h.. h.. p.. p.. 
20000f80:	20000f78 20000f78 20000f80 20000f80     x.. x.. ... ... 
20000f90:	20000f88 20000f88 20000f90 20000f90     ... ... ... ... 
20000fa0:	20000f98 20000f98 20000fa0 20000fa0     ... ... ... ... 
20000fb0:	20000fa8 20000fa8 20000fb0 20000fb0     ... ... ... ... 
20000fc0:	20000fb8 20000fb8 20000fc0 20000fc0     ... ... ... ... 

20000fd0 <__malloc_sbrk_base>:
20000fd0:	ffffffff                                ....

20000fd4 <__malloc_trim_threshold>:
20000fd4:	00020000                                ....
